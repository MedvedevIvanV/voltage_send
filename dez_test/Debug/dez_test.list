
dez_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d708  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800d900  0800d900  0000e900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800deac  0800deac  0000f1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800deac  0800deac  0000eeac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800deb4  0800deb4  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800deb4  0800deb4  0000eeb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800deb8  0800deb8  0000eeb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800debc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200001d8  0800e094  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  0800e094  0000f4fc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181b0  00000000  00000000  0000f20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000307b  00000000  00000000  000273be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  0002a440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f42  00000000  00000000  0002b828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bf2c  00000000  00000000  0002c76a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168bc  00000000  00000000  00058696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119a68  00000000  00000000  0006ef52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001889ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cdc  00000000  00000000  00188a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018f6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001d8 	.word	0x200001d8
 8000214:	00000000 	.word	0x00000000
 8000218:	0800d8e8 	.word	0x0800d8e8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001dc 	.word	0x200001dc
 8000234:	0800d8e8 	.word	0x0800d8e8

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	@ 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2iz>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b28:	d215      	bcs.n	8000b56 <__aeabi_d2iz+0x36>
 8000b2a:	d511      	bpl.n	8000b50 <__aeabi_d2iz+0x30>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d912      	bls.n	8000b5c <__aeabi_d2iz+0x3c>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d105      	bne.n	8000b68 <__aeabi_d2iz+0x48>
 8000b5c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	bf08      	it	eq
 8000b62:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_d2uiz>:
 8000b70:	004a      	lsls	r2, r1, #1
 8000b72:	d211      	bcs.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b78:	d211      	bcs.n	8000b9e <__aeabi_d2uiz+0x2e>
 8000b7a:	d50d      	bpl.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d40e      	bmi.n	8000ba4 <__aeabi_d2uiz+0x34>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_d2uiz+0x3a>
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b9e6 	b.w	8001034 <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f83c 	bl	8000cec <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_d2lz>:
 8000c80:	b538      	push	{r3, r4, r5, lr}
 8000c82:	2200      	movs	r2, #0
 8000c84:	2300      	movs	r3, #0
 8000c86:	4604      	mov	r4, r0
 8000c88:	460d      	mov	r5, r1
 8000c8a:	f7ff ff0b 	bl	8000aa4 <__aeabi_dcmplt>
 8000c8e:	b928      	cbnz	r0, 8000c9c <__aeabi_d2lz+0x1c>
 8000c90:	4620      	mov	r0, r4
 8000c92:	4629      	mov	r1, r5
 8000c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c98:	f000 b80a 	b.w	8000cb0 <__aeabi_d2ulz>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ca2:	f000 f805 	bl	8000cb0 <__aeabi_d2ulz>
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	bd38      	pop	{r3, r4, r5, pc}
 8000cae:	bf00      	nop

08000cb0 <__aeabi_d2ulz>:
 8000cb0:	b5d0      	push	{r4, r6, r7, lr}
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <__aeabi_d2ulz+0x34>)
 8000cb6:	4606      	mov	r6, r0
 8000cb8:	460f      	mov	r7, r1
 8000cba:	f7ff fc81 	bl	80005c0 <__aeabi_dmul>
 8000cbe:	f7ff ff57 	bl	8000b70 <__aeabi_d2uiz>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	f7ff fc02 	bl	80004cc <__aeabi_ui2d>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <__aeabi_d2ulz+0x38>)
 8000ccc:	f7ff fc78 	bl	80005c0 <__aeabi_dmul>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	4639      	mov	r1, r7
 8000cd8:	f7ff faba 	bl	8000250 <__aeabi_dsub>
 8000cdc:	f7ff ff48 	bl	8000b70 <__aeabi_d2uiz>
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce4:	3df00000 	.word	0x3df00000
 8000ce8:	41f00000 	.word	0x41f00000

08000cec <__udivmoddi4>:
 8000cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cf0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000cf2:	4688      	mov	r8, r1
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	468e      	mov	lr, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d14a      	bne.n	8000d92 <__udivmoddi4+0xa6>
 8000cfc:	428a      	cmp	r2, r1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	d95f      	bls.n	8000dc2 <__udivmoddi4+0xd6>
 8000d02:	fab2 f682 	clz	r6, r2
 8000d06:	b14e      	cbz	r6, 8000d1c <__udivmoddi4+0x30>
 8000d08:	f1c6 0320 	rsb	r3, r6, #32
 8000d0c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d10:	40b7      	lsls	r7, r6
 8000d12:	40b4      	lsls	r4, r6
 8000d14:	fa20 f303 	lsr.w	r3, r0, r3
 8000d18:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d1c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d20:	fa1f fc87 	uxth.w	ip, r7
 8000d24:	0c23      	lsrs	r3, r4, #16
 8000d26:	fbbe f1f8 	udiv	r1, lr, r8
 8000d2a:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d32:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x5e>
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d40:	d202      	bcs.n	8000d48 <__udivmoddi4+0x5c>
 8000d42:	429a      	cmp	r2, r3
 8000d44:	f200 8154 	bhi.w	8000ff0 <__udivmoddi4+0x304>
 8000d48:	4601      	mov	r1, r0
 8000d4a:	1a9b      	subs	r3, r3, r2
 8000d4c:	b2a2      	uxth	r2, r4
 8000d4e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d52:	fb08 3310 	mls	r3, r8, r0, r3
 8000d56:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000d5e:	4594      	cmp	ip, r2
 8000d60:	d90b      	bls.n	8000d7a <__udivmoddi4+0x8e>
 8000d62:	18ba      	adds	r2, r7, r2
 8000d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d68:	bf2c      	ite	cs
 8000d6a:	2401      	movcs	r4, #1
 8000d6c:	2400      	movcc	r4, #0
 8000d6e:	4594      	cmp	ip, r2
 8000d70:	d902      	bls.n	8000d78 <__udivmoddi4+0x8c>
 8000d72:	2c00      	cmp	r4, #0
 8000d74:	f000 813f 	beq.w	8000ff6 <__udivmoddi4+0x30a>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7e:	eba2 020c 	sub.w	r2, r2, ip
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa2>
 8000d86:	40f2      	lsrs	r2, r6
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e9c5 2300 	strd	r2, r3, [r5]
 8000d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xb6>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb0>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d14e      	bne.n	8000e48 <__udivmoddi4+0x15c>
 8000daa:	4543      	cmp	r3, r8
 8000dac:	f0c0 8112 	bcc.w	8000fd4 <__udivmoddi4+0x2e8>
 8000db0:	4282      	cmp	r2, r0
 8000db2:	f240 810f 	bls.w	8000fd4 <__udivmoddi4+0x2e8>
 8000db6:	4608      	mov	r0, r1
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d0e8      	beq.n	8000d8e <__udivmoddi4+0xa2>
 8000dbc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dc0:	e7e5      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	f000 80ac 	beq.w	8000f20 <__udivmoddi4+0x234>
 8000dc8:	fab2 f682 	clz	r6, r2
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	f040 80bb 	bne.w	8000f48 <__udivmoddi4+0x25c>
 8000dd2:	1a8b      	subs	r3, r1, r2
 8000dd4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000dd8:	b2bc      	uxth	r4, r7
 8000dda:	2101      	movs	r1, #1
 8000ddc:	0c02      	lsrs	r2, r0, #16
 8000dde:	b280      	uxth	r0, r0
 8000de0:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000de8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000dec:	fb04 f20c 	mul.w	r2, r4, ip
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d90e      	bls.n	8000e12 <__udivmoddi4+0x126>
 8000df4:	18fb      	adds	r3, r7, r3
 8000df6:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dfa:	bf2c      	ite	cs
 8000dfc:	f04f 0901 	movcs.w	r9, #1
 8000e00:	f04f 0900 	movcc.w	r9, #0
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d903      	bls.n	8000e10 <__udivmoddi4+0x124>
 8000e08:	f1b9 0f00 	cmp.w	r9, #0
 8000e0c:	f000 80ec 	beq.w	8000fe8 <__udivmoddi4+0x2fc>
 8000e10:	46c4      	mov	ip, r8
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e1c:	fb04 f408 	mul.w	r4, r4, r8
 8000e20:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e24:	4294      	cmp	r4, r2
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x154>
 8000e28:	18ba      	adds	r2, r7, r2
 8000e2a:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e2e:	bf2c      	ite	cs
 8000e30:	2001      	movcs	r0, #1
 8000e32:	2000      	movcc	r0, #0
 8000e34:	4294      	cmp	r4, r2
 8000e36:	d902      	bls.n	8000e3e <__udivmoddi4+0x152>
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	f000 80d1 	beq.w	8000fe0 <__udivmoddi4+0x2f4>
 8000e3e:	4698      	mov	r8, r3
 8000e40:	1b12      	subs	r2, r2, r4
 8000e42:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e46:	e79d      	b.n	8000d84 <__udivmoddi4+0x98>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa08 f401 	lsl.w	r4, r8, r1
 8000e52:	fa00 f901 	lsl.w	r9, r0, r1
 8000e56:	fa22 f706 	lsr.w	r7, r2, r6
 8000e5a:	fa28 f806 	lsr.w	r8, r8, r6
 8000e5e:	408a      	lsls	r2, r1
 8000e60:	431f      	orrs	r7, r3
 8000e62:	fa20 f306 	lsr.w	r3, r0, r6
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	4323      	orrs	r3, r4
 8000e6a:	fa1f fc87 	uxth.w	ip, r7
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fbb8 fef0 	udiv	lr, r8, r0
 8000e74:	fb00 881e 	mls	r8, r0, lr, r8
 8000e78:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000e7c:	fb0e f80c 	mul.w	r8, lr, ip
 8000e80:	45a0      	cmp	r8, r4
 8000e82:	d90e      	bls.n	8000ea2 <__udivmoddi4+0x1b6>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8a:	bf2c      	ite	cs
 8000e8c:	f04f 0b01 	movcs.w	fp, #1
 8000e90:	f04f 0b00 	movcc.w	fp, #0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d903      	bls.n	8000ea0 <__udivmoddi4+0x1b4>
 8000e98:	f1bb 0f00 	cmp.w	fp, #0
 8000e9c:	f000 80b8 	beq.w	8001010 <__udivmoddi4+0x324>
 8000ea0:	46d6      	mov	lr, sl
 8000ea2:	eba4 0408 	sub.w	r4, r4, r8
 8000ea6:	fa1f f883 	uxth.w	r8, r3
 8000eaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eae:	fb00 4413 	mls	r4, r0, r3, r4
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000eba:	45a4      	cmp	ip, r4
 8000ebc:	d90e      	bls.n	8000edc <__udivmoddi4+0x1f0>
 8000ebe:	193c      	adds	r4, r7, r4
 8000ec0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec4:	bf2c      	ite	cs
 8000ec6:	f04f 0801 	movcs.w	r8, #1
 8000eca:	f04f 0800 	movcc.w	r8, #0
 8000ece:	45a4      	cmp	ip, r4
 8000ed0:	d903      	bls.n	8000eda <__udivmoddi4+0x1ee>
 8000ed2:	f1b8 0f00 	cmp.w	r8, #0
 8000ed6:	f000 809f 	beq.w	8001018 <__udivmoddi4+0x32c>
 8000eda:	4603      	mov	r3, r0
 8000edc:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ee0:	eba4 040c 	sub.w	r4, r4, ip
 8000ee4:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ee8:	4564      	cmp	r4, ip
 8000eea:	4673      	mov	r3, lr
 8000eec:	46e0      	mov	r8, ip
 8000eee:	d302      	bcc.n	8000ef6 <__udivmoddi4+0x20a>
 8000ef0:	d107      	bne.n	8000f02 <__udivmoddi4+0x216>
 8000ef2:	45f1      	cmp	r9, lr
 8000ef4:	d205      	bcs.n	8000f02 <__udivmoddi4+0x216>
 8000ef6:	ebbe 0302 	subs.w	r3, lr, r2
 8000efa:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000efe:	3801      	subs	r0, #1
 8000f00:	46e0      	mov	r8, ip
 8000f02:	b15d      	cbz	r5, 8000f1c <__udivmoddi4+0x230>
 8000f04:	ebb9 0203 	subs.w	r2, r9, r3
 8000f08:	eb64 0408 	sbc.w	r4, r4, r8
 8000f0c:	fa04 f606 	lsl.w	r6, r4, r6
 8000f10:	fa22 f301 	lsr.w	r3, r2, r1
 8000f14:	40cc      	lsrs	r4, r1
 8000f16:	431e      	orrs	r6, r3
 8000f18:	e9c5 6400 	strd	r6, r4, [r5]
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	e736      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000f20:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f24:	0c01      	lsrs	r1, r0, #16
 8000f26:	4614      	mov	r4, r2
 8000f28:	b280      	uxth	r0, r0
 8000f2a:	4696      	mov	lr, r2
 8000f2c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f30:	2620      	movs	r6, #32
 8000f32:	4690      	mov	r8, r2
 8000f34:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f38:	4610      	mov	r0, r2
 8000f3a:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f3e:	eba3 0308 	sub.w	r3, r3, r8
 8000f42:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f46:	e74b      	b.n	8000de0 <__udivmoddi4+0xf4>
 8000f48:	40b7      	lsls	r7, r6
 8000f4a:	f1c6 0320 	rsb	r3, r6, #32
 8000f4e:	fa01 f206 	lsl.w	r2, r1, r6
 8000f52:	fa21 f803 	lsr.w	r8, r1, r3
 8000f56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f5a:	fa20 f303 	lsr.w	r3, r0, r3
 8000f5e:	b2bc      	uxth	r4, r7
 8000f60:	40b0      	lsls	r0, r6
 8000f62:	4313      	orrs	r3, r2
 8000f64:	0c02      	lsrs	r2, r0, #16
 8000f66:	0c19      	lsrs	r1, r3, #16
 8000f68:	b280      	uxth	r0, r0
 8000f6a:	fbb8 f9fe 	udiv	r9, r8, lr
 8000f6e:	fb0e 8819 	mls	r8, lr, r9, r8
 8000f72:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	4588      	cmp	r8, r1
 8000f7c:	d951      	bls.n	8001022 <__udivmoddi4+0x336>
 8000f7e:	1879      	adds	r1, r7, r1
 8000f80:	f109 3cff 	add.w	ip, r9, #4294967295
 8000f84:	bf2c      	ite	cs
 8000f86:	f04f 0a01 	movcs.w	sl, #1
 8000f8a:	f04f 0a00 	movcc.w	sl, #0
 8000f8e:	4588      	cmp	r8, r1
 8000f90:	d902      	bls.n	8000f98 <__udivmoddi4+0x2ac>
 8000f92:	f1ba 0f00 	cmp.w	sl, #0
 8000f96:	d031      	beq.n	8000ffc <__udivmoddi4+0x310>
 8000f98:	eba1 0108 	sub.w	r1, r1, r8
 8000f9c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa0:	fb09 f804 	mul.w	r8, r9, r4
 8000fa4:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fae:	4543      	cmp	r3, r8
 8000fb0:	d235      	bcs.n	800101e <__udivmoddi4+0x332>
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fb8:	bf2c      	ite	cs
 8000fba:	f04f 0a01 	movcs.w	sl, #1
 8000fbe:	f04f 0a00 	movcc.w	sl, #0
 8000fc2:	4543      	cmp	r3, r8
 8000fc4:	d2bb      	bcs.n	8000f3e <__udivmoddi4+0x252>
 8000fc6:	f1ba 0f00 	cmp.w	sl, #0
 8000fca:	d1b8      	bne.n	8000f3e <__udivmoddi4+0x252>
 8000fcc:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd0:	443b      	add	r3, r7
 8000fd2:	e7b4      	b.n	8000f3e <__udivmoddi4+0x252>
 8000fd4:	1a84      	subs	r4, r0, r2
 8000fd6:	eb68 0203 	sbc.w	r2, r8, r3
 8000fda:	2001      	movs	r0, #1
 8000fdc:	4696      	mov	lr, r2
 8000fde:	e6eb      	b.n	8000db8 <__udivmoddi4+0xcc>
 8000fe0:	443a      	add	r2, r7
 8000fe2:	f1a8 0802 	sub.w	r8, r8, #2
 8000fe6:	e72b      	b.n	8000e40 <__udivmoddi4+0x154>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	443b      	add	r3, r7
 8000fee:	e710      	b.n	8000e12 <__udivmoddi4+0x126>
 8000ff0:	3902      	subs	r1, #2
 8000ff2:	443b      	add	r3, r7
 8000ff4:	e6a9      	b.n	8000d4a <__udivmoddi4+0x5e>
 8000ff6:	443a      	add	r2, r7
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e6be      	b.n	8000d7a <__udivmoddi4+0x8e>
 8000ffc:	eba7 0808 	sub.w	r8, r7, r8
 8001000:	f1a9 0c02 	sub.w	ip, r9, #2
 8001004:	4441      	add	r1, r8
 8001006:	fbb1 f9fe 	udiv	r9, r1, lr
 800100a:	fb09 f804 	mul.w	r8, r9, r4
 800100e:	e7c9      	b.n	8000fa4 <__udivmoddi4+0x2b8>
 8001010:	f1ae 0e02 	sub.w	lr, lr, #2
 8001014:	443c      	add	r4, r7
 8001016:	e744      	b.n	8000ea2 <__udivmoddi4+0x1b6>
 8001018:	3b02      	subs	r3, #2
 800101a:	443c      	add	r4, r7
 800101c:	e75e      	b.n	8000edc <__udivmoddi4+0x1f0>
 800101e:	4649      	mov	r1, r9
 8001020:	e78d      	b.n	8000f3e <__udivmoddi4+0x252>
 8001022:	eba1 0108 	sub.w	r1, r1, r8
 8001026:	46cc      	mov	ip, r9
 8001028:	fbb1 f9fe 	udiv	r9, r1, lr
 800102c:	fb09 f804 	mul.w	r8, r9, r4
 8001030:	e7b8      	b.n	8000fa4 <__udivmoddi4+0x2b8>
 8001032:	bf00      	nop

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <read_voltage>:
/**
  * @brief Read voltage from ADC
  *
  */
static float read_voltage(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
    float voltage = 0.0f;
 8001042:	f04f 0300 	mov.w	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	615a      	str	r2, [r3, #20]

    // Конфигурация канала ADC
    sConfig.Channel = ADC_CHANNEL_5;
 8001058:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <read_voltage+0xa4>)
 800105a:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800105c:	2306      	movs	r3, #6
 800105e:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001064:	237f      	movs	r3, #127	@ 0x7f
 8001066:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001068:	2304      	movs	r3, #4
 800106a:	613b      	str	r3, [r7, #16]
    sConfig.Offset = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	4619      	mov	r1, r3
 8001074:	481a      	ldr	r0, [pc, #104]	@ (80010e0 <read_voltage+0xa8>)
 8001076:	f002 f811 	bl	800309c <HAL_ADC_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <read_voltage+0x4e>
    {
        return 0.0f;
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e023      	b.n	80010ce <read_voltage+0x96>
    }

    // Запуск преобразования ADC
    if (HAL_ADC_Start(&hadc1) == HAL_OK)
 8001086:	4816      	ldr	r0, [pc, #88]	@ (80010e0 <read_voltage+0xa8>)
 8001088:	f001 fe34 	bl	8002cf4 <HAL_ADC_Start>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d11c      	bne.n	80010cc <read_voltage+0x94>
    {
        // Ожидание завершения преобразования
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001092:	2164      	movs	r1, #100	@ 0x64
 8001094:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <read_voltage+0xa8>)
 8001096:	f001 ff1b 	bl	8002ed0 <HAL_ADC_PollForConversion>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d112      	bne.n	80010c6 <read_voltage+0x8e>
        {
            adcValue = HAL_ADC_GetValue(&hadc1);
 80010a0:	480f      	ldr	r0, [pc, #60]	@ (80010e0 <read_voltage+0xa8>)
 80010a2:	f001 ffed 	bl	8003080 <HAL_ADC_GetValue>
 80010a6:	61b8      	str	r0, [r7, #24]
            voltage = (float)adcValue * 3.3f / 4095.0f;
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80010e4 <read_voltage+0xac>
 80010b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010ba:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80010e8 <read_voltage+0xb0>
 80010be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        HAL_ADC_Stop(&hadc1);
 80010c6:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <read_voltage+0xa8>)
 80010c8:	f001 fece 	bl	8002e68 <HAL_ADC_Stop>
    }

    return voltage;
 80010cc:	69fb      	ldr	r3, [r7, #28]
}
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eeb0 0a67 	vmov.f32	s0, s15
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	14f00020 	.word	0x14f00020
 80010e0:	200001f4 	.word	0x200001f4
 80010e4:	40533333 	.word	0x40533333
 80010e8:	457ff000 	.word	0x457ff000

080010ec <read_temperature>:

/**
  * @brief Read temperature from internal sensor
  */
static float read_temperature(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
    TU1AdcValues adcValues = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
    GetAdcValues(&adcValues);
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 f818 	bl	8002134 <GetAdcValues>
    return adcValues.ChipTemperature;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	ee07 3a90 	vmov	s15, r3
}
 800110a:	eeb0 0a67 	vmov.f32	s0, s15
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_UART_RxCpltCallback>:

/**
  * @brief UART receive complete callback
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == LPUART1) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a2c      	ldr	r2, [pc, #176]	@ (80011d4 <HAL_UART_RxCpltCallback+0xc0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d153      	bne.n	80011ce <HAL_UART_RxCpltCallback+0xba>
        uart_last_rx_time = HAL_GetTick();
 8001126:	f001 fa25 	bl	8002574 <HAL_GetTick>
 800112a:	4603      	mov	r3, r0
 800112c:	4a2a      	ldr	r2, [pc, #168]	@ (80011d8 <HAL_UART_RxCpltCallback+0xc4>)
 800112e:	6013      	str	r3, [r2, #0]

        // Проверяем, не получено ли сообщение COMPLETE
        if (uart_rx_pos >= 8 && strncmp((char*)&uart_rx_buf[uart_rx_pos - 8], "COMPLETE", 8) == 0) {
 8001130:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <HAL_UART_RxCpltCallback+0xc8>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b07      	cmp	r3, #7
 8001136:	d922      	bls.n	800117e <HAL_UART_RxCpltCallback+0x6a>
 8001138:	4b28      	ldr	r3, [pc, #160]	@ (80011dc <HAL_UART_RxCpltCallback+0xc8>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	3b08      	subs	r3, #8
 800113e:	4a28      	ldr	r2, [pc, #160]	@ (80011e0 <HAL_UART_RxCpltCallback+0xcc>)
 8001140:	4413      	add	r3, r2
 8001142:	2208      	movs	r2, #8
 8001144:	4927      	ldr	r1, [pc, #156]	@ (80011e4 <HAL_UART_RxCpltCallback+0xd0>)
 8001146:	4618      	mov	r0, r3
 8001148:	f008 fbb5 	bl	80098b6 <strncmp>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d115      	bne.n	800117e <HAL_UART_RxCpltCallback+0x6a>
            complete_received = 1;
 8001152:	4b25      	ldr	r3, [pc, #148]	@ (80011e8 <HAL_UART_RxCpltCallback+0xd4>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
            uart_rx_pos = 0;
 8001158:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <HAL_UART_RxCpltCallback+0xc8>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
            memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 800115e:	2280      	movs	r2, #128	@ 0x80
 8001160:	2100      	movs	r1, #0
 8001162:	481f      	ldr	r0, [pc, #124]	@ (80011e0 <HAL_UART_RxCpltCallback+0xcc>)
 8001164:	f008 fb9f 	bl	80098a6 <memset>
            HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001168:	4b1c      	ldr	r3, [pc, #112]	@ (80011dc <HAL_UART_RxCpltCallback+0xc8>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <HAL_UART_RxCpltCallback+0xcc>)
 8001170:	4413      	add	r3, r2
 8001172:	2201      	movs	r2, #1
 8001174:	4619      	mov	r1, r3
 8001176:	481d      	ldr	r0, [pc, #116]	@ (80011ec <HAL_UART_RxCpltCallback+0xd8>)
 8001178:	f005 fa56 	bl	8006628 <HAL_UART_Receive_IT>
            return;
 800117c:	e027      	b.n	80011ce <HAL_UART_RxCpltCallback+0xba>
        }

        if(uart_rx_buf[uart_rx_pos] == '\n' || uart_rx_pos >= sizeof(uart_rx_buf)-1) {
 800117e:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <HAL_UART_RxCpltCallback+0xc8>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <HAL_UART_RxCpltCallback+0xcc>)
 8001186:	5c9b      	ldrb	r3, [r3, r2]
 8001188:	2b0a      	cmp	r3, #10
 800118a:	d003      	beq.n	8001194 <HAL_UART_RxCpltCallback+0x80>
 800118c:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <HAL_UART_RxCpltCallback+0xc8>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b7e      	cmp	r3, #126	@ 0x7e
 8001192:	d90c      	bls.n	80011ae <HAL_UART_RxCpltCallback+0x9a>
            uart_cmd_ready = 1;
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <HAL_UART_RxCpltCallback+0xdc>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
            uart_rx_buf[uart_rx_pos] = '\0';
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <HAL_UART_RxCpltCallback+0xc8>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <HAL_UART_RxCpltCallback+0xcc>)
 80011a2:	2100      	movs	r1, #0
 80011a4:	5499      	strb	r1, [r3, r2]
            HAL_UART_AbortReceive_IT(&hlpuart1);
 80011a6:	4811      	ldr	r0, [pc, #68]	@ (80011ec <HAL_UART_RxCpltCallback+0xd8>)
 80011a8:	f005 fa8a 	bl	80066c0 <HAL_UART_AbortReceive_IT>
 80011ac:	e00f      	b.n	80011ce <HAL_UART_RxCpltCallback+0xba>
        } else {
            uart_rx_pos++;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <HAL_UART_RxCpltCallback+0xc8>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <HAL_UART_RxCpltCallback+0xc8>)
 80011b8:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <HAL_UART_RxCpltCallback+0xc8>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <HAL_UART_RxCpltCallback+0xcc>)
 80011c2:	4413      	add	r3, r2
 80011c4:	2201      	movs	r2, #1
 80011c6:	4619      	mov	r1, r3
 80011c8:	4808      	ldr	r0, [pc, #32]	@ (80011ec <HAL_UART_RxCpltCallback+0xd8>)
 80011ca:	f005 fa2d 	bl	8006628 <HAL_UART_Receive_IT>
        }
    }
}
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40008000 	.word	0x40008000
 80011d8:	2000039c 	.word	0x2000039c
 80011dc:	20000398 	.word	0x20000398
 80011e0:	20000318 	.word	0x20000318
 80011e4:	0800d900 	.word	0x0800d900
 80011e8:	200003a5 	.word	0x200003a5
 80011ec:	2000025c 	.word	0x2000025c
 80011f0:	20000399 	.word	0x20000399

080011f4 <enter_sleep_mode>:

/**
  * @brief Переход в режим сна с настройкой RTC
  */
static void enter_sleep_mode(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
    // ЕСЛИ USB_STATUS = 1, ТО НЕ ПЕРЕХОДИМ В СОН И НЕ ОТКЛЮЧАЕМ ПИНЫ!
    if (usb_connection_status == 1) {
 80011fa:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <enter_sleep_mode+0x60>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b01      	cmp	r3, #1
 8001202:	d022      	beq.n	800124a <enter_sleep_mode+0x56>
        return;
    }

    // Выключаем пины PB0 и PC13 только если USB_STATUS = 0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2101      	movs	r1, #1
 8001208:	4813      	ldr	r0, [pc, #76]	@ (8001258 <enter_sleep_mode+0x64>)
 800120a:	f003 f8ff 	bl	800440c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001214:	4811      	ldr	r0, [pc, #68]	@ (800125c <enter_sleep_mode+0x68>)
 8001216:	f003 f8f9 	bl	800440c <HAL_GPIO_WritePin>

    // Настраиваем RTC WakeUp для периода сна
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800121a:	4811      	ldr	r0, [pc, #68]	@ (8001260 <enter_sleep_mode+0x6c>)
 800121c:	f005 f890 	bl	8006340 <HAL_RTCEx_DeactivateWakeUpTimer>

    // Расчет для периода сна: LSI = ~32.768 kHz, делитель 16 -> 2048 Гц
    // 2048 Гц * период_сек = количество тиков
    uint32_t wakeup_ticks = (period_sec * 2048) - 1;
 8001220:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <enter_sleep_mode+0x70>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	02db      	lsls	r3, r3, #11
 8001226:	3b01      	subs	r3, #1
 8001228:	607b      	str	r3, [r7, #4]
    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_ticks, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 800122a:	2300      	movs	r3, #0
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	480b      	ldr	r0, [pc, #44]	@ (8001260 <enter_sleep_mode+0x6c>)
 8001232:	f004 ffff 	bl	8006234 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <enter_sleep_mode+0x4c>
    {
        Error_Handler();
 800123c:	f000 fc72 	bl	8001b24 <Error_Handler>
    }

    // Переходим в режим сна
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001240:	2101      	movs	r1, #1
 8001242:	2000      	movs	r0, #0
 8001244:	f003 f8fa 	bl	800443c <HAL_PWR_EnterSLEEPMode>
 8001248:	e000      	b.n	800124c <enter_sleep_mode+0x58>
        return;
 800124a:	bf00      	nop
}
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000
 8001258:	42020400 	.word	0x42020400
 800125c:	42020800 	.word	0x42020800
 8001260:	200002f0 	.word	0x200002f0
 8001264:	200003a0 	.word	0x200003a0

08001268 <process_uart_command>:
/**
  * @brief Process UART command from main MCU
  */
// Функция приема данных
static void process_uart_command(uint8_t* data, uint8_t len)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b090      	sub	sp, #64	@ 0x40
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
    char* date_ptr = strstr((char*)data, "DATE:");
 8001274:	4964      	ldr	r1, [pc, #400]	@ (8001408 <process_uart_command+0x1a0>)
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f008 fb42 	bl	8009900 <strstr>
 800127c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    char* time_ptr = strstr((char*)data, ";TIME:");
 800127e:	4963      	ldr	r1, [pc, #396]	@ (800140c <process_uart_command+0x1a4>)
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f008 fb3d 	bl	8009900 <strstr>
 8001286:	63b8      	str	r0, [r7, #56]	@ 0x38
    char* period_ptr = strstr((char*)data, ";PERIOD:");
 8001288:	4961      	ldr	r1, [pc, #388]	@ (8001410 <process_uart_command+0x1a8>)
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f008 fb38 	bl	8009900 <strstr>
 8001290:	6378      	str	r0, [r7, #52]	@ 0x34
    char* usb_ptr = strstr((char*)data, ";USB:");
 8001292:	4960      	ldr	r1, [pc, #384]	@ (8001414 <process_uart_command+0x1ac>)
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f008 fb33 	bl	8009900 <strstr>
 800129a:	6338      	str	r0, [r7, #48]	@ 0x30

    if(date_ptr && time_ptr && period_ptr && usb_ptr) {
 800129c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 809b 	beq.w	80013da <process_uart_command+0x172>
 80012a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8097 	beq.w	80013da <process_uart_command+0x172>
 80012ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8093 	beq.w	80013da <process_uart_command+0x172>
 80012b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 808f 	beq.w	80013da <process_uart_command+0x172>
        char date_str[16] = {0};
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
        char time_str[16] = {0};
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
        uint8_t usb_status = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	72fb      	strb	r3, [r7, #11]

        // Извлекаем дату, время, период и статус USB из команды
        sscanf(date_ptr, "DATE:%15[^;]", date_ptr);
 80012dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012de:	494e      	ldr	r1, [pc, #312]	@ (8001418 <process_uart_command+0x1b0>)
 80012e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80012e2:	f008 fa6f 	bl	80097c4 <siscanf>
        sscanf(time_ptr, ";TIME:%15[^;]", time_ptr);
 80012e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80012e8:	494c      	ldr	r1, [pc, #304]	@ (800141c <process_uart_command+0x1b4>)
 80012ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80012ec:	f008 fa6a 	bl	80097c4 <siscanf>
        sscanf(period_ptr, ";PERIOD:%lu", &period_sec);
 80012f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001420 <process_uart_command+0x1b8>)
 80012f2:	494c      	ldr	r1, [pc, #304]	@ (8001424 <process_uart_command+0x1bc>)
 80012f4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80012f6:	f008 fa65 	bl	80097c4 <siscanf>
        sscanf(usb_ptr, ";USB:%hhu", &usb_status);
 80012fa:	f107 030b 	add.w	r3, r7, #11
 80012fe:	461a      	mov	r2, r3
 8001300:	4949      	ldr	r1, [pc, #292]	@ (8001428 <process_uart_command+0x1c0>)
 8001302:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001304:	f008 fa5e 	bl	80097c4 <siscanf>

        // Копируем только нужные части
        strncpy(date_str, date_ptr + 5, 10); // "DATE:YYYY-MM-DD"
 8001308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800130a:	1d59      	adds	r1, r3, #5
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	220a      	movs	r2, #10
 8001312:	4618      	mov	r0, r3
 8001314:	f008 fae1 	bl	80098da <strncpy>
        strncpy(time_str, time_ptr + 6, 8);  // "TIME:HH:MM:SS"
 8001318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800131a:	1d99      	adds	r1, r3, #6
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2208      	movs	r2, #8
 8001322:	4618      	mov	r0, r3
 8001324:	f008 fad9 	bl	80098da <strncpy>

        // УСТАНАВЛИВАЕМ ФЛАГ, ЧТО ПЕРИОД ПОЛУЧЕН
        period_received = 1;
 8001328:	4b40      	ldr	r3, [pc, #256]	@ (800142c <process_uart_command+0x1c4>)
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]

        // Сохраняем статус USB для дальнейшего использования
        usb_connection_status = usb_status;
 800132e:	7afa      	ldrb	r2, [r7, #11]
 8001330:	4b3f      	ldr	r3, [pc, #252]	@ (8001430 <process_uart_command+0x1c8>)
 8001332:	701a      	strb	r2, [r3, #0]

        // Отправляем ответ с напряжением и температурой
        send_datetime_with_voltage_and_temp(date_str, time_str);
 8001334:	f107 020c 	add.w	r2, r7, #12
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f884 	bl	800144c <send_datetime_with_voltage_and_temp>

        // ЕСЛИ USB_STATUS = 1, ТО НЕ ПЕРЕХОДИМ В СОН И НЕ ОТКЛЮЧАЕМ ПИНЫ!
        if (usb_connection_status == 0) {
 8001344:	4b3a      	ldr	r3, [pc, #232]	@ (8001430 <process_uart_command+0x1c8>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d145      	bne.n	80013da <process_uart_command+0x172>
            // Ждем COMPLETE сообщение или таймаут 10 секунд
            uint32_t start_time = HAL_GetTick();
 800134e:	f001 f911 	bl	8002574 <HAL_GetTick>
 8001352:	62f8      	str	r0, [r7, #44]	@ 0x2c
            complete_received = 0;
 8001354:	4b37      	ldr	r3, [pc, #220]	@ (8001434 <process_uart_command+0x1cc>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]

            while ((HAL_GetTick() - start_time) < COMPLETE_TIMEOUT_MS && !complete_received) {
 800135a:	e02e      	b.n	80013ba <process_uart_command+0x152>
                // Обрабатываем входящие UART данные
                if(uart_cmd_ready) {
 800135c:	4b36      	ldr	r3, [pc, #216]	@ (8001438 <process_uart_command+0x1d0>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d008      	beq.n	8001378 <process_uart_command+0x110>
                    uart_cmd_ready = 0;
 8001366:	4b34      	ldr	r3, [pc, #208]	@ (8001438 <process_uart_command+0x1d0>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
                    // Если пришла новая команда, обрабатываем ее
                    process_uart_command(uart_rx_buf, uart_rx_pos);
 800136c:	4b33      	ldr	r3, [pc, #204]	@ (800143c <process_uart_command+0x1d4>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	4833      	ldr	r0, [pc, #204]	@ (8001440 <process_uart_command+0x1d8>)
 8001374:	f7ff ff78 	bl	8001268 <process_uart_command>
                }

                // Таймаут UART приема
                if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_TIMEOUT_MS) {
 8001378:	4b30      	ldr	r3, [pc, #192]	@ (800143c <process_uart_command+0x1d4>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d019      	beq.n	80013b4 <process_uart_command+0x14c>
 8001380:	f001 f8f8 	bl	8002574 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	4b2f      	ldr	r3, [pc, #188]	@ (8001444 <process_uart_command+0x1dc>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b64      	cmp	r3, #100	@ 0x64
 800138e:	d911      	bls.n	80013b4 <process_uart_command+0x14c>
                    uart_rx_pos = 0;
 8001390:	4b2a      	ldr	r3, [pc, #168]	@ (800143c <process_uart_command+0x1d4>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
                    memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8001396:	2280      	movs	r2, #128	@ 0x80
 8001398:	2100      	movs	r1, #0
 800139a:	4829      	ldr	r0, [pc, #164]	@ (8001440 <process_uart_command+0x1d8>)
 800139c:	f008 fa83 	bl	80098a6 <memset>
                    HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 80013a0:	4b26      	ldr	r3, [pc, #152]	@ (800143c <process_uart_command+0x1d4>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <process_uart_command+0x1d8>)
 80013a8:	4413      	add	r3, r2
 80013aa:	2201      	movs	r2, #1
 80013ac:	4619      	mov	r1, r3
 80013ae:	4826      	ldr	r0, [pc, #152]	@ (8001448 <process_uart_command+0x1e0>)
 80013b0:	f005 f93a 	bl	8006628 <HAL_UART_Receive_IT>
                }

                HAL_Delay(10);
 80013b4:	200a      	movs	r0, #10
 80013b6:	f001 f8e9 	bl	800258c <HAL_Delay>
            while ((HAL_GetTick() - start_time) < COMPLETE_TIMEOUT_MS && !complete_received) {
 80013ba:	f001 f8db 	bl	8002574 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d804      	bhi.n	80013d6 <process_uart_command+0x16e>
 80013cc:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <process_uart_command+0x1cc>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0c2      	beq.n	800135c <process_uart_command+0xf4>
            }

            // Переходим в сон только если USB_STATUS = 0
            enter_sleep_mode();
 80013d6:	f7ff ff0d 	bl	80011f4 <enter_sleep_mode>
        }
        // ЕСЛИ USB_STATUS = 1, ТО ПРОСТО ПРОДОЛЖАЕМ РАБОТУ В НОРМАЛЬНОМ РЕЖИМЕ
    }

    uart_rx_pos = 0;
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <process_uart_command+0x1d4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
    memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 80013e0:	2280      	movs	r2, #128	@ 0x80
 80013e2:	2100      	movs	r1, #0
 80013e4:	4816      	ldr	r0, [pc, #88]	@ (8001440 <process_uart_command+0x1d8>)
 80013e6:	f008 fa5e 	bl	80098a6 <memset>
    HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 80013ea:	4b14      	ldr	r3, [pc, #80]	@ (800143c <process_uart_command+0x1d4>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <process_uart_command+0x1d8>)
 80013f2:	4413      	add	r3, r2
 80013f4:	2201      	movs	r2, #1
 80013f6:	4619      	mov	r1, r3
 80013f8:	4813      	ldr	r0, [pc, #76]	@ (8001448 <process_uart_command+0x1e0>)
 80013fa:	f005 f915 	bl	8006628 <HAL_UART_Receive_IT>
}
 80013fe:	bf00      	nop
 8001400:	3740      	adds	r7, #64	@ 0x40
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	0800d90c 	.word	0x0800d90c
 800140c:	0800d914 	.word	0x0800d914
 8001410:	0800d91c 	.word	0x0800d91c
 8001414:	0800d928 	.word	0x0800d928
 8001418:	0800d930 	.word	0x0800d930
 800141c:	0800d940 	.word	0x0800d940
 8001420:	200003a0 	.word	0x200003a0
 8001424:	0800d950 	.word	0x0800d950
 8001428:	0800d95c 	.word	0x0800d95c
 800142c:	200003a6 	.word	0x200003a6
 8001430:	20000000 	.word	0x20000000
 8001434:	200003a5 	.word	0x200003a5
 8001438:	20000399 	.word	0x20000399
 800143c:	20000398 	.word	0x20000398
 8001440:	20000318 	.word	0x20000318
 8001444:	2000039c 	.word	0x2000039c
 8001448:	2000025c 	.word	0x2000025c

0800144c <send_datetime_with_voltage_and_temp>:

/**
  * @brief Send datetime with voltage and temperature to main MCU
  */
static void send_datetime_with_voltage_and_temp(char* date_str, char* time_str)
{
 800144c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144e:	b0ab      	sub	sp, #172	@ 0xac
 8001450:	af06      	add	r7, sp, #24
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
    float voltage = read_voltage();
 8001456:	f7ff fdef 	bl	8001038 <read_voltage>
 800145a:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
    float temperature = read_temperature();
 800145e:	f7ff fe45 	bl	80010ec <read_temperature>
 8001462:	ed87 0a22 	vstr	s0, [r7, #136]	@ 0x88
    char uart_msg[128];

    // Форматируем сообщение в том же формате, что и во втором коде
    snprintf(uart_msg, sizeof(uart_msg),
 8001466:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <send_datetime_with_voltage_and_temp+0x74>)
 8001468:	681e      	ldr	r6, [r3, #0]
 800146a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800146e:	f7ff f84f 	bl	8000510 <__aeabi_f2d>
 8001472:	4604      	mov	r4, r0
 8001474:	460d      	mov	r5, r1
 8001476:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800147a:	f7ff f849 	bl	8000510 <__aeabi_f2d>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	f107 0008 	add.w	r0, r7, #8
 8001486:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800148a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800148e:	9601      	str	r6, [sp, #4]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a0b      	ldr	r2, [pc, #44]	@ (80014c4 <send_datetime_with_voltage_and_temp+0x78>)
 8001498:	2180      	movs	r1, #128	@ 0x80
 800149a:	f008 f93b 	bl	8009714 <sniprintf>
           "DATE:%s;TIME:%s;PERIOD:%lu;VOLTAGE:%.4f;TEMP:%.2f\r\n",
           date_str, time_str, period_sec, voltage, temperature);

    HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_msg, strlen(uart_msg), 100);
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe fec8 	bl	8000238 <strlen>
 80014a8:	4603      	mov	r3, r0
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	f107 0108 	add.w	r1, r7, #8
 80014b0:	2364      	movs	r3, #100	@ 0x64
 80014b2:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <send_datetime_with_voltage_and_temp+0x7c>)
 80014b4:	f005 f82a 	bl	800650c <HAL_UART_Transmit>
}
 80014b8:	bf00      	nop
 80014ba:	3794      	adds	r7, #148	@ 0x94
 80014bc:	46bd      	mov	sp, r7
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c0:	200003a0 	.word	0x200003a0
 80014c4:	0800d968 	.word	0x0800d968
 80014c8:	2000025c 	.word	0x2000025c

080014cc <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
  * @brief  Обработчик прерывания WakeUp Timer.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  // Устанавливаем флаг пробуждения
  wakeup_flag = 1;
 80014d4:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	200003a4 	.word	0x200003a4

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ee:	b0a9      	sub	sp, #164	@ 0xa4
 80014f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f2:	f000 ffd4 	bl	800249e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f6:	f000 f90d 	bl	8001714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fa:	f000 fa85 	bl	8001a08 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80014fe:	f000 f9ed 	bl	80018dc <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001502:	f000 f951 	bl	80017a8 <MX_ADC1_Init>
  MX_RTC_Init();
 8001506:	f000 fa35 	bl	8001974 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // Включаем обработчик прерывания RTC WakeUp
  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	2002      	movs	r0, #2
 8001510:	f002 fcf5 	bl	8003efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001514:	2002      	movs	r0, #2
 8001516:	f002 fd0c 	bl	8003f32 <HAL_NVIC_EnableIRQ>

  // Включаем пины PC13 и PB0 по умолчанию
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001520:	486f      	ldr	r0, [pc, #444]	@ (80016e0 <main+0x1f4>)
 8001522:	f002 ff73 	bl	800440c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	2101      	movs	r1, #1
 800152a:	486e      	ldr	r0, [pc, #440]	@ (80016e4 <main+0x1f8>)
 800152c:	f002 ff6e 	bl	800440c <HAL_GPIO_WritePin>

  // Инициализируем UART прием
  uart_last_rx_time = HAL_GetTick();
 8001530:	f001 f820 	bl	8002574 <HAL_GetTick>
 8001534:	4603      	mov	r3, r0
 8001536:	4a6c      	ldr	r2, [pc, #432]	@ (80016e8 <main+0x1fc>)
 8001538:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 800153a:	4b6c      	ldr	r3, [pc, #432]	@ (80016ec <main+0x200>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	4b6b      	ldr	r3, [pc, #428]	@ (80016f0 <main+0x204>)
 8001542:	4413      	add	r3, r2
 8001544:	2201      	movs	r2, #1
 8001546:	4619      	mov	r1, r3
 8001548:	486a      	ldr	r0, [pc, #424]	@ (80016f4 <main+0x208>)
 800154a:	f005 f86d 	bl	8006628 <HAL_UART_Receive_IT>

  // СБРАСЫВАЕМ ФЛАГ ПОЛУЧЕНИЯ ПЕРИОДА ПРИ СТАРТЕ
  period_received = 0;
 800154e:	4b6a      	ldr	r3, [pc, #424]	@ (80016f8 <main+0x20c>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // ГЛАВНОЕ ИЗМЕНЕНИЕ: Проверяем флаг пробуждения от RTC ТОЛЬКО если период уже получен И USB_STATUS = 0
	     if(wakeup_flag && period_received && (usb_connection_status == 0))
 8001554:	4b69      	ldr	r3, [pc, #420]	@ (80016fc <main+0x210>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8091 	beq.w	8001682 <main+0x196>
 8001560:	4b65      	ldr	r3, [pc, #404]	@ (80016f8 <main+0x20c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 808b 	beq.w	8001682 <main+0x196>
 800156c:	4b64      	ldr	r3, [pc, #400]	@ (8001700 <main+0x214>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	f040 8085 	bne.w	8001682 <main+0x196>
	     {
	         // Сбрасываем флаг
	         wakeup_flag = 0;
 8001578:	4b60      	ldr	r3, [pc, #384]	@ (80016fc <main+0x210>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]

	         // Включаем пины PC13 и PB0
	         HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001584:	4856      	ldr	r0, [pc, #344]	@ (80016e0 <main+0x1f4>)
 8001586:	f002 ff41 	bl	800440c <HAL_GPIO_WritePin>
	         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	2101      	movs	r1, #1
 800158e:	4855      	ldr	r0, [pc, #340]	@ (80016e4 <main+0x1f8>)
 8001590:	f002 ff3c 	bl	800440c <HAL_GPIO_WritePin>

	         // Ждем 3 секунды после включения
	         HAL_Delay(3000);
 8001594:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001598:	f000 fff8 	bl	800258c <HAL_Delay>

	         // Измеряем напряжение и температуру
	         float voltage = read_voltage();
 800159c:	f7ff fd4c 	bl	8001038 <read_voltage>
 80015a0:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
	         float temperature = read_temperature();
 80015a4:	f7ff fda2 	bl	80010ec <read_temperature>
 80015a8:	ed87 0a22 	vstr	s0, [r7, #136]	@ 0x88

	         // Формируем и отправляем сообщение основному МК
	         char uart_msg[128];
	         snprintf(uart_msg, sizeof(uart_msg),
 80015ac:	4b55      	ldr	r3, [pc, #340]	@ (8001704 <main+0x218>)
 80015ae:	681e      	ldr	r6, [r3, #0]
 80015b0:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80015b4:	f7fe ffac 	bl	8000510 <__aeabi_f2d>
 80015b8:	4604      	mov	r4, r0
 80015ba:	460d      	mov	r5, r1
 80015bc:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80015c0:	f7fe ffa6 	bl	8000510 <__aeabi_f2d>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	1d38      	adds	r0, r7, #4
 80015ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015ce:	e9cd 4500 	strd	r4, r5, [sp]
 80015d2:	4633      	mov	r3, r6
 80015d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001708 <main+0x21c>)
 80015d6:	2180      	movs	r1, #128	@ 0x80
 80015d8:	f008 f89c 	bl	8009714 <sniprintf>
	                "DATE:2000-01-01;TIME:00:00:00;PERIOD:%lu;VOLTAGE:%.4f;TEMP:%.2f\r\n",
	                period_sec, voltage, temperature);

	         HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_msg, strlen(uart_msg), 100);
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe fe2a 	bl	8000238 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	1d39      	adds	r1, r7, #4
 80015ea:	2364      	movs	r3, #100	@ 0x64
 80015ec:	4841      	ldr	r0, [pc, #260]	@ (80016f4 <main+0x208>)
 80015ee:	f004 ff8d 	bl	800650c <HAL_UART_Transmit>

	         // Ждем COMPLETE сообщение или таймаут 10 секунд
	         uint32_t start_time = HAL_GetTick();
 80015f2:	f000 ffbf 	bl	8002574 <HAL_GetTick>
 80015f6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	         complete_received = 0;
 80015fa:	4b44      	ldr	r3, [pc, #272]	@ (800170c <main+0x220>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]

	         while ((HAL_GetTick() - start_time) < COMPLETE_TIMEOUT_MS && !complete_received) {
 8001600:	e02e      	b.n	8001660 <main+0x174>
	             // Обрабатываем входящие UART данные
	             if(uart_cmd_ready) {
 8001602:	4b43      	ldr	r3, [pc, #268]	@ (8001710 <main+0x224>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <main+0x132>
	                 uart_cmd_ready = 0;
 800160c:	4b40      	ldr	r3, [pc, #256]	@ (8001710 <main+0x224>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
	                 process_uart_command(uart_rx_buf, uart_rx_pos);
 8001612:	4b36      	ldr	r3, [pc, #216]	@ (80016ec <main+0x200>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	4835      	ldr	r0, [pc, #212]	@ (80016f0 <main+0x204>)
 800161a:	f7ff fe25 	bl	8001268 <process_uart_command>
	             }

	             // Таймаут UART приема
	             if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_TIMEOUT_MS) {
 800161e:	4b33      	ldr	r3, [pc, #204]	@ (80016ec <main+0x200>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d019      	beq.n	800165a <main+0x16e>
 8001626:	f000 ffa5 	bl	8002574 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	4b2e      	ldr	r3, [pc, #184]	@ (80016e8 <main+0x1fc>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	@ 0x64
 8001634:	d911      	bls.n	800165a <main+0x16e>
	                 uart_rx_pos = 0;
 8001636:	4b2d      	ldr	r3, [pc, #180]	@ (80016ec <main+0x200>)
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
	                 memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 800163c:	2280      	movs	r2, #128	@ 0x80
 800163e:	2100      	movs	r1, #0
 8001640:	482b      	ldr	r0, [pc, #172]	@ (80016f0 <main+0x204>)
 8001642:	f008 f930 	bl	80098a6 <memset>
	                 HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001646:	4b29      	ldr	r3, [pc, #164]	@ (80016ec <main+0x200>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	4b28      	ldr	r3, [pc, #160]	@ (80016f0 <main+0x204>)
 800164e:	4413      	add	r3, r2
 8001650:	2201      	movs	r2, #1
 8001652:	4619      	mov	r1, r3
 8001654:	4827      	ldr	r0, [pc, #156]	@ (80016f4 <main+0x208>)
 8001656:	f004 ffe7 	bl	8006628 <HAL_UART_Receive_IT>
	             }

	             HAL_Delay(10);
 800165a:	200a      	movs	r0, #10
 800165c:	f000 ff96 	bl	800258c <HAL_Delay>
	         while ((HAL_GetTick() - start_time) < COMPLETE_TIMEOUT_MS && !complete_received) {
 8001660:	f000 ff88 	bl	8002574 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001670:	4293      	cmp	r3, r2
 8001672:	d804      	bhi.n	800167e <main+0x192>
 8001674:	4b25      	ldr	r3, [pc, #148]	@ (800170c <main+0x220>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0c1      	beq.n	8001602 <main+0x116>
	         }

	         // Переходим в сон только если USB_STATUS = 0
	         enter_sleep_mode();
 800167e:	f7ff fdb9 	bl	80011f4 <enter_sleep_mode>
	     }

	     // Обработка UART команд (работает всегда для получения периода и статуса USB)
	     if(uart_cmd_ready) {
 8001682:	4b23      	ldr	r3, [pc, #140]	@ (8001710 <main+0x224>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <main+0x1b2>
	         uart_cmd_ready = 0;
 800168c:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <main+0x224>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
	         process_uart_command(uart_rx_buf, uart_rx_pos);
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <main+0x200>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4619      	mov	r1, r3
 8001698:	4815      	ldr	r0, [pc, #84]	@ (80016f0 <main+0x204>)
 800169a:	f7ff fde5 	bl	8001268 <process_uart_command>
	     }

	     // Таймаут приема UART
	     if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_TIMEOUT_MS) {
 800169e:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <main+0x200>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f43f af56 	beq.w	8001554 <main+0x68>
 80016a8:	f000 ff64 	bl	8002574 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <main+0x1fc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b64      	cmp	r3, #100	@ 0x64
 80016b6:	f67f af4d 	bls.w	8001554 <main+0x68>
	         uart_rx_pos = 0;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <main+0x200>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
	         memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 80016c0:	2280      	movs	r2, #128	@ 0x80
 80016c2:	2100      	movs	r1, #0
 80016c4:	480a      	ldr	r0, [pc, #40]	@ (80016f0 <main+0x204>)
 80016c6:	f008 f8ee 	bl	80098a6 <memset>
	         HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <main+0x200>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <main+0x204>)
 80016d2:	4413      	add	r3, r2
 80016d4:	2201      	movs	r2, #1
 80016d6:	4619      	mov	r1, r3
 80016d8:	4806      	ldr	r0, [pc, #24]	@ (80016f4 <main+0x208>)
 80016da:	f004 ffa5 	bl	8006628 <HAL_UART_Receive_IT>
	     if(wakeup_flag && period_received && (usb_connection_status == 0))
 80016de:	e739      	b.n	8001554 <main+0x68>
 80016e0:	42020800 	.word	0x42020800
 80016e4:	42020400 	.word	0x42020400
 80016e8:	2000039c 	.word	0x2000039c
 80016ec:	20000398 	.word	0x20000398
 80016f0:	20000318 	.word	0x20000318
 80016f4:	2000025c 	.word	0x2000025c
 80016f8:	200003a6 	.word	0x200003a6
 80016fc:	200003a4 	.word	0x200003a4
 8001700:	20000000 	.word	0x20000000
 8001704:	200003a0 	.word	0x200003a0
 8001708:	0800d99c 	.word	0x0800d99c
 800170c:	200003a5 	.word	0x200003a5
 8001710:	20000399 	.word	0x20000399

08001714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b098      	sub	sp, #96	@ 0x60
 8001718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171a:	f107 0318 	add.w	r3, r7, #24
 800171e:	2248      	movs	r2, #72	@ 0x48
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f008 f8bf 	bl	80098a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8001736:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800173a:	f002 fec1 	bl	80044c0 <HAL_PWREx_ControlVoltageScaling>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001744:	f000 f9ee 	bl	8001b24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001748:	2318      	movs	r3, #24
 800174a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001750:	2301      	movs	r3, #1
 8001752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001754:	2301      	movs	r3, #1
 8001756:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001758:	2300      	movs	r3, #0
 800175a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800175c:	2360      	movs	r3, #96	@ 0x60
 800175e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001760:	2300      	movs	r3, #0
 8001762:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001764:	f107 0318 	add.w	r3, r7, #24
 8001768:	4618      	mov	r0, r3
 800176a:	f002 ff89 	bl	8004680 <HAL_RCC_OscConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001774:	f000 f9d6 	bl	8001b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001778:	230f      	movs	r3, #15
 800177a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f003 fc4b 	bl	800502c <HAL_RCC_ClockConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800179c:	f000 f9c2 	bl	8001b24 <Error_Handler>
  }
}
 80017a0:	bf00      	nop
 80017a2:	3760      	adds	r7, #96	@ 0x60
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	@ 0x28
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
 80017c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017ca:	4b41      	ldr	r3, [pc, #260]	@ (80018d0 <MX_ADC1_Init+0x128>)
 80017cc:	4a41      	ldr	r2, [pc, #260]	@ (80018d4 <MX_ADC1_Init+0x12c>)
 80017ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017d0:	4b3f      	ldr	r3, [pc, #252]	@ (80018d0 <MX_ADC1_Init+0x128>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017d6:	4b3e      	ldr	r3, [pc, #248]	@ (80018d0 <MX_ADC1_Init+0x128>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017dc:	4b3c      	ldr	r3, [pc, #240]	@ (80018d0 <MX_ADC1_Init+0x128>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017e2:	4b3b      	ldr	r3, [pc, #236]	@ (80018d0 <MX_ADC1_Init+0x128>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017e8:	4b39      	ldr	r3, [pc, #228]	@ (80018d0 <MX_ADC1_Init+0x128>)
 80017ea:	2204      	movs	r2, #4
 80017ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017ee:	4b38      	ldr	r3, [pc, #224]	@ (80018d0 <MX_ADC1_Init+0x128>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017f4:	4b36      	ldr	r3, [pc, #216]	@ (80018d0 <MX_ADC1_Init+0x128>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80017fa:	4b35      	ldr	r3, [pc, #212]	@ (80018d0 <MX_ADC1_Init+0x128>)
 80017fc:	2204      	movs	r2, #4
 80017fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001800:	4b33      	ldr	r3, [pc, #204]	@ (80018d0 <MX_ADC1_Init+0x128>)
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001808:	4b31      	ldr	r3, [pc, #196]	@ (80018d0 <MX_ADC1_Init+0x128>)
 800180a:	2200      	movs	r2, #0
 800180c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800180e:	4b30      	ldr	r3, [pc, #192]	@ (80018d0 <MX_ADC1_Init+0x128>)
 8001810:	2200      	movs	r2, #0
 8001812:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001814:	4b2e      	ldr	r3, [pc, #184]	@ (80018d0 <MX_ADC1_Init+0x128>)
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800181c:	4b2c      	ldr	r3, [pc, #176]	@ (80018d0 <MX_ADC1_Init+0x128>)
 800181e:	2200      	movs	r2, #0
 8001820:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001822:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <MX_ADC1_Init+0x128>)
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800182a:	4829      	ldr	r0, [pc, #164]	@ (80018d0 <MX_ADC1_Init+0x128>)
 800182c:	f001 f916 	bl	8002a5c <HAL_ADC_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001836:	f000 f975 	bl	8001b24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	4822      	ldr	r0, [pc, #136]	@ (80018d0 <MX_ADC1_Init+0x128>)
 8001846:	f002 f9db 	bl	8003c00 <HAL_ADCEx_MultiModeConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001850:	f000 f968 	bl	8001b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001854:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <MX_ADC1_Init+0x130>)
 8001856:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001858:	2306      	movs	r3, #6
 800185a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001860:	237f      	movs	r3, #127	@ 0x7f
 8001862:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001864:	2304      	movs	r3, #4
 8001866:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4619      	mov	r1, r3
 8001870:	4817      	ldr	r0, [pc, #92]	@ (80018d0 <MX_ADC1_Init+0x128>)
 8001872:	f001 fc13 	bl	800309c <HAL_ADC_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800187c:	f000 f952 	bl	8001b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001880:	230c      	movs	r3, #12
 8001882:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4619      	mov	r1, r3
 8001888:	4811      	ldr	r0, [pc, #68]	@ (80018d0 <MX_ADC1_Init+0x128>)
 800188a:	f001 fc07 	bl	800309c <HAL_ADC_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8001894:	f000 f946 	bl	8001b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001898:	2312      	movs	r3, #18
 800189a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4619      	mov	r1, r3
 80018a0:	480b      	ldr	r0, [pc, #44]	@ (80018d0 <MX_ADC1_Init+0x128>)
 80018a2:	f001 fbfb 	bl	800309c <HAL_ADC_ConfigChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80018ac:	f000 f93a 	bl	8001b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80018b0:	2318      	movs	r3, #24
 80018b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	4619      	mov	r1, r3
 80018b8:	4805      	ldr	r0, [pc, #20]	@ (80018d0 <MX_ADC1_Init+0x128>)
 80018ba:	f001 fbef 	bl	800309c <HAL_ADC_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80018c4:	f000 f92e 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	@ 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200001f4 	.word	0x200001f4
 80018d4:	42028000 	.word	0x42028000
 80018d8:	14f00020 	.word	0x14f00020

080018dc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018e0:	4b22      	ldr	r3, [pc, #136]	@ (800196c <MX_LPUART1_UART_Init+0x90>)
 80018e2:	4a23      	ldr	r2, [pc, #140]	@ (8001970 <MX_LPUART1_UART_Init+0x94>)
 80018e4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80018e6:	4b21      	ldr	r3, [pc, #132]	@ (800196c <MX_LPUART1_UART_Init+0x90>)
 80018e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018ec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ee:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <MX_LPUART1_UART_Init+0x90>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018f4:	4b1d      	ldr	r3, [pc, #116]	@ (800196c <MX_LPUART1_UART_Init+0x90>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018fa:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <MX_LPUART1_UART_Init+0x90>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001900:	4b1a      	ldr	r3, [pc, #104]	@ (800196c <MX_LPUART1_UART_Init+0x90>)
 8001902:	220c      	movs	r2, #12
 8001904:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001906:	4b19      	ldr	r3, [pc, #100]	@ (800196c <MX_LPUART1_UART_Init+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190c:	4b17      	ldr	r3, [pc, #92]	@ (800196c <MX_LPUART1_UART_Init+0x90>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001912:	4b16      	ldr	r3, [pc, #88]	@ (800196c <MX_LPUART1_UART_Init+0x90>)
 8001914:	2200      	movs	r2, #0
 8001916:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001918:	4b14      	ldr	r3, [pc, #80]	@ (800196c <MX_LPUART1_UART_Init+0x90>)
 800191a:	2200      	movs	r2, #0
 800191c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800191e:	4b13      	ldr	r3, [pc, #76]	@ (800196c <MX_LPUART1_UART_Init+0x90>)
 8001920:	2200      	movs	r2, #0
 8001922:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001924:	4811      	ldr	r0, [pc, #68]	@ (800196c <MX_LPUART1_UART_Init+0x90>)
 8001926:	f004 fda1 	bl	800646c <HAL_UART_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001930:	f000 f8f8 	bl	8001b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001934:	2100      	movs	r1, #0
 8001936:	480d      	ldr	r0, [pc, #52]	@ (800196c <MX_LPUART1_UART_Init+0x90>)
 8001938:	f006 fef9 	bl	800872e <HAL_UARTEx_SetTxFifoThreshold>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001942:	f000 f8ef 	bl	8001b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001946:	2100      	movs	r1, #0
 8001948:	4808      	ldr	r0, [pc, #32]	@ (800196c <MX_LPUART1_UART_Init+0x90>)
 800194a:	f006 ff2e 	bl	80087aa <HAL_UARTEx_SetRxFifoThreshold>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001954:	f000 f8e6 	bl	8001b24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001958:	4804      	ldr	r0, [pc, #16]	@ (800196c <MX_LPUART1_UART_Init+0x90>)
 800195a:	f006 feaf 	bl	80086bc <HAL_UARTEx_DisableFifoMode>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001964:	f000 f8de 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2000025c 	.word	0x2000025c
 8001970:	40008000 	.word	0x40008000

08001974 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800197a:	463b      	mov	r3, r7
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
 8001988:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800198a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a00 <MX_RTC_Init+0x8c>)
 800198c:	4a1d      	ldr	r2, [pc, #116]	@ (8001a04 <MX_RTC_Init+0x90>)
 800198e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001990:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <MX_RTC_Init+0x8c>)
 8001992:	2200      	movs	r2, #0
 8001994:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001996:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <MX_RTC_Init+0x8c>)
 8001998:	227f      	movs	r2, #127	@ 0x7f
 800199a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800199c:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <MX_RTC_Init+0x8c>)
 800199e:	22ff      	movs	r2, #255	@ 0xff
 80019a0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019a2:	4b17      	ldr	r3, [pc, #92]	@ (8001a00 <MX_RTC_Init+0x8c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80019a8:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <MX_RTC_Init+0x8c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019ae:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <MX_RTC_Init+0x8c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <MX_RTC_Init+0x8c>)
 80019b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019ba:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80019bc:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <MX_RTC_Init+0x8c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019c2:	480f      	ldr	r0, [pc, #60]	@ (8001a00 <MX_RTC_Init+0x8c>)
 80019c4:	f004 fb28 	bl	8006018 <HAL_RTC_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80019ce:	f000 f8a9 	bl	8001b24 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80019d2:	2300      	movs	r3, #0
 80019d4:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80019e2:	463b      	mov	r3, r7
 80019e4:	4619      	mov	r1, r3
 80019e6:	4806      	ldr	r0, [pc, #24]	@ (8001a00 <MX_RTC_Init+0x8c>)
 80019e8:	f004 fd14 	bl	8006414 <HAL_RTCEx_PrivilegeModeSet>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80019f2:	f000 f897 	bl	8001b24 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200002f0 	.word	0x200002f0
 8001a04:	40002800 	.word	0x40002800

08001a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	@ 0x28
 8001a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b14 <MX_GPIO_Init+0x10c>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a22:	4a3c      	ldr	r2, [pc, #240]	@ (8001b14 <MX_GPIO_Init+0x10c>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b14 <MX_GPIO_Init+0x10c>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a36:	4b37      	ldr	r3, [pc, #220]	@ (8001b14 <MX_GPIO_Init+0x10c>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3a:	4a36      	ldr	r2, [pc, #216]	@ (8001b14 <MX_GPIO_Init+0x10c>)
 8001a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a42:	4b34      	ldr	r3, [pc, #208]	@ (8001b14 <MX_GPIO_Init+0x10c>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	4b31      	ldr	r3, [pc, #196]	@ (8001b14 <MX_GPIO_Init+0x10c>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a52:	4a30      	ldr	r2, [pc, #192]	@ (8001b14 <MX_GPIO_Init+0x10c>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b14 <MX_GPIO_Init+0x10c>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	4b2b      	ldr	r3, [pc, #172]	@ (8001b14 <MX_GPIO_Init+0x10c>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8001b14 <MX_GPIO_Init+0x10c>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a72:	4b28      	ldr	r3, [pc, #160]	@ (8001b14 <MX_GPIO_Init+0x10c>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a84:	4824      	ldr	r0, [pc, #144]	@ (8001b18 <MX_GPIO_Init+0x110>)
 8001a86:	f002 fcc1 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	4823      	ldr	r0, [pc, #140]	@ (8001b1c <MX_GPIO_Init+0x114>)
 8001a90:	f002 fcbc 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2101      	movs	r1, #1
 8001a98:	4821      	ldr	r0, [pc, #132]	@ (8001b20 <MX_GPIO_Init+0x118>)
 8001a9a:	f002 fcb7 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4818      	ldr	r0, [pc, #96]	@ (8001b18 <MX_GPIO_Init+0x110>)
 8001ab8:	f002 fb10 	bl	80040dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Bat23_Pin */
  GPIO_InitStruct.Pin = Bat23_Pin;
 8001abc:	2302      	movs	r3, #2
 8001abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Bat23_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	4813      	ldr	r0, [pc, #76]	@ (8001b1c <MX_GPIO_Init+0x114>)
 8001ad0:	f002 fb04 	bl	80040dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ad4:	2310      	movs	r3, #16
 8001ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4619      	mov	r1, r3
 8001aea:	480c      	ldr	r0, [pc, #48]	@ (8001b1c <MX_GPIO_Init+0x114>)
 8001aec:	f002 faf6 	bl	80040dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001af0:	2301      	movs	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af4:	2301      	movs	r3, #1
 8001af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	4806      	ldr	r0, [pc, #24]	@ (8001b20 <MX_GPIO_Init+0x118>)
 8001b08:	f002 fae8 	bl	80040dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	@ 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	42020800 	.word	0x42020800
 8001b1c:	42020000 	.word	0x42020000
 8001b20:	42020400 	.word	0x42020400

08001b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b28:	b672      	cpsid	i
}
 8001b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <Error_Handler+0x8>

08001b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <HAL_MspInit+0x44>)
 8001b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b74 <HAL_MspInit+0x44>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b42:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <HAL_MspInit+0x44>)
 8001b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <HAL_MspInit+0x44>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b52:	4a08      	ldr	r2, [pc, #32]	@ (8001b74 <HAL_MspInit+0x44>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_MspInit+0x44>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b66:	f002 fd57 	bl	8004618 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000

08001b78 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0ae      	sub	sp, #184	@ 0xb8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	2294      	movs	r2, #148	@ 0x94
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f007 fe84 	bl	80098a6 <memset>
  if(hadc->Instance==ADC1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a27      	ldr	r2, [pc, #156]	@ (8001c40 <HAL_ADC_MspInit+0xc8>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d146      	bne.n	8001c36 <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ba8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001bae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001bb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001bbe:	2310      	movs	r3, #16
 8001bc0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001bce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 fd07 	bl	80055ec <HAL_RCCEx_PeriphCLKConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001be4:	f7ff ff9e 	bl	8001b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001be8:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <HAL_ADC_MspInit+0xcc>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bec:	4a15      	ldr	r2, [pc, #84]	@ (8001c44 <HAL_ADC_MspInit+0xcc>)
 8001bee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf4:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <HAL_ADC_MspInit+0xcc>)
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c00:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <HAL_ADC_MspInit+0xcc>)
 8001c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c04:	4a0f      	ldr	r2, [pc, #60]	@ (8001c44 <HAL_ADC_MspInit+0xcc>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <HAL_ADC_MspInit+0xcc>)
 8001c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <HAL_ADC_MspInit+0xd0>)
 8001c32:	f002 fa53 	bl	80040dc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c36:	bf00      	nop
 8001c38:	37b8      	adds	r7, #184	@ 0xb8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	42028000 	.word	0x42028000
 8001c44:	40021000 	.word	0x40021000
 8001c48:	42020000 	.word	0x42020000

08001c4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b0ae      	sub	sp, #184	@ 0xb8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c64:	f107 0310 	add.w	r3, r7, #16
 8001c68:	2294      	movs	r2, #148	@ 0x94
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f007 fe1a 	bl	80098a6 <memset>
  if(huart->Instance==LPUART1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a25      	ldr	r2, [pc, #148]	@ (8001d0c <HAL_UART_MspInit+0xc0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d143      	bne.n	8001d04 <HAL_UART_MspInit+0xb8>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001c7c:	2320      	movs	r3, #32
 8001c7e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 fcaf 	bl	80055ec <HAL_RCCEx_PeriphCLKConfig>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c94:	f7ff ff46 	bl	8001b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c98:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <HAL_UART_MspInit+0xc4>)
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001d10 <HAL_UART_MspInit+0xc4>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <HAL_UART_MspInit+0xc4>)
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb0:	4b17      	ldr	r3, [pc, #92]	@ (8001d10 <HAL_UART_MspInit+0xc4>)
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb4:	4a16      	ldr	r2, [pc, #88]	@ (8001d10 <HAL_UART_MspInit+0xc4>)
 8001cb6:	f043 0302 	orr.w	r3, r3, #2
 8001cba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cbc:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <HAL_UART_MspInit+0xc4>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cc8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cec:	4619      	mov	r1, r3
 8001cee:	4809      	ldr	r0, [pc, #36]	@ (8001d14 <HAL_UART_MspInit+0xc8>)
 8001cf0:	f002 f9f4 	bl	80040dc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	2042      	movs	r0, #66	@ 0x42
 8001cfa:	f002 f900 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001cfe:	2042      	movs	r0, #66	@ 0x42
 8001d00:	f002 f917 	bl	8003f32 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001d04:	bf00      	nop
 8001d06:	37b8      	adds	r7, #184	@ 0xb8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40008000 	.word	0x40008000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	42020400 	.word	0x42020400

08001d18 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b0a8      	sub	sp, #160	@ 0xa0
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	2294      	movs	r2, #148	@ 0x94
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f007 fdbc 	bl	80098a6 <memset>
  if(hrtc->Instance==RTC)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1a      	ldr	r2, [pc, #104]	@ (8001d9c <HAL_RTC_MspInit+0x84>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d12c      	bne.n	8001d92 <HAL_RTC_MspInit+0x7a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d3c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 fc4e 	bl	80055ec <HAL_RCCEx_PeriphCLKConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001d56:	f7ff fee5 	bl	8001b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d5a:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <HAL_RTC_MspInit+0x88>)
 8001d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d60:	4a0f      	ldr	r2, [pc, #60]	@ (8001da0 <HAL_RTC_MspInit+0x88>)
 8001d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001da0 <HAL_RTC_MspInit+0x88>)
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001da0 <HAL_RTC_MspInit+0x88>)
 8001d70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d74:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d76:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <HAL_RTC_MspInit+0x88>)
 8001d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	2002      	movs	r0, #2
 8001d88:	f002 f8b9 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	f002 f8d0 	bl	8003f32 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001d92:	bf00      	nop
 8001d94:	37a0      	adds	r7, #160	@ 0xa0
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40002800 	.word	0x40002800
 8001da0:	40021000 	.word	0x40021000

08001da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <NMI_Handler+0x4>

08001dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <HardFault_Handler+0x4>

08001db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <MemManage_Handler+0x4>

08001dbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <BusFault_Handler+0x4>

08001dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <UsageFault_Handler+0x4>

08001dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dfa:	f000 fba7 	bl	800254c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupts through EXTI line 17.
  */
void RTC_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <RTC_IRQHandler+0x10>)
 8001e0a:	f004 fae9 	bl	80063e0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200002f0 	.word	0x200002f0

08001e18 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 31.
  */
void LPUART1_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001e1c:	4802      	ldr	r0, [pc, #8]	@ (8001e28 <LPUART1_IRQHandler+0x10>)
 8001e1e:	f004 fd1d 	bl	800685c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000025c 	.word	0x2000025c

08001e2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return 1;
 8001e30:	2301      	movs	r3, #1
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <_kill>:

int _kill(int pid, int sig)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e46:	f007 fdbb 	bl	80099c0 <__errno>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2216      	movs	r2, #22
 8001e4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <_exit>:

void _exit (int status)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ffe7 	bl	8001e3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e6e:	bf00      	nop
 8001e70:	e7fd      	b.n	8001e6e <_exit+0x12>

08001e72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	e00a      	b.n	8001e9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e84:	f3af 8000 	nop.w
 8001e88:	4601      	mov	r1, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	60ba      	str	r2, [r7, #8]
 8001e90:	b2ca      	uxtb	r2, r1
 8001e92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3301      	adds	r3, #1
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	dbf0      	blt.n	8001e84 <_read+0x12>
  }

  return len;
 8001ea2:	687b      	ldr	r3, [r7, #4]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	e009      	b.n	8001ed2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	60ba      	str	r2, [r7, #8]
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	dbf1      	blt.n	8001ebe <_write+0x12>
  }
  return len;
 8001eda:	687b      	ldr	r3, [r7, #4]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <_close>:

int _close(int file)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_isatty>:

int _isatty(int file)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f24:	2301      	movs	r3, #1
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b085      	sub	sp, #20
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f54:	4a14      	ldr	r2, [pc, #80]	@ (8001fa8 <_sbrk+0x5c>)
 8001f56:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <_sbrk+0x60>)
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f60:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <_sbrk+0x64>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f68:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <_sbrk+0x64>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	@ (8001fb4 <_sbrk+0x68>)
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6e:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d207      	bcs.n	8001f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f7c:	f007 fd20 	bl	80099c0 <__errno>
 8001f80:	4603      	mov	r3, r0
 8001f82:	220c      	movs	r2, #12
 8001f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	e009      	b.n	8001fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f8c:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <_sbrk+0x64>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f92:	4b07      	ldr	r3, [pc, #28]	@ (8001fb0 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a05      	ldr	r2, [pc, #20]	@ (8001fb0 <_sbrk+0x64>)
 8001f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20030000 	.word	0x20030000
 8001fac:	00000400 	.word	0x00000400
 8001fb0:	200003a8 	.word	0x200003a8
 8001fb4:	20000500 	.word	0x20000500

08001fb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fbc:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <SystemInit+0x20>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc2:	4a05      	ldr	r2, [pc, #20]	@ (8001fd8 <SystemInit+0x20>)
 8001fc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8002120 <SystemCoreClockUpdate+0x144>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d107      	bne.n	8001ffe <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001fee:	4b4c      	ldr	r3, [pc, #304]	@ (8002120 <SystemCoreClockUpdate+0x144>)
 8001ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	e005      	b.n	800200a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001ffe:	4b48      	ldr	r3, [pc, #288]	@ (8002120 <SystemCoreClockUpdate+0x144>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800200a:	4a46      	ldr	r2, [pc, #280]	@ (8002124 <SystemCoreClockUpdate+0x148>)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002014:	4b42      	ldr	r3, [pc, #264]	@ (8002120 <SystemCoreClockUpdate+0x144>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b0c      	cmp	r3, #12
 800201e:	d866      	bhi.n	80020ee <SystemCoreClockUpdate+0x112>
 8002020:	a201      	add	r2, pc, #4	@ (adr r2, 8002028 <SystemCoreClockUpdate+0x4c>)
 8002022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002026:	bf00      	nop
 8002028:	0800205d 	.word	0x0800205d
 800202c:	080020ef 	.word	0x080020ef
 8002030:	080020ef 	.word	0x080020ef
 8002034:	080020ef 	.word	0x080020ef
 8002038:	08002065 	.word	0x08002065
 800203c:	080020ef 	.word	0x080020ef
 8002040:	080020ef 	.word	0x080020ef
 8002044:	080020ef 	.word	0x080020ef
 8002048:	0800206d 	.word	0x0800206d
 800204c:	080020ef 	.word	0x080020ef
 8002050:	080020ef 	.word	0x080020ef
 8002054:	080020ef 	.word	0x080020ef
 8002058:	08002075 	.word	0x08002075
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800205c:	4a32      	ldr	r2, [pc, #200]	@ (8002128 <SystemCoreClockUpdate+0x14c>)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	6013      	str	r3, [r2, #0]
      break;
 8002062:	e048      	b.n	80020f6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002064:	4b30      	ldr	r3, [pc, #192]	@ (8002128 <SystemCoreClockUpdate+0x14c>)
 8002066:	4a31      	ldr	r2, [pc, #196]	@ (800212c <SystemCoreClockUpdate+0x150>)
 8002068:	601a      	str	r2, [r3, #0]
      break;
 800206a:	e044      	b.n	80020f6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800206c:	4b2e      	ldr	r3, [pc, #184]	@ (8002128 <SystemCoreClockUpdate+0x14c>)
 800206e:	4a2f      	ldr	r2, [pc, #188]	@ (800212c <SystemCoreClockUpdate+0x150>)
 8002070:	601a      	str	r2, [r3, #0]
      break;
 8002072:	e040      	b.n	80020f6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002074:	4b2a      	ldr	r3, [pc, #168]	@ (8002120 <SystemCoreClockUpdate+0x144>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800207e:	4b28      	ldr	r3, [pc, #160]	@ (8002120 <SystemCoreClockUpdate+0x144>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	3301      	adds	r3, #1
 800208a:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d003      	beq.n	800209a <SystemCoreClockUpdate+0xbe>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d006      	beq.n	80020a6 <SystemCoreClockUpdate+0xca>
 8002098:	e00b      	b.n	80020b2 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800209a:	4a24      	ldr	r2, [pc, #144]	@ (800212c <SystemCoreClockUpdate+0x150>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a2:	613b      	str	r3, [r7, #16]
          break;
 80020a4:	e00b      	b.n	80020be <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80020a6:	4a21      	ldr	r2, [pc, #132]	@ (800212c <SystemCoreClockUpdate+0x150>)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	613b      	str	r3, [r7, #16]
          break;
 80020b0:	e005      	b.n	80020be <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	613b      	str	r3, [r7, #16]
          break;
 80020bc:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80020be:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <SystemCoreClockUpdate+0x144>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <SystemCoreClockUpdate+0x144>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	0e5b      	lsrs	r3, r3, #25
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	3301      	adds	r3, #1
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002128 <SystemCoreClockUpdate+0x14c>)
 80020ea:	6013      	str	r3, [r2, #0]
      break;
 80020ec:	e003      	b.n	80020f6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80020ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002128 <SystemCoreClockUpdate+0x14c>)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	6013      	str	r3, [r2, #0]
      break;
 80020f4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <SystemCoreClockUpdate+0x144>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	091b      	lsrs	r3, r3, #4
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	4a0b      	ldr	r2, [pc, #44]	@ (8002130 <SystemCoreClockUpdate+0x154>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002106:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <SystemCoreClockUpdate+0x14c>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
 8002110:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <SystemCoreClockUpdate+0x14c>)
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40021000 	.word	0x40021000
 8002124:	0800da04 	.word	0x0800da04
 8002128:	20000004 	.word	0x20000004
 800212c:	00f42400 	.word	0x00f42400
 8002130:	0800d9ec 	.word	0x0800d9ec

08002134 <GetAdcValues>:
#include "u_utils.h"
#include "main.h"
#include <stdio.h>

void GetAdcValues(TU1AdcValues *const OutVal)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b094      	sub	sp, #80	@ 0x50
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]


	// Настраиваем АЦП
	// Включаем питание АЦП
  // Включаем питание датчика температуры, напряжения батареи и опорного напряжения
  MODIFY_REG(ADC12_COMMON->CCR, ADC_CCR_PRESC_Msk | ADC_CCR_CKMODE_Msk, ADC_CCR_TSEN | ADC_CCR_VBATEN | ADC_CCR_VREFEN | ADC_CCR_CKMODE_1);
 800213c:	4b9d      	ldr	r3, [pc, #628]	@ (80023b4 <GetAdcValues+0x280>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8002144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002148:	4a9a      	ldr	r2, [pc, #616]	@ (80023b4 <GetAdcValues+0x280>)
 800214a:	f043 73e1 	orr.w	r3, r3, #29491200	@ 0x1c20000
 800214e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADC12_COMMON->CCR, 0, ADC_CCR_TSEN | ADC_CCR_VBATEN | ADC_CCR_VREFEN);
 8002150:	4b98      	ldr	r3, [pc, #608]	@ (80023b4 <GetAdcValues+0x280>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4a97      	ldr	r2, [pc, #604]	@ (80023b4 <GetAdcValues+0x280>)
 8002156:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 800215a:	6093      	str	r3, [r2, #8]

   MODIFY_REG(ADC1->CR,   0,  ADC_CR_ADEN);
 800215c:	4b96      	ldr	r3, [pc, #600]	@ (80023b8 <GetAdcValues+0x284>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a95      	ldr	r2, [pc, #596]	@ (80023b8 <GetAdcValues+0x284>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6093      	str	r3, [r2, #8]
   while(!(ADC1->ISR & ADC_ISR_ADRDY));
 8002168:	bf00      	nop
 800216a:	4b93      	ldr	r3, [pc, #588]	@ (80023b8 <GetAdcValues+0x284>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f9      	beq.n	800216a <GetAdcValues+0x36>

   MODIFY_REG(ADC1->CR,   ADC_CR_ADCALDIF,  0);
 8002176:	4b90      	ldr	r3, [pc, #576]	@ (80023b8 <GetAdcValues+0x284>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	4a8f      	ldr	r2, [pc, #572]	@ (80023b8 <GetAdcValues+0x284>)
 800217c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002180:	6093      	str	r3, [r2, #8]
   MODIFY_REG(ADC1->CR,   0,  ADC_CR_ADCAL);
 8002182:	4b8d      	ldr	r3, [pc, #564]	@ (80023b8 <GetAdcValues+0x284>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	4a8c      	ldr	r2, [pc, #560]	@ (80023b8 <GetAdcValues+0x284>)
 8002188:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800218c:	6093      	str	r3, [r2, #8]
   while(!(ADC1->CR & ADC_CR_ADCAL));
 800218e:	bf00      	nop
 8002190:	4b89      	ldr	r3, [pc, #548]	@ (80023b8 <GetAdcValues+0x284>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	dafb      	bge.n	8002190 <GetAdcValues+0x5c>

   HAL_Delay(10);
 8002198:	200a      	movs	r0, #10
 800219a:	f000 f9f7 	bl	800258c <HAL_Delay>


   // Устанавливаем максимальное время выборки-хранения для этих каналов и 5 входа АЙП
   MODIFY_REG(ADC1->SMPR1, 0, ADC_SMPR1_SMP0 | ADC_SMPR1_SMP5);
 800219e:	4b86      	ldr	r3, [pc, #536]	@ (80023b8 <GetAdcValues+0x284>)
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	4a85      	ldr	r2, [pc, #532]	@ (80023b8 <GetAdcValues+0x284>)
 80021a4:	f443 3360 	orr.w	r3, r3, #229376	@ 0x38000
 80021a8:	f043 0307 	orr.w	r3, r3, #7
 80021ac:	6153      	str	r3, [r2, #20]
   MODIFY_REG(ADC1->SMPR2, 0, ADC_SMPR2_SMP17 | ADC_SMPR2_SMP18);
 80021ae:	4b82      	ldr	r3, [pc, #520]	@ (80023b8 <GetAdcValues+0x284>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	4a81      	ldr	r2, [pc, #516]	@ (80023b8 <GetAdcValues+0x284>)
 80021b4:	f043 63fc 	orr.w	r3, r3, #132120576	@ 0x7e00000
 80021b8:	6193      	str	r3, [r2, #24]


   // Будем преобразовывать По одному входу за измерение
   MODIFY_REG(ADC1->SQR1, ADC_SQR1_L, (0 << ADC_SQR1_L_Pos));
 80021ba:	4b7f      	ldr	r3, [pc, #508]	@ (80023b8 <GetAdcValues+0x284>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	4a7e      	ldr	r2, [pc, #504]	@ (80023b8 <GetAdcValues+0x284>)
 80021c0:	f023 030f 	bic.w	r3, r3, #15
 80021c4:	6313      	str	r3, [r2, #48]	@ 0x30

   // Получаем напряжение питания c 5 входа АЦП (вывод PA0 - 10 нога)
   MODIFY_REG(ADC1->SQR1, ADC_SQR1_SQ1,  (5 << ADC_SQR1_SQ1_Pos));
 80021c6:	4b7c      	ldr	r3, [pc, #496]	@ (80023b8 <GetAdcValues+0x284>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 80021ce:	4a7a      	ldr	r2, [pc, #488]	@ (80023b8 <GetAdcValues+0x284>)
 80021d0:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80021d4:	6313      	str	r3, [r2, #48]	@ 0x30
   MODIFY_REG(ADC1->CR,   0, ADC_CR_ADSTART);
 80021d6:	4b78      	ldr	r3, [pc, #480]	@ (80023b8 <GetAdcValues+0x284>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4a77      	ldr	r2, [pc, #476]	@ (80023b8 <GetAdcValues+0x284>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	6093      	str	r3, [r2, #8]
   while(!(ADC1->ISR & ADC_ISR_EOS));
 80021e2:	bf00      	nop
 80021e4:	4b74      	ldr	r3, [pc, #464]	@ (80023b8 <GetAdcValues+0x284>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f9      	beq.n	80021e4 <GetAdcValues+0xb0>
   unsigned int PA10_DATA = ADC1->DR;
 80021f0:	4b71      	ldr	r3, [pc, #452]	@ (80023b8 <GetAdcValues+0x284>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   WRITE_REG(ADC1->ISR, ADC_ISR_EOS);
 80021f6:	4b70      	ldr	r3, [pc, #448]	@ (80023b8 <GetAdcValues+0x284>)
 80021f8:	2208      	movs	r2, #8
 80021fa:	601a      	str	r2, [r3, #0]

   // Получаем напряжение опорного источника 0 вход АЦП
   MODIFY_REG(ADC1->SQR1, ADC_SQR1_SQ1,  (0 << ADC_SQR1_SQ1_Pos));
 80021fc:	4b6e      	ldr	r3, [pc, #440]	@ (80023b8 <GetAdcValues+0x284>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002200:	4a6d      	ldr	r2, [pc, #436]	@ (80023b8 <GetAdcValues+0x284>)
 8002202:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 8002206:	6313      	str	r3, [r2, #48]	@ 0x30
   MODIFY_REG(ADC1->CR,   0,     ADC_CR_ADSTART);
 8002208:	4b6b      	ldr	r3, [pc, #428]	@ (80023b8 <GetAdcValues+0x284>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4a6a      	ldr	r2, [pc, #424]	@ (80023b8 <GetAdcValues+0x284>)
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	6093      	str	r3, [r2, #8]
   while(!(ADC1->ISR & ADC_ISR_EOS));
 8002214:	bf00      	nop
 8002216:	4b68      	ldr	r3, [pc, #416]	@ (80023b8 <GetAdcValues+0x284>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f9      	beq.n	8002216 <GetAdcValues+0xe2>
   unsigned int VREFINT_DATA = ADC1->DR;
 8002222:	4b65      	ldr	r3, [pc, #404]	@ (80023b8 <GetAdcValues+0x284>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	64bb      	str	r3, [r7, #72]	@ 0x48
   WRITE_REG(ADC1->ISR, ADC_ISR_EOS);
 8002228:	4b63      	ldr	r3, [pc, #396]	@ (80023b8 <GetAdcValues+0x284>)
 800222a:	2208      	movs	r2, #8
 800222c:	601a      	str	r2, [r3, #0]

   // Получаем 1/3 напряжение питания МК 18 вход АЦП
   MODIFY_REG(ADC1->SQR1, ADC_SQR1_SQ1,  (18 << ADC_SQR1_SQ1_Pos));
 800222e:	4b62      	ldr	r3, [pc, #392]	@ (80023b8 <GetAdcValues+0x284>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 8002236:	4a60      	ldr	r2, [pc, #384]	@ (80023b8 <GetAdcValues+0x284>)
 8002238:	f443 6390 	orr.w	r3, r3, #1152	@ 0x480
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
   MODIFY_REG(ADC1->CR,   0,     ADC_CR_ADSTART);
 800223e:	4b5e      	ldr	r3, [pc, #376]	@ (80023b8 <GetAdcValues+0x284>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	4a5d      	ldr	r2, [pc, #372]	@ (80023b8 <GetAdcValues+0x284>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6093      	str	r3, [r2, #8]
   while(!(ADC1->ISR & ADC_ISR_EOS));
 800224a:	bf00      	nop
 800224c:	4b5a      	ldr	r3, [pc, #360]	@ (80023b8 <GetAdcValues+0x284>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f9      	beq.n	800224c <GetAdcValues+0x118>
   unsigned int VBAT_DATA = ADC1->DR;
 8002258:	4b57      	ldr	r3, [pc, #348]	@ (80023b8 <GetAdcValues+0x284>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225c:	647b      	str	r3, [r7, #68]	@ 0x44
   WRITE_REG(ADC1->ISR, ADC_ISR_EOS);
 800225e:	4b56      	ldr	r3, [pc, #344]	@ (80023b8 <GetAdcValues+0x284>)
 8002260:	2208      	movs	r2, #8
 8002262:	601a      	str	r2, [r3, #0]

   // Получаем напряжение датчика температуры 17 вход АЦП
   MODIFY_REG(ADC1->SQR1, ADC_SQR1_SQ1,  (17 << ADC_SQR1_SQ1_Pos));
 8002264:	4b54      	ldr	r3, [pc, #336]	@ (80023b8 <GetAdcValues+0x284>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002268:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 800226c:	4a52      	ldr	r2, [pc, #328]	@ (80023b8 <GetAdcValues+0x284>)
 800226e:	f443 6388 	orr.w	r3, r3, #1088	@ 0x440
 8002272:	6313      	str	r3, [r2, #48]	@ 0x30
   MODIFY_REG(ADC1->CR,   0,     ADC_CR_ADSTART);
 8002274:	4b50      	ldr	r3, [pc, #320]	@ (80023b8 <GetAdcValues+0x284>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4a4f      	ldr	r2, [pc, #316]	@ (80023b8 <GetAdcValues+0x284>)
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	6093      	str	r3, [r2, #8]
   while(!(ADC1->ISR & ADC_ISR_EOS));
 8002280:	bf00      	nop
 8002282:	4b4d      	ldr	r3, [pc, #308]	@ (80023b8 <GetAdcValues+0x284>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f9      	beq.n	8002282 <GetAdcValues+0x14e>
   unsigned int TEMPERETURE_DATA = ADC1->DR;
 800228e:	4b4a      	ldr	r3, [pc, #296]	@ (80023b8 <GetAdcValues+0x284>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	643b      	str	r3, [r7, #64]	@ 0x40
   WRITE_REG(ADC1->ISR, ADC_ISR_EOS);
 8002294:	4b48      	ldr	r3, [pc, #288]	@ (80023b8 <GetAdcValues+0x284>)
 8002296:	2208      	movs	r2, #8
 8002298:	601a      	str	r2, [r3, #0]

   MODIFY_REG(ADC1->CR, ADC_CR_ADEN,  0);
 800229a:	4b47      	ldr	r3, [pc, #284]	@ (80023b8 <GetAdcValues+0x284>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4a46      	ldr	r2, [pc, #280]	@ (80023b8 <GetAdcValues+0x284>)
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	6093      	str	r3, [r2, #8]

   // VREF parameters Table 15. Internal voltage reference calibration values page 62 of stm32l552cc.pdf
   uint16_t TS_CAL1 = *((unsigned short*) 0x0BFA05A8UL);
 80022a6:	4b45      	ldr	r3, [pc, #276]	@ (80023bc <GetAdcValues+0x288>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
   uint16_t TS_CAL2 = *((unsigned short*) 0x0BFA05CAUL);
 80022ac:	4b44      	ldr	r3, [pc, #272]	@ (80023c0 <GetAdcValues+0x28c>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
   const float  TS_1  = 30.0f;
 80022b2:	4b44      	ldr	r3, [pc, #272]	@ (80023c4 <GetAdcValues+0x290>)
 80022b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   const float  TS_2  = 130.0f;
 80022b6:	4b44      	ldr	r3, [pc, #272]	@ (80023c8 <GetAdcValues+0x294>)
 80022b8:	637b      	str	r3, [r7, #52]	@ 0x34
   uint16_t VREFINT_CALIB = *((unsigned short*) 0x0BFA05AAUL);
 80022ba:	4b44      	ldr	r3, [pc, #272]	@ (80023cc <GetAdcValues+0x298>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	867b      	strh	r3, [r7, #50]	@ 0x32

   // Корректируем записанные производителем коэффициенты в соответствии с текущим напряжением питания
   // Информация получена из статьи
   // https://programel.ru/%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B0%D0%B5%D0%BC-%D1%82%D0%B5%D0%BC%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D1%83%D1%80%D1%83-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%B0-stm32l4-%D0%BF/
   // https://programel.ru/получаем-температуру -контроллера-stm32l4-п/
   const float v_calib = (float)VREFINT_DATA / (float)VREFINT_CALIB;
 80022c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ca:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
   float TS_CALIB1_NEW = TS_CAL1 * v_calib;
 80022dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80022ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ee:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
   float TS_CALIB2_NEW = TS_CAL2 * v_calib;
 80022f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80022f4:	ee07 3a90 	vmov	s15, r3
 80022f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022fc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002304:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

   OutVal->ChipTemperature = (((float)TEMPERETURE_DATA - TS_CALIB1_NEW) * (TS_2 - TS_1) / (TS_CALIB2_NEW - TS_CALIB1_NEW)) + TS_1;
 8002308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002312:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002316:	ee37 7a67 	vsub.f32	s14, s14, s15
 800231a:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800231e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002322:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002326:	ee67 6a27 	vmul.f32	s13, s14, s15
 800232a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800232e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800233a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800233e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	edc3 7a00 	vstr	s15, [r3]

   const float Vdda_Val = (3.0f * (float)VREFINT_CALIB)/(float)VREFINT_DATA;
 8002348:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002352:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002356:	ee67 6a87 	vmul.f32	s13, s15, s14
 800235a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800235c:	ee07 3a90 	vmov	s15, r3
 8002360:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002368:	edc7 7a08 	vstr	s15, [r7, #32]
   const float CodeToVoltage = Vdda_Val / 4096;
 800236c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002370:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80023d0 <GetAdcValues+0x29c>
 8002374:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002378:	edc7 7a07 	vstr	s15, [r7, #28]

   // Переключаемый делитель напряжения
   // Вычисляем переходную характеристику в зависимости от состояния переключателя
   const float R10 = 36.5, R8 = 20.0, R11 = 10.0;
 800237c:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <GetAdcValues+0x2a0>)
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <GetAdcValues+0x2a4>)
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <GetAdcValues+0x2a8>)
 8002386:	613b      	str	r3, [r7, #16]
   const float RLow = (HAL_GPIO_ReadPin(Bat23_GPIO_Port, Bat23_Pin)) ? ((R11 * R8) / (R11 + R8)): R11;
 8002388:	2102      	movs	r1, #2
 800238a:	4815      	ldr	r0, [pc, #84]	@ (80023e0 <GetAdcValues+0x2ac>)
 800238c:	f002 f826 	bl	80043dc <HAL_GPIO_ReadPin>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d026      	beq.n	80023e4 <GetAdcValues+0x2b0>
 8002396:	ed97 7a04 	vldr	s14, [r7, #16]
 800239a:	edd7 7a05 	vldr	s15, [r7, #20]
 800239e:	ee67 6a27 	vmul.f32	s13, s14, s15
 80023a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80023a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80023aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023b2:	e019      	b.n	80023e8 <GetAdcValues+0x2b4>
 80023b4:	42028300 	.word	0x42028300
 80023b8:	42028000 	.word	0x42028000
 80023bc:	0bfa05a8 	.word	0x0bfa05a8
 80023c0:	0bfa05ca 	.word	0x0bfa05ca
 80023c4:	41f00000 	.word	0x41f00000
 80023c8:	43020000 	.word	0x43020000
 80023cc:	0bfa05aa 	.word	0x0bfa05aa
 80023d0:	45800000 	.word	0x45800000
 80023d4:	42120000 	.word	0x42120000
 80023d8:	41a00000 	.word	0x41a00000
 80023dc:	41200000 	.word	0x41200000
 80023e0:	42020000 	.word	0x42020000
 80023e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80023e8:	edc7 7a03 	vstr	s15, [r7, #12]
   const float PA10TransferK = (R10 + RLow) / RLow;
 80023ec:	ed97 7a06 	vldr	s14, [r7, #24]
 80023f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80023f4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80023f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80023fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002400:	edc7 7a02 	vstr	s15, [r7, #8]

   OutVal->PA10_Voltage = PA10_DATA * CodeToVoltage * PA10TransferK;
 8002404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800240e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002412:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002416:	edd7 7a02 	vldr	s15, [r7, #8]
 800241a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	edc3 7a01 	vstr	s15, [r3, #4]
   OutVal->Vdd_Voltage = VBAT_DATA * CodeToVoltage * 3;
 8002424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800242e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002436:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800243a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002444:	bf00      	nop
 8002446:	3750      	adds	r7, #80	@ 0x50
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800244c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002484 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002450:	f7ff fdb2 	bl	8001fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002454:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002456:	e003      	b.n	8002460 <LoopCopyDataInit>

08002458 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002458:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800245a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800245c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800245e:	3104      	adds	r1, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002460:	480a      	ldr	r0, [pc, #40]	@ (800248c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002462:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002464:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002466:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002468:	d3f6      	bcc.n	8002458 <CopyDataInit>
	ldr	r2, =_sbss
 800246a:	4a0a      	ldr	r2, [pc, #40]	@ (8002494 <LoopForever+0x12>)
	b	LoopFillZerobss
 800246c:	e002      	b.n	8002474 <LoopFillZerobss>

0800246e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800246e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002470:	f842 3b04 	str.w	r3, [r2], #4

08002474 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002474:	4b08      	ldr	r3, [pc, #32]	@ (8002498 <LoopForever+0x16>)
	cmp	r2, r3
 8002476:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002478:	d3f9      	bcc.n	800246e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800247a:	f007 faa7 	bl	80099cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800247e:	f7ff f835 	bl	80014ec <main>

08002482 <LoopForever>:

LoopForever:
    b LoopForever
 8002482:	e7fe      	b.n	8002482 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002484:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8002488:	0800debc 	.word	0x0800debc
	ldr	r0, =_sdata
 800248c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002490:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 8002494:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 8002498:	200004fc 	.word	0x200004fc

0800249c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800249c:	e7fe      	b.n	800249c <ADC1_2_IRQHandler>

0800249e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80024a8:	2004      	movs	r0, #4
 80024aa:	f001 fd1d 	bl	8003ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80024ae:	f7ff fd95 	bl	8001fdc <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024b2:	2007      	movs	r0, #7
 80024b4:	f000 f80e 	bl	80024d4 <HAL_InitTick>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	71fb      	strb	r3, [r7, #7]
 80024c2:	e001      	b.n	80024c8 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024c4:	f7ff fb34 	bl	8001b30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024c8:	79fb      	ldrb	r3, [r7, #7]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024e0:	4b17      	ldr	r3, [pc, #92]	@ (8002540 <HAL_InitTick+0x6c>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d023      	beq.n	8002530 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024e8:	4b16      	ldr	r3, [pc, #88]	@ (8002544 <HAL_InitTick+0x70>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b14      	ldr	r3, [pc, #80]	@ (8002540 <HAL_InitTick+0x6c>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	f001 fd25 	bl	8003f4e <HAL_SYSTICK_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10f      	bne.n	800252a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b07      	cmp	r3, #7
 800250e:	d809      	bhi.n	8002524 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002510:	2200      	movs	r2, #0
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f001 fcf1 	bl	8003efe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800251c:	4a0a      	ldr	r2, [pc, #40]	@ (8002548 <HAL_InitTick+0x74>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e007      	b.n	8002534 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e004      	b.n	8002534 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	e001      	b.n	8002534 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	2000000c 	.word	0x2000000c
 8002544:	20000004 	.word	0x20000004
 8002548:	20000008 	.word	0x20000008

0800254c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002550:	4b06      	ldr	r3, [pc, #24]	@ (800256c <HAL_IncTick+0x20>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <HAL_IncTick+0x24>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4413      	add	r3, r2
 800255c:	4a04      	ldr	r2, [pc, #16]	@ (8002570 <HAL_IncTick+0x24>)
 800255e:	6013      	str	r3, [r2, #0]
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	2000000c 	.word	0x2000000c
 8002570:	200003ac 	.word	0x200003ac

08002574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return uwTick;
 8002578:	4b03      	ldr	r3, [pc, #12]	@ (8002588 <HAL_GetTick+0x14>)
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	200003ac 	.word	0x200003ac

0800258c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002594:	f7ff ffee 	bl	8002574 <HAL_GetTick>
 8002598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d005      	beq.n	80025b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025a6:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <HAL_Delay+0x44>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025b2:	bf00      	nop
 80025b4:	f7ff ffde 	bl	8002574 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d8f7      	bhi.n	80025b4 <HAL_Delay+0x28>
  {
  }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	2000000c 	.word	0x2000000c

080025d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	609a      	str	r2, [r3, #8]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	609a      	str	r2, [r3, #8]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3360      	adds	r3, #96	@ 0x60
 800264e:	461a      	mov	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b08      	ldr	r3, [pc, #32]	@ (8002680 <LL_ADC_SetOffset+0x44>)
 800265e:	4013      	ands	r3, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	4313      	orrs	r3, r2
 800266c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002674:	bf00      	nop
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	03fff000 	.word	0x03fff000

08002684 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3360      	adds	r3, #96	@ 0x60
 8002692:	461a      	mov	r2, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3360      	adds	r3, #96	@ 0x60
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	615a      	str	r2, [r3, #20]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002732:	b480      	push	{r7}
 8002734:	b087      	sub	sp, #28
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3330      	adds	r3, #48	@ 0x30
 8002742:	461a      	mov	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	0a1b      	lsrs	r3, r3, #8
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	4413      	add	r3, r2
 8002750:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	211f      	movs	r1, #31
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	401a      	ands	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0e9b      	lsrs	r3, r3, #26
 800276a:	f003 011f 	and.w	r1, r3, #31
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	431a      	orrs	r2, r3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800277e:	bf00      	nop
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800278a:	b480      	push	{r7}
 800278c:	b087      	sub	sp, #28
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3314      	adds	r3, #20
 800279a:	461a      	mov	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	0e5b      	lsrs	r3, r3, #25
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	4413      	add	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	0d1b      	lsrs	r3, r3, #20
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2107      	movs	r1, #7
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	401a      	ands	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	0d1b      	lsrs	r3, r3, #20
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	431a      	orrs	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027d4:	bf00      	nop
 80027d6:	371c      	adds	r7, #28
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f8:	43db      	mvns	r3, r3
 80027fa:	401a      	ands	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 0318 	and.w	r3, r3, #24
 8002802:	4908      	ldr	r1, [pc, #32]	@ (8002824 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002804:	40d9      	lsrs	r1, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	400b      	ands	r3, r1
 800280a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280e:	431a      	orrs	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	0007ffff 	.word	0x0007ffff

08002828 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 031f 	and.w	r3, r3, #31
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002870:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6093      	str	r3, [r2, #8]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002898:	d101      	bne.n	800289e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80028bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028e8:	d101      	bne.n	80028ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800290c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002910:	f043 0201 	orr.w	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002934:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002938:	f043 0202 	orr.w	r2, r3, #2
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <LL_ADC_IsEnabled+0x18>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <LL_ADC_IsEnabled+0x1a>
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b02      	cmp	r3, #2
 8002984:	d101      	bne.n	800298a <LL_ADC_IsDisableOngoing+0x18>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <LL_ADC_IsDisableOngoing+0x1a>
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029ac:	f043 0204 	orr.w	r2, r3, #4
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029d4:	f043 0210 	orr.w	r2, r3, #16
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d101      	bne.n	8002a00 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a22:	f043 0220 	orr.w	r2, r3, #32
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d101      	bne.n	8002a4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b089      	sub	sp, #36	@ 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e12e      	b.n	8002cd4 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff f877 	bl	8001b78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fef1 	bl	8002884 <LL_ADC_IsDeepPowerDownEnabled>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d004      	beq.n	8002ab2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fed7 	bl	8002860 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff0c 	bl	80028d4 <LL_ADC_IsInternalRegulatorEnabled>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d115      	bne.n	8002aee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fef0 	bl	80028ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002acc:	4b83      	ldr	r3, [pc, #524]	@ (8002cdc <HAL_ADC_Init+0x280>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	099b      	lsrs	r3, r3, #6
 8002ad2:	4a83      	ldr	r2, [pc, #524]	@ (8002ce0 <HAL_ADC_Init+0x284>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	099b      	lsrs	r3, r3, #6
 8002ada:	3301      	adds	r3, #1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ae0:	e002      	b.n	8002ae8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f9      	bne.n	8002ae2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff feee 	bl	80028d4 <LL_ADC_IsInternalRegulatorEnabled>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10d      	bne.n	8002b1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b02:	f043 0210 	orr.w	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0e:	f043 0201 	orr.w	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff62 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 8002b24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f040 80c7 	bne.w	8002cc2 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 80c3 	bne.w	8002cc2 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b40:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002b44:	f043 0202 	orr.w	r2, r3, #2
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fefb 	bl	800294c <LL_ADC_IsEnabled>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d110      	bne.n	8002b7e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b5c:	4861      	ldr	r0, [pc, #388]	@ (8002ce4 <HAL_ADC_Init+0x288>)
 8002b5e:	f7ff fef5 	bl	800294c <LL_ADC_IsEnabled>
 8002b62:	4604      	mov	r4, r0
 8002b64:	4860      	ldr	r0, [pc, #384]	@ (8002ce8 <HAL_ADC_Init+0x28c>)
 8002b66:	f7ff fef1 	bl	800294c <LL_ADC_IsEnabled>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4323      	orrs	r3, r4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d105      	bne.n	8002b7e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4619      	mov	r1, r3
 8002b78:	485c      	ldr	r0, [pc, #368]	@ (8002cec <HAL_ADC_Init+0x290>)
 8002b7a:	f7ff fd2b 	bl	80025d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7e5b      	ldrb	r3, [r3, #25]
 8002b82:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b88:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b8e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b94:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b9c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d106      	bne.n	8002bba <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	045b      	lsls	r3, r3, #17
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc6:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bce:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	4b44      	ldr	r3, [pc, #272]	@ (8002cf0 <HAL_ADC_Init+0x294>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	69b9      	ldr	r1, [r7, #24]
 8002be6:	430b      	orrs	r3, r1
 8002be8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff ff21 	bl	8002a36 <LL_ADC_INJ_IsConversionOngoing>
 8002bf4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d140      	bne.n	8002c7e <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d13d      	bne.n	8002c7e <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	7e1b      	ldrb	r3, [r3, #24]
 8002c0a:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c0c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c14:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c24:	f023 0306 	bic.w	r3, r3, #6
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	69b9      	ldr	r1, [r7, #24]
 8002c2e:	430b      	orrs	r3, r1
 8002c30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d118      	bne.n	8002c6e <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c46:	f023 0304 	bic.w	r3, r3, #4
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c52:	4311      	orrs	r1, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002c58:	4311      	orrs	r1, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	611a      	str	r2, [r3, #16]
 8002c6c:	e007      	b.n	8002c7e <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d10c      	bne.n	8002ca0 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8c:	f023 010f 	bic.w	r1, r3, #15
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	1e5a      	subs	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c9e:	e007      	b.n	8002cb0 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 020f 	bic.w	r2, r2, #15
 8002cae:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb4:	f023 0303 	bic.w	r3, r3, #3
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cc0:	e007      	b.n	8002cd2 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc6:	f043 0210 	orr.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3724      	adds	r7, #36	@ 0x24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd90      	pop	{r4, r7, pc}
 8002cdc:	20000004 	.word	0x20000004
 8002ce0:	053e2d63 	.word	0x053e2d63
 8002ce4:	42028000 	.word	0x42028000
 8002ce8:	42028100 	.word	0x42028100
 8002cec:	42028300 	.word	0x42028300
 8002cf0:	fff0c007 	.word	0xfff0c007

08002cf4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cfc:	4857      	ldr	r0, [pc, #348]	@ (8002e5c <HAL_ADC_Start+0x168>)
 8002cfe:	f7ff fd93 	bl	8002828 <LL_ADC_GetMultimode>
 8002d02:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fe6d 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f040 809c 	bne.w	8002e4e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_Start+0x30>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e097      	b.n	8002e54 <HAL_ADC_Start+0x160>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fe5b 	bl	80039e8 <ADC_Enable>
 8002d32:	4603      	mov	r3, r0
 8002d34:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f040 8083 	bne.w	8002e44 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d42:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a42      	ldr	r2, [pc, #264]	@ (8002e60 <HAL_ADC_Start+0x16c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d002      	beq.n	8002d62 <HAL_ADC_Start+0x6e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	e000      	b.n	8002d64 <HAL_ADC_Start+0x70>
 8002d62:	4b40      	ldr	r3, [pc, #256]	@ (8002e64 <HAL_ADC_Start+0x170>)
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d002      	beq.n	8002d72 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d105      	bne.n	8002d7e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d76:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d8a:	d106      	bne.n	8002d9a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d90:	f023 0206 	bic.w	r2, r3, #6
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d98:	e002      	b.n	8002da0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	221c      	movs	r2, #28
 8002da6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e60 <HAL_ADC_Start+0x16c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d002      	beq.n	8002dc0 <HAL_ADC_Start+0xcc>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	e000      	b.n	8002dc2 <HAL_ADC_Start+0xce>
 8002dc0:	4b28      	ldr	r3, [pc, #160]	@ (8002e64 <HAL_ADC_Start+0x170>)
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d008      	beq.n	8002ddc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	2b05      	cmp	r3, #5
 8002dd4:	d002      	beq.n	8002ddc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b09      	cmp	r3, #9
 8002dda:	d114      	bne.n	8002e06 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002df2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fdca 	bl	8002998 <LL_ADC_REG_StartConversion>
 8002e04:	e025      	b.n	8002e52 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a12      	ldr	r2, [pc, #72]	@ (8002e60 <HAL_ADC_Start+0x16c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d002      	beq.n	8002e22 <HAL_ADC_Start+0x12e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	e000      	b.n	8002e24 <HAL_ADC_Start+0x130>
 8002e22:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <HAL_ADC_Start+0x170>)
 8002e24:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00f      	beq.n	8002e52 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e36:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e3a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e42:	e006      	b.n	8002e52 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002e4c:	e001      	b.n	8002e52 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	42028300 	.word	0x42028300
 8002e60:	42028100 	.word	0x42028100
 8002e64:	42028000 	.word	0x42028000

08002e68 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_Stop+0x16>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e023      	b.n	8002ec6 <HAL_ADC_Stop+0x5e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002e86:	2103      	movs	r1, #3
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fcf1 	bl	8003870 <ADC_ConversionStop>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d111      	bne.n	8002ebc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 fe2b 	bl	8003af4 <ADC_Disable>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	f043 0201 	orr.w	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eda:	4866      	ldr	r0, [pc, #408]	@ (8003074 <HAL_ADC_PollForConversion+0x1a4>)
 8002edc:	f7ff fca4 	bl	8002828 <LL_ADC_GetMultimode>
 8002ee0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d102      	bne.n	8002ef0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002eea:	2308      	movs	r3, #8
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	e02a      	b.n	8002f46 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b05      	cmp	r3, #5
 8002efa:	d002      	beq.n	8002f02 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2b09      	cmp	r3, #9
 8002f00:	d111      	bne.n	8002f26 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d007      	beq.n	8002f20 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0a4      	b.n	800306a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002f20:	2304      	movs	r3, #4
 8002f22:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002f24:	e00f      	b.n	8002f46 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f26:	4853      	ldr	r0, [pc, #332]	@ (8003074 <HAL_ADC_PollForConversion+0x1a4>)
 8002f28:	f7ff fc8c 	bl	8002844 <LL_ADC_GetMultiDMATransfer>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f36:	f043 0220 	orr.w	r2, r3, #32
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e093      	b.n	800306a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002f42:	2304      	movs	r3, #4
 8002f44:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f46:	f7ff fb15 	bl	8002574 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f4c:	e021      	b.n	8002f92 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d01d      	beq.n	8002f92 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002f56:	f7ff fb0d 	bl	8002574 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <HAL_ADC_PollForConversion+0x9c>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d112      	bne.n	8002f92 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10b      	bne.n	8002f92 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7e:	f043 0204 	orr.w	r2, r3, #4
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e06b      	b.n	800306a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0d6      	beq.n	8002f4e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fbab 	bl	800270c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01c      	beq.n	8002ff6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7e5b      	ldrb	r3, [r3, #25]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d118      	bne.n	8002ff6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d111      	bne.n	8002ff6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d105      	bne.n	8002ff6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fee:	f043 0201 	orr.w	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8003078 <HAL_ADC_PollForConversion+0x1a8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d002      	beq.n	8003006 <HAL_ADC_PollForConversion+0x136>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	e000      	b.n	8003008 <HAL_ADC_PollForConversion+0x138>
 8003006:	4b1d      	ldr	r3, [pc, #116]	@ (800307c <HAL_ADC_PollForConversion+0x1ac>)
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	4293      	cmp	r3, r2
 800300e:	d008      	beq.n	8003022 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b05      	cmp	r3, #5
 800301a:	d002      	beq.n	8003022 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b09      	cmp	r3, #9
 8003020:	d104      	bne.n	800302c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	e00c      	b.n	8003046 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a11      	ldr	r2, [pc, #68]	@ (8003078 <HAL_ADC_PollForConversion+0x1a8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d002      	beq.n	800303c <HAL_ADC_PollForConversion+0x16c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	e000      	b.n	800303e <HAL_ADC_PollForConversion+0x16e>
 800303c:	4b0f      	ldr	r3, [pc, #60]	@ (800307c <HAL_ADC_PollForConversion+0x1ac>)
 800303e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	2b08      	cmp	r3, #8
 800304a:	d104      	bne.n	8003056 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2208      	movs	r2, #8
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	e008      	b.n	8003068 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d103      	bne.n	8003068 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	220c      	movs	r2, #12
 8003066:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3720      	adds	r7, #32
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	42028300 	.word	0x42028300
 8003078:	42028100 	.word	0x42028100
 800307c:	42028000 	.word	0x42028000

08003080 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b0b7      	sub	sp, #220	@ 0xdc
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_ADC_ConfigChannel+0x22>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e3c1      	b.n	8003842 <HAL_ADC_ConfigChannel+0x7a6>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fc8c 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 83a6 	bne.w	8003824 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6859      	ldr	r1, [r3, #4]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	f7ff fb24 	bl	8002732 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fc7a 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 80030f4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fc9a 	bl	8002a36 <LL_ADC_INJ_IsConversionOngoing>
 8003102:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003106:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800310a:	2b00      	cmp	r3, #0
 800310c:	f040 81c1 	bne.w	8003492 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003114:	2b00      	cmp	r3, #0
 8003116:	f040 81bc 	bne.w	8003492 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003122:	d10f      	bne.n	8003144 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2200      	movs	r2, #0
 800312e:	4619      	mov	r1, r3
 8003130:	f7ff fb2b 	bl	800278a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fad2 	bl	80026e6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003142:	e00e      	b.n	8003162 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	6819      	ldr	r1, [r3, #0]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	461a      	mov	r2, r3
 8003152:	f7ff fb1a 	bl	800278a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fac2 	bl	80026e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	08db      	lsrs	r3, r3, #3
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2b04      	cmp	r3, #4
 8003182:	d00a      	beq.n	800319a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6919      	ldr	r1, [r3, #16]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003194:	f7ff fa52 	bl	800263c <LL_ADC_SetOffset>
 8003198:	e17b      	b.n	8003492 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fa6f 	bl	8002684 <LL_ADC_GetOffsetChannel>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x12a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fa64 	bl	8002684 <LL_ADC_GetOffsetChannel>
 80031bc:	4603      	mov	r3, r0
 80031be:	0e9b      	lsrs	r3, r3, #26
 80031c0:	f003 021f 	and.w	r2, r3, #31
 80031c4:	e01e      	b.n	8003204 <HAL_ADC_ConfigChannel+0x168>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2100      	movs	r1, #0
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fa59 	bl	8002684 <LL_ADC_GetOffsetChannel>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80031f4:	2320      	movs	r3, #32
 80031f6:	e004      	b.n	8003202 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80031f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031fc:	fab3 f383 	clz	r3, r3
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320c:	2b00      	cmp	r3, #0
 800320e:	d105      	bne.n	800321c <HAL_ADC_ConfigChannel+0x180>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	0e9b      	lsrs	r3, r3, #26
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	e018      	b.n	800324e <HAL_ADC_ConfigChannel+0x1b2>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003234:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003238:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8003240:	2320      	movs	r3, #32
 8003242:	e004      	b.n	800324e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8003244:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800324e:	429a      	cmp	r2, r3
 8003250:	d106      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2200      	movs	r2, #0
 8003258:	2100      	movs	r1, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fa28 	bl	80026b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fa0c 	bl	8002684 <LL_ADC_GetOffsetChannel>
 800326c:	4603      	mov	r3, r0
 800326e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <HAL_ADC_ConfigChannel+0x1f0>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2101      	movs	r1, #1
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fa01 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003282:	4603      	mov	r3, r0
 8003284:	0e9b      	lsrs	r3, r3, #26
 8003286:	f003 021f 	and.w	r2, r3, #31
 800328a:	e01e      	b.n	80032ca <HAL_ADC_ConfigChannel+0x22e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2101      	movs	r1, #1
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff f9f6 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003298:	4603      	mov	r3, r0
 800329a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80032aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80032b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80032ba:	2320      	movs	r3, #32
 80032bc:	e004      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80032be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d105      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x246>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	0e9b      	lsrs	r3, r3, #26
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	e018      	b.n	8003314 <HAL_ADC_ConfigChannel+0x278>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80032f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80032fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8003306:	2320      	movs	r3, #32
 8003308:	e004      	b.n	8003314 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800330a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003314:	429a      	cmp	r2, r3
 8003316:	d106      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2200      	movs	r2, #0
 800331e:	2101      	movs	r1, #1
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff f9c5 	bl	80026b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2102      	movs	r1, #2
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff f9a9 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003332:	4603      	mov	r3, r0
 8003334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x2b6>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2102      	movs	r1, #2
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff f99e 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003348:	4603      	mov	r3, r0
 800334a:	0e9b      	lsrs	r3, r3, #26
 800334c:	f003 021f 	and.w	r2, r3, #31
 8003350:	e01e      	b.n	8003390 <HAL_ADC_ConfigChannel+0x2f4>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2102      	movs	r1, #2
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff f993 	bl	8002684 <LL_ADC_GetOffsetChannel>
 800335e:	4603      	mov	r3, r0
 8003360:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003370:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003374:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003378:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8003380:	2320      	movs	r3, #32
 8003382:	e004      	b.n	800338e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8003384:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003388:	fab3 f383 	clz	r3, r3
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003398:	2b00      	cmp	r3, #0
 800339a:	d105      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x30c>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	0e9b      	lsrs	r3, r3, #26
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	e016      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x33a>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80033ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80033c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80033c8:	2320      	movs	r3, #32
 80033ca:	e004      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80033cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033d0:	fab3 f383 	clz	r3, r3
 80033d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d106      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2200      	movs	r2, #0
 80033e0:	2102      	movs	r1, #2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff f964 	bl	80026b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2103      	movs	r1, #3
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff f948 	bl	8002684 <LL_ADC_GetOffsetChannel>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x378>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2103      	movs	r1, #3
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff f93d 	bl	8002684 <LL_ADC_GetOffsetChannel>
 800340a:	4603      	mov	r3, r0
 800340c:	0e9b      	lsrs	r3, r3, #26
 800340e:	f003 021f 	and.w	r2, r3, #31
 8003412:	e017      	b.n	8003444 <HAL_ADC_ConfigChannel+0x3a8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2103      	movs	r1, #3
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff f932 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003420:	4603      	mov	r3, r0
 8003422:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800342c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800342e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003430:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8003436:	2320      	movs	r3, #32
 8003438:	e003      	b.n	8003442 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800343a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800343c:	fab3 f383 	clz	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <HAL_ADC_ConfigChannel+0x3c0>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	0e9b      	lsrs	r3, r3, #26
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	e011      	b.n	8003480 <HAL_ADC_ConfigChannel+0x3e4>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800346a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800346c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800346e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8003474:	2320      	movs	r3, #32
 8003476:	e003      	b.n	8003480 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8003478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003480:	429a      	cmp	r2, r3
 8003482:	d106      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2200      	movs	r2, #0
 800348a:	2103      	movs	r1, #3
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff f90f 	bl	80026b0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fa58 	bl	800294c <LL_ADC_IsEnabled>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f040 81c9 	bne.w	8003836 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6819      	ldr	r1, [r3, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	461a      	mov	r2, r3
 80034b2:	f7ff f995 	bl	80027e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	4a8f      	ldr	r2, [pc, #572]	@ (80036f8 <HAL_ADC_ConfigChannel+0x65c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	f040 8131 	bne.w	8003724 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x44e>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	0e9b      	lsrs	r3, r3, #26
 80034d8:	3301      	adds	r3, #1
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	2b09      	cmp	r3, #9
 80034e0:	bf94      	ite	ls
 80034e2:	2301      	movls	r3, #1
 80034e4:	2300      	movhi	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e019      	b.n	800351e <HAL_ADC_ConfigChannel+0x482>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80034f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034fa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80034fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8003502:	2320      	movs	r3, #32
 8003504:	e003      	b.n	800350e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8003506:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	3301      	adds	r3, #1
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	2b09      	cmp	r3, #9
 8003516:	bf94      	ite	ls
 8003518:	2301      	movls	r3, #1
 800351a:	2300      	movhi	r3, #0
 800351c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800351e:	2b00      	cmp	r3, #0
 8003520:	d079      	beq.n	8003616 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352a:	2b00      	cmp	r3, #0
 800352c:	d107      	bne.n	800353e <HAL_ADC_ConfigChannel+0x4a2>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	0e9b      	lsrs	r3, r3, #26
 8003534:	3301      	adds	r3, #1
 8003536:	069b      	lsls	r3, r3, #26
 8003538:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800353c:	e015      	b.n	800356a <HAL_ADC_ConfigChannel+0x4ce>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003546:	fa93 f3a3 	rbit	r3, r3
 800354a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800354c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800354e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003556:	2320      	movs	r3, #32
 8003558:	e003      	b.n	8003562 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800355a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
 8003562:	3301      	adds	r3, #1
 8003564:	069b      	lsls	r3, r3, #26
 8003566:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <HAL_ADC_ConfigChannel+0x4ee>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	0e9b      	lsrs	r3, r3, #26
 800357c:	3301      	adds	r3, #1
 800357e:	f003 031f 	and.w	r3, r3, #31
 8003582:	2101      	movs	r1, #1
 8003584:	fa01 f303 	lsl.w	r3, r1, r3
 8003588:	e017      	b.n	80035ba <HAL_ADC_ConfigChannel+0x51e>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003598:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800359a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800359c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80035a2:	2320      	movs	r3, #32
 80035a4:	e003      	b.n	80035ae <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80035a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035a8:	fab3 f383 	clz	r3, r3
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	3301      	adds	r3, #1
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	2101      	movs	r1, #1
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	ea42 0103 	orr.w	r1, r2, r3
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10a      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x544>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	0e9b      	lsrs	r3, r3, #26
 80035d0:	3301      	adds	r3, #1
 80035d2:	f003 021f 	and.w	r2, r3, #31
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	051b      	lsls	r3, r3, #20
 80035de:	e018      	b.n	8003612 <HAL_ADC_ConfigChannel+0x576>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80035ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80035f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80035f8:	2320      	movs	r3, #32
 80035fa:	e003      	b.n	8003604 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80035fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	3301      	adds	r3, #1
 8003606:	f003 021f 	and.w	r2, r3, #31
 800360a:	4613      	mov	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4413      	add	r3, r2
 8003610:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003612:	430b      	orrs	r3, r1
 8003614:	e081      	b.n	800371a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361e:	2b00      	cmp	r3, #0
 8003620:	d107      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x596>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	0e9b      	lsrs	r3, r3, #26
 8003628:	3301      	adds	r3, #1
 800362a:	069b      	lsls	r3, r3, #26
 800362c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003630:	e015      	b.n	800365e <HAL_ADC_ConfigChannel+0x5c2>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003642:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800364a:	2320      	movs	r3, #32
 800364c:	e003      	b.n	8003656 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800364e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	3301      	adds	r3, #1
 8003658:	069b      	lsls	r3, r3, #26
 800365a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_ADC_ConfigChannel+0x5e2>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	0e9b      	lsrs	r3, r3, #26
 8003670:	3301      	adds	r3, #1
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	2101      	movs	r1, #1
 8003678:	fa01 f303 	lsl.w	r3, r1, r3
 800367c:	e017      	b.n	80036ae <HAL_ADC_ConfigChannel+0x612>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	61fb      	str	r3, [r7, #28]
  return result;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8003696:	2320      	movs	r3, #32
 8003698:	e003      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	3301      	adds	r3, #1
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	2101      	movs	r1, #1
 80036aa:	fa01 f303 	lsl.w	r3, r1, r3
 80036ae:	ea42 0103 	orr.w	r1, r2, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10d      	bne.n	80036da <HAL_ADC_ConfigChannel+0x63e>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	0e9b      	lsrs	r3, r3, #26
 80036c4:	3301      	adds	r3, #1
 80036c6:	f003 021f 	and.w	r2, r3, #31
 80036ca:	4613      	mov	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4413      	add	r3, r2
 80036d0:	3b1e      	subs	r3, #30
 80036d2:	051b      	lsls	r3, r3, #20
 80036d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036d8:	e01e      	b.n	8003718 <HAL_ADC_ConfigChannel+0x67c>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	613b      	str	r3, [r7, #16]
  return result;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d104      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80036f2:	2320      	movs	r3, #32
 80036f4:	e006      	b.n	8003704 <HAL_ADC_ConfigChannel+0x668>
 80036f6:	bf00      	nop
 80036f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	3301      	adds	r3, #1
 8003706:	f003 021f 	and.w	r2, r3, #31
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	3b1e      	subs	r3, #30
 8003712:	051b      	lsls	r3, r3, #20
 8003714:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003718:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800371e:	4619      	mov	r1, r3
 8003720:	f7ff f833 	bl	800278a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	4b48      	ldr	r3, [pc, #288]	@ (800384c <HAL_ADC_ConfigChannel+0x7b0>)
 800372a:	4013      	ands	r3, r2
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8082 	beq.w	8003836 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003732:	4847      	ldr	r0, [pc, #284]	@ (8003850 <HAL_ADC_ConfigChannel+0x7b4>)
 8003734:	f7fe ff74 	bl	8002620 <LL_ADC_GetCommonPathInternalCh>
 8003738:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800373c:	4845      	ldr	r0, [pc, #276]	@ (8003854 <HAL_ADC_ConfigChannel+0x7b8>)
 800373e:	f7ff f905 	bl	800294c <LL_ADC_IsEnabled>
 8003742:	4604      	mov	r4, r0
 8003744:	4844      	ldr	r0, [pc, #272]	@ (8003858 <HAL_ADC_ConfigChannel+0x7bc>)
 8003746:	f7ff f901 	bl	800294c <LL_ADC_IsEnabled>
 800374a:	4603      	mov	r3, r0
 800374c:	4323      	orrs	r3, r4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d15e      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a41      	ldr	r2, [pc, #260]	@ (800385c <HAL_ADC_ConfigChannel+0x7c0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d127      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800375c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003760:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d121      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a39      	ldr	r2, [pc, #228]	@ (8003854 <HAL_ADC_ConfigChannel+0x7b8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d161      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003772:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003776:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800377a:	4619      	mov	r1, r3
 800377c:	4834      	ldr	r0, [pc, #208]	@ (8003850 <HAL_ADC_ConfigChannel+0x7b4>)
 800377e:	f7fe ff3c 	bl	80025fa <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003782:	4b37      	ldr	r3, [pc, #220]	@ (8003860 <HAL_ADC_ConfigChannel+0x7c4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	099b      	lsrs	r3, r3, #6
 8003788:	4a36      	ldr	r2, [pc, #216]	@ (8003864 <HAL_ADC_ConfigChannel+0x7c8>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	099b      	lsrs	r3, r3, #6
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800379a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800379c:	e002      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f9      	bne.n	800379e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037aa:	e044      	b.n	8003836 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003868 <HAL_ADC_ConfigChannel+0x7cc>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d113      	bne.n	80037de <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10d      	bne.n	80037de <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a23      	ldr	r2, [pc, #140]	@ (8003854 <HAL_ADC_ConfigChannel+0x7b8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d134      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037d4:	4619      	mov	r1, r3
 80037d6:	481e      	ldr	r0, [pc, #120]	@ (8003850 <HAL_ADC_ConfigChannel+0x7b4>)
 80037d8:	f7fe ff0f 	bl	80025fa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037dc:	e02b      	b.n	8003836 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a22      	ldr	r2, [pc, #136]	@ (800386c <HAL_ADC_ConfigChannel+0x7d0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d126      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d120      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a16      	ldr	r2, [pc, #88]	@ (8003854 <HAL_ADC_ConfigChannel+0x7b8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d11b      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003802:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003806:	4619      	mov	r1, r3
 8003808:	4811      	ldr	r0, [pc, #68]	@ (8003850 <HAL_ADC_ConfigChannel+0x7b4>)
 800380a:	f7fe fef6 	bl	80025fa <LL_ADC_SetCommonPathInternalCh>
 800380e:	e012      	b.n	8003836 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003822:	e008      	b.n	8003836 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003828:	f043 0220 	orr.w	r2, r3, #32
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800383e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003842:	4618      	mov	r0, r3
 8003844:	37dc      	adds	r7, #220	@ 0xdc
 8003846:	46bd      	mov	sp, r7
 8003848:	bd90      	pop	{r4, r7, pc}
 800384a:	bf00      	nop
 800384c:	80080000 	.word	0x80080000
 8003850:	42028300 	.word	0x42028300
 8003854:	42028000 	.word	0x42028000
 8003858:	42028100 	.word	0x42028100
 800385c:	c7520000 	.word	0xc7520000
 8003860:	20000004 	.word	0x20000004
 8003864:	053e2d63 	.word	0x053e2d63
 8003868:	cb840000 	.word	0xcb840000
 800386c:	80000001 	.word	0x80000001

08003870 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff f8ae 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 800388c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff f8cf 	bl	8002a36 <LL_ADC_INJ_IsConversionOngoing>
 8003898:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d103      	bne.n	80038a8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8098 	beq.w	80039d8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d02a      	beq.n	800390c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	7e5b      	ldrb	r3, [r3, #25]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d126      	bne.n	800390c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	7e1b      	ldrb	r3, [r3, #24]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d122      	bne.n	800390c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80038c6:	2301      	movs	r3, #1
 80038c8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038ca:	e014      	b.n	80038f6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	4a45      	ldr	r2, [pc, #276]	@ (80039e4 <ADC_ConversionStop+0x174>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d90d      	bls.n	80038f0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d8:	f043 0210 	orr.w	r2, r3, #16
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e4:	f043 0201 	orr.w	r2, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e074      	b.n	80039da <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	3301      	adds	r3, #1
 80038f4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003900:	2b40      	cmp	r3, #64	@ 0x40
 8003902:	d1e3      	bne.n	80038cc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2240      	movs	r2, #64	@ 0x40
 800390a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d014      	beq.n	800393c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff f866 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00c      	beq.n	800393c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff f823 	bl	8002972 <LL_ADC_IsDisableOngoing>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d104      	bne.n	800393c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff f842 	bl	80029c0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d014      	beq.n	800396c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff f875 	bl	8002a36 <LL_ADC_INJ_IsConversionOngoing>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00c      	beq.n	800396c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff f80b 	bl	8002972 <LL_ADC_IsDisableOngoing>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d104      	bne.n	800396c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff f851 	bl	8002a0e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d005      	beq.n	800397e <ADC_ConversionStop+0x10e>
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d105      	bne.n	8003984 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003978:	230c      	movs	r3, #12
 800397a:	617b      	str	r3, [r7, #20]
        break;
 800397c:	e005      	b.n	800398a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800397e:	2308      	movs	r3, #8
 8003980:	617b      	str	r3, [r7, #20]
        break;
 8003982:	e002      	b.n	800398a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003984:	2304      	movs	r3, #4
 8003986:	617b      	str	r3, [r7, #20]
        break;
 8003988:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800398a:	f7fe fdf3 	bl	8002574 <HAL_GetTick>
 800398e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003990:	e01b      	b.n	80039ca <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003992:	f7fe fdef 	bl	8002574 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b05      	cmp	r3, #5
 800399e:	d914      	bls.n	80039ca <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00d      	beq.n	80039ca <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b2:	f043 0210 	orr.w	r2, r3, #16
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039be:	f043 0201 	orr.w	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e007      	b.n	80039da <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1dc      	bne.n	8003992 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	a33fffff 	.word	0xa33fffff

080039e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe ffa7 	bl	800294c <LL_ADC_IsEnabled>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d169      	bne.n	8003ad8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	4b36      	ldr	r3, [pc, #216]	@ (8003ae4 <ADC_Enable+0xfc>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a16:	f043 0210 	orr.w	r2, r3, #16
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a22:	f043 0201 	orr.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e055      	b.n	8003ada <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe ff62 	bl	80028fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a38:	482b      	ldr	r0, [pc, #172]	@ (8003ae8 <ADC_Enable+0x100>)
 8003a3a:	f7fe fdf1 	bl	8002620 <LL_ADC_GetCommonPathInternalCh>
 8003a3e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d013      	beq.n	8003a70 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a48:	4b28      	ldr	r3, [pc, #160]	@ (8003aec <ADC_Enable+0x104>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	4a28      	ldr	r2, [pc, #160]	@ (8003af0 <ADC_Enable+0x108>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	099b      	lsrs	r3, r3, #6
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	4613      	mov	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a62:	e002      	b.n	8003a6a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f9      	bne.n	8003a64 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a70:	f7fe fd80 	bl	8002574 <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a76:	e028      	b.n	8003aca <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe ff65 	bl	800294c <LL_ADC_IsEnabled>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d104      	bne.n	8003a92 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fe ff35 	bl	80028fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a92:	f7fe fd6f 	bl	8002574 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d914      	bls.n	8003aca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d00d      	beq.n	8003aca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab2:	f043 0210 	orr.w	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abe:	f043 0201 	orr.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e007      	b.n	8003ada <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d1cf      	bne.n	8003a78 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	8000003f 	.word	0x8000003f
 8003ae8:	42028300 	.word	0x42028300
 8003aec:	20000004 	.word	0x20000004
 8003af0:	053e2d63 	.word	0x053e2d63

08003af4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe ff36 	bl	8002972 <LL_ADC_IsDisableOngoing>
 8003b06:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe ff1d 	bl	800294c <LL_ADC_IsEnabled>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d047      	beq.n	8003ba8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d144      	bne.n	8003ba8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 030d 	and.w	r3, r3, #13
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d10c      	bne.n	8003b46 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe fef7 	bl	8002924 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b3e:	f7fe fd19 	bl	8002574 <HAL_GetTick>
 8003b42:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b44:	e029      	b.n	8003b9a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4a:	f043 0210 	orr.w	r2, r3, #16
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b56:	f043 0201 	orr.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e023      	b.n	8003baa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b62:	f7fe fd07 	bl	8002574 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d914      	bls.n	8003b9a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00d      	beq.n	8003b9a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b82:	f043 0210 	orr.w	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8e:	f043 0201 	orr.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e007      	b.n	8003baa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1dc      	bne.n	8003b62 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <LL_ADC_IsEnabled>:
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <LL_ADC_IsEnabled+0x18>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <LL_ADC_IsEnabled+0x1a>
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LL_ADC_REG_IsConversionOngoing>:
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d101      	bne.n	8003bf0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	b0a1      	sub	sp, #132	@ 0x84
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e089      	b.n	8003d32 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003c26:	2300      	movs	r3, #0
 8003c28:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a42      	ldr	r2, [pc, #264]	@ (8003d3c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d102      	bne.n	8003c3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c38:	4b41      	ldr	r3, [pc, #260]	@ (8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	e001      	b.n	8003c42 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10b      	bne.n	8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e068      	b.n	8003d32 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff ffb8 	bl	8003bd8 <LL_ADC_REG_IsConversionOngoing>
 8003c68:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff ffb2 	bl	8003bd8 <LL_ADC_REG_IsConversionOngoing>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d14a      	bne.n	8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003c7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d147      	bne.n	8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c80:	4b30      	ldr	r3, [pc, #192]	@ (8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003c82:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d027      	beq.n	8003cdc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c9e:	035b      	lsls	r3, r3, #13
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ca6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ca8:	4824      	ldr	r0, [pc, #144]	@ (8003d3c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003caa:	f7ff ff82 	bl	8003bb2 <LL_ADC_IsEnabled>
 8003cae:	4604      	mov	r4, r0
 8003cb0:	4823      	ldr	r0, [pc, #140]	@ (8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003cb2:	f7ff ff7e 	bl	8003bb2 <LL_ADC_IsEnabled>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4323      	orrs	r3, r4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d132      	bne.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003cc6:	f023 030f 	bic.w	r3, r3, #15
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	6811      	ldr	r1, [r2, #0]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	6892      	ldr	r2, [r2, #8]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cd8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cda:	e023      	b.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003cdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ce4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ce6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ce8:	4814      	ldr	r0, [pc, #80]	@ (8003d3c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003cea:	f7ff ff62 	bl	8003bb2 <LL_ADC_IsEnabled>
 8003cee:	4604      	mov	r4, r0
 8003cf0:	4813      	ldr	r0, [pc, #76]	@ (8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003cf2:	f7ff ff5e 	bl	8003bb2 <LL_ADC_IsEnabled>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4323      	orrs	r3, r4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d112      	bne.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003cfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d06:	f023 030f 	bic.w	r3, r3, #15
 8003d0a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003d0c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d0e:	e009      	b.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003d22:	e000      	b.n	8003d26 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003d2e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3784      	adds	r7, #132	@ 0x84
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd90      	pop	{r4, r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	42028000 	.word	0x42028000
 8003d40:	42028100 	.word	0x42028100
 8003d44:	42028300 	.word	0x42028300

08003d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d58:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <__NVIC_SetPriorityGrouping+0x44>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d64:	4013      	ands	r3, r2
 8003d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d7a:	4a04      	ldr	r2, [pc, #16]	@ (8003d8c <__NVIC_SetPriorityGrouping+0x44>)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	60d3      	str	r3, [r2, #12]
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	e000ed00 	.word	0xe000ed00

08003d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d94:	4b04      	ldr	r3, [pc, #16]	@ (8003da8 <__NVIC_GetPriorityGrouping+0x18>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	0a1b      	lsrs	r3, r3, #8
 8003d9a:	f003 0307 	and.w	r3, r3, #7
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	db0b      	blt.n	8003dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	f003 021f 	and.w	r2, r3, #31
 8003dc4:	4907      	ldr	r1, [pc, #28]	@ (8003de4 <__NVIC_EnableIRQ+0x38>)
 8003dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	2001      	movs	r0, #1
 8003dce:	fa00 f202 	lsl.w	r2, r0, r2
 8003dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	e000e100 	.word	0xe000e100

08003de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	6039      	str	r1, [r7, #0]
 8003df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	db0a      	blt.n	8003e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	490c      	ldr	r1, [pc, #48]	@ (8003e34 <__NVIC_SetPriority+0x4c>)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	0152      	lsls	r2, r2, #5
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e10:	e00a      	b.n	8003e28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	4908      	ldr	r1, [pc, #32]	@ (8003e38 <__NVIC_SetPriority+0x50>)
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	3b04      	subs	r3, #4
 8003e20:	0152      	lsls	r2, r2, #5
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	440b      	add	r3, r1
 8003e26:	761a      	strb	r2, [r3, #24]
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	e000e100 	.word	0xe000e100
 8003e38:	e000ed00 	.word	0xe000ed00

08003e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b089      	sub	sp, #36	@ 0x24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f1c3 0307 	rsb	r3, r3, #7
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	bf28      	it	cs
 8003e5a:	2303      	movcs	r3, #3
 8003e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	3303      	adds	r3, #3
 8003e62:	2b06      	cmp	r3, #6
 8003e64:	d902      	bls.n	8003e6c <NVIC_EncodePriority+0x30>
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3b04      	subs	r3, #4
 8003e6a:	e000      	b.n	8003e6e <NVIC_EncodePriority+0x32>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e70:	f04f 32ff 	mov.w	r2, #4294967295
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	401a      	ands	r2, r3
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e84:	f04f 31ff 	mov.w	r1, #4294967295
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8e:	43d9      	mvns	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e94:	4313      	orrs	r3, r2
         );
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3724      	adds	r7, #36	@ 0x24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003eb4:	d301      	bcc.n	8003eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e00f      	b.n	8003eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee4 <SysTick_Config+0x40>)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ec2:	2107      	movs	r1, #7
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec8:	f7ff ff8e 	bl	8003de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ecc:	4b05      	ldr	r3, [pc, #20]	@ (8003ee4 <SysTick_Config+0x40>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ed2:	4b04      	ldr	r3, [pc, #16]	@ (8003ee4 <SysTick_Config+0x40>)
 8003ed4:	2207      	movs	r2, #7
 8003ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	e000e010 	.word	0xe000e010

08003ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff ff29 	bl	8003d48 <__NVIC_SetPriorityGrouping>
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b086      	sub	sp, #24
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	4603      	mov	r3, r0
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f0c:	f7ff ff40 	bl	8003d90 <__NVIC_GetPriorityGrouping>
 8003f10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	6978      	ldr	r0, [r7, #20]
 8003f18:	f7ff ff90 	bl	8003e3c <NVIC_EncodePriority>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff5f 	bl	8003de8 <__NVIC_SetPriority>
}
 8003f2a:	bf00      	nop
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	4603      	mov	r3, r0
 8003f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff33 	bl	8003dac <__NVIC_EnableIRQ>
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff ffa4 	bl	8003ea4 <SysTick_Config>
 8003f5c:	4603      	mov	r3, r0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d008      	beq.n	8003f90 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2204      	movs	r2, #4
 8003f82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e040      	b.n	8004012 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 020e 	bic.w	r2, r2, #14
 8003f9e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003faa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc4:	f003 021c 	and.w	r2, r3, #28
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fcc:	2101      	movs	r1, #1
 8003fce:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003fdc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00c      	beq.n	8004000 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003ffe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004010:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d005      	beq.n	8004042 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2204      	movs	r2, #4
 800403a:	645a      	str	r2, [r3, #68]	@ 0x44

    status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	e047      	b.n	80040d2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 020e 	bic.w	r2, r2, #14
 8004050:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0201 	bic.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800406c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004070:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004076:	f003 021c 	and.w	r2, r3, #28
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800407e:	2101      	movs	r1, #1
 8004080:	fa01 f202 	lsl.w	r2, r1, r2
 8004084:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800408e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00c      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80040b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
    }
  }
  return status;
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040ea:	e158      	b.n	800439e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	2101      	movs	r1, #1
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	fa01 f303 	lsl.w	r3, r1, r3
 80040f8:	4013      	ands	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 814a 	beq.w	8004398 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	2b01      	cmp	r3, #1
 800410e:	d005      	beq.n	800411c <HAL_GPIO_Init+0x40>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d130      	bne.n	800417e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	2203      	movs	r2, #3
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4013      	ands	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004152:	2201      	movs	r2, #1
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43db      	mvns	r3, r3
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4013      	ands	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	091b      	lsrs	r3, r3, #4
 8004168:	f003 0201 	and.w	r2, r3, #1
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b03      	cmp	r3, #3
 8004188:	d017      	beq.n	80041ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	2203      	movs	r2, #3
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43db      	mvns	r3, r3
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4013      	ands	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d123      	bne.n	800420e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	08da      	lsrs	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3208      	adds	r2, #8
 80041ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	220f      	movs	r2, #15
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	08da      	lsrs	r2, r3, #3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3208      	adds	r2, #8
 8004208:	6939      	ldr	r1, [r7, #16]
 800420a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	2203      	movs	r2, #3
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4013      	ands	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0203 	and.w	r2, r3, #3
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 80a4 	beq.w	8004398 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8004250:	4a5a      	ldr	r2, [pc, #360]	@ (80043bc <HAL_GPIO_Init+0x2e0>)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	089b      	lsrs	r3, r3, #2
 8004256:	3318      	adds	r3, #24
 8004258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	220f      	movs	r2, #15
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4013      	ands	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a52      	ldr	r2, [pc, #328]	@ (80043c0 <HAL_GPIO_Init+0x2e4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d025      	beq.n	80042c8 <HAL_GPIO_Init+0x1ec>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a51      	ldr	r2, [pc, #324]	@ (80043c4 <HAL_GPIO_Init+0x2e8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d01f      	beq.n	80042c4 <HAL_GPIO_Init+0x1e8>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a50      	ldr	r2, [pc, #320]	@ (80043c8 <HAL_GPIO_Init+0x2ec>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d019      	beq.n	80042c0 <HAL_GPIO_Init+0x1e4>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a4f      	ldr	r2, [pc, #316]	@ (80043cc <HAL_GPIO_Init+0x2f0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <HAL_GPIO_Init+0x1e0>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a4e      	ldr	r2, [pc, #312]	@ (80043d0 <HAL_GPIO_Init+0x2f4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00d      	beq.n	80042b8 <HAL_GPIO_Init+0x1dc>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a4d      	ldr	r2, [pc, #308]	@ (80043d4 <HAL_GPIO_Init+0x2f8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <HAL_GPIO_Init+0x1d8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a4c      	ldr	r2, [pc, #304]	@ (80043d8 <HAL_GPIO_Init+0x2fc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d101      	bne.n	80042b0 <HAL_GPIO_Init+0x1d4>
 80042ac:	2306      	movs	r3, #6
 80042ae:	e00c      	b.n	80042ca <HAL_GPIO_Init+0x1ee>
 80042b0:	2307      	movs	r3, #7
 80042b2:	e00a      	b.n	80042ca <HAL_GPIO_Init+0x1ee>
 80042b4:	2305      	movs	r3, #5
 80042b6:	e008      	b.n	80042ca <HAL_GPIO_Init+0x1ee>
 80042b8:	2304      	movs	r3, #4
 80042ba:	e006      	b.n	80042ca <HAL_GPIO_Init+0x1ee>
 80042bc:	2303      	movs	r3, #3
 80042be:	e004      	b.n	80042ca <HAL_GPIO_Init+0x1ee>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e002      	b.n	80042ca <HAL_GPIO_Init+0x1ee>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <HAL_GPIO_Init+0x1ee>
 80042c8:	2300      	movs	r3, #0
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	f002 0203 	and.w	r2, r2, #3
 80042d0:	00d2      	lsls	r2, r2, #3
 80042d2:	4093      	lsls	r3, r2
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80042da:	4938      	ldr	r1, [pc, #224]	@ (80043bc <HAL_GPIO_Init+0x2e0>)
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	089b      	lsrs	r3, r3, #2
 80042e0:	3318      	adds	r3, #24
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042e8:	4b34      	ldr	r3, [pc, #208]	@ (80043bc <HAL_GPIO_Init+0x2e0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4013      	ands	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800430c:	4a2b      	ldr	r2, [pc, #172]	@ (80043bc <HAL_GPIO_Init+0x2e0>)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004312:	4b2a      	ldr	r3, [pc, #168]	@ (80043bc <HAL_GPIO_Init+0x2e0>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	43db      	mvns	r3, r3
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4013      	ands	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004336:	4a21      	ldr	r2, [pc, #132]	@ (80043bc <HAL_GPIO_Init+0x2e0>)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800433c:	4b1f      	ldr	r3, [pc, #124]	@ (80043bc <HAL_GPIO_Init+0x2e0>)
 800433e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	43db      	mvns	r3, r3
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4013      	ands	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004362:	4a16      	ldr	r2, [pc, #88]	@ (80043bc <HAL_GPIO_Init+0x2e0>)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 800436a:	4b14      	ldr	r3, [pc, #80]	@ (80043bc <HAL_GPIO_Init+0x2e0>)
 800436c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	43db      	mvns	r3, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004390:	4a0a      	ldr	r2, [pc, #40]	@ (80043bc <HAL_GPIO_Init+0x2e0>)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	3301      	adds	r3, #1
 800439c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	fa22 f303 	lsr.w	r3, r2, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f47f ae9f 	bne.w	80040ec <HAL_GPIO_Init+0x10>
  }
}
 80043ae:	bf00      	nop
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	4002f400 	.word	0x4002f400
 80043c0:	42020000 	.word	0x42020000
 80043c4:	42020400 	.word	0x42020400
 80043c8:	42020800 	.word	0x42020800
 80043cc:	42020c00 	.word	0x42020c00
 80043d0:	42021000 	.word	0x42021000
 80043d4:	42021400 	.word	0x42021400
 80043d8:	42021800 	.word	0x42021800

080043dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	887b      	ldrh	r3, [r7, #2]
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
 80043f8:	e001      	b.n	80043fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	807b      	strh	r3, [r7, #2]
 8004418:	4613      	mov	r3, r2
 800441a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800441c:	787b      	ldrb	r3, [r7, #1]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004422:	887a      	ldrh	r2, [r7, #2]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004428:	e002      	b.n	8004430 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800442a:	887a      	ldrh	r2, [r7, #2]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10c      	bne.n	8004468 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800444e:	4b13      	ldr	r3, [pc, #76]	@ (800449c <HAL_PWR_EnterSLEEPMode+0x60>)
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004456:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800445a:	d10e      	bne.n	800447a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800445c:	f000 f89c 	bl	8004598 <HAL_PWREx_DisableLowPowerRunMode>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8004466:	e016      	b.n	8004496 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8004468:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <HAL_PWR_EnterSLEEPMode+0x60>)
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004474:	d001      	beq.n	800447a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004476:	f000 f87f 	bl	8004578 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800447a:	4b09      	ldr	r3, [pc, #36]	@ (80044a0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	4a08      	ldr	r2, [pc, #32]	@ (80044a0 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004480:	f023 0304 	bic.w	r3, r3, #4
 8004484:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800448c:	bf30      	wfi
 800448e:	e002      	b.n	8004496 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004490:	bf40      	sev
    __WFE();
 8004492:	bf20      	wfe
    __WFE();
 8004494:	bf20      	wfe
  }

}
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40007000 	.word	0x40007000
 80044a0:	e000ed00 	.word	0xe000ed00

080044a4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80044a8:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <HAL_PWREx_GetVoltageRange+0x18>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40007000 	.word	0x40007000

080044c0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80044c8:	4b27      	ldr	r3, [pc, #156]	@ (8004568 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044d0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80044d2:	f000 f8b1 	bl	8004638 <HAL_PWREx_SMPS_GetEffectiveMode>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044dc:	d101      	bne.n	80044e2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e03e      	b.n	8004560 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80044e2:	4b21      	ldr	r3, [pc, #132]	@ (8004568 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044ee:	d101      	bne.n	80044f4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e035      	b.n	8004560 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d101      	bne.n	8004500 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	e02f      	b.n	8004560 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004500:	4b19      	ldr	r3, [pc, #100]	@ (8004568 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004508:	4917      	ldr	r1, [pc, #92]	@ (8004568 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4313      	orrs	r3, r2
 800450e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004510:	4b16      	ldr	r3, [pc, #88]	@ (800456c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	4a16      	ldr	r2, [pc, #88]	@ (8004570 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	09db      	lsrs	r3, r3, #7
 800451e:	2232      	movs	r2, #50	@ 0x32
 8004520:	fb02 f303 	mul.w	r3, r2, r3
 8004524:	4a13      	ldr	r2, [pc, #76]	@ (8004574 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	08db      	lsrs	r3, r3, #3
 800452c:	3301      	adds	r3, #1
 800452e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004530:	e002      	b.n	8004538 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3b01      	subs	r3, #1
 8004536:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004538:	4b0b      	ldr	r3, [pc, #44]	@ (8004568 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004544:	d102      	bne.n	800454c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f2      	bne.n	8004532 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800454c:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004558:	d101      	bne.n	800455e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e000      	b.n	8004560 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40007000 	.word	0x40007000
 800456c:	20000004 	.word	0x20000004
 8004570:	0a7c5ac5 	.word	0x0a7c5ac5
 8004574:	cccccccd 	.word	0xcccccccd

08004578 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800457c:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a04      	ldr	r2, [pc, #16]	@ (8004594 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8004582:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004586:	6013      	str	r3, [r2, #0]
}
 8004588:	bf00      	nop
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40007000 	.word	0x40007000

08004598 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800459e:	4b1a      	ldr	r3, [pc, #104]	@ (8004608 <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a19      	ldr	r2, [pc, #100]	@ (8004608 <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 80045a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045a8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_REGLP_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80045aa:	4b18      	ldr	r3, [pc, #96]	@ (800460c <HAL_PWREx_DisableLowPowerRunMode+0x74>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	4a17      	ldr	r2, [pc, #92]	@ (8004610 <HAL_PWREx_DisableLowPowerRunMode+0x78>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	09db      	lsrs	r3, r3, #7
 80045b8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80045bc:	fb02 f303 	mul.w	r3, r2, r3
 80045c0:	4a14      	ldr	r2, [pc, #80]	@ (8004614 <HAL_PWREx_DisableLowPowerRunMode+0x7c>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	08db      	lsrs	r3, r3, #3
 80045c8:	3301      	adds	r3, #1
 80045ca:	607b      	str	r3, [r7, #4]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80045cc:	e002      	b.n	80045d4 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    wait_loop_index--;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80045d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004608 <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e0:	d102      	bne.n	80045e8 <HAL_PWREx_DisableLowPowerRunMode+0x50>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f2      	bne.n	80045ce <HAL_PWREx_DisableLowPowerRunMode+0x36>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80045e8:	4b07      	ldr	r3, [pc, #28]	@ (8004608 <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045f4:	d101      	bne.n	80045fa <HAL_PWREx_DisableLowPowerRunMode+0x62>
  {
    return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e000      	b.n	80045fc <HAL_PWREx_DisableLowPowerRunMode+0x64>
  }

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	40007000 	.word	0x40007000
 800460c:	20000004 	.word	0x20000004
 8004610:	0a7c5ac5 	.word	0x0a7c5ac5
 8004614:	cccccccd 	.word	0xcccccccd

08004618 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800461c:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4a04      	ldr	r2, [pc, #16]	@ (8004634 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004626:	6093      	str	r3, [r2, #8]
}
 8004628:	bf00      	nop
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40007000 	.word	0x40007000

08004638 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800463e:	4b0f      	ldr	r3, [pc, #60]	@ (800467c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800464e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004652:	607b      	str	r3, [r7, #4]
 8004654:	e00a      	b.n	800466c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d103      	bne.n	8004668 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8004660:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004664:	607b      	str	r3, [r7, #4]
 8004666:	e001      	b.n	800466c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004668:	2300      	movs	r3, #0
 800466a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800466c:	687b      	ldr	r3, [r7, #4]
}
 800466e:	4618      	mov	r0, r3
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40007000 	.word	0x40007000

08004680 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d102      	bne.n	8004694 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f000 bcc2 	b.w	8005018 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004694:	4b99      	ldr	r3, [pc, #612]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 030c 	and.w	r3, r3, #12
 800469c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800469e:	4b97      	ldr	r3, [pc, #604]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80e9 	beq.w	8004888 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d006      	beq.n	80046ca <HAL_RCC_OscConfig+0x4a>
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2b0c      	cmp	r3, #12
 80046c0:	f040 8083 	bne.w	80047ca <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d17f      	bne.n	80047ca <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046ca:	4b8c      	ldr	r3, [pc, #560]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d006      	beq.n	80046e4 <HAL_RCC_OscConfig+0x64>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f000 bc9a 	b.w	8005018 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046e8:	4b84      	ldr	r3, [pc, #528]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d004      	beq.n	80046fe <HAL_RCC_OscConfig+0x7e>
 80046f4:	4b81      	ldr	r3, [pc, #516]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046fc:	e005      	b.n	800470a <HAL_RCC_OscConfig+0x8a>
 80046fe:	4b7f      	ldr	r3, [pc, #508]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800470a:	4293      	cmp	r3, r2
 800470c:	d224      	bcs.n	8004758 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fe9a 	bl	800544c <RCC_SetFlashLatencyFromMSIRange>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f000 bc7a 	b.w	8005018 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004724:	4b75      	ldr	r3, [pc, #468]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a74      	ldr	r2, [pc, #464]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 800472a:	f043 0308 	orr.w	r3, r3, #8
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	4b72      	ldr	r3, [pc, #456]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	496f      	ldr	r1, [pc, #444]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 800473e:	4313      	orrs	r3, r2
 8004740:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004742:	4b6e      	ldr	r3, [pc, #440]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	021b      	lsls	r3, r3, #8
 8004750:	496a      	ldr	r1, [pc, #424]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004752:	4313      	orrs	r3, r2
 8004754:	604b      	str	r3, [r1, #4]
 8004756:	e026      	b.n	80047a6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004758:	4b68      	ldr	r3, [pc, #416]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a67      	ldr	r2, [pc, #412]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 800475e:	f043 0308 	orr.w	r3, r3, #8
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	4b65      	ldr	r3, [pc, #404]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	4962      	ldr	r1, [pc, #392]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004776:	4b61      	ldr	r3, [pc, #388]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	495d      	ldr	r1, [pc, #372]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004786:	4313      	orrs	r3, r2
 8004788:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fe59 	bl	800544c <RCC_SetFlashLatencyFromMSIRange>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	f000 bc39 	b.w	8005018 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80047a6:	f000 fe15 	bl	80053d4 <HAL_RCC_GetHCLKFreq>
 80047aa:	4603      	mov	r3, r0
 80047ac:	4a54      	ldr	r2, [pc, #336]	@ (8004900 <HAL_RCC_OscConfig+0x280>)
 80047ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047b0:	4b54      	ldr	r3, [pc, #336]	@ (8004904 <HAL_RCC_OscConfig+0x284>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fd fe8d 	bl	80024d4 <HAL_InitTick>
 80047ba:	4603      	mov	r3, r0
 80047bc:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80047be:	7bfb      	ldrb	r3, [r7, #15]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d060      	beq.n	8004886 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	f000 bc27 	b.w	8005018 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d039      	beq.n	8004846 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047d2:	4b4a      	ldr	r3, [pc, #296]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a49      	ldr	r2, [pc, #292]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047de:	f7fd fec9 	bl	8002574 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047e4:	e00f      	b.n	8004806 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047e6:	f7fd fec5 	bl	8002574 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d908      	bls.n	8004806 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047f4:	4b41      	ldr	r3, [pc, #260]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d102      	bne.n	8004806 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	f000 bc09 	b.w	8005018 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004806:	4b3d      	ldr	r3, [pc, #244]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0e9      	beq.n	80047e6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004812:	4b3a      	ldr	r3, [pc, #232]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a39      	ldr	r2, [pc, #228]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004818:	f043 0308 	orr.w	r3, r3, #8
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	4b37      	ldr	r3, [pc, #220]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482a:	4934      	ldr	r1, [pc, #208]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004830:	4b32      	ldr	r3, [pc, #200]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	492f      	ldr	r1, [pc, #188]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
 8004844:	e020      	b.n	8004888 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004846:	4b2d      	ldr	r3, [pc, #180]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a2c      	ldr	r2, [pc, #176]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004852:	f7fd fe8f 	bl	8002574 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004858:	e00e      	b.n	8004878 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800485a:	f7fd fe8b 	bl	8002574 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d907      	bls.n	8004878 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004868:	4b24      	ldr	r3, [pc, #144]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e3cf      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004878:	4b20      	ldr	r3, [pc, #128]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1ea      	bne.n	800485a <HAL_RCC_OscConfig+0x1da>
 8004884:	e000      	b.n	8004888 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004886:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d07e      	beq.n	8004992 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b08      	cmp	r3, #8
 8004898:	d005      	beq.n	80048a6 <HAL_RCC_OscConfig+0x226>
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b0c      	cmp	r3, #12
 800489e:	d10e      	bne.n	80048be <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d10b      	bne.n	80048be <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a6:	4b15      	ldr	r3, [pc, #84]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d06e      	beq.n	8004990 <HAL_RCC_OscConfig+0x310>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d16a      	bne.n	8004990 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e3ac      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048c6:	d106      	bne.n	80048d6 <HAL_RCC_OscConfig+0x256>
 80048c8:	4b0c      	ldr	r3, [pc, #48]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a0b      	ldr	r2, [pc, #44]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 80048ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	e024      	b.n	8004920 <HAL_RCC_OscConfig+0x2a0>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048de:	d113      	bne.n	8004908 <HAL_RCC_OscConfig+0x288>
 80048e0:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a05      	ldr	r2, [pc, #20]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 80048e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	4b03      	ldr	r3, [pc, #12]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a02      	ldr	r2, [pc, #8]	@ (80048fc <HAL_RCC_OscConfig+0x27c>)
 80048f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	e012      	b.n	8004920 <HAL_RCC_OscConfig+0x2a0>
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000
 8004900:	20000004 	.word	0x20000004
 8004904:	20000008 	.word	0x20000008
 8004908:	4b8b      	ldr	r3, [pc, #556]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a8a      	ldr	r2, [pc, #552]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 800490e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b88      	ldr	r3, [pc, #544]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a87      	ldr	r2, [pc, #540]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 800491a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800491e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d019      	beq.n	800495c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fd fe24 	bl	8002574 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800492e:	e00e      	b.n	800494e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004930:	f7fd fe20 	bl	8002574 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	@ 0x64
 800493c:	d907      	bls.n	800494e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800493e:	4b7e      	ldr	r3, [pc, #504]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e364      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800494e:	4b7a      	ldr	r3, [pc, #488]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0ea      	beq.n	8004930 <HAL_RCC_OscConfig+0x2b0>
 800495a:	e01a      	b.n	8004992 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fd fe0a 	bl	8002574 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004962:	e00e      	b.n	8004982 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004964:	f7fd fe06 	bl	8002574 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	@ 0x64
 8004970:	d907      	bls.n	8004982 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004972:	4b71      	ldr	r3, [pc, #452]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e34a      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004982:	4b6d      	ldr	r3, [pc, #436]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1ea      	bne.n	8004964 <HAL_RCC_OscConfig+0x2e4>
 800498e:	e000      	b.n	8004992 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d06c      	beq.n	8004a78 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_OscConfig+0x330>
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b0c      	cmp	r3, #12
 80049a8:	d119      	bne.n	80049de <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d116      	bne.n	80049de <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049b0:	4b61      	ldr	r3, [pc, #388]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_OscConfig+0x348>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e327      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c8:	4b5b      	ldr	r3, [pc, #364]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	061b      	lsls	r3, r3, #24
 80049d6:	4958      	ldr	r1, [pc, #352]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049dc:	e04c      	b.n	8004a78 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d029      	beq.n	8004a3a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e6:	4b54      	ldr	r3, [pc, #336]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a53      	ldr	r2, [pc, #332]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 80049ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f2:	f7fd fdbf 	bl	8002574 <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049f8:	e00e      	b.n	8004a18 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049fa:	f7fd fdbb 	bl	8002574 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d907      	bls.n	8004a18 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a08:	4b4b      	ldr	r3, [pc, #300]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e2ff      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a18:	4b47      	ldr	r3, [pc, #284]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0ea      	beq.n	80049fa <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a24:	4b44      	ldr	r3, [pc, #272]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	061b      	lsls	r3, r3, #24
 8004a32:	4941      	ldr	r1, [pc, #260]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	604b      	str	r3, [r1, #4]
 8004a38:	e01e      	b.n	8004a78 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a3e      	ldr	r2, [pc, #248]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004a40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a46:	f7fd fd95 	bl	8002574 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a4c:	e00e      	b.n	8004a6c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a4e:	f7fd fd91 	bl	8002574 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d907      	bls.n	8004a6c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a5c:	4b36      	ldr	r3, [pc, #216]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e2d5      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a6c:	4b32      	ldr	r3, [pc, #200]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1ea      	bne.n	8004a4e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d062      	beq.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d038      	beq.n	8004afe <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d108      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004a94:	4b28      	ldr	r3, [pc, #160]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a9a:	4a27      	ldr	r2, [pc, #156]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004a9c:	f023 0310 	bic.w	r3, r3, #16
 8004aa0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004aa4:	e007      	b.n	8004ab6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004aa6:	4b24      	ldr	r3, [pc, #144]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aac:	4a22      	ldr	r2, [pc, #136]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004aae:	f043 0310 	orr.w	r3, r3, #16
 8004ab2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ab6:	4b20      	ldr	r3, [pc, #128]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004abc:	4a1e      	ldr	r2, [pc, #120]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac6:	f7fd fd55 	bl	8002574 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004acc:	e00f      	b.n	8004aee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ace:	f7fd fd51 	bl	8002574 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b07      	cmp	r3, #7
 8004ada:	d908      	bls.n	8004aee <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004adc:	4b16      	ldr	r3, [pc, #88]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e294      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004aee:	4b12      	ldr	r3, [pc, #72]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0e8      	beq.n	8004ace <HAL_RCC_OscConfig+0x44e>
 8004afc:	e025      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004afe:	4b0e      	ldr	r3, [pc, #56]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b04:	4a0c      	ldr	r2, [pc, #48]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0e:	f7fd fd31 	bl	8002574 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b14:	e012      	b.n	8004b3c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b16:	f7fd fd2d 	bl	8002574 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b07      	cmp	r3, #7
 8004b22:	d90b      	bls.n	8004b3c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b24:	4b04      	ldr	r3, [pc, #16]	@ (8004b38 <HAL_RCC_OscConfig+0x4b8>)
 8004b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d004      	beq.n	8004b3c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e270      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
 8004b36:	bf00      	nop
 8004b38:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b3c:	4ba8      	ldr	r3, [pc, #672]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e5      	bne.n	8004b16 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 812d 	beq.w	8004db2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b5c:	4ba0      	ldr	r3, [pc, #640]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10d      	bne.n	8004b84 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b68:	4b9d      	ldr	r3, [pc, #628]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6c:	4a9c      	ldr	r2, [pc, #624]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b74:	4b9a      	ldr	r3, [pc, #616]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b80:	2301      	movs	r3, #1
 8004b82:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b84:	4b97      	ldr	r3, [pc, #604]	@ (8004de4 <HAL_RCC_OscConfig+0x764>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d11e      	bne.n	8004bce <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b90:	4b94      	ldr	r3, [pc, #592]	@ (8004de4 <HAL_RCC_OscConfig+0x764>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a93      	ldr	r2, [pc, #588]	@ (8004de4 <HAL_RCC_OscConfig+0x764>)
 8004b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b9c:	f7fd fcea 	bl	8002574 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ba2:	e00e      	b.n	8004bc2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba4:	f7fd fce6 	bl	8002574 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d907      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bb2:	4b8c      	ldr	r3, [pc, #560]	@ (8004de4 <HAL_RCC_OscConfig+0x764>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e22a      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bc2:	4b88      	ldr	r3, [pc, #544]	@ (8004de4 <HAL_RCC_OscConfig+0x764>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0ea      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d01f      	beq.n	8004c1a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d010      	beq.n	8004c08 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004be6:	4b7e      	ldr	r3, [pc, #504]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bec:	4a7c      	ldr	r2, [pc, #496]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004bee:	f043 0304 	orr.w	r3, r3, #4
 8004bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004bf6:	4b7a      	ldr	r3, [pc, #488]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfc:	4a78      	ldr	r2, [pc, #480]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c06:	e018      	b.n	8004c3a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c08:	4b75      	ldr	r3, [pc, #468]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0e:	4a74      	ldr	r2, [pc, #464]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c18:	e00f      	b.n	8004c3a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c1a:	4b71      	ldr	r3, [pc, #452]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c20:	4a6f      	ldr	r2, [pc, #444]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c30:	4a6b      	ldr	r2, [pc, #428]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004c32:	f023 0304 	bic.w	r3, r3, #4
 8004c36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d068      	beq.n	8004d14 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c42:	f7fd fc97 	bl	8002574 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c48:	e011      	b.n	8004c6e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4a:	f7fd fc93 	bl	8002574 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d908      	bls.n	8004c6e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c5c:	4b60      	ldr	r3, [pc, #384]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e1d4      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0e6      	beq.n	8004c4a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d022      	beq.n	8004cce <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004c88:	4b55      	ldr	r3, [pc, #340]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8e:	4a54      	ldr	r2, [pc, #336]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004c98:	e011      	b.n	8004cbe <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9a:	f7fd fc6b 	bl	8002574 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d908      	bls.n	8004cbe <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004cac:	4b4c      	ldr	r3, [pc, #304]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e1ac      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004cbe:	4b48      	ldr	r3, [pc, #288]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0e6      	beq.n	8004c9a <HAL_RCC_OscConfig+0x61a>
 8004ccc:	e068      	b.n	8004da0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004cce:	4b44      	ldr	r3, [pc, #272]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd4:	4a42      	ldr	r2, [pc, #264]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004cd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004cde:	e011      	b.n	8004d04 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce0:	f7fd fc48 	bl	8002574 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d908      	bls.n	8004d04 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e189      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004d04:	4b36      	ldr	r3, [pc, #216]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1e6      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x660>
 8004d12:	e045      	b.n	8004da0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fd fc2e 	bl	8002574 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d1a:	e011      	b.n	8004d40 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d1c:	f7fd fc2a 	bl	8002574 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d908      	bls.n	8004d40 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e16b      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d40:	4b27      	ldr	r3, [pc, #156]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e6      	bne.n	8004d1c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004d4e:	4b24      	ldr	r3, [pc, #144]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d021      	beq.n	8004da0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004d5c:	4b20      	ldr	r3, [pc, #128]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d62:	4a1f      	ldr	r2, [pc, #124]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004d64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004d6c:	e011      	b.n	8004d92 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6e:	f7fd fc01 	bl	8002574 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d908      	bls.n	8004d92 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004d80:	4b17      	ldr	r3, [pc, #92]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e142      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004d92:	4b13      	ldr	r3, [pc, #76]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e6      	bne.n	8004d6e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004da0:	7ffb      	ldrb	r3, [r7, #31]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d105      	bne.n	8004db2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da6:	4b0e      	ldr	r3, [pc, #56]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004daa:	4a0d      	ldr	r2, [pc, #52]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004dac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004db0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d04f      	beq.n	8004e5e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d028      	beq.n	8004e18 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dc6:	4b06      	ldr	r3, [pc, #24]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dcc:	4a04      	ldr	r2, [pc, #16]	@ (8004de0 <HAL_RCC_OscConfig+0x760>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd6:	f7fd fbcd 	bl	8002574 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ddc:	e014      	b.n	8004e08 <HAL_RCC_OscConfig+0x788>
 8004dde:	bf00      	nop
 8004de0:	40021000 	.word	0x40021000
 8004de4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004de8:	f7fd fbc4 	bl	8002574 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d908      	bls.n	8004e08 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004df6:	4b8a      	ldr	r3, [pc, #552]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004df8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e107      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e08:	4b85      	ldr	r3, [pc, #532]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0e8      	beq.n	8004de8 <HAL_RCC_OscConfig+0x768>
 8004e16:	e022      	b.n	8004e5e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e18:	4b81      	ldr	r3, [pc, #516]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e1e:	4a80      	ldr	r2, [pc, #512]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e28:	f7fd fba4 	bl	8002574 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e2e:	e00f      	b.n	8004e50 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e30:	f7fd fba0 	bl	8002574 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d908      	bls.n	8004e50 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e3e:	4b78      	ldr	r3, [pc, #480]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e0e3      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e50:	4b73      	ldr	r3, [pc, #460]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e8      	bne.n	8004e30 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 80d7 	beq.w	8005016 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e68:	4b6d      	ldr	r3, [pc, #436]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 030c 	and.w	r3, r3, #12
 8004e70:	2b0c      	cmp	r3, #12
 8004e72:	f000 8091 	beq.w	8004f98 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d166      	bne.n	8004f4c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7e:	4b68      	ldr	r3, [pc, #416]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a67      	ldr	r2, [pc, #412]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004e84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8a:	f7fd fb73 	bl	8002574 <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e90:	e00e      	b.n	8004eb0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e92:	f7fd fb6f 	bl	8002574 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d907      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea0:	4b5f      	ldr	r3, [pc, #380]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e0b3      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb0:	4b5b      	ldr	r3, [pc, #364]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1ea      	bne.n	8004e92 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ebc:	4b58      	ldr	r3, [pc, #352]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	4b58      	ldr	r3, [pc, #352]	@ (8005024 <HAL_RCC_OscConfig+0x9a4>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ecc:	3a01      	subs	r2, #1
 8004ece:	0112      	lsls	r2, r2, #4
 8004ed0:	4311      	orrs	r1, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ed6:	0212      	lsls	r2, r2, #8
 8004ed8:	4311      	orrs	r1, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004ede:	0852      	lsrs	r2, r2, #1
 8004ee0:	3a01      	subs	r2, #1
 8004ee2:	0552      	lsls	r2, r2, #21
 8004ee4:	4311      	orrs	r1, r2
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004eea:	0852      	lsrs	r2, r2, #1
 8004eec:	3a01      	subs	r2, #1
 8004eee:	0652      	lsls	r2, r2, #25
 8004ef0:	4311      	orrs	r1, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ef6:	06d2      	lsls	r2, r2, #27
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	4949      	ldr	r1, [pc, #292]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f00:	4b47      	ldr	r3, [pc, #284]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a46      	ldr	r2, [pc, #280]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f0c:	4b44      	ldr	r3, [pc, #272]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a43      	ldr	r2, [pc, #268]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004f12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fd fb2c 	bl	8002574 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f1e:	e00e      	b.n	8004f3e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f20:	f7fd fb28 	bl	8002574 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d907      	bls.n	8004f3e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e06c      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f3e:	4b38      	ldr	r3, [pc, #224]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0ea      	beq.n	8004f20 <HAL_RCC_OscConfig+0x8a0>
 8004f4a:	e064      	b.n	8005016 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4c:	4b34      	ldr	r3, [pc, #208]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a33      	ldr	r2, [pc, #204]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004f52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fd fb0c 	bl	8002574 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f5e:	e00e      	b.n	8004f7e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f60:	f7fd fb08 	bl	8002574 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d907      	bls.n	8004f7e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e04c      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f7e:	4b28      	ldr	r3, [pc, #160]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1ea      	bne.n	8004f60 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f8a:	4b25      	ldr	r3, [pc, #148]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	4924      	ldr	r1, [pc, #144]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004f90:	4b25      	ldr	r3, [pc, #148]	@ (8005028 <HAL_RCC_OscConfig+0x9a8>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	60cb      	str	r3, [r1, #12]
 8004f96:	e03e      	b.n	8005016 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e039      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8005020 <HAL_RCC_OscConfig+0x9a0>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f003 0203 	and.w	r2, r3, #3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d12c      	bne.n	8005012 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d123      	bne.n	8005012 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d11b      	bne.n	8005012 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d113      	bne.n	8005012 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d109      	bne.n	8005012 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005008:	085b      	lsrs	r3, r3, #1
 800500a:	3b01      	subs	r3, #1
 800500c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d001      	beq.n	8005016 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3720      	adds	r7, #32
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40021000 	.word	0x40021000
 8005024:	019f800c 	.word	0x019f800c
 8005028:	feeefffc 	.word	0xfeeefffc

0800502c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e11c      	b.n	800527e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005044:	4b90      	ldr	r3, [pc, #576]	@ (8005288 <HAL_RCC_ClockConfig+0x25c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d910      	bls.n	8005074 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005052:	4b8d      	ldr	r3, [pc, #564]	@ (8005288 <HAL_RCC_ClockConfig+0x25c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 020f 	bic.w	r2, r3, #15
 800505a:	498b      	ldr	r1, [pc, #556]	@ (8005288 <HAL_RCC_ClockConfig+0x25c>)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	4313      	orrs	r3, r2
 8005060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005062:	4b89      	ldr	r3, [pc, #548]	@ (8005288 <HAL_RCC_ClockConfig+0x25c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d001      	beq.n	8005074 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e104      	b.n	800527e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d010      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	4b81      	ldr	r3, [pc, #516]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800508c:	429a      	cmp	r2, r3
 800508e:	d908      	bls.n	80050a2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005090:	4b7e      	ldr	r3, [pc, #504]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	497b      	ldr	r1, [pc, #492]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 8085 	beq.w	80051ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d11f      	bne.n	80050f8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050b8:	4b74      	ldr	r3, [pc, #464]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0da      	b.n	800527e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80050c8:	f000 fa24 	bl	8005514 <RCC_GetSysClockFreqFromPLLSource>
 80050cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	4a6f      	ldr	r2, [pc, #444]	@ (8005290 <HAL_RCC_ClockConfig+0x264>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d947      	bls.n	8005166 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80050d6:	4b6d      	ldr	r3, [pc, #436]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d141      	bne.n	8005166 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050e2:	4b6a      	ldr	r3, [pc, #424]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050ea:	4a68      	ldr	r2, [pc, #416]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 80050ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050f2:	2380      	movs	r3, #128	@ 0x80
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	e036      	b.n	8005166 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d107      	bne.n	8005110 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005100:	4b62      	ldr	r3, [pc, #392]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d115      	bne.n	8005138 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0b6      	b.n	800527e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d107      	bne.n	8005128 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005118:	4b5c      	ldr	r3, [pc, #368]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d109      	bne.n	8005138 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0aa      	b.n	800527e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005128:	4b58      	ldr	r3, [pc, #352]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0a2      	b.n	800527e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005138:	f000 f8b0 	bl	800529c <HAL_RCC_GetSysClockFreq>
 800513c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4a53      	ldr	r2, [pc, #332]	@ (8005290 <HAL_RCC_ClockConfig+0x264>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d90f      	bls.n	8005166 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005146:	4b51      	ldr	r3, [pc, #324]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d109      	bne.n	8005166 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005152:	4b4e      	ldr	r3, [pc, #312]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800515a:	4a4c      	ldr	r2, [pc, #304]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 800515c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005160:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005162:	2380      	movs	r3, #128	@ 0x80
 8005164:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005166:	4b49      	ldr	r3, [pc, #292]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f023 0203 	bic.w	r2, r3, #3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	4946      	ldr	r1, [pc, #280]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 8005174:	4313      	orrs	r3, r2
 8005176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005178:	f7fd f9fc 	bl	8002574 <HAL_GetTick>
 800517c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517e:	e013      	b.n	80051a8 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005180:	f7fd f9f8 	bl	8002574 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518e:	4293      	cmp	r3, r2
 8005190:	d90a      	bls.n	80051a8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	4b3e      	ldr	r3, [pc, #248]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 020c 	and.w	r2, r3, #12
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d001      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e06a      	b.n	800527e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a8:	4b38      	ldr	r3, [pc, #224]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 020c 	and.w	r2, r3, #12
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d1e2      	bne.n	8005180 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b80      	cmp	r3, #128	@ 0x80
 80051be:	d105      	bne.n	80051cc <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051c0:	4b32      	ldr	r3, [pc, #200]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	4a31      	ldr	r2, [pc, #196]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 80051c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051ca:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d010      	beq.n	80051fa <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	4b2b      	ldr	r3, [pc, #172]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d208      	bcs.n	80051fa <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e8:	4b28      	ldr	r3, [pc, #160]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4925      	ldr	r1, [pc, #148]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051fa:	4b23      	ldr	r3, [pc, #140]	@ (8005288 <HAL_RCC_ClockConfig+0x25c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d210      	bcs.n	800522a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005208:	4b1f      	ldr	r3, [pc, #124]	@ (8005288 <HAL_RCC_ClockConfig+0x25c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f023 020f 	bic.w	r2, r3, #15
 8005210:	491d      	ldr	r1, [pc, #116]	@ (8005288 <HAL_RCC_ClockConfig+0x25c>)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	4313      	orrs	r3, r2
 8005216:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005218:	4b1b      	ldr	r3, [pc, #108]	@ (8005288 <HAL_RCC_ClockConfig+0x25c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d001      	beq.n	800522a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e029      	b.n	800527e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d008      	beq.n	8005248 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005236:	4b15      	ldr	r3, [pc, #84]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	4912      	ldr	r1, [pc, #72]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 8005244:	4313      	orrs	r3, r2
 8005246:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005254:	4b0d      	ldr	r3, [pc, #52]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	490a      	ldr	r1, [pc, #40]	@ (800528c <HAL_RCC_ClockConfig+0x260>)
 8005264:	4313      	orrs	r3, r2
 8005266:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005268:	f000 f8b4 	bl	80053d4 <HAL_RCC_GetHCLKFreq>
 800526c:	4603      	mov	r3, r0
 800526e:	4a09      	ldr	r2, [pc, #36]	@ (8005294 <HAL_RCC_ClockConfig+0x268>)
 8005270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005272:	4b09      	ldr	r3, [pc, #36]	@ (8005298 <HAL_RCC_ClockConfig+0x26c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f7fd f92c 	bl	80024d4 <HAL_InitTick>
 800527c:	4603      	mov	r3, r0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40022000 	.word	0x40022000
 800528c:	40021000 	.word	0x40021000
 8005290:	04c4b400 	.word	0x04c4b400
 8005294:	20000004 	.word	0x20000004
 8005298:	20000008 	.word	0x20000008

0800529c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800529c:	b480      	push	{r7}
 800529e:	b089      	sub	sp, #36	@ 0x24
 80052a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
 80052a6:	2300      	movs	r3, #0
 80052a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052aa:	4b47      	ldr	r3, [pc, #284]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052b4:	4b44      	ldr	r3, [pc, #272]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <HAL_RCC_GetSysClockFreq+0x34>
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	2b0c      	cmp	r3, #12
 80052c8:	d121      	bne.n	800530e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d11e      	bne.n	800530e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052d0:	4b3d      	ldr	r3, [pc, #244]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d107      	bne.n	80052ec <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052dc:	4b3a      	ldr	r3, [pc, #232]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80052de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	e005      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052ec:	4b36      	ldr	r3, [pc, #216]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80052f8:	4a34      	ldr	r2, [pc, #208]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x130>)
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005300:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10d      	bne.n	8005324 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800530c:	e00a      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d102      	bne.n	800531a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005314:	4b2e      	ldr	r3, [pc, #184]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005316:	61bb      	str	r3, [r7, #24]
 8005318:	e004      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d101      	bne.n	8005324 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005320:	4b2b      	ldr	r3, [pc, #172]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005322:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2b0c      	cmp	r3, #12
 8005328:	d146      	bne.n	80053b8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800532a:	4b27      	ldr	r3, [pc, #156]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005334:	4b24      	ldr	r3, [pc, #144]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	3301      	adds	r3, #1
 8005340:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d003      	beq.n	8005350 <HAL_RCC_GetSysClockFreq+0xb4>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b03      	cmp	r3, #3
 800534c:	d00d      	beq.n	800536a <HAL_RCC_GetSysClockFreq+0xce>
 800534e:	e019      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005350:	4a1f      	ldr	r2, [pc, #124]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	fbb2 f3f3 	udiv	r3, r2, r3
 8005358:	4a1b      	ldr	r2, [pc, #108]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800535a:	68d2      	ldr	r2, [r2, #12]
 800535c:	0a12      	lsrs	r2, r2, #8
 800535e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005362:	fb02 f303 	mul.w	r3, r2, r3
 8005366:	617b      	str	r3, [r7, #20]
        break;
 8005368:	e019      	b.n	800539e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800536a:	4a19      	ldr	r2, [pc, #100]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x134>)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005372:	4a15      	ldr	r2, [pc, #84]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005374:	68d2      	ldr	r2, [r2, #12]
 8005376:	0a12      	lsrs	r2, r2, #8
 8005378:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800537c:	fb02 f303 	mul.w	r3, r2, r3
 8005380:	617b      	str	r3, [r7, #20]
        break;
 8005382:	e00c      	b.n	800539e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	4a0e      	ldr	r2, [pc, #56]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800538e:	68d2      	ldr	r2, [r2, #12]
 8005390:	0a12      	lsrs	r2, r2, #8
 8005392:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	617b      	str	r3, [r7, #20]
        break;
 800539c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800539e:	4b0a      	ldr	r3, [pc, #40]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	0e5b      	lsrs	r3, r3, #25
 80053a4:	f003 0303 	and.w	r3, r3, #3
 80053a8:	3301      	adds	r3, #1
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80053b8:	69bb      	ldr	r3, [r7, #24]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3724      	adds	r7, #36	@ 0x24
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40021000 	.word	0x40021000
 80053cc:	0800da04 	.word	0x0800da04
 80053d0:	00f42400 	.word	0x00f42400

080053d4 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80053d8:	f7ff ff60 	bl	800529c <HAL_RCC_GetSysClockFreq>
 80053dc:	4602      	mov	r2, r0
 80053de:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <HAL_RCC_GetHCLKFreq+0x20>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	091b      	lsrs	r3, r3, #4
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	4903      	ldr	r1, [pc, #12]	@ (80053f8 <HAL_RCC_GetHCLKFreq+0x24>)
 80053ea:	5ccb      	ldrb	r3, [r1, r3]
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40021000 	.word	0x40021000
 80053f8:	0800d9ec 	.word	0x0800d9ec

080053fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005400:	f7ff ffe8 	bl	80053d4 <HAL_RCC_GetHCLKFreq>
 8005404:	4602      	mov	r2, r0
 8005406:	4b05      	ldr	r3, [pc, #20]	@ (800541c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	0a1b      	lsrs	r3, r3, #8
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	4903      	ldr	r1, [pc, #12]	@ (8005420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005412:	5ccb      	ldrb	r3, [r1, r3]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40021000 	.word	0x40021000
 8005420:	0800d9fc 	.word	0x0800d9fc

08005424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005428:	f7ff ffd4 	bl	80053d4 <HAL_RCC_GetHCLKFreq>
 800542c:	4602      	mov	r2, r0
 800542e:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	0adb      	lsrs	r3, r3, #11
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	4903      	ldr	r1, [pc, #12]	@ (8005448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800543a:	5ccb      	ldrb	r3, [r1, r3]
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40021000 	.word	0x40021000
 8005448:	0800d9fc 	.word	0x0800d9fc

0800544c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005458:	4b2c      	ldr	r3, [pc, #176]	@ (800550c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800545a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005464:	f7ff f81e 	bl	80044a4 <HAL_PWREx_GetVoltageRange>
 8005468:	6138      	str	r0, [r7, #16]
 800546a:	e014      	b.n	8005496 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800546c:	4b27      	ldr	r3, [pc, #156]	@ (800550c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800546e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005470:	4a26      	ldr	r2, [pc, #152]	@ (800550c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005476:	6593      	str	r3, [r2, #88]	@ 0x58
 8005478:	4b24      	ldr	r3, [pc, #144]	@ (800550c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800547a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005484:	f7ff f80e 	bl	80044a4 <HAL_PWREx_GetVoltageRange>
 8005488:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800548a:	4b20      	ldr	r3, [pc, #128]	@ (800550c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800548c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548e:	4a1f      	ldr	r2, [pc, #124]	@ (800550c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005494:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054a2:	d10b      	bne.n	80054bc <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b80      	cmp	r3, #128	@ 0x80
 80054a8:	d919      	bls.n	80054de <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2ba0      	cmp	r3, #160	@ 0xa0
 80054ae:	d902      	bls.n	80054b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054b0:	2302      	movs	r3, #2
 80054b2:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80054b4:	e013      	b.n	80054de <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054b6:	2301      	movs	r3, #1
 80054b8:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80054ba:	e010      	b.n	80054de <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b80      	cmp	r3, #128	@ 0x80
 80054c0:	d902      	bls.n	80054c8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80054c2:	2303      	movs	r3, #3
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e00a      	b.n	80054de <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b80      	cmp	r3, #128	@ 0x80
 80054cc:	d102      	bne.n	80054d4 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054ce:	2302      	movs	r3, #2
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	e004      	b.n	80054de <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b70      	cmp	r3, #112	@ 0x70
 80054d8:	d101      	bne.n	80054de <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054da:	2301      	movs	r3, #1
 80054dc:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054de:	4b0c      	ldr	r3, [pc, #48]	@ (8005510 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f023 020f 	bic.w	r2, r3, #15
 80054e6:	490a      	ldr	r1, [pc, #40]	@ (8005510 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80054ee:	4b08      	ldr	r3, [pc, #32]	@ (8005510 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d001      	beq.n	8005500 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40021000 	.word	0x40021000
 8005510:	40022000 	.word	0x40022000

08005514 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800551a:	4b31      	ldr	r3, [pc, #196]	@ (80055e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005524:	4b2e      	ldr	r3, [pc, #184]	@ (80055e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	3301      	adds	r3, #1
 8005530:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d015      	beq.n	8005564 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b03      	cmp	r3, #3
 800553c:	d839      	bhi.n	80055b2 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d01c      	beq.n	800557e <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d133      	bne.n	80055b2 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800554a:	4a26      	ldr	r2, [pc, #152]	@ (80055e4 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005552:	4a23      	ldr	r2, [pc, #140]	@ (80055e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005554:	68d2      	ldr	r2, [r2, #12]
 8005556:	0a12      	lsrs	r2, r2, #8
 8005558:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800555c:	fb02 f303 	mul.w	r3, r2, r3
 8005560:	613b      	str	r3, [r7, #16]
      break;
 8005562:	e029      	b.n	80055b8 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005564:	4a1f      	ldr	r2, [pc, #124]	@ (80055e4 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	fbb2 f3f3 	udiv	r3, r2, r3
 800556c:	4a1c      	ldr	r2, [pc, #112]	@ (80055e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800556e:	68d2      	ldr	r2, [r2, #12]
 8005570:	0a12      	lsrs	r2, r2, #8
 8005572:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	613b      	str	r3, [r7, #16]
      break;
 800557c:	e01c      	b.n	80055b8 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800557e:	4b18      	ldr	r3, [pc, #96]	@ (80055e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d107      	bne.n	800559a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800558a:	4b15      	ldr	r3, [pc, #84]	@ (80055e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800558c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005590:	0a1b      	lsrs	r3, r3, #8
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	e005      	b.n	80055a6 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800559a:	4b11      	ldr	r3, [pc, #68]	@ (80055e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	091b      	lsrs	r3, r3, #4
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80055a6:	4a10      	ldr	r2, [pc, #64]	@ (80055e8 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ae:	613b      	str	r3, [r7, #16]
        break;
 80055b0:	e002      	b.n	80055b8 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80055b2:	2300      	movs	r3, #0
 80055b4:	613b      	str	r3, [r7, #16]
      break;
 80055b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80055b8:	4b09      	ldr	r3, [pc, #36]	@ (80055e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	0e5b      	lsrs	r3, r3, #25
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	3301      	adds	r3, #1
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80055d2:	683b      	ldr	r3, [r7, #0]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	40021000 	.word	0x40021000
 80055e4:	00f42400 	.word	0x00f42400
 80055e8:	0800da04 	.word	0x0800da04

080055ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055f4:	2300      	movs	r3, #0
 80055f6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055f8:	2300      	movs	r3, #0
 80055fa:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005604:	2b00      	cmp	r3, #0
 8005606:	d040      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800560c:	2b80      	cmp	r3, #128	@ 0x80
 800560e:	d02a      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005610:	2b80      	cmp	r3, #128	@ 0x80
 8005612:	d825      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005614:	2b60      	cmp	r3, #96	@ 0x60
 8005616:	d026      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005618:	2b60      	cmp	r3, #96	@ 0x60
 800561a:	d821      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800561c:	2b40      	cmp	r3, #64	@ 0x40
 800561e:	d006      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005620:	2b40      	cmp	r3, #64	@ 0x40
 8005622:	d81d      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005624:	2b00      	cmp	r3, #0
 8005626:	d009      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005628:	2b20      	cmp	r3, #32
 800562a:	d010      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800562c:	e018      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800562e:	4b8f      	ldr	r3, [pc, #572]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	4a8e      	ldr	r2, [pc, #568]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005638:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800563a:	e015      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3304      	adds	r3, #4
 8005640:	2100      	movs	r1, #0
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fb56 	bl	8005cf4 <RCCEx_PLLSAI1_Config>
 8005648:	4603      	mov	r3, r0
 800564a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800564c:	e00c      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3320      	adds	r3, #32
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fc33 	bl	8005ec0 <RCCEx_PLLSAI2_Config>
 800565a:	4603      	mov	r3, r0
 800565c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800565e:	e003      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	77fb      	strb	r3, [r7, #31]
        break;
 8005664:	e000      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8005666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005668:	7ffb      	ldrb	r3, [r7, #31]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10b      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800566e:	4b7f      	ldr	r3, [pc, #508]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005670:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005674:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800567c:	497b      	ldr	r1, [pc, #492]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005684:	e001      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005686:	7ffb      	ldrb	r3, [r7, #31]
 8005688:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d047      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800569e:	d030      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80056a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056a4:	d82a      	bhi.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056aa:	d02a      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80056ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056b0:	d824      	bhi.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056b6:	d008      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 80056b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056bc:	d81e      	bhi.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80056c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056c6:	d010      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80056c8:	e018      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056ca:	4b68      	ldr	r3, [pc, #416]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	4a67      	ldr	r2, [pc, #412]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056d4:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80056d6:	e015      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3304      	adds	r3, #4
 80056dc:	2100      	movs	r1, #0
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fb08 	bl	8005cf4 <RCCEx_PLLSAI1_Config>
 80056e4:	4603      	mov	r3, r0
 80056e6:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80056e8:	e00c      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3320      	adds	r3, #32
 80056ee:	2100      	movs	r1, #0
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fbe5 	bl	8005ec0 <RCCEx_PLLSAI2_Config>
 80056f6:	4603      	mov	r3, r0
 80056f8:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80056fa:	e003      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	77fb      	strb	r3, [r7, #31]
        break;
 8005700:	e000      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8005702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005704:	7ffb      	ldrb	r3, [r7, #31]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10b      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800570a:	4b58      	ldr	r3, [pc, #352]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800570c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005710:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005718:	4954      	ldr	r1, [pc, #336]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005720:	e001      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005722:	7ffb      	ldrb	r3, [r7, #31]
 8005724:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 80ab 	beq.w	800588a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005734:	2300      	movs	r3, #0
 8005736:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005738:	4b4c      	ldr	r3, [pc, #304]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800573a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800573c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10d      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005744:	4b49      	ldr	r3, [pc, #292]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005748:	4a48      	ldr	r2, [pc, #288]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800574a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800574e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005750:	4b46      	ldr	r3, [pc, #280]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800575c:	2301      	movs	r3, #1
 800575e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005760:	4b43      	ldr	r3, [pc, #268]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a42      	ldr	r2, [pc, #264]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800576a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800576c:	f7fc ff02 	bl	8002574 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005772:	e00f      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005774:	f7fc fefe 	bl	8002574 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d908      	bls.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005782:	4b3b      	ldr	r3, [pc, #236]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d109      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8005792:	e006      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005794:	4b36      	ldr	r3, [pc, #216]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0e9      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80057a0:	e000      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80057a2:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80057a4:	7ffb      	ldrb	r3, [r7, #31]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d164      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057aa:	4b30      	ldr	r3, [pc, #192]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057b4:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01f      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d019      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057c8:	4b28      	ldr	r3, [pc, #160]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057d2:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057d4:	4b25      	ldr	r3, [pc, #148]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057da:	4a24      	ldr	r2, [pc, #144]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057e4:	4b21      	ldr	r3, [pc, #132]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ea:	4a20      	ldr	r2, [pc, #128]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057f4:	4a1d      	ldr	r2, [pc, #116]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01f      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005806:	f7fc feb5 	bl	8002574 <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800580c:	e012      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580e:	f7fc feb1 	bl	8002574 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800581c:	4293      	cmp	r3, r2
 800581e:	d909      	bls.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005820:	4b12      	ldr	r3, [pc, #72]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10a      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8005832:	e007      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005834:	4b0d      	ldr	r3, [pc, #52]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0e5      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005842:	e000      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005844:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005846:	7ffb      	ldrb	r3, [r7, #31]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10c      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800584c:	4b07      	ldr	r3, [pc, #28]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005852:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585c:	4903      	ldr	r1, [pc, #12]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005864:	e008      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005866:	7ffb      	ldrb	r3, [r7, #31]
 8005868:	77bb      	strb	r3, [r7, #30]
 800586a:	e005      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800586c:	40021000 	.word	0x40021000
 8005870:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005874:	7ffb      	ldrb	r3, [r7, #31]
 8005876:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005878:	7dfb      	ldrb	r3, [r7, #23]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d105      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800587e:	4b9c      	ldr	r3, [pc, #624]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005882:	4a9b      	ldr	r2, [pc, #620]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005884:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005888:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005896:	4b96      	ldr	r3, [pc, #600]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589c:	f023 0203 	bic.w	r2, r3, #3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a4:	4992      	ldr	r1, [pc, #584]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058b8:	4b8d      	ldr	r3, [pc, #564]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058be:	f023 020c 	bic.w	r2, r3, #12
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c6:	498a      	ldr	r1, [pc, #552]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058da:	4b85      	ldr	r3, [pc, #532]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e8:	4981      	ldr	r1, [pc, #516]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058fc:	4b7c      	ldr	r3, [pc, #496]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005902:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590a:	4979      	ldr	r1, [pc, #484]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800591e:	4b74      	ldr	r3, [pc, #464]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005924:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592c:	4970      	ldr	r1, [pc, #448]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005940:	4b6b      	ldr	r3, [pc, #428]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005946:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800594e:	4968      	ldr	r1, [pc, #416]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005962:	4b63      	ldr	r3, [pc, #396]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005968:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005970:	495f      	ldr	r1, [pc, #380]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005984:	4b5a      	ldr	r3, [pc, #360]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005992:	4957      	ldr	r1, [pc, #348]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80059a6:	4b52      	ldr	r3, [pc, #328]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80059a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059b4:	494e      	ldr	r1, [pc, #312]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d031      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059d0:	d00e      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80059d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059d6:	d814      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d015      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80059dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059e0:	d10f      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059e2:	4b43      	ldr	r3, [pc, #268]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	4a42      	ldr	r2, [pc, #264]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80059e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059ec:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80059ee:	e00c      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3304      	adds	r3, #4
 80059f4:	2100      	movs	r1, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 f97c 	bl	8005cf4 <RCCEx_PLLSAI1_Config>
 80059fc:	4603      	mov	r3, r0
 80059fe:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005a00:	e003      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	77fb      	strb	r3, [r7, #31]
        break;
 8005a06:	e000      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a0a:	7ffb      	ldrb	r3, [r7, #31]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10b      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a10:	4b37      	ldr	r3, [pc, #220]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a16:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a1e:	4934      	ldr	r1, [pc, #208]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005a26:	e001      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a28:	7ffb      	ldrb	r3, [r7, #31]
 8005a2a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a38:	4b2d      	ldr	r3, [pc, #180]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a46:	492a      	ldr	r1, [pc, #168]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a5a:	4b25      	ldr	r3, [pc, #148]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a68:	4921      	ldr	r1, [pc, #132]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a82:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a8a:	4919      	ldr	r1, [pc, #100]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a9e:	4b14      	ldr	r3, [pc, #80]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005aa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aa4:	f023 0203 	bic.w	r2, r3, #3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aac:	4910      	ldr	r1, [pc, #64]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d02b      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ace:	4908      	ldr	r1, [pc, #32]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ada:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ade:	d109      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ae0:	4b03      	ldr	r3, [pc, #12]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4a02      	ldr	r2, [pc, #8]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005aea:	60d3      	str	r3, [r2, #12]
 8005aec:	e014      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005aee:	bf00      	nop
 8005af0:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005af8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005afc:	d10c      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3304      	adds	r3, #4
 8005b02:	2101      	movs	r1, #1
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 f8f5 	bl	8005cf4 <RCCEx_PLLSAI1_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8005b0e:	7ffb      	ldrb	r3, [r7, #31]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8005b14:	7ffb      	ldrb	r3, [r7, #31]
 8005b16:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d04a      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b2c:	d108      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8005b2e:	4b70      	ldr	r3, [pc, #448]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005b30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b34:	4a6e      	ldr	r2, [pc, #440]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005b36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b3a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005b3e:	e012      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005b40:	4b6b      	ldr	r3, [pc, #428]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b4e:	4968      	ldr	r1, [pc, #416]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005b56:	4b66      	ldr	r3, [pc, #408]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005b58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b5c:	4a64      	ldr	r2, [pc, #400]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005b5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b62:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b6e:	d10d      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3304      	adds	r3, #4
 8005b74:	2101      	movs	r1, #1
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f8bc 	bl	8005cf4 <RCCEx_PLLSAI1_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005b80:	7ffb      	ldrb	r3, [r7, #31]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d019      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8005b86:	7ffb      	ldrb	r3, [r7, #31]
 8005b88:	77bb      	strb	r3, [r7, #30]
 8005b8a:	e016      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b94:	d106      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b96:	4b56      	ldr	r3, [pc, #344]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	4a55      	ldr	r2, [pc, #340]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005b9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ba0:	60d3      	str	r3, [r2, #12]
 8005ba2:	e00a      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ba8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bac:	d105      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005bae:	4b50      	ldr	r3, [pc, #320]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	4a4f      	ldr	r2, [pc, #316]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bb8:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d028      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bcc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bd4:	4946      	ldr	r1, [pc, #280]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005be0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005be4:	d106      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005be6:	4b42      	ldr	r3, [pc, #264]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	4a41      	ldr	r2, [pc, #260]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005bec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bf0:	60d3      	str	r3, [r2, #12]
 8005bf2:	e011      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bfc:	d10c      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3304      	adds	r3, #4
 8005c02:	2101      	movs	r1, #1
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 f875 	bl	8005cf4 <RCCEx_PLLSAI1_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005c0e:	7ffb      	ldrb	r3, [r7, #31]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005c14:	7ffb      	ldrb	r3, [r7, #31]
 8005c16:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01e      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c24:	4b32      	ldr	r3, [pc, #200]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c34:	492e      	ldr	r1, [pc, #184]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c46:	d10c      	bne.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	2102      	movs	r1, #2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f850 	bl	8005cf4 <RCCEx_PLLSAI1_Config>
 8005c54:	4603      	mov	r3, r0
 8005c56:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005c58:	7ffb      	ldrb	r3, [r7, #31]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8005c5e:	7ffb      	ldrb	r3, [r7, #31]
 8005c60:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00b      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c6e:	4b20      	ldr	r3, [pc, #128]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005c70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c74:	f023 0204 	bic.w	r2, r3, #4
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c7e:	491c      	ldr	r1, [pc, #112]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00b      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c92:	4b17      	ldr	r3, [pc, #92]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005c94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c98:	f023 0218 	bic.w	r2, r3, #24
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca2:	4913      	ldr	r1, [pc, #76]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d017      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cbc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cc6:	490a      	ldr	r1, [pc, #40]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cd8:	d105      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cda:	4b05      	ldr	r3, [pc, #20]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	4a04      	ldr	r2, [pc, #16]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005ce0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ce4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005ce6:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3720      	adds	r7, #32
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40021000 	.word	0x40021000

08005cf4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d018      	beq.n	8005d3c <RCCEx_PLLSAI1_Config+0x48>
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d81f      	bhi.n	8005d4e <RCCEx_PLLSAI1_Config+0x5a>
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d002      	beq.n	8005d18 <RCCEx_PLLSAI1_Config+0x24>
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d009      	beq.n	8005d2a <RCCEx_PLLSAI1_Config+0x36>
 8005d16:	e01a      	b.n	8005d4e <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d18:	4b65      	ldr	r3, [pc, #404]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d117      	bne.n	8005d54 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d28:	e014      	b.n	8005d54 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d2a:	4b61      	ldr	r3, [pc, #388]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d110      	bne.n	8005d58 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d3a:	e00d      	b.n	8005d58 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d109      	bne.n	8005d5c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d4c:	e006      	b.n	8005d5c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	73fb      	strb	r3, [r7, #15]
      break;
 8005d52:	e004      	b.n	8005d5e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005d54:	bf00      	nop
 8005d56:	e002      	b.n	8005d5e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005d58:	bf00      	nop
 8005d5a:	e000      	b.n	8005d5e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005d5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f040 809f 	bne.w	8005ea4 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d66:	4b52      	ldr	r3, [pc, #328]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a51      	ldr	r2, [pc, #324]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005d6c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d72:	f7fc fbff 	bl	8002574 <HAL_GetTick>
 8005d76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d78:	e00f      	b.n	8005d9a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d7a:	f7fc fbfb 	bl	8002574 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d908      	bls.n	8005d9a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d88:	4b49      	ldr	r3, [pc, #292]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d009      	beq.n	8005da8 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d98:	e006      	b.n	8005da8 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d9a:	4b45      	ldr	r3, [pc, #276]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e9      	bne.n	8005d7a <RCCEx_PLLSAI1_Config+0x86>
 8005da6:	e000      	b.n	8005daa <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005da8:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d179      	bne.n	8005ea4 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d116      	bne.n	8005de4 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005db6:	4b3e      	ldr	r3, [pc, #248]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005db8:	691a      	ldr	r2, [r3, #16]
 8005dba:	4b3e      	ldr	r3, [pc, #248]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1c0>)
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6892      	ldr	r2, [r2, #8]
 8005dc2:	0211      	lsls	r1, r2, #8
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	68d2      	ldr	r2, [r2, #12]
 8005dc8:	06d2      	lsls	r2, r2, #27
 8005dca:	4311      	orrs	r1, r2
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6852      	ldr	r2, [r2, #4]
 8005dd0:	3a01      	subs	r2, #1
 8005dd2:	0112      	lsls	r2, r2, #4
 8005dd4:	4311      	orrs	r1, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	4934      	ldr	r1, [pc, #208]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	610b      	str	r3, [r1, #16]
 8005de2:	e033      	b.n	8005e4c <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d118      	bne.n	8005e1c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dea:	4b31      	ldr	r3, [pc, #196]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005dec:	691a      	ldr	r2, [r3, #16]
 8005dee:	4b32      	ldr	r3, [pc, #200]	@ (8005eb8 <RCCEx_PLLSAI1_Config+0x1c4>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6892      	ldr	r2, [r2, #8]
 8005df6:	0211      	lsls	r1, r2, #8
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6912      	ldr	r2, [r2, #16]
 8005dfc:	0852      	lsrs	r2, r2, #1
 8005dfe:	3a01      	subs	r2, #1
 8005e00:	0552      	lsls	r2, r2, #21
 8005e02:	4311      	orrs	r1, r2
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6852      	ldr	r2, [r2, #4]
 8005e08:	3a01      	subs	r2, #1
 8005e0a:	0112      	lsls	r2, r2, #4
 8005e0c:	4311      	orrs	r1, r2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	4926      	ldr	r1, [pc, #152]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	610b      	str	r3, [r1, #16]
 8005e1a:	e017      	b.n	8005e4c <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e1c:	4b24      	ldr	r3, [pc, #144]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005e1e:	691a      	ldr	r2, [r3, #16]
 8005e20:	4b26      	ldr	r3, [pc, #152]	@ (8005ebc <RCCEx_PLLSAI1_Config+0x1c8>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6892      	ldr	r2, [r2, #8]
 8005e28:	0211      	lsls	r1, r2, #8
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6952      	ldr	r2, [r2, #20]
 8005e2e:	0852      	lsrs	r2, r2, #1
 8005e30:	3a01      	subs	r2, #1
 8005e32:	0652      	lsls	r2, r2, #25
 8005e34:	4311      	orrs	r1, r2
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6852      	ldr	r2, [r2, #4]
 8005e3a:	3a01      	subs	r2, #1
 8005e3c:	0112      	lsls	r2, r2, #4
 8005e3e:	4311      	orrs	r1, r2
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6812      	ldr	r2, [r2, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	491a      	ldr	r1, [pc, #104]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e4c:	4b18      	ldr	r3, [pc, #96]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a17      	ldr	r2, [pc, #92]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005e52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e58:	f7fc fb8c 	bl	8002574 <HAL_GetTick>
 8005e5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e5e:	e00f      	b.n	8005e80 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e60:	f7fc fb88 	bl	8002574 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d908      	bls.n	8005e80 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e6e:	4b10      	ldr	r3, [pc, #64]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d109      	bne.n	8005e8e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005e7e:	e006      	b.n	8005e8e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e80:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0e9      	beq.n	8005e60 <RCCEx_PLLSAI1_Config+0x16c>
 8005e8c:	e000      	b.n	8005e90 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8005e8e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005e96:	4b06      	ldr	r3, [pc, #24]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	4904      	ldr	r1, [pc, #16]	@ (8005eb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	07ff800c 	.word	0x07ff800c
 8005eb8:	ff9f800c 	.word	0xff9f800c
 8005ebc:	f9ff800c 	.word	0xf9ff800c

08005ec0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d018      	beq.n	8005f08 <RCCEx_PLLSAI2_Config+0x48>
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d81f      	bhi.n	8005f1a <RCCEx_PLLSAI2_Config+0x5a>
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d002      	beq.n	8005ee4 <RCCEx_PLLSAI2_Config+0x24>
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d009      	beq.n	8005ef6 <RCCEx_PLLSAI2_Config+0x36>
 8005ee2:	e01a      	b.n	8005f1a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ee4:	4b4a      	ldr	r3, [pc, #296]	@ (8006010 <RCCEx_PLLSAI2_Config+0x150>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d117      	bne.n	8005f20 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ef4:	e014      	b.n	8005f20 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ef6:	4b46      	ldr	r3, [pc, #280]	@ (8006010 <RCCEx_PLLSAI2_Config+0x150>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d110      	bne.n	8005f24 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f06:	e00d      	b.n	8005f24 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005f08:	4b41      	ldr	r3, [pc, #260]	@ (8006010 <RCCEx_PLLSAI2_Config+0x150>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d109      	bne.n	8005f28 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f18:	e006      	b.n	8005f28 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f1e:	e004      	b.n	8005f2a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005f20:	bf00      	nop
 8005f22:	e002      	b.n	8005f2a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005f24:	bf00      	nop
 8005f26:	e000      	b.n	8005f2a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005f28:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d169      	bne.n	8006004 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f30:	4b37      	ldr	r3, [pc, #220]	@ (8006010 <RCCEx_PLLSAI2_Config+0x150>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a36      	ldr	r2, [pc, #216]	@ (8006010 <RCCEx_PLLSAI2_Config+0x150>)
 8005f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f3c:	f7fc fb1a 	bl	8002574 <HAL_GetTick>
 8005f40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f42:	e00f      	b.n	8005f64 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f44:	f7fc fb16 	bl	8002574 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d908      	bls.n	8005f64 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f52:	4b2f      	ldr	r3, [pc, #188]	@ (8006010 <RCCEx_PLLSAI2_Config+0x150>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f62:	e006      	b.n	8005f72 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f64:	4b2a      	ldr	r3, [pc, #168]	@ (8006010 <RCCEx_PLLSAI2_Config+0x150>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e9      	bne.n	8005f44 <RCCEx_PLLSAI2_Config+0x84>
 8005f70:	e000      	b.n	8005f74 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005f72:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d144      	bne.n	8006004 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d115      	bne.n	8005fac <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f80:	4b23      	ldr	r3, [pc, #140]	@ (8006010 <RCCEx_PLLSAI2_Config+0x150>)
 8005f82:	695a      	ldr	r2, [r3, #20]
 8005f84:	4b23      	ldr	r3, [pc, #140]	@ (8006014 <RCCEx_PLLSAI2_Config+0x154>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6892      	ldr	r2, [r2, #8]
 8005f8c:	0211      	lsls	r1, r2, #8
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	68d2      	ldr	r2, [r2, #12]
 8005f92:	06d2      	lsls	r2, r2, #27
 8005f94:	4311      	orrs	r1, r2
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	6852      	ldr	r2, [r2, #4]
 8005f9a:	3a01      	subs	r2, #1
 8005f9c:	0112      	lsls	r2, r2, #4
 8005f9e:	4311      	orrs	r1, r2
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6812      	ldr	r2, [r2, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	491a      	ldr	r1, [pc, #104]	@ (8006010 <RCCEx_PLLSAI2_Config+0x150>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005fac:	4b18      	ldr	r3, [pc, #96]	@ (8006010 <RCCEx_PLLSAI2_Config+0x150>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a17      	ldr	r2, [pc, #92]	@ (8006010 <RCCEx_PLLSAI2_Config+0x150>)
 8005fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb8:	f7fc fadc 	bl	8002574 <HAL_GetTick>
 8005fbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fbe:	e00f      	b.n	8005fe0 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fc0:	f7fc fad8 	bl	8002574 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d908      	bls.n	8005fe0 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fce:	4b10      	ldr	r3, [pc, #64]	@ (8006010 <RCCEx_PLLSAI2_Config+0x150>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005fde:	e006      	b.n	8005fee <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8006010 <RCCEx_PLLSAI2_Config+0x150>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0e9      	beq.n	8005fc0 <RCCEx_PLLSAI2_Config+0x100>
 8005fec:	e000      	b.n	8005ff0 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005fee:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d106      	bne.n	8006004 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005ff6:	4b06      	ldr	r3, [pc, #24]	@ (8006010 <RCCEx_PLLSAI2_Config+0x150>)
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	4904      	ldr	r1, [pc, #16]	@ (8006010 <RCCEx_PLLSAI2_Config+0x150>)
 8006000:	4313      	orrs	r3, r2
 8006002:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006004:	7bfb      	ldrb	r3, [r7, #15]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	40021000 	.word	0x40021000
 8006014:	07ff800c 	.word	0x07ff800c

08006018 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d066      	beq.n	80060f8 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7fb fe6a 	bl	8001d18 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	2b10      	cmp	r3, #16
 8006058:	d045      	beq.n	80060e6 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800605a:	4b2a      	ldr	r3, [pc, #168]	@ (8006104 <HAL_RTC_Init+0xec>)
 800605c:	22ca      	movs	r2, #202	@ 0xca
 800605e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006060:	4b28      	ldr	r3, [pc, #160]	@ (8006104 <HAL_RTC_Init+0xec>)
 8006062:	2253      	movs	r2, #83	@ 0x53
 8006064:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f872 	bl	8006150 <RTC_EnterInitMode>
 800606c:	4603      	mov	r3, r0
 800606e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d121      	bne.n	80060ba <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006076:	4b23      	ldr	r3, [pc, #140]	@ (8006104 <HAL_RTC_Init+0xec>)
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	4a22      	ldr	r2, [pc, #136]	@ (8006104 <HAL_RTC_Init+0xec>)
 800607c:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006084:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006086:	4b1f      	ldr	r3, [pc, #124]	@ (8006104 <HAL_RTC_Init+0xec>)
 8006088:	699a      	ldr	r2, [r3, #24]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6859      	ldr	r1, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	4319      	orrs	r1, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	430b      	orrs	r3, r1
 800609a:	491a      	ldr	r1, [pc, #104]	@ (8006104 <HAL_RTC_Init+0xec>)
 800609c:	4313      	orrs	r3, r2
 800609e:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	041b      	lsls	r3, r3, #16
 80060aa:	4916      	ldr	r1, [pc, #88]	@ (8006104 <HAL_RTC_Init+0xec>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f881 	bl	80061b8 <RTC_ExitInitMode>
 80060b6:	4603      	mov	r3, r0
 80060b8:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10e      	bne.n	80060de <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 80060c0:	4b10      	ldr	r3, [pc, #64]	@ (8006104 <HAL_RTC_Init+0xec>)
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a19      	ldr	r1, [r3, #32]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	4319      	orrs	r1, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	430b      	orrs	r3, r1
 80060d8:	490a      	ldr	r1, [pc, #40]	@ (8006104 <HAL_RTC_Init+0xec>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060de:	4b09      	ldr	r3, [pc, #36]	@ (8006104 <HAL_RTC_Init+0xec>)
 80060e0:	22ff      	movs	r2, #255	@ 0xff
 80060e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80060e4:	e001      	b.n	80060ea <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d103      	bne.n	80060f8 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	40002800 	.word	0x40002800

08006108 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8006110:	4b0d      	ldr	r3, [pc, #52]	@ (8006148 <HAL_RTC_WaitForSynchro+0x40>)
 8006112:	4a0e      	ldr	r2, [pc, #56]	@ (800614c <HAL_RTC_WaitForSynchro+0x44>)
 8006114:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006116:	f7fc fa2d 	bl	8002574 <HAL_GetTick>
 800611a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800611c:	e009      	b.n	8006132 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800611e:	f7fc fa29 	bl	8002574 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800612c:	d901      	bls.n	8006132 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e006      	b.n	8006140 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006132:	4b05      	ldr	r3, [pc, #20]	@ (8006148 <HAL_RTC_WaitForSynchro+0x40>)
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f003 0320 	and.w	r3, r3, #32
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0ef      	beq.n	800611e <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40002800 	.word	0x40002800
 800614c:	0001005c 	.word	0x0001005c

08006150 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800615c:	4b15      	ldr	r3, [pc, #84]	@ (80061b4 <RTC_EnterInitMode+0x64>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006164:	2b00      	cmp	r3, #0
 8006166:	d120      	bne.n	80061aa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006168:	4b12      	ldr	r3, [pc, #72]	@ (80061b4 <RTC_EnterInitMode+0x64>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	4a11      	ldr	r2, [pc, #68]	@ (80061b4 <RTC_EnterInitMode+0x64>)
 800616e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006172:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006174:	f7fc f9fe 	bl	8002574 <HAL_GetTick>
 8006178:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800617a:	e00d      	b.n	8006198 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800617c:	f7fc f9fa 	bl	8002574 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800618a:	d905      	bls.n	8006198 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2203      	movs	r2, #3
 8006194:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006198:	4b06      	ldr	r3, [pc, #24]	@ (80061b4 <RTC_EnterInitMode+0x64>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <RTC_EnterInitMode+0x5a>
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d1e8      	bne.n	800617c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	40002800 	.word	0x40002800

080061b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80061c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006230 <RTC_ExitInitMode+0x78>)
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	4a19      	ldr	r2, [pc, #100]	@ (8006230 <RTC_ExitInitMode+0x78>)
 80061ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061ce:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80061d0:	4b17      	ldr	r3, [pc, #92]	@ (8006230 <RTC_ExitInitMode+0x78>)
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	f003 0320 	and.w	r3, r3, #32
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10c      	bne.n	80061f6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff ff93 	bl	8006108 <HAL_RTC_WaitForSynchro>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01e      	beq.n	8006226 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2203      	movs	r2, #3
 80061ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	73fb      	strb	r3, [r7, #15]
 80061f4:	e017      	b.n	8006226 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80061f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006230 <RTC_ExitInitMode+0x78>)
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	4a0d      	ldr	r2, [pc, #52]	@ (8006230 <RTC_ExitInitMode+0x78>)
 80061fc:	f023 0320 	bic.w	r3, r3, #32
 8006200:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7ff ff80 	bl	8006108 <HAL_RTC_WaitForSynchro>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2203      	movs	r2, #3
 8006212:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800621a:	4b05      	ldr	r3, [pc, #20]	@ (8006230 <RTC_ExitInitMode+0x78>)
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	4a04      	ldr	r2, [pc, #16]	@ (8006230 <RTC_ExitInitMode+0x78>)
 8006220:	f043 0320 	orr.w	r3, r3, #32
 8006224:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006226:	7bfb      	ldrb	r3, [r7, #15]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40002800 	.word	0x40002800

08006234 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                       - This feature is meaningful in case of Low power mode to avoid any RTC software execution after Wake Up.
  *                         That is why when WakeUpAutoClr is set, EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 800624c:	2302      	movs	r3, #2
 800624e:	e06f      	b.n	8006330 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006260:	4b35      	ldr	r3, [pc, #212]	@ (8006338 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8006262:	22ca      	movs	r2, #202	@ 0xca
 8006264:	625a      	str	r2, [r3, #36]	@ 0x24
 8006266:	4b34      	ldr	r3, [pc, #208]	@ (8006338 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8006268:	2253      	movs	r2, #83	@ 0x53
 800626a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 800626c:	4b32      	ldr	r3, [pc, #200]	@ (8006338 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	4a31      	ldr	r2, [pc, #196]	@ (8006338 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8006272:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006276:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8006278:	4b2f      	ldr	r3, [pc, #188]	@ (8006338 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800627a:	2204      	movs	r2, #4
 800627c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800627e:	4b2e      	ldr	r3, [pc, #184]	@ (8006338 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	d11e      	bne.n	80062c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 800628a:	f7fc f973 	bl	8002574 <HAL_GetTick>
 800628e:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8006290:	e014      	b.n	80062bc <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006292:	f7fc f96f 	bl	8002574 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062a0:	d90c      	bls.n	80062bc <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062a2:	4b25      	ldr	r3, [pc, #148]	@ (8006338 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80062a4:	22ff      	movs	r2, #255	@ 0xff
 80062a6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2203      	movs	r2, #3
 80062ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e039      	b.n	8006330 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80062bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006338 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0e4      	beq.n	8006292 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	041a      	lsls	r2, r3, #16
 80062cc:	491a      	ldr	r1, [pc, #104]	@ (8006338 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80062d4:	4b18      	ldr	r3, [pc, #96]	@ (8006338 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	f023 0207 	bic.w	r2, r3, #7
 80062dc:	4916      	ldr	r1, [pc, #88]	@ (8006338 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	618b      	str	r3, [r1, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d008      	beq.n	80062fc <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 80062ea:	4b14      	ldr	r3, [pc, #80]	@ (800633c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 80062ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062f0:	4a12      	ldr	r2, [pc, #72]	@ (800633c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 80062f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062f6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 80062fa:	e007      	b.n	800630c <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80062fc:	4b0f      	ldr	r3, [pc, #60]	@ (800633c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 80062fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006302:	4a0e      	ldr	r2, [pc, #56]	@ (800633c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8006304:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006308:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 800630c:	4b0a      	ldr	r3, [pc, #40]	@ (8006338 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	4a09      	ldr	r2, [pc, #36]	@ (8006338 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8006312:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8006316:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006318:	4b07      	ldr	r3, [pc, #28]	@ (8006338 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800631a:	22ff      	movs	r2, #255	@ 0xff
 800631c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	40002800 	.word	0x40002800
 800633c:	4002f400 	.word	0x4002f400

08006340 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800634e:	2b01      	cmp	r3, #1
 8006350:	d101      	bne.n	8006356 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8006352:	2302      	movs	r3, #2
 8006354:	e03e      	b.n	80063d4 <HAL_RTCEx_DeactivateWakeUpTimer+0x94>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2202      	movs	r2, #2
 8006362:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006366:	4b1d      	ldr	r3, [pc, #116]	@ (80063dc <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8006368:	22ca      	movs	r2, #202	@ 0xca
 800636a:	625a      	str	r2, [r3, #36]	@ 0x24
 800636c:	4b1b      	ldr	r3, [pc, #108]	@ (80063dc <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 800636e:	2253      	movs	r2, #83	@ 0x53
 8006370:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8006372:	4b1a      	ldr	r3, [pc, #104]	@ (80063dc <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	4a19      	ldr	r2, [pc, #100]	@ (80063dc <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8006378:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 800637c:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 800637e:	f7fc f8f9 	bl	8002574 <HAL_GetTick>
 8006382:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8006384:	e014      	b.n	80063b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006386:	f7fc f8f5 	bl	8002574 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006394:	d90c      	bls.n	80063b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006396:	4b11      	ldr	r3, [pc, #68]	@ (80063dc <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8006398:	22ff      	movs	r2, #255	@ 0xff
 800639a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2203      	movs	r2, #3
 80063a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e011      	b.n	80063d4 <HAL_RTCEx_DeactivateWakeUpTimer+0x94>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80063b0:	4b0a      	ldr	r3, [pc, #40]	@ (80063dc <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0e4      	beq.n	8006386 <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063bc:	4b07      	ldr	r3, [pc, #28]	@ (80063dc <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 80063be:	22ff      	movs	r2, #255	@ 0xff
 80063c0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40002800 	.word	0x40002800

080063e0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer non-secure interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80063e8:	4b09      	ldr	r3, [pc, #36]	@ (8006410 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80063ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80063f4:	4b06      	ldr	r3, [pc, #24]	@ (8006410 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80063f6:	2204      	movs	r2, #4
 80063f8:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fb f866 	bl	80014cc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	40002800 	.word	0x40002800

08006414 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	490f      	ldr	r1, [pc, #60]	@ (8006464 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8006428:	4313      	orrs	r3, r2
 800642a:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	490c      	ldr	r1, [pc, #48]	@ (8006468 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006436:	4313      	orrs	r3, r2
 8006438:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 800643a:	4b0b      	ldr	r3, [pc, #44]	@ (8006468 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6919      	ldr	r1, [r3, #16]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	041b      	lsls	r3, r3, #16
 800644c:	430b      	orrs	r3, r1
 800644e:	4906      	ldr	r1, [pc, #24]	@ (8006468 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006450:	4313      	orrs	r3, r2
 8006452:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40002800 	.word	0x40002800
 8006468:	40003400 	.word	0x40003400

0800646c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e042      	b.n	8006504 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006484:	2b00      	cmp	r3, #0
 8006486:	d106      	bne.n	8006496 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7fb fbdb 	bl	8001c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2224      	movs	r2, #36	@ 0x24
 800649a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0201 	bic.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f001 f81e 	bl	80074f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fd1b 	bl	8006ef8 <UART_SetConfig>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e01b      	b.n	8006504 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0201 	orr.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 f89d 	bl	800763c <UART_CheckIdleState>
 8006502:	4603      	mov	r3, r0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08a      	sub	sp, #40	@ 0x28
 8006510:	af02      	add	r7, sp, #8
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	4613      	mov	r3, r2
 800651a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006522:	2b20      	cmp	r3, #32
 8006524:	d17b      	bne.n	800661e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <HAL_UART_Transmit+0x26>
 800652c:	88fb      	ldrh	r3, [r7, #6]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e074      	b.n	8006620 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2221      	movs	r2, #33	@ 0x21
 8006542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006546:	f7fc f815 	bl	8002574 <HAL_GetTick>
 800654a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	88fa      	ldrh	r2, [r7, #6]
 8006550:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	88fa      	ldrh	r2, [r7, #6]
 8006558:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006564:	d108      	bne.n	8006578 <HAL_UART_Transmit+0x6c>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d104      	bne.n	8006578 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800656e:	2300      	movs	r3, #0
 8006570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	61bb      	str	r3, [r7, #24]
 8006576:	e003      	b.n	8006580 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800657c:	2300      	movs	r3, #0
 800657e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006580:	e030      	b.n	80065e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2200      	movs	r2, #0
 800658a:	2180      	movs	r1, #128	@ 0x80
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f001 f8ff 	bl	8007790 <UART_WaitOnFlagUntilTimeout>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2220      	movs	r2, #32
 800659c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e03d      	b.n	8006620 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	3302      	adds	r3, #2
 80065be:	61bb      	str	r3, [r7, #24]
 80065c0:	e007      	b.n	80065d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	781a      	ldrb	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	3301      	adds	r3, #1
 80065d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1c8      	bne.n	8006582 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2200      	movs	r2, #0
 80065f8:	2140      	movs	r1, #64	@ 0x40
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f001 f8c8 	bl	8007790 <UART_WaitOnFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e006      	b.n	8006620 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2220      	movs	r2, #32
 8006616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e000      	b.n	8006620 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800661e:	2302      	movs	r3, #2
  }
}
 8006620:	4618      	mov	r0, r3
 8006622:	3720      	adds	r7, #32
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08a      	sub	sp, #40	@ 0x28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800663c:	2b20      	cmp	r3, #32
 800663e:	d137      	bne.n	80066b0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <HAL_UART_Receive_IT+0x24>
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e030      	b.n	80066b2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a18      	ldr	r2, [pc, #96]	@ (80066bc <HAL_UART_Receive_IT+0x94>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d01f      	beq.n	80066a0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d018      	beq.n	80066a0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	613b      	str	r3, [r7, #16]
   return(result);
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	623b      	str	r3, [r7, #32]
 800668e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	69f9      	ldr	r1, [r7, #28]
 8006692:	6a3a      	ldr	r2, [r7, #32]
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	61bb      	str	r3, [r7, #24]
   return(result);
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e6      	bne.n	800666e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066a0:	88fb      	ldrh	r3, [r7, #6]
 80066a2:	461a      	mov	r2, r3
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f001 f8e0 	bl	800786c <UART_Start_Receive_IT>
 80066ac:	4603      	mov	r3, r0
 80066ae:	e000      	b.n	80066b2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066b0:	2302      	movs	r3, #2
  }
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3728      	adds	r7, #40	@ 0x28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40008000 	.word	0x40008000

080066c0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b09a      	sub	sp, #104	@ 0x68
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80066d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80066e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80066ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80066f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e6      	bne.n	80066c8 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3308      	adds	r3, #8
 8006700:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800670a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006710:	f023 0301 	bic.w	r3, r3, #1
 8006714:	663b      	str	r3, [r7, #96]	@ 0x60
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3308      	adds	r3, #8
 800671c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800671e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006720:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006724:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800672c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e3      	bne.n	80066fa <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006736:	2b01      	cmp	r3, #1
 8006738:	d118      	bne.n	800676c <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	61fb      	str	r3, [r7, #28]
   return(result);
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f023 0310 	bic.w	r3, r3, #16
 800674e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800675a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800675e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e6      	bne.n	800673a <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006776:	2b40      	cmp	r3, #64	@ 0x40
 8006778:	d154      	bne.n	8006824 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3308      	adds	r3, #8
 8006780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	60bb      	str	r3, [r7, #8]
   return(result);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006790:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3308      	adds	r3, #8
 8006798:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800679a:	61ba      	str	r2, [r7, #24]
 800679c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679e:	6979      	ldr	r1, [r7, #20]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	613b      	str	r3, [r7, #16]
   return(result);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1e5      	bne.n	800677a <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d017      	beq.n	80067e8 <HAL_UART_AbortReceive_IT+0x128>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067be:	4a26      	ldr	r2, [pc, #152]	@ (8006858 <HAL_UART_AbortReceive_IT+0x198>)
 80067c0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fd fc28 	bl	800401e <HAL_DMA_Abort_IT>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d03c      	beq.n	800684e <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80067e2:	4610      	mov	r0, r2
 80067e4:	4798      	blx	r3
 80067e6:	e032      	b.n	800684e <HAL_UART_AbortReceive_IT+0x18e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	220f      	movs	r2, #15
 80067fc:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	699a      	ldr	r2, [r3, #24]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f042 0208 	orr.w	r2, r2, #8
 800680c:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2220      	movs	r2, #32
 8006812:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fb55 	bl	8006ecc <HAL_UART_AbortReceiveCpltCallback>
 8006822:	e014      	b.n	800684e <HAL_UART_AbortReceive_IT+0x18e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	220f      	movs	r2, #15
 8006838:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fb3f 	bl	8006ecc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3768      	adds	r7, #104	@ 0x68
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	08007ba9 	.word	0x08007ba9

0800685c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b0ba      	sub	sp, #232	@ 0xe8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006882:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006886:	f640 030f 	movw	r3, #2063	@ 0x80f
 800688a:	4013      	ands	r3, r2
 800688c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006890:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d11b      	bne.n	80068d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d015      	beq.n	80068d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068a8:	f003 0320 	and.w	r3, r3, #32
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d105      	bne.n	80068bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d009      	beq.n	80068d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 82e3 	beq.w	8006e8c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
      }
      return;
 80068ce:	e2dd      	b.n	8006e8c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8123 	beq.w	8006b20 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80068da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80068de:	4b8d      	ldr	r3, [pc, #564]	@ (8006b14 <HAL_UART_IRQHandler+0x2b8>)
 80068e0:	4013      	ands	r3, r2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80068e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80068ea:	4b8b      	ldr	r3, [pc, #556]	@ (8006b18 <HAL_UART_IRQHandler+0x2bc>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 8116 	beq.w	8006b20 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d011      	beq.n	8006924 <HAL_UART_IRQHandler+0xc8>
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00b      	beq.n	8006924 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2201      	movs	r2, #1
 8006912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800691a:	f043 0201 	orr.w	r2, r3, #1
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d011      	beq.n	8006954 <HAL_UART_IRQHandler+0xf8>
 8006930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00b      	beq.n	8006954 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2202      	movs	r2, #2
 8006942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694a:	f043 0204 	orr.w	r2, r3, #4
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d011      	beq.n	8006984 <HAL_UART_IRQHandler+0x128>
 8006960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00b      	beq.n	8006984 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2204      	movs	r2, #4
 8006972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800697a:	f043 0202 	orr.w	r2, r3, #2
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b00      	cmp	r3, #0
 800698e:	d017      	beq.n	80069c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006994:	f003 0320 	and.w	r3, r3, #32
 8006998:	2b00      	cmp	r3, #0
 800699a:	d105      	bne.n	80069a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800699c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80069a0:	4b5c      	ldr	r3, [pc, #368]	@ (8006b14 <HAL_UART_IRQHandler+0x2b8>)
 80069a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00b      	beq.n	80069c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2208      	movs	r2, #8
 80069ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b6:	f043 0208 	orr.w	r2, r3, #8
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d012      	beq.n	80069f2 <HAL_UART_IRQHandler+0x196>
 80069cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00c      	beq.n	80069f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e8:	f043 0220 	orr.w	r2, r3, #32
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 8249 	beq.w	8006e90 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d013      	beq.n	8006a32 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d105      	bne.n	8006a22 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a46:	2b40      	cmp	r3, #64	@ 0x40
 8006a48:	d005      	beq.n	8006a56 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d054      	beq.n	8006b00 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 f82a 	bl	8007ab0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a66:	2b40      	cmp	r3, #64	@ 0x40
 8006a68:	d146      	bne.n	8006af8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3308      	adds	r3, #8
 8006a92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006aa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1d9      	bne.n	8006a6a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d017      	beq.n	8006af0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ac6:	4a15      	ldr	r2, [pc, #84]	@ (8006b1c <HAL_UART_IRQHandler+0x2c0>)
 8006ac8:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fd faa4 	bl	800401e <HAL_DMA_Abort_IT>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d019      	beq.n	8006b10 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006aea:	4610      	mov	r0, r2
 8006aec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aee:	e00f      	b.n	8006b10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f9e1 	bl	8006eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af6:	e00b      	b.n	8006b10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f9dd 	bl	8006eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006afe:	e007      	b.n	8006b10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f9d9 	bl	8006eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006b0e:	e1bf      	b.n	8006e90 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b10:	bf00      	nop
    return;
 8006b12:	e1bd      	b.n	8006e90 <HAL_UART_IRQHandler+0x634>
 8006b14:	10000001 	.word	0x10000001
 8006b18:	04000120 	.word	0x04000120
 8006b1c:	08007b7d 	.word	0x08007b7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	f040 8153 	bne.w	8006dd0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b2e:	f003 0310 	and.w	r3, r3, #16
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 814c 	beq.w	8006dd0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b3c:	f003 0310 	and.w	r3, r3, #16
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8145 	beq.w	8006dd0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2210      	movs	r2, #16
 8006b4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b58:	2b40      	cmp	r3, #64	@ 0x40
 8006b5a:	f040 80bb 	bne.w	8006cd4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 818f 	beq.w	8006e94 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b80:	429a      	cmp	r2, r3
 8006b82:	f080 8187 	bcs.w	8006e94 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f040 8087 	bne.w	8006cb2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006bce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006bd2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006bda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1da      	bne.n	8006ba4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006bfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c00:	f023 0301 	bic.w	r3, r3, #1
 8006c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e1      	bne.n	8006bee <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3308      	adds	r3, #8
 8006c4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e3      	bne.n	8006c2a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c80:	f023 0310 	bic.w	r3, r3, #16
 8006c84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ca0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1e4      	bne.n	8006c70 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fd f95a 	bl	8003f66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f907 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cd2:	e0df      	b.n	8006e94 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 80d1 	beq.w	8006e98 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006cf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 80cc 	beq.w	8006e98 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d22:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d24:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e4      	bne.n	8006d00 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	623b      	str	r3, [r7, #32]
   return(result);
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d4c:	f023 0301 	bic.w	r3, r3, #1
 8006d50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3308      	adds	r3, #8
 8006d5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e1      	bne.n	8006d36 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0310 	bic.w	r3, r3, #16
 8006d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006da8:	61fb      	str	r3, [r7, #28]
 8006daa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	69b9      	ldr	r1, [r7, #24]
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	617b      	str	r3, [r7, #20]
   return(result);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e4      	bne.n	8006d86 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f889 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dce:	e063      	b.n	8006e98 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00e      	beq.n	8006dfa <HAL_UART_IRQHandler+0x59e>
 8006ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006de0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d008      	beq.n	8006dfa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006df0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 fc44 	bl	8008680 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006df8:	e051      	b.n	8006e9e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d014      	beq.n	8006e30 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d105      	bne.n	8006e1e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d008      	beq.n	8006e30 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d03a      	beq.n	8006e9c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	4798      	blx	r3
    }
    return;
 8006e2e:	e035      	b.n	8006e9c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d009      	beq.n	8006e50 <HAL_UART_IRQHandler+0x5f4>
 8006e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fed2 	bl	8007bf2 <UART_EndTransmit_IT>
    return;
 8006e4e:	e026      	b.n	8006e9e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d009      	beq.n	8006e70 <HAL_UART_IRQHandler+0x614>
 8006e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e60:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 fc1d 	bl	80086a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e6e:	e016      	b.n	8006e9e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d010      	beq.n	8006e9e <HAL_UART_IRQHandler+0x642>
 8006e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	da0c      	bge.n	8006e9e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 fc05 	bl	8008694 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e8a:	e008      	b.n	8006e9e <HAL_UART_IRQHandler+0x642>
      return;
 8006e8c:	bf00      	nop
 8006e8e:	e006      	b.n	8006e9e <HAL_UART_IRQHandler+0x642>
    return;
 8006e90:	bf00      	nop
 8006e92:	e004      	b.n	8006e9e <HAL_UART_IRQHandler+0x642>
      return;
 8006e94:	bf00      	nop
 8006e96:	e002      	b.n	8006e9e <HAL_UART_IRQHandler+0x642>
      return;
 8006e98:	bf00      	nop
 8006e9a:	e000      	b.n	8006e9e <HAL_UART_IRQHandler+0x642>
    return;
 8006e9c:	bf00      	nop
  }
}
 8006e9e:	37e8      	adds	r7, #232	@ 0xe8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006efc:	b08c      	sub	sp, #48	@ 0x30
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	431a      	orrs	r2, r3
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	4baa      	ldr	r3, [pc, #680]	@ (80071d0 <UART_SetConfig+0x2d8>)
 8006f28:	4013      	ands	r3, r2
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	6812      	ldr	r2, [r2, #0]
 8006f2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f30:	430b      	orrs	r3, r1
 8006f32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a9f      	ldr	r2, [pc, #636]	@ (80071d4 <UART_SetConfig+0x2dc>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d004      	beq.n	8006f64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f60:	4313      	orrs	r3, r2
 8006f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006f6e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	6812      	ldr	r2, [r2, #0]
 8006f76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f78:	430b      	orrs	r3, r1
 8006f7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f82:	f023 010f 	bic.w	r1, r3, #15
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a90      	ldr	r2, [pc, #576]	@ (80071d8 <UART_SetConfig+0x2e0>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d125      	bne.n	8006fe8 <UART_SetConfig+0xf0>
 8006f9c:	4b8f      	ldr	r3, [pc, #572]	@ (80071dc <UART_SetConfig+0x2e4>)
 8006f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d81a      	bhi.n	8006fe0 <UART_SetConfig+0xe8>
 8006faa:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb0 <UART_SetConfig+0xb8>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fc1 	.word	0x08006fc1
 8006fb4:	08006fd1 	.word	0x08006fd1
 8006fb8:	08006fc9 	.word	0x08006fc9
 8006fbc:	08006fd9 	.word	0x08006fd9
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fc6:	e116      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fce:	e112      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8006fd0:	2304      	movs	r3, #4
 8006fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fd6:	e10e      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8006fd8:	2308      	movs	r3, #8
 8006fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fde:	e10a      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe6:	e106      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a7c      	ldr	r2, [pc, #496]	@ (80071e0 <UART_SetConfig+0x2e8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d138      	bne.n	8007064 <UART_SetConfig+0x16c>
 8006ff2:	4b7a      	ldr	r3, [pc, #488]	@ (80071dc <UART_SetConfig+0x2e4>)
 8006ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ff8:	f003 030c 	and.w	r3, r3, #12
 8006ffc:	2b0c      	cmp	r3, #12
 8006ffe:	d82d      	bhi.n	800705c <UART_SetConfig+0x164>
 8007000:	a201      	add	r2, pc, #4	@ (adr r2, 8007008 <UART_SetConfig+0x110>)
 8007002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007006:	bf00      	nop
 8007008:	0800703d 	.word	0x0800703d
 800700c:	0800705d 	.word	0x0800705d
 8007010:	0800705d 	.word	0x0800705d
 8007014:	0800705d 	.word	0x0800705d
 8007018:	0800704d 	.word	0x0800704d
 800701c:	0800705d 	.word	0x0800705d
 8007020:	0800705d 	.word	0x0800705d
 8007024:	0800705d 	.word	0x0800705d
 8007028:	08007045 	.word	0x08007045
 800702c:	0800705d 	.word	0x0800705d
 8007030:	0800705d 	.word	0x0800705d
 8007034:	0800705d 	.word	0x0800705d
 8007038:	08007055 	.word	0x08007055
 800703c:	2300      	movs	r3, #0
 800703e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007042:	e0d8      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8007044:	2302      	movs	r3, #2
 8007046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800704a:	e0d4      	b.n	80071f6 <UART_SetConfig+0x2fe>
 800704c:	2304      	movs	r3, #4
 800704e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007052:	e0d0      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8007054:	2308      	movs	r3, #8
 8007056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800705a:	e0cc      	b.n	80071f6 <UART_SetConfig+0x2fe>
 800705c:	2310      	movs	r3, #16
 800705e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007062:	e0c8      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a5e      	ldr	r2, [pc, #376]	@ (80071e4 <UART_SetConfig+0x2ec>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d125      	bne.n	80070ba <UART_SetConfig+0x1c2>
 800706e:	4b5b      	ldr	r3, [pc, #364]	@ (80071dc <UART_SetConfig+0x2e4>)
 8007070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007074:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007078:	2b30      	cmp	r3, #48	@ 0x30
 800707a:	d016      	beq.n	80070aa <UART_SetConfig+0x1b2>
 800707c:	2b30      	cmp	r3, #48	@ 0x30
 800707e:	d818      	bhi.n	80070b2 <UART_SetConfig+0x1ba>
 8007080:	2b20      	cmp	r3, #32
 8007082:	d00a      	beq.n	800709a <UART_SetConfig+0x1a2>
 8007084:	2b20      	cmp	r3, #32
 8007086:	d814      	bhi.n	80070b2 <UART_SetConfig+0x1ba>
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <UART_SetConfig+0x19a>
 800708c:	2b10      	cmp	r3, #16
 800708e:	d008      	beq.n	80070a2 <UART_SetConfig+0x1aa>
 8007090:	e00f      	b.n	80070b2 <UART_SetConfig+0x1ba>
 8007092:	2300      	movs	r3, #0
 8007094:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007098:	e0ad      	b.n	80071f6 <UART_SetConfig+0x2fe>
 800709a:	2302      	movs	r3, #2
 800709c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a0:	e0a9      	b.n	80071f6 <UART_SetConfig+0x2fe>
 80070a2:	2304      	movs	r3, #4
 80070a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a8:	e0a5      	b.n	80071f6 <UART_SetConfig+0x2fe>
 80070aa:	2308      	movs	r3, #8
 80070ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b0:	e0a1      	b.n	80071f6 <UART_SetConfig+0x2fe>
 80070b2:	2310      	movs	r3, #16
 80070b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b8:	e09d      	b.n	80071f6 <UART_SetConfig+0x2fe>
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a4a      	ldr	r2, [pc, #296]	@ (80071e8 <UART_SetConfig+0x2f0>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d125      	bne.n	8007110 <UART_SetConfig+0x218>
 80070c4:	4b45      	ldr	r3, [pc, #276]	@ (80071dc <UART_SetConfig+0x2e4>)
 80070c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80070ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80070d0:	d016      	beq.n	8007100 <UART_SetConfig+0x208>
 80070d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80070d4:	d818      	bhi.n	8007108 <UART_SetConfig+0x210>
 80070d6:	2b80      	cmp	r3, #128	@ 0x80
 80070d8:	d00a      	beq.n	80070f0 <UART_SetConfig+0x1f8>
 80070da:	2b80      	cmp	r3, #128	@ 0x80
 80070dc:	d814      	bhi.n	8007108 <UART_SetConfig+0x210>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <UART_SetConfig+0x1f0>
 80070e2:	2b40      	cmp	r3, #64	@ 0x40
 80070e4:	d008      	beq.n	80070f8 <UART_SetConfig+0x200>
 80070e6:	e00f      	b.n	8007108 <UART_SetConfig+0x210>
 80070e8:	2300      	movs	r3, #0
 80070ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ee:	e082      	b.n	80071f6 <UART_SetConfig+0x2fe>
 80070f0:	2302      	movs	r3, #2
 80070f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070f6:	e07e      	b.n	80071f6 <UART_SetConfig+0x2fe>
 80070f8:	2304      	movs	r3, #4
 80070fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070fe:	e07a      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8007100:	2308      	movs	r3, #8
 8007102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007106:	e076      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8007108:	2310      	movs	r3, #16
 800710a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800710e:	e072      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a35      	ldr	r2, [pc, #212]	@ (80071ec <UART_SetConfig+0x2f4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d12a      	bne.n	8007170 <UART_SetConfig+0x278>
 800711a:	4b30      	ldr	r3, [pc, #192]	@ (80071dc <UART_SetConfig+0x2e4>)
 800711c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007120:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007124:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007128:	d01a      	beq.n	8007160 <UART_SetConfig+0x268>
 800712a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800712e:	d81b      	bhi.n	8007168 <UART_SetConfig+0x270>
 8007130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007134:	d00c      	beq.n	8007150 <UART_SetConfig+0x258>
 8007136:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800713a:	d815      	bhi.n	8007168 <UART_SetConfig+0x270>
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <UART_SetConfig+0x250>
 8007140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007144:	d008      	beq.n	8007158 <UART_SetConfig+0x260>
 8007146:	e00f      	b.n	8007168 <UART_SetConfig+0x270>
 8007148:	2300      	movs	r3, #0
 800714a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800714e:	e052      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8007150:	2302      	movs	r3, #2
 8007152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007156:	e04e      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8007158:	2304      	movs	r3, #4
 800715a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800715e:	e04a      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8007160:	2308      	movs	r3, #8
 8007162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007166:	e046      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8007168:	2310      	movs	r3, #16
 800716a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800716e:	e042      	b.n	80071f6 <UART_SetConfig+0x2fe>
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a17      	ldr	r2, [pc, #92]	@ (80071d4 <UART_SetConfig+0x2dc>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d13a      	bne.n	80071f0 <UART_SetConfig+0x2f8>
 800717a:	4b18      	ldr	r3, [pc, #96]	@ (80071dc <UART_SetConfig+0x2e4>)
 800717c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007180:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007184:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007188:	d01a      	beq.n	80071c0 <UART_SetConfig+0x2c8>
 800718a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800718e:	d81b      	bhi.n	80071c8 <UART_SetConfig+0x2d0>
 8007190:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007194:	d00c      	beq.n	80071b0 <UART_SetConfig+0x2b8>
 8007196:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800719a:	d815      	bhi.n	80071c8 <UART_SetConfig+0x2d0>
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <UART_SetConfig+0x2b0>
 80071a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071a4:	d008      	beq.n	80071b8 <UART_SetConfig+0x2c0>
 80071a6:	e00f      	b.n	80071c8 <UART_SetConfig+0x2d0>
 80071a8:	2300      	movs	r3, #0
 80071aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ae:	e022      	b.n	80071f6 <UART_SetConfig+0x2fe>
 80071b0:	2302      	movs	r3, #2
 80071b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071b6:	e01e      	b.n	80071f6 <UART_SetConfig+0x2fe>
 80071b8:	2304      	movs	r3, #4
 80071ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071be:	e01a      	b.n	80071f6 <UART_SetConfig+0x2fe>
 80071c0:	2308      	movs	r3, #8
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071c6:	e016      	b.n	80071f6 <UART_SetConfig+0x2fe>
 80071c8:	2310      	movs	r3, #16
 80071ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ce:	e012      	b.n	80071f6 <UART_SetConfig+0x2fe>
 80071d0:	cfff69f3 	.word	0xcfff69f3
 80071d4:	40008000 	.word	0x40008000
 80071d8:	40013800 	.word	0x40013800
 80071dc:	40021000 	.word	0x40021000
 80071e0:	40004400 	.word	0x40004400
 80071e4:	40004800 	.word	0x40004800
 80071e8:	40004c00 	.word	0x40004c00
 80071ec:	40005000 	.word	0x40005000
 80071f0:	2310      	movs	r3, #16
 80071f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4ab0      	ldr	r2, [pc, #704]	@ (80074bc <UART_SetConfig+0x5c4>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	f040 809b 	bne.w	8007338 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007202:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007206:	2b08      	cmp	r3, #8
 8007208:	d827      	bhi.n	800725a <UART_SetConfig+0x362>
 800720a:	a201      	add	r2, pc, #4	@ (adr r2, 8007210 <UART_SetConfig+0x318>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	08007235 	.word	0x08007235
 8007214:	0800723d 	.word	0x0800723d
 8007218:	08007245 	.word	0x08007245
 800721c:	0800725b 	.word	0x0800725b
 8007220:	0800724b 	.word	0x0800724b
 8007224:	0800725b 	.word	0x0800725b
 8007228:	0800725b 	.word	0x0800725b
 800722c:	0800725b 	.word	0x0800725b
 8007230:	08007253 	.word	0x08007253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007234:	f7fe f8e2 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8007238:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800723a:	e014      	b.n	8007266 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800723c:	f7fe f8f2 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 8007240:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007242:	e010      	b.n	8007266 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007244:	4b9e      	ldr	r3, [pc, #632]	@ (80074c0 <UART_SetConfig+0x5c8>)
 8007246:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007248:	e00d      	b.n	8007266 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800724a:	f7fe f827 	bl	800529c <HAL_RCC_GetSysClockFreq>
 800724e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007250:	e009      	b.n	8007266 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007256:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007258:	e005      	b.n	8007266 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007264:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 8130 	beq.w	80074ce <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007272:	4a94      	ldr	r2, [pc, #592]	@ (80074c4 <UART_SetConfig+0x5cc>)
 8007274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007278:	461a      	mov	r2, r3
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007280:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	4613      	mov	r3, r2
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	4413      	add	r3, r2
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	429a      	cmp	r2, r3
 8007290:	d305      	bcc.n	800729e <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	429a      	cmp	r2, r3
 800729c:	d903      	bls.n	80072a6 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072a4:	e113      	b.n	80074ce <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a8:	2200      	movs	r2, #0
 80072aa:	60bb      	str	r3, [r7, #8]
 80072ac:	60fa      	str	r2, [r7, #12]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b2:	4a84      	ldr	r2, [pc, #528]	@ (80074c4 <UART_SetConfig+0x5cc>)
 80072b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	2200      	movs	r2, #0
 80072bc:	603b      	str	r3, [r7, #0]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072c8:	f7f9 fcc2 	bl	8000c50 <__aeabi_uldivmod>
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	4610      	mov	r0, r2
 80072d2:	4619      	mov	r1, r3
 80072d4:	f04f 0200 	mov.w	r2, #0
 80072d8:	f04f 0300 	mov.w	r3, #0
 80072dc:	020b      	lsls	r3, r1, #8
 80072de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072e2:	0202      	lsls	r2, r0, #8
 80072e4:	6979      	ldr	r1, [r7, #20]
 80072e6:	6849      	ldr	r1, [r1, #4]
 80072e8:	0849      	lsrs	r1, r1, #1
 80072ea:	2000      	movs	r0, #0
 80072ec:	460c      	mov	r4, r1
 80072ee:	4605      	mov	r5, r0
 80072f0:	eb12 0804 	adds.w	r8, r2, r4
 80072f4:	eb43 0905 	adc.w	r9, r3, r5
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	469a      	mov	sl, r3
 8007300:	4693      	mov	fp, r2
 8007302:	4652      	mov	r2, sl
 8007304:	465b      	mov	r3, fp
 8007306:	4640      	mov	r0, r8
 8007308:	4649      	mov	r1, r9
 800730a:	f7f9 fca1 	bl	8000c50 <__aeabi_uldivmod>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4613      	mov	r3, r2
 8007314:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800731c:	d308      	bcc.n	8007330 <UART_SetConfig+0x438>
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007324:	d204      	bcs.n	8007330 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6a3a      	ldr	r2, [r7, #32]
 800732c:	60da      	str	r2, [r3, #12]
 800732e:	e0ce      	b.n	80074ce <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007336:	e0ca      	b.n	80074ce <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007340:	d166      	bne.n	8007410 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8007342:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007346:	2b08      	cmp	r3, #8
 8007348:	d827      	bhi.n	800739a <UART_SetConfig+0x4a2>
 800734a:	a201      	add	r2, pc, #4	@ (adr r2, 8007350 <UART_SetConfig+0x458>)
 800734c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007350:	08007375 	.word	0x08007375
 8007354:	0800737d 	.word	0x0800737d
 8007358:	08007385 	.word	0x08007385
 800735c:	0800739b 	.word	0x0800739b
 8007360:	0800738b 	.word	0x0800738b
 8007364:	0800739b 	.word	0x0800739b
 8007368:	0800739b 	.word	0x0800739b
 800736c:	0800739b 	.word	0x0800739b
 8007370:	08007393 	.word	0x08007393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007374:	f7fe f842 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8007378:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800737a:	e014      	b.n	80073a6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800737c:	f7fe f852 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 8007380:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007382:	e010      	b.n	80073a6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007384:	4b4e      	ldr	r3, [pc, #312]	@ (80074c0 <UART_SetConfig+0x5c8>)
 8007386:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007388:	e00d      	b.n	80073a6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800738a:	f7fd ff87 	bl	800529c <HAL_RCC_GetSysClockFreq>
 800738e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007390:	e009      	b.n	80073a6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007398:	e005      	b.n	80073a6 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80073a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 8090 	beq.w	80074ce <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b2:	4a44      	ldr	r2, [pc, #272]	@ (80074c4 <UART_SetConfig+0x5cc>)
 80073b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073b8:	461a      	mov	r2, r3
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80073c0:	005a      	lsls	r2, r3, #1
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	085b      	lsrs	r3, r3, #1
 80073c8:	441a      	add	r2, r3
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	2b0f      	cmp	r3, #15
 80073d8:	d916      	bls.n	8007408 <UART_SetConfig+0x510>
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073e0:	d212      	bcs.n	8007408 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	f023 030f 	bic.w	r3, r3, #15
 80073ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	085b      	lsrs	r3, r3, #1
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	8bfb      	ldrh	r3, [r7, #30]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	8bfa      	ldrh	r2, [r7, #30]
 8007404:	60da      	str	r2, [r3, #12]
 8007406:	e062      	b.n	80074ce <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800740e:	e05e      	b.n	80074ce <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007410:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007414:	2b08      	cmp	r3, #8
 8007416:	d828      	bhi.n	800746a <UART_SetConfig+0x572>
 8007418:	a201      	add	r2, pc, #4	@ (adr r2, 8007420 <UART_SetConfig+0x528>)
 800741a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741e:	bf00      	nop
 8007420:	08007445 	.word	0x08007445
 8007424:	0800744d 	.word	0x0800744d
 8007428:	08007455 	.word	0x08007455
 800742c:	0800746b 	.word	0x0800746b
 8007430:	0800745b 	.word	0x0800745b
 8007434:	0800746b 	.word	0x0800746b
 8007438:	0800746b 	.word	0x0800746b
 800743c:	0800746b 	.word	0x0800746b
 8007440:	08007463 	.word	0x08007463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007444:	f7fd ffda 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8007448:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800744a:	e014      	b.n	8007476 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800744c:	f7fd ffea 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 8007450:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007452:	e010      	b.n	8007476 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007454:	4b1a      	ldr	r3, [pc, #104]	@ (80074c0 <UART_SetConfig+0x5c8>)
 8007456:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007458:	e00d      	b.n	8007476 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800745a:	f7fd ff1f 	bl	800529c <HAL_RCC_GetSysClockFreq>
 800745e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007460:	e009      	b.n	8007476 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007468:	e005      	b.n	8007476 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007474:	bf00      	nop
    }

    if (pclk != 0U)
 8007476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007478:	2b00      	cmp	r3, #0
 800747a:	d028      	beq.n	80074ce <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007480:	4a10      	ldr	r2, [pc, #64]	@ (80074c4 <UART_SetConfig+0x5cc>)
 8007482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007486:	461a      	mov	r2, r3
 8007488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748a:	fbb3 f2f2 	udiv	r2, r3, r2
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	085b      	lsrs	r3, r3, #1
 8007494:	441a      	add	r2, r3
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	fbb2 f3f3 	udiv	r3, r2, r3
 800749e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	2b0f      	cmp	r3, #15
 80074a4:	d910      	bls.n	80074c8 <UART_SetConfig+0x5d0>
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074ac:	d20c      	bcs.n	80074c8 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60da      	str	r2, [r3, #12]
 80074b8:	e009      	b.n	80074ce <UART_SetConfig+0x5d6>
 80074ba:	bf00      	nop
 80074bc:	40008000 	.word	0x40008000
 80074c0:	00f42400 	.word	0x00f42400
 80074c4:	0800da44 	.word	0x0800da44
      }
      else
      {
        ret = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2201      	movs	r2, #1
 80074da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2200      	movs	r2, #0
 80074e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	2200      	movs	r2, #0
 80074e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80074ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3730      	adds	r7, #48	@ 0x30
 80074f2:	46bd      	mov	sp, r7
 80074f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080074f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00a      	beq.n	8007522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00a      	beq.n	8007566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	430a      	orrs	r2, r1
 8007564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00a      	beq.n	8007588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	430a      	orrs	r2, r1
 8007586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758c:	f003 0310 	and.w	r3, r3, #16
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00a      	beq.n	80075aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00a      	beq.n	80075cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d01a      	beq.n	800760e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075f6:	d10a      	bne.n	800760e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	605a      	str	r2, [r3, #4]
  }
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b098      	sub	sp, #96	@ 0x60
 8007640:	af02      	add	r7, sp, #8
 8007642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800764c:	f7fa ff92 	bl	8002574 <HAL_GetTick>
 8007650:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0308 	and.w	r3, r3, #8
 800765c:	2b08      	cmp	r3, #8
 800765e:	d12f      	bne.n	80076c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007660:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007668:	2200      	movs	r2, #0
 800766a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f88e 	bl	8007790 <UART_WaitOnFlagUntilTimeout>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d022      	beq.n	80076c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800768a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800768e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007698:	647b      	str	r3, [r7, #68]	@ 0x44
 800769a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800769e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e6      	bne.n	800767a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2220      	movs	r2, #32
 80076b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e063      	b.n	8007788 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0304 	and.w	r3, r3, #4
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d149      	bne.n	8007762 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076d6:	2200      	movs	r2, #0
 80076d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f857 	bl	8007790 <UART_WaitOnFlagUntilTimeout>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d03c      	beq.n	8007762 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	623b      	str	r3, [r7, #32]
   return(result);
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007706:	633b      	str	r3, [r7, #48]	@ 0x30
 8007708:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800770c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e6      	bne.n	80076e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3308      	adds	r3, #8
 8007720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	e853 3f00 	ldrex	r3, [r3]
 8007728:	60fb      	str	r3, [r7, #12]
   return(result);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f023 0301 	bic.w	r3, r3, #1
 8007730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3308      	adds	r3, #8
 8007738:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800773a:	61fa      	str	r2, [r7, #28]
 800773c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773e:	69b9      	ldr	r1, [r7, #24]
 8007740:	69fa      	ldr	r2, [r7, #28]
 8007742:	e841 2300 	strex	r3, r2, [r1]
 8007746:	617b      	str	r3, [r7, #20]
   return(result);
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1e5      	bne.n	800771a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2220      	movs	r2, #32
 8007752:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e012      	b.n	8007788 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2220      	movs	r2, #32
 8007766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3758      	adds	r7, #88	@ 0x58
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	603b      	str	r3, [r7, #0]
 800779c:	4613      	mov	r3, r2
 800779e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a0:	e04f      	b.n	8007842 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a8:	d04b      	beq.n	8007842 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077aa:	f7fa fee3 	bl	8002574 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d302      	bcc.n	80077c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e04e      	b.n	8007862 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0304 	and.w	r3, r3, #4
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d037      	beq.n	8007842 <UART_WaitOnFlagUntilTimeout+0xb2>
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2b80      	cmp	r3, #128	@ 0x80
 80077d6:	d034      	beq.n	8007842 <UART_WaitOnFlagUntilTimeout+0xb2>
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b40      	cmp	r3, #64	@ 0x40
 80077dc:	d031      	beq.n	8007842 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	f003 0308 	and.w	r3, r3, #8
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	d110      	bne.n	800780e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2208      	movs	r2, #8
 80077f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 f95b 	bl	8007ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2208      	movs	r2, #8
 80077fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e029      	b.n	8007862 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800781c:	d111      	bne.n	8007842 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 f941 	bl	8007ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2220      	movs	r2, #32
 8007832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e00f      	b.n	8007862 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69da      	ldr	r2, [r3, #28]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	4013      	ands	r3, r2
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	429a      	cmp	r2, r3
 8007850:	bf0c      	ite	eq
 8007852:	2301      	moveq	r3, #1
 8007854:	2300      	movne	r3, #0
 8007856:	b2db      	uxtb	r3, r3
 8007858:	461a      	mov	r2, r3
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	429a      	cmp	r2, r3
 800785e:	d0a0      	beq.n	80077a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800786c:	b480      	push	{r7}
 800786e:	b0a3      	sub	sp, #140	@ 0x8c
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	4613      	mov	r3, r2
 8007878:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	88fa      	ldrh	r2, [r7, #6]
 8007884:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	88fa      	ldrh	r2, [r7, #6]
 800788c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800789e:	d10e      	bne.n	80078be <UART_Start_Receive_IT+0x52>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d105      	bne.n	80078b4 <UART_Start_Receive_IT+0x48>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80078ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80078b2:	e02d      	b.n	8007910 <UART_Start_Receive_IT+0xa4>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	22ff      	movs	r2, #255	@ 0xff
 80078b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80078bc:	e028      	b.n	8007910 <UART_Start_Receive_IT+0xa4>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10d      	bne.n	80078e2 <UART_Start_Receive_IT+0x76>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d104      	bne.n	80078d8 <UART_Start_Receive_IT+0x6c>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	22ff      	movs	r2, #255	@ 0xff
 80078d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80078d6:	e01b      	b.n	8007910 <UART_Start_Receive_IT+0xa4>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	227f      	movs	r2, #127	@ 0x7f
 80078dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80078e0:	e016      	b.n	8007910 <UART_Start_Receive_IT+0xa4>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078ea:	d10d      	bne.n	8007908 <UART_Start_Receive_IT+0x9c>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d104      	bne.n	80078fe <UART_Start_Receive_IT+0x92>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	227f      	movs	r2, #127	@ 0x7f
 80078f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80078fc:	e008      	b.n	8007910 <UART_Start_Receive_IT+0xa4>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	223f      	movs	r2, #63	@ 0x3f
 8007902:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007906:	e003      	b.n	8007910 <UART_Start_Receive_IT+0xa4>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2222      	movs	r2, #34	@ 0x22
 800791c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3308      	adds	r3, #8
 8007926:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007930:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007932:	f043 0301 	orr.w	r3, r3, #1
 8007936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3308      	adds	r3, #8
 8007940:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007944:	673a      	str	r2, [r7, #112]	@ 0x70
 8007946:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800794a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007952:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e3      	bne.n	8007920 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800795c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007960:	d14f      	bne.n	8007a02 <UART_Start_Receive_IT+0x196>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007968:	88fa      	ldrh	r2, [r7, #6]
 800796a:	429a      	cmp	r2, r3
 800796c:	d349      	bcc.n	8007a02 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007976:	d107      	bne.n	8007988 <UART_Start_Receive_IT+0x11c>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d103      	bne.n	8007988 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4a47      	ldr	r2, [pc, #284]	@ (8007aa0 <UART_Start_Receive_IT+0x234>)
 8007984:	675a      	str	r2, [r3, #116]	@ 0x74
 8007986:	e002      	b.n	800798e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4a46      	ldr	r2, [pc, #280]	@ (8007aa4 <UART_Start_Receive_IT+0x238>)
 800798c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d01a      	beq.n	80079cc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80079a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80079b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079ba:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80079be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80079c0:	e841 2300 	strex	r3, r2, [r1]
 80079c4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80079c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e4      	bne.n	8007996 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3308      	adds	r3, #8
 80079d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079d6:	e853 3f00 	ldrex	r3, [r3]
 80079da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3308      	adds	r3, #8
 80079ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80079ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 80079ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80079f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079f4:	e841 2300 	strex	r3, r2, [r1]
 80079f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80079fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e5      	bne.n	80079cc <UART_Start_Receive_IT+0x160>
 8007a00:	e046      	b.n	8007a90 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a0a:	d107      	bne.n	8007a1c <UART_Start_Receive_IT+0x1b0>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d103      	bne.n	8007a1c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4a24      	ldr	r2, [pc, #144]	@ (8007aa8 <UART_Start_Receive_IT+0x23c>)
 8007a18:	675a      	str	r2, [r3, #116]	@ 0x74
 8007a1a:	e002      	b.n	8007a22 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4a23      	ldr	r2, [pc, #140]	@ (8007aac <UART_Start_Receive_IT+0x240>)
 8007a20:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d019      	beq.n	8007a5e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007a3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a4a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007a4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e6      	bne.n	8007a2a <UART_Start_Receive_IT+0x1be>
 8007a5c:	e018      	b.n	8007a90 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	f043 0320 	orr.w	r3, r3, #32
 8007a72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a7c:	623b      	str	r3, [r7, #32]
 8007a7e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	69f9      	ldr	r1, [r7, #28]
 8007a82:	6a3a      	ldr	r2, [r7, #32]
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e6      	bne.n	8007a5e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	378c      	adds	r7, #140	@ 0x8c
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	08008319 	.word	0x08008319
 8007aa4:	08007fb9 	.word	0x08007fb9
 8007aa8:	08007e01 	.word	0x08007e01
 8007aac:	08007c49 	.word	0x08007c49

08007ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b095      	sub	sp, #84	@ 0x54
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ad6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ad8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007adc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e6      	bne.n	8007ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3308      	adds	r3, #8
 8007af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b00:	f023 0301 	bic.w	r3, r3, #1
 8007b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3308      	adds	r3, #8
 8007b0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b16:	e841 2300 	strex	r3, r2, [r1]
 8007b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1e3      	bne.n	8007aea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d118      	bne.n	8007b5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f023 0310 	bic.w	r3, r3, #16
 8007b3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b48:	61bb      	str	r3, [r7, #24]
 8007b4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	6979      	ldr	r1, [r7, #20]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	613b      	str	r3, [r7, #16]
   return(result);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e6      	bne.n	8007b2a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007b70:	bf00      	nop
 8007b72:	3754      	adds	r7, #84	@ 0x54
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f7ff f98c 	bl	8006eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ba0:	bf00      	nop
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	220f      	movs	r2, #15
 8007bc4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	699a      	ldr	r2, [r3, #24]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f042 0208 	orr.w	r2, r2, #8
 8007bd4:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f7ff f971 	bl	8006ecc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bea:	bf00      	nop
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b088      	sub	sp, #32
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	e853 3f00 	ldrex	r3, [r3]
 8007c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c0e:	61fb      	str	r3, [r7, #28]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	461a      	mov	r2, r3
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	61bb      	str	r3, [r7, #24]
 8007c1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1c:	6979      	ldr	r1, [r7, #20]
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	e841 2300 	strex	r3, r2, [r1]
 8007c24:	613b      	str	r3, [r7, #16]
   return(result);
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1e6      	bne.n	8007bfa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2220      	movs	r2, #32
 8007c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff f932 	bl	8006ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c40:	bf00      	nop
 8007c42:	3720      	adds	r7, #32
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b09c      	sub	sp, #112	@ 0x70
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c56:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c60:	2b22      	cmp	r3, #34	@ 0x22
 8007c62:	f040 80be 	bne.w	8007de2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007c74:	b2d9      	uxtb	r1, r3
 8007c76:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c80:	400a      	ands	r2, r1
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f040 80a1 	bne.w	8007df2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cd0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cd6:	e841 2300 	strex	r3, r2, [r1]
 8007cda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1e6      	bne.n	8007cb0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf4:	f023 0301 	bic.w	r3, r3, #1
 8007cf8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3308      	adds	r3, #8
 8007d00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d02:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d0a:	e841 2300 	strex	r3, r2, [r1]
 8007d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1e5      	bne.n	8007ce2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a33      	ldr	r2, [pc, #204]	@ (8007dfc <UART_RxISR_8BIT+0x1b4>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d01f      	beq.n	8007d74 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d018      	beq.n	8007d74 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4a:	e853 3f00 	ldrex	r3, [r3]
 8007d4e:	623b      	str	r3, [r7, #32]
   return(result);
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d56:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d60:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d68:	e841 2300 	strex	r3, r2, [r1]
 8007d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1e6      	bne.n	8007d42 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d12e      	bne.n	8007dda <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	e853 3f00 	ldrex	r3, [r3]
 8007d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f023 0310 	bic.w	r3, r3, #16
 8007d96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007da0:	61fb      	str	r3, [r7, #28]
 8007da2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da4:	69b9      	ldr	r1, [r7, #24]
 8007da6:	69fa      	ldr	r2, [r7, #28]
 8007da8:	e841 2300 	strex	r3, r2, [r1]
 8007dac:	617b      	str	r3, [r7, #20]
   return(result);
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1e6      	bne.n	8007d82 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	f003 0310 	and.w	r3, r3, #16
 8007dbe:	2b10      	cmp	r3, #16
 8007dc0:	d103      	bne.n	8007dca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2210      	movs	r2, #16
 8007dc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7ff f884 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dd8:	e00b      	b.n	8007df2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7f9 f99a 	bl	8001114 <HAL_UART_RxCpltCallback>
}
 8007de0:	e007      	b.n	8007df2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	699a      	ldr	r2, [r3, #24]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f042 0208 	orr.w	r2, r2, #8
 8007df0:	619a      	str	r2, [r3, #24]
}
 8007df2:	bf00      	nop
 8007df4:	3770      	adds	r7, #112	@ 0x70
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	40008000 	.word	0x40008000

08007e00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b09c      	sub	sp, #112	@ 0x70
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e0e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e18:	2b22      	cmp	r3, #34	@ 0x22
 8007e1a:	f040 80be 	bne.w	8007f9a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e2e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007e32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007e36:	4013      	ands	r3, r2
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e42:	1c9a      	adds	r2, r3, #2
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	3b01      	subs	r3, #1
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f040 80a1 	bne.w	8007faa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007e76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e86:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e88:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007e8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e6      	bne.n	8007e68 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3308      	adds	r3, #8
 8007ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eac:	f023 0301 	bic.w	r3, r3, #1
 8007eb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3308      	adds	r3, #8
 8007eb8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007eba:	643a      	str	r2, [r7, #64]	@ 0x40
 8007ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ec0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e5      	bne.n	8007e9a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a33      	ldr	r2, [pc, #204]	@ (8007fb4 <UART_RxISR_16BIT+0x1b4>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d01f      	beq.n	8007f2c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d018      	beq.n	8007f2c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	461a      	mov	r2, r3
 8007f16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f1a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f20:	e841 2300 	strex	r3, r2, [r1]
 8007f24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e6      	bne.n	8007efa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d12e      	bne.n	8007f92 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	f023 0310 	bic.w	r3, r3, #16
 8007f4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	461a      	mov	r2, r3
 8007f56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f58:	61bb      	str	r3, [r7, #24]
 8007f5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5c:	6979      	ldr	r1, [r7, #20]
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	e841 2300 	strex	r3, r2, [r1]
 8007f64:	613b      	str	r3, [r7, #16]
   return(result);
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1e6      	bne.n	8007f3a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	f003 0310 	and.w	r3, r3, #16
 8007f76:	2b10      	cmp	r3, #16
 8007f78:	d103      	bne.n	8007f82 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2210      	movs	r2, #16
 8007f80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7fe ffa8 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f90:	e00b      	b.n	8007faa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7f9 f8be 	bl	8001114 <HAL_UART_RxCpltCallback>
}
 8007f98:	e007      	b.n	8007faa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	699a      	ldr	r2, [r3, #24]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 0208 	orr.w	r2, r2, #8
 8007fa8:	619a      	str	r2, [r3, #24]
}
 8007faa:	bf00      	nop
 8007fac:	3770      	adds	r7, #112	@ 0x70
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	40008000 	.word	0x40008000

08007fb8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b0ac      	sub	sp, #176	@ 0xb0
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007fc6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fee:	2b22      	cmp	r3, #34	@ 0x22
 8007ff0:	f040 8182 	bne.w	80082f8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007ffa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ffe:	e125      	b.n	800824c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008006:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800800a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800800e:	b2d9      	uxtb	r1, r3
 8008010:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008014:	b2da      	uxtb	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800801a:	400a      	ands	r2, r1
 800801c:	b2d2      	uxtb	r2, r2
 800801e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800804a:	f003 0307 	and.w	r3, r3, #7
 800804e:	2b00      	cmp	r3, #0
 8008050:	d053      	beq.n	80080fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d011      	beq.n	8008082 <UART_RxISR_8BIT_FIFOEN+0xca>
 800805e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00b      	beq.n	8008082 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2201      	movs	r2, #1
 8008070:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008078:	f043 0201 	orr.w	r2, r3, #1
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d011      	beq.n	80080b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800808e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00b      	beq.n	80080b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2202      	movs	r2, #2
 80080a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080a8:	f043 0204 	orr.w	r2, r3, #4
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080b6:	f003 0304 	and.w	r3, r3, #4
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d011      	beq.n	80080e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80080be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00b      	beq.n	80080e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2204      	movs	r2, #4
 80080d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080d8:	f043 0202 	orr.w	r2, r3, #2
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d006      	beq.n	80080fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7fe fee3 	bl	8006eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008100:	b29b      	uxth	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	f040 80a2 	bne.w	800824c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008110:	e853 3f00 	ldrex	r3, [r3]
 8008114:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008118:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800811c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	461a      	mov	r2, r3
 8008126:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800812a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800812c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008130:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008138:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e4      	bne.n	8008108 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3308      	adds	r3, #8
 8008144:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800814e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008150:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008154:	f023 0301 	bic.w	r3, r3, #1
 8008158:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3308      	adds	r3, #8
 8008162:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008166:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008168:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800816c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008174:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e1      	bne.n	800813e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2220      	movs	r2, #32
 800817e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a5f      	ldr	r2, [pc, #380]	@ (8008310 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d021      	beq.n	80081dc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d01a      	beq.n	80081dc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081ae:	e853 3f00 	ldrex	r3, [r3]
 80081b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80081b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80081c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80081ca:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80081ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80081d0:	e841 2300 	strex	r3, r2, [r1]
 80081d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80081d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e4      	bne.n	80081a6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d130      	bne.n	8008246 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f2:	e853 3f00 	ldrex	r3, [r3]
 80081f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fa:	f023 0310 	bic.w	r3, r3, #16
 80081fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800820c:	643b      	str	r3, [r7, #64]	@ 0x40
 800820e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008212:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008214:	e841 2300 	strex	r3, r2, [r1]
 8008218:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800821a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e4      	bne.n	80081ea <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	f003 0310 	and.w	r3, r3, #16
 800822a:	2b10      	cmp	r3, #16
 800822c:	d103      	bne.n	8008236 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2210      	movs	r2, #16
 8008234:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7fe fe4e 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
 8008244:	e002      	b.n	800824c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7f8 ff64 	bl	8001114 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800824c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008250:	2b00      	cmp	r3, #0
 8008252:	d006      	beq.n	8008262 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008258:	f003 0320 	and.w	r3, r3, #32
 800825c:	2b00      	cmp	r3, #0
 800825e:	f47f aecf 	bne.w	8008000 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008268:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800826c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008270:	2b00      	cmp	r3, #0
 8008272:	d049      	beq.n	8008308 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800827a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800827e:	429a      	cmp	r2, r3
 8008280:	d242      	bcs.n	8008308 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3308      	adds	r3, #8
 8008288:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	61fb      	str	r3, [r7, #28]
   return(result);
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3308      	adds	r3, #8
 80082a2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80082a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e3      	bne.n	8008282 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a15      	ldr	r2, [pc, #84]	@ (8008314 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80082be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	f043 0320 	orr.w	r3, r3, #32
 80082d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	461a      	mov	r2, r3
 80082de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80082e2:	61bb      	str	r3, [r7, #24]
 80082e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e6:	6979      	ldr	r1, [r7, #20]
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	e841 2300 	strex	r3, r2, [r1]
 80082ee:	613b      	str	r3, [r7, #16]
   return(result);
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e4      	bne.n	80082c0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082f6:	e007      	b.n	8008308 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	699a      	ldr	r2, [r3, #24]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f042 0208 	orr.w	r2, r2, #8
 8008306:	619a      	str	r2, [r3, #24]
}
 8008308:	bf00      	nop
 800830a:	37b0      	adds	r7, #176	@ 0xb0
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	40008000 	.word	0x40008000
 8008314:	08007c49 	.word	0x08007c49

08008318 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b0ae      	sub	sp, #184	@ 0xb8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008326:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800834e:	2b22      	cmp	r3, #34	@ 0x22
 8008350:	f040 8186 	bne.w	8008660 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800835a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800835e:	e129      	b.n	80085b4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008366:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800836e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008372:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008376:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800837a:	4013      	ands	r3, r2
 800837c:	b29a      	uxth	r2, r3
 800837e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008382:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008388:	1c9a      	adds	r2, r3, #2
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008394:	b29b      	uxth	r3, r3
 8008396:	3b01      	subs	r3, #1
 8008398:	b29a      	uxth	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80083aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083ae:	f003 0307 	and.w	r3, r3, #7
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d053      	beq.n	800845e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d011      	beq.n	80083e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80083c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00b      	beq.n	80083e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2201      	movs	r2, #1
 80083d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083dc:	f043 0201 	orr.w	r2, r3, #1
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d011      	beq.n	8008416 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80083f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00b      	beq.n	8008416 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2202      	movs	r2, #2
 8008404:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800840c:	f043 0204 	orr.w	r2, r3, #4
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008416:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800841a:	f003 0304 	and.w	r3, r3, #4
 800841e:	2b00      	cmp	r3, #0
 8008420:	d011      	beq.n	8008446 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00b      	beq.n	8008446 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2204      	movs	r2, #4
 8008434:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800843c:	f043 0202 	orr.w	r2, r3, #2
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800844c:	2b00      	cmp	r3, #0
 800844e:	d006      	beq.n	800845e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7fe fd31 	bl	8006eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008464:	b29b      	uxth	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	f040 80a4 	bne.w	80085b4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800847a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800847c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008480:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800848e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008492:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008496:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800849a:	e841 2300 	strex	r3, r2, [r1]
 800849e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80084a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1e2      	bne.n	800846c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3308      	adds	r3, #8
 80084ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80084b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084bc:	f023 0301 	bic.w	r3, r3, #1
 80084c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3308      	adds	r3, #8
 80084ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80084ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80084d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084d6:	e841 2300 	strex	r3, r2, [r1]
 80084da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80084dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1e1      	bne.n	80084a6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2220      	movs	r2, #32
 80084e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a5f      	ldr	r2, [pc, #380]	@ (8008678 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d021      	beq.n	8008544 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d01a      	beq.n	8008544 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800851c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800851e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008522:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008530:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008532:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008534:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008536:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008538:	e841 2300 	strex	r3, r2, [r1]
 800853c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800853e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e4      	bne.n	800850e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008548:	2b01      	cmp	r3, #1
 800854a:	d130      	bne.n	80085ae <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008562:	f023 0310 	bic.w	r3, r3, #16
 8008566:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008574:	647b      	str	r3, [r7, #68]	@ 0x44
 8008576:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800857a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e4      	bne.n	8008552 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	f003 0310 	and.w	r3, r3, #16
 8008592:	2b10      	cmp	r3, #16
 8008594:	d103      	bne.n	800859e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2210      	movs	r2, #16
 800859c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7fe fc9a 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
 80085ac:	e002      	b.n	80085b4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7f8 fdb0 	bl	8001114 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085b4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d006      	beq.n	80085ca <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80085bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085c0:	f003 0320 	and.w	r3, r3, #32
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f47f aecb 	bne.w	8008360 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085d0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80085d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d049      	beq.n	8008670 <UART_RxISR_16BIT_FIFOEN+0x358>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80085e2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d242      	bcs.n	8008670 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3308      	adds	r3, #8
 80085f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f4:	e853 3f00 	ldrex	r3, [r3]
 80085f8:	623b      	str	r3, [r7, #32]
   return(result);
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3308      	adds	r3, #8
 800860a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800860e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008610:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008616:	e841 2300 	strex	r3, r2, [r1]
 800861a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800861c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1e3      	bne.n	80085ea <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a15      	ldr	r2, [pc, #84]	@ (800867c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008626:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	60fb      	str	r3, [r7, #12]
   return(result);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f043 0320 	orr.w	r3, r3, #32
 800863c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	461a      	mov	r2, r3
 8008646:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800864a:	61fb      	str	r3, [r7, #28]
 800864c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	69b9      	ldr	r1, [r7, #24]
 8008650:	69fa      	ldr	r2, [r7, #28]
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	617b      	str	r3, [r7, #20]
   return(result);
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e4      	bne.n	8008628 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800865e:	e007      	b.n	8008670 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699a      	ldr	r2, [r3, #24]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 0208 	orr.w	r2, r2, #8
 800866e:	619a      	str	r2, [r3, #24]
}
 8008670:	bf00      	nop
 8008672:	37b8      	adds	r7, #184	@ 0xb8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	40008000 	.word	0x40008000
 800867c:	08007e01 	.word	0x08007e01

08008680 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d101      	bne.n	80086d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80086ce:	2302      	movs	r3, #2
 80086d0:	e027      	b.n	8008722 <HAL_UARTEx_DisableFifoMode+0x66>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2224      	movs	r2, #36	@ 0x24
 80086de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f022 0201 	bic.w	r2, r2, #1
 80086f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008700:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2220      	movs	r2, #32
 8008714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b084      	sub	sp, #16
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800873e:	2b01      	cmp	r3, #1
 8008740:	d101      	bne.n	8008746 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008742:	2302      	movs	r3, #2
 8008744:	e02d      	b.n	80087a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2224      	movs	r2, #36	@ 0x24
 8008752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f022 0201 	bic.w	r2, r2, #1
 800876c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	430a      	orrs	r2, r1
 8008780:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f850 	bl	8008828 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2220      	movs	r2, #32
 8008794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d101      	bne.n	80087c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80087be:	2302      	movs	r3, #2
 80087c0:	e02d      	b.n	800881e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2224      	movs	r2, #36	@ 0x24
 80087ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f022 0201 	bic.w	r2, r2, #1
 80087e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	683a      	ldr	r2, [r7, #0]
 80087fa:	430a      	orrs	r2, r1
 80087fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f812 	bl	8008828 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2220      	movs	r2, #32
 8008810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008834:	2b00      	cmp	r3, #0
 8008836:	d108      	bne.n	800884a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008848:	e031      	b.n	80088ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800884a:	2308      	movs	r3, #8
 800884c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800884e:	2308      	movs	r3, #8
 8008850:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	0e5b      	lsrs	r3, r3, #25
 800885a:	b2db      	uxtb	r3, r3
 800885c:	f003 0307 	and.w	r3, r3, #7
 8008860:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	0f5b      	lsrs	r3, r3, #29
 800886a:	b2db      	uxtb	r3, r3
 800886c:	f003 0307 	and.w	r3, r3, #7
 8008870:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008872:	7bbb      	ldrb	r3, [r7, #14]
 8008874:	7b3a      	ldrb	r2, [r7, #12]
 8008876:	4911      	ldr	r1, [pc, #68]	@ (80088bc <UARTEx_SetNbDataToProcess+0x94>)
 8008878:	5c8a      	ldrb	r2, [r1, r2]
 800887a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800887e:	7b3a      	ldrb	r2, [r7, #12]
 8008880:	490f      	ldr	r1, [pc, #60]	@ (80088c0 <UARTEx_SetNbDataToProcess+0x98>)
 8008882:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008884:	fb93 f3f2 	sdiv	r3, r3, r2
 8008888:	b29a      	uxth	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	7b7a      	ldrb	r2, [r7, #13]
 8008894:	4909      	ldr	r1, [pc, #36]	@ (80088bc <UARTEx_SetNbDataToProcess+0x94>)
 8008896:	5c8a      	ldrb	r2, [r1, r2]
 8008898:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800889c:	7b7a      	ldrb	r2, [r7, #13]
 800889e:	4908      	ldr	r1, [pc, #32]	@ (80088c0 <UARTEx_SetNbDataToProcess+0x98>)
 80088a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80088ae:	bf00      	nop
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	0800da5c 	.word	0x0800da5c
 80088c0:	0800da64 	.word	0x0800da64

080088c4 <__cvt>:
 80088c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088c8:	ec57 6b10 	vmov	r6, r7, d0
 80088cc:	2f00      	cmp	r7, #0
 80088ce:	460c      	mov	r4, r1
 80088d0:	4619      	mov	r1, r3
 80088d2:	463b      	mov	r3, r7
 80088d4:	bfb4      	ite	lt
 80088d6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80088da:	2300      	movge	r3, #0
 80088dc:	4691      	mov	r9, r2
 80088de:	bfbf      	itttt	lt
 80088e0:	4632      	movlt	r2, r6
 80088e2:	461f      	movlt	r7, r3
 80088e4:	232d      	movlt	r3, #45	@ 0x2d
 80088e6:	4616      	movlt	r6, r2
 80088e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80088ec:	700b      	strb	r3, [r1, #0]
 80088ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80088f0:	f023 0820 	bic.w	r8, r3, #32
 80088f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80088f8:	d005      	beq.n	8008906 <__cvt+0x42>
 80088fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80088fe:	d100      	bne.n	8008902 <__cvt+0x3e>
 8008900:	3401      	adds	r4, #1
 8008902:	2102      	movs	r1, #2
 8008904:	e000      	b.n	8008908 <__cvt+0x44>
 8008906:	2103      	movs	r1, #3
 8008908:	ab03      	add	r3, sp, #12
 800890a:	4622      	mov	r2, r4
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	ab02      	add	r3, sp, #8
 8008910:	ec47 6b10 	vmov	d0, r6, r7
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	4653      	mov	r3, sl
 8008918:	f001 f922 	bl	8009b60 <_dtoa_r>
 800891c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008920:	4605      	mov	r5, r0
 8008922:	d119      	bne.n	8008958 <__cvt+0x94>
 8008924:	f019 0f01 	tst.w	r9, #1
 8008928:	d00e      	beq.n	8008948 <__cvt+0x84>
 800892a:	eb00 0904 	add.w	r9, r0, r4
 800892e:	2200      	movs	r2, #0
 8008930:	2300      	movs	r3, #0
 8008932:	4630      	mov	r0, r6
 8008934:	4639      	mov	r1, r7
 8008936:	f7f8 f8ab 	bl	8000a90 <__aeabi_dcmpeq>
 800893a:	b108      	cbz	r0, 8008940 <__cvt+0x7c>
 800893c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008940:	2230      	movs	r2, #48	@ 0x30
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	454b      	cmp	r3, r9
 8008946:	d31e      	bcc.n	8008986 <__cvt+0xc2>
 8008948:	9b03      	ldr	r3, [sp, #12]
 800894a:	4628      	mov	r0, r5
 800894c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800894e:	1b5b      	subs	r3, r3, r5
 8008950:	6013      	str	r3, [r2, #0]
 8008952:	b004      	add	sp, #16
 8008954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008958:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800895c:	eb00 0904 	add.w	r9, r0, r4
 8008960:	d1e5      	bne.n	800892e <__cvt+0x6a>
 8008962:	7803      	ldrb	r3, [r0, #0]
 8008964:	2b30      	cmp	r3, #48	@ 0x30
 8008966:	d10a      	bne.n	800897e <__cvt+0xba>
 8008968:	2200      	movs	r2, #0
 800896a:	2300      	movs	r3, #0
 800896c:	4630      	mov	r0, r6
 800896e:	4639      	mov	r1, r7
 8008970:	f7f8 f88e 	bl	8000a90 <__aeabi_dcmpeq>
 8008974:	b918      	cbnz	r0, 800897e <__cvt+0xba>
 8008976:	f1c4 0401 	rsb	r4, r4, #1
 800897a:	f8ca 4000 	str.w	r4, [sl]
 800897e:	f8da 3000 	ldr.w	r3, [sl]
 8008982:	4499      	add	r9, r3
 8008984:	e7d3      	b.n	800892e <__cvt+0x6a>
 8008986:	1c59      	adds	r1, r3, #1
 8008988:	9103      	str	r1, [sp, #12]
 800898a:	701a      	strb	r2, [r3, #0]
 800898c:	e7d9      	b.n	8008942 <__cvt+0x7e>

0800898e <__exponent>:
 800898e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008990:	2900      	cmp	r1, #0
 8008992:	7002      	strb	r2, [r0, #0]
 8008994:	bfba      	itte	lt
 8008996:	4249      	neglt	r1, r1
 8008998:	232d      	movlt	r3, #45	@ 0x2d
 800899a:	232b      	movge	r3, #43	@ 0x2b
 800899c:	2909      	cmp	r1, #9
 800899e:	7043      	strb	r3, [r0, #1]
 80089a0:	dd28      	ble.n	80089f4 <__exponent+0x66>
 80089a2:	f10d 0307 	add.w	r3, sp, #7
 80089a6:	270a      	movs	r7, #10
 80089a8:	461d      	mov	r5, r3
 80089aa:	461a      	mov	r2, r3
 80089ac:	3b01      	subs	r3, #1
 80089ae:	fbb1 f6f7 	udiv	r6, r1, r7
 80089b2:	fb07 1416 	mls	r4, r7, r6, r1
 80089b6:	3430      	adds	r4, #48	@ 0x30
 80089b8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80089bc:	460c      	mov	r4, r1
 80089be:	4631      	mov	r1, r6
 80089c0:	2c63      	cmp	r4, #99	@ 0x63
 80089c2:	dcf2      	bgt.n	80089aa <__exponent+0x1c>
 80089c4:	3130      	adds	r1, #48	@ 0x30
 80089c6:	1e94      	subs	r4, r2, #2
 80089c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80089cc:	1c41      	adds	r1, r0, #1
 80089ce:	4623      	mov	r3, r4
 80089d0:	42ab      	cmp	r3, r5
 80089d2:	d30a      	bcc.n	80089ea <__exponent+0x5c>
 80089d4:	f10d 0309 	add.w	r3, sp, #9
 80089d8:	1a9b      	subs	r3, r3, r2
 80089da:	42ac      	cmp	r4, r5
 80089dc:	bf88      	it	hi
 80089de:	2300      	movhi	r3, #0
 80089e0:	3302      	adds	r3, #2
 80089e2:	4403      	add	r3, r0
 80089e4:	1a18      	subs	r0, r3, r0
 80089e6:	b003      	add	sp, #12
 80089e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ea:	f813 6b01 	ldrb.w	r6, [r3], #1
 80089ee:	f801 6f01 	strb.w	r6, [r1, #1]!
 80089f2:	e7ed      	b.n	80089d0 <__exponent+0x42>
 80089f4:	2330      	movs	r3, #48	@ 0x30
 80089f6:	3130      	adds	r1, #48	@ 0x30
 80089f8:	7083      	strb	r3, [r0, #2]
 80089fa:	1d03      	adds	r3, r0, #4
 80089fc:	70c1      	strb	r1, [r0, #3]
 80089fe:	e7f1      	b.n	80089e4 <__exponent+0x56>

08008a00 <_printf_float>:
 8008a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	b08d      	sub	sp, #52	@ 0x34
 8008a06:	460c      	mov	r4, r1
 8008a08:	4616      	mov	r6, r2
 8008a0a:	461f      	mov	r7, r3
 8008a0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008a10:	4605      	mov	r5, r0
 8008a12:	f000 ff8b 	bl	800992c <_localeconv_r>
 8008a16:	6803      	ldr	r3, [r0, #0]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	f7f7 fc0c 	bl	8000238 <strlen>
 8008a20:	2300      	movs	r3, #0
 8008a22:	9005      	str	r0, [sp, #20]
 8008a24:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a26:	f8d8 3000 	ldr.w	r3, [r8]
 8008a2a:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008a2e:	3307      	adds	r3, #7
 8008a30:	f8d4 b000 	ldr.w	fp, [r4]
 8008a34:	f023 0307 	bic.w	r3, r3, #7
 8008a38:	f103 0208 	add.w	r2, r3, #8
 8008a3c:	f8c8 2000 	str.w	r2, [r8]
 8008a40:	f04f 32ff 	mov.w	r2, #4294967295
 8008a44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008a4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a50:	9307      	str	r3, [sp, #28]
 8008a52:	4b9d      	ldr	r3, [pc, #628]	@ (8008cc8 <_printf_float+0x2c8>)
 8008a54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a58:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008a5c:	f7f8 f84a 	bl	8000af4 <__aeabi_dcmpun>
 8008a60:	bb70      	cbnz	r0, 8008ac0 <_printf_float+0xc0>
 8008a62:	f04f 32ff 	mov.w	r2, #4294967295
 8008a66:	4b98      	ldr	r3, [pc, #608]	@ (8008cc8 <_printf_float+0x2c8>)
 8008a68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a6c:	f7f8 f824 	bl	8000ab8 <__aeabi_dcmple>
 8008a70:	bb30      	cbnz	r0, 8008ac0 <_printf_float+0xc0>
 8008a72:	2200      	movs	r2, #0
 8008a74:	2300      	movs	r3, #0
 8008a76:	4640      	mov	r0, r8
 8008a78:	4649      	mov	r1, r9
 8008a7a:	f7f8 f813 	bl	8000aa4 <__aeabi_dcmplt>
 8008a7e:	b110      	cbz	r0, 8008a86 <_printf_float+0x86>
 8008a80:	232d      	movs	r3, #45	@ 0x2d
 8008a82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a86:	4a91      	ldr	r2, [pc, #580]	@ (8008ccc <_printf_float+0x2cc>)
 8008a88:	4b91      	ldr	r3, [pc, #580]	@ (8008cd0 <_printf_float+0x2d0>)
 8008a8a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008a8e:	bf8c      	ite	hi
 8008a90:	4690      	movhi	r8, r2
 8008a92:	4698      	movls	r8, r3
 8008a94:	2303      	movs	r3, #3
 8008a96:	f04f 0900 	mov.w	r9, #0
 8008a9a:	6123      	str	r3, [r4, #16]
 8008a9c:	f02b 0304 	bic.w	r3, fp, #4
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	4633      	mov	r3, r6
 8008aa4:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	9700      	str	r7, [sp, #0]
 8008aac:	f000 f9d2 	bl	8008e54 <_printf_common>
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	f040 808d 	bne.w	8008bd0 <_printf_float+0x1d0>
 8008ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aba:	b00d      	add	sp, #52	@ 0x34
 8008abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac0:	4642      	mov	r2, r8
 8008ac2:	464b      	mov	r3, r9
 8008ac4:	4640      	mov	r0, r8
 8008ac6:	4649      	mov	r1, r9
 8008ac8:	f7f8 f814 	bl	8000af4 <__aeabi_dcmpun>
 8008acc:	b140      	cbz	r0, 8008ae0 <_printf_float+0xe0>
 8008ace:	464b      	mov	r3, r9
 8008ad0:	4a80      	ldr	r2, [pc, #512]	@ (8008cd4 <_printf_float+0x2d4>)
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	bfbc      	itt	lt
 8008ad6:	232d      	movlt	r3, #45	@ 0x2d
 8008ad8:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008adc:	4b7e      	ldr	r3, [pc, #504]	@ (8008cd8 <_printf_float+0x2d8>)
 8008ade:	e7d4      	b.n	8008a8a <_printf_float+0x8a>
 8008ae0:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008ae4:	6863      	ldr	r3, [r4, #4]
 8008ae6:	9206      	str	r2, [sp, #24]
 8008ae8:	1c5a      	adds	r2, r3, #1
 8008aea:	d13b      	bne.n	8008b64 <_printf_float+0x164>
 8008aec:	2306      	movs	r3, #6
 8008aee:	6063      	str	r3, [r4, #4]
 8008af0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008af4:	2300      	movs	r3, #0
 8008af6:	4628      	mov	r0, r5
 8008af8:	6022      	str	r2, [r4, #0]
 8008afa:	9303      	str	r3, [sp, #12]
 8008afc:	ab0a      	add	r3, sp, #40	@ 0x28
 8008afe:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008b02:	ab09      	add	r3, sp, #36	@ 0x24
 8008b04:	ec49 8b10 	vmov	d0, r8, r9
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008b0e:	6861      	ldr	r1, [r4, #4]
 8008b10:	f7ff fed8 	bl	80088c4 <__cvt>
 8008b14:	9b06      	ldr	r3, [sp, #24]
 8008b16:	4680      	mov	r8, r0
 8008b18:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b1a:	2b47      	cmp	r3, #71	@ 0x47
 8008b1c:	d129      	bne.n	8008b72 <_printf_float+0x172>
 8008b1e:	1cc8      	adds	r0, r1, #3
 8008b20:	db02      	blt.n	8008b28 <_printf_float+0x128>
 8008b22:	6863      	ldr	r3, [r4, #4]
 8008b24:	4299      	cmp	r1, r3
 8008b26:	dd41      	ble.n	8008bac <_printf_float+0x1ac>
 8008b28:	f1aa 0a02 	sub.w	sl, sl, #2
 8008b2c:	fa5f fa8a 	uxtb.w	sl, sl
 8008b30:	3901      	subs	r1, #1
 8008b32:	4652      	mov	r2, sl
 8008b34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008b38:	9109      	str	r1, [sp, #36]	@ 0x24
 8008b3a:	f7ff ff28 	bl	800898e <__exponent>
 8008b3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b40:	4681      	mov	r9, r0
 8008b42:	1813      	adds	r3, r2, r0
 8008b44:	2a01      	cmp	r2, #1
 8008b46:	6123      	str	r3, [r4, #16]
 8008b48:	dc02      	bgt.n	8008b50 <_printf_float+0x150>
 8008b4a:	6822      	ldr	r2, [r4, #0]
 8008b4c:	07d2      	lsls	r2, r2, #31
 8008b4e:	d501      	bpl.n	8008b54 <_printf_float+0x154>
 8008b50:	3301      	adds	r3, #1
 8008b52:	6123      	str	r3, [r4, #16]
 8008b54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d0a2      	beq.n	8008aa2 <_printf_float+0xa2>
 8008b5c:	232d      	movs	r3, #45	@ 0x2d
 8008b5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b62:	e79e      	b.n	8008aa2 <_printf_float+0xa2>
 8008b64:	9a06      	ldr	r2, [sp, #24]
 8008b66:	2a47      	cmp	r2, #71	@ 0x47
 8008b68:	d1c2      	bne.n	8008af0 <_printf_float+0xf0>
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1c0      	bne.n	8008af0 <_printf_float+0xf0>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e7bd      	b.n	8008aee <_printf_float+0xee>
 8008b72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b76:	d9db      	bls.n	8008b30 <_printf_float+0x130>
 8008b78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008b7c:	d118      	bne.n	8008bb0 <_printf_float+0x1b0>
 8008b7e:	2900      	cmp	r1, #0
 8008b80:	6863      	ldr	r3, [r4, #4]
 8008b82:	dd0b      	ble.n	8008b9c <_printf_float+0x19c>
 8008b84:	6121      	str	r1, [r4, #16]
 8008b86:	b913      	cbnz	r3, 8008b8e <_printf_float+0x18e>
 8008b88:	6822      	ldr	r2, [r4, #0]
 8008b8a:	07d0      	lsls	r0, r2, #31
 8008b8c:	d502      	bpl.n	8008b94 <_printf_float+0x194>
 8008b8e:	3301      	adds	r3, #1
 8008b90:	440b      	add	r3, r1
 8008b92:	6123      	str	r3, [r4, #16]
 8008b94:	f04f 0900 	mov.w	r9, #0
 8008b98:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008b9a:	e7db      	b.n	8008b54 <_printf_float+0x154>
 8008b9c:	b913      	cbnz	r3, 8008ba4 <_printf_float+0x1a4>
 8008b9e:	6822      	ldr	r2, [r4, #0]
 8008ba0:	07d2      	lsls	r2, r2, #31
 8008ba2:	d501      	bpl.n	8008ba8 <_printf_float+0x1a8>
 8008ba4:	3302      	adds	r3, #2
 8008ba6:	e7f4      	b.n	8008b92 <_printf_float+0x192>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e7f2      	b.n	8008b92 <_printf_float+0x192>
 8008bac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bb2:	4299      	cmp	r1, r3
 8008bb4:	db05      	blt.n	8008bc2 <_printf_float+0x1c2>
 8008bb6:	6823      	ldr	r3, [r4, #0]
 8008bb8:	6121      	str	r1, [r4, #16]
 8008bba:	07d8      	lsls	r0, r3, #31
 8008bbc:	d5ea      	bpl.n	8008b94 <_printf_float+0x194>
 8008bbe:	1c4b      	adds	r3, r1, #1
 8008bc0:	e7e7      	b.n	8008b92 <_printf_float+0x192>
 8008bc2:	2900      	cmp	r1, #0
 8008bc4:	bfd4      	ite	le
 8008bc6:	f1c1 0202 	rsble	r2, r1, #2
 8008bca:	2201      	movgt	r2, #1
 8008bcc:	4413      	add	r3, r2
 8008bce:	e7e0      	b.n	8008b92 <_printf_float+0x192>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	055a      	lsls	r2, r3, #21
 8008bd4:	d407      	bmi.n	8008be6 <_printf_float+0x1e6>
 8008bd6:	6923      	ldr	r3, [r4, #16]
 8008bd8:	4642      	mov	r2, r8
 8008bda:	4631      	mov	r1, r6
 8008bdc:	4628      	mov	r0, r5
 8008bde:	47b8      	blx	r7
 8008be0:	3001      	adds	r0, #1
 8008be2:	d12b      	bne.n	8008c3c <_printf_float+0x23c>
 8008be4:	e767      	b.n	8008ab6 <_printf_float+0xb6>
 8008be6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008bea:	f240 80dd 	bls.w	8008da8 <_printf_float+0x3a8>
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008bf6:	f7f7 ff4b 	bl	8000a90 <__aeabi_dcmpeq>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d033      	beq.n	8008c66 <_printf_float+0x266>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	4a36      	ldr	r2, [pc, #216]	@ (8008cdc <_printf_float+0x2dc>)
 8008c02:	4631      	mov	r1, r6
 8008c04:	4628      	mov	r0, r5
 8008c06:	47b8      	blx	r7
 8008c08:	3001      	adds	r0, #1
 8008c0a:	f43f af54 	beq.w	8008ab6 <_printf_float+0xb6>
 8008c0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008c12:	4543      	cmp	r3, r8
 8008c14:	db02      	blt.n	8008c1c <_printf_float+0x21c>
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	07d8      	lsls	r0, r3, #31
 8008c1a:	d50f      	bpl.n	8008c3c <_printf_float+0x23c>
 8008c1c:	4631      	mov	r1, r6
 8008c1e:	4628      	mov	r0, r5
 8008c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c24:	47b8      	blx	r7
 8008c26:	3001      	adds	r0, #1
 8008c28:	f43f af45 	beq.w	8008ab6 <_printf_float+0xb6>
 8008c2c:	f04f 0900 	mov.w	r9, #0
 8008c30:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c34:	f104 0a1a 	add.w	sl, r4, #26
 8008c38:	45c8      	cmp	r8, r9
 8008c3a:	dc09      	bgt.n	8008c50 <_printf_float+0x250>
 8008c3c:	6823      	ldr	r3, [r4, #0]
 8008c3e:	079b      	lsls	r3, r3, #30
 8008c40:	f100 8103 	bmi.w	8008e4a <_printf_float+0x44a>
 8008c44:	68e0      	ldr	r0, [r4, #12]
 8008c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c48:	4298      	cmp	r0, r3
 8008c4a:	bfb8      	it	lt
 8008c4c:	4618      	movlt	r0, r3
 8008c4e:	e734      	b.n	8008aba <_printf_float+0xba>
 8008c50:	2301      	movs	r3, #1
 8008c52:	4652      	mov	r2, sl
 8008c54:	4631      	mov	r1, r6
 8008c56:	4628      	mov	r0, r5
 8008c58:	47b8      	blx	r7
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	f43f af2b 	beq.w	8008ab6 <_printf_float+0xb6>
 8008c60:	f109 0901 	add.w	r9, r9, #1
 8008c64:	e7e8      	b.n	8008c38 <_printf_float+0x238>
 8008c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	dc39      	bgt.n	8008ce0 <_printf_float+0x2e0>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	4a1b      	ldr	r2, [pc, #108]	@ (8008cdc <_printf_float+0x2dc>)
 8008c70:	4631      	mov	r1, r6
 8008c72:	4628      	mov	r0, r5
 8008c74:	47b8      	blx	r7
 8008c76:	3001      	adds	r0, #1
 8008c78:	f43f af1d 	beq.w	8008ab6 <_printf_float+0xb6>
 8008c7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008c80:	ea59 0303 	orrs.w	r3, r9, r3
 8008c84:	d102      	bne.n	8008c8c <_printf_float+0x28c>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	07d9      	lsls	r1, r3, #31
 8008c8a:	d5d7      	bpl.n	8008c3c <_printf_float+0x23c>
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	4628      	mov	r0, r5
 8008c90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c94:	47b8      	blx	r7
 8008c96:	3001      	adds	r0, #1
 8008c98:	f43f af0d 	beq.w	8008ab6 <_printf_float+0xb6>
 8008c9c:	f04f 0a00 	mov.w	sl, #0
 8008ca0:	f104 0b1a 	add.w	fp, r4, #26
 8008ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca6:	425b      	negs	r3, r3
 8008ca8:	4553      	cmp	r3, sl
 8008caa:	dc01      	bgt.n	8008cb0 <_printf_float+0x2b0>
 8008cac:	464b      	mov	r3, r9
 8008cae:	e793      	b.n	8008bd8 <_printf_float+0x1d8>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	465a      	mov	r2, fp
 8008cb4:	4631      	mov	r1, r6
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	47b8      	blx	r7
 8008cba:	3001      	adds	r0, #1
 8008cbc:	f43f aefb 	beq.w	8008ab6 <_printf_float+0xb6>
 8008cc0:	f10a 0a01 	add.w	sl, sl, #1
 8008cc4:	e7ee      	b.n	8008ca4 <_printf_float+0x2a4>
 8008cc6:	bf00      	nop
 8008cc8:	7fefffff 	.word	0x7fefffff
 8008ccc:	0800da70 	.word	0x0800da70
 8008cd0:	0800da6c 	.word	0x0800da6c
 8008cd4:	0800da78 	.word	0x0800da78
 8008cd8:	0800da74 	.word	0x0800da74
 8008cdc:	0800dbb2 	.word	0x0800dbb2
 8008ce0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ce2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ce6:	4553      	cmp	r3, sl
 8008ce8:	bfa8      	it	ge
 8008cea:	4653      	movge	r3, sl
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	4699      	mov	r9, r3
 8008cf0:	dc36      	bgt.n	8008d60 <_printf_float+0x360>
 8008cf2:	f04f 0b00 	mov.w	fp, #0
 8008cf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cfa:	f104 021a 	add.w	r2, r4, #26
 8008cfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d00:	9306      	str	r3, [sp, #24]
 8008d02:	eba3 0309 	sub.w	r3, r3, r9
 8008d06:	455b      	cmp	r3, fp
 8008d08:	dc31      	bgt.n	8008d6e <_printf_float+0x36e>
 8008d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d0c:	459a      	cmp	sl, r3
 8008d0e:	dc3a      	bgt.n	8008d86 <_printf_float+0x386>
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	07da      	lsls	r2, r3, #31
 8008d14:	d437      	bmi.n	8008d86 <_printf_float+0x386>
 8008d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d18:	ebaa 0903 	sub.w	r9, sl, r3
 8008d1c:	9b06      	ldr	r3, [sp, #24]
 8008d1e:	ebaa 0303 	sub.w	r3, sl, r3
 8008d22:	4599      	cmp	r9, r3
 8008d24:	bfa8      	it	ge
 8008d26:	4699      	movge	r9, r3
 8008d28:	f1b9 0f00 	cmp.w	r9, #0
 8008d2c:	dc33      	bgt.n	8008d96 <_printf_float+0x396>
 8008d2e:	f04f 0800 	mov.w	r8, #0
 8008d32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d36:	f104 0b1a 	add.w	fp, r4, #26
 8008d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d3c:	ebaa 0303 	sub.w	r3, sl, r3
 8008d40:	eba3 0309 	sub.w	r3, r3, r9
 8008d44:	4543      	cmp	r3, r8
 8008d46:	f77f af79 	ble.w	8008c3c <_printf_float+0x23c>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	465a      	mov	r2, fp
 8008d4e:	4631      	mov	r1, r6
 8008d50:	4628      	mov	r0, r5
 8008d52:	47b8      	blx	r7
 8008d54:	3001      	adds	r0, #1
 8008d56:	f43f aeae 	beq.w	8008ab6 <_printf_float+0xb6>
 8008d5a:	f108 0801 	add.w	r8, r8, #1
 8008d5e:	e7ec      	b.n	8008d3a <_printf_float+0x33a>
 8008d60:	4642      	mov	r2, r8
 8008d62:	4631      	mov	r1, r6
 8008d64:	4628      	mov	r0, r5
 8008d66:	47b8      	blx	r7
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d1c2      	bne.n	8008cf2 <_printf_float+0x2f2>
 8008d6c:	e6a3      	b.n	8008ab6 <_printf_float+0xb6>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	4631      	mov	r1, r6
 8008d72:	4628      	mov	r0, r5
 8008d74:	9206      	str	r2, [sp, #24]
 8008d76:	47b8      	blx	r7
 8008d78:	3001      	adds	r0, #1
 8008d7a:	f43f ae9c 	beq.w	8008ab6 <_printf_float+0xb6>
 8008d7e:	f10b 0b01 	add.w	fp, fp, #1
 8008d82:	9a06      	ldr	r2, [sp, #24]
 8008d84:	e7bb      	b.n	8008cfe <_printf_float+0x2fe>
 8008d86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	47b8      	blx	r7
 8008d90:	3001      	adds	r0, #1
 8008d92:	d1c0      	bne.n	8008d16 <_printf_float+0x316>
 8008d94:	e68f      	b.n	8008ab6 <_printf_float+0xb6>
 8008d96:	9a06      	ldr	r2, [sp, #24]
 8008d98:	464b      	mov	r3, r9
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	4442      	add	r2, r8
 8008da0:	47b8      	blx	r7
 8008da2:	3001      	adds	r0, #1
 8008da4:	d1c3      	bne.n	8008d2e <_printf_float+0x32e>
 8008da6:	e686      	b.n	8008ab6 <_printf_float+0xb6>
 8008da8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008dac:	f1ba 0f01 	cmp.w	sl, #1
 8008db0:	dc01      	bgt.n	8008db6 <_printf_float+0x3b6>
 8008db2:	07db      	lsls	r3, r3, #31
 8008db4:	d536      	bpl.n	8008e24 <_printf_float+0x424>
 8008db6:	2301      	movs	r3, #1
 8008db8:	4642      	mov	r2, r8
 8008dba:	4631      	mov	r1, r6
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	47b8      	blx	r7
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	f43f ae78 	beq.w	8008ab6 <_printf_float+0xb6>
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	4628      	mov	r0, r5
 8008dca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dce:	47b8      	blx	r7
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	f43f ae70 	beq.w	8008ab6 <_printf_float+0xb6>
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008de2:	f7f7 fe55 	bl	8000a90 <__aeabi_dcmpeq>
 8008de6:	b9c0      	cbnz	r0, 8008e1a <_printf_float+0x41a>
 8008de8:	4653      	mov	r3, sl
 8008dea:	f108 0201 	add.w	r2, r8, #1
 8008dee:	4631      	mov	r1, r6
 8008df0:	4628      	mov	r0, r5
 8008df2:	47b8      	blx	r7
 8008df4:	3001      	adds	r0, #1
 8008df6:	d10c      	bne.n	8008e12 <_printf_float+0x412>
 8008df8:	e65d      	b.n	8008ab6 <_printf_float+0xb6>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	465a      	mov	r2, fp
 8008dfe:	4631      	mov	r1, r6
 8008e00:	4628      	mov	r0, r5
 8008e02:	47b8      	blx	r7
 8008e04:	3001      	adds	r0, #1
 8008e06:	f43f ae56 	beq.w	8008ab6 <_printf_float+0xb6>
 8008e0a:	f108 0801 	add.w	r8, r8, #1
 8008e0e:	45d0      	cmp	r8, sl
 8008e10:	dbf3      	blt.n	8008dfa <_printf_float+0x3fa>
 8008e12:	464b      	mov	r3, r9
 8008e14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008e18:	e6df      	b.n	8008bda <_printf_float+0x1da>
 8008e1a:	f04f 0800 	mov.w	r8, #0
 8008e1e:	f104 0b1a 	add.w	fp, r4, #26
 8008e22:	e7f4      	b.n	8008e0e <_printf_float+0x40e>
 8008e24:	2301      	movs	r3, #1
 8008e26:	4642      	mov	r2, r8
 8008e28:	e7e1      	b.n	8008dee <_printf_float+0x3ee>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	464a      	mov	r2, r9
 8008e2e:	4631      	mov	r1, r6
 8008e30:	4628      	mov	r0, r5
 8008e32:	47b8      	blx	r7
 8008e34:	3001      	adds	r0, #1
 8008e36:	f43f ae3e 	beq.w	8008ab6 <_printf_float+0xb6>
 8008e3a:	f108 0801 	add.w	r8, r8, #1
 8008e3e:	68e3      	ldr	r3, [r4, #12]
 8008e40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e42:	1a5b      	subs	r3, r3, r1
 8008e44:	4543      	cmp	r3, r8
 8008e46:	dcf0      	bgt.n	8008e2a <_printf_float+0x42a>
 8008e48:	e6fc      	b.n	8008c44 <_printf_float+0x244>
 8008e4a:	f04f 0800 	mov.w	r8, #0
 8008e4e:	f104 0919 	add.w	r9, r4, #25
 8008e52:	e7f4      	b.n	8008e3e <_printf_float+0x43e>

08008e54 <_printf_common>:
 8008e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e58:	4616      	mov	r6, r2
 8008e5a:	4698      	mov	r8, r3
 8008e5c:	688a      	ldr	r2, [r1, #8]
 8008e5e:	4607      	mov	r7, r0
 8008e60:	690b      	ldr	r3, [r1, #16]
 8008e62:	460c      	mov	r4, r1
 8008e64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	bfb8      	it	lt
 8008e6c:	4613      	movlt	r3, r2
 8008e6e:	6033      	str	r3, [r6, #0]
 8008e70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e74:	b10a      	cbz	r2, 8008e7a <_printf_common+0x26>
 8008e76:	3301      	adds	r3, #1
 8008e78:	6033      	str	r3, [r6, #0]
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	0699      	lsls	r1, r3, #26
 8008e7e:	bf42      	ittt	mi
 8008e80:	6833      	ldrmi	r3, [r6, #0]
 8008e82:	3302      	addmi	r3, #2
 8008e84:	6033      	strmi	r3, [r6, #0]
 8008e86:	6825      	ldr	r5, [r4, #0]
 8008e88:	f015 0506 	ands.w	r5, r5, #6
 8008e8c:	d106      	bne.n	8008e9c <_printf_common+0x48>
 8008e8e:	f104 0a19 	add.w	sl, r4, #25
 8008e92:	68e3      	ldr	r3, [r4, #12]
 8008e94:	6832      	ldr	r2, [r6, #0]
 8008e96:	1a9b      	subs	r3, r3, r2
 8008e98:	42ab      	cmp	r3, r5
 8008e9a:	dc2b      	bgt.n	8008ef4 <_printf_common+0xa0>
 8008e9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ea0:	6822      	ldr	r2, [r4, #0]
 8008ea2:	3b00      	subs	r3, #0
 8008ea4:	bf18      	it	ne
 8008ea6:	2301      	movne	r3, #1
 8008ea8:	0692      	lsls	r2, r2, #26
 8008eaa:	d430      	bmi.n	8008f0e <_printf_common+0xba>
 8008eac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008eb0:	4641      	mov	r1, r8
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	47c8      	blx	r9
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	d023      	beq.n	8008f02 <_printf_common+0xae>
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	341a      	adds	r4, #26
 8008ebe:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008ec2:	f003 0306 	and.w	r3, r3, #6
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	bf0a      	itet	eq
 8008eca:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8008ece:	2500      	movne	r5, #0
 8008ed0:	6833      	ldreq	r3, [r6, #0]
 8008ed2:	f04f 0600 	mov.w	r6, #0
 8008ed6:	bf08      	it	eq
 8008ed8:	1aed      	subeq	r5, r5, r3
 8008eda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008ede:	bf08      	it	eq
 8008ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	bfc4      	itt	gt
 8008ee8:	1a9b      	subgt	r3, r3, r2
 8008eea:	18ed      	addgt	r5, r5, r3
 8008eec:	42b5      	cmp	r5, r6
 8008eee:	d11a      	bne.n	8008f26 <_printf_common+0xd2>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	e008      	b.n	8008f06 <_printf_common+0xb2>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	4652      	mov	r2, sl
 8008ef8:	4641      	mov	r1, r8
 8008efa:	4638      	mov	r0, r7
 8008efc:	47c8      	blx	r9
 8008efe:	3001      	adds	r0, #1
 8008f00:	d103      	bne.n	8008f0a <_printf_common+0xb6>
 8008f02:	f04f 30ff 	mov.w	r0, #4294967295
 8008f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f0a:	3501      	adds	r5, #1
 8008f0c:	e7c1      	b.n	8008e92 <_printf_common+0x3e>
 8008f0e:	18e1      	adds	r1, r4, r3
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	2030      	movs	r0, #48	@ 0x30
 8008f14:	3302      	adds	r3, #2
 8008f16:	4422      	add	r2, r4
 8008f18:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f24:	e7c2      	b.n	8008eac <_printf_common+0x58>
 8008f26:	2301      	movs	r3, #1
 8008f28:	4622      	mov	r2, r4
 8008f2a:	4641      	mov	r1, r8
 8008f2c:	4638      	mov	r0, r7
 8008f2e:	47c8      	blx	r9
 8008f30:	3001      	adds	r0, #1
 8008f32:	d0e6      	beq.n	8008f02 <_printf_common+0xae>
 8008f34:	3601      	adds	r6, #1
 8008f36:	e7d9      	b.n	8008eec <_printf_common+0x98>

08008f38 <_printf_i>:
 8008f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f3c:	7e0f      	ldrb	r7, [r1, #24]
 8008f3e:	4691      	mov	r9, r2
 8008f40:	4680      	mov	r8, r0
 8008f42:	460c      	mov	r4, r1
 8008f44:	2f78      	cmp	r7, #120	@ 0x78
 8008f46:	469a      	mov	sl, r3
 8008f48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f4e:	d807      	bhi.n	8008f60 <_printf_i+0x28>
 8008f50:	2f62      	cmp	r7, #98	@ 0x62
 8008f52:	d80a      	bhi.n	8008f6a <_printf_i+0x32>
 8008f54:	2f00      	cmp	r7, #0
 8008f56:	f000 80d1 	beq.w	80090fc <_printf_i+0x1c4>
 8008f5a:	2f58      	cmp	r7, #88	@ 0x58
 8008f5c:	f000 80b8 	beq.w	80090d0 <_printf_i+0x198>
 8008f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f68:	e03a      	b.n	8008fe0 <_printf_i+0xa8>
 8008f6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f6e:	2b15      	cmp	r3, #21
 8008f70:	d8f6      	bhi.n	8008f60 <_printf_i+0x28>
 8008f72:	a101      	add	r1, pc, #4	@ (adr r1, 8008f78 <_printf_i+0x40>)
 8008f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f78:	08008fd1 	.word	0x08008fd1
 8008f7c:	08008fe5 	.word	0x08008fe5
 8008f80:	08008f61 	.word	0x08008f61
 8008f84:	08008f61 	.word	0x08008f61
 8008f88:	08008f61 	.word	0x08008f61
 8008f8c:	08008f61 	.word	0x08008f61
 8008f90:	08008fe5 	.word	0x08008fe5
 8008f94:	08008f61 	.word	0x08008f61
 8008f98:	08008f61 	.word	0x08008f61
 8008f9c:	08008f61 	.word	0x08008f61
 8008fa0:	08008f61 	.word	0x08008f61
 8008fa4:	080090e3 	.word	0x080090e3
 8008fa8:	0800900f 	.word	0x0800900f
 8008fac:	0800909d 	.word	0x0800909d
 8008fb0:	08008f61 	.word	0x08008f61
 8008fb4:	08008f61 	.word	0x08008f61
 8008fb8:	08009105 	.word	0x08009105
 8008fbc:	08008f61 	.word	0x08008f61
 8008fc0:	0800900f 	.word	0x0800900f
 8008fc4:	08008f61 	.word	0x08008f61
 8008fc8:	08008f61 	.word	0x08008f61
 8008fcc:	080090a5 	.word	0x080090a5
 8008fd0:	6833      	ldr	r3, [r6, #0]
 8008fd2:	1d1a      	adds	r2, r3, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6032      	str	r2, [r6, #0]
 8008fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e09c      	b.n	800911e <_printf_i+0x1e6>
 8008fe4:	6833      	ldr	r3, [r6, #0]
 8008fe6:	6820      	ldr	r0, [r4, #0]
 8008fe8:	1d19      	adds	r1, r3, #4
 8008fea:	6031      	str	r1, [r6, #0]
 8008fec:	0606      	lsls	r6, r0, #24
 8008fee:	d501      	bpl.n	8008ff4 <_printf_i+0xbc>
 8008ff0:	681d      	ldr	r5, [r3, #0]
 8008ff2:	e003      	b.n	8008ffc <_printf_i+0xc4>
 8008ff4:	0645      	lsls	r5, r0, #25
 8008ff6:	d5fb      	bpl.n	8008ff0 <_printf_i+0xb8>
 8008ff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ffc:	2d00      	cmp	r5, #0
 8008ffe:	da03      	bge.n	8009008 <_printf_i+0xd0>
 8009000:	232d      	movs	r3, #45	@ 0x2d
 8009002:	426d      	negs	r5, r5
 8009004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009008:	4858      	ldr	r0, [pc, #352]	@ (800916c <_printf_i+0x234>)
 800900a:	230a      	movs	r3, #10
 800900c:	e011      	b.n	8009032 <_printf_i+0xfa>
 800900e:	6821      	ldr	r1, [r4, #0]
 8009010:	6833      	ldr	r3, [r6, #0]
 8009012:	0608      	lsls	r0, r1, #24
 8009014:	f853 5b04 	ldr.w	r5, [r3], #4
 8009018:	d402      	bmi.n	8009020 <_printf_i+0xe8>
 800901a:	0649      	lsls	r1, r1, #25
 800901c:	bf48      	it	mi
 800901e:	b2ad      	uxthmi	r5, r5
 8009020:	2f6f      	cmp	r7, #111	@ 0x6f
 8009022:	6033      	str	r3, [r6, #0]
 8009024:	4851      	ldr	r0, [pc, #324]	@ (800916c <_printf_i+0x234>)
 8009026:	bf14      	ite	ne
 8009028:	230a      	movne	r3, #10
 800902a:	2308      	moveq	r3, #8
 800902c:	2100      	movs	r1, #0
 800902e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009032:	6866      	ldr	r6, [r4, #4]
 8009034:	2e00      	cmp	r6, #0
 8009036:	60a6      	str	r6, [r4, #8]
 8009038:	db05      	blt.n	8009046 <_printf_i+0x10e>
 800903a:	6821      	ldr	r1, [r4, #0]
 800903c:	432e      	orrs	r6, r5
 800903e:	f021 0104 	bic.w	r1, r1, #4
 8009042:	6021      	str	r1, [r4, #0]
 8009044:	d04b      	beq.n	80090de <_printf_i+0x1a6>
 8009046:	4616      	mov	r6, r2
 8009048:	fbb5 f1f3 	udiv	r1, r5, r3
 800904c:	fb03 5711 	mls	r7, r3, r1, r5
 8009050:	5dc7      	ldrb	r7, [r0, r7]
 8009052:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009056:	462f      	mov	r7, r5
 8009058:	460d      	mov	r5, r1
 800905a:	42bb      	cmp	r3, r7
 800905c:	d9f4      	bls.n	8009048 <_printf_i+0x110>
 800905e:	2b08      	cmp	r3, #8
 8009060:	d10b      	bne.n	800907a <_printf_i+0x142>
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	07df      	lsls	r7, r3, #31
 8009066:	d508      	bpl.n	800907a <_printf_i+0x142>
 8009068:	6923      	ldr	r3, [r4, #16]
 800906a:	6861      	ldr	r1, [r4, #4]
 800906c:	4299      	cmp	r1, r3
 800906e:	bfde      	ittt	le
 8009070:	2330      	movle	r3, #48	@ 0x30
 8009072:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009076:	f106 36ff 	addle.w	r6, r6, #4294967295
 800907a:	1b92      	subs	r2, r2, r6
 800907c:	6122      	str	r2, [r4, #16]
 800907e:	464b      	mov	r3, r9
 8009080:	aa03      	add	r2, sp, #12
 8009082:	4621      	mov	r1, r4
 8009084:	4640      	mov	r0, r8
 8009086:	f8cd a000 	str.w	sl, [sp]
 800908a:	f7ff fee3 	bl	8008e54 <_printf_common>
 800908e:	3001      	adds	r0, #1
 8009090:	d14a      	bne.n	8009128 <_printf_i+0x1f0>
 8009092:	f04f 30ff 	mov.w	r0, #4294967295
 8009096:	b004      	add	sp, #16
 8009098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	f043 0320 	orr.w	r3, r3, #32
 80090a2:	6023      	str	r3, [r4, #0]
 80090a4:	2778      	movs	r7, #120	@ 0x78
 80090a6:	4832      	ldr	r0, [pc, #200]	@ (8009170 <_printf_i+0x238>)
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80090ae:	061f      	lsls	r7, r3, #24
 80090b0:	6831      	ldr	r1, [r6, #0]
 80090b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80090b6:	d402      	bmi.n	80090be <_printf_i+0x186>
 80090b8:	065f      	lsls	r7, r3, #25
 80090ba:	bf48      	it	mi
 80090bc:	b2ad      	uxthmi	r5, r5
 80090be:	6031      	str	r1, [r6, #0]
 80090c0:	07d9      	lsls	r1, r3, #31
 80090c2:	bf44      	itt	mi
 80090c4:	f043 0320 	orrmi.w	r3, r3, #32
 80090c8:	6023      	strmi	r3, [r4, #0]
 80090ca:	b11d      	cbz	r5, 80090d4 <_printf_i+0x19c>
 80090cc:	2310      	movs	r3, #16
 80090ce:	e7ad      	b.n	800902c <_printf_i+0xf4>
 80090d0:	4826      	ldr	r0, [pc, #152]	@ (800916c <_printf_i+0x234>)
 80090d2:	e7e9      	b.n	80090a8 <_printf_i+0x170>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	f023 0320 	bic.w	r3, r3, #32
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	e7f6      	b.n	80090cc <_printf_i+0x194>
 80090de:	4616      	mov	r6, r2
 80090e0:	e7bd      	b.n	800905e <_printf_i+0x126>
 80090e2:	6833      	ldr	r3, [r6, #0]
 80090e4:	6825      	ldr	r5, [r4, #0]
 80090e6:	1d18      	adds	r0, r3, #4
 80090e8:	6961      	ldr	r1, [r4, #20]
 80090ea:	6030      	str	r0, [r6, #0]
 80090ec:	062e      	lsls	r6, r5, #24
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	d501      	bpl.n	80090f6 <_printf_i+0x1be>
 80090f2:	6019      	str	r1, [r3, #0]
 80090f4:	e002      	b.n	80090fc <_printf_i+0x1c4>
 80090f6:	0668      	lsls	r0, r5, #25
 80090f8:	d5fb      	bpl.n	80090f2 <_printf_i+0x1ba>
 80090fa:	8019      	strh	r1, [r3, #0]
 80090fc:	2300      	movs	r3, #0
 80090fe:	4616      	mov	r6, r2
 8009100:	6123      	str	r3, [r4, #16]
 8009102:	e7bc      	b.n	800907e <_printf_i+0x146>
 8009104:	6833      	ldr	r3, [r6, #0]
 8009106:	2100      	movs	r1, #0
 8009108:	1d1a      	adds	r2, r3, #4
 800910a:	6032      	str	r2, [r6, #0]
 800910c:	681e      	ldr	r6, [r3, #0]
 800910e:	6862      	ldr	r2, [r4, #4]
 8009110:	4630      	mov	r0, r6
 8009112:	f000 fc82 	bl	8009a1a <memchr>
 8009116:	b108      	cbz	r0, 800911c <_printf_i+0x1e4>
 8009118:	1b80      	subs	r0, r0, r6
 800911a:	6060      	str	r0, [r4, #4]
 800911c:	6863      	ldr	r3, [r4, #4]
 800911e:	6123      	str	r3, [r4, #16]
 8009120:	2300      	movs	r3, #0
 8009122:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009126:	e7aa      	b.n	800907e <_printf_i+0x146>
 8009128:	6923      	ldr	r3, [r4, #16]
 800912a:	4632      	mov	r2, r6
 800912c:	4649      	mov	r1, r9
 800912e:	4640      	mov	r0, r8
 8009130:	47d0      	blx	sl
 8009132:	3001      	adds	r0, #1
 8009134:	d0ad      	beq.n	8009092 <_printf_i+0x15a>
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	079b      	lsls	r3, r3, #30
 800913a:	d413      	bmi.n	8009164 <_printf_i+0x22c>
 800913c:	68e0      	ldr	r0, [r4, #12]
 800913e:	9b03      	ldr	r3, [sp, #12]
 8009140:	4298      	cmp	r0, r3
 8009142:	bfb8      	it	lt
 8009144:	4618      	movlt	r0, r3
 8009146:	e7a6      	b.n	8009096 <_printf_i+0x15e>
 8009148:	2301      	movs	r3, #1
 800914a:	4632      	mov	r2, r6
 800914c:	4649      	mov	r1, r9
 800914e:	4640      	mov	r0, r8
 8009150:	47d0      	blx	sl
 8009152:	3001      	adds	r0, #1
 8009154:	d09d      	beq.n	8009092 <_printf_i+0x15a>
 8009156:	3501      	adds	r5, #1
 8009158:	68e3      	ldr	r3, [r4, #12]
 800915a:	9903      	ldr	r1, [sp, #12]
 800915c:	1a5b      	subs	r3, r3, r1
 800915e:	42ab      	cmp	r3, r5
 8009160:	dcf2      	bgt.n	8009148 <_printf_i+0x210>
 8009162:	e7eb      	b.n	800913c <_printf_i+0x204>
 8009164:	2500      	movs	r5, #0
 8009166:	f104 0619 	add.w	r6, r4, #25
 800916a:	e7f5      	b.n	8009158 <_printf_i+0x220>
 800916c:	0800da7c 	.word	0x0800da7c
 8009170:	0800da8d 	.word	0x0800da8d

08009174 <_scanf_float>:
 8009174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009178:	b087      	sub	sp, #28
 800917a:	4691      	mov	r9, r2
 800917c:	4680      	mov	r8, r0
 800917e:	460c      	mov	r4, r1
 8009180:	9303      	str	r3, [sp, #12]
 8009182:	688b      	ldr	r3, [r1, #8]
 8009184:	1e5a      	subs	r2, r3, #1
 8009186:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800918a:	460a      	mov	r2, r1
 800918c:	bf89      	itett	hi
 800918e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009192:	f04f 0b00 	movls.w	fp, #0
 8009196:	eb03 0b05 	addhi.w	fp, r3, r5
 800919a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800919e:	f04f 0500 	mov.w	r5, #0
 80091a2:	bf88      	it	hi
 80091a4:	608b      	strhi	r3, [r1, #8]
 80091a6:	680b      	ldr	r3, [r1, #0]
 80091a8:	46aa      	mov	sl, r5
 80091aa:	462f      	mov	r7, r5
 80091ac:	9502      	str	r5, [sp, #8]
 80091ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80091b2:	f842 3b1c 	str.w	r3, [r2], #28
 80091b6:	4616      	mov	r6, r2
 80091b8:	9201      	str	r2, [sp, #4]
 80091ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80091be:	68a2      	ldr	r2, [r4, #8]
 80091c0:	b15a      	cbz	r2, 80091da <_scanf_float+0x66>
 80091c2:	f8d9 3000 	ldr.w	r3, [r9]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	2b4e      	cmp	r3, #78	@ 0x4e
 80091ca:	d863      	bhi.n	8009294 <_scanf_float+0x120>
 80091cc:	2b40      	cmp	r3, #64	@ 0x40
 80091ce:	d83b      	bhi.n	8009248 <_scanf_float+0xd4>
 80091d0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80091d4:	b2c8      	uxtb	r0, r1
 80091d6:	280e      	cmp	r0, #14
 80091d8:	d939      	bls.n	800924e <_scanf_float+0xda>
 80091da:	b11f      	cbz	r7, 80091e4 <_scanf_float+0x70>
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091e2:	6023      	str	r3, [r4, #0]
 80091e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091e8:	f1ba 0f01 	cmp.w	sl, #1
 80091ec:	f200 8115 	bhi.w	800941a <_scanf_float+0x2a6>
 80091f0:	9b01      	ldr	r3, [sp, #4]
 80091f2:	429e      	cmp	r6, r3
 80091f4:	f200 8106 	bhi.w	8009404 <_scanf_float+0x290>
 80091f8:	2001      	movs	r0, #1
 80091fa:	b007      	add	sp, #28
 80091fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009200:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009204:	2a0d      	cmp	r2, #13
 8009206:	d8e8      	bhi.n	80091da <_scanf_float+0x66>
 8009208:	a101      	add	r1, pc, #4	@ (adr r1, 8009210 <_scanf_float+0x9c>)
 800920a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800920e:	bf00      	nop
 8009210:	08009359 	.word	0x08009359
 8009214:	080091db 	.word	0x080091db
 8009218:	080091db 	.word	0x080091db
 800921c:	080091db 	.word	0x080091db
 8009220:	080093b5 	.word	0x080093b5
 8009224:	0800938f 	.word	0x0800938f
 8009228:	080091db 	.word	0x080091db
 800922c:	080091db 	.word	0x080091db
 8009230:	08009367 	.word	0x08009367
 8009234:	080091db 	.word	0x080091db
 8009238:	080091db 	.word	0x080091db
 800923c:	080091db 	.word	0x080091db
 8009240:	080091db 	.word	0x080091db
 8009244:	08009323 	.word	0x08009323
 8009248:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800924c:	e7da      	b.n	8009204 <_scanf_float+0x90>
 800924e:	290e      	cmp	r1, #14
 8009250:	d8c3      	bhi.n	80091da <_scanf_float+0x66>
 8009252:	a001      	add	r0, pc, #4	@ (adr r0, 8009258 <_scanf_float+0xe4>)
 8009254:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009258:	08009313 	.word	0x08009313
 800925c:	080091db 	.word	0x080091db
 8009260:	08009313 	.word	0x08009313
 8009264:	080093a3 	.word	0x080093a3
 8009268:	080091db 	.word	0x080091db
 800926c:	080092b5 	.word	0x080092b5
 8009270:	080092f9 	.word	0x080092f9
 8009274:	080092f9 	.word	0x080092f9
 8009278:	080092f9 	.word	0x080092f9
 800927c:	080092f9 	.word	0x080092f9
 8009280:	080092f9 	.word	0x080092f9
 8009284:	080092f9 	.word	0x080092f9
 8009288:	080092f9 	.word	0x080092f9
 800928c:	080092f9 	.word	0x080092f9
 8009290:	080092f9 	.word	0x080092f9
 8009294:	2b6e      	cmp	r3, #110	@ 0x6e
 8009296:	d809      	bhi.n	80092ac <_scanf_float+0x138>
 8009298:	2b60      	cmp	r3, #96	@ 0x60
 800929a:	d8b1      	bhi.n	8009200 <_scanf_float+0x8c>
 800929c:	2b54      	cmp	r3, #84	@ 0x54
 800929e:	d07b      	beq.n	8009398 <_scanf_float+0x224>
 80092a0:	2b59      	cmp	r3, #89	@ 0x59
 80092a2:	d19a      	bne.n	80091da <_scanf_float+0x66>
 80092a4:	2d07      	cmp	r5, #7
 80092a6:	d198      	bne.n	80091da <_scanf_float+0x66>
 80092a8:	2508      	movs	r5, #8
 80092aa:	e02f      	b.n	800930c <_scanf_float+0x198>
 80092ac:	2b74      	cmp	r3, #116	@ 0x74
 80092ae:	d073      	beq.n	8009398 <_scanf_float+0x224>
 80092b0:	2b79      	cmp	r3, #121	@ 0x79
 80092b2:	e7f6      	b.n	80092a2 <_scanf_float+0x12e>
 80092b4:	6821      	ldr	r1, [r4, #0]
 80092b6:	05c8      	lsls	r0, r1, #23
 80092b8:	d51e      	bpl.n	80092f8 <_scanf_float+0x184>
 80092ba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80092be:	3701      	adds	r7, #1
 80092c0:	6021      	str	r1, [r4, #0]
 80092c2:	f1bb 0f00 	cmp.w	fp, #0
 80092c6:	d003      	beq.n	80092d0 <_scanf_float+0x15c>
 80092c8:	3201      	adds	r2, #1
 80092ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092ce:	60a2      	str	r2, [r4, #8]
 80092d0:	68a3      	ldr	r3, [r4, #8]
 80092d2:	3b01      	subs	r3, #1
 80092d4:	60a3      	str	r3, [r4, #8]
 80092d6:	6923      	ldr	r3, [r4, #16]
 80092d8:	3301      	adds	r3, #1
 80092da:	6123      	str	r3, [r4, #16]
 80092dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80092e0:	3b01      	subs	r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f8c9 3004 	str.w	r3, [r9, #4]
 80092e8:	f340 8083 	ble.w	80093f2 <_scanf_float+0x27e>
 80092ec:	f8d9 3000 	ldr.w	r3, [r9]
 80092f0:	3301      	adds	r3, #1
 80092f2:	f8c9 3000 	str.w	r3, [r9]
 80092f6:	e762      	b.n	80091be <_scanf_float+0x4a>
 80092f8:	eb1a 0105 	adds.w	r1, sl, r5
 80092fc:	f47f af6d 	bne.w	80091da <_scanf_float+0x66>
 8009300:	6822      	ldr	r2, [r4, #0]
 8009302:	460d      	mov	r5, r1
 8009304:	468a      	mov	sl, r1
 8009306:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800930a:	6022      	str	r2, [r4, #0]
 800930c:	f806 3b01 	strb.w	r3, [r6], #1
 8009310:	e7de      	b.n	80092d0 <_scanf_float+0x15c>
 8009312:	6822      	ldr	r2, [r4, #0]
 8009314:	0610      	lsls	r0, r2, #24
 8009316:	f57f af60 	bpl.w	80091da <_scanf_float+0x66>
 800931a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800931e:	6022      	str	r2, [r4, #0]
 8009320:	e7f4      	b.n	800930c <_scanf_float+0x198>
 8009322:	f1ba 0f00 	cmp.w	sl, #0
 8009326:	d10c      	bne.n	8009342 <_scanf_float+0x1ce>
 8009328:	b977      	cbnz	r7, 8009348 <_scanf_float+0x1d4>
 800932a:	6822      	ldr	r2, [r4, #0]
 800932c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009330:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009334:	d108      	bne.n	8009348 <_scanf_float+0x1d4>
 8009336:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800933a:	f04f 0a01 	mov.w	sl, #1
 800933e:	6022      	str	r2, [r4, #0]
 8009340:	e7e4      	b.n	800930c <_scanf_float+0x198>
 8009342:	f1ba 0f02 	cmp.w	sl, #2
 8009346:	d051      	beq.n	80093ec <_scanf_float+0x278>
 8009348:	2d01      	cmp	r5, #1
 800934a:	d002      	beq.n	8009352 <_scanf_float+0x1de>
 800934c:	2d04      	cmp	r5, #4
 800934e:	f47f af44 	bne.w	80091da <_scanf_float+0x66>
 8009352:	3501      	adds	r5, #1
 8009354:	b2ed      	uxtb	r5, r5
 8009356:	e7d9      	b.n	800930c <_scanf_float+0x198>
 8009358:	f1ba 0f01 	cmp.w	sl, #1
 800935c:	f47f af3d 	bne.w	80091da <_scanf_float+0x66>
 8009360:	f04f 0a02 	mov.w	sl, #2
 8009364:	e7d2      	b.n	800930c <_scanf_float+0x198>
 8009366:	b975      	cbnz	r5, 8009386 <_scanf_float+0x212>
 8009368:	2f00      	cmp	r7, #0
 800936a:	f47f af37 	bne.w	80091dc <_scanf_float+0x68>
 800936e:	6822      	ldr	r2, [r4, #0]
 8009370:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009374:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009378:	f040 8103 	bne.w	8009582 <_scanf_float+0x40e>
 800937c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009380:	2501      	movs	r5, #1
 8009382:	6022      	str	r2, [r4, #0]
 8009384:	e7c2      	b.n	800930c <_scanf_float+0x198>
 8009386:	2d03      	cmp	r5, #3
 8009388:	d0e3      	beq.n	8009352 <_scanf_float+0x1de>
 800938a:	2d05      	cmp	r5, #5
 800938c:	e7df      	b.n	800934e <_scanf_float+0x1da>
 800938e:	2d02      	cmp	r5, #2
 8009390:	f47f af23 	bne.w	80091da <_scanf_float+0x66>
 8009394:	2503      	movs	r5, #3
 8009396:	e7b9      	b.n	800930c <_scanf_float+0x198>
 8009398:	2d06      	cmp	r5, #6
 800939a:	f47f af1e 	bne.w	80091da <_scanf_float+0x66>
 800939e:	2507      	movs	r5, #7
 80093a0:	e7b4      	b.n	800930c <_scanf_float+0x198>
 80093a2:	6822      	ldr	r2, [r4, #0]
 80093a4:	0591      	lsls	r1, r2, #22
 80093a6:	f57f af18 	bpl.w	80091da <_scanf_float+0x66>
 80093aa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80093ae:	9702      	str	r7, [sp, #8]
 80093b0:	6022      	str	r2, [r4, #0]
 80093b2:	e7ab      	b.n	800930c <_scanf_float+0x198>
 80093b4:	6822      	ldr	r2, [r4, #0]
 80093b6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80093ba:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80093be:	d005      	beq.n	80093cc <_scanf_float+0x258>
 80093c0:	0550      	lsls	r0, r2, #21
 80093c2:	f57f af0a 	bpl.w	80091da <_scanf_float+0x66>
 80093c6:	2f00      	cmp	r7, #0
 80093c8:	f000 80db 	beq.w	8009582 <_scanf_float+0x40e>
 80093cc:	0591      	lsls	r1, r2, #22
 80093ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80093d2:	bf58      	it	pl
 80093d4:	9902      	ldrpl	r1, [sp, #8]
 80093d6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80093da:	bf58      	it	pl
 80093dc:	1a79      	subpl	r1, r7, r1
 80093de:	6022      	str	r2, [r4, #0]
 80093e0:	f04f 0700 	mov.w	r7, #0
 80093e4:	bf58      	it	pl
 80093e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80093ea:	e78f      	b.n	800930c <_scanf_float+0x198>
 80093ec:	f04f 0a03 	mov.w	sl, #3
 80093f0:	e78c      	b.n	800930c <_scanf_float+0x198>
 80093f2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80093f6:	4649      	mov	r1, r9
 80093f8:	4640      	mov	r0, r8
 80093fa:	4798      	blx	r3
 80093fc:	2800      	cmp	r0, #0
 80093fe:	f43f aede 	beq.w	80091be <_scanf_float+0x4a>
 8009402:	e6ea      	b.n	80091da <_scanf_float+0x66>
 8009404:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009408:	464a      	mov	r2, r9
 800940a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800940e:	4640      	mov	r0, r8
 8009410:	4798      	blx	r3
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	3b01      	subs	r3, #1
 8009416:	6123      	str	r3, [r4, #16]
 8009418:	e6ea      	b.n	80091f0 <_scanf_float+0x7c>
 800941a:	1e6b      	subs	r3, r5, #1
 800941c:	2b06      	cmp	r3, #6
 800941e:	d824      	bhi.n	800946a <_scanf_float+0x2f6>
 8009420:	2d02      	cmp	r5, #2
 8009422:	d836      	bhi.n	8009492 <_scanf_float+0x31e>
 8009424:	9b01      	ldr	r3, [sp, #4]
 8009426:	429e      	cmp	r6, r3
 8009428:	f67f aee6 	bls.w	80091f8 <_scanf_float+0x84>
 800942c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009430:	464a      	mov	r2, r9
 8009432:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009436:	4640      	mov	r0, r8
 8009438:	4798      	blx	r3
 800943a:	6923      	ldr	r3, [r4, #16]
 800943c:	3b01      	subs	r3, #1
 800943e:	6123      	str	r3, [r4, #16]
 8009440:	e7f0      	b.n	8009424 <_scanf_float+0x2b0>
 8009442:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009446:	464a      	mov	r2, r9
 8009448:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800944c:	4640      	mov	r0, r8
 800944e:	4798      	blx	r3
 8009450:	6923      	ldr	r3, [r4, #16]
 8009452:	3b01      	subs	r3, #1
 8009454:	6123      	str	r3, [r4, #16]
 8009456:	f10a 3aff 	add.w	sl, sl, #4294967295
 800945a:	fa5f fa8a 	uxtb.w	sl, sl
 800945e:	f1ba 0f02 	cmp.w	sl, #2
 8009462:	d1ee      	bne.n	8009442 <_scanf_float+0x2ce>
 8009464:	3d03      	subs	r5, #3
 8009466:	b2ed      	uxtb	r5, r5
 8009468:	1b76      	subs	r6, r6, r5
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	05da      	lsls	r2, r3, #23
 800946e:	d52f      	bpl.n	80094d0 <_scanf_float+0x35c>
 8009470:	055b      	lsls	r3, r3, #21
 8009472:	d511      	bpl.n	8009498 <_scanf_float+0x324>
 8009474:	9b01      	ldr	r3, [sp, #4]
 8009476:	429e      	cmp	r6, r3
 8009478:	f67f aebe 	bls.w	80091f8 <_scanf_float+0x84>
 800947c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009480:	464a      	mov	r2, r9
 8009482:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009486:	4640      	mov	r0, r8
 8009488:	4798      	blx	r3
 800948a:	6923      	ldr	r3, [r4, #16]
 800948c:	3b01      	subs	r3, #1
 800948e:	6123      	str	r3, [r4, #16]
 8009490:	e7f0      	b.n	8009474 <_scanf_float+0x300>
 8009492:	46aa      	mov	sl, r5
 8009494:	46b3      	mov	fp, r6
 8009496:	e7de      	b.n	8009456 <_scanf_float+0x2e2>
 8009498:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800949c:	1e75      	subs	r5, r6, #1
 800949e:	6923      	ldr	r3, [r4, #16]
 80094a0:	2965      	cmp	r1, #101	@ 0x65
 80094a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80094a6:	6123      	str	r3, [r4, #16]
 80094a8:	d00c      	beq.n	80094c4 <_scanf_float+0x350>
 80094aa:	2945      	cmp	r1, #69	@ 0x45
 80094ac:	d00a      	beq.n	80094c4 <_scanf_float+0x350>
 80094ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80094b2:	464a      	mov	r2, r9
 80094b4:	4640      	mov	r0, r8
 80094b6:	1eb5      	subs	r5, r6, #2
 80094b8:	4798      	blx	r3
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80094c0:	3b01      	subs	r3, #1
 80094c2:	6123      	str	r3, [r4, #16]
 80094c4:	462e      	mov	r6, r5
 80094c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80094ca:	464a      	mov	r2, r9
 80094cc:	4640      	mov	r0, r8
 80094ce:	4798      	blx	r3
 80094d0:	6822      	ldr	r2, [r4, #0]
 80094d2:	f012 0210 	ands.w	r2, r2, #16
 80094d6:	d001      	beq.n	80094dc <_scanf_float+0x368>
 80094d8:	2000      	movs	r0, #0
 80094da:	e68e      	b.n	80091fa <_scanf_float+0x86>
 80094dc:	7032      	strb	r2, [r6, #0]
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80094e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094e8:	d125      	bne.n	8009536 <_scanf_float+0x3c2>
 80094ea:	9b02      	ldr	r3, [sp, #8]
 80094ec:	429f      	cmp	r7, r3
 80094ee:	d00a      	beq.n	8009506 <_scanf_float+0x392>
 80094f0:	1bda      	subs	r2, r3, r7
 80094f2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80094f6:	4924      	ldr	r1, [pc, #144]	@ (8009588 <_scanf_float+0x414>)
 80094f8:	429e      	cmp	r6, r3
 80094fa:	bf28      	it	cs
 80094fc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009500:	4630      	mov	r0, r6
 8009502:	f000 f93d 	bl	8009780 <siprintf>
 8009506:	2200      	movs	r2, #0
 8009508:	9901      	ldr	r1, [sp, #4]
 800950a:	4640      	mov	r0, r8
 800950c:	f002 fcb4 	bl	800be78 <_strtod_r>
 8009510:	6821      	ldr	r1, [r4, #0]
 8009512:	9b03      	ldr	r3, [sp, #12]
 8009514:	f011 0f02 	tst.w	r1, #2
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	ec57 6b10 	vmov	r6, r7, d0
 800951e:	f103 0204 	add.w	r2, r3, #4
 8009522:	d015      	beq.n	8009550 <_scanf_float+0x3dc>
 8009524:	9903      	ldr	r1, [sp, #12]
 8009526:	600a      	str	r2, [r1, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	e9c3 6700 	strd	r6, r7, [r3]
 800952e:	68e3      	ldr	r3, [r4, #12]
 8009530:	3301      	adds	r3, #1
 8009532:	60e3      	str	r3, [r4, #12]
 8009534:	e7d0      	b.n	80094d8 <_scanf_float+0x364>
 8009536:	9b04      	ldr	r3, [sp, #16]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d0e4      	beq.n	8009506 <_scanf_float+0x392>
 800953c:	9905      	ldr	r1, [sp, #20]
 800953e:	230a      	movs	r3, #10
 8009540:	4640      	mov	r0, r8
 8009542:	3101      	adds	r1, #1
 8009544:	f002 fd18 	bl	800bf78 <_strtol_r>
 8009548:	9b04      	ldr	r3, [sp, #16]
 800954a:	9e05      	ldr	r6, [sp, #20]
 800954c:	1ac2      	subs	r2, r0, r3
 800954e:	e7d0      	b.n	80094f2 <_scanf_float+0x37e>
 8009550:	f011 0f04 	tst.w	r1, #4
 8009554:	9903      	ldr	r1, [sp, #12]
 8009556:	600a      	str	r2, [r1, #0]
 8009558:	d1e6      	bne.n	8009528 <_scanf_float+0x3b4>
 800955a:	681d      	ldr	r5, [r3, #0]
 800955c:	4632      	mov	r2, r6
 800955e:	463b      	mov	r3, r7
 8009560:	4630      	mov	r0, r6
 8009562:	4639      	mov	r1, r7
 8009564:	f7f7 fac6 	bl	8000af4 <__aeabi_dcmpun>
 8009568:	b128      	cbz	r0, 8009576 <_scanf_float+0x402>
 800956a:	4808      	ldr	r0, [pc, #32]	@ (800958c <_scanf_float+0x418>)
 800956c:	f000 fa64 	bl	8009a38 <nanf>
 8009570:	ed85 0a00 	vstr	s0, [r5]
 8009574:	e7db      	b.n	800952e <_scanf_float+0x3ba>
 8009576:	4630      	mov	r0, r6
 8009578:	4639      	mov	r1, r7
 800957a:	f7f7 fb19 	bl	8000bb0 <__aeabi_d2f>
 800957e:	6028      	str	r0, [r5, #0]
 8009580:	e7d5      	b.n	800952e <_scanf_float+0x3ba>
 8009582:	2700      	movs	r7, #0
 8009584:	e62e      	b.n	80091e4 <_scanf_float+0x70>
 8009586:	bf00      	nop
 8009588:	0800da9e 	.word	0x0800da9e
 800958c:	0800dbfa 	.word	0x0800dbfa

08009590 <std>:
 8009590:	2300      	movs	r3, #0
 8009592:	b510      	push	{r4, lr}
 8009594:	4604      	mov	r4, r0
 8009596:	6083      	str	r3, [r0, #8]
 8009598:	8181      	strh	r1, [r0, #12]
 800959a:	4619      	mov	r1, r3
 800959c:	6643      	str	r3, [r0, #100]	@ 0x64
 800959e:	81c2      	strh	r2, [r0, #14]
 80095a0:	2208      	movs	r2, #8
 80095a2:	6183      	str	r3, [r0, #24]
 80095a4:	e9c0 3300 	strd	r3, r3, [r0]
 80095a8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095ac:	305c      	adds	r0, #92	@ 0x5c
 80095ae:	f000 f97a 	bl	80098a6 <memset>
 80095b2:	4b0d      	ldr	r3, [pc, #52]	@ (80095e8 <std+0x58>)
 80095b4:	6224      	str	r4, [r4, #32]
 80095b6:	6263      	str	r3, [r4, #36]	@ 0x24
 80095b8:	4b0c      	ldr	r3, [pc, #48]	@ (80095ec <std+0x5c>)
 80095ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 80095bc:	4b0c      	ldr	r3, [pc, #48]	@ (80095f0 <std+0x60>)
 80095be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80095c0:	4b0c      	ldr	r3, [pc, #48]	@ (80095f4 <std+0x64>)
 80095c2:	6323      	str	r3, [r4, #48]	@ 0x30
 80095c4:	4b0c      	ldr	r3, [pc, #48]	@ (80095f8 <std+0x68>)
 80095c6:	429c      	cmp	r4, r3
 80095c8:	d006      	beq.n	80095d8 <std+0x48>
 80095ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80095ce:	4294      	cmp	r4, r2
 80095d0:	d002      	beq.n	80095d8 <std+0x48>
 80095d2:	33d0      	adds	r3, #208	@ 0xd0
 80095d4:	429c      	cmp	r4, r3
 80095d6:	d105      	bne.n	80095e4 <std+0x54>
 80095d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80095dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e0:	f000 ba18 	b.w	8009a14 <__retarget_lock_init_recursive>
 80095e4:	bd10      	pop	{r4, pc}
 80095e6:	bf00      	nop
 80095e8:	0800981d 	.word	0x0800981d
 80095ec:	08009843 	.word	0x08009843
 80095f0:	0800987b 	.word	0x0800987b
 80095f4:	0800989f 	.word	0x0800989f
 80095f8:	200003b0 	.word	0x200003b0

080095fc <stdio_exit_handler>:
 80095fc:	4a02      	ldr	r2, [pc, #8]	@ (8009608 <stdio_exit_handler+0xc>)
 80095fe:	4903      	ldr	r1, [pc, #12]	@ (800960c <stdio_exit_handler+0x10>)
 8009600:	4803      	ldr	r0, [pc, #12]	@ (8009610 <stdio_exit_handler+0x14>)
 8009602:	f000 b869 	b.w	80096d8 <_fwalk_sglue>
 8009606:	bf00      	nop
 8009608:	20000010 	.word	0x20000010
 800960c:	0800c96d 	.word	0x0800c96d
 8009610:	20000020 	.word	0x20000020

08009614 <cleanup_stdio>:
 8009614:	6841      	ldr	r1, [r0, #4]
 8009616:	4b0c      	ldr	r3, [pc, #48]	@ (8009648 <cleanup_stdio+0x34>)
 8009618:	4299      	cmp	r1, r3
 800961a:	b510      	push	{r4, lr}
 800961c:	4604      	mov	r4, r0
 800961e:	d001      	beq.n	8009624 <cleanup_stdio+0x10>
 8009620:	f003 f9a4 	bl	800c96c <_fflush_r>
 8009624:	68a1      	ldr	r1, [r4, #8]
 8009626:	4b09      	ldr	r3, [pc, #36]	@ (800964c <cleanup_stdio+0x38>)
 8009628:	4299      	cmp	r1, r3
 800962a:	d002      	beq.n	8009632 <cleanup_stdio+0x1e>
 800962c:	4620      	mov	r0, r4
 800962e:	f003 f99d 	bl	800c96c <_fflush_r>
 8009632:	68e1      	ldr	r1, [r4, #12]
 8009634:	4b06      	ldr	r3, [pc, #24]	@ (8009650 <cleanup_stdio+0x3c>)
 8009636:	4299      	cmp	r1, r3
 8009638:	d004      	beq.n	8009644 <cleanup_stdio+0x30>
 800963a:	4620      	mov	r0, r4
 800963c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009640:	f003 b994 	b.w	800c96c <_fflush_r>
 8009644:	bd10      	pop	{r4, pc}
 8009646:	bf00      	nop
 8009648:	200003b0 	.word	0x200003b0
 800964c:	20000418 	.word	0x20000418
 8009650:	20000480 	.word	0x20000480

08009654 <global_stdio_init.part.0>:
 8009654:	b510      	push	{r4, lr}
 8009656:	4b0b      	ldr	r3, [pc, #44]	@ (8009684 <global_stdio_init.part.0+0x30>)
 8009658:	2104      	movs	r1, #4
 800965a:	4c0b      	ldr	r4, [pc, #44]	@ (8009688 <global_stdio_init.part.0+0x34>)
 800965c:	4a0b      	ldr	r2, [pc, #44]	@ (800968c <global_stdio_init.part.0+0x38>)
 800965e:	4620      	mov	r0, r4
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	2200      	movs	r2, #0
 8009664:	f7ff ff94 	bl	8009590 <std>
 8009668:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800966c:	2201      	movs	r2, #1
 800966e:	2109      	movs	r1, #9
 8009670:	f7ff ff8e 	bl	8009590 <std>
 8009674:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009678:	2202      	movs	r2, #2
 800967a:	2112      	movs	r1, #18
 800967c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009680:	f7ff bf86 	b.w	8009590 <std>
 8009684:	200004e8 	.word	0x200004e8
 8009688:	200003b0 	.word	0x200003b0
 800968c:	080095fd 	.word	0x080095fd

08009690 <__sfp_lock_acquire>:
 8009690:	4801      	ldr	r0, [pc, #4]	@ (8009698 <__sfp_lock_acquire+0x8>)
 8009692:	f000 b9c0 	b.w	8009a16 <__retarget_lock_acquire_recursive>
 8009696:	bf00      	nop
 8009698:	200004f1 	.word	0x200004f1

0800969c <__sfp_lock_release>:
 800969c:	4801      	ldr	r0, [pc, #4]	@ (80096a4 <__sfp_lock_release+0x8>)
 800969e:	f000 b9bb 	b.w	8009a18 <__retarget_lock_release_recursive>
 80096a2:	bf00      	nop
 80096a4:	200004f1 	.word	0x200004f1

080096a8 <__sinit>:
 80096a8:	b510      	push	{r4, lr}
 80096aa:	4604      	mov	r4, r0
 80096ac:	f7ff fff0 	bl	8009690 <__sfp_lock_acquire>
 80096b0:	6a23      	ldr	r3, [r4, #32]
 80096b2:	b11b      	cbz	r3, 80096bc <__sinit+0x14>
 80096b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b8:	f7ff bff0 	b.w	800969c <__sfp_lock_release>
 80096bc:	4b04      	ldr	r3, [pc, #16]	@ (80096d0 <__sinit+0x28>)
 80096be:	6223      	str	r3, [r4, #32]
 80096c0:	4b04      	ldr	r3, [pc, #16]	@ (80096d4 <__sinit+0x2c>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1f5      	bne.n	80096b4 <__sinit+0xc>
 80096c8:	f7ff ffc4 	bl	8009654 <global_stdio_init.part.0>
 80096cc:	e7f2      	b.n	80096b4 <__sinit+0xc>
 80096ce:	bf00      	nop
 80096d0:	08009615 	.word	0x08009615
 80096d4:	200004e8 	.word	0x200004e8

080096d8 <_fwalk_sglue>:
 80096d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096dc:	4607      	mov	r7, r0
 80096de:	4688      	mov	r8, r1
 80096e0:	4614      	mov	r4, r2
 80096e2:	2600      	movs	r6, #0
 80096e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096e8:	f1b9 0901 	subs.w	r9, r9, #1
 80096ec:	d505      	bpl.n	80096fa <_fwalk_sglue+0x22>
 80096ee:	6824      	ldr	r4, [r4, #0]
 80096f0:	2c00      	cmp	r4, #0
 80096f2:	d1f7      	bne.n	80096e4 <_fwalk_sglue+0xc>
 80096f4:	4630      	mov	r0, r6
 80096f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096fa:	89ab      	ldrh	r3, [r5, #12]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d907      	bls.n	8009710 <_fwalk_sglue+0x38>
 8009700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009704:	3301      	adds	r3, #1
 8009706:	d003      	beq.n	8009710 <_fwalk_sglue+0x38>
 8009708:	4629      	mov	r1, r5
 800970a:	4638      	mov	r0, r7
 800970c:	47c0      	blx	r8
 800970e:	4306      	orrs	r6, r0
 8009710:	3568      	adds	r5, #104	@ 0x68
 8009712:	e7e9      	b.n	80096e8 <_fwalk_sglue+0x10>

08009714 <sniprintf>:
 8009714:	b40c      	push	{r2, r3}
 8009716:	4b19      	ldr	r3, [pc, #100]	@ (800977c <sniprintf+0x68>)
 8009718:	b530      	push	{r4, r5, lr}
 800971a:	1e0c      	subs	r4, r1, #0
 800971c:	b09d      	sub	sp, #116	@ 0x74
 800971e:	681d      	ldr	r5, [r3, #0]
 8009720:	da08      	bge.n	8009734 <sniprintf+0x20>
 8009722:	238b      	movs	r3, #139	@ 0x8b
 8009724:	f04f 30ff 	mov.w	r0, #4294967295
 8009728:	602b      	str	r3, [r5, #0]
 800972a:	b01d      	add	sp, #116	@ 0x74
 800972c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009730:	b002      	add	sp, #8
 8009732:	4770      	bx	lr
 8009734:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009738:	9002      	str	r0, [sp, #8]
 800973a:	9006      	str	r0, [sp, #24]
 800973c:	a902      	add	r1, sp, #8
 800973e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009742:	f04f 0300 	mov.w	r3, #0
 8009746:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009748:	4628      	mov	r0, r5
 800974a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800974c:	bf14      	ite	ne
 800974e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009752:	4623      	moveq	r3, r4
 8009754:	9304      	str	r3, [sp, #16]
 8009756:	9307      	str	r3, [sp, #28]
 8009758:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800975c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009760:	ab21      	add	r3, sp, #132	@ 0x84
 8009762:	9301      	str	r3, [sp, #4]
 8009764:	f002 fc66 	bl	800c034 <_svfiprintf_r>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	bfbc      	itt	lt
 800976c:	238b      	movlt	r3, #139	@ 0x8b
 800976e:	602b      	strlt	r3, [r5, #0]
 8009770:	2c00      	cmp	r4, #0
 8009772:	d0da      	beq.n	800972a <sniprintf+0x16>
 8009774:	9b02      	ldr	r3, [sp, #8]
 8009776:	2200      	movs	r2, #0
 8009778:	701a      	strb	r2, [r3, #0]
 800977a:	e7d6      	b.n	800972a <sniprintf+0x16>
 800977c:	2000001c 	.word	0x2000001c

08009780 <siprintf>:
 8009780:	b40e      	push	{r1, r2, r3}
 8009782:	b510      	push	{r4, lr}
 8009784:	b09d      	sub	sp, #116	@ 0x74
 8009786:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800978a:	2400      	movs	r4, #0
 800978c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800978e:	9002      	str	r0, [sp, #8]
 8009790:	9006      	str	r0, [sp, #24]
 8009792:	9107      	str	r1, [sp, #28]
 8009794:	9104      	str	r1, [sp, #16]
 8009796:	4809      	ldr	r0, [pc, #36]	@ (80097bc <siprintf+0x3c>)
 8009798:	4909      	ldr	r1, [pc, #36]	@ (80097c0 <siprintf+0x40>)
 800979a:	f853 2b04 	ldr.w	r2, [r3], #4
 800979e:	9105      	str	r1, [sp, #20]
 80097a0:	a902      	add	r1, sp, #8
 80097a2:	6800      	ldr	r0, [r0, #0]
 80097a4:	9301      	str	r3, [sp, #4]
 80097a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80097a8:	f002 fc44 	bl	800c034 <_svfiprintf_r>
 80097ac:	9b02      	ldr	r3, [sp, #8]
 80097ae:	701c      	strb	r4, [r3, #0]
 80097b0:	b01d      	add	sp, #116	@ 0x74
 80097b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097b6:	b003      	add	sp, #12
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	2000001c 	.word	0x2000001c
 80097c0:	ffff0208 	.word	0xffff0208

080097c4 <siscanf>:
 80097c4:	b40e      	push	{r1, r2, r3}
 80097c6:	b570      	push	{r4, r5, r6, lr}
 80097c8:	b09d      	sub	sp, #116	@ 0x74
 80097ca:	2500      	movs	r5, #0
 80097cc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80097d0:	ac21      	add	r4, sp, #132	@ 0x84
 80097d2:	951b      	str	r5, [sp, #108]	@ 0x6c
 80097d4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80097d8:	f854 6b04 	ldr.w	r6, [r4], #4
 80097dc:	9002      	str	r0, [sp, #8]
 80097de:	9006      	str	r0, [sp, #24]
 80097e0:	f7f6 fd2a 	bl	8000238 <strlen>
 80097e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009814 <siscanf+0x50>)
 80097e6:	4632      	mov	r2, r6
 80097e8:	9003      	str	r0, [sp, #12]
 80097ea:	a902      	add	r1, sp, #8
 80097ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80097f2:	9007      	str	r0, [sp, #28]
 80097f4:	4808      	ldr	r0, [pc, #32]	@ (8009818 <siscanf+0x54>)
 80097f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80097fa:	4623      	mov	r3, r4
 80097fc:	6800      	ldr	r0, [r0, #0]
 80097fe:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009800:	9514      	str	r5, [sp, #80]	@ 0x50
 8009802:	9401      	str	r4, [sp, #4]
 8009804:	f002 fd6c 	bl	800c2e0 <__ssvfiscanf_r>
 8009808:	b01d      	add	sp, #116	@ 0x74
 800980a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800980e:	b003      	add	sp, #12
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	0800983f 	.word	0x0800983f
 8009818:	2000001c 	.word	0x2000001c

0800981c <__sread>:
 800981c:	b510      	push	{r4, lr}
 800981e:	460c      	mov	r4, r1
 8009820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009824:	f000 f8a8 	bl	8009978 <_read_r>
 8009828:	2800      	cmp	r0, #0
 800982a:	bfab      	itete	ge
 800982c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800982e:	89a3      	ldrhlt	r3, [r4, #12]
 8009830:	181b      	addge	r3, r3, r0
 8009832:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009836:	bfac      	ite	ge
 8009838:	6563      	strge	r3, [r4, #84]	@ 0x54
 800983a:	81a3      	strhlt	r3, [r4, #12]
 800983c:	bd10      	pop	{r4, pc}

0800983e <__seofread>:
 800983e:	2000      	movs	r0, #0
 8009840:	4770      	bx	lr

08009842 <__swrite>:
 8009842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009846:	461f      	mov	r7, r3
 8009848:	898b      	ldrh	r3, [r1, #12]
 800984a:	4605      	mov	r5, r0
 800984c:	460c      	mov	r4, r1
 800984e:	05db      	lsls	r3, r3, #23
 8009850:	4616      	mov	r6, r2
 8009852:	d505      	bpl.n	8009860 <__swrite+0x1e>
 8009854:	2302      	movs	r3, #2
 8009856:	2200      	movs	r2, #0
 8009858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800985c:	f000 f87a 	bl	8009954 <_lseek_r>
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	4632      	mov	r2, r6
 8009864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009868:	4628      	mov	r0, r5
 800986a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800986e:	81a3      	strh	r3, [r4, #12]
 8009870:	463b      	mov	r3, r7
 8009872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009876:	f000 b891 	b.w	800999c <_write_r>

0800987a <__sseek>:
 800987a:	b510      	push	{r4, lr}
 800987c:	460c      	mov	r4, r1
 800987e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009882:	f000 f867 	bl	8009954 <_lseek_r>
 8009886:	1c43      	adds	r3, r0, #1
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	bf15      	itete	ne
 800988c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800988e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009892:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009896:	81a3      	strheq	r3, [r4, #12]
 8009898:	bf18      	it	ne
 800989a:	81a3      	strhne	r3, [r4, #12]
 800989c:	bd10      	pop	{r4, pc}

0800989e <__sclose>:
 800989e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a2:	f000 b847 	b.w	8009934 <_close_r>

080098a6 <memset>:
 80098a6:	4402      	add	r2, r0
 80098a8:	4603      	mov	r3, r0
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d100      	bne.n	80098b0 <memset+0xa>
 80098ae:	4770      	bx	lr
 80098b0:	f803 1b01 	strb.w	r1, [r3], #1
 80098b4:	e7f9      	b.n	80098aa <memset+0x4>

080098b6 <strncmp>:
 80098b6:	b510      	push	{r4, lr}
 80098b8:	b16a      	cbz	r2, 80098d6 <strncmp+0x20>
 80098ba:	3901      	subs	r1, #1
 80098bc:	1884      	adds	r4, r0, r2
 80098be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d103      	bne.n	80098d2 <strncmp+0x1c>
 80098ca:	42a0      	cmp	r0, r4
 80098cc:	d001      	beq.n	80098d2 <strncmp+0x1c>
 80098ce:	2a00      	cmp	r2, #0
 80098d0:	d1f5      	bne.n	80098be <strncmp+0x8>
 80098d2:	1ad0      	subs	r0, r2, r3
 80098d4:	bd10      	pop	{r4, pc}
 80098d6:	4610      	mov	r0, r2
 80098d8:	e7fc      	b.n	80098d4 <strncmp+0x1e>

080098da <strncpy>:
 80098da:	3901      	subs	r1, #1
 80098dc:	4603      	mov	r3, r0
 80098de:	b510      	push	{r4, lr}
 80098e0:	b132      	cbz	r2, 80098f0 <strncpy+0x16>
 80098e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80098e6:	3a01      	subs	r2, #1
 80098e8:	f803 4b01 	strb.w	r4, [r3], #1
 80098ec:	2c00      	cmp	r4, #0
 80098ee:	d1f7      	bne.n	80098e0 <strncpy+0x6>
 80098f0:	441a      	add	r2, r3
 80098f2:	2100      	movs	r1, #0
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d100      	bne.n	80098fa <strncpy+0x20>
 80098f8:	bd10      	pop	{r4, pc}
 80098fa:	f803 1b01 	strb.w	r1, [r3], #1
 80098fe:	e7f9      	b.n	80098f4 <strncpy+0x1a>

08009900 <strstr>:
 8009900:	780a      	ldrb	r2, [r1, #0]
 8009902:	b570      	push	{r4, r5, r6, lr}
 8009904:	b96a      	cbnz	r2, 8009922 <strstr+0x22>
 8009906:	bd70      	pop	{r4, r5, r6, pc}
 8009908:	429a      	cmp	r2, r3
 800990a:	d109      	bne.n	8009920 <strstr+0x20>
 800990c:	460c      	mov	r4, r1
 800990e:	4605      	mov	r5, r0
 8009910:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009914:	2b00      	cmp	r3, #0
 8009916:	d0f6      	beq.n	8009906 <strstr+0x6>
 8009918:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800991c:	429e      	cmp	r6, r3
 800991e:	d0f7      	beq.n	8009910 <strstr+0x10>
 8009920:	3001      	adds	r0, #1
 8009922:	7803      	ldrb	r3, [r0, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1ef      	bne.n	8009908 <strstr+0x8>
 8009928:	4618      	mov	r0, r3
 800992a:	e7ec      	b.n	8009906 <strstr+0x6>

0800992c <_localeconv_r>:
 800992c:	4800      	ldr	r0, [pc, #0]	@ (8009930 <_localeconv_r+0x4>)
 800992e:	4770      	bx	lr
 8009930:	2000015c 	.word	0x2000015c

08009934 <_close_r>:
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	2300      	movs	r3, #0
 8009938:	4d05      	ldr	r5, [pc, #20]	@ (8009950 <_close_r+0x1c>)
 800993a:	4604      	mov	r4, r0
 800993c:	4608      	mov	r0, r1
 800993e:	602b      	str	r3, [r5, #0]
 8009940:	f7f8 fad0 	bl	8001ee4 <_close>
 8009944:	1c43      	adds	r3, r0, #1
 8009946:	d102      	bne.n	800994e <_close_r+0x1a>
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	b103      	cbz	r3, 800994e <_close_r+0x1a>
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	200004ec 	.word	0x200004ec

08009954 <_lseek_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4604      	mov	r4, r0
 8009958:	4d06      	ldr	r5, [pc, #24]	@ (8009974 <_lseek_r+0x20>)
 800995a:	4608      	mov	r0, r1
 800995c:	4611      	mov	r1, r2
 800995e:	2200      	movs	r2, #0
 8009960:	602a      	str	r2, [r5, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	f7f8 fae5 	bl	8001f32 <_lseek>
 8009968:	1c43      	adds	r3, r0, #1
 800996a:	d102      	bne.n	8009972 <_lseek_r+0x1e>
 800996c:	682b      	ldr	r3, [r5, #0]
 800996e:	b103      	cbz	r3, 8009972 <_lseek_r+0x1e>
 8009970:	6023      	str	r3, [r4, #0]
 8009972:	bd38      	pop	{r3, r4, r5, pc}
 8009974:	200004ec 	.word	0x200004ec

08009978 <_read_r>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	4604      	mov	r4, r0
 800997c:	4d06      	ldr	r5, [pc, #24]	@ (8009998 <_read_r+0x20>)
 800997e:	4608      	mov	r0, r1
 8009980:	4611      	mov	r1, r2
 8009982:	2200      	movs	r2, #0
 8009984:	602a      	str	r2, [r5, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	f7f8 fa73 	bl	8001e72 <_read>
 800998c:	1c43      	adds	r3, r0, #1
 800998e:	d102      	bne.n	8009996 <_read_r+0x1e>
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	b103      	cbz	r3, 8009996 <_read_r+0x1e>
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	200004ec 	.word	0x200004ec

0800999c <_write_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	4604      	mov	r4, r0
 80099a0:	4d06      	ldr	r5, [pc, #24]	@ (80099bc <_write_r+0x20>)
 80099a2:	4608      	mov	r0, r1
 80099a4:	4611      	mov	r1, r2
 80099a6:	2200      	movs	r2, #0
 80099a8:	602a      	str	r2, [r5, #0]
 80099aa:	461a      	mov	r2, r3
 80099ac:	f7f8 fa7e 	bl	8001eac <_write>
 80099b0:	1c43      	adds	r3, r0, #1
 80099b2:	d102      	bne.n	80099ba <_write_r+0x1e>
 80099b4:	682b      	ldr	r3, [r5, #0]
 80099b6:	b103      	cbz	r3, 80099ba <_write_r+0x1e>
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	bd38      	pop	{r3, r4, r5, pc}
 80099bc:	200004ec 	.word	0x200004ec

080099c0 <__errno>:
 80099c0:	4b01      	ldr	r3, [pc, #4]	@ (80099c8 <__errno+0x8>)
 80099c2:	6818      	ldr	r0, [r3, #0]
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	2000001c 	.word	0x2000001c

080099cc <__libc_init_array>:
 80099cc:	b570      	push	{r4, r5, r6, lr}
 80099ce:	4d0d      	ldr	r5, [pc, #52]	@ (8009a04 <__libc_init_array+0x38>)
 80099d0:	2600      	movs	r6, #0
 80099d2:	4c0d      	ldr	r4, [pc, #52]	@ (8009a08 <__libc_init_array+0x3c>)
 80099d4:	1b64      	subs	r4, r4, r5
 80099d6:	10a4      	asrs	r4, r4, #2
 80099d8:	42a6      	cmp	r6, r4
 80099da:	d109      	bne.n	80099f0 <__libc_init_array+0x24>
 80099dc:	4d0b      	ldr	r5, [pc, #44]	@ (8009a0c <__libc_init_array+0x40>)
 80099de:	2600      	movs	r6, #0
 80099e0:	4c0b      	ldr	r4, [pc, #44]	@ (8009a10 <__libc_init_array+0x44>)
 80099e2:	f003 ff81 	bl	800d8e8 <_init>
 80099e6:	1b64      	subs	r4, r4, r5
 80099e8:	10a4      	asrs	r4, r4, #2
 80099ea:	42a6      	cmp	r6, r4
 80099ec:	d105      	bne.n	80099fa <__libc_init_array+0x2e>
 80099ee:	bd70      	pop	{r4, r5, r6, pc}
 80099f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099f4:	3601      	adds	r6, #1
 80099f6:	4798      	blx	r3
 80099f8:	e7ee      	b.n	80099d8 <__libc_init_array+0xc>
 80099fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80099fe:	3601      	adds	r6, #1
 8009a00:	4798      	blx	r3
 8009a02:	e7f2      	b.n	80099ea <__libc_init_array+0x1e>
 8009a04:	0800deb4 	.word	0x0800deb4
 8009a08:	0800deb4 	.word	0x0800deb4
 8009a0c:	0800deb4 	.word	0x0800deb4
 8009a10:	0800deb8 	.word	0x0800deb8

08009a14 <__retarget_lock_init_recursive>:
 8009a14:	4770      	bx	lr

08009a16 <__retarget_lock_acquire_recursive>:
 8009a16:	4770      	bx	lr

08009a18 <__retarget_lock_release_recursive>:
 8009a18:	4770      	bx	lr

08009a1a <memchr>:
 8009a1a:	b2c9      	uxtb	r1, r1
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	4402      	add	r2, r0
 8009a20:	b510      	push	{r4, lr}
 8009a22:	4293      	cmp	r3, r2
 8009a24:	4618      	mov	r0, r3
 8009a26:	d101      	bne.n	8009a2c <memchr+0x12>
 8009a28:	2000      	movs	r0, #0
 8009a2a:	e003      	b.n	8009a34 <memchr+0x1a>
 8009a2c:	7804      	ldrb	r4, [r0, #0]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	428c      	cmp	r4, r1
 8009a32:	d1f6      	bne.n	8009a22 <memchr+0x8>
 8009a34:	bd10      	pop	{r4, pc}
	...

08009a38 <nanf>:
 8009a38:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009a40 <nanf+0x8>
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	7fc00000 	.word	0x7fc00000

08009a44 <quorem>:
 8009a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a48:	6903      	ldr	r3, [r0, #16]
 8009a4a:	4607      	mov	r7, r0
 8009a4c:	690c      	ldr	r4, [r1, #16]
 8009a4e:	42a3      	cmp	r3, r4
 8009a50:	f2c0 8083 	blt.w	8009b5a <quorem+0x116>
 8009a54:	3c01      	subs	r4, #1
 8009a56:	f100 0514 	add.w	r5, r0, #20
 8009a5a:	f101 0814 	add.w	r8, r1, #20
 8009a5e:	00a3      	lsls	r3, r4, #2
 8009a60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a6e:	9301      	str	r3, [sp, #4]
 8009a70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a74:	3301      	adds	r3, #1
 8009a76:	429a      	cmp	r2, r3
 8009a78:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a7c:	d331      	bcc.n	8009ae2 <quorem+0x9e>
 8009a7e:	f04f 0a00 	mov.w	sl, #0
 8009a82:	46c4      	mov	ip, r8
 8009a84:	46ae      	mov	lr, r5
 8009a86:	46d3      	mov	fp, sl
 8009a88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009a8c:	b298      	uxth	r0, r3
 8009a8e:	45e1      	cmp	r9, ip
 8009a90:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009a94:	fb06 a000 	mla	r0, r6, r0, sl
 8009a98:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8009a9c:	b280      	uxth	r0, r0
 8009a9e:	fb06 2303 	mla	r3, r6, r3, r2
 8009aa2:	f8de 2000 	ldr.w	r2, [lr]
 8009aa6:	b292      	uxth	r2, r2
 8009aa8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009aac:	eba2 0200 	sub.w	r2, r2, r0
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	f8de 0000 	ldr.w	r0, [lr]
 8009ab6:	445a      	add	r2, fp
 8009ab8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009abc:	b292      	uxth	r2, r2
 8009abe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009ac2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009ac6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009aca:	f84e 2b04 	str.w	r2, [lr], #4
 8009ace:	d2db      	bcs.n	8009a88 <quorem+0x44>
 8009ad0:	9b00      	ldr	r3, [sp, #0]
 8009ad2:	58eb      	ldr	r3, [r5, r3]
 8009ad4:	b92b      	cbnz	r3, 8009ae2 <quorem+0x9e>
 8009ad6:	9b01      	ldr	r3, [sp, #4]
 8009ad8:	3b04      	subs	r3, #4
 8009ada:	429d      	cmp	r5, r3
 8009adc:	461a      	mov	r2, r3
 8009ade:	d330      	bcc.n	8009b42 <quorem+0xfe>
 8009ae0:	613c      	str	r4, [r7, #16]
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	f001 f9ce 	bl	800ae84 <__mcmp>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	db26      	blt.n	8009b3a <quorem+0xf6>
 8009aec:	4629      	mov	r1, r5
 8009aee:	2000      	movs	r0, #0
 8009af0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009af4:	f8d1 c000 	ldr.w	ip, [r1]
 8009af8:	fa1f fe82 	uxth.w	lr, r2
 8009afc:	45c1      	cmp	r9, r8
 8009afe:	fa1f f38c 	uxth.w	r3, ip
 8009b02:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8009b06:	eba3 030e 	sub.w	r3, r3, lr
 8009b0a:	4403      	add	r3, r0
 8009b0c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009b1e:	f841 3b04 	str.w	r3, [r1], #4
 8009b22:	d2e5      	bcs.n	8009af0 <quorem+0xac>
 8009b24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b2c:	b922      	cbnz	r2, 8009b38 <quorem+0xf4>
 8009b2e:	3b04      	subs	r3, #4
 8009b30:	429d      	cmp	r5, r3
 8009b32:	461a      	mov	r2, r3
 8009b34:	d30b      	bcc.n	8009b4e <quorem+0x10a>
 8009b36:	613c      	str	r4, [r7, #16]
 8009b38:	3601      	adds	r6, #1
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	b003      	add	sp, #12
 8009b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b42:	6812      	ldr	r2, [r2, #0]
 8009b44:	3b04      	subs	r3, #4
 8009b46:	2a00      	cmp	r2, #0
 8009b48:	d1ca      	bne.n	8009ae0 <quorem+0x9c>
 8009b4a:	3c01      	subs	r4, #1
 8009b4c:	e7c5      	b.n	8009ada <quorem+0x96>
 8009b4e:	6812      	ldr	r2, [r2, #0]
 8009b50:	3b04      	subs	r3, #4
 8009b52:	2a00      	cmp	r2, #0
 8009b54:	d1ef      	bne.n	8009b36 <quorem+0xf2>
 8009b56:	3c01      	subs	r4, #1
 8009b58:	e7ea      	b.n	8009b30 <quorem+0xec>
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	e7ee      	b.n	8009b3c <quorem+0xf8>
	...

08009b60 <_dtoa_r>:
 8009b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	69c7      	ldr	r7, [r0, #28]
 8009b66:	b097      	sub	sp, #92	@ 0x5c
 8009b68:	4681      	mov	r9, r0
 8009b6a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009b6c:	9107      	str	r1, [sp, #28]
 8009b6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009b70:	9311      	str	r3, [sp, #68]	@ 0x44
 8009b72:	ec55 4b10 	vmov	r4, r5, d0
 8009b76:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009b7a:	b97f      	cbnz	r7, 8009b9c <_dtoa_r+0x3c>
 8009b7c:	2010      	movs	r0, #16
 8009b7e:	f000 fe0b 	bl	800a798 <malloc>
 8009b82:	4602      	mov	r2, r0
 8009b84:	f8c9 001c 	str.w	r0, [r9, #28]
 8009b88:	b920      	cbnz	r0, 8009b94 <_dtoa_r+0x34>
 8009b8a:	4ba9      	ldr	r3, [pc, #676]	@ (8009e30 <_dtoa_r+0x2d0>)
 8009b8c:	21ef      	movs	r1, #239	@ 0xef
 8009b8e:	48a9      	ldr	r0, [pc, #676]	@ (8009e34 <_dtoa_r+0x2d4>)
 8009b90:	f002 ffc6 	bl	800cb20 <__assert_func>
 8009b94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009b98:	6007      	str	r7, [r0, #0]
 8009b9a:	60c7      	str	r7, [r0, #12]
 8009b9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009ba0:	6819      	ldr	r1, [r3, #0]
 8009ba2:	b159      	cbz	r1, 8009bbc <_dtoa_r+0x5c>
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4648      	mov	r0, r9
 8009baa:	4093      	lsls	r3, r2
 8009bac:	604a      	str	r2, [r1, #4]
 8009bae:	608b      	str	r3, [r1, #8]
 8009bb0:	f000 fee8 	bl	800a984 <_Bfree>
 8009bb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]
 8009bbc:	1e2b      	subs	r3, r5, #0
 8009bbe:	bfb7      	itett	lt
 8009bc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009bc4:	2300      	movge	r3, #0
 8009bc6:	2201      	movlt	r2, #1
 8009bc8:	9305      	strlt	r3, [sp, #20]
 8009bca:	bfa8      	it	ge
 8009bcc:	6033      	strge	r3, [r6, #0]
 8009bce:	9f05      	ldr	r7, [sp, #20]
 8009bd0:	4b99      	ldr	r3, [pc, #612]	@ (8009e38 <_dtoa_r+0x2d8>)
 8009bd2:	bfb8      	it	lt
 8009bd4:	6032      	strlt	r2, [r6, #0]
 8009bd6:	43bb      	bics	r3, r7
 8009bd8:	d112      	bne.n	8009c00 <_dtoa_r+0xa0>
 8009bda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009bde:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009be6:	4323      	orrs	r3, r4
 8009be8:	f000 855a 	beq.w	800a6a0 <_dtoa_r+0xb40>
 8009bec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009bee:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009e4c <_dtoa_r+0x2ec>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 855c 	beq.w	800a6b0 <_dtoa_r+0xb50>
 8009bf8:	f10a 0303 	add.w	r3, sl, #3
 8009bfc:	f000 bd56 	b.w	800a6ac <_dtoa_r+0xb4c>
 8009c00:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009c04:	2200      	movs	r2, #0
 8009c06:	2300      	movs	r3, #0
 8009c08:	ec51 0b17 	vmov	r0, r1, d7
 8009c0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009c10:	f7f6 ff3e 	bl	8000a90 <__aeabi_dcmpeq>
 8009c14:	4680      	mov	r8, r0
 8009c16:	b158      	cbz	r0, 8009c30 <_dtoa_r+0xd0>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009c1c:	6013      	str	r3, [r2, #0]
 8009c1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c20:	b113      	cbz	r3, 8009c28 <_dtoa_r+0xc8>
 8009c22:	4b86      	ldr	r3, [pc, #536]	@ (8009e3c <_dtoa_r+0x2dc>)
 8009c24:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8009e50 <_dtoa_r+0x2f0>
 8009c2c:	f000 bd40 	b.w	800a6b0 <_dtoa_r+0xb50>
 8009c30:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009c34:	aa14      	add	r2, sp, #80	@ 0x50
 8009c36:	a915      	add	r1, sp, #84	@ 0x54
 8009c38:	4648      	mov	r0, r9
 8009c3a:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009c3e:	f001 fa49 	bl	800b0d4 <__d2b>
 8009c42:	9002      	str	r0, [sp, #8]
 8009c44:	2e00      	cmp	r6, #0
 8009c46:	d076      	beq.n	8009d36 <_dtoa_r+0x1d6>
 8009c48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c4a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009c4e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009c52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c56:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009c5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009c5e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009c62:	4619      	mov	r1, r3
 8009c64:	2200      	movs	r2, #0
 8009c66:	4b76      	ldr	r3, [pc, #472]	@ (8009e40 <_dtoa_r+0x2e0>)
 8009c68:	f7f6 faf2 	bl	8000250 <__aeabi_dsub>
 8009c6c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009e18 <_dtoa_r+0x2b8>)
 8009c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c72:	f7f6 fca5 	bl	80005c0 <__aeabi_dmul>
 8009c76:	a36a      	add	r3, pc, #424	@ (adr r3, 8009e20 <_dtoa_r+0x2c0>)
 8009c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7c:	f7f6 faea 	bl	8000254 <__adddf3>
 8009c80:	4604      	mov	r4, r0
 8009c82:	460d      	mov	r5, r1
 8009c84:	4630      	mov	r0, r6
 8009c86:	f7f6 fc31 	bl	80004ec <__aeabi_i2d>
 8009c8a:	a367      	add	r3, pc, #412	@ (adr r3, 8009e28 <_dtoa_r+0x2c8>)
 8009c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c90:	f7f6 fc96 	bl	80005c0 <__aeabi_dmul>
 8009c94:	4602      	mov	r2, r0
 8009c96:	460b      	mov	r3, r1
 8009c98:	4620      	mov	r0, r4
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	f7f6 fada 	bl	8000254 <__adddf3>
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	460d      	mov	r5, r1
 8009ca4:	f7f6 ff3c 	bl	8000b20 <__aeabi_d2iz>
 8009ca8:	2200      	movs	r2, #0
 8009caa:	4607      	mov	r7, r0
 8009cac:	2300      	movs	r3, #0
 8009cae:	4620      	mov	r0, r4
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	f7f6 fef7 	bl	8000aa4 <__aeabi_dcmplt>
 8009cb6:	b140      	cbz	r0, 8009cca <_dtoa_r+0x16a>
 8009cb8:	4638      	mov	r0, r7
 8009cba:	f7f6 fc17 	bl	80004ec <__aeabi_i2d>
 8009cbe:	4622      	mov	r2, r4
 8009cc0:	462b      	mov	r3, r5
 8009cc2:	f7f6 fee5 	bl	8000a90 <__aeabi_dcmpeq>
 8009cc6:	b900      	cbnz	r0, 8009cca <_dtoa_r+0x16a>
 8009cc8:	3f01      	subs	r7, #1
 8009cca:	2f16      	cmp	r7, #22
 8009ccc:	d852      	bhi.n	8009d74 <_dtoa_r+0x214>
 8009cce:	4b5d      	ldr	r3, [pc, #372]	@ (8009e44 <_dtoa_r+0x2e4>)
 8009cd0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009cd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	f7f6 fee2 	bl	8000aa4 <__aeabi_dcmplt>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d049      	beq.n	8009d78 <_dtoa_r+0x218>
 8009ce4:	3f01      	subs	r7, #1
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009cec:	1b9b      	subs	r3, r3, r6
 8009cee:	1e5a      	subs	r2, r3, #1
 8009cf0:	bf4c      	ite	mi
 8009cf2:	f1c3 0301 	rsbmi	r3, r3, #1
 8009cf6:	2300      	movpl	r3, #0
 8009cf8:	9206      	str	r2, [sp, #24]
 8009cfa:	bf45      	ittet	mi
 8009cfc:	9300      	strmi	r3, [sp, #0]
 8009cfe:	2300      	movmi	r3, #0
 8009d00:	9300      	strpl	r3, [sp, #0]
 8009d02:	9306      	strmi	r3, [sp, #24]
 8009d04:	2f00      	cmp	r7, #0
 8009d06:	db39      	blt.n	8009d7c <_dtoa_r+0x21c>
 8009d08:	9b06      	ldr	r3, [sp, #24]
 8009d0a:	970d      	str	r7, [sp, #52]	@ 0x34
 8009d0c:	443b      	add	r3, r7
 8009d0e:	9306      	str	r3, [sp, #24]
 8009d10:	2300      	movs	r3, #0
 8009d12:	9308      	str	r3, [sp, #32]
 8009d14:	9b07      	ldr	r3, [sp, #28]
 8009d16:	2b09      	cmp	r3, #9
 8009d18:	d863      	bhi.n	8009de2 <_dtoa_r+0x282>
 8009d1a:	2b05      	cmp	r3, #5
 8009d1c:	bfc5      	ittet	gt
 8009d1e:	3b04      	subgt	r3, #4
 8009d20:	2400      	movgt	r4, #0
 8009d22:	2401      	movle	r4, #1
 8009d24:	9307      	strgt	r3, [sp, #28]
 8009d26:	9b07      	ldr	r3, [sp, #28]
 8009d28:	3b02      	subs	r3, #2
 8009d2a:	2b03      	cmp	r3, #3
 8009d2c:	d865      	bhi.n	8009dfa <_dtoa_r+0x29a>
 8009d2e:	e8df f003 	tbb	[pc, r3]
 8009d32:	5654      	.short	0x5654
 8009d34:	2d39      	.short	0x2d39
 8009d36:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009d3a:	441e      	add	r6, r3
 8009d3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009d40:	2b20      	cmp	r3, #32
 8009d42:	bfc9      	itett	gt
 8009d44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009d48:	f1c3 0320 	rsble	r3, r3, #32
 8009d4c:	409f      	lslgt	r7, r3
 8009d4e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009d52:	bfd8      	it	le
 8009d54:	fa04 f003 	lslle.w	r0, r4, r3
 8009d58:	f106 36ff 	add.w	r6, r6, #4294967295
 8009d5c:	bfc4      	itt	gt
 8009d5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009d62:	ea47 0003 	orrgt.w	r0, r7, r3
 8009d66:	f7f6 fbb1 	bl	80004cc <__aeabi_ui2d>
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009d70:	9212      	str	r2, [sp, #72]	@ 0x48
 8009d72:	e776      	b.n	8009c62 <_dtoa_r+0x102>
 8009d74:	2301      	movs	r3, #1
 8009d76:	e7b7      	b.n	8009ce8 <_dtoa_r+0x188>
 8009d78:	9010      	str	r0, [sp, #64]	@ 0x40
 8009d7a:	e7b6      	b.n	8009cea <_dtoa_r+0x18a>
 8009d7c:	9b00      	ldr	r3, [sp, #0]
 8009d7e:	1bdb      	subs	r3, r3, r7
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	427b      	negs	r3, r7
 8009d84:	9308      	str	r3, [sp, #32]
 8009d86:	2300      	movs	r3, #0
 8009d88:	930d      	str	r3, [sp, #52]	@ 0x34
 8009d8a:	e7c3      	b.n	8009d14 <_dtoa_r+0x1b4>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d92:	eb07 0b03 	add.w	fp, r7, r3
 8009d96:	f10b 0301 	add.w	r3, fp, #1
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	9303      	str	r3, [sp, #12]
 8009d9e:	bfb8      	it	lt
 8009da0:	2301      	movlt	r3, #1
 8009da2:	e006      	b.n	8009db2 <_dtoa_r+0x252>
 8009da4:	2301      	movs	r3, #1
 8009da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009da8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	dd28      	ble.n	8009e00 <_dtoa_r+0x2a0>
 8009dae:	469b      	mov	fp, r3
 8009db0:	9303      	str	r3, [sp, #12]
 8009db2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009db6:	2100      	movs	r1, #0
 8009db8:	2204      	movs	r2, #4
 8009dba:	f102 0514 	add.w	r5, r2, #20
 8009dbe:	429d      	cmp	r5, r3
 8009dc0:	d926      	bls.n	8009e10 <_dtoa_r+0x2b0>
 8009dc2:	6041      	str	r1, [r0, #4]
 8009dc4:	4648      	mov	r0, r9
 8009dc6:	f000 fd9d 	bl	800a904 <_Balloc>
 8009dca:	4682      	mov	sl, r0
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d141      	bne.n	8009e54 <_dtoa_r+0x2f4>
 8009dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8009e48 <_dtoa_r+0x2e8>)
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	f240 11af 	movw	r1, #431	@ 0x1af
 8009dd8:	e6d9      	b.n	8009b8e <_dtoa_r+0x2e>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	e7e3      	b.n	8009da6 <_dtoa_r+0x246>
 8009dde:	2300      	movs	r3, #0
 8009de0:	e7d5      	b.n	8009d8e <_dtoa_r+0x22e>
 8009de2:	2401      	movs	r4, #1
 8009de4:	2300      	movs	r3, #0
 8009de6:	9409      	str	r4, [sp, #36]	@ 0x24
 8009de8:	9307      	str	r3, [sp, #28]
 8009dea:	f04f 3bff 	mov.w	fp, #4294967295
 8009dee:	2200      	movs	r2, #0
 8009df0:	2312      	movs	r3, #18
 8009df2:	f8cd b00c 	str.w	fp, [sp, #12]
 8009df6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009df8:	e7db      	b.n	8009db2 <_dtoa_r+0x252>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dfe:	e7f4      	b.n	8009dea <_dtoa_r+0x28a>
 8009e00:	f04f 0b01 	mov.w	fp, #1
 8009e04:	465b      	mov	r3, fp
 8009e06:	f8cd b00c 	str.w	fp, [sp, #12]
 8009e0a:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009e0e:	e7d0      	b.n	8009db2 <_dtoa_r+0x252>
 8009e10:	3101      	adds	r1, #1
 8009e12:	0052      	lsls	r2, r2, #1
 8009e14:	e7d1      	b.n	8009dba <_dtoa_r+0x25a>
 8009e16:	bf00      	nop
 8009e18:	636f4361 	.word	0x636f4361
 8009e1c:	3fd287a7 	.word	0x3fd287a7
 8009e20:	8b60c8b3 	.word	0x8b60c8b3
 8009e24:	3fc68a28 	.word	0x3fc68a28
 8009e28:	509f79fb 	.word	0x509f79fb
 8009e2c:	3fd34413 	.word	0x3fd34413
 8009e30:	0800dab0 	.word	0x0800dab0
 8009e34:	0800dac7 	.word	0x0800dac7
 8009e38:	7ff00000 	.word	0x7ff00000
 8009e3c:	0800dbb3 	.word	0x0800dbb3
 8009e40:	3ff80000 	.word	0x3ff80000
 8009e44:	0800dc90 	.word	0x0800dc90
 8009e48:	0800db1f 	.word	0x0800db1f
 8009e4c:	0800daac 	.word	0x0800daac
 8009e50:	0800dbb2 	.word	0x0800dbb2
 8009e54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009e58:	6018      	str	r0, [r3, #0]
 8009e5a:	9b03      	ldr	r3, [sp, #12]
 8009e5c:	2b0e      	cmp	r3, #14
 8009e5e:	f200 80a1 	bhi.w	8009fa4 <_dtoa_r+0x444>
 8009e62:	2c00      	cmp	r4, #0
 8009e64:	f000 809e 	beq.w	8009fa4 <_dtoa_r+0x444>
 8009e68:	2f00      	cmp	r7, #0
 8009e6a:	dd33      	ble.n	8009ed4 <_dtoa_r+0x374>
 8009e6c:	f007 020f 	and.w	r2, r7, #15
 8009e70:	4b9b      	ldr	r3, [pc, #620]	@ (800a0e0 <_dtoa_r+0x580>)
 8009e72:	05f8      	lsls	r0, r7, #23
 8009e74:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009e78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e7c:	ed93 7b00 	vldr	d7, [r3]
 8009e80:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009e84:	d516      	bpl.n	8009eb4 <_dtoa_r+0x354>
 8009e86:	4b97      	ldr	r3, [pc, #604]	@ (800a0e4 <_dtoa_r+0x584>)
 8009e88:	f004 040f 	and.w	r4, r4, #15
 8009e8c:	2603      	movs	r6, #3
 8009e8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009e96:	f7f6 fcbd 	bl	8000814 <__aeabi_ddiv>
 8009e9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e9e:	4d91      	ldr	r5, [pc, #580]	@ (800a0e4 <_dtoa_r+0x584>)
 8009ea0:	b954      	cbnz	r4, 8009eb8 <_dtoa_r+0x358>
 8009ea2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009ea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eaa:	f7f6 fcb3 	bl	8000814 <__aeabi_ddiv>
 8009eae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009eb2:	e028      	b.n	8009f06 <_dtoa_r+0x3a6>
 8009eb4:	2602      	movs	r6, #2
 8009eb6:	e7f2      	b.n	8009e9e <_dtoa_r+0x33e>
 8009eb8:	07e1      	lsls	r1, r4, #31
 8009eba:	d508      	bpl.n	8009ece <_dtoa_r+0x36e>
 8009ebc:	3601      	adds	r6, #1
 8009ebe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009ec2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ec6:	f7f6 fb7b 	bl	80005c0 <__aeabi_dmul>
 8009eca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009ece:	1064      	asrs	r4, r4, #1
 8009ed0:	3508      	adds	r5, #8
 8009ed2:	e7e5      	b.n	8009ea0 <_dtoa_r+0x340>
 8009ed4:	f000 80af 	beq.w	800a036 <_dtoa_r+0x4d6>
 8009ed8:	427c      	negs	r4, r7
 8009eda:	4b81      	ldr	r3, [pc, #516]	@ (800a0e0 <_dtoa_r+0x580>)
 8009edc:	4d81      	ldr	r5, [pc, #516]	@ (800a0e4 <_dtoa_r+0x584>)
 8009ede:	2602      	movs	r6, #2
 8009ee0:	f004 020f 	and.w	r2, r4, #15
 8009ee4:	1124      	asrs	r4, r4, #4
 8009ee6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009eea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef2:	f7f6 fb65 	bl	80005c0 <__aeabi_dmul>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009efc:	2c00      	cmp	r4, #0
 8009efe:	f040 808f 	bne.w	800a020 <_dtoa_r+0x4c0>
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1d3      	bne.n	8009eae <_dtoa_r+0x34e>
 8009f06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f08:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 8094 	beq.w	800a03a <_dtoa_r+0x4da>
 8009f12:	2200      	movs	r2, #0
 8009f14:	4b74      	ldr	r3, [pc, #464]	@ (800a0e8 <_dtoa_r+0x588>)
 8009f16:	4620      	mov	r0, r4
 8009f18:	4629      	mov	r1, r5
 8009f1a:	f7f6 fdc3 	bl	8000aa4 <__aeabi_dcmplt>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	f000 808b 	beq.w	800a03a <_dtoa_r+0x4da>
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f000 8087 	beq.w	800a03a <_dtoa_r+0x4da>
 8009f2c:	f1bb 0f00 	cmp.w	fp, #0
 8009f30:	dd34      	ble.n	8009f9c <_dtoa_r+0x43c>
 8009f32:	4620      	mov	r0, r4
 8009f34:	f107 38ff 	add.w	r8, r7, #4294967295
 8009f38:	3601      	adds	r6, #1
 8009f3a:	465c      	mov	r4, fp
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	4b6b      	ldr	r3, [pc, #428]	@ (800a0ec <_dtoa_r+0x58c>)
 8009f40:	4629      	mov	r1, r5
 8009f42:	f7f6 fb3d 	bl	80005c0 <__aeabi_dmul>
 8009f46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f7f6 face 	bl	80004ec <__aeabi_i2d>
 8009f50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f54:	f7f6 fb34 	bl	80005c0 <__aeabi_dmul>
 8009f58:	2200      	movs	r2, #0
 8009f5a:	4b65      	ldr	r3, [pc, #404]	@ (800a0f0 <_dtoa_r+0x590>)
 8009f5c:	f7f6 f97a 	bl	8000254 <__adddf3>
 8009f60:	4605      	mov	r5, r0
 8009f62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009f66:	2c00      	cmp	r4, #0
 8009f68:	d16a      	bne.n	800a040 <_dtoa_r+0x4e0>
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	4b61      	ldr	r3, [pc, #388]	@ (800a0f4 <_dtoa_r+0x594>)
 8009f6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f72:	f7f6 f96d 	bl	8000250 <__aeabi_dsub>
 8009f76:	4602      	mov	r2, r0
 8009f78:	460b      	mov	r3, r1
 8009f7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f7e:	462a      	mov	r2, r5
 8009f80:	4633      	mov	r3, r6
 8009f82:	f7f6 fdad 	bl	8000ae0 <__aeabi_dcmpgt>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	f040 8298 	bne.w	800a4bc <_dtoa_r+0x95c>
 8009f8c:	462a      	mov	r2, r5
 8009f8e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009f92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f96:	f7f6 fd85 	bl	8000aa4 <__aeabi_dcmplt>
 8009f9a:	bb38      	cbnz	r0, 8009fec <_dtoa_r+0x48c>
 8009f9c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009fa0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009fa4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f2c0 8157 	blt.w	800a25a <_dtoa_r+0x6fa>
 8009fac:	2f0e      	cmp	r7, #14
 8009fae:	f300 8154 	bgt.w	800a25a <_dtoa_r+0x6fa>
 8009fb2:	4b4b      	ldr	r3, [pc, #300]	@ (800a0e0 <_dtoa_r+0x580>)
 8009fb4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fb8:	ed93 7b00 	vldr	d7, [r3]
 8009fbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	ed8d 7b00 	vstr	d7, [sp]
 8009fc4:	f280 80e5 	bge.w	800a192 <_dtoa_r+0x632>
 8009fc8:	9b03      	ldr	r3, [sp, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f300 80e1 	bgt.w	800a192 <_dtoa_r+0x632>
 8009fd0:	d10c      	bne.n	8009fec <_dtoa_r+0x48c>
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	4b47      	ldr	r3, [pc, #284]	@ (800a0f4 <_dtoa_r+0x594>)
 8009fd6:	ec51 0b17 	vmov	r0, r1, d7
 8009fda:	f7f6 faf1 	bl	80005c0 <__aeabi_dmul>
 8009fde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fe2:	f7f6 fd73 	bl	8000acc <__aeabi_dcmpge>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	f000 8266 	beq.w	800a4b8 <_dtoa_r+0x958>
 8009fec:	2400      	movs	r4, #0
 8009fee:	4625      	mov	r5, r4
 8009ff0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ff2:	4656      	mov	r6, sl
 8009ff4:	ea6f 0803 	mvn.w	r8, r3
 8009ff8:	2700      	movs	r7, #0
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	4648      	mov	r0, r9
 8009ffe:	f000 fcc1 	bl	800a984 <_Bfree>
 800a002:	2d00      	cmp	r5, #0
 800a004:	f000 80bd 	beq.w	800a182 <_dtoa_r+0x622>
 800a008:	b12f      	cbz	r7, 800a016 <_dtoa_r+0x4b6>
 800a00a:	42af      	cmp	r7, r5
 800a00c:	d003      	beq.n	800a016 <_dtoa_r+0x4b6>
 800a00e:	4639      	mov	r1, r7
 800a010:	4648      	mov	r0, r9
 800a012:	f000 fcb7 	bl	800a984 <_Bfree>
 800a016:	4629      	mov	r1, r5
 800a018:	4648      	mov	r0, r9
 800a01a:	f000 fcb3 	bl	800a984 <_Bfree>
 800a01e:	e0b0      	b.n	800a182 <_dtoa_r+0x622>
 800a020:	07e2      	lsls	r2, r4, #31
 800a022:	d505      	bpl.n	800a030 <_dtoa_r+0x4d0>
 800a024:	3601      	adds	r6, #1
 800a026:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a02a:	f7f6 fac9 	bl	80005c0 <__aeabi_dmul>
 800a02e:	2301      	movs	r3, #1
 800a030:	1064      	asrs	r4, r4, #1
 800a032:	3508      	adds	r5, #8
 800a034:	e762      	b.n	8009efc <_dtoa_r+0x39c>
 800a036:	2602      	movs	r6, #2
 800a038:	e765      	b.n	8009f06 <_dtoa_r+0x3a6>
 800a03a:	46b8      	mov	r8, r7
 800a03c:	9c03      	ldr	r4, [sp, #12]
 800a03e:	e784      	b.n	8009f4a <_dtoa_r+0x3ea>
 800a040:	4b27      	ldr	r3, [pc, #156]	@ (800a0e0 <_dtoa_r+0x580>)
 800a042:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a044:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a048:	4454      	add	r4, sl
 800a04a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a04e:	2900      	cmp	r1, #0
 800a050:	d054      	beq.n	800a0fc <_dtoa_r+0x59c>
 800a052:	2000      	movs	r0, #0
 800a054:	4928      	ldr	r1, [pc, #160]	@ (800a0f8 <_dtoa_r+0x598>)
 800a056:	f7f6 fbdd 	bl	8000814 <__aeabi_ddiv>
 800a05a:	4633      	mov	r3, r6
 800a05c:	4656      	mov	r6, sl
 800a05e:	462a      	mov	r2, r5
 800a060:	f7f6 f8f6 	bl	8000250 <__aeabi_dsub>
 800a064:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a068:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a06c:	f7f6 fd58 	bl	8000b20 <__aeabi_d2iz>
 800a070:	4605      	mov	r5, r0
 800a072:	f7f6 fa3b 	bl	80004ec <__aeabi_i2d>
 800a076:	4602      	mov	r2, r0
 800a078:	460b      	mov	r3, r1
 800a07a:	3530      	adds	r5, #48	@ 0x30
 800a07c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a080:	f7f6 f8e6 	bl	8000250 <__aeabi_dsub>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	f806 5b01 	strb.w	r5, [r6], #1
 800a08c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a090:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a094:	f7f6 fd06 	bl	8000aa4 <__aeabi_dcmplt>
 800a098:	2800      	cmp	r0, #0
 800a09a:	d172      	bne.n	800a182 <_dtoa_r+0x622>
 800a09c:	2000      	movs	r0, #0
 800a09e:	4912      	ldr	r1, [pc, #72]	@ (800a0e8 <_dtoa_r+0x588>)
 800a0a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0a4:	f7f6 f8d4 	bl	8000250 <__aeabi_dsub>
 800a0a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a0ac:	f7f6 fcfa 	bl	8000aa4 <__aeabi_dcmplt>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	f040 80b4 	bne.w	800a21e <_dtoa_r+0x6be>
 800a0b6:	42a6      	cmp	r6, r4
 800a0b8:	f43f af70 	beq.w	8009f9c <_dtoa_r+0x43c>
 800a0bc:	2200      	movs	r2, #0
 800a0be:	4b0b      	ldr	r3, [pc, #44]	@ (800a0ec <_dtoa_r+0x58c>)
 800a0c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a0c4:	f7f6 fa7c 	bl	80005c0 <__aeabi_dmul>
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	4b08      	ldr	r3, [pc, #32]	@ (800a0ec <_dtoa_r+0x58c>)
 800a0cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a0d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0d4:	f7f6 fa74 	bl	80005c0 <__aeabi_dmul>
 800a0d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0dc:	e7c4      	b.n	800a068 <_dtoa_r+0x508>
 800a0de:	bf00      	nop
 800a0e0:	0800dc90 	.word	0x0800dc90
 800a0e4:	0800dc68 	.word	0x0800dc68
 800a0e8:	3ff00000 	.word	0x3ff00000
 800a0ec:	40240000 	.word	0x40240000
 800a0f0:	401c0000 	.word	0x401c0000
 800a0f4:	40140000 	.word	0x40140000
 800a0f8:	3fe00000 	.word	0x3fe00000
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4656      	mov	r6, sl
 800a100:	4628      	mov	r0, r5
 800a102:	f7f6 fa5d 	bl	80005c0 <__aeabi_dmul>
 800a106:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a108:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a10c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a110:	f7f6 fd06 	bl	8000b20 <__aeabi_d2iz>
 800a114:	4605      	mov	r5, r0
 800a116:	f7f6 f9e9 	bl	80004ec <__aeabi_i2d>
 800a11a:	4602      	mov	r2, r0
 800a11c:	3530      	adds	r5, #48	@ 0x30
 800a11e:	460b      	mov	r3, r1
 800a120:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a124:	f7f6 f894 	bl	8000250 <__aeabi_dsub>
 800a128:	f806 5b01 	strb.w	r5, [r6], #1
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	42a6      	cmp	r6, r4
 800a132:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a136:	f04f 0200 	mov.w	r2, #0
 800a13a:	d124      	bne.n	800a186 <_dtoa_r+0x626>
 800a13c:	4baf      	ldr	r3, [pc, #700]	@ (800a3fc <_dtoa_r+0x89c>)
 800a13e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a142:	f7f6 f887 	bl	8000254 <__adddf3>
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a14e:	f7f6 fcc7 	bl	8000ae0 <__aeabi_dcmpgt>
 800a152:	2800      	cmp	r0, #0
 800a154:	d163      	bne.n	800a21e <_dtoa_r+0x6be>
 800a156:	2000      	movs	r0, #0
 800a158:	49a8      	ldr	r1, [pc, #672]	@ (800a3fc <_dtoa_r+0x89c>)
 800a15a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a15e:	f7f6 f877 	bl	8000250 <__aeabi_dsub>
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a16a:	f7f6 fc9b 	bl	8000aa4 <__aeabi_dcmplt>
 800a16e:	2800      	cmp	r0, #0
 800a170:	f43f af14 	beq.w	8009f9c <_dtoa_r+0x43c>
 800a174:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a176:	1e73      	subs	r3, r6, #1
 800a178:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a17a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a17e:	2b30      	cmp	r3, #48	@ 0x30
 800a180:	d0f8      	beq.n	800a174 <_dtoa_r+0x614>
 800a182:	4647      	mov	r7, r8
 800a184:	e03b      	b.n	800a1fe <_dtoa_r+0x69e>
 800a186:	4b9e      	ldr	r3, [pc, #632]	@ (800a400 <_dtoa_r+0x8a0>)
 800a188:	f7f6 fa1a 	bl	80005c0 <__aeabi_dmul>
 800a18c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a190:	e7bc      	b.n	800a10c <_dtoa_r+0x5ac>
 800a192:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a196:	4656      	mov	r6, sl
 800a198:	4620      	mov	r0, r4
 800a19a:	4629      	mov	r1, r5
 800a19c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1a0:	f7f6 fb38 	bl	8000814 <__aeabi_ddiv>
 800a1a4:	f7f6 fcbc 	bl	8000b20 <__aeabi_d2iz>
 800a1a8:	4680      	mov	r8, r0
 800a1aa:	f7f6 f99f 	bl	80004ec <__aeabi_i2d>
 800a1ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1b2:	f7f6 fa05 	bl	80005c0 <__aeabi_dmul>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	f7f6 f845 	bl	8000250 <__aeabi_dsub>
 800a1c6:	9d03      	ldr	r5, [sp, #12]
 800a1c8:	f806 4b01 	strb.w	r4, [r6], #1
 800a1cc:	eba6 040a 	sub.w	r4, r6, sl
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	42a5      	cmp	r5, r4
 800a1d6:	d133      	bne.n	800a240 <_dtoa_r+0x6e0>
 800a1d8:	f7f6 f83c 	bl	8000254 <__adddf3>
 800a1dc:	4604      	mov	r4, r0
 800a1de:	460d      	mov	r5, r1
 800a1e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1e4:	f7f6 fc7c 	bl	8000ae0 <__aeabi_dcmpgt>
 800a1e8:	b9c0      	cbnz	r0, 800a21c <_dtoa_r+0x6bc>
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1f2:	f7f6 fc4d 	bl	8000a90 <__aeabi_dcmpeq>
 800a1f6:	b110      	cbz	r0, 800a1fe <_dtoa_r+0x69e>
 800a1f8:	f018 0f01 	tst.w	r8, #1
 800a1fc:	d10e      	bne.n	800a21c <_dtoa_r+0x6bc>
 800a1fe:	9902      	ldr	r1, [sp, #8]
 800a200:	4648      	mov	r0, r9
 800a202:	f000 fbbf 	bl	800a984 <_Bfree>
 800a206:	2300      	movs	r3, #0
 800a208:	3701      	adds	r7, #1
 800a20a:	7033      	strb	r3, [r6, #0]
 800a20c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a20e:	601f      	str	r7, [r3, #0]
 800a210:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a212:	2b00      	cmp	r3, #0
 800a214:	f000 824c 	beq.w	800a6b0 <_dtoa_r+0xb50>
 800a218:	601e      	str	r6, [r3, #0]
 800a21a:	e249      	b.n	800a6b0 <_dtoa_r+0xb50>
 800a21c:	46b8      	mov	r8, r7
 800a21e:	4633      	mov	r3, r6
 800a220:	461e      	mov	r6, r3
 800a222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a226:	2a39      	cmp	r2, #57	@ 0x39
 800a228:	d106      	bne.n	800a238 <_dtoa_r+0x6d8>
 800a22a:	459a      	cmp	sl, r3
 800a22c:	d1f8      	bne.n	800a220 <_dtoa_r+0x6c0>
 800a22e:	2230      	movs	r2, #48	@ 0x30
 800a230:	f108 0801 	add.w	r8, r8, #1
 800a234:	f88a 2000 	strb.w	r2, [sl]
 800a238:	781a      	ldrb	r2, [r3, #0]
 800a23a:	3201      	adds	r2, #1
 800a23c:	701a      	strb	r2, [r3, #0]
 800a23e:	e7a0      	b.n	800a182 <_dtoa_r+0x622>
 800a240:	2200      	movs	r2, #0
 800a242:	4b6f      	ldr	r3, [pc, #444]	@ (800a400 <_dtoa_r+0x8a0>)
 800a244:	f7f6 f9bc 	bl	80005c0 <__aeabi_dmul>
 800a248:	2200      	movs	r2, #0
 800a24a:	2300      	movs	r3, #0
 800a24c:	4604      	mov	r4, r0
 800a24e:	460d      	mov	r5, r1
 800a250:	f7f6 fc1e 	bl	8000a90 <__aeabi_dcmpeq>
 800a254:	2800      	cmp	r0, #0
 800a256:	d09f      	beq.n	800a198 <_dtoa_r+0x638>
 800a258:	e7d1      	b.n	800a1fe <_dtoa_r+0x69e>
 800a25a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a25c:	2a00      	cmp	r2, #0
 800a25e:	f000 80ea 	beq.w	800a436 <_dtoa_r+0x8d6>
 800a262:	9a07      	ldr	r2, [sp, #28]
 800a264:	2a01      	cmp	r2, #1
 800a266:	f300 80cd 	bgt.w	800a404 <_dtoa_r+0x8a4>
 800a26a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a26c:	2a00      	cmp	r2, #0
 800a26e:	f000 80c1 	beq.w	800a3f4 <_dtoa_r+0x894>
 800a272:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a276:	9c08      	ldr	r4, [sp, #32]
 800a278:	9e00      	ldr	r6, [sp, #0]
 800a27a:	9a00      	ldr	r2, [sp, #0]
 800a27c:	2101      	movs	r1, #1
 800a27e:	4648      	mov	r0, r9
 800a280:	441a      	add	r2, r3
 800a282:	9200      	str	r2, [sp, #0]
 800a284:	9a06      	ldr	r2, [sp, #24]
 800a286:	441a      	add	r2, r3
 800a288:	9206      	str	r2, [sp, #24]
 800a28a:	f000 fc7b 	bl	800ab84 <__i2b>
 800a28e:	4605      	mov	r5, r0
 800a290:	b166      	cbz	r6, 800a2ac <_dtoa_r+0x74c>
 800a292:	9b06      	ldr	r3, [sp, #24]
 800a294:	2b00      	cmp	r3, #0
 800a296:	dd09      	ble.n	800a2ac <_dtoa_r+0x74c>
 800a298:	42b3      	cmp	r3, r6
 800a29a:	9a00      	ldr	r2, [sp, #0]
 800a29c:	bfa8      	it	ge
 800a29e:	4633      	movge	r3, r6
 800a2a0:	1ad2      	subs	r2, r2, r3
 800a2a2:	1af6      	subs	r6, r6, r3
 800a2a4:	9200      	str	r2, [sp, #0]
 800a2a6:	9a06      	ldr	r2, [sp, #24]
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	9306      	str	r3, [sp, #24]
 800a2ac:	9b08      	ldr	r3, [sp, #32]
 800a2ae:	b30b      	cbz	r3, 800a2f4 <_dtoa_r+0x794>
 800a2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f000 80c6 	beq.w	800a444 <_dtoa_r+0x8e4>
 800a2b8:	2c00      	cmp	r4, #0
 800a2ba:	f000 80c0 	beq.w	800a43e <_dtoa_r+0x8de>
 800a2be:	4629      	mov	r1, r5
 800a2c0:	4622      	mov	r2, r4
 800a2c2:	4648      	mov	r0, r9
 800a2c4:	f000 fd18 	bl	800acf8 <__pow5mult>
 800a2c8:	9a02      	ldr	r2, [sp, #8]
 800a2ca:	4601      	mov	r1, r0
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	4648      	mov	r0, r9
 800a2d0:	f000 fc6e 	bl	800abb0 <__multiply>
 800a2d4:	9902      	ldr	r1, [sp, #8]
 800a2d6:	4680      	mov	r8, r0
 800a2d8:	4648      	mov	r0, r9
 800a2da:	f000 fb53 	bl	800a984 <_Bfree>
 800a2de:	9b08      	ldr	r3, [sp, #32]
 800a2e0:	1b1b      	subs	r3, r3, r4
 800a2e2:	9308      	str	r3, [sp, #32]
 800a2e4:	f000 80b1 	beq.w	800a44a <_dtoa_r+0x8ea>
 800a2e8:	9a08      	ldr	r2, [sp, #32]
 800a2ea:	4641      	mov	r1, r8
 800a2ec:	4648      	mov	r0, r9
 800a2ee:	f000 fd03 	bl	800acf8 <__pow5mult>
 800a2f2:	9002      	str	r0, [sp, #8]
 800a2f4:	2101      	movs	r1, #1
 800a2f6:	4648      	mov	r0, r9
 800a2f8:	f000 fc44 	bl	800ab84 <__i2b>
 800a2fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2fe:	4604      	mov	r4, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	f000 81d9 	beq.w	800a6b8 <_dtoa_r+0xb58>
 800a306:	461a      	mov	r2, r3
 800a308:	4601      	mov	r1, r0
 800a30a:	4648      	mov	r0, r9
 800a30c:	f000 fcf4 	bl	800acf8 <__pow5mult>
 800a310:	9b07      	ldr	r3, [sp, #28]
 800a312:	4604      	mov	r4, r0
 800a314:	2b01      	cmp	r3, #1
 800a316:	f300 809f 	bgt.w	800a458 <_dtoa_r+0x8f8>
 800a31a:	9b04      	ldr	r3, [sp, #16]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f040 8097 	bne.w	800a450 <_dtoa_r+0x8f0>
 800a322:	9b05      	ldr	r3, [sp, #20]
 800a324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f040 8093 	bne.w	800a454 <_dtoa_r+0x8f4>
 800a32e:	9b05      	ldr	r3, [sp, #20]
 800a330:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a334:	0d1b      	lsrs	r3, r3, #20
 800a336:	051b      	lsls	r3, r3, #20
 800a338:	b133      	cbz	r3, 800a348 <_dtoa_r+0x7e8>
 800a33a:	9b00      	ldr	r3, [sp, #0]
 800a33c:	3301      	adds	r3, #1
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	9b06      	ldr	r3, [sp, #24]
 800a342:	3301      	adds	r3, #1
 800a344:	9306      	str	r3, [sp, #24]
 800a346:	2301      	movs	r3, #1
 800a348:	9308      	str	r3, [sp, #32]
 800a34a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 81b9 	beq.w	800a6c4 <_dtoa_r+0xb64>
 800a352:	6923      	ldr	r3, [r4, #16]
 800a354:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a358:	6918      	ldr	r0, [r3, #16]
 800a35a:	f000 fbc7 	bl	800aaec <__hi0bits>
 800a35e:	f1c0 0020 	rsb	r0, r0, #32
 800a362:	9b06      	ldr	r3, [sp, #24]
 800a364:	4418      	add	r0, r3
 800a366:	f010 001f 	ands.w	r0, r0, #31
 800a36a:	f000 8082 	beq.w	800a472 <_dtoa_r+0x912>
 800a36e:	f1c0 0320 	rsb	r3, r0, #32
 800a372:	2b04      	cmp	r3, #4
 800a374:	dd73      	ble.n	800a45e <_dtoa_r+0x8fe>
 800a376:	f1c0 001c 	rsb	r0, r0, #28
 800a37a:	9b00      	ldr	r3, [sp, #0]
 800a37c:	4403      	add	r3, r0
 800a37e:	4406      	add	r6, r0
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	9b06      	ldr	r3, [sp, #24]
 800a384:	4403      	add	r3, r0
 800a386:	9306      	str	r3, [sp, #24]
 800a388:	9b00      	ldr	r3, [sp, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	dd05      	ble.n	800a39a <_dtoa_r+0x83a>
 800a38e:	461a      	mov	r2, r3
 800a390:	9902      	ldr	r1, [sp, #8]
 800a392:	4648      	mov	r0, r9
 800a394:	f000 fd0a 	bl	800adac <__lshift>
 800a398:	9002      	str	r0, [sp, #8]
 800a39a:	9b06      	ldr	r3, [sp, #24]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	dd05      	ble.n	800a3ac <_dtoa_r+0x84c>
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	4648      	mov	r0, r9
 800a3a6:	f000 fd01 	bl	800adac <__lshift>
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d061      	beq.n	800a476 <_dtoa_r+0x916>
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	9802      	ldr	r0, [sp, #8]
 800a3b6:	f000 fd65 	bl	800ae84 <__mcmp>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	da5b      	bge.n	800a476 <_dtoa_r+0x916>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	220a      	movs	r2, #10
 800a3c2:	9902      	ldr	r1, [sp, #8]
 800a3c4:	4648      	mov	r0, r9
 800a3c6:	f000 faff 	bl	800a9c8 <__multadd>
 800a3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3cc:	f107 38ff 	add.w	r8, r7, #4294967295
 800a3d0:	9002      	str	r0, [sp, #8]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 8178 	beq.w	800a6c8 <_dtoa_r+0xb68>
 800a3d8:	4629      	mov	r1, r5
 800a3da:	2300      	movs	r3, #0
 800a3dc:	220a      	movs	r2, #10
 800a3de:	4648      	mov	r0, r9
 800a3e0:	f000 faf2 	bl	800a9c8 <__multadd>
 800a3e4:	f1bb 0f00 	cmp.w	fp, #0
 800a3e8:	4605      	mov	r5, r0
 800a3ea:	dc6f      	bgt.n	800a4cc <_dtoa_r+0x96c>
 800a3ec:	9b07      	ldr	r3, [sp, #28]
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	dc49      	bgt.n	800a486 <_dtoa_r+0x926>
 800a3f2:	e06b      	b.n	800a4cc <_dtoa_r+0x96c>
 800a3f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a3f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a3fa:	e73c      	b.n	800a276 <_dtoa_r+0x716>
 800a3fc:	3fe00000 	.word	0x3fe00000
 800a400:	40240000 	.word	0x40240000
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	1e5c      	subs	r4, r3, #1
 800a408:	9b08      	ldr	r3, [sp, #32]
 800a40a:	42a3      	cmp	r3, r4
 800a40c:	db09      	blt.n	800a422 <_dtoa_r+0x8c2>
 800a40e:	1b1c      	subs	r4, r3, r4
 800a410:	9b03      	ldr	r3, [sp, #12]
 800a412:	2b00      	cmp	r3, #0
 800a414:	f6bf af30 	bge.w	800a278 <_dtoa_r+0x718>
 800a418:	9b00      	ldr	r3, [sp, #0]
 800a41a:	9a03      	ldr	r2, [sp, #12]
 800a41c:	1a9e      	subs	r6, r3, r2
 800a41e:	2300      	movs	r3, #0
 800a420:	e72b      	b.n	800a27a <_dtoa_r+0x71a>
 800a422:	9b08      	ldr	r3, [sp, #32]
 800a424:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a426:	1ae3      	subs	r3, r4, r3
 800a428:	9408      	str	r4, [sp, #32]
 800a42a:	9e00      	ldr	r6, [sp, #0]
 800a42c:	2400      	movs	r4, #0
 800a42e:	441a      	add	r2, r3
 800a430:	9b03      	ldr	r3, [sp, #12]
 800a432:	920d      	str	r2, [sp, #52]	@ 0x34
 800a434:	e721      	b.n	800a27a <_dtoa_r+0x71a>
 800a436:	9c08      	ldr	r4, [sp, #32]
 800a438:	9e00      	ldr	r6, [sp, #0]
 800a43a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a43c:	e728      	b.n	800a290 <_dtoa_r+0x730>
 800a43e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a442:	e751      	b.n	800a2e8 <_dtoa_r+0x788>
 800a444:	9a08      	ldr	r2, [sp, #32]
 800a446:	9902      	ldr	r1, [sp, #8]
 800a448:	e750      	b.n	800a2ec <_dtoa_r+0x78c>
 800a44a:	f8cd 8008 	str.w	r8, [sp, #8]
 800a44e:	e751      	b.n	800a2f4 <_dtoa_r+0x794>
 800a450:	2300      	movs	r3, #0
 800a452:	e779      	b.n	800a348 <_dtoa_r+0x7e8>
 800a454:	9b04      	ldr	r3, [sp, #16]
 800a456:	e777      	b.n	800a348 <_dtoa_r+0x7e8>
 800a458:	2300      	movs	r3, #0
 800a45a:	9308      	str	r3, [sp, #32]
 800a45c:	e779      	b.n	800a352 <_dtoa_r+0x7f2>
 800a45e:	d093      	beq.n	800a388 <_dtoa_r+0x828>
 800a460:	331c      	adds	r3, #28
 800a462:	9a00      	ldr	r2, [sp, #0]
 800a464:	441a      	add	r2, r3
 800a466:	441e      	add	r6, r3
 800a468:	9200      	str	r2, [sp, #0]
 800a46a:	9a06      	ldr	r2, [sp, #24]
 800a46c:	441a      	add	r2, r3
 800a46e:	9206      	str	r2, [sp, #24]
 800a470:	e78a      	b.n	800a388 <_dtoa_r+0x828>
 800a472:	4603      	mov	r3, r0
 800a474:	e7f4      	b.n	800a460 <_dtoa_r+0x900>
 800a476:	9b03      	ldr	r3, [sp, #12]
 800a478:	46b8      	mov	r8, r7
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	dc20      	bgt.n	800a4c0 <_dtoa_r+0x960>
 800a47e:	469b      	mov	fp, r3
 800a480:	9b07      	ldr	r3, [sp, #28]
 800a482:	2b02      	cmp	r3, #2
 800a484:	dd1e      	ble.n	800a4c4 <_dtoa_r+0x964>
 800a486:	f1bb 0f00 	cmp.w	fp, #0
 800a48a:	f47f adb1 	bne.w	8009ff0 <_dtoa_r+0x490>
 800a48e:	4621      	mov	r1, r4
 800a490:	465b      	mov	r3, fp
 800a492:	2205      	movs	r2, #5
 800a494:	4648      	mov	r0, r9
 800a496:	f000 fa97 	bl	800a9c8 <__multadd>
 800a49a:	4601      	mov	r1, r0
 800a49c:	4604      	mov	r4, r0
 800a49e:	9802      	ldr	r0, [sp, #8]
 800a4a0:	f000 fcf0 	bl	800ae84 <__mcmp>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	f77f ada3 	ble.w	8009ff0 <_dtoa_r+0x490>
 800a4aa:	4656      	mov	r6, sl
 800a4ac:	2331      	movs	r3, #49	@ 0x31
 800a4ae:	f108 0801 	add.w	r8, r8, #1
 800a4b2:	f806 3b01 	strb.w	r3, [r6], #1
 800a4b6:	e59f      	b.n	8009ff8 <_dtoa_r+0x498>
 800a4b8:	46b8      	mov	r8, r7
 800a4ba:	9c03      	ldr	r4, [sp, #12]
 800a4bc:	4625      	mov	r5, r4
 800a4be:	e7f4      	b.n	800a4aa <_dtoa_r+0x94a>
 800a4c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a4c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 8102 	beq.w	800a6d0 <_dtoa_r+0xb70>
 800a4cc:	2e00      	cmp	r6, #0
 800a4ce:	dd05      	ble.n	800a4dc <_dtoa_r+0x97c>
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	4632      	mov	r2, r6
 800a4d4:	4648      	mov	r0, r9
 800a4d6:	f000 fc69 	bl	800adac <__lshift>
 800a4da:	4605      	mov	r5, r0
 800a4dc:	9b08      	ldr	r3, [sp, #32]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d05c      	beq.n	800a59c <_dtoa_r+0xa3c>
 800a4e2:	6869      	ldr	r1, [r5, #4]
 800a4e4:	4648      	mov	r0, r9
 800a4e6:	f000 fa0d 	bl	800a904 <_Balloc>
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	b928      	cbnz	r0, 800a4fa <_dtoa_r+0x99a>
 800a4ee:	4b83      	ldr	r3, [pc, #524]	@ (800a6fc <_dtoa_r+0xb9c>)
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a4f6:	f7ff bb4a 	b.w	8009b8e <_dtoa_r+0x2e>
 800a4fa:	692a      	ldr	r2, [r5, #16]
 800a4fc:	f105 010c 	add.w	r1, r5, #12
 800a500:	300c      	adds	r0, #12
 800a502:	3202      	adds	r2, #2
 800a504:	0092      	lsls	r2, r2, #2
 800a506:	f002 faf3 	bl	800caf0 <memcpy>
 800a50a:	2201      	movs	r2, #1
 800a50c:	4631      	mov	r1, r6
 800a50e:	4648      	mov	r0, r9
 800a510:	f000 fc4c 	bl	800adac <__lshift>
 800a514:	f10a 0301 	add.w	r3, sl, #1
 800a518:	462f      	mov	r7, r5
 800a51a:	4605      	mov	r5, r0
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	eb0a 030b 	add.w	r3, sl, fp
 800a522:	9308      	str	r3, [sp, #32]
 800a524:	9b04      	ldr	r3, [sp, #16]
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	9306      	str	r3, [sp, #24]
 800a52c:	9b00      	ldr	r3, [sp, #0]
 800a52e:	4621      	mov	r1, r4
 800a530:	9802      	ldr	r0, [sp, #8]
 800a532:	f103 3bff 	add.w	fp, r3, #4294967295
 800a536:	f7ff fa85 	bl	8009a44 <quorem>
 800a53a:	4603      	mov	r3, r0
 800a53c:	4639      	mov	r1, r7
 800a53e:	9003      	str	r0, [sp, #12]
 800a540:	3330      	adds	r3, #48	@ 0x30
 800a542:	9802      	ldr	r0, [sp, #8]
 800a544:	9309      	str	r3, [sp, #36]	@ 0x24
 800a546:	f000 fc9d 	bl	800ae84 <__mcmp>
 800a54a:	462a      	mov	r2, r5
 800a54c:	9004      	str	r0, [sp, #16]
 800a54e:	4621      	mov	r1, r4
 800a550:	4648      	mov	r0, r9
 800a552:	f000 fcb3 	bl	800aebc <__mdiff>
 800a556:	68c2      	ldr	r2, [r0, #12]
 800a558:	4606      	mov	r6, r0
 800a55a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a55c:	bb02      	cbnz	r2, 800a5a0 <_dtoa_r+0xa40>
 800a55e:	4601      	mov	r1, r0
 800a560:	9802      	ldr	r0, [sp, #8]
 800a562:	f000 fc8f 	bl	800ae84 <__mcmp>
 800a566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a568:	4602      	mov	r2, r0
 800a56a:	4631      	mov	r1, r6
 800a56c:	4648      	mov	r0, r9
 800a56e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a570:	9309      	str	r3, [sp, #36]	@ 0x24
 800a572:	f000 fa07 	bl	800a984 <_Bfree>
 800a576:	9b07      	ldr	r3, [sp, #28]
 800a578:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a57a:	9e00      	ldr	r6, [sp, #0]
 800a57c:	ea42 0103 	orr.w	r1, r2, r3
 800a580:	9b06      	ldr	r3, [sp, #24]
 800a582:	4319      	orrs	r1, r3
 800a584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a586:	d10d      	bne.n	800a5a4 <_dtoa_r+0xa44>
 800a588:	2b39      	cmp	r3, #57	@ 0x39
 800a58a:	d027      	beq.n	800a5dc <_dtoa_r+0xa7c>
 800a58c:	9a04      	ldr	r2, [sp, #16]
 800a58e:	2a00      	cmp	r2, #0
 800a590:	dd01      	ble.n	800a596 <_dtoa_r+0xa36>
 800a592:	9b03      	ldr	r3, [sp, #12]
 800a594:	3331      	adds	r3, #49	@ 0x31
 800a596:	f88b 3000 	strb.w	r3, [fp]
 800a59a:	e52e      	b.n	8009ffa <_dtoa_r+0x49a>
 800a59c:	4628      	mov	r0, r5
 800a59e:	e7b9      	b.n	800a514 <_dtoa_r+0x9b4>
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	e7e2      	b.n	800a56a <_dtoa_r+0xa0a>
 800a5a4:	9904      	ldr	r1, [sp, #16]
 800a5a6:	2900      	cmp	r1, #0
 800a5a8:	db04      	blt.n	800a5b4 <_dtoa_r+0xa54>
 800a5aa:	9807      	ldr	r0, [sp, #28]
 800a5ac:	4301      	orrs	r1, r0
 800a5ae:	9806      	ldr	r0, [sp, #24]
 800a5b0:	4301      	orrs	r1, r0
 800a5b2:	d120      	bne.n	800a5f6 <_dtoa_r+0xa96>
 800a5b4:	2a00      	cmp	r2, #0
 800a5b6:	ddee      	ble.n	800a596 <_dtoa_r+0xa36>
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	9902      	ldr	r1, [sp, #8]
 800a5bc:	4648      	mov	r0, r9
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	f000 fbf4 	bl	800adac <__lshift>
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	9002      	str	r0, [sp, #8]
 800a5c8:	f000 fc5c 	bl	800ae84 <__mcmp>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	9b00      	ldr	r3, [sp, #0]
 800a5d0:	dc02      	bgt.n	800a5d8 <_dtoa_r+0xa78>
 800a5d2:	d1e0      	bne.n	800a596 <_dtoa_r+0xa36>
 800a5d4:	07da      	lsls	r2, r3, #31
 800a5d6:	d5de      	bpl.n	800a596 <_dtoa_r+0xa36>
 800a5d8:	2b39      	cmp	r3, #57	@ 0x39
 800a5da:	d1da      	bne.n	800a592 <_dtoa_r+0xa32>
 800a5dc:	2339      	movs	r3, #57	@ 0x39
 800a5de:	f88b 3000 	strb.w	r3, [fp]
 800a5e2:	4633      	mov	r3, r6
 800a5e4:	461e      	mov	r6, r3
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a5ec:	2a39      	cmp	r2, #57	@ 0x39
 800a5ee:	d04f      	beq.n	800a690 <_dtoa_r+0xb30>
 800a5f0:	3201      	adds	r2, #1
 800a5f2:	701a      	strb	r2, [r3, #0]
 800a5f4:	e501      	b.n	8009ffa <_dtoa_r+0x49a>
 800a5f6:	2a00      	cmp	r2, #0
 800a5f8:	dd03      	ble.n	800a602 <_dtoa_r+0xaa2>
 800a5fa:	2b39      	cmp	r3, #57	@ 0x39
 800a5fc:	d0ee      	beq.n	800a5dc <_dtoa_r+0xa7c>
 800a5fe:	3301      	adds	r3, #1
 800a600:	e7c9      	b.n	800a596 <_dtoa_r+0xa36>
 800a602:	9a00      	ldr	r2, [sp, #0]
 800a604:	9908      	ldr	r1, [sp, #32]
 800a606:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a60a:	428a      	cmp	r2, r1
 800a60c:	d029      	beq.n	800a662 <_dtoa_r+0xb02>
 800a60e:	2300      	movs	r3, #0
 800a610:	220a      	movs	r2, #10
 800a612:	9902      	ldr	r1, [sp, #8]
 800a614:	4648      	mov	r0, r9
 800a616:	f000 f9d7 	bl	800a9c8 <__multadd>
 800a61a:	42af      	cmp	r7, r5
 800a61c:	9002      	str	r0, [sp, #8]
 800a61e:	f04f 0300 	mov.w	r3, #0
 800a622:	f04f 020a 	mov.w	r2, #10
 800a626:	4639      	mov	r1, r7
 800a628:	4648      	mov	r0, r9
 800a62a:	d107      	bne.n	800a63c <_dtoa_r+0xadc>
 800a62c:	f000 f9cc 	bl	800a9c8 <__multadd>
 800a630:	4607      	mov	r7, r0
 800a632:	4605      	mov	r5, r0
 800a634:	9b00      	ldr	r3, [sp, #0]
 800a636:	3301      	adds	r3, #1
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	e777      	b.n	800a52c <_dtoa_r+0x9cc>
 800a63c:	f000 f9c4 	bl	800a9c8 <__multadd>
 800a640:	4629      	mov	r1, r5
 800a642:	4607      	mov	r7, r0
 800a644:	2300      	movs	r3, #0
 800a646:	220a      	movs	r2, #10
 800a648:	4648      	mov	r0, r9
 800a64a:	f000 f9bd 	bl	800a9c8 <__multadd>
 800a64e:	4605      	mov	r5, r0
 800a650:	e7f0      	b.n	800a634 <_dtoa_r+0xad4>
 800a652:	f1bb 0f00 	cmp.w	fp, #0
 800a656:	f04f 0700 	mov.w	r7, #0
 800a65a:	bfcc      	ite	gt
 800a65c:	465e      	movgt	r6, fp
 800a65e:	2601      	movle	r6, #1
 800a660:	4456      	add	r6, sl
 800a662:	2201      	movs	r2, #1
 800a664:	9902      	ldr	r1, [sp, #8]
 800a666:	4648      	mov	r0, r9
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	f000 fb9f 	bl	800adac <__lshift>
 800a66e:	4621      	mov	r1, r4
 800a670:	9002      	str	r0, [sp, #8]
 800a672:	f000 fc07 	bl	800ae84 <__mcmp>
 800a676:	2800      	cmp	r0, #0
 800a678:	dcb3      	bgt.n	800a5e2 <_dtoa_r+0xa82>
 800a67a:	d102      	bne.n	800a682 <_dtoa_r+0xb22>
 800a67c:	9b00      	ldr	r3, [sp, #0]
 800a67e:	07db      	lsls	r3, r3, #31
 800a680:	d4af      	bmi.n	800a5e2 <_dtoa_r+0xa82>
 800a682:	4633      	mov	r3, r6
 800a684:	461e      	mov	r6, r3
 800a686:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a68a:	2a30      	cmp	r2, #48	@ 0x30
 800a68c:	d0fa      	beq.n	800a684 <_dtoa_r+0xb24>
 800a68e:	e4b4      	b.n	8009ffa <_dtoa_r+0x49a>
 800a690:	459a      	cmp	sl, r3
 800a692:	d1a7      	bne.n	800a5e4 <_dtoa_r+0xa84>
 800a694:	2331      	movs	r3, #49	@ 0x31
 800a696:	f108 0801 	add.w	r8, r8, #1
 800a69a:	f88a 3000 	strb.w	r3, [sl]
 800a69e:	e4ac      	b.n	8009ffa <_dtoa_r+0x49a>
 800a6a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a6a2:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a700 <_dtoa_r+0xba0>
 800a6a6:	b11b      	cbz	r3, 800a6b0 <_dtoa_r+0xb50>
 800a6a8:	f10a 0308 	add.w	r3, sl, #8
 800a6ac:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	b017      	add	sp, #92	@ 0x5c
 800a6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b8:	9b07      	ldr	r3, [sp, #28]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	f77f ae2d 	ble.w	800a31a <_dtoa_r+0x7ba>
 800a6c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6c2:	9308      	str	r3, [sp, #32]
 800a6c4:	2001      	movs	r0, #1
 800a6c6:	e64c      	b.n	800a362 <_dtoa_r+0x802>
 800a6c8:	f1bb 0f00 	cmp.w	fp, #0
 800a6cc:	f77f aed8 	ble.w	800a480 <_dtoa_r+0x920>
 800a6d0:	4656      	mov	r6, sl
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	9802      	ldr	r0, [sp, #8]
 800a6d6:	f7ff f9b5 	bl	8009a44 <quorem>
 800a6da:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a6de:	f806 3b01 	strb.w	r3, [r6], #1
 800a6e2:	eba6 020a 	sub.w	r2, r6, sl
 800a6e6:	4593      	cmp	fp, r2
 800a6e8:	ddb3      	ble.n	800a652 <_dtoa_r+0xaf2>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	220a      	movs	r2, #10
 800a6ee:	9902      	ldr	r1, [sp, #8]
 800a6f0:	4648      	mov	r0, r9
 800a6f2:	f000 f969 	bl	800a9c8 <__multadd>
 800a6f6:	9002      	str	r0, [sp, #8]
 800a6f8:	e7eb      	b.n	800a6d2 <_dtoa_r+0xb72>
 800a6fa:	bf00      	nop
 800a6fc:	0800db1f 	.word	0x0800db1f
 800a700:	0800daa3 	.word	0x0800daa3

0800a704 <_free_r>:
 800a704:	b538      	push	{r3, r4, r5, lr}
 800a706:	4605      	mov	r5, r0
 800a708:	2900      	cmp	r1, #0
 800a70a:	d041      	beq.n	800a790 <_free_r+0x8c>
 800a70c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a710:	1f0c      	subs	r4, r1, #4
 800a712:	2b00      	cmp	r3, #0
 800a714:	bfb8      	it	lt
 800a716:	18e4      	addlt	r4, r4, r3
 800a718:	f000 f8e8 	bl	800a8ec <__malloc_lock>
 800a71c:	4a1d      	ldr	r2, [pc, #116]	@ (800a794 <_free_r+0x90>)
 800a71e:	6813      	ldr	r3, [r2, #0]
 800a720:	b933      	cbnz	r3, 800a730 <_free_r+0x2c>
 800a722:	6063      	str	r3, [r4, #4]
 800a724:	6014      	str	r4, [r2, #0]
 800a726:	4628      	mov	r0, r5
 800a728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a72c:	f000 b8e4 	b.w	800a8f8 <__malloc_unlock>
 800a730:	42a3      	cmp	r3, r4
 800a732:	d908      	bls.n	800a746 <_free_r+0x42>
 800a734:	6820      	ldr	r0, [r4, #0]
 800a736:	1821      	adds	r1, r4, r0
 800a738:	428b      	cmp	r3, r1
 800a73a:	bf01      	itttt	eq
 800a73c:	6819      	ldreq	r1, [r3, #0]
 800a73e:	685b      	ldreq	r3, [r3, #4]
 800a740:	1809      	addeq	r1, r1, r0
 800a742:	6021      	streq	r1, [r4, #0]
 800a744:	e7ed      	b.n	800a722 <_free_r+0x1e>
 800a746:	461a      	mov	r2, r3
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	b10b      	cbz	r3, 800a750 <_free_r+0x4c>
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	d9fa      	bls.n	800a746 <_free_r+0x42>
 800a750:	6811      	ldr	r1, [r2, #0]
 800a752:	1850      	adds	r0, r2, r1
 800a754:	42a0      	cmp	r0, r4
 800a756:	d10b      	bne.n	800a770 <_free_r+0x6c>
 800a758:	6820      	ldr	r0, [r4, #0]
 800a75a:	4401      	add	r1, r0
 800a75c:	1850      	adds	r0, r2, r1
 800a75e:	6011      	str	r1, [r2, #0]
 800a760:	4283      	cmp	r3, r0
 800a762:	d1e0      	bne.n	800a726 <_free_r+0x22>
 800a764:	6818      	ldr	r0, [r3, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	4408      	add	r0, r1
 800a76a:	6053      	str	r3, [r2, #4]
 800a76c:	6010      	str	r0, [r2, #0]
 800a76e:	e7da      	b.n	800a726 <_free_r+0x22>
 800a770:	d902      	bls.n	800a778 <_free_r+0x74>
 800a772:	230c      	movs	r3, #12
 800a774:	602b      	str	r3, [r5, #0]
 800a776:	e7d6      	b.n	800a726 <_free_r+0x22>
 800a778:	6820      	ldr	r0, [r4, #0]
 800a77a:	1821      	adds	r1, r4, r0
 800a77c:	428b      	cmp	r3, r1
 800a77e:	bf02      	ittt	eq
 800a780:	6819      	ldreq	r1, [r3, #0]
 800a782:	685b      	ldreq	r3, [r3, #4]
 800a784:	1809      	addeq	r1, r1, r0
 800a786:	6063      	str	r3, [r4, #4]
 800a788:	bf08      	it	eq
 800a78a:	6021      	streq	r1, [r4, #0]
 800a78c:	6054      	str	r4, [r2, #4]
 800a78e:	e7ca      	b.n	800a726 <_free_r+0x22>
 800a790:	bd38      	pop	{r3, r4, r5, pc}
 800a792:	bf00      	nop
 800a794:	200004f8 	.word	0x200004f8

0800a798 <malloc>:
 800a798:	4b02      	ldr	r3, [pc, #8]	@ (800a7a4 <malloc+0xc>)
 800a79a:	4601      	mov	r1, r0
 800a79c:	6818      	ldr	r0, [r3, #0]
 800a79e:	f000 b825 	b.w	800a7ec <_malloc_r>
 800a7a2:	bf00      	nop
 800a7a4:	2000001c 	.word	0x2000001c

0800a7a8 <sbrk_aligned>:
 800a7a8:	b570      	push	{r4, r5, r6, lr}
 800a7aa:	4e0f      	ldr	r6, [pc, #60]	@ (800a7e8 <sbrk_aligned+0x40>)
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	4605      	mov	r5, r0
 800a7b0:	6831      	ldr	r1, [r6, #0]
 800a7b2:	b911      	cbnz	r1, 800a7ba <sbrk_aligned+0x12>
 800a7b4:	f002 f98c 	bl	800cad0 <_sbrk_r>
 800a7b8:	6030      	str	r0, [r6, #0]
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f002 f987 	bl	800cad0 <_sbrk_r>
 800a7c2:	1c43      	adds	r3, r0, #1
 800a7c4:	d103      	bne.n	800a7ce <sbrk_aligned+0x26>
 800a7c6:	f04f 34ff 	mov.w	r4, #4294967295
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	bd70      	pop	{r4, r5, r6, pc}
 800a7ce:	1cc4      	adds	r4, r0, #3
 800a7d0:	f024 0403 	bic.w	r4, r4, #3
 800a7d4:	42a0      	cmp	r0, r4
 800a7d6:	d0f8      	beq.n	800a7ca <sbrk_aligned+0x22>
 800a7d8:	1a21      	subs	r1, r4, r0
 800a7da:	4628      	mov	r0, r5
 800a7dc:	f002 f978 	bl	800cad0 <_sbrk_r>
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	d1f2      	bne.n	800a7ca <sbrk_aligned+0x22>
 800a7e4:	e7ef      	b.n	800a7c6 <sbrk_aligned+0x1e>
 800a7e6:	bf00      	nop
 800a7e8:	200004f4 	.word	0x200004f4

0800a7ec <_malloc_r>:
 800a7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f0:	1ccd      	adds	r5, r1, #3
 800a7f2:	4606      	mov	r6, r0
 800a7f4:	f025 0503 	bic.w	r5, r5, #3
 800a7f8:	3508      	adds	r5, #8
 800a7fa:	2d0c      	cmp	r5, #12
 800a7fc:	bf38      	it	cc
 800a7fe:	250c      	movcc	r5, #12
 800a800:	2d00      	cmp	r5, #0
 800a802:	db01      	blt.n	800a808 <_malloc_r+0x1c>
 800a804:	42a9      	cmp	r1, r5
 800a806:	d904      	bls.n	800a812 <_malloc_r+0x26>
 800a808:	230c      	movs	r3, #12
 800a80a:	6033      	str	r3, [r6, #0]
 800a80c:	2000      	movs	r0, #0
 800a80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a812:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8e8 <_malloc_r+0xfc>
 800a816:	f000 f869 	bl	800a8ec <__malloc_lock>
 800a81a:	f8d8 3000 	ldr.w	r3, [r8]
 800a81e:	461c      	mov	r4, r3
 800a820:	bb44      	cbnz	r4, 800a874 <_malloc_r+0x88>
 800a822:	4629      	mov	r1, r5
 800a824:	4630      	mov	r0, r6
 800a826:	f7ff ffbf 	bl	800a7a8 <sbrk_aligned>
 800a82a:	1c43      	adds	r3, r0, #1
 800a82c:	4604      	mov	r4, r0
 800a82e:	d158      	bne.n	800a8e2 <_malloc_r+0xf6>
 800a830:	f8d8 4000 	ldr.w	r4, [r8]
 800a834:	4627      	mov	r7, r4
 800a836:	2f00      	cmp	r7, #0
 800a838:	d143      	bne.n	800a8c2 <_malloc_r+0xd6>
 800a83a:	2c00      	cmp	r4, #0
 800a83c:	d04b      	beq.n	800a8d6 <_malloc_r+0xea>
 800a83e:	6823      	ldr	r3, [r4, #0]
 800a840:	4639      	mov	r1, r7
 800a842:	4630      	mov	r0, r6
 800a844:	eb04 0903 	add.w	r9, r4, r3
 800a848:	f002 f942 	bl	800cad0 <_sbrk_r>
 800a84c:	4581      	cmp	r9, r0
 800a84e:	d142      	bne.n	800a8d6 <_malloc_r+0xea>
 800a850:	6821      	ldr	r1, [r4, #0]
 800a852:	4630      	mov	r0, r6
 800a854:	1a6d      	subs	r5, r5, r1
 800a856:	4629      	mov	r1, r5
 800a858:	f7ff ffa6 	bl	800a7a8 <sbrk_aligned>
 800a85c:	3001      	adds	r0, #1
 800a85e:	d03a      	beq.n	800a8d6 <_malloc_r+0xea>
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	442b      	add	r3, r5
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	f8d8 3000 	ldr.w	r3, [r8]
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	bb62      	cbnz	r2, 800a8c8 <_malloc_r+0xdc>
 800a86e:	f8c8 7000 	str.w	r7, [r8]
 800a872:	e00f      	b.n	800a894 <_malloc_r+0xa8>
 800a874:	6822      	ldr	r2, [r4, #0]
 800a876:	1b52      	subs	r2, r2, r5
 800a878:	d420      	bmi.n	800a8bc <_malloc_r+0xd0>
 800a87a:	2a0b      	cmp	r2, #11
 800a87c:	d917      	bls.n	800a8ae <_malloc_r+0xc2>
 800a87e:	1961      	adds	r1, r4, r5
 800a880:	42a3      	cmp	r3, r4
 800a882:	6025      	str	r5, [r4, #0]
 800a884:	bf18      	it	ne
 800a886:	6059      	strne	r1, [r3, #4]
 800a888:	6863      	ldr	r3, [r4, #4]
 800a88a:	bf08      	it	eq
 800a88c:	f8c8 1000 	streq.w	r1, [r8]
 800a890:	5162      	str	r2, [r4, r5]
 800a892:	604b      	str	r3, [r1, #4]
 800a894:	4630      	mov	r0, r6
 800a896:	f000 f82f 	bl	800a8f8 <__malloc_unlock>
 800a89a:	f104 000b 	add.w	r0, r4, #11
 800a89e:	1d23      	adds	r3, r4, #4
 800a8a0:	f020 0007 	bic.w	r0, r0, #7
 800a8a4:	1ac2      	subs	r2, r0, r3
 800a8a6:	bf1c      	itt	ne
 800a8a8:	1a1b      	subne	r3, r3, r0
 800a8aa:	50a3      	strne	r3, [r4, r2]
 800a8ac:	e7af      	b.n	800a80e <_malloc_r+0x22>
 800a8ae:	6862      	ldr	r2, [r4, #4]
 800a8b0:	42a3      	cmp	r3, r4
 800a8b2:	bf0c      	ite	eq
 800a8b4:	f8c8 2000 	streq.w	r2, [r8]
 800a8b8:	605a      	strne	r2, [r3, #4]
 800a8ba:	e7eb      	b.n	800a894 <_malloc_r+0xa8>
 800a8bc:	4623      	mov	r3, r4
 800a8be:	6864      	ldr	r4, [r4, #4]
 800a8c0:	e7ae      	b.n	800a820 <_malloc_r+0x34>
 800a8c2:	463c      	mov	r4, r7
 800a8c4:	687f      	ldr	r7, [r7, #4]
 800a8c6:	e7b6      	b.n	800a836 <_malloc_r+0x4a>
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	42a3      	cmp	r3, r4
 800a8ce:	d1fb      	bne.n	800a8c8 <_malloc_r+0xdc>
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	6053      	str	r3, [r2, #4]
 800a8d4:	e7de      	b.n	800a894 <_malloc_r+0xa8>
 800a8d6:	230c      	movs	r3, #12
 800a8d8:	4630      	mov	r0, r6
 800a8da:	6033      	str	r3, [r6, #0]
 800a8dc:	f000 f80c 	bl	800a8f8 <__malloc_unlock>
 800a8e0:	e794      	b.n	800a80c <_malloc_r+0x20>
 800a8e2:	6005      	str	r5, [r0, #0]
 800a8e4:	e7d6      	b.n	800a894 <_malloc_r+0xa8>
 800a8e6:	bf00      	nop
 800a8e8:	200004f8 	.word	0x200004f8

0800a8ec <__malloc_lock>:
 800a8ec:	4801      	ldr	r0, [pc, #4]	@ (800a8f4 <__malloc_lock+0x8>)
 800a8ee:	f7ff b892 	b.w	8009a16 <__retarget_lock_acquire_recursive>
 800a8f2:	bf00      	nop
 800a8f4:	200004f0 	.word	0x200004f0

0800a8f8 <__malloc_unlock>:
 800a8f8:	4801      	ldr	r0, [pc, #4]	@ (800a900 <__malloc_unlock+0x8>)
 800a8fa:	f7ff b88d 	b.w	8009a18 <__retarget_lock_release_recursive>
 800a8fe:	bf00      	nop
 800a900:	200004f0 	.word	0x200004f0

0800a904 <_Balloc>:
 800a904:	b570      	push	{r4, r5, r6, lr}
 800a906:	69c6      	ldr	r6, [r0, #28]
 800a908:	4604      	mov	r4, r0
 800a90a:	460d      	mov	r5, r1
 800a90c:	b976      	cbnz	r6, 800a92c <_Balloc+0x28>
 800a90e:	2010      	movs	r0, #16
 800a910:	f7ff ff42 	bl	800a798 <malloc>
 800a914:	4602      	mov	r2, r0
 800a916:	61e0      	str	r0, [r4, #28]
 800a918:	b920      	cbnz	r0, 800a924 <_Balloc+0x20>
 800a91a:	4b18      	ldr	r3, [pc, #96]	@ (800a97c <_Balloc+0x78>)
 800a91c:	216b      	movs	r1, #107	@ 0x6b
 800a91e:	4818      	ldr	r0, [pc, #96]	@ (800a980 <_Balloc+0x7c>)
 800a920:	f002 f8fe 	bl	800cb20 <__assert_func>
 800a924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a928:	6006      	str	r6, [r0, #0]
 800a92a:	60c6      	str	r6, [r0, #12]
 800a92c:	69e6      	ldr	r6, [r4, #28]
 800a92e:	68f3      	ldr	r3, [r6, #12]
 800a930:	b183      	cbz	r3, 800a954 <_Balloc+0x50>
 800a932:	69e3      	ldr	r3, [r4, #28]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a93a:	b9b8      	cbnz	r0, 800a96c <_Balloc+0x68>
 800a93c:	2101      	movs	r1, #1
 800a93e:	4620      	mov	r0, r4
 800a940:	fa01 f605 	lsl.w	r6, r1, r5
 800a944:	1d72      	adds	r2, r6, #5
 800a946:	0092      	lsls	r2, r2, #2
 800a948:	f002 f908 	bl	800cb5c <_calloc_r>
 800a94c:	b160      	cbz	r0, 800a968 <_Balloc+0x64>
 800a94e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a952:	e00e      	b.n	800a972 <_Balloc+0x6e>
 800a954:	2221      	movs	r2, #33	@ 0x21
 800a956:	2104      	movs	r1, #4
 800a958:	4620      	mov	r0, r4
 800a95a:	f002 f8ff 	bl	800cb5c <_calloc_r>
 800a95e:	69e3      	ldr	r3, [r4, #28]
 800a960:	60f0      	str	r0, [r6, #12]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1e4      	bne.n	800a932 <_Balloc+0x2e>
 800a968:	2000      	movs	r0, #0
 800a96a:	bd70      	pop	{r4, r5, r6, pc}
 800a96c:	6802      	ldr	r2, [r0, #0]
 800a96e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a972:	2300      	movs	r3, #0
 800a974:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a978:	e7f7      	b.n	800a96a <_Balloc+0x66>
 800a97a:	bf00      	nop
 800a97c:	0800dab0 	.word	0x0800dab0
 800a980:	0800db30 	.word	0x0800db30

0800a984 <_Bfree>:
 800a984:	b570      	push	{r4, r5, r6, lr}
 800a986:	69c6      	ldr	r6, [r0, #28]
 800a988:	4605      	mov	r5, r0
 800a98a:	460c      	mov	r4, r1
 800a98c:	b976      	cbnz	r6, 800a9ac <_Bfree+0x28>
 800a98e:	2010      	movs	r0, #16
 800a990:	f7ff ff02 	bl	800a798 <malloc>
 800a994:	4602      	mov	r2, r0
 800a996:	61e8      	str	r0, [r5, #28]
 800a998:	b920      	cbnz	r0, 800a9a4 <_Bfree+0x20>
 800a99a:	4b09      	ldr	r3, [pc, #36]	@ (800a9c0 <_Bfree+0x3c>)
 800a99c:	218f      	movs	r1, #143	@ 0x8f
 800a99e:	4809      	ldr	r0, [pc, #36]	@ (800a9c4 <_Bfree+0x40>)
 800a9a0:	f002 f8be 	bl	800cb20 <__assert_func>
 800a9a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9a8:	6006      	str	r6, [r0, #0]
 800a9aa:	60c6      	str	r6, [r0, #12]
 800a9ac:	b13c      	cbz	r4, 800a9be <_Bfree+0x3a>
 800a9ae:	69eb      	ldr	r3, [r5, #28]
 800a9b0:	6862      	ldr	r2, [r4, #4]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9b8:	6021      	str	r1, [r4, #0]
 800a9ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9be:	bd70      	pop	{r4, r5, r6, pc}
 800a9c0:	0800dab0 	.word	0x0800dab0
 800a9c4:	0800db30 	.word	0x0800db30

0800a9c8 <__multadd>:
 800a9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9cc:	f101 0c14 	add.w	ip, r1, #20
 800a9d0:	4607      	mov	r7, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	461e      	mov	r6, r3
 800a9d6:	690d      	ldr	r5, [r1, #16]
 800a9d8:	2000      	movs	r0, #0
 800a9da:	f8dc 3000 	ldr.w	r3, [ip]
 800a9de:	3001      	adds	r0, #1
 800a9e0:	b299      	uxth	r1, r3
 800a9e2:	4285      	cmp	r5, r0
 800a9e4:	fb02 6101 	mla	r1, r2, r1, r6
 800a9e8:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a9ec:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800a9f0:	b289      	uxth	r1, r1
 800a9f2:	fb02 3306 	mla	r3, r2, r6, r3
 800a9f6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a9fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a9fe:	f84c 1b04 	str.w	r1, [ip], #4
 800aa02:	dcea      	bgt.n	800a9da <__multadd+0x12>
 800aa04:	b30e      	cbz	r6, 800aa4a <__multadd+0x82>
 800aa06:	68a3      	ldr	r3, [r4, #8]
 800aa08:	42ab      	cmp	r3, r5
 800aa0a:	dc19      	bgt.n	800aa40 <__multadd+0x78>
 800aa0c:	6861      	ldr	r1, [r4, #4]
 800aa0e:	4638      	mov	r0, r7
 800aa10:	3101      	adds	r1, #1
 800aa12:	f7ff ff77 	bl	800a904 <_Balloc>
 800aa16:	4680      	mov	r8, r0
 800aa18:	b928      	cbnz	r0, 800aa26 <__multadd+0x5e>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	4b0c      	ldr	r3, [pc, #48]	@ (800aa50 <__multadd+0x88>)
 800aa1e:	21ba      	movs	r1, #186	@ 0xba
 800aa20:	480c      	ldr	r0, [pc, #48]	@ (800aa54 <__multadd+0x8c>)
 800aa22:	f002 f87d 	bl	800cb20 <__assert_func>
 800aa26:	6922      	ldr	r2, [r4, #16]
 800aa28:	f104 010c 	add.w	r1, r4, #12
 800aa2c:	300c      	adds	r0, #12
 800aa2e:	3202      	adds	r2, #2
 800aa30:	0092      	lsls	r2, r2, #2
 800aa32:	f002 f85d 	bl	800caf0 <memcpy>
 800aa36:	4621      	mov	r1, r4
 800aa38:	4644      	mov	r4, r8
 800aa3a:	4638      	mov	r0, r7
 800aa3c:	f7ff ffa2 	bl	800a984 <_Bfree>
 800aa40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa44:	3501      	adds	r5, #1
 800aa46:	615e      	str	r6, [r3, #20]
 800aa48:	6125      	str	r5, [r4, #16]
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa50:	0800db1f 	.word	0x0800db1f
 800aa54:	0800db30 	.word	0x0800db30

0800aa58 <__s2b>:
 800aa58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa5c:	4615      	mov	r5, r2
 800aa5e:	461f      	mov	r7, r3
 800aa60:	2209      	movs	r2, #9
 800aa62:	3308      	adds	r3, #8
 800aa64:	460c      	mov	r4, r1
 800aa66:	4606      	mov	r6, r0
 800aa68:	2100      	movs	r1, #0
 800aa6a:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa6e:	2201      	movs	r2, #1
 800aa70:	429a      	cmp	r2, r3
 800aa72:	db09      	blt.n	800aa88 <__s2b+0x30>
 800aa74:	4630      	mov	r0, r6
 800aa76:	f7ff ff45 	bl	800a904 <_Balloc>
 800aa7a:	b940      	cbnz	r0, 800aa8e <__s2b+0x36>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	4b19      	ldr	r3, [pc, #100]	@ (800aae4 <__s2b+0x8c>)
 800aa80:	21d3      	movs	r1, #211	@ 0xd3
 800aa82:	4819      	ldr	r0, [pc, #100]	@ (800aae8 <__s2b+0x90>)
 800aa84:	f002 f84c 	bl	800cb20 <__assert_func>
 800aa88:	0052      	lsls	r2, r2, #1
 800aa8a:	3101      	adds	r1, #1
 800aa8c:	e7f0      	b.n	800aa70 <__s2b+0x18>
 800aa8e:	9b08      	ldr	r3, [sp, #32]
 800aa90:	2d09      	cmp	r5, #9
 800aa92:	6143      	str	r3, [r0, #20]
 800aa94:	f04f 0301 	mov.w	r3, #1
 800aa98:	6103      	str	r3, [r0, #16]
 800aa9a:	dd16      	ble.n	800aaca <__s2b+0x72>
 800aa9c:	f104 0909 	add.w	r9, r4, #9
 800aaa0:	442c      	add	r4, r5
 800aaa2:	46c8      	mov	r8, r9
 800aaa4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aaa8:	4601      	mov	r1, r0
 800aaaa:	220a      	movs	r2, #10
 800aaac:	4630      	mov	r0, r6
 800aaae:	3b30      	subs	r3, #48	@ 0x30
 800aab0:	f7ff ff8a 	bl	800a9c8 <__multadd>
 800aab4:	45a0      	cmp	r8, r4
 800aab6:	d1f5      	bne.n	800aaa4 <__s2b+0x4c>
 800aab8:	f1a5 0408 	sub.w	r4, r5, #8
 800aabc:	444c      	add	r4, r9
 800aabe:	1b2d      	subs	r5, r5, r4
 800aac0:	1963      	adds	r3, r4, r5
 800aac2:	42bb      	cmp	r3, r7
 800aac4:	db04      	blt.n	800aad0 <__s2b+0x78>
 800aac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaca:	340a      	adds	r4, #10
 800aacc:	2509      	movs	r5, #9
 800aace:	e7f6      	b.n	800aabe <__s2b+0x66>
 800aad0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aad4:	4601      	mov	r1, r0
 800aad6:	220a      	movs	r2, #10
 800aad8:	4630      	mov	r0, r6
 800aada:	3b30      	subs	r3, #48	@ 0x30
 800aadc:	f7ff ff74 	bl	800a9c8 <__multadd>
 800aae0:	e7ee      	b.n	800aac0 <__s2b+0x68>
 800aae2:	bf00      	nop
 800aae4:	0800db1f 	.word	0x0800db1f
 800aae8:	0800db30 	.word	0x0800db30

0800aaec <__hi0bits>:
 800aaec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	bf36      	itet	cc
 800aaf4:	0403      	lslcc	r3, r0, #16
 800aaf6:	2000      	movcs	r0, #0
 800aaf8:	2010      	movcc	r0, #16
 800aafa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aafe:	bf3c      	itt	cc
 800ab00:	021b      	lslcc	r3, r3, #8
 800ab02:	3008      	addcc	r0, #8
 800ab04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab08:	bf3c      	itt	cc
 800ab0a:	011b      	lslcc	r3, r3, #4
 800ab0c:	3004      	addcc	r0, #4
 800ab0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab12:	bf3c      	itt	cc
 800ab14:	009b      	lslcc	r3, r3, #2
 800ab16:	3002      	addcc	r0, #2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	db05      	blt.n	800ab28 <__hi0bits+0x3c>
 800ab1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab20:	f100 0001 	add.w	r0, r0, #1
 800ab24:	bf08      	it	eq
 800ab26:	2020      	moveq	r0, #32
 800ab28:	4770      	bx	lr

0800ab2a <__lo0bits>:
 800ab2a:	6803      	ldr	r3, [r0, #0]
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	f013 0007 	ands.w	r0, r3, #7
 800ab32:	d00b      	beq.n	800ab4c <__lo0bits+0x22>
 800ab34:	07d9      	lsls	r1, r3, #31
 800ab36:	d421      	bmi.n	800ab7c <__lo0bits+0x52>
 800ab38:	0798      	lsls	r0, r3, #30
 800ab3a:	bf47      	ittee	mi
 800ab3c:	085b      	lsrmi	r3, r3, #1
 800ab3e:	2001      	movmi	r0, #1
 800ab40:	089b      	lsrpl	r3, r3, #2
 800ab42:	2002      	movpl	r0, #2
 800ab44:	bf4c      	ite	mi
 800ab46:	6013      	strmi	r3, [r2, #0]
 800ab48:	6013      	strpl	r3, [r2, #0]
 800ab4a:	4770      	bx	lr
 800ab4c:	b299      	uxth	r1, r3
 800ab4e:	b909      	cbnz	r1, 800ab54 <__lo0bits+0x2a>
 800ab50:	0c1b      	lsrs	r3, r3, #16
 800ab52:	2010      	movs	r0, #16
 800ab54:	b2d9      	uxtb	r1, r3
 800ab56:	b909      	cbnz	r1, 800ab5c <__lo0bits+0x32>
 800ab58:	3008      	adds	r0, #8
 800ab5a:	0a1b      	lsrs	r3, r3, #8
 800ab5c:	0719      	lsls	r1, r3, #28
 800ab5e:	bf04      	itt	eq
 800ab60:	091b      	lsreq	r3, r3, #4
 800ab62:	3004      	addeq	r0, #4
 800ab64:	0799      	lsls	r1, r3, #30
 800ab66:	bf04      	itt	eq
 800ab68:	089b      	lsreq	r3, r3, #2
 800ab6a:	3002      	addeq	r0, #2
 800ab6c:	07d9      	lsls	r1, r3, #31
 800ab6e:	d403      	bmi.n	800ab78 <__lo0bits+0x4e>
 800ab70:	085b      	lsrs	r3, r3, #1
 800ab72:	f100 0001 	add.w	r0, r0, #1
 800ab76:	d003      	beq.n	800ab80 <__lo0bits+0x56>
 800ab78:	6013      	str	r3, [r2, #0]
 800ab7a:	4770      	bx	lr
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	4770      	bx	lr
 800ab80:	2020      	movs	r0, #32
 800ab82:	4770      	bx	lr

0800ab84 <__i2b>:
 800ab84:	b510      	push	{r4, lr}
 800ab86:	460c      	mov	r4, r1
 800ab88:	2101      	movs	r1, #1
 800ab8a:	f7ff febb 	bl	800a904 <_Balloc>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	b928      	cbnz	r0, 800ab9e <__i2b+0x1a>
 800ab92:	4b05      	ldr	r3, [pc, #20]	@ (800aba8 <__i2b+0x24>)
 800ab94:	f240 1145 	movw	r1, #325	@ 0x145
 800ab98:	4804      	ldr	r0, [pc, #16]	@ (800abac <__i2b+0x28>)
 800ab9a:	f001 ffc1 	bl	800cb20 <__assert_func>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	6144      	str	r4, [r0, #20]
 800aba2:	6103      	str	r3, [r0, #16]
 800aba4:	bd10      	pop	{r4, pc}
 800aba6:	bf00      	nop
 800aba8:	0800db1f 	.word	0x0800db1f
 800abac:	0800db30 	.word	0x0800db30

0800abb0 <__multiply>:
 800abb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	4617      	mov	r7, r2
 800abb6:	690a      	ldr	r2, [r1, #16]
 800abb8:	4689      	mov	r9, r1
 800abba:	b085      	sub	sp, #20
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	bfa2      	ittt	ge
 800abc2:	463b      	movge	r3, r7
 800abc4:	460f      	movge	r7, r1
 800abc6:	4699      	movge	r9, r3
 800abc8:	693d      	ldr	r5, [r7, #16]
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800abd0:	6879      	ldr	r1, [r7, #4]
 800abd2:	eb05 060a 	add.w	r6, r5, sl
 800abd6:	42b3      	cmp	r3, r6
 800abd8:	bfb8      	it	lt
 800abda:	3101      	addlt	r1, #1
 800abdc:	f7ff fe92 	bl	800a904 <_Balloc>
 800abe0:	b930      	cbnz	r0, 800abf0 <__multiply+0x40>
 800abe2:	4602      	mov	r2, r0
 800abe4:	4b42      	ldr	r3, [pc, #264]	@ (800acf0 <__multiply+0x140>)
 800abe6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800abea:	4842      	ldr	r0, [pc, #264]	@ (800acf4 <__multiply+0x144>)
 800abec:	f001 ff98 	bl	800cb20 <__assert_func>
 800abf0:	f100 0414 	add.w	r4, r0, #20
 800abf4:	2200      	movs	r2, #0
 800abf6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800abfa:	4623      	mov	r3, r4
 800abfc:	4573      	cmp	r3, lr
 800abfe:	d320      	bcc.n	800ac42 <__multiply+0x92>
 800ac00:	f107 0814 	add.w	r8, r7, #20
 800ac04:	f109 0114 	add.w	r1, r9, #20
 800ac08:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ac0c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ac10:	9302      	str	r3, [sp, #8]
 800ac12:	1beb      	subs	r3, r5, r7
 800ac14:	3715      	adds	r7, #21
 800ac16:	3b15      	subs	r3, #21
 800ac18:	f023 0303 	bic.w	r3, r3, #3
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	42bd      	cmp	r5, r7
 800ac20:	bf38      	it	cc
 800ac22:	2304      	movcc	r3, #4
 800ac24:	9301      	str	r3, [sp, #4]
 800ac26:	9b02      	ldr	r3, [sp, #8]
 800ac28:	9103      	str	r1, [sp, #12]
 800ac2a:	428b      	cmp	r3, r1
 800ac2c:	d80c      	bhi.n	800ac48 <__multiply+0x98>
 800ac2e:	2e00      	cmp	r6, #0
 800ac30:	dd03      	ble.n	800ac3a <__multiply+0x8a>
 800ac32:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d057      	beq.n	800acea <__multiply+0x13a>
 800ac3a:	6106      	str	r6, [r0, #16]
 800ac3c:	b005      	add	sp, #20
 800ac3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac42:	f843 2b04 	str.w	r2, [r3], #4
 800ac46:	e7d9      	b.n	800abfc <__multiply+0x4c>
 800ac48:	f8b1 a000 	ldrh.w	sl, [r1]
 800ac4c:	f1ba 0f00 	cmp.w	sl, #0
 800ac50:	d021      	beq.n	800ac96 <__multiply+0xe6>
 800ac52:	46c4      	mov	ip, r8
 800ac54:	46a1      	mov	r9, r4
 800ac56:	2700      	movs	r7, #0
 800ac58:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ac5c:	f8d9 3000 	ldr.w	r3, [r9]
 800ac60:	fa1f fb82 	uxth.w	fp, r2
 800ac64:	4565      	cmp	r5, ip
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ac6c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac70:	443b      	add	r3, r7
 800ac72:	f8d9 7000 	ldr.w	r7, [r9]
 800ac76:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800ac7a:	fb0a 7202 	mla	r2, sl, r2, r7
 800ac7e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ac88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac8c:	f849 3b04 	str.w	r3, [r9], #4
 800ac90:	d8e2      	bhi.n	800ac58 <__multiply+0xa8>
 800ac92:	9b01      	ldr	r3, [sp, #4]
 800ac94:	50e7      	str	r7, [r4, r3]
 800ac96:	9b03      	ldr	r3, [sp, #12]
 800ac98:	3104      	adds	r1, #4
 800ac9a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac9e:	f1b9 0f00 	cmp.w	r9, #0
 800aca2:	d020      	beq.n	800ace6 <__multiply+0x136>
 800aca4:	6823      	ldr	r3, [r4, #0]
 800aca6:	4647      	mov	r7, r8
 800aca8:	46a4      	mov	ip, r4
 800acaa:	f04f 0a00 	mov.w	sl, #0
 800acae:	f8b7 b000 	ldrh.w	fp, [r7]
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800acb8:	fb09 220b 	mla	r2, r9, fp, r2
 800acbc:	4452      	add	r2, sl
 800acbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acc2:	f84c 3b04 	str.w	r3, [ip], #4
 800acc6:	f857 3b04 	ldr.w	r3, [r7], #4
 800acca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acce:	f8bc 3000 	ldrh.w	r3, [ip]
 800acd2:	42bd      	cmp	r5, r7
 800acd4:	fb09 330a 	mla	r3, r9, sl, r3
 800acd8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800acdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ace0:	d8e5      	bhi.n	800acae <__multiply+0xfe>
 800ace2:	9a01      	ldr	r2, [sp, #4]
 800ace4:	50a3      	str	r3, [r4, r2]
 800ace6:	3404      	adds	r4, #4
 800ace8:	e79d      	b.n	800ac26 <__multiply+0x76>
 800acea:	3e01      	subs	r6, #1
 800acec:	e79f      	b.n	800ac2e <__multiply+0x7e>
 800acee:	bf00      	nop
 800acf0:	0800db1f 	.word	0x0800db1f
 800acf4:	0800db30 	.word	0x0800db30

0800acf8 <__pow5mult>:
 800acf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acfc:	4615      	mov	r5, r2
 800acfe:	f012 0203 	ands.w	r2, r2, #3
 800ad02:	4607      	mov	r7, r0
 800ad04:	460e      	mov	r6, r1
 800ad06:	d007      	beq.n	800ad18 <__pow5mult+0x20>
 800ad08:	3a01      	subs	r2, #1
 800ad0a:	4c25      	ldr	r4, [pc, #148]	@ (800ada0 <__pow5mult+0xa8>)
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad12:	f7ff fe59 	bl	800a9c8 <__multadd>
 800ad16:	4606      	mov	r6, r0
 800ad18:	10ad      	asrs	r5, r5, #2
 800ad1a:	d03d      	beq.n	800ad98 <__pow5mult+0xa0>
 800ad1c:	69fc      	ldr	r4, [r7, #28]
 800ad1e:	b97c      	cbnz	r4, 800ad40 <__pow5mult+0x48>
 800ad20:	2010      	movs	r0, #16
 800ad22:	f7ff fd39 	bl	800a798 <malloc>
 800ad26:	4602      	mov	r2, r0
 800ad28:	61f8      	str	r0, [r7, #28]
 800ad2a:	b928      	cbnz	r0, 800ad38 <__pow5mult+0x40>
 800ad2c:	4b1d      	ldr	r3, [pc, #116]	@ (800ada4 <__pow5mult+0xac>)
 800ad2e:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ad32:	481d      	ldr	r0, [pc, #116]	@ (800ada8 <__pow5mult+0xb0>)
 800ad34:	f001 fef4 	bl	800cb20 <__assert_func>
 800ad38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad3c:	6004      	str	r4, [r0, #0]
 800ad3e:	60c4      	str	r4, [r0, #12]
 800ad40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ad44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad48:	b94c      	cbnz	r4, 800ad5e <__pow5mult+0x66>
 800ad4a:	f240 2171 	movw	r1, #625	@ 0x271
 800ad4e:	4638      	mov	r0, r7
 800ad50:	f7ff ff18 	bl	800ab84 <__i2b>
 800ad54:	2300      	movs	r3, #0
 800ad56:	4604      	mov	r4, r0
 800ad58:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad5c:	6003      	str	r3, [r0, #0]
 800ad5e:	f04f 0900 	mov.w	r9, #0
 800ad62:	07eb      	lsls	r3, r5, #31
 800ad64:	d50a      	bpl.n	800ad7c <__pow5mult+0x84>
 800ad66:	4631      	mov	r1, r6
 800ad68:	4622      	mov	r2, r4
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	f7ff ff20 	bl	800abb0 <__multiply>
 800ad70:	4680      	mov	r8, r0
 800ad72:	4631      	mov	r1, r6
 800ad74:	4638      	mov	r0, r7
 800ad76:	4646      	mov	r6, r8
 800ad78:	f7ff fe04 	bl	800a984 <_Bfree>
 800ad7c:	106d      	asrs	r5, r5, #1
 800ad7e:	d00b      	beq.n	800ad98 <__pow5mult+0xa0>
 800ad80:	6820      	ldr	r0, [r4, #0]
 800ad82:	b938      	cbnz	r0, 800ad94 <__pow5mult+0x9c>
 800ad84:	4622      	mov	r2, r4
 800ad86:	4621      	mov	r1, r4
 800ad88:	4638      	mov	r0, r7
 800ad8a:	f7ff ff11 	bl	800abb0 <__multiply>
 800ad8e:	6020      	str	r0, [r4, #0]
 800ad90:	f8c0 9000 	str.w	r9, [r0]
 800ad94:	4604      	mov	r4, r0
 800ad96:	e7e4      	b.n	800ad62 <__pow5mult+0x6a>
 800ad98:	4630      	mov	r0, r6
 800ad9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad9e:	bf00      	nop
 800ada0:	0800dc5c 	.word	0x0800dc5c
 800ada4:	0800dab0 	.word	0x0800dab0
 800ada8:	0800db30 	.word	0x0800db30

0800adac <__lshift>:
 800adac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adb0:	460c      	mov	r4, r1
 800adb2:	4607      	mov	r7, r0
 800adb4:	4691      	mov	r9, r2
 800adb6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800adba:	6923      	ldr	r3, [r4, #16]
 800adbc:	6849      	ldr	r1, [r1, #4]
 800adbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800adc2:	68a3      	ldr	r3, [r4, #8]
 800adc4:	f108 0601 	add.w	r6, r8, #1
 800adc8:	42b3      	cmp	r3, r6
 800adca:	db0b      	blt.n	800ade4 <__lshift+0x38>
 800adcc:	4638      	mov	r0, r7
 800adce:	f7ff fd99 	bl	800a904 <_Balloc>
 800add2:	4605      	mov	r5, r0
 800add4:	b948      	cbnz	r0, 800adea <__lshift+0x3e>
 800add6:	4602      	mov	r2, r0
 800add8:	4b28      	ldr	r3, [pc, #160]	@ (800ae7c <__lshift+0xd0>)
 800adda:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800adde:	4828      	ldr	r0, [pc, #160]	@ (800ae80 <__lshift+0xd4>)
 800ade0:	f001 fe9e 	bl	800cb20 <__assert_func>
 800ade4:	3101      	adds	r1, #1
 800ade6:	005b      	lsls	r3, r3, #1
 800ade8:	e7ee      	b.n	800adc8 <__lshift+0x1c>
 800adea:	2300      	movs	r3, #0
 800adec:	f100 0114 	add.w	r1, r0, #20
 800adf0:	f100 0210 	add.w	r2, r0, #16
 800adf4:	4618      	mov	r0, r3
 800adf6:	4553      	cmp	r3, sl
 800adf8:	db33      	blt.n	800ae62 <__lshift+0xb6>
 800adfa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800adfe:	f104 0314 	add.w	r3, r4, #20
 800ae02:	6920      	ldr	r0, [r4, #16]
 800ae04:	f019 091f 	ands.w	r9, r9, #31
 800ae08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae10:	d02b      	beq.n	800ae6a <__lshift+0xbe>
 800ae12:	f1c9 0e20 	rsb	lr, r9, #32
 800ae16:	468a      	mov	sl, r1
 800ae18:	2200      	movs	r2, #0
 800ae1a:	6818      	ldr	r0, [r3, #0]
 800ae1c:	fa00 f009 	lsl.w	r0, r0, r9
 800ae20:	4310      	orrs	r0, r2
 800ae22:	f84a 0b04 	str.w	r0, [sl], #4
 800ae26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae2a:	459c      	cmp	ip, r3
 800ae2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae30:	d8f3      	bhi.n	800ae1a <__lshift+0x6e>
 800ae32:	ebac 0304 	sub.w	r3, ip, r4
 800ae36:	f104 0015 	add.w	r0, r4, #21
 800ae3a:	3b15      	subs	r3, #21
 800ae3c:	f023 0303 	bic.w	r3, r3, #3
 800ae40:	3304      	adds	r3, #4
 800ae42:	4560      	cmp	r0, ip
 800ae44:	bf88      	it	hi
 800ae46:	2304      	movhi	r3, #4
 800ae48:	50ca      	str	r2, [r1, r3]
 800ae4a:	b10a      	cbz	r2, 800ae50 <__lshift+0xa4>
 800ae4c:	f108 0602 	add.w	r6, r8, #2
 800ae50:	3e01      	subs	r6, #1
 800ae52:	4638      	mov	r0, r7
 800ae54:	4621      	mov	r1, r4
 800ae56:	612e      	str	r6, [r5, #16]
 800ae58:	f7ff fd94 	bl	800a984 <_Bfree>
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae62:	3301      	adds	r3, #1
 800ae64:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae68:	e7c5      	b.n	800adf6 <__lshift+0x4a>
 800ae6a:	3904      	subs	r1, #4
 800ae6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae70:	459c      	cmp	ip, r3
 800ae72:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae76:	d8f9      	bhi.n	800ae6c <__lshift+0xc0>
 800ae78:	e7ea      	b.n	800ae50 <__lshift+0xa4>
 800ae7a:	bf00      	nop
 800ae7c:	0800db1f 	.word	0x0800db1f
 800ae80:	0800db30 	.word	0x0800db30

0800ae84 <__mcmp>:
 800ae84:	4603      	mov	r3, r0
 800ae86:	690a      	ldr	r2, [r1, #16]
 800ae88:	6900      	ldr	r0, [r0, #16]
 800ae8a:	1a80      	subs	r0, r0, r2
 800ae8c:	b530      	push	{r4, r5, lr}
 800ae8e:	d10e      	bne.n	800aeae <__mcmp+0x2a>
 800ae90:	3314      	adds	r3, #20
 800ae92:	3114      	adds	r1, #20
 800ae94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aea0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aea4:	4295      	cmp	r5, r2
 800aea6:	d003      	beq.n	800aeb0 <__mcmp+0x2c>
 800aea8:	d205      	bcs.n	800aeb6 <__mcmp+0x32>
 800aeaa:	f04f 30ff 	mov.w	r0, #4294967295
 800aeae:	bd30      	pop	{r4, r5, pc}
 800aeb0:	42a3      	cmp	r3, r4
 800aeb2:	d3f3      	bcc.n	800ae9c <__mcmp+0x18>
 800aeb4:	e7fb      	b.n	800aeae <__mcmp+0x2a>
 800aeb6:	2001      	movs	r0, #1
 800aeb8:	e7f9      	b.n	800aeae <__mcmp+0x2a>
	...

0800aebc <__mdiff>:
 800aebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec0:	4689      	mov	r9, r1
 800aec2:	4606      	mov	r6, r0
 800aec4:	4611      	mov	r1, r2
 800aec6:	4614      	mov	r4, r2
 800aec8:	4648      	mov	r0, r9
 800aeca:	f7ff ffdb 	bl	800ae84 <__mcmp>
 800aece:	1e05      	subs	r5, r0, #0
 800aed0:	d112      	bne.n	800aef8 <__mdiff+0x3c>
 800aed2:	4629      	mov	r1, r5
 800aed4:	4630      	mov	r0, r6
 800aed6:	f7ff fd15 	bl	800a904 <_Balloc>
 800aeda:	4602      	mov	r2, r0
 800aedc:	b928      	cbnz	r0, 800aeea <__mdiff+0x2e>
 800aede:	4b41      	ldr	r3, [pc, #260]	@ (800afe4 <__mdiff+0x128>)
 800aee0:	f240 2137 	movw	r1, #567	@ 0x237
 800aee4:	4840      	ldr	r0, [pc, #256]	@ (800afe8 <__mdiff+0x12c>)
 800aee6:	f001 fe1b 	bl	800cb20 <__assert_func>
 800aeea:	2301      	movs	r3, #1
 800aeec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aef0:	4610      	mov	r0, r2
 800aef2:	b003      	add	sp, #12
 800aef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef8:	bfbc      	itt	lt
 800aefa:	464b      	movlt	r3, r9
 800aefc:	46a1      	movlt	r9, r4
 800aefe:	4630      	mov	r0, r6
 800af00:	bfb8      	it	lt
 800af02:	2501      	movlt	r5, #1
 800af04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800af08:	bfb4      	ite	lt
 800af0a:	461c      	movlt	r4, r3
 800af0c:	2500      	movge	r5, #0
 800af0e:	f7ff fcf9 	bl	800a904 <_Balloc>
 800af12:	4602      	mov	r2, r0
 800af14:	b918      	cbnz	r0, 800af1e <__mdiff+0x62>
 800af16:	4b33      	ldr	r3, [pc, #204]	@ (800afe4 <__mdiff+0x128>)
 800af18:	f240 2145 	movw	r1, #581	@ 0x245
 800af1c:	e7e2      	b.n	800aee4 <__mdiff+0x28>
 800af1e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800af22:	f104 0e14 	add.w	lr, r4, #20
 800af26:	6926      	ldr	r6, [r4, #16]
 800af28:	f100 0b14 	add.w	fp, r0, #20
 800af2c:	60c5      	str	r5, [r0, #12]
 800af2e:	f109 0514 	add.w	r5, r9, #20
 800af32:	f109 0310 	add.w	r3, r9, #16
 800af36:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800af3a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800af3e:	46d9      	mov	r9, fp
 800af40:	f04f 0c00 	mov.w	ip, #0
 800af44:	9301      	str	r3, [sp, #4]
 800af46:	9b01      	ldr	r3, [sp, #4]
 800af48:	f85e 0b04 	ldr.w	r0, [lr], #4
 800af4c:	f853 af04 	ldr.w	sl, [r3, #4]!
 800af50:	4576      	cmp	r6, lr
 800af52:	9301      	str	r3, [sp, #4]
 800af54:	fa1f f38a 	uxth.w	r3, sl
 800af58:	4619      	mov	r1, r3
 800af5a:	b283      	uxth	r3, r0
 800af5c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800af60:	eba1 0303 	sub.w	r3, r1, r3
 800af64:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af68:	4463      	add	r3, ip
 800af6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af6e:	b29b      	uxth	r3, r3
 800af70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af78:	f849 3b04 	str.w	r3, [r9], #4
 800af7c:	d8e3      	bhi.n	800af46 <__mdiff+0x8a>
 800af7e:	1b33      	subs	r3, r6, r4
 800af80:	3415      	adds	r4, #21
 800af82:	3b15      	subs	r3, #21
 800af84:	f023 0303 	bic.w	r3, r3, #3
 800af88:	3304      	adds	r3, #4
 800af8a:	42a6      	cmp	r6, r4
 800af8c:	bf38      	it	cc
 800af8e:	2304      	movcc	r3, #4
 800af90:	441d      	add	r5, r3
 800af92:	445b      	add	r3, fp
 800af94:	462c      	mov	r4, r5
 800af96:	461e      	mov	r6, r3
 800af98:	4544      	cmp	r4, r8
 800af9a:	d30e      	bcc.n	800afba <__mdiff+0xfe>
 800af9c:	f108 0103 	add.w	r1, r8, #3
 800afa0:	1b49      	subs	r1, r1, r5
 800afa2:	3d03      	subs	r5, #3
 800afa4:	f021 0103 	bic.w	r1, r1, #3
 800afa8:	45a8      	cmp	r8, r5
 800afaa:	bf38      	it	cc
 800afac:	2100      	movcc	r1, #0
 800afae:	440b      	add	r3, r1
 800afb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800afb4:	b199      	cbz	r1, 800afde <__mdiff+0x122>
 800afb6:	6117      	str	r7, [r2, #16]
 800afb8:	e79a      	b.n	800aef0 <__mdiff+0x34>
 800afba:	f854 1b04 	ldr.w	r1, [r4], #4
 800afbe:	46e6      	mov	lr, ip
 800afc0:	fa1f fc81 	uxth.w	ip, r1
 800afc4:	0c08      	lsrs	r0, r1, #16
 800afc6:	4471      	add	r1, lr
 800afc8:	44f4      	add	ip, lr
 800afca:	b289      	uxth	r1, r1
 800afcc:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800afd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800afd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800afd8:	f846 1b04 	str.w	r1, [r6], #4
 800afdc:	e7dc      	b.n	800af98 <__mdiff+0xdc>
 800afde:	3f01      	subs	r7, #1
 800afe0:	e7e6      	b.n	800afb0 <__mdiff+0xf4>
 800afe2:	bf00      	nop
 800afe4:	0800db1f 	.word	0x0800db1f
 800afe8:	0800db30 	.word	0x0800db30

0800afec <__ulp>:
 800afec:	b082      	sub	sp, #8
 800afee:	4b11      	ldr	r3, [pc, #68]	@ (800b034 <__ulp+0x48>)
 800aff0:	ed8d 0b00 	vstr	d0, [sp]
 800aff4:	9a01      	ldr	r2, [sp, #4]
 800aff6:	4013      	ands	r3, r2
 800aff8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800affc:	2b00      	cmp	r3, #0
 800affe:	dc08      	bgt.n	800b012 <__ulp+0x26>
 800b000:	425b      	negs	r3, r3
 800b002:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b006:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b00a:	da04      	bge.n	800b016 <__ulp+0x2a>
 800b00c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b010:	4113      	asrs	r3, r2
 800b012:	2200      	movs	r2, #0
 800b014:	e008      	b.n	800b028 <__ulp+0x3c>
 800b016:	f1a2 0314 	sub.w	r3, r2, #20
 800b01a:	2b1e      	cmp	r3, #30
 800b01c:	bfd6      	itet	le
 800b01e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b022:	2201      	movgt	r2, #1
 800b024:	40da      	lsrle	r2, r3
 800b026:	2300      	movs	r3, #0
 800b028:	4619      	mov	r1, r3
 800b02a:	4610      	mov	r0, r2
 800b02c:	ec41 0b10 	vmov	d0, r0, r1
 800b030:	b002      	add	sp, #8
 800b032:	4770      	bx	lr
 800b034:	7ff00000 	.word	0x7ff00000

0800b038 <__b2d>:
 800b038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03c:	6906      	ldr	r6, [r0, #16]
 800b03e:	f100 0814 	add.w	r8, r0, #20
 800b042:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b046:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b04a:	1f37      	subs	r7, r6, #4
 800b04c:	4610      	mov	r0, r2
 800b04e:	f7ff fd4d 	bl	800aaec <__hi0bits>
 800b052:	f1c0 0320 	rsb	r3, r0, #32
 800b056:	280a      	cmp	r0, #10
 800b058:	600b      	str	r3, [r1, #0]
 800b05a:	491d      	ldr	r1, [pc, #116]	@ (800b0d0 <__b2d+0x98>)
 800b05c:	dc16      	bgt.n	800b08c <__b2d+0x54>
 800b05e:	f1c0 0c0b 	rsb	ip, r0, #11
 800b062:	45b8      	cmp	r8, r7
 800b064:	f100 0015 	add.w	r0, r0, #21
 800b068:	fa22 f30c 	lsr.w	r3, r2, ip
 800b06c:	fa02 f000 	lsl.w	r0, r2, r0
 800b070:	ea43 0501 	orr.w	r5, r3, r1
 800b074:	bf34      	ite	cc
 800b076:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b07a:	2300      	movcs	r3, #0
 800b07c:	fa23 f30c 	lsr.w	r3, r3, ip
 800b080:	4303      	orrs	r3, r0
 800b082:	461c      	mov	r4, r3
 800b084:	ec45 4b10 	vmov	d0, r4, r5
 800b088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b08c:	45b8      	cmp	r8, r7
 800b08e:	bf3a      	itte	cc
 800b090:	f1a6 0708 	subcc.w	r7, r6, #8
 800b094:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b098:	2300      	movcs	r3, #0
 800b09a:	380b      	subs	r0, #11
 800b09c:	d014      	beq.n	800b0c8 <__b2d+0x90>
 800b09e:	f1c0 0120 	rsb	r1, r0, #32
 800b0a2:	4082      	lsls	r2, r0
 800b0a4:	4547      	cmp	r7, r8
 800b0a6:	fa23 f401 	lsr.w	r4, r3, r1
 800b0aa:	fa03 f300 	lsl.w	r3, r3, r0
 800b0ae:	ea42 0204 	orr.w	r2, r2, r4
 800b0b2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b0b6:	bf8c      	ite	hi
 800b0b8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b0bc:	2200      	movls	r2, #0
 800b0be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b0c2:	40ca      	lsrs	r2, r1
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	e7dc      	b.n	800b082 <__b2d+0x4a>
 800b0c8:	ea42 0501 	orr.w	r5, r2, r1
 800b0cc:	e7d9      	b.n	800b082 <__b2d+0x4a>
 800b0ce:	bf00      	nop
 800b0d0:	3ff00000 	.word	0x3ff00000

0800b0d4 <__d2b>:
 800b0d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0d8:	460f      	mov	r7, r1
 800b0da:	2101      	movs	r1, #1
 800b0dc:	4616      	mov	r6, r2
 800b0de:	ec59 8b10 	vmov	r8, r9, d0
 800b0e2:	f7ff fc0f 	bl	800a904 <_Balloc>
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	b930      	cbnz	r0, 800b0f8 <__d2b+0x24>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	4b23      	ldr	r3, [pc, #140]	@ (800b17c <__d2b+0xa8>)
 800b0ee:	f240 310f 	movw	r1, #783	@ 0x30f
 800b0f2:	4823      	ldr	r0, [pc, #140]	@ (800b180 <__d2b+0xac>)
 800b0f4:	f001 fd14 	bl	800cb20 <__assert_func>
 800b0f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b0fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b100:	b10d      	cbz	r5, 800b106 <__d2b+0x32>
 800b102:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b106:	9301      	str	r3, [sp, #4]
 800b108:	f1b8 0300 	subs.w	r3, r8, #0
 800b10c:	d023      	beq.n	800b156 <__d2b+0x82>
 800b10e:	4668      	mov	r0, sp
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	f7ff fd0a 	bl	800ab2a <__lo0bits>
 800b116:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b11a:	b1d0      	cbz	r0, 800b152 <__d2b+0x7e>
 800b11c:	f1c0 0320 	rsb	r3, r0, #32
 800b120:	fa02 f303 	lsl.w	r3, r2, r3
 800b124:	40c2      	lsrs	r2, r0
 800b126:	430b      	orrs	r3, r1
 800b128:	9201      	str	r2, [sp, #4]
 800b12a:	6163      	str	r3, [r4, #20]
 800b12c:	9b01      	ldr	r3, [sp, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	61a3      	str	r3, [r4, #24]
 800b132:	bf0c      	ite	eq
 800b134:	2201      	moveq	r2, #1
 800b136:	2202      	movne	r2, #2
 800b138:	6122      	str	r2, [r4, #16]
 800b13a:	b1a5      	cbz	r5, 800b166 <__d2b+0x92>
 800b13c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b140:	4405      	add	r5, r0
 800b142:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b146:	603d      	str	r5, [r7, #0]
 800b148:	6030      	str	r0, [r6, #0]
 800b14a:	4620      	mov	r0, r4
 800b14c:	b003      	add	sp, #12
 800b14e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b152:	6161      	str	r1, [r4, #20]
 800b154:	e7ea      	b.n	800b12c <__d2b+0x58>
 800b156:	a801      	add	r0, sp, #4
 800b158:	f7ff fce7 	bl	800ab2a <__lo0bits>
 800b15c:	9b01      	ldr	r3, [sp, #4]
 800b15e:	3020      	adds	r0, #32
 800b160:	2201      	movs	r2, #1
 800b162:	6163      	str	r3, [r4, #20]
 800b164:	e7e8      	b.n	800b138 <__d2b+0x64>
 800b166:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b16a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b16e:	6038      	str	r0, [r7, #0]
 800b170:	6918      	ldr	r0, [r3, #16]
 800b172:	f7ff fcbb 	bl	800aaec <__hi0bits>
 800b176:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b17a:	e7e5      	b.n	800b148 <__d2b+0x74>
 800b17c:	0800db1f 	.word	0x0800db1f
 800b180:	0800db30 	.word	0x0800db30

0800b184 <__ratio>:
 800b184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b188:	b085      	sub	sp, #20
 800b18a:	e9cd 1000 	strd	r1, r0, [sp]
 800b18e:	a902      	add	r1, sp, #8
 800b190:	f7ff ff52 	bl	800b038 <__b2d>
 800b194:	a903      	add	r1, sp, #12
 800b196:	9800      	ldr	r0, [sp, #0]
 800b198:	ec55 4b10 	vmov	r4, r5, d0
 800b19c:	f7ff ff4c 	bl	800b038 <__b2d>
 800b1a0:	9b01      	ldr	r3, [sp, #4]
 800b1a2:	462f      	mov	r7, r5
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	6919      	ldr	r1, [r3, #16]
 800b1a8:	9b00      	ldr	r3, [sp, #0]
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	1ac9      	subs	r1, r1, r3
 800b1ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b1b2:	ec5b ab10 	vmov	sl, fp, d0
 800b1b6:	1a9b      	subs	r3, r3, r2
 800b1b8:	46d9      	mov	r9, fp
 800b1ba:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	bfcd      	iteet	gt
 800b1c2:	462a      	movgt	r2, r5
 800b1c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b1c8:	465a      	movle	r2, fp
 800b1ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b1ce:	bfd8      	it	le
 800b1d0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b1d4:	4652      	mov	r2, sl
 800b1d6:	4639      	mov	r1, r7
 800b1d8:	464b      	mov	r3, r9
 800b1da:	f7f5 fb1b 	bl	8000814 <__aeabi_ddiv>
 800b1de:	ec41 0b10 	vmov	d0, r0, r1
 800b1e2:	b005      	add	sp, #20
 800b1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1e8 <__copybits>:
 800b1e8:	3901      	subs	r1, #1
 800b1ea:	f102 0314 	add.w	r3, r2, #20
 800b1ee:	1149      	asrs	r1, r1, #5
 800b1f0:	b570      	push	{r4, r5, r6, lr}
 800b1f2:	3101      	adds	r1, #1
 800b1f4:	6914      	ldr	r4, [r2, #16]
 800b1f6:	1f05      	subs	r5, r0, #4
 800b1f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b1fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b200:	42a3      	cmp	r3, r4
 800b202:	d30c      	bcc.n	800b21e <__copybits+0x36>
 800b204:	1aa3      	subs	r3, r4, r2
 800b206:	3211      	adds	r2, #17
 800b208:	3b11      	subs	r3, #17
 800b20a:	f023 0303 	bic.w	r3, r3, #3
 800b20e:	42a2      	cmp	r2, r4
 800b210:	bf88      	it	hi
 800b212:	2300      	movhi	r3, #0
 800b214:	4418      	add	r0, r3
 800b216:	2300      	movs	r3, #0
 800b218:	4288      	cmp	r0, r1
 800b21a:	d305      	bcc.n	800b228 <__copybits+0x40>
 800b21c:	bd70      	pop	{r4, r5, r6, pc}
 800b21e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b222:	f845 6f04 	str.w	r6, [r5, #4]!
 800b226:	e7eb      	b.n	800b200 <__copybits+0x18>
 800b228:	f840 3b04 	str.w	r3, [r0], #4
 800b22c:	e7f4      	b.n	800b218 <__copybits+0x30>

0800b22e <__any_on>:
 800b22e:	f100 0214 	add.w	r2, r0, #20
 800b232:	114b      	asrs	r3, r1, #5
 800b234:	6900      	ldr	r0, [r0, #16]
 800b236:	4298      	cmp	r0, r3
 800b238:	b510      	push	{r4, lr}
 800b23a:	db11      	blt.n	800b260 <__any_on+0x32>
 800b23c:	dd0a      	ble.n	800b254 <__any_on+0x26>
 800b23e:	f011 011f 	ands.w	r1, r1, #31
 800b242:	d007      	beq.n	800b254 <__any_on+0x26>
 800b244:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b248:	fa24 f001 	lsr.w	r0, r4, r1
 800b24c:	fa00 f101 	lsl.w	r1, r0, r1
 800b250:	428c      	cmp	r4, r1
 800b252:	d10b      	bne.n	800b26c <__any_on+0x3e>
 800b254:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b258:	4293      	cmp	r3, r2
 800b25a:	d803      	bhi.n	800b264 <__any_on+0x36>
 800b25c:	2000      	movs	r0, #0
 800b25e:	bd10      	pop	{r4, pc}
 800b260:	4603      	mov	r3, r0
 800b262:	e7f7      	b.n	800b254 <__any_on+0x26>
 800b264:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b268:	2900      	cmp	r1, #0
 800b26a:	d0f5      	beq.n	800b258 <__any_on+0x2a>
 800b26c:	2001      	movs	r0, #1
 800b26e:	e7f6      	b.n	800b25e <__any_on+0x30>

0800b270 <sulp>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	4604      	mov	r4, r0
 800b274:	460d      	mov	r5, r1
 800b276:	4616      	mov	r6, r2
 800b278:	ec45 4b10 	vmov	d0, r4, r5
 800b27c:	f7ff feb6 	bl	800afec <__ulp>
 800b280:	ec51 0b10 	vmov	r0, r1, d0
 800b284:	b17e      	cbz	r6, 800b2a6 <sulp+0x36>
 800b286:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b28a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b28e:	2b00      	cmp	r3, #0
 800b290:	dd09      	ble.n	800b2a6 <sulp+0x36>
 800b292:	051b      	lsls	r3, r3, #20
 800b294:	2400      	movs	r4, #0
 800b296:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b29a:	4622      	mov	r2, r4
 800b29c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b2a0:	462b      	mov	r3, r5
 800b2a2:	f7f5 f98d 	bl	80005c0 <__aeabi_dmul>
 800b2a6:	ec41 0b10 	vmov	d0, r0, r1
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}
 800b2ac:	0000      	movs	r0, r0
	...

0800b2b0 <_strtod_l>:
 800b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	b09f      	sub	sp, #124	@ 0x7c
 800b2b6:	460c      	mov	r4, r1
 800b2b8:	f04f 0a00 	mov.w	sl, #0
 800b2bc:	f04f 0b00 	mov.w	fp, #0
 800b2c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	9005      	str	r0, [sp, #20]
 800b2c6:	921a      	str	r2, [sp, #104]	@ 0x68
 800b2c8:	460a      	mov	r2, r1
 800b2ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800b2cc:	7811      	ldrb	r1, [r2, #0]
 800b2ce:	292b      	cmp	r1, #43	@ 0x2b
 800b2d0:	d04a      	beq.n	800b368 <_strtod_l+0xb8>
 800b2d2:	d838      	bhi.n	800b346 <_strtod_l+0x96>
 800b2d4:	290d      	cmp	r1, #13
 800b2d6:	d832      	bhi.n	800b33e <_strtod_l+0x8e>
 800b2d8:	2908      	cmp	r1, #8
 800b2da:	d832      	bhi.n	800b342 <_strtod_l+0x92>
 800b2dc:	2900      	cmp	r1, #0
 800b2de:	d03b      	beq.n	800b358 <_strtod_l+0xa8>
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b2e6:	782a      	ldrb	r2, [r5, #0]
 800b2e8:	2a30      	cmp	r2, #48	@ 0x30
 800b2ea:	f040 80b2 	bne.w	800b452 <_strtod_l+0x1a2>
 800b2ee:	786a      	ldrb	r2, [r5, #1]
 800b2f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b2f4:	2a58      	cmp	r2, #88	@ 0x58
 800b2f6:	d16e      	bne.n	800b3d6 <_strtod_l+0x126>
 800b2f8:	9302      	str	r3, [sp, #8]
 800b2fa:	a919      	add	r1, sp, #100	@ 0x64
 800b2fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2fe:	4a90      	ldr	r2, [pc, #576]	@ (800b540 <_strtod_l+0x290>)
 800b300:	9301      	str	r3, [sp, #4]
 800b302:	ab1a      	add	r3, sp, #104	@ 0x68
 800b304:	9805      	ldr	r0, [sp, #20]
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b30a:	f001 fca1 	bl	800cc50 <__gethex>
 800b30e:	f010 060f 	ands.w	r6, r0, #15
 800b312:	4604      	mov	r4, r0
 800b314:	d005      	beq.n	800b322 <_strtod_l+0x72>
 800b316:	2e06      	cmp	r6, #6
 800b318:	d128      	bne.n	800b36c <_strtod_l+0xbc>
 800b31a:	3501      	adds	r5, #1
 800b31c:	2300      	movs	r3, #0
 800b31e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b320:	930e      	str	r3, [sp, #56]	@ 0x38
 800b322:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b324:	2b00      	cmp	r3, #0
 800b326:	f040 858e 	bne.w	800be46 <_strtod_l+0xb96>
 800b32a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b32c:	b1cb      	cbz	r3, 800b362 <_strtod_l+0xb2>
 800b32e:	4652      	mov	r2, sl
 800b330:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b334:	ec43 2b10 	vmov	d0, r2, r3
 800b338:	b01f      	add	sp, #124	@ 0x7c
 800b33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33e:	2920      	cmp	r1, #32
 800b340:	d1ce      	bne.n	800b2e0 <_strtod_l+0x30>
 800b342:	3201      	adds	r2, #1
 800b344:	e7c1      	b.n	800b2ca <_strtod_l+0x1a>
 800b346:	292d      	cmp	r1, #45	@ 0x2d
 800b348:	d1ca      	bne.n	800b2e0 <_strtod_l+0x30>
 800b34a:	2101      	movs	r1, #1
 800b34c:	910e      	str	r1, [sp, #56]	@ 0x38
 800b34e:	1c51      	adds	r1, r2, #1
 800b350:	9119      	str	r1, [sp, #100]	@ 0x64
 800b352:	7852      	ldrb	r2, [r2, #1]
 800b354:	2a00      	cmp	r2, #0
 800b356:	d1c5      	bne.n	800b2e4 <_strtod_l+0x34>
 800b358:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b35a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f040 8570 	bne.w	800be42 <_strtod_l+0xb92>
 800b362:	4652      	mov	r2, sl
 800b364:	465b      	mov	r3, fp
 800b366:	e7e5      	b.n	800b334 <_strtod_l+0x84>
 800b368:	2100      	movs	r1, #0
 800b36a:	e7ef      	b.n	800b34c <_strtod_l+0x9c>
 800b36c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b36e:	b13a      	cbz	r2, 800b380 <_strtod_l+0xd0>
 800b370:	2135      	movs	r1, #53	@ 0x35
 800b372:	a81c      	add	r0, sp, #112	@ 0x70
 800b374:	f7ff ff38 	bl	800b1e8 <__copybits>
 800b378:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b37a:	9805      	ldr	r0, [sp, #20]
 800b37c:	f7ff fb02 	bl	800a984 <_Bfree>
 800b380:	3e01      	subs	r6, #1
 800b382:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b384:	2e04      	cmp	r6, #4
 800b386:	d806      	bhi.n	800b396 <_strtod_l+0xe6>
 800b388:	e8df f006 	tbb	[pc, r6]
 800b38c:	201d0314 	.word	0x201d0314
 800b390:	14          	.byte	0x14
 800b391:	00          	.byte	0x00
 800b392:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b396:	05e1      	lsls	r1, r4, #23
 800b398:	bf48      	it	mi
 800b39a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b39e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3a2:	0d1b      	lsrs	r3, r3, #20
 800b3a4:	051b      	lsls	r3, r3, #20
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1bb      	bne.n	800b322 <_strtod_l+0x72>
 800b3aa:	f7fe fb09 	bl	80099c0 <__errno>
 800b3ae:	2322      	movs	r3, #34	@ 0x22
 800b3b0:	6003      	str	r3, [r0, #0]
 800b3b2:	e7b6      	b.n	800b322 <_strtod_l+0x72>
 800b3b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b3b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b3bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b3c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b3c4:	e7e7      	b.n	800b396 <_strtod_l+0xe6>
 800b3c6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b548 <_strtod_l+0x298>
 800b3ca:	e7e4      	b.n	800b396 <_strtod_l+0xe6>
 800b3cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b3d0:	f04f 3aff 	mov.w	sl, #4294967295
 800b3d4:	e7df      	b.n	800b396 <_strtod_l+0xe6>
 800b3d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3d8:	1c5a      	adds	r2, r3, #1
 800b3da:	9219      	str	r2, [sp, #100]	@ 0x64
 800b3dc:	785b      	ldrb	r3, [r3, #1]
 800b3de:	2b30      	cmp	r3, #48	@ 0x30
 800b3e0:	d0f9      	beq.n	800b3d6 <_strtod_l+0x126>
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d09d      	beq.n	800b322 <_strtod_l+0x72>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	2700      	movs	r7, #0
 800b3ea:	9308      	str	r3, [sp, #32]
 800b3ec:	220a      	movs	r2, #10
 800b3ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3f0:	46b9      	mov	r9, r7
 800b3f2:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b3f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b3f6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b3f8:	7805      	ldrb	r5, [r0, #0]
 800b3fa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b3fe:	b2d9      	uxtb	r1, r3
 800b400:	2909      	cmp	r1, #9
 800b402:	d928      	bls.n	800b456 <_strtod_l+0x1a6>
 800b404:	2201      	movs	r2, #1
 800b406:	494f      	ldr	r1, [pc, #316]	@ (800b544 <_strtod_l+0x294>)
 800b408:	f7fe fa55 	bl	80098b6 <strncmp>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d032      	beq.n	800b476 <_strtod_l+0x1c6>
 800b410:	2000      	movs	r0, #0
 800b412:	462a      	mov	r2, r5
 800b414:	464d      	mov	r5, r9
 800b416:	4603      	mov	r3, r0
 800b418:	900a      	str	r0, [sp, #40]	@ 0x28
 800b41a:	2a65      	cmp	r2, #101	@ 0x65
 800b41c:	d001      	beq.n	800b422 <_strtod_l+0x172>
 800b41e:	2a45      	cmp	r2, #69	@ 0x45
 800b420:	d114      	bne.n	800b44c <_strtod_l+0x19c>
 800b422:	b91d      	cbnz	r5, 800b42c <_strtod_l+0x17c>
 800b424:	9a08      	ldr	r2, [sp, #32]
 800b426:	4302      	orrs	r2, r0
 800b428:	d096      	beq.n	800b358 <_strtod_l+0xa8>
 800b42a:	2500      	movs	r5, #0
 800b42c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b42e:	1c62      	adds	r2, r4, #1
 800b430:	9219      	str	r2, [sp, #100]	@ 0x64
 800b432:	7862      	ldrb	r2, [r4, #1]
 800b434:	2a2b      	cmp	r2, #43	@ 0x2b
 800b436:	d079      	beq.n	800b52c <_strtod_l+0x27c>
 800b438:	2a2d      	cmp	r2, #45	@ 0x2d
 800b43a:	d07d      	beq.n	800b538 <_strtod_l+0x288>
 800b43c:	f04f 0c00 	mov.w	ip, #0
 800b440:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b444:	2909      	cmp	r1, #9
 800b446:	f240 8085 	bls.w	800b554 <_strtod_l+0x2a4>
 800b44a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b44c:	f04f 0800 	mov.w	r8, #0
 800b450:	e0a5      	b.n	800b59e <_strtod_l+0x2ee>
 800b452:	2300      	movs	r3, #0
 800b454:	e7c8      	b.n	800b3e8 <_strtod_l+0x138>
 800b456:	f1b9 0f08 	cmp.w	r9, #8
 800b45a:	f100 0001 	add.w	r0, r0, #1
 800b45e:	f109 0901 	add.w	r9, r9, #1
 800b462:	bfd4      	ite	le
 800b464:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b466:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b46a:	9019      	str	r0, [sp, #100]	@ 0x64
 800b46c:	bfdc      	itt	le
 800b46e:	fb02 3301 	mlale	r3, r2, r1, r3
 800b472:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b474:	e7bf      	b.n	800b3f6 <_strtod_l+0x146>
 800b476:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b478:	1c5a      	adds	r2, r3, #1
 800b47a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b47c:	785a      	ldrb	r2, [r3, #1]
 800b47e:	f1b9 0f00 	cmp.w	r9, #0
 800b482:	d03a      	beq.n	800b4fa <_strtod_l+0x24a>
 800b484:	464d      	mov	r5, r9
 800b486:	900a      	str	r0, [sp, #40]	@ 0x28
 800b488:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b48c:	2b09      	cmp	r3, #9
 800b48e:	d912      	bls.n	800b4b6 <_strtod_l+0x206>
 800b490:	2301      	movs	r3, #1
 800b492:	e7c2      	b.n	800b41a <_strtod_l+0x16a>
 800b494:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b496:	3001      	adds	r0, #1
 800b498:	1c5a      	adds	r2, r3, #1
 800b49a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b49c:	785a      	ldrb	r2, [r3, #1]
 800b49e:	2a30      	cmp	r2, #48	@ 0x30
 800b4a0:	d0f8      	beq.n	800b494 <_strtod_l+0x1e4>
 800b4a2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b4a6:	2b08      	cmp	r3, #8
 800b4a8:	f200 84d2 	bhi.w	800be50 <_strtod_l+0xba0>
 800b4ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b4b6:	3a30      	subs	r2, #48	@ 0x30
 800b4b8:	f100 0301 	add.w	r3, r0, #1
 800b4bc:	d017      	beq.n	800b4ee <_strtod_l+0x23e>
 800b4be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b4c0:	462e      	mov	r6, r5
 800b4c2:	f04f 0e0a 	mov.w	lr, #10
 800b4c6:	4419      	add	r1, r3
 800b4c8:	910a      	str	r1, [sp, #40]	@ 0x28
 800b4ca:	1c71      	adds	r1, r6, #1
 800b4cc:	eba1 0c05 	sub.w	ip, r1, r5
 800b4d0:	4563      	cmp	r3, ip
 800b4d2:	dc14      	bgt.n	800b4fe <_strtod_l+0x24e>
 800b4d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b4d8:	182b      	adds	r3, r5, r0
 800b4da:	3501      	adds	r5, #1
 800b4dc:	2b08      	cmp	r3, #8
 800b4de:	4405      	add	r5, r0
 800b4e0:	dc1a      	bgt.n	800b518 <_strtod_l+0x268>
 800b4e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4e4:	230a      	movs	r3, #10
 800b4e6:	fb03 2301 	mla	r3, r3, r1, r2
 800b4ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	1c51      	adds	r1, r2, #1
 800b4f4:	9119      	str	r1, [sp, #100]	@ 0x64
 800b4f6:	7852      	ldrb	r2, [r2, #1]
 800b4f8:	e7c6      	b.n	800b488 <_strtod_l+0x1d8>
 800b4fa:	4648      	mov	r0, r9
 800b4fc:	e7cf      	b.n	800b49e <_strtod_l+0x1ee>
 800b4fe:	2e08      	cmp	r6, #8
 800b500:	dc05      	bgt.n	800b50e <_strtod_l+0x25e>
 800b502:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b504:	fb0e f606 	mul.w	r6, lr, r6
 800b508:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b50a:	460e      	mov	r6, r1
 800b50c:	e7dd      	b.n	800b4ca <_strtod_l+0x21a>
 800b50e:	2910      	cmp	r1, #16
 800b510:	bfd8      	it	le
 800b512:	fb0e f707 	mulle.w	r7, lr, r7
 800b516:	e7f8      	b.n	800b50a <_strtod_l+0x25a>
 800b518:	2b0f      	cmp	r3, #15
 800b51a:	bfdc      	itt	le
 800b51c:	230a      	movle	r3, #10
 800b51e:	fb03 2707 	mlale	r7, r3, r7, r2
 800b522:	e7e3      	b.n	800b4ec <_strtod_l+0x23c>
 800b524:	2300      	movs	r3, #0
 800b526:	930a      	str	r3, [sp, #40]	@ 0x28
 800b528:	2301      	movs	r3, #1
 800b52a:	e77b      	b.n	800b424 <_strtod_l+0x174>
 800b52c:	f04f 0c00 	mov.w	ip, #0
 800b530:	1ca2      	adds	r2, r4, #2
 800b532:	9219      	str	r2, [sp, #100]	@ 0x64
 800b534:	78a2      	ldrb	r2, [r4, #2]
 800b536:	e783      	b.n	800b440 <_strtod_l+0x190>
 800b538:	f04f 0c01 	mov.w	ip, #1
 800b53c:	e7f8      	b.n	800b530 <_strtod_l+0x280>
 800b53e:	bf00      	nop
 800b540:	0800dd6c 	.word	0x0800dd6c
 800b544:	0800db89 	.word	0x0800db89
 800b548:	7ff00000 	.word	0x7ff00000
 800b54c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b54e:	1c51      	adds	r1, r2, #1
 800b550:	9119      	str	r1, [sp, #100]	@ 0x64
 800b552:	7852      	ldrb	r2, [r2, #1]
 800b554:	2a30      	cmp	r2, #48	@ 0x30
 800b556:	d0f9      	beq.n	800b54c <_strtod_l+0x29c>
 800b558:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b55c:	2908      	cmp	r1, #8
 800b55e:	f63f af75 	bhi.w	800b44c <_strtod_l+0x19c>
 800b562:	3a30      	subs	r2, #48	@ 0x30
 800b564:	f04f 080a 	mov.w	r8, #10
 800b568:	9209      	str	r2, [sp, #36]	@ 0x24
 800b56a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b56c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b56e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b570:	1c56      	adds	r6, r2, #1
 800b572:	9619      	str	r6, [sp, #100]	@ 0x64
 800b574:	7852      	ldrb	r2, [r2, #1]
 800b576:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b57a:	f1be 0f09 	cmp.w	lr, #9
 800b57e:	d939      	bls.n	800b5f4 <_strtod_l+0x344>
 800b580:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b582:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b586:	1a76      	subs	r6, r6, r1
 800b588:	2e08      	cmp	r6, #8
 800b58a:	dc03      	bgt.n	800b594 <_strtod_l+0x2e4>
 800b58c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b58e:	4588      	cmp	r8, r1
 800b590:	bfa8      	it	ge
 800b592:	4688      	movge	r8, r1
 800b594:	f1bc 0f00 	cmp.w	ip, #0
 800b598:	d001      	beq.n	800b59e <_strtod_l+0x2ee>
 800b59a:	f1c8 0800 	rsb	r8, r8, #0
 800b59e:	2d00      	cmp	r5, #0
 800b5a0:	d14e      	bne.n	800b640 <_strtod_l+0x390>
 800b5a2:	9908      	ldr	r1, [sp, #32]
 800b5a4:	4308      	orrs	r0, r1
 800b5a6:	f47f aebc 	bne.w	800b322 <_strtod_l+0x72>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f47f aed4 	bne.w	800b358 <_strtod_l+0xa8>
 800b5b0:	2a69      	cmp	r2, #105	@ 0x69
 800b5b2:	d028      	beq.n	800b606 <_strtod_l+0x356>
 800b5b4:	dc25      	bgt.n	800b602 <_strtod_l+0x352>
 800b5b6:	2a49      	cmp	r2, #73	@ 0x49
 800b5b8:	d025      	beq.n	800b606 <_strtod_l+0x356>
 800b5ba:	2a4e      	cmp	r2, #78	@ 0x4e
 800b5bc:	f47f aecc 	bne.w	800b358 <_strtod_l+0xa8>
 800b5c0:	499a      	ldr	r1, [pc, #616]	@ (800b82c <_strtod_l+0x57c>)
 800b5c2:	a819      	add	r0, sp, #100	@ 0x64
 800b5c4:	f001 fd64 	bl	800d090 <__match>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	f43f aec5 	beq.w	800b358 <_strtod_l+0xa8>
 800b5ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	2b28      	cmp	r3, #40	@ 0x28
 800b5d4:	d12e      	bne.n	800b634 <_strtod_l+0x384>
 800b5d6:	aa1c      	add	r2, sp, #112	@ 0x70
 800b5d8:	4995      	ldr	r1, [pc, #596]	@ (800b830 <_strtod_l+0x580>)
 800b5da:	a819      	add	r0, sp, #100	@ 0x64
 800b5dc:	f001 fd6c 	bl	800d0b8 <__hexnan>
 800b5e0:	2805      	cmp	r0, #5
 800b5e2:	d127      	bne.n	800b634 <_strtod_l+0x384>
 800b5e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b5e6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b5ea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b5ee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b5f2:	e696      	b.n	800b322 <_strtod_l+0x72>
 800b5f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b5f6:	fb08 2101 	mla	r1, r8, r1, r2
 800b5fa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b5fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800b600:	e7b5      	b.n	800b56e <_strtod_l+0x2be>
 800b602:	2a6e      	cmp	r2, #110	@ 0x6e
 800b604:	e7da      	b.n	800b5bc <_strtod_l+0x30c>
 800b606:	498b      	ldr	r1, [pc, #556]	@ (800b834 <_strtod_l+0x584>)
 800b608:	a819      	add	r0, sp, #100	@ 0x64
 800b60a:	f001 fd41 	bl	800d090 <__match>
 800b60e:	2800      	cmp	r0, #0
 800b610:	f43f aea2 	beq.w	800b358 <_strtod_l+0xa8>
 800b614:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b616:	a819      	add	r0, sp, #100	@ 0x64
 800b618:	4987      	ldr	r1, [pc, #540]	@ (800b838 <_strtod_l+0x588>)
 800b61a:	3b01      	subs	r3, #1
 800b61c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b61e:	f001 fd37 	bl	800d090 <__match>
 800b622:	b910      	cbnz	r0, 800b62a <_strtod_l+0x37a>
 800b624:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b626:	3301      	adds	r3, #1
 800b628:	9319      	str	r3, [sp, #100]	@ 0x64
 800b62a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b848 <_strtod_l+0x598>
 800b62e:	f04f 0a00 	mov.w	sl, #0
 800b632:	e676      	b.n	800b322 <_strtod_l+0x72>
 800b634:	4881      	ldr	r0, [pc, #516]	@ (800b83c <_strtod_l+0x58c>)
 800b636:	f001 fa6b 	bl	800cb10 <nan>
 800b63a:	ec5b ab10 	vmov	sl, fp, d0
 800b63e:	e670      	b.n	800b322 <_strtod_l+0x72>
 800b640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b642:	f1b9 0f00 	cmp.w	r9, #0
 800b646:	bf08      	it	eq
 800b648:	46a9      	moveq	r9, r5
 800b64a:	2d10      	cmp	r5, #16
 800b64c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b64e:	eba8 0303 	sub.w	r3, r8, r3
 800b652:	462c      	mov	r4, r5
 800b654:	bfa8      	it	ge
 800b656:	2410      	movge	r4, #16
 800b658:	9309      	str	r3, [sp, #36]	@ 0x24
 800b65a:	f7f4 ff37 	bl	80004cc <__aeabi_ui2d>
 800b65e:	2d09      	cmp	r5, #9
 800b660:	4682      	mov	sl, r0
 800b662:	468b      	mov	fp, r1
 800b664:	dc13      	bgt.n	800b68e <_strtod_l+0x3de>
 800b666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f43f ae5a 	beq.w	800b322 <_strtod_l+0x72>
 800b66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b670:	dd78      	ble.n	800b764 <_strtod_l+0x4b4>
 800b672:	2b16      	cmp	r3, #22
 800b674:	dc5f      	bgt.n	800b736 <_strtod_l+0x486>
 800b676:	4972      	ldr	r1, [pc, #456]	@ (800b840 <_strtod_l+0x590>)
 800b678:	4652      	mov	r2, sl
 800b67a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b67e:	465b      	mov	r3, fp
 800b680:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b684:	f7f4 ff9c 	bl	80005c0 <__aeabi_dmul>
 800b688:	4682      	mov	sl, r0
 800b68a:	468b      	mov	fp, r1
 800b68c:	e649      	b.n	800b322 <_strtod_l+0x72>
 800b68e:	4b6c      	ldr	r3, [pc, #432]	@ (800b840 <_strtod_l+0x590>)
 800b690:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b694:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b698:	f7f4 ff92 	bl	80005c0 <__aeabi_dmul>
 800b69c:	4682      	mov	sl, r0
 800b69e:	468b      	mov	fp, r1
 800b6a0:	4638      	mov	r0, r7
 800b6a2:	f7f4 ff13 	bl	80004cc <__aeabi_ui2d>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	4650      	mov	r0, sl
 800b6ac:	4659      	mov	r1, fp
 800b6ae:	f7f4 fdd1 	bl	8000254 <__adddf3>
 800b6b2:	2d0f      	cmp	r5, #15
 800b6b4:	4682      	mov	sl, r0
 800b6b6:	468b      	mov	fp, r1
 800b6b8:	ddd5      	ble.n	800b666 <_strtod_l+0x3b6>
 800b6ba:	1b2c      	subs	r4, r5, r4
 800b6bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6be:	441c      	add	r4, r3
 800b6c0:	2c00      	cmp	r4, #0
 800b6c2:	f340 8093 	ble.w	800b7ec <_strtod_l+0x53c>
 800b6c6:	f014 030f 	ands.w	r3, r4, #15
 800b6ca:	d00a      	beq.n	800b6e2 <_strtod_l+0x432>
 800b6cc:	495c      	ldr	r1, [pc, #368]	@ (800b840 <_strtod_l+0x590>)
 800b6ce:	4652      	mov	r2, sl
 800b6d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b6d4:	465b      	mov	r3, fp
 800b6d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6da:	f7f4 ff71 	bl	80005c0 <__aeabi_dmul>
 800b6de:	4682      	mov	sl, r0
 800b6e0:	468b      	mov	fp, r1
 800b6e2:	f034 040f 	bics.w	r4, r4, #15
 800b6e6:	d073      	beq.n	800b7d0 <_strtod_l+0x520>
 800b6e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b6ec:	dd49      	ble.n	800b782 <_strtod_l+0x4d2>
 800b6ee:	2400      	movs	r4, #0
 800b6f0:	46a0      	mov	r8, r4
 800b6f2:	46a1      	mov	r9, r4
 800b6f4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b6f6:	2322      	movs	r3, #34	@ 0x22
 800b6f8:	9a05      	ldr	r2, [sp, #20]
 800b6fa:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b848 <_strtod_l+0x598>
 800b6fe:	f04f 0a00 	mov.w	sl, #0
 800b702:	6013      	str	r3, [r2, #0]
 800b704:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b706:	2b00      	cmp	r3, #0
 800b708:	f43f ae0b 	beq.w	800b322 <_strtod_l+0x72>
 800b70c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b70e:	9805      	ldr	r0, [sp, #20]
 800b710:	f7ff f938 	bl	800a984 <_Bfree>
 800b714:	4649      	mov	r1, r9
 800b716:	9805      	ldr	r0, [sp, #20]
 800b718:	f7ff f934 	bl	800a984 <_Bfree>
 800b71c:	4641      	mov	r1, r8
 800b71e:	9805      	ldr	r0, [sp, #20]
 800b720:	f7ff f930 	bl	800a984 <_Bfree>
 800b724:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b726:	9805      	ldr	r0, [sp, #20]
 800b728:	f7ff f92c 	bl	800a984 <_Bfree>
 800b72c:	4621      	mov	r1, r4
 800b72e:	9805      	ldr	r0, [sp, #20]
 800b730:	f7ff f928 	bl	800a984 <_Bfree>
 800b734:	e5f5      	b.n	800b322 <_strtod_l+0x72>
 800b736:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b73a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b73c:	4293      	cmp	r3, r2
 800b73e:	dbbc      	blt.n	800b6ba <_strtod_l+0x40a>
 800b740:	f1c5 050f 	rsb	r5, r5, #15
 800b744:	4c3e      	ldr	r4, [pc, #248]	@ (800b840 <_strtod_l+0x590>)
 800b746:	4652      	mov	r2, sl
 800b748:	465b      	mov	r3, fp
 800b74a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b74e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b752:	f7f4 ff35 	bl	80005c0 <__aeabi_dmul>
 800b756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b758:	1b5d      	subs	r5, r3, r5
 800b75a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b75e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b762:	e78f      	b.n	800b684 <_strtod_l+0x3d4>
 800b764:	3316      	adds	r3, #22
 800b766:	dba8      	blt.n	800b6ba <_strtod_l+0x40a>
 800b768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b76a:	4650      	mov	r0, sl
 800b76c:	4659      	mov	r1, fp
 800b76e:	eba3 0808 	sub.w	r8, r3, r8
 800b772:	4b33      	ldr	r3, [pc, #204]	@ (800b840 <_strtod_l+0x590>)
 800b774:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b778:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b77c:	f7f5 f84a 	bl	8000814 <__aeabi_ddiv>
 800b780:	e782      	b.n	800b688 <_strtod_l+0x3d8>
 800b782:	2300      	movs	r3, #0
 800b784:	1124      	asrs	r4, r4, #4
 800b786:	4650      	mov	r0, sl
 800b788:	4659      	mov	r1, fp
 800b78a:	4f2e      	ldr	r7, [pc, #184]	@ (800b844 <_strtod_l+0x594>)
 800b78c:	461e      	mov	r6, r3
 800b78e:	2c01      	cmp	r4, #1
 800b790:	dc21      	bgt.n	800b7d6 <_strtod_l+0x526>
 800b792:	b10b      	cbz	r3, 800b798 <_strtod_l+0x4e8>
 800b794:	4682      	mov	sl, r0
 800b796:	468b      	mov	fp, r1
 800b798:	492a      	ldr	r1, [pc, #168]	@ (800b844 <_strtod_l+0x594>)
 800b79a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b79e:	4652      	mov	r2, sl
 800b7a0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b7a4:	465b      	mov	r3, fp
 800b7a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7aa:	f7f4 ff09 	bl	80005c0 <__aeabi_dmul>
 800b7ae:	4b26      	ldr	r3, [pc, #152]	@ (800b848 <_strtod_l+0x598>)
 800b7b0:	460a      	mov	r2, r1
 800b7b2:	4682      	mov	sl, r0
 800b7b4:	400b      	ands	r3, r1
 800b7b6:	4925      	ldr	r1, [pc, #148]	@ (800b84c <_strtod_l+0x59c>)
 800b7b8:	428b      	cmp	r3, r1
 800b7ba:	d898      	bhi.n	800b6ee <_strtod_l+0x43e>
 800b7bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b7c0:	428b      	cmp	r3, r1
 800b7c2:	bf86      	itte	hi
 800b7c4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b850 <_strtod_l+0x5a0>
 800b7c8:	f04f 3aff 	movhi.w	sl, #4294967295
 800b7cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	9308      	str	r3, [sp, #32]
 800b7d4:	e076      	b.n	800b8c4 <_strtod_l+0x614>
 800b7d6:	07e2      	lsls	r2, r4, #31
 800b7d8:	d504      	bpl.n	800b7e4 <_strtod_l+0x534>
 800b7da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7de:	f7f4 feef 	bl	80005c0 <__aeabi_dmul>
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	3601      	adds	r6, #1
 800b7e6:	1064      	asrs	r4, r4, #1
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	e7d0      	b.n	800b78e <_strtod_l+0x4de>
 800b7ec:	d0f0      	beq.n	800b7d0 <_strtod_l+0x520>
 800b7ee:	4264      	negs	r4, r4
 800b7f0:	f014 020f 	ands.w	r2, r4, #15
 800b7f4:	d00a      	beq.n	800b80c <_strtod_l+0x55c>
 800b7f6:	4b12      	ldr	r3, [pc, #72]	@ (800b840 <_strtod_l+0x590>)
 800b7f8:	4650      	mov	r0, sl
 800b7fa:	4659      	mov	r1, fp
 800b7fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	f7f5 f806 	bl	8000814 <__aeabi_ddiv>
 800b808:	4682      	mov	sl, r0
 800b80a:	468b      	mov	fp, r1
 800b80c:	1124      	asrs	r4, r4, #4
 800b80e:	d0df      	beq.n	800b7d0 <_strtod_l+0x520>
 800b810:	2c1f      	cmp	r4, #31
 800b812:	dd1f      	ble.n	800b854 <_strtod_l+0x5a4>
 800b814:	2400      	movs	r4, #0
 800b816:	46a0      	mov	r8, r4
 800b818:	46a1      	mov	r9, r4
 800b81a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b81c:	2322      	movs	r3, #34	@ 0x22
 800b81e:	9a05      	ldr	r2, [sp, #20]
 800b820:	f04f 0a00 	mov.w	sl, #0
 800b824:	f04f 0b00 	mov.w	fp, #0
 800b828:	6013      	str	r3, [r2, #0]
 800b82a:	e76b      	b.n	800b704 <_strtod_l+0x454>
 800b82c:	0800da79 	.word	0x0800da79
 800b830:	0800dd58 	.word	0x0800dd58
 800b834:	0800da71 	.word	0x0800da71
 800b838:	0800daa6 	.word	0x0800daa6
 800b83c:	0800dbfa 	.word	0x0800dbfa
 800b840:	0800dc90 	.word	0x0800dc90
 800b844:	0800dc68 	.word	0x0800dc68
 800b848:	7ff00000 	.word	0x7ff00000
 800b84c:	7ca00000 	.word	0x7ca00000
 800b850:	7fefffff 	.word	0x7fefffff
 800b854:	f014 0310 	ands.w	r3, r4, #16
 800b858:	4650      	mov	r0, sl
 800b85a:	4659      	mov	r1, fp
 800b85c:	4ea9      	ldr	r6, [pc, #676]	@ (800bb04 <_strtod_l+0x854>)
 800b85e:	bf18      	it	ne
 800b860:	236a      	movne	r3, #106	@ 0x6a
 800b862:	9308      	str	r3, [sp, #32]
 800b864:	2300      	movs	r3, #0
 800b866:	07e7      	lsls	r7, r4, #31
 800b868:	d504      	bpl.n	800b874 <_strtod_l+0x5c4>
 800b86a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b86e:	f7f4 fea7 	bl	80005c0 <__aeabi_dmul>
 800b872:	2301      	movs	r3, #1
 800b874:	1064      	asrs	r4, r4, #1
 800b876:	f106 0608 	add.w	r6, r6, #8
 800b87a:	d1f4      	bne.n	800b866 <_strtod_l+0x5b6>
 800b87c:	b10b      	cbz	r3, 800b882 <_strtod_l+0x5d2>
 800b87e:	4682      	mov	sl, r0
 800b880:	468b      	mov	fp, r1
 800b882:	9b08      	ldr	r3, [sp, #32]
 800b884:	b1b3      	cbz	r3, 800b8b4 <_strtod_l+0x604>
 800b886:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b88a:	4659      	mov	r1, fp
 800b88c:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b890:	2b00      	cmp	r3, #0
 800b892:	dd0f      	ble.n	800b8b4 <_strtod_l+0x604>
 800b894:	2b1f      	cmp	r3, #31
 800b896:	dd56      	ble.n	800b946 <_strtod_l+0x696>
 800b898:	2b34      	cmp	r3, #52	@ 0x34
 800b89a:	f04f 0a00 	mov.w	sl, #0
 800b89e:	bfdb      	ittet	le
 800b8a0:	f04f 33ff 	movle.w	r3, #4294967295
 800b8a4:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b8a8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b8ac:	4093      	lslle	r3, r2
 800b8ae:	bfd8      	it	le
 800b8b0:	ea03 0b01 	andle.w	fp, r3, r1
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	4650      	mov	r0, sl
 800b8ba:	4659      	mov	r1, fp
 800b8bc:	f7f5 f8e8 	bl	8000a90 <__aeabi_dcmpeq>
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	d1a7      	bne.n	800b814 <_strtod_l+0x564>
 800b8c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8c6:	464a      	mov	r2, r9
 800b8c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	462b      	mov	r3, r5
 800b8ce:	9805      	ldr	r0, [sp, #20]
 800b8d0:	f7ff f8c2 	bl	800aa58 <__s2b>
 800b8d4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	f43f af09 	beq.w	800b6ee <_strtod_l+0x43e>
 800b8dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8de:	2400      	movs	r4, #0
 800b8e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8e2:	2a00      	cmp	r2, #0
 800b8e4:	eba3 0308 	sub.w	r3, r3, r8
 800b8e8:	46a0      	mov	r8, r4
 800b8ea:	bfa8      	it	ge
 800b8ec:	2300      	movge	r3, #0
 800b8ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800b8f0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b8f4:	9316      	str	r3, [sp, #88]	@ 0x58
 800b8f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8f8:	9805      	ldr	r0, [sp, #20]
 800b8fa:	6859      	ldr	r1, [r3, #4]
 800b8fc:	f7ff f802 	bl	800a904 <_Balloc>
 800b900:	4681      	mov	r9, r0
 800b902:	2800      	cmp	r0, #0
 800b904:	f43f aef7 	beq.w	800b6f6 <_strtod_l+0x446>
 800b908:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b90a:	300c      	adds	r0, #12
 800b90c:	691a      	ldr	r2, [r3, #16]
 800b90e:	f103 010c 	add.w	r1, r3, #12
 800b912:	3202      	adds	r2, #2
 800b914:	0092      	lsls	r2, r2, #2
 800b916:	f001 f8eb 	bl	800caf0 <memcpy>
 800b91a:	aa1c      	add	r2, sp, #112	@ 0x70
 800b91c:	a91b      	add	r1, sp, #108	@ 0x6c
 800b91e:	9805      	ldr	r0, [sp, #20]
 800b920:	ec4b ab10 	vmov	d0, sl, fp
 800b924:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b928:	f7ff fbd4 	bl	800b0d4 <__d2b>
 800b92c:	901a      	str	r0, [sp, #104]	@ 0x68
 800b92e:	2800      	cmp	r0, #0
 800b930:	f43f aee1 	beq.w	800b6f6 <_strtod_l+0x446>
 800b934:	2101      	movs	r1, #1
 800b936:	9805      	ldr	r0, [sp, #20]
 800b938:	f7ff f924 	bl	800ab84 <__i2b>
 800b93c:	4680      	mov	r8, r0
 800b93e:	b948      	cbnz	r0, 800b954 <_strtod_l+0x6a4>
 800b940:	f04f 0800 	mov.w	r8, #0
 800b944:	e6d7      	b.n	800b6f6 <_strtod_l+0x446>
 800b946:	f04f 32ff 	mov.w	r2, #4294967295
 800b94a:	fa02 f303 	lsl.w	r3, r2, r3
 800b94e:	ea03 0a0a 	and.w	sl, r3, sl
 800b952:	e7af      	b.n	800b8b4 <_strtod_l+0x604>
 800b954:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b956:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b958:	2d00      	cmp	r5, #0
 800b95a:	bfa9      	itett	ge
 800b95c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b95e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b960:	18ef      	addge	r7, r5, r3
 800b962:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b964:	bfb8      	it	lt
 800b966:	1b5e      	sublt	r6, r3, r5
 800b968:	9b08      	ldr	r3, [sp, #32]
 800b96a:	bfb8      	it	lt
 800b96c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b96e:	1aed      	subs	r5, r5, r3
 800b970:	4b65      	ldr	r3, [pc, #404]	@ (800bb08 <_strtod_l+0x858>)
 800b972:	4415      	add	r5, r2
 800b974:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b978:	3d01      	subs	r5, #1
 800b97a:	429d      	cmp	r5, r3
 800b97c:	da4f      	bge.n	800ba1e <_strtod_l+0x76e>
 800b97e:	1b5b      	subs	r3, r3, r5
 800b980:	2101      	movs	r1, #1
 800b982:	2b1f      	cmp	r3, #31
 800b984:	eba2 0203 	sub.w	r2, r2, r3
 800b988:	dc3d      	bgt.n	800ba06 <_strtod_l+0x756>
 800b98a:	fa01 f303 	lsl.w	r3, r1, r3
 800b98e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b990:	2300      	movs	r3, #0
 800b992:	9310      	str	r3, [sp, #64]	@ 0x40
 800b994:	18bd      	adds	r5, r7, r2
 800b996:	9b08      	ldr	r3, [sp, #32]
 800b998:	4416      	add	r6, r2
 800b99a:	42af      	cmp	r7, r5
 800b99c:	441e      	add	r6, r3
 800b99e:	463b      	mov	r3, r7
 800b9a0:	bfa8      	it	ge
 800b9a2:	462b      	movge	r3, r5
 800b9a4:	42b3      	cmp	r3, r6
 800b9a6:	bfa8      	it	ge
 800b9a8:	4633      	movge	r3, r6
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	bfc2      	ittt	gt
 800b9ae:	1aed      	subgt	r5, r5, r3
 800b9b0:	1af6      	subgt	r6, r6, r3
 800b9b2:	1aff      	subgt	r7, r7, r3
 800b9b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	dd16      	ble.n	800b9e8 <_strtod_l+0x738>
 800b9ba:	4641      	mov	r1, r8
 800b9bc:	461a      	mov	r2, r3
 800b9be:	9805      	ldr	r0, [sp, #20]
 800b9c0:	f7ff f99a 	bl	800acf8 <__pow5mult>
 800b9c4:	4680      	mov	r8, r0
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	d0ba      	beq.n	800b940 <_strtod_l+0x690>
 800b9ca:	4601      	mov	r1, r0
 800b9cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b9ce:	9805      	ldr	r0, [sp, #20]
 800b9d0:	f7ff f8ee 	bl	800abb0 <__multiply>
 800b9d4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	f43f ae8d 	beq.w	800b6f6 <_strtod_l+0x446>
 800b9dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9de:	9805      	ldr	r0, [sp, #20]
 800b9e0:	f7fe ffd0 	bl	800a984 <_Bfree>
 800b9e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9e8:	2d00      	cmp	r5, #0
 800b9ea:	dc1d      	bgt.n	800ba28 <_strtod_l+0x778>
 800b9ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	dd23      	ble.n	800ba3a <_strtod_l+0x78a>
 800b9f2:	4649      	mov	r1, r9
 800b9f4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b9f6:	9805      	ldr	r0, [sp, #20]
 800b9f8:	f7ff f97e 	bl	800acf8 <__pow5mult>
 800b9fc:	4681      	mov	r9, r0
 800b9fe:	b9e0      	cbnz	r0, 800ba3a <_strtod_l+0x78a>
 800ba00:	f04f 0900 	mov.w	r9, #0
 800ba04:	e677      	b.n	800b6f6 <_strtod_l+0x446>
 800ba06:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ba0a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ba0c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ba10:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ba14:	35e2      	adds	r5, #226	@ 0xe2
 800ba16:	fa01 f305 	lsl.w	r3, r1, r5
 800ba1a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba1c:	e7ba      	b.n	800b994 <_strtod_l+0x6e4>
 800ba1e:	2300      	movs	r3, #0
 800ba20:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba22:	2301      	movs	r3, #1
 800ba24:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba26:	e7b5      	b.n	800b994 <_strtod_l+0x6e4>
 800ba28:	462a      	mov	r2, r5
 800ba2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba2c:	9805      	ldr	r0, [sp, #20]
 800ba2e:	f7ff f9bd 	bl	800adac <__lshift>
 800ba32:	901a      	str	r0, [sp, #104]	@ 0x68
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d1d9      	bne.n	800b9ec <_strtod_l+0x73c>
 800ba38:	e65d      	b.n	800b6f6 <_strtod_l+0x446>
 800ba3a:	2e00      	cmp	r6, #0
 800ba3c:	dd07      	ble.n	800ba4e <_strtod_l+0x79e>
 800ba3e:	4649      	mov	r1, r9
 800ba40:	4632      	mov	r2, r6
 800ba42:	9805      	ldr	r0, [sp, #20]
 800ba44:	f7ff f9b2 	bl	800adac <__lshift>
 800ba48:	4681      	mov	r9, r0
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d0d8      	beq.n	800ba00 <_strtod_l+0x750>
 800ba4e:	2f00      	cmp	r7, #0
 800ba50:	dd08      	ble.n	800ba64 <_strtod_l+0x7b4>
 800ba52:	4641      	mov	r1, r8
 800ba54:	463a      	mov	r2, r7
 800ba56:	9805      	ldr	r0, [sp, #20]
 800ba58:	f7ff f9a8 	bl	800adac <__lshift>
 800ba5c:	4680      	mov	r8, r0
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	f43f ae49 	beq.w	800b6f6 <_strtod_l+0x446>
 800ba64:	464a      	mov	r2, r9
 800ba66:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba68:	9805      	ldr	r0, [sp, #20]
 800ba6a:	f7ff fa27 	bl	800aebc <__mdiff>
 800ba6e:	4604      	mov	r4, r0
 800ba70:	2800      	cmp	r0, #0
 800ba72:	f43f ae40 	beq.w	800b6f6 <_strtod_l+0x446>
 800ba76:	68c3      	ldr	r3, [r0, #12]
 800ba78:	4641      	mov	r1, r8
 800ba7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	60c3      	str	r3, [r0, #12]
 800ba80:	f7ff fa00 	bl	800ae84 <__mcmp>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	da45      	bge.n	800bb14 <_strtod_l+0x864>
 800ba88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba8a:	ea53 030a 	orrs.w	r3, r3, sl
 800ba8e:	d16b      	bne.n	800bb68 <_strtod_l+0x8b8>
 800ba90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d167      	bne.n	800bb68 <_strtod_l+0x8b8>
 800ba98:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba9c:	0d1b      	lsrs	r3, r3, #20
 800ba9e:	051b      	lsls	r3, r3, #20
 800baa0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800baa4:	d960      	bls.n	800bb68 <_strtod_l+0x8b8>
 800baa6:	6963      	ldr	r3, [r4, #20]
 800baa8:	b913      	cbnz	r3, 800bab0 <_strtod_l+0x800>
 800baaa:	6923      	ldr	r3, [r4, #16]
 800baac:	2b01      	cmp	r3, #1
 800baae:	dd5b      	ble.n	800bb68 <_strtod_l+0x8b8>
 800bab0:	4621      	mov	r1, r4
 800bab2:	2201      	movs	r2, #1
 800bab4:	9805      	ldr	r0, [sp, #20]
 800bab6:	f7ff f979 	bl	800adac <__lshift>
 800baba:	4641      	mov	r1, r8
 800babc:	4604      	mov	r4, r0
 800babe:	f7ff f9e1 	bl	800ae84 <__mcmp>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	dd50      	ble.n	800bb68 <_strtod_l+0x8b8>
 800bac6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800baca:	9a08      	ldr	r2, [sp, #32]
 800bacc:	0d1b      	lsrs	r3, r3, #20
 800bace:	051b      	lsls	r3, r3, #20
 800bad0:	2a00      	cmp	r2, #0
 800bad2:	d06a      	beq.n	800bbaa <_strtod_l+0x8fa>
 800bad4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bad8:	d867      	bhi.n	800bbaa <_strtod_l+0x8fa>
 800bada:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bade:	f67f ae9d 	bls.w	800b81c <_strtod_l+0x56c>
 800bae2:	4b0a      	ldr	r3, [pc, #40]	@ (800bb0c <_strtod_l+0x85c>)
 800bae4:	4650      	mov	r0, sl
 800bae6:	4659      	mov	r1, fp
 800bae8:	2200      	movs	r2, #0
 800baea:	f7f4 fd69 	bl	80005c0 <__aeabi_dmul>
 800baee:	4b08      	ldr	r3, [pc, #32]	@ (800bb10 <_strtod_l+0x860>)
 800baf0:	4682      	mov	sl, r0
 800baf2:	468b      	mov	fp, r1
 800baf4:	400b      	ands	r3, r1
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f47f ae08 	bne.w	800b70c <_strtod_l+0x45c>
 800bafc:	2322      	movs	r3, #34	@ 0x22
 800bafe:	9a05      	ldr	r2, [sp, #20]
 800bb00:	6013      	str	r3, [r2, #0]
 800bb02:	e603      	b.n	800b70c <_strtod_l+0x45c>
 800bb04:	0800dd80 	.word	0x0800dd80
 800bb08:	fffffc02 	.word	0xfffffc02
 800bb0c:	39500000 	.word	0x39500000
 800bb10:	7ff00000 	.word	0x7ff00000
 800bb14:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bb18:	d165      	bne.n	800bbe6 <_strtod_l+0x936>
 800bb1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bb1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb20:	b35a      	cbz	r2, 800bb7a <_strtod_l+0x8ca>
 800bb22:	4a9f      	ldr	r2, [pc, #636]	@ (800bda0 <_strtod_l+0xaf0>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d12b      	bne.n	800bb80 <_strtod_l+0x8d0>
 800bb28:	9b08      	ldr	r3, [sp, #32]
 800bb2a:	4651      	mov	r1, sl
 800bb2c:	b303      	cbz	r3, 800bb70 <_strtod_l+0x8c0>
 800bb2e:	465a      	mov	r2, fp
 800bb30:	4b9c      	ldr	r3, [pc, #624]	@ (800bda4 <_strtod_l+0xaf4>)
 800bb32:	4013      	ands	r3, r2
 800bb34:	f04f 32ff 	mov.w	r2, #4294967295
 800bb38:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bb3c:	d81b      	bhi.n	800bb76 <_strtod_l+0x8c6>
 800bb3e:	0d1b      	lsrs	r3, r3, #20
 800bb40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bb44:	fa02 f303 	lsl.w	r3, r2, r3
 800bb48:	4299      	cmp	r1, r3
 800bb4a:	d119      	bne.n	800bb80 <_strtod_l+0x8d0>
 800bb4c:	4b96      	ldr	r3, [pc, #600]	@ (800bda8 <_strtod_l+0xaf8>)
 800bb4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d102      	bne.n	800bb5a <_strtod_l+0x8aa>
 800bb54:	3101      	adds	r1, #1
 800bb56:	f43f adce 	beq.w	800b6f6 <_strtod_l+0x446>
 800bb5a:	4b92      	ldr	r3, [pc, #584]	@ (800bda4 <_strtod_l+0xaf4>)
 800bb5c:	f04f 0a00 	mov.w	sl, #0
 800bb60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb62:	401a      	ands	r2, r3
 800bb64:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bb68:	9b08      	ldr	r3, [sp, #32]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1b9      	bne.n	800bae2 <_strtod_l+0x832>
 800bb6e:	e5cd      	b.n	800b70c <_strtod_l+0x45c>
 800bb70:	f04f 33ff 	mov.w	r3, #4294967295
 800bb74:	e7e8      	b.n	800bb48 <_strtod_l+0x898>
 800bb76:	4613      	mov	r3, r2
 800bb78:	e7e6      	b.n	800bb48 <_strtod_l+0x898>
 800bb7a:	ea53 030a 	orrs.w	r3, r3, sl
 800bb7e:	d0a2      	beq.n	800bac6 <_strtod_l+0x816>
 800bb80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb82:	b1db      	cbz	r3, 800bbbc <_strtod_l+0x90c>
 800bb84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb86:	4213      	tst	r3, r2
 800bb88:	d0ee      	beq.n	800bb68 <_strtod_l+0x8b8>
 800bb8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb8c:	4650      	mov	r0, sl
 800bb8e:	9a08      	ldr	r2, [sp, #32]
 800bb90:	4659      	mov	r1, fp
 800bb92:	b1bb      	cbz	r3, 800bbc4 <_strtod_l+0x914>
 800bb94:	f7ff fb6c 	bl	800b270 <sulp>
 800bb98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb9c:	ec53 2b10 	vmov	r2, r3, d0
 800bba0:	f7f4 fb58 	bl	8000254 <__adddf3>
 800bba4:	4682      	mov	sl, r0
 800bba6:	468b      	mov	fp, r1
 800bba8:	e7de      	b.n	800bb68 <_strtod_l+0x8b8>
 800bbaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bbae:	f04f 3aff 	mov.w	sl, #4294967295
 800bbb2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bbb6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bbba:	e7d5      	b.n	800bb68 <_strtod_l+0x8b8>
 800bbbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bbbe:	ea13 0f0a 	tst.w	r3, sl
 800bbc2:	e7e1      	b.n	800bb88 <_strtod_l+0x8d8>
 800bbc4:	f7ff fb54 	bl	800b270 <sulp>
 800bbc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbcc:	ec53 2b10 	vmov	r2, r3, d0
 800bbd0:	f7f4 fb3e 	bl	8000250 <__aeabi_dsub>
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	4682      	mov	sl, r0
 800bbda:	468b      	mov	fp, r1
 800bbdc:	f7f4 ff58 	bl	8000a90 <__aeabi_dcmpeq>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	d0c1      	beq.n	800bb68 <_strtod_l+0x8b8>
 800bbe4:	e61a      	b.n	800b81c <_strtod_l+0x56c>
 800bbe6:	4641      	mov	r1, r8
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f7ff facb 	bl	800b184 <__ratio>
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bbf4:	ec57 6b10 	vmov	r6, r7, d0
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	4639      	mov	r1, r7
 800bbfc:	f7f4 ff5c 	bl	8000ab8 <__aeabi_dcmple>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	d06f      	beq.n	800bce4 <_strtod_l+0xa34>
 800bc04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d17a      	bne.n	800bd00 <_strtod_l+0xa50>
 800bc0a:	f1ba 0f00 	cmp.w	sl, #0
 800bc0e:	d158      	bne.n	800bcc2 <_strtod_l+0xa12>
 800bc10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d15a      	bne.n	800bcd0 <_strtod_l+0xa20>
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	4b63      	ldr	r3, [pc, #396]	@ (800bdac <_strtod_l+0xafc>)
 800bc1e:	4630      	mov	r0, r6
 800bc20:	4639      	mov	r1, r7
 800bc22:	f7f4 ff3f 	bl	8000aa4 <__aeabi_dcmplt>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	d159      	bne.n	800bcde <_strtod_l+0xa2e>
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	4639      	mov	r1, r7
 800bc2e:	2200      	movs	r2, #0
 800bc30:	4b5f      	ldr	r3, [pc, #380]	@ (800bdb0 <_strtod_l+0xb00>)
 800bc32:	f7f4 fcc5 	bl	80005c0 <__aeabi_dmul>
 800bc36:	4606      	mov	r6, r0
 800bc38:	460f      	mov	r7, r1
 800bc3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bc3e:	9606      	str	r6, [sp, #24]
 800bc40:	9307      	str	r3, [sp, #28]
 800bc42:	4d58      	ldr	r5, [pc, #352]	@ (800bda4 <_strtod_l+0xaf4>)
 800bc44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bc4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc4e:	401d      	ands	r5, r3
 800bc50:	4b58      	ldr	r3, [pc, #352]	@ (800bdb4 <_strtod_l+0xb04>)
 800bc52:	429d      	cmp	r5, r3
 800bc54:	f040 80b2 	bne.w	800bdbc <_strtod_l+0xb0c>
 800bc58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bc5e:	ec4b ab10 	vmov	d0, sl, fp
 800bc62:	f7ff f9c3 	bl	800afec <__ulp>
 800bc66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc6a:	ec51 0b10 	vmov	r0, r1, d0
 800bc6e:	f7f4 fca7 	bl	80005c0 <__aeabi_dmul>
 800bc72:	4652      	mov	r2, sl
 800bc74:	465b      	mov	r3, fp
 800bc76:	f7f4 faed 	bl	8000254 <__adddf3>
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	4949      	ldr	r1, [pc, #292]	@ (800bda4 <_strtod_l+0xaf4>)
 800bc7e:	4682      	mov	sl, r0
 800bc80:	4a4d      	ldr	r2, [pc, #308]	@ (800bdb8 <_strtod_l+0xb08>)
 800bc82:	4019      	ands	r1, r3
 800bc84:	4291      	cmp	r1, r2
 800bc86:	d942      	bls.n	800bd0e <_strtod_l+0xa5e>
 800bc88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bc8a:	4b47      	ldr	r3, [pc, #284]	@ (800bda8 <_strtod_l+0xaf8>)
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d103      	bne.n	800bc98 <_strtod_l+0x9e8>
 800bc90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc92:	3301      	adds	r3, #1
 800bc94:	f43f ad2f 	beq.w	800b6f6 <_strtod_l+0x446>
 800bc98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bda8 <_strtod_l+0xaf8>
 800bc9c:	f04f 3aff 	mov.w	sl, #4294967295
 800bca0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bca2:	9805      	ldr	r0, [sp, #20]
 800bca4:	f7fe fe6e 	bl	800a984 <_Bfree>
 800bca8:	4649      	mov	r1, r9
 800bcaa:	9805      	ldr	r0, [sp, #20]
 800bcac:	f7fe fe6a 	bl	800a984 <_Bfree>
 800bcb0:	4641      	mov	r1, r8
 800bcb2:	9805      	ldr	r0, [sp, #20]
 800bcb4:	f7fe fe66 	bl	800a984 <_Bfree>
 800bcb8:	4621      	mov	r1, r4
 800bcba:	9805      	ldr	r0, [sp, #20]
 800bcbc:	f7fe fe62 	bl	800a984 <_Bfree>
 800bcc0:	e619      	b.n	800b8f6 <_strtod_l+0x646>
 800bcc2:	f1ba 0f01 	cmp.w	sl, #1
 800bcc6:	d103      	bne.n	800bcd0 <_strtod_l+0xa20>
 800bcc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f43f ada6 	beq.w	800b81c <_strtod_l+0x56c>
 800bcd0:	2600      	movs	r6, #0
 800bcd2:	4f36      	ldr	r7, [pc, #216]	@ (800bdac <_strtod_l+0xafc>)
 800bcd4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800bd80 <_strtod_l+0xad0>
 800bcd8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcdc:	e7b1      	b.n	800bc42 <_strtod_l+0x992>
 800bcde:	2600      	movs	r6, #0
 800bce0:	4f33      	ldr	r7, [pc, #204]	@ (800bdb0 <_strtod_l+0xb00>)
 800bce2:	e7aa      	b.n	800bc3a <_strtod_l+0x98a>
 800bce4:	4b32      	ldr	r3, [pc, #200]	@ (800bdb0 <_strtod_l+0xb00>)
 800bce6:	4630      	mov	r0, r6
 800bce8:	4639      	mov	r1, r7
 800bcea:	2200      	movs	r2, #0
 800bcec:	f7f4 fc68 	bl	80005c0 <__aeabi_dmul>
 800bcf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcf2:	4606      	mov	r6, r0
 800bcf4:	460f      	mov	r7, r1
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d09f      	beq.n	800bc3a <_strtod_l+0x98a>
 800bcfa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bcfe:	e7a0      	b.n	800bc42 <_strtod_l+0x992>
 800bd00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bd88 <_strtod_l+0xad8>
 800bd04:	ec57 6b17 	vmov	r6, r7, d7
 800bd08:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bd0c:	e799      	b.n	800bc42 <_strtod_l+0x992>
 800bd0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bd12:	9b08      	ldr	r3, [sp, #32]
 800bd14:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1c1      	bne.n	800bca0 <_strtod_l+0x9f0>
 800bd1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd20:	0d1b      	lsrs	r3, r3, #20
 800bd22:	051b      	lsls	r3, r3, #20
 800bd24:	429d      	cmp	r5, r3
 800bd26:	d1bb      	bne.n	800bca0 <_strtod_l+0x9f0>
 800bd28:	4630      	mov	r0, r6
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	f7f4 ffa8 	bl	8000c80 <__aeabi_d2lz>
 800bd30:	f7f4 fc18 	bl	8000564 <__aeabi_l2d>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	4630      	mov	r0, r6
 800bd3a:	4639      	mov	r1, r7
 800bd3c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bd40:	f7f4 fa86 	bl	8000250 <__aeabi_dsub>
 800bd44:	460b      	mov	r3, r1
 800bd46:	4602      	mov	r2, r0
 800bd48:	ea46 060a 	orr.w	r6, r6, sl
 800bd4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bd50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd52:	431e      	orrs	r6, r3
 800bd54:	d06f      	beq.n	800be36 <_strtod_l+0xb86>
 800bd56:	a30e      	add	r3, pc, #56	@ (adr r3, 800bd90 <_strtod_l+0xae0>)
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	f7f4 fea2 	bl	8000aa4 <__aeabi_dcmplt>
 800bd60:	2800      	cmp	r0, #0
 800bd62:	f47f acd3 	bne.w	800b70c <_strtod_l+0x45c>
 800bd66:	a30c      	add	r3, pc, #48	@ (adr r3, 800bd98 <_strtod_l+0xae8>)
 800bd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd70:	f7f4 feb6 	bl	8000ae0 <__aeabi_dcmpgt>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	d093      	beq.n	800bca0 <_strtod_l+0x9f0>
 800bd78:	e4c8      	b.n	800b70c <_strtod_l+0x45c>
 800bd7a:	bf00      	nop
 800bd7c:	f3af 8000 	nop.w
 800bd80:	00000000 	.word	0x00000000
 800bd84:	bff00000 	.word	0xbff00000
 800bd88:	00000000 	.word	0x00000000
 800bd8c:	3ff00000 	.word	0x3ff00000
 800bd90:	94a03595 	.word	0x94a03595
 800bd94:	3fdfffff 	.word	0x3fdfffff
 800bd98:	35afe535 	.word	0x35afe535
 800bd9c:	3fe00000 	.word	0x3fe00000
 800bda0:	000fffff 	.word	0x000fffff
 800bda4:	7ff00000 	.word	0x7ff00000
 800bda8:	7fefffff 	.word	0x7fefffff
 800bdac:	3ff00000 	.word	0x3ff00000
 800bdb0:	3fe00000 	.word	0x3fe00000
 800bdb4:	7fe00000 	.word	0x7fe00000
 800bdb8:	7c9fffff 	.word	0x7c9fffff
 800bdbc:	9b08      	ldr	r3, [sp, #32]
 800bdbe:	b323      	cbz	r3, 800be0a <_strtod_l+0xb5a>
 800bdc0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bdc4:	d821      	bhi.n	800be0a <_strtod_l+0xb5a>
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	4639      	mov	r1, r7
 800bdca:	a327      	add	r3, pc, #156	@ (adr r3, 800be68 <_strtod_l+0xbb8>)
 800bdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd0:	f7f4 fe72 	bl	8000ab8 <__aeabi_dcmple>
 800bdd4:	b1a0      	cbz	r0, 800be00 <_strtod_l+0xb50>
 800bdd6:	4639      	mov	r1, r7
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f7f4 fec9 	bl	8000b70 <__aeabi_d2uiz>
 800bdde:	2801      	cmp	r0, #1
 800bde0:	bf38      	it	cc
 800bde2:	2001      	movcc	r0, #1
 800bde4:	f7f4 fb72 	bl	80004cc <__aeabi_ui2d>
 800bde8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdea:	4606      	mov	r6, r0
 800bdec:	460f      	mov	r7, r1
 800bdee:	b9fb      	cbnz	r3, 800be30 <_strtod_l+0xb80>
 800bdf0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bdf4:	9014      	str	r0, [sp, #80]	@ 0x50
 800bdf6:	9315      	str	r3, [sp, #84]	@ 0x54
 800bdf8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bdfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800be00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be02:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800be06:	1b5b      	subs	r3, r3, r5
 800be08:	9311      	str	r3, [sp, #68]	@ 0x44
 800be0a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800be0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800be12:	f7ff f8eb 	bl	800afec <__ulp>
 800be16:	4650      	mov	r0, sl
 800be18:	4659      	mov	r1, fp
 800be1a:	ec53 2b10 	vmov	r2, r3, d0
 800be1e:	f7f4 fbcf 	bl	80005c0 <__aeabi_dmul>
 800be22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800be26:	f7f4 fa15 	bl	8000254 <__adddf3>
 800be2a:	4682      	mov	sl, r0
 800be2c:	468b      	mov	fp, r1
 800be2e:	e770      	b.n	800bd12 <_strtod_l+0xa62>
 800be30:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800be34:	e7e0      	b.n	800bdf8 <_strtod_l+0xb48>
 800be36:	a30e      	add	r3, pc, #56	@ (adr r3, 800be70 <_strtod_l+0xbc0>)
 800be38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3c:	f7f4 fe32 	bl	8000aa4 <__aeabi_dcmplt>
 800be40:	e798      	b.n	800bd74 <_strtod_l+0xac4>
 800be42:	2300      	movs	r3, #0
 800be44:	930e      	str	r3, [sp, #56]	@ 0x38
 800be46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be48:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800be4a:	6013      	str	r3, [r2, #0]
 800be4c:	f7ff ba6d 	b.w	800b32a <_strtod_l+0x7a>
 800be50:	2a65      	cmp	r2, #101	@ 0x65
 800be52:	f43f ab67 	beq.w	800b524 <_strtod_l+0x274>
 800be56:	2a45      	cmp	r2, #69	@ 0x45
 800be58:	f43f ab64 	beq.w	800b524 <_strtod_l+0x274>
 800be5c:	2301      	movs	r3, #1
 800be5e:	f7ff bba0 	b.w	800b5a2 <_strtod_l+0x2f2>
 800be62:	bf00      	nop
 800be64:	f3af 8000 	nop.w
 800be68:	ffc00000 	.word	0xffc00000
 800be6c:	41dfffff 	.word	0x41dfffff
 800be70:	94a03595 	.word	0x94a03595
 800be74:	3fcfffff 	.word	0x3fcfffff

0800be78 <_strtod_r>:
 800be78:	4b01      	ldr	r3, [pc, #4]	@ (800be80 <_strtod_r+0x8>)
 800be7a:	f7ff ba19 	b.w	800b2b0 <_strtod_l>
 800be7e:	bf00      	nop
 800be80:	2000006c 	.word	0x2000006c

0800be84 <_strtol_l.isra.0>:
 800be84:	2b24      	cmp	r3, #36	@ 0x24
 800be86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be8a:	4686      	mov	lr, r0
 800be8c:	4690      	mov	r8, r2
 800be8e:	d801      	bhi.n	800be94 <_strtol_l.isra.0+0x10>
 800be90:	2b01      	cmp	r3, #1
 800be92:	d106      	bne.n	800bea2 <_strtol_l.isra.0+0x1e>
 800be94:	f7fd fd94 	bl	80099c0 <__errno>
 800be98:	2316      	movs	r3, #22
 800be9a:	6003      	str	r3, [r0, #0]
 800be9c:	2000      	movs	r0, #0
 800be9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bea2:	460d      	mov	r5, r1
 800bea4:	4833      	ldr	r0, [pc, #204]	@ (800bf74 <_strtol_l.isra.0+0xf0>)
 800bea6:	462a      	mov	r2, r5
 800bea8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800beac:	5d06      	ldrb	r6, [r0, r4]
 800beae:	f016 0608 	ands.w	r6, r6, #8
 800beb2:	d1f8      	bne.n	800bea6 <_strtol_l.isra.0+0x22>
 800beb4:	2c2d      	cmp	r4, #45	@ 0x2d
 800beb6:	d110      	bne.n	800beda <_strtol_l.isra.0+0x56>
 800beb8:	782c      	ldrb	r4, [r5, #0]
 800beba:	2601      	movs	r6, #1
 800bebc:	1c95      	adds	r5, r2, #2
 800bebe:	f033 0210 	bics.w	r2, r3, #16
 800bec2:	d115      	bne.n	800bef0 <_strtol_l.isra.0+0x6c>
 800bec4:	2c30      	cmp	r4, #48	@ 0x30
 800bec6:	d10d      	bne.n	800bee4 <_strtol_l.isra.0+0x60>
 800bec8:	782a      	ldrb	r2, [r5, #0]
 800beca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bece:	2a58      	cmp	r2, #88	@ 0x58
 800bed0:	d108      	bne.n	800bee4 <_strtol_l.isra.0+0x60>
 800bed2:	786c      	ldrb	r4, [r5, #1]
 800bed4:	3502      	adds	r5, #2
 800bed6:	2310      	movs	r3, #16
 800bed8:	e00a      	b.n	800bef0 <_strtol_l.isra.0+0x6c>
 800beda:	2c2b      	cmp	r4, #43	@ 0x2b
 800bedc:	bf04      	itt	eq
 800bede:	782c      	ldrbeq	r4, [r5, #0]
 800bee0:	1c95      	addeq	r5, r2, #2
 800bee2:	e7ec      	b.n	800bebe <_strtol_l.isra.0+0x3a>
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d1f6      	bne.n	800bed6 <_strtol_l.isra.0+0x52>
 800bee8:	2c30      	cmp	r4, #48	@ 0x30
 800beea:	bf14      	ite	ne
 800beec:	230a      	movne	r3, #10
 800beee:	2308      	moveq	r3, #8
 800bef0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bef4:	2200      	movs	r2, #0
 800bef6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800befa:	4610      	mov	r0, r2
 800befc:	fbbc f9f3 	udiv	r9, ip, r3
 800bf00:	fb03 ca19 	mls	sl, r3, r9, ip
 800bf04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bf08:	2f09      	cmp	r7, #9
 800bf0a:	d80f      	bhi.n	800bf2c <_strtol_l.isra.0+0xa8>
 800bf0c:	463c      	mov	r4, r7
 800bf0e:	42a3      	cmp	r3, r4
 800bf10:	dd1b      	ble.n	800bf4a <_strtol_l.isra.0+0xc6>
 800bf12:	1c57      	adds	r7, r2, #1
 800bf14:	d007      	beq.n	800bf26 <_strtol_l.isra.0+0xa2>
 800bf16:	4581      	cmp	r9, r0
 800bf18:	d314      	bcc.n	800bf44 <_strtol_l.isra.0+0xc0>
 800bf1a:	d101      	bne.n	800bf20 <_strtol_l.isra.0+0x9c>
 800bf1c:	45a2      	cmp	sl, r4
 800bf1e:	db11      	blt.n	800bf44 <_strtol_l.isra.0+0xc0>
 800bf20:	fb00 4003 	mla	r0, r0, r3, r4
 800bf24:	2201      	movs	r2, #1
 800bf26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf2a:	e7eb      	b.n	800bf04 <_strtol_l.isra.0+0x80>
 800bf2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bf30:	2f19      	cmp	r7, #25
 800bf32:	d801      	bhi.n	800bf38 <_strtol_l.isra.0+0xb4>
 800bf34:	3c37      	subs	r4, #55	@ 0x37
 800bf36:	e7ea      	b.n	800bf0e <_strtol_l.isra.0+0x8a>
 800bf38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bf3c:	2f19      	cmp	r7, #25
 800bf3e:	d804      	bhi.n	800bf4a <_strtol_l.isra.0+0xc6>
 800bf40:	3c57      	subs	r4, #87	@ 0x57
 800bf42:	e7e4      	b.n	800bf0e <_strtol_l.isra.0+0x8a>
 800bf44:	f04f 32ff 	mov.w	r2, #4294967295
 800bf48:	e7ed      	b.n	800bf26 <_strtol_l.isra.0+0xa2>
 800bf4a:	1c53      	adds	r3, r2, #1
 800bf4c:	d108      	bne.n	800bf60 <_strtol_l.isra.0+0xdc>
 800bf4e:	2322      	movs	r3, #34	@ 0x22
 800bf50:	4660      	mov	r0, ip
 800bf52:	f8ce 3000 	str.w	r3, [lr]
 800bf56:	f1b8 0f00 	cmp.w	r8, #0
 800bf5a:	d0a0      	beq.n	800be9e <_strtol_l.isra.0+0x1a>
 800bf5c:	1e69      	subs	r1, r5, #1
 800bf5e:	e006      	b.n	800bf6e <_strtol_l.isra.0+0xea>
 800bf60:	b106      	cbz	r6, 800bf64 <_strtol_l.isra.0+0xe0>
 800bf62:	4240      	negs	r0, r0
 800bf64:	f1b8 0f00 	cmp.w	r8, #0
 800bf68:	d099      	beq.n	800be9e <_strtol_l.isra.0+0x1a>
 800bf6a:	2a00      	cmp	r2, #0
 800bf6c:	d1f6      	bne.n	800bf5c <_strtol_l.isra.0+0xd8>
 800bf6e:	f8c8 1000 	str.w	r1, [r8]
 800bf72:	e794      	b.n	800be9e <_strtol_l.isra.0+0x1a>
 800bf74:	0800dda9 	.word	0x0800dda9

0800bf78 <_strtol_r>:
 800bf78:	f7ff bf84 	b.w	800be84 <_strtol_l.isra.0>

0800bf7c <__ssputs_r>:
 800bf7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf80:	461f      	mov	r7, r3
 800bf82:	688e      	ldr	r6, [r1, #8]
 800bf84:	4682      	mov	sl, r0
 800bf86:	460c      	mov	r4, r1
 800bf88:	42be      	cmp	r6, r7
 800bf8a:	4690      	mov	r8, r2
 800bf8c:	680b      	ldr	r3, [r1, #0]
 800bf8e:	d82d      	bhi.n	800bfec <__ssputs_r+0x70>
 800bf90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bf98:	d026      	beq.n	800bfe8 <__ssputs_r+0x6c>
 800bf9a:	6965      	ldr	r5, [r4, #20]
 800bf9c:	6909      	ldr	r1, [r1, #16]
 800bf9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfa2:	eba3 0901 	sub.w	r9, r3, r1
 800bfa6:	1c7b      	adds	r3, r7, #1
 800bfa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfac:	444b      	add	r3, r9
 800bfae:	106d      	asrs	r5, r5, #1
 800bfb0:	429d      	cmp	r5, r3
 800bfb2:	bf38      	it	cc
 800bfb4:	461d      	movcc	r5, r3
 800bfb6:	0553      	lsls	r3, r2, #21
 800bfb8:	d527      	bpl.n	800c00a <__ssputs_r+0x8e>
 800bfba:	4629      	mov	r1, r5
 800bfbc:	f7fe fc16 	bl	800a7ec <_malloc_r>
 800bfc0:	4606      	mov	r6, r0
 800bfc2:	b360      	cbz	r0, 800c01e <__ssputs_r+0xa2>
 800bfc4:	464a      	mov	r2, r9
 800bfc6:	6921      	ldr	r1, [r4, #16]
 800bfc8:	f000 fd92 	bl	800caf0 <memcpy>
 800bfcc:	89a3      	ldrh	r3, [r4, #12]
 800bfce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bfd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfd6:	81a3      	strh	r3, [r4, #12]
 800bfd8:	6126      	str	r6, [r4, #16]
 800bfda:	444e      	add	r6, r9
 800bfdc:	6165      	str	r5, [r4, #20]
 800bfde:	eba5 0509 	sub.w	r5, r5, r9
 800bfe2:	6026      	str	r6, [r4, #0]
 800bfe4:	463e      	mov	r6, r7
 800bfe6:	60a5      	str	r5, [r4, #8]
 800bfe8:	42be      	cmp	r6, r7
 800bfea:	d900      	bls.n	800bfee <__ssputs_r+0x72>
 800bfec:	463e      	mov	r6, r7
 800bfee:	4632      	mov	r2, r6
 800bff0:	4641      	mov	r1, r8
 800bff2:	6820      	ldr	r0, [r4, #0]
 800bff4:	f000 fd52 	bl	800ca9c <memmove>
 800bff8:	68a3      	ldr	r3, [r4, #8]
 800bffa:	2000      	movs	r0, #0
 800bffc:	1b9b      	subs	r3, r3, r6
 800bffe:	60a3      	str	r3, [r4, #8]
 800c000:	6823      	ldr	r3, [r4, #0]
 800c002:	4433      	add	r3, r6
 800c004:	6023      	str	r3, [r4, #0]
 800c006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c00a:	462a      	mov	r2, r5
 800c00c:	f001 f901 	bl	800d212 <_realloc_r>
 800c010:	4606      	mov	r6, r0
 800c012:	2800      	cmp	r0, #0
 800c014:	d1e0      	bne.n	800bfd8 <__ssputs_r+0x5c>
 800c016:	6921      	ldr	r1, [r4, #16]
 800c018:	4650      	mov	r0, sl
 800c01a:	f7fe fb73 	bl	800a704 <_free_r>
 800c01e:	230c      	movs	r3, #12
 800c020:	f04f 30ff 	mov.w	r0, #4294967295
 800c024:	f8ca 3000 	str.w	r3, [sl]
 800c028:	89a3      	ldrh	r3, [r4, #12]
 800c02a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c02e:	81a3      	strh	r3, [r4, #12]
 800c030:	e7e9      	b.n	800c006 <__ssputs_r+0x8a>
	...

0800c034 <_svfiprintf_r>:
 800c034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c038:	4698      	mov	r8, r3
 800c03a:	898b      	ldrh	r3, [r1, #12]
 800c03c:	b09d      	sub	sp, #116	@ 0x74
 800c03e:	4607      	mov	r7, r0
 800c040:	061b      	lsls	r3, r3, #24
 800c042:	460d      	mov	r5, r1
 800c044:	4614      	mov	r4, r2
 800c046:	d510      	bpl.n	800c06a <_svfiprintf_r+0x36>
 800c048:	690b      	ldr	r3, [r1, #16]
 800c04a:	b973      	cbnz	r3, 800c06a <_svfiprintf_r+0x36>
 800c04c:	2140      	movs	r1, #64	@ 0x40
 800c04e:	f7fe fbcd 	bl	800a7ec <_malloc_r>
 800c052:	6028      	str	r0, [r5, #0]
 800c054:	6128      	str	r0, [r5, #16]
 800c056:	b930      	cbnz	r0, 800c066 <_svfiprintf_r+0x32>
 800c058:	230c      	movs	r3, #12
 800c05a:	603b      	str	r3, [r7, #0]
 800c05c:	f04f 30ff 	mov.w	r0, #4294967295
 800c060:	b01d      	add	sp, #116	@ 0x74
 800c062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c066:	2340      	movs	r3, #64	@ 0x40
 800c068:	616b      	str	r3, [r5, #20]
 800c06a:	2300      	movs	r3, #0
 800c06c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c070:	f04f 0901 	mov.w	r9, #1
 800c074:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800c218 <_svfiprintf_r+0x1e4>
 800c078:	9309      	str	r3, [sp, #36]	@ 0x24
 800c07a:	2320      	movs	r3, #32
 800c07c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c080:	2330      	movs	r3, #48	@ 0x30
 800c082:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c086:	4623      	mov	r3, r4
 800c088:	469a      	mov	sl, r3
 800c08a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c08e:	b10a      	cbz	r2, 800c094 <_svfiprintf_r+0x60>
 800c090:	2a25      	cmp	r2, #37	@ 0x25
 800c092:	d1f9      	bne.n	800c088 <_svfiprintf_r+0x54>
 800c094:	ebba 0b04 	subs.w	fp, sl, r4
 800c098:	d00b      	beq.n	800c0b2 <_svfiprintf_r+0x7e>
 800c09a:	465b      	mov	r3, fp
 800c09c:	4622      	mov	r2, r4
 800c09e:	4629      	mov	r1, r5
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	f7ff ff6b 	bl	800bf7c <__ssputs_r>
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f000 80a7 	beq.w	800c1fa <_svfiprintf_r+0x1c6>
 800c0ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0ae:	445a      	add	r2, fp
 800c0b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f000 809f 	beq.w	800c1fa <_svfiprintf_r+0x1c6>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c2:	f10a 0a01 	add.w	sl, sl, #1
 800c0c6:	9304      	str	r3, [sp, #16]
 800c0c8:	9307      	str	r3, [sp, #28]
 800c0ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0d4:	4654      	mov	r4, sl
 800c0d6:	2205      	movs	r2, #5
 800c0d8:	484f      	ldr	r0, [pc, #316]	@ (800c218 <_svfiprintf_r+0x1e4>)
 800c0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0de:	f7fd fc9c 	bl	8009a1a <memchr>
 800c0e2:	9a04      	ldr	r2, [sp, #16]
 800c0e4:	b9d8      	cbnz	r0, 800c11e <_svfiprintf_r+0xea>
 800c0e6:	06d0      	lsls	r0, r2, #27
 800c0e8:	bf44      	itt	mi
 800c0ea:	2320      	movmi	r3, #32
 800c0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0f0:	0711      	lsls	r1, r2, #28
 800c0f2:	bf44      	itt	mi
 800c0f4:	232b      	movmi	r3, #43	@ 0x2b
 800c0f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c0fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800c100:	d015      	beq.n	800c12e <_svfiprintf_r+0xfa>
 800c102:	9a07      	ldr	r2, [sp, #28]
 800c104:	4654      	mov	r4, sl
 800c106:	2000      	movs	r0, #0
 800c108:	f04f 0c0a 	mov.w	ip, #10
 800c10c:	4621      	mov	r1, r4
 800c10e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c112:	3b30      	subs	r3, #48	@ 0x30
 800c114:	2b09      	cmp	r3, #9
 800c116:	d94b      	bls.n	800c1b0 <_svfiprintf_r+0x17c>
 800c118:	b1b0      	cbz	r0, 800c148 <_svfiprintf_r+0x114>
 800c11a:	9207      	str	r2, [sp, #28]
 800c11c:	e014      	b.n	800c148 <_svfiprintf_r+0x114>
 800c11e:	eba0 0308 	sub.w	r3, r0, r8
 800c122:	46a2      	mov	sl, r4
 800c124:	fa09 f303 	lsl.w	r3, r9, r3
 800c128:	4313      	orrs	r3, r2
 800c12a:	9304      	str	r3, [sp, #16]
 800c12c:	e7d2      	b.n	800c0d4 <_svfiprintf_r+0xa0>
 800c12e:	9b03      	ldr	r3, [sp, #12]
 800c130:	1d19      	adds	r1, r3, #4
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	9103      	str	r1, [sp, #12]
 800c138:	bfbb      	ittet	lt
 800c13a:	425b      	neglt	r3, r3
 800c13c:	f042 0202 	orrlt.w	r2, r2, #2
 800c140:	9307      	strge	r3, [sp, #28]
 800c142:	9307      	strlt	r3, [sp, #28]
 800c144:	bfb8      	it	lt
 800c146:	9204      	strlt	r2, [sp, #16]
 800c148:	7823      	ldrb	r3, [r4, #0]
 800c14a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c14c:	d10a      	bne.n	800c164 <_svfiprintf_r+0x130>
 800c14e:	7863      	ldrb	r3, [r4, #1]
 800c150:	2b2a      	cmp	r3, #42	@ 0x2a
 800c152:	d132      	bne.n	800c1ba <_svfiprintf_r+0x186>
 800c154:	9b03      	ldr	r3, [sp, #12]
 800c156:	3402      	adds	r4, #2
 800c158:	1d1a      	adds	r2, r3, #4
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c160:	9203      	str	r2, [sp, #12]
 800c162:	9305      	str	r3, [sp, #20]
 800c164:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c228 <_svfiprintf_r+0x1f4>
 800c168:	2203      	movs	r2, #3
 800c16a:	7821      	ldrb	r1, [r4, #0]
 800c16c:	4650      	mov	r0, sl
 800c16e:	f7fd fc54 	bl	8009a1a <memchr>
 800c172:	b138      	cbz	r0, 800c184 <_svfiprintf_r+0x150>
 800c174:	eba0 000a 	sub.w	r0, r0, sl
 800c178:	2240      	movs	r2, #64	@ 0x40
 800c17a:	9b04      	ldr	r3, [sp, #16]
 800c17c:	3401      	adds	r4, #1
 800c17e:	4082      	lsls	r2, r0
 800c180:	4313      	orrs	r3, r2
 800c182:	9304      	str	r3, [sp, #16]
 800c184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c188:	2206      	movs	r2, #6
 800c18a:	4824      	ldr	r0, [pc, #144]	@ (800c21c <_svfiprintf_r+0x1e8>)
 800c18c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c190:	f7fd fc43 	bl	8009a1a <memchr>
 800c194:	2800      	cmp	r0, #0
 800c196:	d036      	beq.n	800c206 <_svfiprintf_r+0x1d2>
 800c198:	4b21      	ldr	r3, [pc, #132]	@ (800c220 <_svfiprintf_r+0x1ec>)
 800c19a:	bb1b      	cbnz	r3, 800c1e4 <_svfiprintf_r+0x1b0>
 800c19c:	9b03      	ldr	r3, [sp, #12]
 800c19e:	3307      	adds	r3, #7
 800c1a0:	f023 0307 	bic.w	r3, r3, #7
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	9303      	str	r3, [sp, #12]
 800c1a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1aa:	4433      	add	r3, r6
 800c1ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1ae:	e76a      	b.n	800c086 <_svfiprintf_r+0x52>
 800c1b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1b4:	460c      	mov	r4, r1
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	e7a8      	b.n	800c10c <_svfiprintf_r+0xd8>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	3401      	adds	r4, #1
 800c1be:	f04f 0c0a 	mov.w	ip, #10
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	9305      	str	r3, [sp, #20]
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1cc:	3a30      	subs	r2, #48	@ 0x30
 800c1ce:	2a09      	cmp	r2, #9
 800c1d0:	d903      	bls.n	800c1da <_svfiprintf_r+0x1a6>
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d0c6      	beq.n	800c164 <_svfiprintf_r+0x130>
 800c1d6:	9105      	str	r1, [sp, #20]
 800c1d8:	e7c4      	b.n	800c164 <_svfiprintf_r+0x130>
 800c1da:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1de:	4604      	mov	r4, r0
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e7f0      	b.n	800c1c6 <_svfiprintf_r+0x192>
 800c1e4:	ab03      	add	r3, sp, #12
 800c1e6:	462a      	mov	r2, r5
 800c1e8:	a904      	add	r1, sp, #16
 800c1ea:	4638      	mov	r0, r7
 800c1ec:	9300      	str	r3, [sp, #0]
 800c1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800c224 <_svfiprintf_r+0x1f0>)
 800c1f0:	f7fc fc06 	bl	8008a00 <_printf_float>
 800c1f4:	1c42      	adds	r2, r0, #1
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	d1d6      	bne.n	800c1a8 <_svfiprintf_r+0x174>
 800c1fa:	89ab      	ldrh	r3, [r5, #12]
 800c1fc:	065b      	lsls	r3, r3, #25
 800c1fe:	f53f af2d 	bmi.w	800c05c <_svfiprintf_r+0x28>
 800c202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c204:	e72c      	b.n	800c060 <_svfiprintf_r+0x2c>
 800c206:	ab03      	add	r3, sp, #12
 800c208:	462a      	mov	r2, r5
 800c20a:	a904      	add	r1, sp, #16
 800c20c:	4638      	mov	r0, r7
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	4b04      	ldr	r3, [pc, #16]	@ (800c224 <_svfiprintf_r+0x1f0>)
 800c212:	f7fc fe91 	bl	8008f38 <_printf_i>
 800c216:	e7ed      	b.n	800c1f4 <_svfiprintf_r+0x1c0>
 800c218:	0800db8b 	.word	0x0800db8b
 800c21c:	0800db95 	.word	0x0800db95
 800c220:	08008a01 	.word	0x08008a01
 800c224:	0800bf7d 	.word	0x0800bf7d
 800c228:	0800db91 	.word	0x0800db91

0800c22c <_sungetc_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	1c4b      	adds	r3, r1, #1
 800c230:	4614      	mov	r4, r2
 800c232:	d103      	bne.n	800c23c <_sungetc_r+0x10>
 800c234:	f04f 35ff 	mov.w	r5, #4294967295
 800c238:	4628      	mov	r0, r5
 800c23a:	bd38      	pop	{r3, r4, r5, pc}
 800c23c:	8993      	ldrh	r3, [r2, #12]
 800c23e:	b2cd      	uxtb	r5, r1
 800c240:	f023 0320 	bic.w	r3, r3, #32
 800c244:	8193      	strh	r3, [r2, #12]
 800c246:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c248:	6852      	ldr	r2, [r2, #4]
 800c24a:	b18b      	cbz	r3, 800c270 <_sungetc_r+0x44>
 800c24c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c24e:	4293      	cmp	r3, r2
 800c250:	dd08      	ble.n	800c264 <_sungetc_r+0x38>
 800c252:	6823      	ldr	r3, [r4, #0]
 800c254:	1e5a      	subs	r2, r3, #1
 800c256:	6022      	str	r2, [r4, #0]
 800c258:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c25c:	6863      	ldr	r3, [r4, #4]
 800c25e:	3301      	adds	r3, #1
 800c260:	6063      	str	r3, [r4, #4]
 800c262:	e7e9      	b.n	800c238 <_sungetc_r+0xc>
 800c264:	4621      	mov	r1, r4
 800c266:	f000 fbe2 	bl	800ca2e <__submore>
 800c26a:	2800      	cmp	r0, #0
 800c26c:	d0f1      	beq.n	800c252 <_sungetc_r+0x26>
 800c26e:	e7e1      	b.n	800c234 <_sungetc_r+0x8>
 800c270:	6921      	ldr	r1, [r4, #16]
 800c272:	6823      	ldr	r3, [r4, #0]
 800c274:	b151      	cbz	r1, 800c28c <_sungetc_r+0x60>
 800c276:	4299      	cmp	r1, r3
 800c278:	d208      	bcs.n	800c28c <_sungetc_r+0x60>
 800c27a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c27e:	42a9      	cmp	r1, r5
 800c280:	d104      	bne.n	800c28c <_sungetc_r+0x60>
 800c282:	3b01      	subs	r3, #1
 800c284:	3201      	adds	r2, #1
 800c286:	6023      	str	r3, [r4, #0]
 800c288:	6062      	str	r2, [r4, #4]
 800c28a:	e7d5      	b.n	800c238 <_sungetc_r+0xc>
 800c28c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800c290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c294:	6363      	str	r3, [r4, #52]	@ 0x34
 800c296:	2303      	movs	r3, #3
 800c298:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c29a:	4623      	mov	r3, r4
 800c29c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e7dc      	b.n	800c260 <_sungetc_r+0x34>

0800c2a6 <__ssrefill_r>:
 800c2a6:	b510      	push	{r4, lr}
 800c2a8:	460c      	mov	r4, r1
 800c2aa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c2ac:	b169      	cbz	r1, 800c2ca <__ssrefill_r+0x24>
 800c2ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2b2:	4299      	cmp	r1, r3
 800c2b4:	d001      	beq.n	800c2ba <__ssrefill_r+0x14>
 800c2b6:	f7fe fa25 	bl	800a704 <_free_r>
 800c2ba:	2000      	movs	r0, #0
 800c2bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c2be:	6360      	str	r0, [r4, #52]	@ 0x34
 800c2c0:	6063      	str	r3, [r4, #4]
 800c2c2:	b113      	cbz	r3, 800c2ca <__ssrefill_r+0x24>
 800c2c4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c2c6:	6023      	str	r3, [r4, #0]
 800c2c8:	bd10      	pop	{r4, pc}
 800c2ca:	6923      	ldr	r3, [r4, #16]
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d0:	6023      	str	r3, [r4, #0]
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	6063      	str	r3, [r4, #4]
 800c2d6:	89a3      	ldrh	r3, [r4, #12]
 800c2d8:	f043 0320 	orr.w	r3, r3, #32
 800c2dc:	81a3      	strh	r3, [r4, #12]
 800c2de:	e7f3      	b.n	800c2c8 <__ssrefill_r+0x22>

0800c2e0 <__ssvfiscanf_r>:
 800c2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e4:	460c      	mov	r4, r1
 800c2e6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	4606      	mov	r6, r0
 800c2ee:	f10d 0804 	add.w	r8, sp, #4
 800c2f2:	4fa6      	ldr	r7, [pc, #664]	@ (800c58c <__ssvfiscanf_r+0x2ac>)
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c2fa:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c2fe:	49a4      	ldr	r1, [pc, #656]	@ (800c590 <__ssvfiscanf_r+0x2b0>)
 800c300:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c302:	49a4      	ldr	r1, [pc, #656]	@ (800c594 <__ssvfiscanf_r+0x2b4>)
 800c304:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c306:	f892 9000 	ldrb.w	r9, [r2]
 800c30a:	f1b9 0f00 	cmp.w	r9, #0
 800c30e:	f000 8158 	beq.w	800c5c2 <__ssvfiscanf_r+0x2e2>
 800c312:	f817 3009 	ldrb.w	r3, [r7, r9]
 800c316:	1c55      	adds	r5, r2, #1
 800c318:	f013 0308 	ands.w	r3, r3, #8
 800c31c:	d019      	beq.n	800c352 <__ssvfiscanf_r+0x72>
 800c31e:	6863      	ldr	r3, [r4, #4]
 800c320:	2b00      	cmp	r3, #0
 800c322:	dd0f      	ble.n	800c344 <__ssvfiscanf_r+0x64>
 800c324:	6823      	ldr	r3, [r4, #0]
 800c326:	781a      	ldrb	r2, [r3, #0]
 800c328:	5cba      	ldrb	r2, [r7, r2]
 800c32a:	0712      	lsls	r2, r2, #28
 800c32c:	d401      	bmi.n	800c332 <__ssvfiscanf_r+0x52>
 800c32e:	462a      	mov	r2, r5
 800c330:	e7e9      	b.n	800c306 <__ssvfiscanf_r+0x26>
 800c332:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c334:	3301      	adds	r3, #1
 800c336:	3201      	adds	r2, #1
 800c338:	6023      	str	r3, [r4, #0]
 800c33a:	9245      	str	r2, [sp, #276]	@ 0x114
 800c33c:	6862      	ldr	r2, [r4, #4]
 800c33e:	3a01      	subs	r2, #1
 800c340:	6062      	str	r2, [r4, #4]
 800c342:	e7ec      	b.n	800c31e <__ssvfiscanf_r+0x3e>
 800c344:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c346:	4621      	mov	r1, r4
 800c348:	4630      	mov	r0, r6
 800c34a:	4798      	blx	r3
 800c34c:	2800      	cmp	r0, #0
 800c34e:	d0e9      	beq.n	800c324 <__ssvfiscanf_r+0x44>
 800c350:	e7ed      	b.n	800c32e <__ssvfiscanf_r+0x4e>
 800c352:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800c356:	f040 8086 	bne.w	800c466 <__ssvfiscanf_r+0x186>
 800c35a:	9341      	str	r3, [sp, #260]	@ 0x104
 800c35c:	9343      	str	r3, [sp, #268]	@ 0x10c
 800c35e:	7853      	ldrb	r3, [r2, #1]
 800c360:	2b2a      	cmp	r3, #42	@ 0x2a
 800c362:	bf04      	itt	eq
 800c364:	2310      	moveq	r3, #16
 800c366:	1c95      	addeq	r5, r2, #2
 800c368:	f04f 020a 	mov.w	r2, #10
 800c36c:	bf08      	it	eq
 800c36e:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c370:	46aa      	mov	sl, r5
 800c372:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c376:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c37a:	2b09      	cmp	r3, #9
 800c37c:	d91e      	bls.n	800c3bc <__ssvfiscanf_r+0xdc>
 800c37e:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800c598 <__ssvfiscanf_r+0x2b8>
 800c382:	2203      	movs	r2, #3
 800c384:	4658      	mov	r0, fp
 800c386:	f7fd fb48 	bl	8009a1a <memchr>
 800c38a:	b138      	cbz	r0, 800c39c <__ssvfiscanf_r+0xbc>
 800c38c:	eba0 000b 	sub.w	r0, r0, fp
 800c390:	2301      	movs	r3, #1
 800c392:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c394:	4655      	mov	r5, sl
 800c396:	4083      	lsls	r3, r0
 800c398:	4313      	orrs	r3, r2
 800c39a:	9341      	str	r3, [sp, #260]	@ 0x104
 800c39c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c3a0:	2b78      	cmp	r3, #120	@ 0x78
 800c3a2:	d806      	bhi.n	800c3b2 <__ssvfiscanf_r+0xd2>
 800c3a4:	2b57      	cmp	r3, #87	@ 0x57
 800c3a6:	d810      	bhi.n	800c3ca <__ssvfiscanf_r+0xea>
 800c3a8:	2b25      	cmp	r3, #37	@ 0x25
 800c3aa:	d05c      	beq.n	800c466 <__ssvfiscanf_r+0x186>
 800c3ac:	d856      	bhi.n	800c45c <__ssvfiscanf_r+0x17c>
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d074      	beq.n	800c49c <__ssvfiscanf_r+0x1bc>
 800c3b2:	2303      	movs	r3, #3
 800c3b4:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c3b6:	230a      	movs	r3, #10
 800c3b8:	9342      	str	r3, [sp, #264]	@ 0x108
 800c3ba:	e087      	b.n	800c4cc <__ssvfiscanf_r+0x1ec>
 800c3bc:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c3be:	4655      	mov	r5, sl
 800c3c0:	fb02 1103 	mla	r1, r2, r3, r1
 800c3c4:	3930      	subs	r1, #48	@ 0x30
 800c3c6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c3c8:	e7d2      	b.n	800c370 <__ssvfiscanf_r+0x90>
 800c3ca:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c3ce:	2a20      	cmp	r2, #32
 800c3d0:	d8ef      	bhi.n	800c3b2 <__ssvfiscanf_r+0xd2>
 800c3d2:	a101      	add	r1, pc, #4	@ (adr r1, 800c3d8 <__ssvfiscanf_r+0xf8>)
 800c3d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c3d8:	0800c4ab 	.word	0x0800c4ab
 800c3dc:	0800c3b3 	.word	0x0800c3b3
 800c3e0:	0800c3b3 	.word	0x0800c3b3
 800c3e4:	0800c505 	.word	0x0800c505
 800c3e8:	0800c3b3 	.word	0x0800c3b3
 800c3ec:	0800c3b3 	.word	0x0800c3b3
 800c3f0:	0800c3b3 	.word	0x0800c3b3
 800c3f4:	0800c3b3 	.word	0x0800c3b3
 800c3f8:	0800c3b3 	.word	0x0800c3b3
 800c3fc:	0800c3b3 	.word	0x0800c3b3
 800c400:	0800c3b3 	.word	0x0800c3b3
 800c404:	0800c51b 	.word	0x0800c51b
 800c408:	0800c501 	.word	0x0800c501
 800c40c:	0800c463 	.word	0x0800c463
 800c410:	0800c463 	.word	0x0800c463
 800c414:	0800c463 	.word	0x0800c463
 800c418:	0800c3b3 	.word	0x0800c3b3
 800c41c:	0800c4bd 	.word	0x0800c4bd
 800c420:	0800c3b3 	.word	0x0800c3b3
 800c424:	0800c3b3 	.word	0x0800c3b3
 800c428:	0800c3b3 	.word	0x0800c3b3
 800c42c:	0800c3b3 	.word	0x0800c3b3
 800c430:	0800c52b 	.word	0x0800c52b
 800c434:	0800c4c5 	.word	0x0800c4c5
 800c438:	0800c4a3 	.word	0x0800c4a3
 800c43c:	0800c3b3 	.word	0x0800c3b3
 800c440:	0800c3b3 	.word	0x0800c3b3
 800c444:	0800c527 	.word	0x0800c527
 800c448:	0800c3b3 	.word	0x0800c3b3
 800c44c:	0800c501 	.word	0x0800c501
 800c450:	0800c3b3 	.word	0x0800c3b3
 800c454:	0800c3b3 	.word	0x0800c3b3
 800c458:	0800c4ab 	.word	0x0800c4ab
 800c45c:	3b45      	subs	r3, #69	@ 0x45
 800c45e:	2b02      	cmp	r3, #2
 800c460:	d8a7      	bhi.n	800c3b2 <__ssvfiscanf_r+0xd2>
 800c462:	2305      	movs	r3, #5
 800c464:	e031      	b.n	800c4ca <__ssvfiscanf_r+0x1ea>
 800c466:	6863      	ldr	r3, [r4, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	dd0d      	ble.n	800c488 <__ssvfiscanf_r+0x1a8>
 800c46c:	6823      	ldr	r3, [r4, #0]
 800c46e:	781a      	ldrb	r2, [r3, #0]
 800c470:	454a      	cmp	r2, r9
 800c472:	f040 80a6 	bne.w	800c5c2 <__ssvfiscanf_r+0x2e2>
 800c476:	3301      	adds	r3, #1
 800c478:	6862      	ldr	r2, [r4, #4]
 800c47a:	6023      	str	r3, [r4, #0]
 800c47c:	3a01      	subs	r2, #1
 800c47e:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c480:	6062      	str	r2, [r4, #4]
 800c482:	3301      	adds	r3, #1
 800c484:	9345      	str	r3, [sp, #276]	@ 0x114
 800c486:	e752      	b.n	800c32e <__ssvfiscanf_r+0x4e>
 800c488:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c48a:	4621      	mov	r1, r4
 800c48c:	4630      	mov	r0, r6
 800c48e:	4798      	blx	r3
 800c490:	2800      	cmp	r0, #0
 800c492:	d0eb      	beq.n	800c46c <__ssvfiscanf_r+0x18c>
 800c494:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c496:	2800      	cmp	r0, #0
 800c498:	f040 808b 	bne.w	800c5b2 <__ssvfiscanf_r+0x2d2>
 800c49c:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a0:	e08b      	b.n	800c5ba <__ssvfiscanf_r+0x2da>
 800c4a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c4a4:	f042 0220 	orr.w	r2, r2, #32
 800c4a8:	9241      	str	r2, [sp, #260]	@ 0x104
 800c4aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c4ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c4b0:	9241      	str	r2, [sp, #260]	@ 0x104
 800c4b2:	2210      	movs	r2, #16
 800c4b4:	2b6e      	cmp	r3, #110	@ 0x6e
 800c4b6:	9242      	str	r2, [sp, #264]	@ 0x108
 800c4b8:	d902      	bls.n	800c4c0 <__ssvfiscanf_r+0x1e0>
 800c4ba:	e005      	b.n	800c4c8 <__ssvfiscanf_r+0x1e8>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	9342      	str	r3, [sp, #264]	@ 0x108
 800c4c0:	2303      	movs	r3, #3
 800c4c2:	e002      	b.n	800c4ca <__ssvfiscanf_r+0x1ea>
 800c4c4:	2308      	movs	r3, #8
 800c4c6:	9342      	str	r3, [sp, #264]	@ 0x108
 800c4c8:	2304      	movs	r3, #4
 800c4ca:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c4cc:	6863      	ldr	r3, [r4, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	dd3a      	ble.n	800c548 <__ssvfiscanf_r+0x268>
 800c4d2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c4d4:	0659      	lsls	r1, r3, #25
 800c4d6:	d404      	bmi.n	800c4e2 <__ssvfiscanf_r+0x202>
 800c4d8:	6823      	ldr	r3, [r4, #0]
 800c4da:	781a      	ldrb	r2, [r3, #0]
 800c4dc:	5cba      	ldrb	r2, [r7, r2]
 800c4de:	0712      	lsls	r2, r2, #28
 800c4e0:	d439      	bmi.n	800c556 <__ssvfiscanf_r+0x276>
 800c4e2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	dc48      	bgt.n	800c57a <__ssvfiscanf_r+0x29a>
 800c4e8:	466b      	mov	r3, sp
 800c4ea:	4622      	mov	r2, r4
 800c4ec:	a941      	add	r1, sp, #260	@ 0x104
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	f000 f86c 	bl	800c5cc <_scanf_chars>
 800c4f4:	2801      	cmp	r0, #1
 800c4f6:	d064      	beq.n	800c5c2 <__ssvfiscanf_r+0x2e2>
 800c4f8:	2802      	cmp	r0, #2
 800c4fa:	f47f af18 	bne.w	800c32e <__ssvfiscanf_r+0x4e>
 800c4fe:	e7c9      	b.n	800c494 <__ssvfiscanf_r+0x1b4>
 800c500:	220a      	movs	r2, #10
 800c502:	e7d7      	b.n	800c4b4 <__ssvfiscanf_r+0x1d4>
 800c504:	4629      	mov	r1, r5
 800c506:	4640      	mov	r0, r8
 800c508:	f000 fa58 	bl	800c9bc <__sccl>
 800c50c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c50e:	4605      	mov	r5, r0
 800c510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c514:	9341      	str	r3, [sp, #260]	@ 0x104
 800c516:	2301      	movs	r3, #1
 800c518:	e7d7      	b.n	800c4ca <__ssvfiscanf_r+0x1ea>
 800c51a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c51c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c520:	9341      	str	r3, [sp, #260]	@ 0x104
 800c522:	2300      	movs	r3, #0
 800c524:	e7d1      	b.n	800c4ca <__ssvfiscanf_r+0x1ea>
 800c526:	2302      	movs	r3, #2
 800c528:	e7cf      	b.n	800c4ca <__ssvfiscanf_r+0x1ea>
 800c52a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c52c:	06c3      	lsls	r3, r0, #27
 800c52e:	f53f aefe 	bmi.w	800c32e <__ssvfiscanf_r+0x4e>
 800c532:	9b00      	ldr	r3, [sp, #0]
 800c534:	07c0      	lsls	r0, r0, #31
 800c536:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c538:	f103 0104 	add.w	r1, r3, #4
 800c53c:	9100      	str	r1, [sp, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	bf4c      	ite	mi
 800c542:	801a      	strhmi	r2, [r3, #0]
 800c544:	601a      	strpl	r2, [r3, #0]
 800c546:	e6f2      	b.n	800c32e <__ssvfiscanf_r+0x4e>
 800c548:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c54a:	4621      	mov	r1, r4
 800c54c:	4630      	mov	r0, r6
 800c54e:	4798      	blx	r3
 800c550:	2800      	cmp	r0, #0
 800c552:	d0be      	beq.n	800c4d2 <__ssvfiscanf_r+0x1f2>
 800c554:	e79e      	b.n	800c494 <__ssvfiscanf_r+0x1b4>
 800c556:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c558:	3201      	adds	r2, #1
 800c55a:	9245      	str	r2, [sp, #276]	@ 0x114
 800c55c:	6862      	ldr	r2, [r4, #4]
 800c55e:	3a01      	subs	r2, #1
 800c560:	2a00      	cmp	r2, #0
 800c562:	6062      	str	r2, [r4, #4]
 800c564:	dd02      	ble.n	800c56c <__ssvfiscanf_r+0x28c>
 800c566:	3301      	adds	r3, #1
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	e7b5      	b.n	800c4d8 <__ssvfiscanf_r+0x1f8>
 800c56c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c56e:	4621      	mov	r1, r4
 800c570:	4630      	mov	r0, r6
 800c572:	4798      	blx	r3
 800c574:	2800      	cmp	r0, #0
 800c576:	d0af      	beq.n	800c4d8 <__ssvfiscanf_r+0x1f8>
 800c578:	e78c      	b.n	800c494 <__ssvfiscanf_r+0x1b4>
 800c57a:	2b04      	cmp	r3, #4
 800c57c:	dc0e      	bgt.n	800c59c <__ssvfiscanf_r+0x2bc>
 800c57e:	466b      	mov	r3, sp
 800c580:	4622      	mov	r2, r4
 800c582:	a941      	add	r1, sp, #260	@ 0x104
 800c584:	4630      	mov	r0, r6
 800c586:	f000 f87b 	bl	800c680 <_scanf_i>
 800c58a:	e7b3      	b.n	800c4f4 <__ssvfiscanf_r+0x214>
 800c58c:	0800dda9 	.word	0x0800dda9
 800c590:	0800c22d 	.word	0x0800c22d
 800c594:	0800c2a7 	.word	0x0800c2a7
 800c598:	0800db91 	.word	0x0800db91
 800c59c:	4b0a      	ldr	r3, [pc, #40]	@ (800c5c8 <__ssvfiscanf_r+0x2e8>)
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f43f aec5 	beq.w	800c32e <__ssvfiscanf_r+0x4e>
 800c5a4:	466b      	mov	r3, sp
 800c5a6:	4622      	mov	r2, r4
 800c5a8:	a941      	add	r1, sp, #260	@ 0x104
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	f7fc fde2 	bl	8009174 <_scanf_float>
 800c5b0:	e7a0      	b.n	800c4f4 <__ssvfiscanf_r+0x214>
 800c5b2:	89a3      	ldrh	r3, [r4, #12]
 800c5b4:	065b      	lsls	r3, r3, #25
 800c5b6:	f53f af71 	bmi.w	800c49c <__ssvfiscanf_r+0x1bc>
 800c5ba:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800c5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c5c4:	e7f9      	b.n	800c5ba <__ssvfiscanf_r+0x2da>
 800c5c6:	bf00      	nop
 800c5c8:	08009175 	.word	0x08009175

0800c5cc <_scanf_chars>:
 800c5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d0:	4615      	mov	r5, r2
 800c5d2:	688a      	ldr	r2, [r1, #8]
 800c5d4:	4680      	mov	r8, r0
 800c5d6:	460c      	mov	r4, r1
 800c5d8:	b932      	cbnz	r2, 800c5e8 <_scanf_chars+0x1c>
 800c5da:	698a      	ldr	r2, [r1, #24]
 800c5dc:	2a00      	cmp	r2, #0
 800c5de:	bf14      	ite	ne
 800c5e0:	f04f 32ff 	movne.w	r2, #4294967295
 800c5e4:	2201      	moveq	r2, #1
 800c5e6:	608a      	str	r2, [r1, #8]
 800c5e8:	6822      	ldr	r2, [r4, #0]
 800c5ea:	2700      	movs	r7, #0
 800c5ec:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800c67c <_scanf_chars+0xb0>
 800c5f0:	06d1      	lsls	r1, r2, #27
 800c5f2:	bf5f      	itttt	pl
 800c5f4:	681a      	ldrpl	r2, [r3, #0]
 800c5f6:	1d11      	addpl	r1, r2, #4
 800c5f8:	6019      	strpl	r1, [r3, #0]
 800c5fa:	6816      	ldrpl	r6, [r2, #0]
 800c5fc:	69a0      	ldr	r0, [r4, #24]
 800c5fe:	b188      	cbz	r0, 800c624 <_scanf_chars+0x58>
 800c600:	2801      	cmp	r0, #1
 800c602:	d107      	bne.n	800c614 <_scanf_chars+0x48>
 800c604:	682b      	ldr	r3, [r5, #0]
 800c606:	781a      	ldrb	r2, [r3, #0]
 800c608:	6963      	ldr	r3, [r4, #20]
 800c60a:	5c9b      	ldrb	r3, [r3, r2]
 800c60c:	b953      	cbnz	r3, 800c624 <_scanf_chars+0x58>
 800c60e:	2f00      	cmp	r7, #0
 800c610:	d031      	beq.n	800c676 <_scanf_chars+0xaa>
 800c612:	e022      	b.n	800c65a <_scanf_chars+0x8e>
 800c614:	2802      	cmp	r0, #2
 800c616:	d120      	bne.n	800c65a <_scanf_chars+0x8e>
 800c618:	682b      	ldr	r3, [r5, #0]
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c620:	071b      	lsls	r3, r3, #28
 800c622:	d41a      	bmi.n	800c65a <_scanf_chars+0x8e>
 800c624:	6823      	ldr	r3, [r4, #0]
 800c626:	3701      	adds	r7, #1
 800c628:	06da      	lsls	r2, r3, #27
 800c62a:	bf5e      	ittt	pl
 800c62c:	682b      	ldrpl	r3, [r5, #0]
 800c62e:	781b      	ldrbpl	r3, [r3, #0]
 800c630:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c634:	682a      	ldr	r2, [r5, #0]
 800c636:	686b      	ldr	r3, [r5, #4]
 800c638:	3201      	adds	r2, #1
 800c63a:	3b01      	subs	r3, #1
 800c63c:	602a      	str	r2, [r5, #0]
 800c63e:	68a2      	ldr	r2, [r4, #8]
 800c640:	606b      	str	r3, [r5, #4]
 800c642:	3a01      	subs	r2, #1
 800c644:	60a2      	str	r2, [r4, #8]
 800c646:	b142      	cbz	r2, 800c65a <_scanf_chars+0x8e>
 800c648:	2b00      	cmp	r3, #0
 800c64a:	dcd7      	bgt.n	800c5fc <_scanf_chars+0x30>
 800c64c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c650:	4629      	mov	r1, r5
 800c652:	4640      	mov	r0, r8
 800c654:	4798      	blx	r3
 800c656:	2800      	cmp	r0, #0
 800c658:	d0d0      	beq.n	800c5fc <_scanf_chars+0x30>
 800c65a:	6823      	ldr	r3, [r4, #0]
 800c65c:	f013 0310 	ands.w	r3, r3, #16
 800c660:	d105      	bne.n	800c66e <_scanf_chars+0xa2>
 800c662:	68e2      	ldr	r2, [r4, #12]
 800c664:	3201      	adds	r2, #1
 800c666:	60e2      	str	r2, [r4, #12]
 800c668:	69a2      	ldr	r2, [r4, #24]
 800c66a:	b102      	cbz	r2, 800c66e <_scanf_chars+0xa2>
 800c66c:	7033      	strb	r3, [r6, #0]
 800c66e:	6923      	ldr	r3, [r4, #16]
 800c670:	2000      	movs	r0, #0
 800c672:	443b      	add	r3, r7
 800c674:	6123      	str	r3, [r4, #16]
 800c676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c67a:	bf00      	nop
 800c67c:	0800dda9 	.word	0x0800dda9

0800c680 <_scanf_i>:
 800c680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c684:	4698      	mov	r8, r3
 800c686:	b087      	sub	sp, #28
 800c688:	4b72      	ldr	r3, [pc, #456]	@ (800c854 <_scanf_i+0x1d4>)
 800c68a:	460c      	mov	r4, r1
 800c68c:	4682      	mov	sl, r0
 800c68e:	4616      	mov	r6, r2
 800c690:	4627      	mov	r7, r4
 800c692:	f04f 0b00 	mov.w	fp, #0
 800c696:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c69a:	ab03      	add	r3, sp, #12
 800c69c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c6a0:	4b6d      	ldr	r3, [pc, #436]	@ (800c858 <_scanf_i+0x1d8>)
 800c6a2:	69a1      	ldr	r1, [r4, #24]
 800c6a4:	4a6d      	ldr	r2, [pc, #436]	@ (800c85c <_scanf_i+0x1dc>)
 800c6a6:	2903      	cmp	r1, #3
 800c6a8:	bf08      	it	eq
 800c6aa:	461a      	moveq	r2, r3
 800c6ac:	68a3      	ldr	r3, [r4, #8]
 800c6ae:	9201      	str	r2, [sp, #4]
 800c6b0:	1e5a      	subs	r2, r3, #1
 800c6b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c6b6:	bf89      	itett	hi
 800c6b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c6bc:	f04f 0900 	movls.w	r9, #0
 800c6c0:	eb03 0905 	addhi.w	r9, r3, r5
 800c6c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c6c8:	bf88      	it	hi
 800c6ca:	60a3      	strhi	r3, [r4, #8]
 800c6cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c6d0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c6d4:	463d      	mov	r5, r7
 800c6d6:	6023      	str	r3, [r4, #0]
 800c6d8:	6831      	ldr	r1, [r6, #0]
 800c6da:	ab03      	add	r3, sp, #12
 800c6dc:	2202      	movs	r2, #2
 800c6de:	7809      	ldrb	r1, [r1, #0]
 800c6e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c6e4:	f7fd f999 	bl	8009a1a <memchr>
 800c6e8:	b328      	cbz	r0, 800c736 <_scanf_i+0xb6>
 800c6ea:	f1bb 0f01 	cmp.w	fp, #1
 800c6ee:	d159      	bne.n	800c7a4 <_scanf_i+0x124>
 800c6f0:	6862      	ldr	r2, [r4, #4]
 800c6f2:	b92a      	cbnz	r2, 800c700 <_scanf_i+0x80>
 800c6f4:	6822      	ldr	r2, [r4, #0]
 800c6f6:	2108      	movs	r1, #8
 800c6f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c6fc:	6061      	str	r1, [r4, #4]
 800c6fe:	6022      	str	r2, [r4, #0]
 800c700:	6822      	ldr	r2, [r4, #0]
 800c702:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c706:	6022      	str	r2, [r4, #0]
 800c708:	68a2      	ldr	r2, [r4, #8]
 800c70a:	1e51      	subs	r1, r2, #1
 800c70c:	60a1      	str	r1, [r4, #8]
 800c70e:	b192      	cbz	r2, 800c736 <_scanf_i+0xb6>
 800c710:	6832      	ldr	r2, [r6, #0]
 800c712:	1c51      	adds	r1, r2, #1
 800c714:	6031      	str	r1, [r6, #0]
 800c716:	7812      	ldrb	r2, [r2, #0]
 800c718:	f805 2b01 	strb.w	r2, [r5], #1
 800c71c:	6872      	ldr	r2, [r6, #4]
 800c71e:	3a01      	subs	r2, #1
 800c720:	2a00      	cmp	r2, #0
 800c722:	6072      	str	r2, [r6, #4]
 800c724:	dc07      	bgt.n	800c736 <_scanf_i+0xb6>
 800c726:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c72a:	4631      	mov	r1, r6
 800c72c:	4650      	mov	r0, sl
 800c72e:	4790      	blx	r2
 800c730:	2800      	cmp	r0, #0
 800c732:	f040 8085 	bne.w	800c840 <_scanf_i+0x1c0>
 800c736:	f10b 0b01 	add.w	fp, fp, #1
 800c73a:	f1bb 0f03 	cmp.w	fp, #3
 800c73e:	d1cb      	bne.n	800c6d8 <_scanf_i+0x58>
 800c740:	6863      	ldr	r3, [r4, #4]
 800c742:	b90b      	cbnz	r3, 800c748 <_scanf_i+0xc8>
 800c744:	230a      	movs	r3, #10
 800c746:	6063      	str	r3, [r4, #4]
 800c748:	6863      	ldr	r3, [r4, #4]
 800c74a:	f04f 0b00 	mov.w	fp, #0
 800c74e:	4944      	ldr	r1, [pc, #272]	@ (800c860 <_scanf_i+0x1e0>)
 800c750:	6960      	ldr	r0, [r4, #20]
 800c752:	1ac9      	subs	r1, r1, r3
 800c754:	f000 f932 	bl	800c9bc <__sccl>
 800c758:	68a3      	ldr	r3, [r4, #8]
 800c75a:	6822      	ldr	r2, [r4, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d03d      	beq.n	800c7dc <_scanf_i+0x15c>
 800c760:	6831      	ldr	r1, [r6, #0]
 800c762:	6960      	ldr	r0, [r4, #20]
 800c764:	f891 c000 	ldrb.w	ip, [r1]
 800c768:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c76c:	2800      	cmp	r0, #0
 800c76e:	d035      	beq.n	800c7dc <_scanf_i+0x15c>
 800c770:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c774:	d124      	bne.n	800c7c0 <_scanf_i+0x140>
 800c776:	0510      	lsls	r0, r2, #20
 800c778:	d522      	bpl.n	800c7c0 <_scanf_i+0x140>
 800c77a:	f10b 0b01 	add.w	fp, fp, #1
 800c77e:	f1b9 0f00 	cmp.w	r9, #0
 800c782:	d003      	beq.n	800c78c <_scanf_i+0x10c>
 800c784:	3301      	adds	r3, #1
 800c786:	f109 39ff 	add.w	r9, r9, #4294967295
 800c78a:	60a3      	str	r3, [r4, #8]
 800c78c:	6873      	ldr	r3, [r6, #4]
 800c78e:	3b01      	subs	r3, #1
 800c790:	2b00      	cmp	r3, #0
 800c792:	6073      	str	r3, [r6, #4]
 800c794:	dd1b      	ble.n	800c7ce <_scanf_i+0x14e>
 800c796:	6833      	ldr	r3, [r6, #0]
 800c798:	3301      	adds	r3, #1
 800c79a:	6033      	str	r3, [r6, #0]
 800c79c:	68a3      	ldr	r3, [r4, #8]
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	60a3      	str	r3, [r4, #8]
 800c7a2:	e7d9      	b.n	800c758 <_scanf_i+0xd8>
 800c7a4:	f1bb 0f02 	cmp.w	fp, #2
 800c7a8:	d1ae      	bne.n	800c708 <_scanf_i+0x88>
 800c7aa:	6822      	ldr	r2, [r4, #0]
 800c7ac:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c7b0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c7b4:	d1c4      	bne.n	800c740 <_scanf_i+0xc0>
 800c7b6:	2110      	movs	r1, #16
 800c7b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c7bc:	6061      	str	r1, [r4, #4]
 800c7be:	e7a2      	b.n	800c706 <_scanf_i+0x86>
 800c7c0:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c7c4:	6022      	str	r2, [r4, #0]
 800c7c6:	780b      	ldrb	r3, [r1, #0]
 800c7c8:	f805 3b01 	strb.w	r3, [r5], #1
 800c7cc:	e7de      	b.n	800c78c <_scanf_i+0x10c>
 800c7ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c7d2:	4631      	mov	r1, r6
 800c7d4:	4650      	mov	r0, sl
 800c7d6:	4798      	blx	r3
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	d0df      	beq.n	800c79c <_scanf_i+0x11c>
 800c7dc:	6823      	ldr	r3, [r4, #0]
 800c7de:	05d9      	lsls	r1, r3, #23
 800c7e0:	d50d      	bpl.n	800c7fe <_scanf_i+0x17e>
 800c7e2:	42bd      	cmp	r5, r7
 800c7e4:	d909      	bls.n	800c7fa <_scanf_i+0x17a>
 800c7e6:	f105 39ff 	add.w	r9, r5, #4294967295
 800c7ea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c7ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c7f2:	4632      	mov	r2, r6
 800c7f4:	464d      	mov	r5, r9
 800c7f6:	4650      	mov	r0, sl
 800c7f8:	4798      	blx	r3
 800c7fa:	42bd      	cmp	r5, r7
 800c7fc:	d028      	beq.n	800c850 <_scanf_i+0x1d0>
 800c7fe:	6822      	ldr	r2, [r4, #0]
 800c800:	f012 0210 	ands.w	r2, r2, #16
 800c804:	d113      	bne.n	800c82e <_scanf_i+0x1ae>
 800c806:	702a      	strb	r2, [r5, #0]
 800c808:	4639      	mov	r1, r7
 800c80a:	6863      	ldr	r3, [r4, #4]
 800c80c:	4650      	mov	r0, sl
 800c80e:	9e01      	ldr	r6, [sp, #4]
 800c810:	47b0      	blx	r6
 800c812:	f8d8 3000 	ldr.w	r3, [r8]
 800c816:	6821      	ldr	r1, [r4, #0]
 800c818:	1d1a      	adds	r2, r3, #4
 800c81a:	f011 0f20 	tst.w	r1, #32
 800c81e:	f8c8 2000 	str.w	r2, [r8]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	d00f      	beq.n	800c846 <_scanf_i+0x1c6>
 800c826:	6018      	str	r0, [r3, #0]
 800c828:	68e3      	ldr	r3, [r4, #12]
 800c82a:	3301      	adds	r3, #1
 800c82c:	60e3      	str	r3, [r4, #12]
 800c82e:	1bed      	subs	r5, r5, r7
 800c830:	6923      	ldr	r3, [r4, #16]
 800c832:	2000      	movs	r0, #0
 800c834:	445d      	add	r5, fp
 800c836:	442b      	add	r3, r5
 800c838:	6123      	str	r3, [r4, #16]
 800c83a:	b007      	add	sp, #28
 800c83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c840:	f04f 0b00 	mov.w	fp, #0
 800c844:	e7ca      	b.n	800c7dc <_scanf_i+0x15c>
 800c846:	07ca      	lsls	r2, r1, #31
 800c848:	bf4c      	ite	mi
 800c84a:	8018      	strhmi	r0, [r3, #0]
 800c84c:	6018      	strpl	r0, [r3, #0]
 800c84e:	e7eb      	b.n	800c828 <_scanf_i+0x1a8>
 800c850:	2001      	movs	r0, #1
 800c852:	e7f2      	b.n	800c83a <_scanf_i+0x1ba>
 800c854:	0800d9e0 	.word	0x0800d9e0
 800c858:	0800bf79 	.word	0x0800bf79
 800c85c:	0800d34d 	.word	0x0800d34d
 800c860:	0800dbac 	.word	0x0800dbac

0800c864 <__sflush_r>:
 800c864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c86c:	0716      	lsls	r6, r2, #28
 800c86e:	4605      	mov	r5, r0
 800c870:	460c      	mov	r4, r1
 800c872:	d454      	bmi.n	800c91e <__sflush_r+0xba>
 800c874:	684b      	ldr	r3, [r1, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	dc02      	bgt.n	800c880 <__sflush_r+0x1c>
 800c87a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	dd48      	ble.n	800c912 <__sflush_r+0xae>
 800c880:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c882:	2e00      	cmp	r6, #0
 800c884:	d045      	beq.n	800c912 <__sflush_r+0xae>
 800c886:	2300      	movs	r3, #0
 800c888:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c88c:	682f      	ldr	r7, [r5, #0]
 800c88e:	6a21      	ldr	r1, [r4, #32]
 800c890:	602b      	str	r3, [r5, #0]
 800c892:	d030      	beq.n	800c8f6 <__sflush_r+0x92>
 800c894:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c896:	89a3      	ldrh	r3, [r4, #12]
 800c898:	0759      	lsls	r1, r3, #29
 800c89a:	d505      	bpl.n	800c8a8 <__sflush_r+0x44>
 800c89c:	6863      	ldr	r3, [r4, #4]
 800c89e:	1ad2      	subs	r2, r2, r3
 800c8a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c8a2:	b10b      	cbz	r3, 800c8a8 <__sflush_r+0x44>
 800c8a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c8a6:	1ad2      	subs	r2, r2, r3
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8ac:	6a21      	ldr	r1, [r4, #32]
 800c8ae:	4628      	mov	r0, r5
 800c8b0:	47b0      	blx	r6
 800c8b2:	1c43      	adds	r3, r0, #1
 800c8b4:	89a3      	ldrh	r3, [r4, #12]
 800c8b6:	d106      	bne.n	800c8c6 <__sflush_r+0x62>
 800c8b8:	6829      	ldr	r1, [r5, #0]
 800c8ba:	291d      	cmp	r1, #29
 800c8bc:	d82b      	bhi.n	800c916 <__sflush_r+0xb2>
 800c8be:	4a2a      	ldr	r2, [pc, #168]	@ (800c968 <__sflush_r+0x104>)
 800c8c0:	40ca      	lsrs	r2, r1
 800c8c2:	07d6      	lsls	r6, r2, #31
 800c8c4:	d527      	bpl.n	800c916 <__sflush_r+0xb2>
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	04d9      	lsls	r1, r3, #19
 800c8ca:	6062      	str	r2, [r4, #4]
 800c8cc:	6922      	ldr	r2, [r4, #16]
 800c8ce:	6022      	str	r2, [r4, #0]
 800c8d0:	d504      	bpl.n	800c8dc <__sflush_r+0x78>
 800c8d2:	1c42      	adds	r2, r0, #1
 800c8d4:	d101      	bne.n	800c8da <__sflush_r+0x76>
 800c8d6:	682b      	ldr	r3, [r5, #0]
 800c8d8:	b903      	cbnz	r3, 800c8dc <__sflush_r+0x78>
 800c8da:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8de:	602f      	str	r7, [r5, #0]
 800c8e0:	b1b9      	cbz	r1, 800c912 <__sflush_r+0xae>
 800c8e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8e6:	4299      	cmp	r1, r3
 800c8e8:	d002      	beq.n	800c8f0 <__sflush_r+0x8c>
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f7fd ff0a 	bl	800a704 <_free_r>
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8f4:	e00d      	b.n	800c912 <__sflush_r+0xae>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	47b0      	blx	r6
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	1c50      	adds	r0, r2, #1
 800c900:	d1c9      	bne.n	800c896 <__sflush_r+0x32>
 800c902:	682b      	ldr	r3, [r5, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d0c6      	beq.n	800c896 <__sflush_r+0x32>
 800c908:	2b1d      	cmp	r3, #29
 800c90a:	d001      	beq.n	800c910 <__sflush_r+0xac>
 800c90c:	2b16      	cmp	r3, #22
 800c90e:	d11d      	bne.n	800c94c <__sflush_r+0xe8>
 800c910:	602f      	str	r7, [r5, #0]
 800c912:	2000      	movs	r0, #0
 800c914:	e021      	b.n	800c95a <__sflush_r+0xf6>
 800c916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c91a:	b21b      	sxth	r3, r3
 800c91c:	e01a      	b.n	800c954 <__sflush_r+0xf0>
 800c91e:	690f      	ldr	r7, [r1, #16]
 800c920:	2f00      	cmp	r7, #0
 800c922:	d0f6      	beq.n	800c912 <__sflush_r+0xae>
 800c924:	0793      	lsls	r3, r2, #30
 800c926:	680e      	ldr	r6, [r1, #0]
 800c928:	600f      	str	r7, [r1, #0]
 800c92a:	bf0c      	ite	eq
 800c92c:	694b      	ldreq	r3, [r1, #20]
 800c92e:	2300      	movne	r3, #0
 800c930:	eba6 0807 	sub.w	r8, r6, r7
 800c934:	608b      	str	r3, [r1, #8]
 800c936:	f1b8 0f00 	cmp.w	r8, #0
 800c93a:	ddea      	ble.n	800c912 <__sflush_r+0xae>
 800c93c:	4643      	mov	r3, r8
 800c93e:	463a      	mov	r2, r7
 800c940:	6a21      	ldr	r1, [r4, #32]
 800c942:	4628      	mov	r0, r5
 800c944:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c946:	47b0      	blx	r6
 800c948:	2800      	cmp	r0, #0
 800c94a:	dc08      	bgt.n	800c95e <__sflush_r+0xfa>
 800c94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c954:	f04f 30ff 	mov.w	r0, #4294967295
 800c958:	81a3      	strh	r3, [r4, #12]
 800c95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c95e:	4407      	add	r7, r0
 800c960:	eba8 0800 	sub.w	r8, r8, r0
 800c964:	e7e7      	b.n	800c936 <__sflush_r+0xd2>
 800c966:	bf00      	nop
 800c968:	20400001 	.word	0x20400001

0800c96c <_fflush_r>:
 800c96c:	b538      	push	{r3, r4, r5, lr}
 800c96e:	690b      	ldr	r3, [r1, #16]
 800c970:	4605      	mov	r5, r0
 800c972:	460c      	mov	r4, r1
 800c974:	b913      	cbnz	r3, 800c97c <_fflush_r+0x10>
 800c976:	2500      	movs	r5, #0
 800c978:	4628      	mov	r0, r5
 800c97a:	bd38      	pop	{r3, r4, r5, pc}
 800c97c:	b118      	cbz	r0, 800c986 <_fflush_r+0x1a>
 800c97e:	6a03      	ldr	r3, [r0, #32]
 800c980:	b90b      	cbnz	r3, 800c986 <_fflush_r+0x1a>
 800c982:	f7fc fe91 	bl	80096a8 <__sinit>
 800c986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d0f3      	beq.n	800c976 <_fflush_r+0xa>
 800c98e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c990:	07d0      	lsls	r0, r2, #31
 800c992:	d404      	bmi.n	800c99e <_fflush_r+0x32>
 800c994:	0599      	lsls	r1, r3, #22
 800c996:	d402      	bmi.n	800c99e <_fflush_r+0x32>
 800c998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c99a:	f7fd f83c 	bl	8009a16 <__retarget_lock_acquire_recursive>
 800c99e:	4628      	mov	r0, r5
 800c9a0:	4621      	mov	r1, r4
 800c9a2:	f7ff ff5f 	bl	800c864 <__sflush_r>
 800c9a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9a8:	4605      	mov	r5, r0
 800c9aa:	07da      	lsls	r2, r3, #31
 800c9ac:	d4e4      	bmi.n	800c978 <_fflush_r+0xc>
 800c9ae:	89a3      	ldrh	r3, [r4, #12]
 800c9b0:	059b      	lsls	r3, r3, #22
 800c9b2:	d4e1      	bmi.n	800c978 <_fflush_r+0xc>
 800c9b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9b6:	f7fd f82f 	bl	8009a18 <__retarget_lock_release_recursive>
 800c9ba:	e7dd      	b.n	800c978 <_fflush_r+0xc>

0800c9bc <__sccl>:
 800c9bc:	b570      	push	{r4, r5, r6, lr}
 800c9be:	780b      	ldrb	r3, [r1, #0]
 800c9c0:	4604      	mov	r4, r0
 800c9c2:	3801      	subs	r0, #1
 800c9c4:	2b5e      	cmp	r3, #94	@ 0x5e
 800c9c6:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c9ca:	bf13      	iteet	ne
 800c9cc:	1c4a      	addne	r2, r1, #1
 800c9ce:	1c8a      	addeq	r2, r1, #2
 800c9d0:	784b      	ldrbeq	r3, [r1, #1]
 800c9d2:	2100      	movne	r1, #0
 800c9d4:	bf08      	it	eq
 800c9d6:	2101      	moveq	r1, #1
 800c9d8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c9dc:	42a8      	cmp	r0, r5
 800c9de:	d1fb      	bne.n	800c9d8 <__sccl+0x1c>
 800c9e0:	b90b      	cbnz	r3, 800c9e6 <__sccl+0x2a>
 800c9e2:	1e50      	subs	r0, r2, #1
 800c9e4:	bd70      	pop	{r4, r5, r6, pc}
 800c9e6:	f081 0101 	eor.w	r1, r1, #1
 800c9ea:	4610      	mov	r0, r2
 800c9ec:	54e1      	strb	r1, [r4, r3]
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c9f4:	2d2d      	cmp	r5, #45	@ 0x2d
 800c9f6:	d005      	beq.n	800ca04 <__sccl+0x48>
 800c9f8:	2d5d      	cmp	r5, #93	@ 0x5d
 800c9fa:	d016      	beq.n	800ca2a <__sccl+0x6e>
 800c9fc:	2d00      	cmp	r5, #0
 800c9fe:	d0f1      	beq.n	800c9e4 <__sccl+0x28>
 800ca00:	462b      	mov	r3, r5
 800ca02:	e7f2      	b.n	800c9ea <__sccl+0x2e>
 800ca04:	7846      	ldrb	r6, [r0, #1]
 800ca06:	2e5d      	cmp	r6, #93	@ 0x5d
 800ca08:	d0fa      	beq.n	800ca00 <__sccl+0x44>
 800ca0a:	42b3      	cmp	r3, r6
 800ca0c:	dcf8      	bgt.n	800ca00 <__sccl+0x44>
 800ca0e:	3002      	adds	r0, #2
 800ca10:	461a      	mov	r2, r3
 800ca12:	3201      	adds	r2, #1
 800ca14:	4296      	cmp	r6, r2
 800ca16:	54a1      	strb	r1, [r4, r2]
 800ca18:	dcfb      	bgt.n	800ca12 <__sccl+0x56>
 800ca1a:	1af2      	subs	r2, r6, r3
 800ca1c:	1c5d      	adds	r5, r3, #1
 800ca1e:	3a01      	subs	r2, #1
 800ca20:	42b3      	cmp	r3, r6
 800ca22:	bfa8      	it	ge
 800ca24:	2200      	movge	r2, #0
 800ca26:	18ab      	adds	r3, r5, r2
 800ca28:	e7e1      	b.n	800c9ee <__sccl+0x32>
 800ca2a:	4610      	mov	r0, r2
 800ca2c:	e7da      	b.n	800c9e4 <__sccl+0x28>

0800ca2e <__submore>:
 800ca2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca32:	460c      	mov	r4, r1
 800ca34:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ca36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca3a:	4299      	cmp	r1, r3
 800ca3c:	d11a      	bne.n	800ca74 <__submore+0x46>
 800ca3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ca42:	f7fd fed3 	bl	800a7ec <_malloc_r>
 800ca46:	b918      	cbnz	r0, 800ca50 <__submore+0x22>
 800ca48:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca54:	6360      	str	r0, [r4, #52]	@ 0x34
 800ca56:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ca5a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ca5c:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ca60:	7083      	strb	r3, [r0, #2]
 800ca62:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ca66:	7043      	strb	r3, [r0, #1]
 800ca68:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ca6c:	7003      	strb	r3, [r0, #0]
 800ca6e:	6020      	str	r0, [r4, #0]
 800ca70:	2000      	movs	r0, #0
 800ca72:	e7eb      	b.n	800ca4c <__submore+0x1e>
 800ca74:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ca76:	0077      	lsls	r7, r6, #1
 800ca78:	463a      	mov	r2, r7
 800ca7a:	f000 fbca 	bl	800d212 <_realloc_r>
 800ca7e:	4605      	mov	r5, r0
 800ca80:	2800      	cmp	r0, #0
 800ca82:	d0e1      	beq.n	800ca48 <__submore+0x1a>
 800ca84:	eb00 0806 	add.w	r8, r0, r6
 800ca88:	4601      	mov	r1, r0
 800ca8a:	4632      	mov	r2, r6
 800ca8c:	4640      	mov	r0, r8
 800ca8e:	f000 f82f 	bl	800caf0 <memcpy>
 800ca92:	f8c4 8000 	str.w	r8, [r4]
 800ca96:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ca9a:	e7e9      	b.n	800ca70 <__submore+0x42>

0800ca9c <memmove>:
 800ca9c:	4288      	cmp	r0, r1
 800ca9e:	b510      	push	{r4, lr}
 800caa0:	eb01 0402 	add.w	r4, r1, r2
 800caa4:	d902      	bls.n	800caac <memmove+0x10>
 800caa6:	4284      	cmp	r4, r0
 800caa8:	4623      	mov	r3, r4
 800caaa:	d807      	bhi.n	800cabc <memmove+0x20>
 800caac:	1e43      	subs	r3, r0, #1
 800caae:	42a1      	cmp	r1, r4
 800cab0:	d008      	beq.n	800cac4 <memmove+0x28>
 800cab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800caba:	e7f8      	b.n	800caae <memmove+0x12>
 800cabc:	4402      	add	r2, r0
 800cabe:	4601      	mov	r1, r0
 800cac0:	428a      	cmp	r2, r1
 800cac2:	d100      	bne.n	800cac6 <memmove+0x2a>
 800cac4:	bd10      	pop	{r4, pc}
 800cac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800caca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cace:	e7f7      	b.n	800cac0 <memmove+0x24>

0800cad0 <_sbrk_r>:
 800cad0:	b538      	push	{r3, r4, r5, lr}
 800cad2:	2300      	movs	r3, #0
 800cad4:	4d05      	ldr	r5, [pc, #20]	@ (800caec <_sbrk_r+0x1c>)
 800cad6:	4604      	mov	r4, r0
 800cad8:	4608      	mov	r0, r1
 800cada:	602b      	str	r3, [r5, #0]
 800cadc:	f7f5 fa36 	bl	8001f4c <_sbrk>
 800cae0:	1c43      	adds	r3, r0, #1
 800cae2:	d102      	bne.n	800caea <_sbrk_r+0x1a>
 800cae4:	682b      	ldr	r3, [r5, #0]
 800cae6:	b103      	cbz	r3, 800caea <_sbrk_r+0x1a>
 800cae8:	6023      	str	r3, [r4, #0]
 800caea:	bd38      	pop	{r3, r4, r5, pc}
 800caec:	200004ec 	.word	0x200004ec

0800caf0 <memcpy>:
 800caf0:	440a      	add	r2, r1
 800caf2:	1e43      	subs	r3, r0, #1
 800caf4:	4291      	cmp	r1, r2
 800caf6:	d100      	bne.n	800cafa <memcpy+0xa>
 800caf8:	4770      	bx	lr
 800cafa:	b510      	push	{r4, lr}
 800cafc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb00:	4291      	cmp	r1, r2
 800cb02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb06:	d1f9      	bne.n	800cafc <memcpy+0xc>
 800cb08:	bd10      	pop	{r4, pc}
 800cb0a:	0000      	movs	r0, r0
 800cb0c:	0000      	movs	r0, r0
	...

0800cb10 <nan>:
 800cb10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cb18 <nan+0x8>
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	00000000 	.word	0x00000000
 800cb1c:	7ff80000 	.word	0x7ff80000

0800cb20 <__assert_func>:
 800cb20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb22:	4614      	mov	r4, r2
 800cb24:	461a      	mov	r2, r3
 800cb26:	4b09      	ldr	r3, [pc, #36]	@ (800cb4c <__assert_func+0x2c>)
 800cb28:	4605      	mov	r5, r0
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	68d8      	ldr	r0, [r3, #12]
 800cb2e:	b14c      	cbz	r4, 800cb44 <__assert_func+0x24>
 800cb30:	4b07      	ldr	r3, [pc, #28]	@ (800cb50 <__assert_func+0x30>)
 800cb32:	9100      	str	r1, [sp, #0]
 800cb34:	4907      	ldr	r1, [pc, #28]	@ (800cb54 <__assert_func+0x34>)
 800cb36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb3a:	462b      	mov	r3, r5
 800cb3c:	f000 fc16 	bl	800d36c <fiprintf>
 800cb40:	f000 fc26 	bl	800d390 <abort>
 800cb44:	4b04      	ldr	r3, [pc, #16]	@ (800cb58 <__assert_func+0x38>)
 800cb46:	461c      	mov	r4, r3
 800cb48:	e7f3      	b.n	800cb32 <__assert_func+0x12>
 800cb4a:	bf00      	nop
 800cb4c:	2000001c 	.word	0x2000001c
 800cb50:	0800dbbf 	.word	0x0800dbbf
 800cb54:	0800dbcc 	.word	0x0800dbcc
 800cb58:	0800dbfa 	.word	0x0800dbfa

0800cb5c <_calloc_r>:
 800cb5c:	b570      	push	{r4, r5, r6, lr}
 800cb5e:	fba1 5402 	umull	r5, r4, r1, r2
 800cb62:	b934      	cbnz	r4, 800cb72 <_calloc_r+0x16>
 800cb64:	4629      	mov	r1, r5
 800cb66:	f7fd fe41 	bl	800a7ec <_malloc_r>
 800cb6a:	4606      	mov	r6, r0
 800cb6c:	b928      	cbnz	r0, 800cb7a <_calloc_r+0x1e>
 800cb6e:	4630      	mov	r0, r6
 800cb70:	bd70      	pop	{r4, r5, r6, pc}
 800cb72:	220c      	movs	r2, #12
 800cb74:	2600      	movs	r6, #0
 800cb76:	6002      	str	r2, [r0, #0]
 800cb78:	e7f9      	b.n	800cb6e <_calloc_r+0x12>
 800cb7a:	462a      	mov	r2, r5
 800cb7c:	4621      	mov	r1, r4
 800cb7e:	f7fc fe92 	bl	80098a6 <memset>
 800cb82:	e7f4      	b.n	800cb6e <_calloc_r+0x12>

0800cb84 <rshift>:
 800cb84:	6903      	ldr	r3, [r0, #16]
 800cb86:	114a      	asrs	r2, r1, #5
 800cb88:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cb8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb90:	f100 0414 	add.w	r4, r0, #20
 800cb94:	dd45      	ble.n	800cc22 <rshift+0x9e>
 800cb96:	f011 011f 	ands.w	r1, r1, #31
 800cb9a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cb9e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cba2:	d10c      	bne.n	800cbbe <rshift+0x3a>
 800cba4:	f100 0710 	add.w	r7, r0, #16
 800cba8:	4629      	mov	r1, r5
 800cbaa:	42b1      	cmp	r1, r6
 800cbac:	d334      	bcc.n	800cc18 <rshift+0x94>
 800cbae:	1a9b      	subs	r3, r3, r2
 800cbb0:	1eea      	subs	r2, r5, #3
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4296      	cmp	r6, r2
 800cbb6:	bf38      	it	cc
 800cbb8:	2300      	movcc	r3, #0
 800cbba:	4423      	add	r3, r4
 800cbbc:	e015      	b.n	800cbea <rshift+0x66>
 800cbbe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cbc2:	f1c1 0820 	rsb	r8, r1, #32
 800cbc6:	f105 0e04 	add.w	lr, r5, #4
 800cbca:	46a1      	mov	r9, r4
 800cbcc:	40cf      	lsrs	r7, r1
 800cbce:	4576      	cmp	r6, lr
 800cbd0:	46f4      	mov	ip, lr
 800cbd2:	d815      	bhi.n	800cc00 <rshift+0x7c>
 800cbd4:	1a9a      	subs	r2, r3, r2
 800cbd6:	3501      	adds	r5, #1
 800cbd8:	0092      	lsls	r2, r2, #2
 800cbda:	3a04      	subs	r2, #4
 800cbdc:	42ae      	cmp	r6, r5
 800cbde:	bf38      	it	cc
 800cbe0:	2200      	movcc	r2, #0
 800cbe2:	18a3      	adds	r3, r4, r2
 800cbe4:	50a7      	str	r7, [r4, r2]
 800cbe6:	b107      	cbz	r7, 800cbea <rshift+0x66>
 800cbe8:	3304      	adds	r3, #4
 800cbea:	1b1a      	subs	r2, r3, r4
 800cbec:	42a3      	cmp	r3, r4
 800cbee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cbf2:	bf08      	it	eq
 800cbf4:	2300      	moveq	r3, #0
 800cbf6:	6102      	str	r2, [r0, #16]
 800cbf8:	bf08      	it	eq
 800cbfa:	6143      	streq	r3, [r0, #20]
 800cbfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc00:	f8dc c000 	ldr.w	ip, [ip]
 800cc04:	fa0c fc08 	lsl.w	ip, ip, r8
 800cc08:	ea4c 0707 	orr.w	r7, ip, r7
 800cc0c:	f849 7b04 	str.w	r7, [r9], #4
 800cc10:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cc14:	40cf      	lsrs	r7, r1
 800cc16:	e7da      	b.n	800cbce <rshift+0x4a>
 800cc18:	f851 cb04 	ldr.w	ip, [r1], #4
 800cc1c:	f847 cf04 	str.w	ip, [r7, #4]!
 800cc20:	e7c3      	b.n	800cbaa <rshift+0x26>
 800cc22:	4623      	mov	r3, r4
 800cc24:	e7e1      	b.n	800cbea <rshift+0x66>

0800cc26 <__hexdig_fun>:
 800cc26:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cc2a:	2b09      	cmp	r3, #9
 800cc2c:	d802      	bhi.n	800cc34 <__hexdig_fun+0xe>
 800cc2e:	3820      	subs	r0, #32
 800cc30:	b2c0      	uxtb	r0, r0
 800cc32:	4770      	bx	lr
 800cc34:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cc38:	2b05      	cmp	r3, #5
 800cc3a:	d801      	bhi.n	800cc40 <__hexdig_fun+0x1a>
 800cc3c:	3847      	subs	r0, #71	@ 0x47
 800cc3e:	e7f7      	b.n	800cc30 <__hexdig_fun+0xa>
 800cc40:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cc44:	2b05      	cmp	r3, #5
 800cc46:	d801      	bhi.n	800cc4c <__hexdig_fun+0x26>
 800cc48:	3827      	subs	r0, #39	@ 0x27
 800cc4a:	e7f1      	b.n	800cc30 <__hexdig_fun+0xa>
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	4770      	bx	lr

0800cc50 <__gethex>:
 800cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc54:	b085      	sub	sp, #20
 800cc56:	468a      	mov	sl, r1
 800cc58:	4690      	mov	r8, r2
 800cc5a:	9302      	str	r3, [sp, #8]
 800cc5c:	680b      	ldr	r3, [r1, #0]
 800cc5e:	9001      	str	r0, [sp, #4]
 800cc60:	1c9c      	adds	r4, r3, #2
 800cc62:	46a1      	mov	r9, r4
 800cc64:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cc68:	2830      	cmp	r0, #48	@ 0x30
 800cc6a:	d0fa      	beq.n	800cc62 <__gethex+0x12>
 800cc6c:	eba9 0303 	sub.w	r3, r9, r3
 800cc70:	f1a3 0b02 	sub.w	fp, r3, #2
 800cc74:	f7ff ffd7 	bl	800cc26 <__hexdig_fun>
 800cc78:	4605      	mov	r5, r0
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	d166      	bne.n	800cd4c <__gethex+0xfc>
 800cc7e:	2201      	movs	r2, #1
 800cc80:	499e      	ldr	r1, [pc, #632]	@ (800cefc <__gethex+0x2ac>)
 800cc82:	4648      	mov	r0, r9
 800cc84:	f7fc fe17 	bl	80098b6 <strncmp>
 800cc88:	4607      	mov	r7, r0
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d165      	bne.n	800cd5a <__gethex+0x10a>
 800cc8e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cc92:	4626      	mov	r6, r4
 800cc94:	f7ff ffc7 	bl	800cc26 <__hexdig_fun>
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d060      	beq.n	800cd5e <__gethex+0x10e>
 800cc9c:	4623      	mov	r3, r4
 800cc9e:	7818      	ldrb	r0, [r3, #0]
 800cca0:	4699      	mov	r9, r3
 800cca2:	3301      	adds	r3, #1
 800cca4:	2830      	cmp	r0, #48	@ 0x30
 800cca6:	d0fa      	beq.n	800cc9e <__gethex+0x4e>
 800cca8:	f7ff ffbd 	bl	800cc26 <__hexdig_fun>
 800ccac:	fab0 f580 	clz	r5, r0
 800ccb0:	f04f 0b01 	mov.w	fp, #1
 800ccb4:	096d      	lsrs	r5, r5, #5
 800ccb6:	464a      	mov	r2, r9
 800ccb8:	4616      	mov	r6, r2
 800ccba:	3201      	adds	r2, #1
 800ccbc:	7830      	ldrb	r0, [r6, #0]
 800ccbe:	f7ff ffb2 	bl	800cc26 <__hexdig_fun>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d1f8      	bne.n	800ccb8 <__gethex+0x68>
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	498c      	ldr	r1, [pc, #560]	@ (800cefc <__gethex+0x2ac>)
 800ccca:	4630      	mov	r0, r6
 800cccc:	f7fc fdf3 	bl	80098b6 <strncmp>
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	d13e      	bne.n	800cd52 <__gethex+0x102>
 800ccd4:	b944      	cbnz	r4, 800cce8 <__gethex+0x98>
 800ccd6:	1c74      	adds	r4, r6, #1
 800ccd8:	4622      	mov	r2, r4
 800ccda:	4616      	mov	r6, r2
 800ccdc:	3201      	adds	r2, #1
 800ccde:	7830      	ldrb	r0, [r6, #0]
 800cce0:	f7ff ffa1 	bl	800cc26 <__hexdig_fun>
 800cce4:	2800      	cmp	r0, #0
 800cce6:	d1f8      	bne.n	800ccda <__gethex+0x8a>
 800cce8:	1ba4      	subs	r4, r4, r6
 800ccea:	00a7      	lsls	r7, r4, #2
 800ccec:	7833      	ldrb	r3, [r6, #0]
 800ccee:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ccf2:	2b50      	cmp	r3, #80	@ 0x50
 800ccf4:	d13d      	bne.n	800cd72 <__gethex+0x122>
 800ccf6:	7873      	ldrb	r3, [r6, #1]
 800ccf8:	2b2b      	cmp	r3, #43	@ 0x2b
 800ccfa:	d032      	beq.n	800cd62 <__gethex+0x112>
 800ccfc:	2b2d      	cmp	r3, #45	@ 0x2d
 800ccfe:	d033      	beq.n	800cd68 <__gethex+0x118>
 800cd00:	1c71      	adds	r1, r6, #1
 800cd02:	2400      	movs	r4, #0
 800cd04:	7808      	ldrb	r0, [r1, #0]
 800cd06:	f7ff ff8e 	bl	800cc26 <__hexdig_fun>
 800cd0a:	1e43      	subs	r3, r0, #1
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	2b18      	cmp	r3, #24
 800cd10:	d82f      	bhi.n	800cd72 <__gethex+0x122>
 800cd12:	f1a0 0210 	sub.w	r2, r0, #16
 800cd16:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cd1a:	f7ff ff84 	bl	800cc26 <__hexdig_fun>
 800cd1e:	f100 3cff 	add.w	ip, r0, #4294967295
 800cd22:	230a      	movs	r3, #10
 800cd24:	fa5f fc8c 	uxtb.w	ip, ip
 800cd28:	f1bc 0f18 	cmp.w	ip, #24
 800cd2c:	d91e      	bls.n	800cd6c <__gethex+0x11c>
 800cd2e:	b104      	cbz	r4, 800cd32 <__gethex+0xe2>
 800cd30:	4252      	negs	r2, r2
 800cd32:	4417      	add	r7, r2
 800cd34:	f8ca 1000 	str.w	r1, [sl]
 800cd38:	b1ed      	cbz	r5, 800cd76 <__gethex+0x126>
 800cd3a:	f1bb 0f00 	cmp.w	fp, #0
 800cd3e:	bf0c      	ite	eq
 800cd40:	2506      	moveq	r5, #6
 800cd42:	2500      	movne	r5, #0
 800cd44:	4628      	mov	r0, r5
 800cd46:	b005      	add	sp, #20
 800cd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd4c:	2500      	movs	r5, #0
 800cd4e:	462c      	mov	r4, r5
 800cd50:	e7b1      	b.n	800ccb6 <__gethex+0x66>
 800cd52:	2c00      	cmp	r4, #0
 800cd54:	d1c8      	bne.n	800cce8 <__gethex+0x98>
 800cd56:	4627      	mov	r7, r4
 800cd58:	e7c8      	b.n	800ccec <__gethex+0x9c>
 800cd5a:	464e      	mov	r6, r9
 800cd5c:	462f      	mov	r7, r5
 800cd5e:	2501      	movs	r5, #1
 800cd60:	e7c4      	b.n	800ccec <__gethex+0x9c>
 800cd62:	2400      	movs	r4, #0
 800cd64:	1cb1      	adds	r1, r6, #2
 800cd66:	e7cd      	b.n	800cd04 <__gethex+0xb4>
 800cd68:	2401      	movs	r4, #1
 800cd6a:	e7fb      	b.n	800cd64 <__gethex+0x114>
 800cd6c:	fb03 0002 	mla	r0, r3, r2, r0
 800cd70:	e7cf      	b.n	800cd12 <__gethex+0xc2>
 800cd72:	4631      	mov	r1, r6
 800cd74:	e7de      	b.n	800cd34 <__gethex+0xe4>
 800cd76:	eba6 0309 	sub.w	r3, r6, r9
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	2b07      	cmp	r3, #7
 800cd80:	dc0a      	bgt.n	800cd98 <__gethex+0x148>
 800cd82:	9801      	ldr	r0, [sp, #4]
 800cd84:	f7fd fdbe 	bl	800a904 <_Balloc>
 800cd88:	4604      	mov	r4, r0
 800cd8a:	b940      	cbnz	r0, 800cd9e <__gethex+0x14e>
 800cd8c:	4b5c      	ldr	r3, [pc, #368]	@ (800cf00 <__gethex+0x2b0>)
 800cd8e:	4602      	mov	r2, r0
 800cd90:	21e4      	movs	r1, #228	@ 0xe4
 800cd92:	485c      	ldr	r0, [pc, #368]	@ (800cf04 <__gethex+0x2b4>)
 800cd94:	f7ff fec4 	bl	800cb20 <__assert_func>
 800cd98:	3101      	adds	r1, #1
 800cd9a:	105b      	asrs	r3, r3, #1
 800cd9c:	e7ef      	b.n	800cd7e <__gethex+0x12e>
 800cd9e:	f100 0a14 	add.w	sl, r0, #20
 800cda2:	2300      	movs	r3, #0
 800cda4:	4655      	mov	r5, sl
 800cda6:	469b      	mov	fp, r3
 800cda8:	45b1      	cmp	r9, r6
 800cdaa:	d337      	bcc.n	800ce1c <__gethex+0x1cc>
 800cdac:	f845 bb04 	str.w	fp, [r5], #4
 800cdb0:	eba5 050a 	sub.w	r5, r5, sl
 800cdb4:	4658      	mov	r0, fp
 800cdb6:	10ad      	asrs	r5, r5, #2
 800cdb8:	6125      	str	r5, [r4, #16]
 800cdba:	016d      	lsls	r5, r5, #5
 800cdbc:	f7fd fe96 	bl	800aaec <__hi0bits>
 800cdc0:	f8d8 6000 	ldr.w	r6, [r8]
 800cdc4:	1a2d      	subs	r5, r5, r0
 800cdc6:	42b5      	cmp	r5, r6
 800cdc8:	dd54      	ble.n	800ce74 <__gethex+0x224>
 800cdca:	1bad      	subs	r5, r5, r6
 800cdcc:	4620      	mov	r0, r4
 800cdce:	4629      	mov	r1, r5
 800cdd0:	f7fe fa2d 	bl	800b22e <__any_on>
 800cdd4:	4681      	mov	r9, r0
 800cdd6:	b178      	cbz	r0, 800cdf8 <__gethex+0x1a8>
 800cdd8:	1e6b      	subs	r3, r5, #1
 800cdda:	f04f 0901 	mov.w	r9, #1
 800cdde:	1159      	asrs	r1, r3, #5
 800cde0:	f003 021f 	and.w	r2, r3, #31
 800cde4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cde8:	fa09 f202 	lsl.w	r2, r9, r2
 800cdec:	420a      	tst	r2, r1
 800cdee:	d003      	beq.n	800cdf8 <__gethex+0x1a8>
 800cdf0:	454b      	cmp	r3, r9
 800cdf2:	dc36      	bgt.n	800ce62 <__gethex+0x212>
 800cdf4:	f04f 0902 	mov.w	r9, #2
 800cdf8:	442f      	add	r7, r5
 800cdfa:	4629      	mov	r1, r5
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f7ff fec1 	bl	800cb84 <rshift>
 800ce02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce06:	42bb      	cmp	r3, r7
 800ce08:	da42      	bge.n	800ce90 <__gethex+0x240>
 800ce0a:	4621      	mov	r1, r4
 800ce0c:	9801      	ldr	r0, [sp, #4]
 800ce0e:	f7fd fdb9 	bl	800a984 <_Bfree>
 800ce12:	2300      	movs	r3, #0
 800ce14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce16:	25a3      	movs	r5, #163	@ 0xa3
 800ce18:	6013      	str	r3, [r2, #0]
 800ce1a:	e793      	b.n	800cd44 <__gethex+0xf4>
 800ce1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ce20:	2a2e      	cmp	r2, #46	@ 0x2e
 800ce22:	d012      	beq.n	800ce4a <__gethex+0x1fa>
 800ce24:	2b20      	cmp	r3, #32
 800ce26:	d104      	bne.n	800ce32 <__gethex+0x1e2>
 800ce28:	f845 bb04 	str.w	fp, [r5], #4
 800ce2c:	f04f 0b00 	mov.w	fp, #0
 800ce30:	465b      	mov	r3, fp
 800ce32:	7830      	ldrb	r0, [r6, #0]
 800ce34:	9303      	str	r3, [sp, #12]
 800ce36:	f7ff fef6 	bl	800cc26 <__hexdig_fun>
 800ce3a:	9b03      	ldr	r3, [sp, #12]
 800ce3c:	f000 000f 	and.w	r0, r0, #15
 800ce40:	4098      	lsls	r0, r3
 800ce42:	3304      	adds	r3, #4
 800ce44:	ea4b 0b00 	orr.w	fp, fp, r0
 800ce48:	e7ae      	b.n	800cda8 <__gethex+0x158>
 800ce4a:	45b1      	cmp	r9, r6
 800ce4c:	d8ea      	bhi.n	800ce24 <__gethex+0x1d4>
 800ce4e:	2201      	movs	r2, #1
 800ce50:	492a      	ldr	r1, [pc, #168]	@ (800cefc <__gethex+0x2ac>)
 800ce52:	4630      	mov	r0, r6
 800ce54:	9303      	str	r3, [sp, #12]
 800ce56:	f7fc fd2e 	bl	80098b6 <strncmp>
 800ce5a:	9b03      	ldr	r3, [sp, #12]
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	d1e1      	bne.n	800ce24 <__gethex+0x1d4>
 800ce60:	e7a2      	b.n	800cda8 <__gethex+0x158>
 800ce62:	1ea9      	subs	r1, r5, #2
 800ce64:	4620      	mov	r0, r4
 800ce66:	f7fe f9e2 	bl	800b22e <__any_on>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d0c2      	beq.n	800cdf4 <__gethex+0x1a4>
 800ce6e:	f04f 0903 	mov.w	r9, #3
 800ce72:	e7c1      	b.n	800cdf8 <__gethex+0x1a8>
 800ce74:	da09      	bge.n	800ce8a <__gethex+0x23a>
 800ce76:	1b75      	subs	r5, r6, r5
 800ce78:	4621      	mov	r1, r4
 800ce7a:	9801      	ldr	r0, [sp, #4]
 800ce7c:	462a      	mov	r2, r5
 800ce7e:	1b7f      	subs	r7, r7, r5
 800ce80:	f7fd ff94 	bl	800adac <__lshift>
 800ce84:	4604      	mov	r4, r0
 800ce86:	f100 0a14 	add.w	sl, r0, #20
 800ce8a:	f04f 0900 	mov.w	r9, #0
 800ce8e:	e7b8      	b.n	800ce02 <__gethex+0x1b2>
 800ce90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ce94:	42bd      	cmp	r5, r7
 800ce96:	dd6f      	ble.n	800cf78 <__gethex+0x328>
 800ce98:	1bed      	subs	r5, r5, r7
 800ce9a:	42ae      	cmp	r6, r5
 800ce9c:	dc34      	bgt.n	800cf08 <__gethex+0x2b8>
 800ce9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cea2:	2b02      	cmp	r3, #2
 800cea4:	d022      	beq.n	800ceec <__gethex+0x29c>
 800cea6:	2b03      	cmp	r3, #3
 800cea8:	d024      	beq.n	800cef4 <__gethex+0x2a4>
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d115      	bne.n	800ceda <__gethex+0x28a>
 800ceae:	42ae      	cmp	r6, r5
 800ceb0:	d113      	bne.n	800ceda <__gethex+0x28a>
 800ceb2:	2e01      	cmp	r6, #1
 800ceb4:	d10b      	bne.n	800cece <__gethex+0x27e>
 800ceb6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ceba:	2562      	movs	r5, #98	@ 0x62
 800cebc:	9a02      	ldr	r2, [sp, #8]
 800cebe:	6013      	str	r3, [r2, #0]
 800cec0:	2301      	movs	r3, #1
 800cec2:	6123      	str	r3, [r4, #16]
 800cec4:	f8ca 3000 	str.w	r3, [sl]
 800cec8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ceca:	601c      	str	r4, [r3, #0]
 800cecc:	e73a      	b.n	800cd44 <__gethex+0xf4>
 800cece:	1e71      	subs	r1, r6, #1
 800ced0:	4620      	mov	r0, r4
 800ced2:	f7fe f9ac 	bl	800b22e <__any_on>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d1ed      	bne.n	800ceb6 <__gethex+0x266>
 800ceda:	4621      	mov	r1, r4
 800cedc:	9801      	ldr	r0, [sp, #4]
 800cede:	f7fd fd51 	bl	800a984 <_Bfree>
 800cee2:	2300      	movs	r3, #0
 800cee4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cee6:	2550      	movs	r5, #80	@ 0x50
 800cee8:	6013      	str	r3, [r2, #0]
 800ceea:	e72b      	b.n	800cd44 <__gethex+0xf4>
 800ceec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1f3      	bne.n	800ceda <__gethex+0x28a>
 800cef2:	e7e0      	b.n	800ceb6 <__gethex+0x266>
 800cef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d1dd      	bne.n	800ceb6 <__gethex+0x266>
 800cefa:	e7ee      	b.n	800ceda <__gethex+0x28a>
 800cefc:	0800db89 	.word	0x0800db89
 800cf00:	0800db1f 	.word	0x0800db1f
 800cf04:	0800dbfb 	.word	0x0800dbfb
 800cf08:	1e6f      	subs	r7, r5, #1
 800cf0a:	f1b9 0f00 	cmp.w	r9, #0
 800cf0e:	d130      	bne.n	800cf72 <__gethex+0x322>
 800cf10:	b127      	cbz	r7, 800cf1c <__gethex+0x2cc>
 800cf12:	4639      	mov	r1, r7
 800cf14:	4620      	mov	r0, r4
 800cf16:	f7fe f98a 	bl	800b22e <__any_on>
 800cf1a:	4681      	mov	r9, r0
 800cf1c:	117a      	asrs	r2, r7, #5
 800cf1e:	2301      	movs	r3, #1
 800cf20:	f007 071f 	and.w	r7, r7, #31
 800cf24:	4629      	mov	r1, r5
 800cf26:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	40bb      	lsls	r3, r7
 800cf2e:	1b76      	subs	r6, r6, r5
 800cf30:	2502      	movs	r5, #2
 800cf32:	4213      	tst	r3, r2
 800cf34:	bf18      	it	ne
 800cf36:	f049 0902 	orrne.w	r9, r9, #2
 800cf3a:	f7ff fe23 	bl	800cb84 <rshift>
 800cf3e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cf42:	f1b9 0f00 	cmp.w	r9, #0
 800cf46:	d047      	beq.n	800cfd8 <__gethex+0x388>
 800cf48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d015      	beq.n	800cf7c <__gethex+0x32c>
 800cf50:	2b03      	cmp	r3, #3
 800cf52:	d017      	beq.n	800cf84 <__gethex+0x334>
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d109      	bne.n	800cf6c <__gethex+0x31c>
 800cf58:	f019 0f02 	tst.w	r9, #2
 800cf5c:	d006      	beq.n	800cf6c <__gethex+0x31c>
 800cf5e:	f8da 3000 	ldr.w	r3, [sl]
 800cf62:	ea49 0903 	orr.w	r9, r9, r3
 800cf66:	f019 0f01 	tst.w	r9, #1
 800cf6a:	d10e      	bne.n	800cf8a <__gethex+0x33a>
 800cf6c:	f045 0510 	orr.w	r5, r5, #16
 800cf70:	e032      	b.n	800cfd8 <__gethex+0x388>
 800cf72:	f04f 0901 	mov.w	r9, #1
 800cf76:	e7d1      	b.n	800cf1c <__gethex+0x2cc>
 800cf78:	2501      	movs	r5, #1
 800cf7a:	e7e2      	b.n	800cf42 <__gethex+0x2f2>
 800cf7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf7e:	f1c3 0301 	rsb	r3, r3, #1
 800cf82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cf84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d0f0      	beq.n	800cf6c <__gethex+0x31c>
 800cf8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cf8e:	f104 0314 	add.w	r3, r4, #20
 800cf92:	f04f 0c00 	mov.w	ip, #0
 800cf96:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cf9a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfa4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cfa8:	d01b      	beq.n	800cfe2 <__gethex+0x392>
 800cfaa:	3201      	adds	r2, #1
 800cfac:	6002      	str	r2, [r0, #0]
 800cfae:	2d02      	cmp	r5, #2
 800cfb0:	f104 0314 	add.w	r3, r4, #20
 800cfb4:	d13c      	bne.n	800d030 <__gethex+0x3e0>
 800cfb6:	f8d8 2000 	ldr.w	r2, [r8]
 800cfba:	3a01      	subs	r2, #1
 800cfbc:	42b2      	cmp	r2, r6
 800cfbe:	d109      	bne.n	800cfd4 <__gethex+0x384>
 800cfc0:	1171      	asrs	r1, r6, #5
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	f006 061f 	and.w	r6, r6, #31
 800cfc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cfcc:	fa02 f606 	lsl.w	r6, r2, r6
 800cfd0:	421e      	tst	r6, r3
 800cfd2:	d13a      	bne.n	800d04a <__gethex+0x3fa>
 800cfd4:	f045 0520 	orr.w	r5, r5, #32
 800cfd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfda:	601c      	str	r4, [r3, #0]
 800cfdc:	9b02      	ldr	r3, [sp, #8]
 800cfde:	601f      	str	r7, [r3, #0]
 800cfe0:	e6b0      	b.n	800cd44 <__gethex+0xf4>
 800cfe2:	4299      	cmp	r1, r3
 800cfe4:	f843 cc04 	str.w	ip, [r3, #-4]
 800cfe8:	d8d9      	bhi.n	800cf9e <__gethex+0x34e>
 800cfea:	68a3      	ldr	r3, [r4, #8]
 800cfec:	459b      	cmp	fp, r3
 800cfee:	db17      	blt.n	800d020 <__gethex+0x3d0>
 800cff0:	6861      	ldr	r1, [r4, #4]
 800cff2:	9801      	ldr	r0, [sp, #4]
 800cff4:	3101      	adds	r1, #1
 800cff6:	f7fd fc85 	bl	800a904 <_Balloc>
 800cffa:	4681      	mov	r9, r0
 800cffc:	b918      	cbnz	r0, 800d006 <__gethex+0x3b6>
 800cffe:	4b1a      	ldr	r3, [pc, #104]	@ (800d068 <__gethex+0x418>)
 800d000:	4602      	mov	r2, r0
 800d002:	2184      	movs	r1, #132	@ 0x84
 800d004:	e6c5      	b.n	800cd92 <__gethex+0x142>
 800d006:	6922      	ldr	r2, [r4, #16]
 800d008:	f104 010c 	add.w	r1, r4, #12
 800d00c:	300c      	adds	r0, #12
 800d00e:	3202      	adds	r2, #2
 800d010:	0092      	lsls	r2, r2, #2
 800d012:	f7ff fd6d 	bl	800caf0 <memcpy>
 800d016:	4621      	mov	r1, r4
 800d018:	464c      	mov	r4, r9
 800d01a:	9801      	ldr	r0, [sp, #4]
 800d01c:	f7fd fcb2 	bl	800a984 <_Bfree>
 800d020:	6923      	ldr	r3, [r4, #16]
 800d022:	1c5a      	adds	r2, r3, #1
 800d024:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d028:	6122      	str	r2, [r4, #16]
 800d02a:	2201      	movs	r2, #1
 800d02c:	615a      	str	r2, [r3, #20]
 800d02e:	e7be      	b.n	800cfae <__gethex+0x35e>
 800d030:	6922      	ldr	r2, [r4, #16]
 800d032:	455a      	cmp	r2, fp
 800d034:	dd0b      	ble.n	800d04e <__gethex+0x3fe>
 800d036:	2101      	movs	r1, #1
 800d038:	4620      	mov	r0, r4
 800d03a:	f7ff fda3 	bl	800cb84 <rshift>
 800d03e:	3701      	adds	r7, #1
 800d040:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d044:	42bb      	cmp	r3, r7
 800d046:	f6ff aee0 	blt.w	800ce0a <__gethex+0x1ba>
 800d04a:	2501      	movs	r5, #1
 800d04c:	e7c2      	b.n	800cfd4 <__gethex+0x384>
 800d04e:	f016 061f 	ands.w	r6, r6, #31
 800d052:	d0fa      	beq.n	800d04a <__gethex+0x3fa>
 800d054:	4453      	add	r3, sl
 800d056:	f1c6 0620 	rsb	r6, r6, #32
 800d05a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d05e:	f7fd fd45 	bl	800aaec <__hi0bits>
 800d062:	42b0      	cmp	r0, r6
 800d064:	dbe7      	blt.n	800d036 <__gethex+0x3e6>
 800d066:	e7f0      	b.n	800d04a <__gethex+0x3fa>
 800d068:	0800db1f 	.word	0x0800db1f

0800d06c <L_shift>:
 800d06c:	f1c2 0208 	rsb	r2, r2, #8
 800d070:	0092      	lsls	r2, r2, #2
 800d072:	b570      	push	{r4, r5, r6, lr}
 800d074:	f1c2 0620 	rsb	r6, r2, #32
 800d078:	6843      	ldr	r3, [r0, #4]
 800d07a:	6804      	ldr	r4, [r0, #0]
 800d07c:	fa03 f506 	lsl.w	r5, r3, r6
 800d080:	40d3      	lsrs	r3, r2
 800d082:	432c      	orrs	r4, r5
 800d084:	6004      	str	r4, [r0, #0]
 800d086:	f840 3f04 	str.w	r3, [r0, #4]!
 800d08a:	4288      	cmp	r0, r1
 800d08c:	d3f4      	bcc.n	800d078 <L_shift+0xc>
 800d08e:	bd70      	pop	{r4, r5, r6, pc}

0800d090 <__match>:
 800d090:	6803      	ldr	r3, [r0, #0]
 800d092:	3301      	adds	r3, #1
 800d094:	b530      	push	{r4, r5, lr}
 800d096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d09a:	b914      	cbnz	r4, 800d0a2 <__match+0x12>
 800d09c:	6003      	str	r3, [r0, #0]
 800d09e:	2001      	movs	r0, #1
 800d0a0:	bd30      	pop	{r4, r5, pc}
 800d0a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d0aa:	2d19      	cmp	r5, #25
 800d0ac:	bf98      	it	ls
 800d0ae:	3220      	addls	r2, #32
 800d0b0:	42a2      	cmp	r2, r4
 800d0b2:	d0f0      	beq.n	800d096 <__match+0x6>
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	e7f3      	b.n	800d0a0 <__match+0x10>

0800d0b8 <__hexnan>:
 800d0b8:	680b      	ldr	r3, [r1, #0]
 800d0ba:	6801      	ldr	r1, [r0, #0]
 800d0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c0:	115e      	asrs	r6, r3, #5
 800d0c2:	f013 031f 	ands.w	r3, r3, #31
 800d0c6:	f04f 0500 	mov.w	r5, #0
 800d0ca:	b087      	sub	sp, #28
 800d0cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d0d0:	4682      	mov	sl, r0
 800d0d2:	4690      	mov	r8, r2
 800d0d4:	46ab      	mov	fp, r5
 800d0d6:	bf18      	it	ne
 800d0d8:	3604      	addne	r6, #4
 800d0da:	9301      	str	r3, [sp, #4]
 800d0dc:	9502      	str	r5, [sp, #8]
 800d0de:	1f37      	subs	r7, r6, #4
 800d0e0:	f846 5c04 	str.w	r5, [r6, #-4]
 800d0e4:	46b9      	mov	r9, r7
 800d0e6:	463c      	mov	r4, r7
 800d0e8:	1c4b      	adds	r3, r1, #1
 800d0ea:	784a      	ldrb	r2, [r1, #1]
 800d0ec:	9303      	str	r3, [sp, #12]
 800d0ee:	b342      	cbz	r2, 800d142 <__hexnan+0x8a>
 800d0f0:	4610      	mov	r0, r2
 800d0f2:	9105      	str	r1, [sp, #20]
 800d0f4:	9204      	str	r2, [sp, #16]
 800d0f6:	f7ff fd96 	bl	800cc26 <__hexdig_fun>
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	d151      	bne.n	800d1a2 <__hexnan+0xea>
 800d0fe:	9a04      	ldr	r2, [sp, #16]
 800d100:	9905      	ldr	r1, [sp, #20]
 800d102:	2a20      	cmp	r2, #32
 800d104:	d818      	bhi.n	800d138 <__hexnan+0x80>
 800d106:	9b02      	ldr	r3, [sp, #8]
 800d108:	459b      	cmp	fp, r3
 800d10a:	dd13      	ble.n	800d134 <__hexnan+0x7c>
 800d10c:	454c      	cmp	r4, r9
 800d10e:	d206      	bcs.n	800d11e <__hexnan+0x66>
 800d110:	2d07      	cmp	r5, #7
 800d112:	dc04      	bgt.n	800d11e <__hexnan+0x66>
 800d114:	462a      	mov	r2, r5
 800d116:	4649      	mov	r1, r9
 800d118:	4620      	mov	r0, r4
 800d11a:	f7ff ffa7 	bl	800d06c <L_shift>
 800d11e:	4544      	cmp	r4, r8
 800d120:	d951      	bls.n	800d1c6 <__hexnan+0x10e>
 800d122:	2300      	movs	r3, #0
 800d124:	f1a4 0904 	sub.w	r9, r4, #4
 800d128:	f8cd b008 	str.w	fp, [sp, #8]
 800d12c:	f844 3c04 	str.w	r3, [r4, #-4]
 800d130:	461d      	mov	r5, r3
 800d132:	464c      	mov	r4, r9
 800d134:	9903      	ldr	r1, [sp, #12]
 800d136:	e7d7      	b.n	800d0e8 <__hexnan+0x30>
 800d138:	2a29      	cmp	r2, #41	@ 0x29
 800d13a:	d156      	bne.n	800d1ea <__hexnan+0x132>
 800d13c:	3102      	adds	r1, #2
 800d13e:	f8ca 1000 	str.w	r1, [sl]
 800d142:	f1bb 0f00 	cmp.w	fp, #0
 800d146:	d050      	beq.n	800d1ea <__hexnan+0x132>
 800d148:	454c      	cmp	r4, r9
 800d14a:	d206      	bcs.n	800d15a <__hexnan+0xa2>
 800d14c:	2d07      	cmp	r5, #7
 800d14e:	dc04      	bgt.n	800d15a <__hexnan+0xa2>
 800d150:	462a      	mov	r2, r5
 800d152:	4649      	mov	r1, r9
 800d154:	4620      	mov	r0, r4
 800d156:	f7ff ff89 	bl	800d06c <L_shift>
 800d15a:	4544      	cmp	r4, r8
 800d15c:	d935      	bls.n	800d1ca <__hexnan+0x112>
 800d15e:	f1a8 0204 	sub.w	r2, r8, #4
 800d162:	4623      	mov	r3, r4
 800d164:	f853 1b04 	ldr.w	r1, [r3], #4
 800d168:	429f      	cmp	r7, r3
 800d16a:	f842 1f04 	str.w	r1, [r2, #4]!
 800d16e:	d2f9      	bcs.n	800d164 <__hexnan+0xac>
 800d170:	1b3b      	subs	r3, r7, r4
 800d172:	3e03      	subs	r6, #3
 800d174:	3401      	adds	r4, #1
 800d176:	2200      	movs	r2, #0
 800d178:	f023 0303 	bic.w	r3, r3, #3
 800d17c:	3304      	adds	r3, #4
 800d17e:	42b4      	cmp	r4, r6
 800d180:	bf88      	it	hi
 800d182:	2304      	movhi	r3, #4
 800d184:	4443      	add	r3, r8
 800d186:	f843 2b04 	str.w	r2, [r3], #4
 800d18a:	429f      	cmp	r7, r3
 800d18c:	d2fb      	bcs.n	800d186 <__hexnan+0xce>
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	b91b      	cbnz	r3, 800d19a <__hexnan+0xe2>
 800d192:	4547      	cmp	r7, r8
 800d194:	d127      	bne.n	800d1e6 <__hexnan+0x12e>
 800d196:	2301      	movs	r3, #1
 800d198:	603b      	str	r3, [r7, #0]
 800d19a:	2005      	movs	r0, #5
 800d19c:	b007      	add	sp, #28
 800d19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1a2:	3501      	adds	r5, #1
 800d1a4:	f10b 0b01 	add.w	fp, fp, #1
 800d1a8:	2d08      	cmp	r5, #8
 800d1aa:	dd05      	ble.n	800d1b8 <__hexnan+0x100>
 800d1ac:	4544      	cmp	r4, r8
 800d1ae:	d9c1      	bls.n	800d134 <__hexnan+0x7c>
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	3c04      	subs	r4, #4
 800d1b4:	2501      	movs	r5, #1
 800d1b6:	6023      	str	r3, [r4, #0]
 800d1b8:	6822      	ldr	r2, [r4, #0]
 800d1ba:	f000 000f 	and.w	r0, r0, #15
 800d1be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d1c2:	6020      	str	r0, [r4, #0]
 800d1c4:	e7b6      	b.n	800d134 <__hexnan+0x7c>
 800d1c6:	2508      	movs	r5, #8
 800d1c8:	e7b4      	b.n	800d134 <__hexnan+0x7c>
 800d1ca:	9b01      	ldr	r3, [sp, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d0de      	beq.n	800d18e <__hexnan+0xd6>
 800d1d0:	f1c3 0320 	rsb	r3, r3, #32
 800d1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d8:	40da      	lsrs	r2, r3
 800d1da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d1de:	4013      	ands	r3, r2
 800d1e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d1e4:	e7d3      	b.n	800d18e <__hexnan+0xd6>
 800d1e6:	3f04      	subs	r7, #4
 800d1e8:	e7d1      	b.n	800d18e <__hexnan+0xd6>
 800d1ea:	2004      	movs	r0, #4
 800d1ec:	e7d6      	b.n	800d19c <__hexnan+0xe4>

0800d1ee <__ascii_mbtowc>:
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	b901      	cbnz	r1, 800d1f4 <__ascii_mbtowc+0x6>
 800d1f2:	a901      	add	r1, sp, #4
 800d1f4:	b142      	cbz	r2, 800d208 <__ascii_mbtowc+0x1a>
 800d1f6:	b14b      	cbz	r3, 800d20c <__ascii_mbtowc+0x1e>
 800d1f8:	7813      	ldrb	r3, [r2, #0]
 800d1fa:	600b      	str	r3, [r1, #0]
 800d1fc:	7812      	ldrb	r2, [r2, #0]
 800d1fe:	1e10      	subs	r0, r2, #0
 800d200:	bf18      	it	ne
 800d202:	2001      	movne	r0, #1
 800d204:	b002      	add	sp, #8
 800d206:	4770      	bx	lr
 800d208:	4610      	mov	r0, r2
 800d20a:	e7fb      	b.n	800d204 <__ascii_mbtowc+0x16>
 800d20c:	f06f 0001 	mvn.w	r0, #1
 800d210:	e7f8      	b.n	800d204 <__ascii_mbtowc+0x16>

0800d212 <_realloc_r>:
 800d212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d216:	4607      	mov	r7, r0
 800d218:	4614      	mov	r4, r2
 800d21a:	460d      	mov	r5, r1
 800d21c:	b921      	cbnz	r1, 800d228 <_realloc_r+0x16>
 800d21e:	4611      	mov	r1, r2
 800d220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d224:	f7fd bae2 	b.w	800a7ec <_malloc_r>
 800d228:	b92a      	cbnz	r2, 800d236 <_realloc_r+0x24>
 800d22a:	4625      	mov	r5, r4
 800d22c:	f7fd fa6a 	bl	800a704 <_free_r>
 800d230:	4628      	mov	r0, r5
 800d232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d236:	f000 f8b2 	bl	800d39e <_malloc_usable_size_r>
 800d23a:	4284      	cmp	r4, r0
 800d23c:	4606      	mov	r6, r0
 800d23e:	d802      	bhi.n	800d246 <_realloc_r+0x34>
 800d240:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d244:	d8f4      	bhi.n	800d230 <_realloc_r+0x1e>
 800d246:	4621      	mov	r1, r4
 800d248:	4638      	mov	r0, r7
 800d24a:	f7fd facf 	bl	800a7ec <_malloc_r>
 800d24e:	4680      	mov	r8, r0
 800d250:	b908      	cbnz	r0, 800d256 <_realloc_r+0x44>
 800d252:	4645      	mov	r5, r8
 800d254:	e7ec      	b.n	800d230 <_realloc_r+0x1e>
 800d256:	42b4      	cmp	r4, r6
 800d258:	4622      	mov	r2, r4
 800d25a:	4629      	mov	r1, r5
 800d25c:	bf28      	it	cs
 800d25e:	4632      	movcs	r2, r6
 800d260:	f7ff fc46 	bl	800caf0 <memcpy>
 800d264:	4629      	mov	r1, r5
 800d266:	4638      	mov	r0, r7
 800d268:	f7fd fa4c 	bl	800a704 <_free_r>
 800d26c:	e7f1      	b.n	800d252 <_realloc_r+0x40>
	...

0800d270 <_strtoul_l.isra.0>:
 800d270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d274:	4686      	mov	lr, r0
 800d276:	460d      	mov	r5, r1
 800d278:	4e33      	ldr	r6, [pc, #204]	@ (800d348 <_strtoul_l.isra.0+0xd8>)
 800d27a:	4628      	mov	r0, r5
 800d27c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d280:	5d37      	ldrb	r7, [r6, r4]
 800d282:	f017 0708 	ands.w	r7, r7, #8
 800d286:	d1f8      	bne.n	800d27a <_strtoul_l.isra.0+0xa>
 800d288:	2c2d      	cmp	r4, #45	@ 0x2d
 800d28a:	d110      	bne.n	800d2ae <_strtoul_l.isra.0+0x3e>
 800d28c:	782c      	ldrb	r4, [r5, #0]
 800d28e:	2701      	movs	r7, #1
 800d290:	1c85      	adds	r5, r0, #2
 800d292:	f033 0010 	bics.w	r0, r3, #16
 800d296:	d115      	bne.n	800d2c4 <_strtoul_l.isra.0+0x54>
 800d298:	2c30      	cmp	r4, #48	@ 0x30
 800d29a:	d10d      	bne.n	800d2b8 <_strtoul_l.isra.0+0x48>
 800d29c:	7828      	ldrb	r0, [r5, #0]
 800d29e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d2a2:	2858      	cmp	r0, #88	@ 0x58
 800d2a4:	d108      	bne.n	800d2b8 <_strtoul_l.isra.0+0x48>
 800d2a6:	786c      	ldrb	r4, [r5, #1]
 800d2a8:	3502      	adds	r5, #2
 800d2aa:	2310      	movs	r3, #16
 800d2ac:	e00a      	b.n	800d2c4 <_strtoul_l.isra.0+0x54>
 800d2ae:	2c2b      	cmp	r4, #43	@ 0x2b
 800d2b0:	bf04      	itt	eq
 800d2b2:	782c      	ldrbeq	r4, [r5, #0]
 800d2b4:	1c85      	addeq	r5, r0, #2
 800d2b6:	e7ec      	b.n	800d292 <_strtoul_l.isra.0+0x22>
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1f6      	bne.n	800d2aa <_strtoul_l.isra.0+0x3a>
 800d2bc:	2c30      	cmp	r4, #48	@ 0x30
 800d2be:	bf14      	ite	ne
 800d2c0:	230a      	movne	r3, #10
 800d2c2:	2308      	moveq	r3, #8
 800d2c4:	f04f 38ff 	mov.w	r8, #4294967295
 800d2c8:	2600      	movs	r6, #0
 800d2ca:	fbb8 f8f3 	udiv	r8, r8, r3
 800d2ce:	fb03 f908 	mul.w	r9, r3, r8
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	ea6f 0909 	mvn.w	r9, r9
 800d2d8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d2dc:	f1bc 0f09 	cmp.w	ip, #9
 800d2e0:	d810      	bhi.n	800d304 <_strtoul_l.isra.0+0x94>
 800d2e2:	4664      	mov	r4, ip
 800d2e4:	42a3      	cmp	r3, r4
 800d2e6:	dd1e      	ble.n	800d326 <_strtoul_l.isra.0+0xb6>
 800d2e8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d2ec:	d007      	beq.n	800d2fe <_strtoul_l.isra.0+0x8e>
 800d2ee:	4580      	cmp	r8, r0
 800d2f0:	d316      	bcc.n	800d320 <_strtoul_l.isra.0+0xb0>
 800d2f2:	d101      	bne.n	800d2f8 <_strtoul_l.isra.0+0x88>
 800d2f4:	45a1      	cmp	r9, r4
 800d2f6:	db13      	blt.n	800d320 <_strtoul_l.isra.0+0xb0>
 800d2f8:	fb00 4003 	mla	r0, r0, r3, r4
 800d2fc:	2601      	movs	r6, #1
 800d2fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d302:	e7e9      	b.n	800d2d8 <_strtoul_l.isra.0+0x68>
 800d304:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d308:	f1bc 0f19 	cmp.w	ip, #25
 800d30c:	d801      	bhi.n	800d312 <_strtoul_l.isra.0+0xa2>
 800d30e:	3c37      	subs	r4, #55	@ 0x37
 800d310:	e7e8      	b.n	800d2e4 <_strtoul_l.isra.0+0x74>
 800d312:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d316:	f1bc 0f19 	cmp.w	ip, #25
 800d31a:	d804      	bhi.n	800d326 <_strtoul_l.isra.0+0xb6>
 800d31c:	3c57      	subs	r4, #87	@ 0x57
 800d31e:	e7e1      	b.n	800d2e4 <_strtoul_l.isra.0+0x74>
 800d320:	f04f 36ff 	mov.w	r6, #4294967295
 800d324:	e7eb      	b.n	800d2fe <_strtoul_l.isra.0+0x8e>
 800d326:	1c73      	adds	r3, r6, #1
 800d328:	d106      	bne.n	800d338 <_strtoul_l.isra.0+0xc8>
 800d32a:	2322      	movs	r3, #34	@ 0x22
 800d32c:	4630      	mov	r0, r6
 800d32e:	f8ce 3000 	str.w	r3, [lr]
 800d332:	b932      	cbnz	r2, 800d342 <_strtoul_l.isra.0+0xd2>
 800d334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d338:	b107      	cbz	r7, 800d33c <_strtoul_l.isra.0+0xcc>
 800d33a:	4240      	negs	r0, r0
 800d33c:	2a00      	cmp	r2, #0
 800d33e:	d0f9      	beq.n	800d334 <_strtoul_l.isra.0+0xc4>
 800d340:	b106      	cbz	r6, 800d344 <_strtoul_l.isra.0+0xd4>
 800d342:	1e69      	subs	r1, r5, #1
 800d344:	6011      	str	r1, [r2, #0]
 800d346:	e7f5      	b.n	800d334 <_strtoul_l.isra.0+0xc4>
 800d348:	0800dda9 	.word	0x0800dda9

0800d34c <_strtoul_r>:
 800d34c:	f7ff bf90 	b.w	800d270 <_strtoul_l.isra.0>

0800d350 <__ascii_wctomb>:
 800d350:	4603      	mov	r3, r0
 800d352:	4608      	mov	r0, r1
 800d354:	b141      	cbz	r1, 800d368 <__ascii_wctomb+0x18>
 800d356:	2aff      	cmp	r2, #255	@ 0xff
 800d358:	d904      	bls.n	800d364 <__ascii_wctomb+0x14>
 800d35a:	228a      	movs	r2, #138	@ 0x8a
 800d35c:	f04f 30ff 	mov.w	r0, #4294967295
 800d360:	601a      	str	r2, [r3, #0]
 800d362:	4770      	bx	lr
 800d364:	2001      	movs	r0, #1
 800d366:	700a      	strb	r2, [r1, #0]
 800d368:	4770      	bx	lr
	...

0800d36c <fiprintf>:
 800d36c:	b40e      	push	{r1, r2, r3}
 800d36e:	b503      	push	{r0, r1, lr}
 800d370:	ab03      	add	r3, sp, #12
 800d372:	4601      	mov	r1, r0
 800d374:	4805      	ldr	r0, [pc, #20]	@ (800d38c <fiprintf+0x20>)
 800d376:	f853 2b04 	ldr.w	r2, [r3], #4
 800d37a:	6800      	ldr	r0, [r0, #0]
 800d37c:	9301      	str	r3, [sp, #4]
 800d37e:	f000 f83f 	bl	800d400 <_vfiprintf_r>
 800d382:	b002      	add	sp, #8
 800d384:	f85d eb04 	ldr.w	lr, [sp], #4
 800d388:	b003      	add	sp, #12
 800d38a:	4770      	bx	lr
 800d38c:	2000001c 	.word	0x2000001c

0800d390 <abort>:
 800d390:	2006      	movs	r0, #6
 800d392:	b508      	push	{r3, lr}
 800d394:	f000 fa08 	bl	800d7a8 <raise>
 800d398:	2001      	movs	r0, #1
 800d39a:	f7f4 fd5f 	bl	8001e5c <_exit>

0800d39e <_malloc_usable_size_r>:
 800d39e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3a2:	1f18      	subs	r0, r3, #4
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	bfbc      	itt	lt
 800d3a8:	580b      	ldrlt	r3, [r1, r0]
 800d3aa:	18c0      	addlt	r0, r0, r3
 800d3ac:	4770      	bx	lr

0800d3ae <__sfputc_r>:
 800d3ae:	6893      	ldr	r3, [r2, #8]
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	b410      	push	{r4}
 800d3b6:	6093      	str	r3, [r2, #8]
 800d3b8:	da08      	bge.n	800d3cc <__sfputc_r+0x1e>
 800d3ba:	6994      	ldr	r4, [r2, #24]
 800d3bc:	42a3      	cmp	r3, r4
 800d3be:	db01      	blt.n	800d3c4 <__sfputc_r+0x16>
 800d3c0:	290a      	cmp	r1, #10
 800d3c2:	d103      	bne.n	800d3cc <__sfputc_r+0x1e>
 800d3c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3c8:	f000 b932 	b.w	800d630 <__swbuf_r>
 800d3cc:	6813      	ldr	r3, [r2, #0]
 800d3ce:	1c58      	adds	r0, r3, #1
 800d3d0:	6010      	str	r0, [r2, #0]
 800d3d2:	4608      	mov	r0, r1
 800d3d4:	7019      	strb	r1, [r3, #0]
 800d3d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <__sfputs_r>:
 800d3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3de:	4606      	mov	r6, r0
 800d3e0:	460f      	mov	r7, r1
 800d3e2:	4614      	mov	r4, r2
 800d3e4:	18d5      	adds	r5, r2, r3
 800d3e6:	42ac      	cmp	r4, r5
 800d3e8:	d101      	bne.n	800d3ee <__sfputs_r+0x12>
 800d3ea:	2000      	movs	r0, #0
 800d3ec:	e007      	b.n	800d3fe <__sfputs_r+0x22>
 800d3ee:	463a      	mov	r2, r7
 800d3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3f4:	4630      	mov	r0, r6
 800d3f6:	f7ff ffda 	bl	800d3ae <__sfputc_r>
 800d3fa:	1c43      	adds	r3, r0, #1
 800d3fc:	d1f3      	bne.n	800d3e6 <__sfputs_r+0xa>
 800d3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d400 <_vfiprintf_r>:
 800d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d404:	460d      	mov	r5, r1
 800d406:	b09d      	sub	sp, #116	@ 0x74
 800d408:	4614      	mov	r4, r2
 800d40a:	4698      	mov	r8, r3
 800d40c:	4606      	mov	r6, r0
 800d40e:	b118      	cbz	r0, 800d418 <_vfiprintf_r+0x18>
 800d410:	6a03      	ldr	r3, [r0, #32]
 800d412:	b90b      	cbnz	r3, 800d418 <_vfiprintf_r+0x18>
 800d414:	f7fc f948 	bl	80096a8 <__sinit>
 800d418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d41a:	07d9      	lsls	r1, r3, #31
 800d41c:	d405      	bmi.n	800d42a <_vfiprintf_r+0x2a>
 800d41e:	89ab      	ldrh	r3, [r5, #12]
 800d420:	059a      	lsls	r2, r3, #22
 800d422:	d402      	bmi.n	800d42a <_vfiprintf_r+0x2a>
 800d424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d426:	f7fc faf6 	bl	8009a16 <__retarget_lock_acquire_recursive>
 800d42a:	89ab      	ldrh	r3, [r5, #12]
 800d42c:	071b      	lsls	r3, r3, #28
 800d42e:	d501      	bpl.n	800d434 <_vfiprintf_r+0x34>
 800d430:	692b      	ldr	r3, [r5, #16]
 800d432:	b99b      	cbnz	r3, 800d45c <_vfiprintf_r+0x5c>
 800d434:	4629      	mov	r1, r5
 800d436:	4630      	mov	r0, r6
 800d438:	f000 f938 	bl	800d6ac <__swsetup_r>
 800d43c:	b170      	cbz	r0, 800d45c <_vfiprintf_r+0x5c>
 800d43e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d440:	07dc      	lsls	r4, r3, #31
 800d442:	d504      	bpl.n	800d44e <_vfiprintf_r+0x4e>
 800d444:	f04f 30ff 	mov.w	r0, #4294967295
 800d448:	b01d      	add	sp, #116	@ 0x74
 800d44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44e:	89ab      	ldrh	r3, [r5, #12]
 800d450:	0598      	lsls	r0, r3, #22
 800d452:	d4f7      	bmi.n	800d444 <_vfiprintf_r+0x44>
 800d454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d456:	f7fc fadf 	bl	8009a18 <__retarget_lock_release_recursive>
 800d45a:	e7f3      	b.n	800d444 <_vfiprintf_r+0x44>
 800d45c:	2300      	movs	r3, #0
 800d45e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d462:	f04f 0901 	mov.w	r9, #1
 800d466:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d61c <_vfiprintf_r+0x21c>
 800d46a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d46c:	2320      	movs	r3, #32
 800d46e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d472:	2330      	movs	r3, #48	@ 0x30
 800d474:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d478:	4623      	mov	r3, r4
 800d47a:	469a      	mov	sl, r3
 800d47c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d480:	b10a      	cbz	r2, 800d486 <_vfiprintf_r+0x86>
 800d482:	2a25      	cmp	r2, #37	@ 0x25
 800d484:	d1f9      	bne.n	800d47a <_vfiprintf_r+0x7a>
 800d486:	ebba 0b04 	subs.w	fp, sl, r4
 800d48a:	d00b      	beq.n	800d4a4 <_vfiprintf_r+0xa4>
 800d48c:	465b      	mov	r3, fp
 800d48e:	4622      	mov	r2, r4
 800d490:	4629      	mov	r1, r5
 800d492:	4630      	mov	r0, r6
 800d494:	f7ff ffa2 	bl	800d3dc <__sfputs_r>
 800d498:	3001      	adds	r0, #1
 800d49a:	f000 80a7 	beq.w	800d5ec <_vfiprintf_r+0x1ec>
 800d49e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4a0:	445a      	add	r2, fp
 800d4a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f000 809f 	beq.w	800d5ec <_vfiprintf_r+0x1ec>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4b4:	f10a 0a01 	add.w	sl, sl, #1
 800d4b8:	9304      	str	r3, [sp, #16]
 800d4ba:	9307      	str	r3, [sp, #28]
 800d4bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4c6:	4654      	mov	r4, sl
 800d4c8:	2205      	movs	r2, #5
 800d4ca:	4854      	ldr	r0, [pc, #336]	@ (800d61c <_vfiprintf_r+0x21c>)
 800d4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4d0:	f7fc faa3 	bl	8009a1a <memchr>
 800d4d4:	9a04      	ldr	r2, [sp, #16]
 800d4d6:	b9d8      	cbnz	r0, 800d510 <_vfiprintf_r+0x110>
 800d4d8:	06d1      	lsls	r1, r2, #27
 800d4da:	bf44      	itt	mi
 800d4dc:	2320      	movmi	r3, #32
 800d4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4e2:	0713      	lsls	r3, r2, #28
 800d4e4:	bf44      	itt	mi
 800d4e6:	232b      	movmi	r3, #43	@ 0x2b
 800d4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4ec:	f89a 3000 	ldrb.w	r3, [sl]
 800d4f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4f2:	d015      	beq.n	800d520 <_vfiprintf_r+0x120>
 800d4f4:	9a07      	ldr	r2, [sp, #28]
 800d4f6:	4654      	mov	r4, sl
 800d4f8:	2000      	movs	r0, #0
 800d4fa:	f04f 0c0a 	mov.w	ip, #10
 800d4fe:	4621      	mov	r1, r4
 800d500:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d504:	3b30      	subs	r3, #48	@ 0x30
 800d506:	2b09      	cmp	r3, #9
 800d508:	d94b      	bls.n	800d5a2 <_vfiprintf_r+0x1a2>
 800d50a:	b1b0      	cbz	r0, 800d53a <_vfiprintf_r+0x13a>
 800d50c:	9207      	str	r2, [sp, #28]
 800d50e:	e014      	b.n	800d53a <_vfiprintf_r+0x13a>
 800d510:	eba0 0308 	sub.w	r3, r0, r8
 800d514:	46a2      	mov	sl, r4
 800d516:	fa09 f303 	lsl.w	r3, r9, r3
 800d51a:	4313      	orrs	r3, r2
 800d51c:	9304      	str	r3, [sp, #16]
 800d51e:	e7d2      	b.n	800d4c6 <_vfiprintf_r+0xc6>
 800d520:	9b03      	ldr	r3, [sp, #12]
 800d522:	1d19      	adds	r1, r3, #4
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	9103      	str	r1, [sp, #12]
 800d52a:	bfbb      	ittet	lt
 800d52c:	425b      	neglt	r3, r3
 800d52e:	f042 0202 	orrlt.w	r2, r2, #2
 800d532:	9307      	strge	r3, [sp, #28]
 800d534:	9307      	strlt	r3, [sp, #28]
 800d536:	bfb8      	it	lt
 800d538:	9204      	strlt	r2, [sp, #16]
 800d53a:	7823      	ldrb	r3, [r4, #0]
 800d53c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d53e:	d10a      	bne.n	800d556 <_vfiprintf_r+0x156>
 800d540:	7863      	ldrb	r3, [r4, #1]
 800d542:	2b2a      	cmp	r3, #42	@ 0x2a
 800d544:	d132      	bne.n	800d5ac <_vfiprintf_r+0x1ac>
 800d546:	9b03      	ldr	r3, [sp, #12]
 800d548:	3402      	adds	r4, #2
 800d54a:	1d1a      	adds	r2, r3, #4
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d552:	9203      	str	r2, [sp, #12]
 800d554:	9305      	str	r3, [sp, #20]
 800d556:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d62c <_vfiprintf_r+0x22c>
 800d55a:	2203      	movs	r2, #3
 800d55c:	7821      	ldrb	r1, [r4, #0]
 800d55e:	4650      	mov	r0, sl
 800d560:	f7fc fa5b 	bl	8009a1a <memchr>
 800d564:	b138      	cbz	r0, 800d576 <_vfiprintf_r+0x176>
 800d566:	eba0 000a 	sub.w	r0, r0, sl
 800d56a:	2240      	movs	r2, #64	@ 0x40
 800d56c:	9b04      	ldr	r3, [sp, #16]
 800d56e:	3401      	adds	r4, #1
 800d570:	4082      	lsls	r2, r0
 800d572:	4313      	orrs	r3, r2
 800d574:	9304      	str	r3, [sp, #16]
 800d576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d57a:	2206      	movs	r2, #6
 800d57c:	4828      	ldr	r0, [pc, #160]	@ (800d620 <_vfiprintf_r+0x220>)
 800d57e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d582:	f7fc fa4a 	bl	8009a1a <memchr>
 800d586:	2800      	cmp	r0, #0
 800d588:	d03f      	beq.n	800d60a <_vfiprintf_r+0x20a>
 800d58a:	4b26      	ldr	r3, [pc, #152]	@ (800d624 <_vfiprintf_r+0x224>)
 800d58c:	bb1b      	cbnz	r3, 800d5d6 <_vfiprintf_r+0x1d6>
 800d58e:	9b03      	ldr	r3, [sp, #12]
 800d590:	3307      	adds	r3, #7
 800d592:	f023 0307 	bic.w	r3, r3, #7
 800d596:	3308      	adds	r3, #8
 800d598:	9303      	str	r3, [sp, #12]
 800d59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d59c:	443b      	add	r3, r7
 800d59e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5a0:	e76a      	b.n	800d478 <_vfiprintf_r+0x78>
 800d5a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5a6:	460c      	mov	r4, r1
 800d5a8:	2001      	movs	r0, #1
 800d5aa:	e7a8      	b.n	800d4fe <_vfiprintf_r+0xfe>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	3401      	adds	r4, #1
 800d5b0:	f04f 0c0a 	mov.w	ip, #10
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	9305      	str	r3, [sp, #20]
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5be:	3a30      	subs	r2, #48	@ 0x30
 800d5c0:	2a09      	cmp	r2, #9
 800d5c2:	d903      	bls.n	800d5cc <_vfiprintf_r+0x1cc>
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d0c6      	beq.n	800d556 <_vfiprintf_r+0x156>
 800d5c8:	9105      	str	r1, [sp, #20]
 800d5ca:	e7c4      	b.n	800d556 <_vfiprintf_r+0x156>
 800d5cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5d0:	4604      	mov	r4, r0
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	e7f0      	b.n	800d5b8 <_vfiprintf_r+0x1b8>
 800d5d6:	ab03      	add	r3, sp, #12
 800d5d8:	462a      	mov	r2, r5
 800d5da:	a904      	add	r1, sp, #16
 800d5dc:	4630      	mov	r0, r6
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	4b11      	ldr	r3, [pc, #68]	@ (800d628 <_vfiprintf_r+0x228>)
 800d5e2:	f7fb fa0d 	bl	8008a00 <_printf_float>
 800d5e6:	4607      	mov	r7, r0
 800d5e8:	1c78      	adds	r0, r7, #1
 800d5ea:	d1d6      	bne.n	800d59a <_vfiprintf_r+0x19a>
 800d5ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5ee:	07d9      	lsls	r1, r3, #31
 800d5f0:	d405      	bmi.n	800d5fe <_vfiprintf_r+0x1fe>
 800d5f2:	89ab      	ldrh	r3, [r5, #12]
 800d5f4:	059a      	lsls	r2, r3, #22
 800d5f6:	d402      	bmi.n	800d5fe <_vfiprintf_r+0x1fe>
 800d5f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5fa:	f7fc fa0d 	bl	8009a18 <__retarget_lock_release_recursive>
 800d5fe:	89ab      	ldrh	r3, [r5, #12]
 800d600:	065b      	lsls	r3, r3, #25
 800d602:	f53f af1f 	bmi.w	800d444 <_vfiprintf_r+0x44>
 800d606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d608:	e71e      	b.n	800d448 <_vfiprintf_r+0x48>
 800d60a:	ab03      	add	r3, sp, #12
 800d60c:	462a      	mov	r2, r5
 800d60e:	a904      	add	r1, sp, #16
 800d610:	4630      	mov	r0, r6
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	4b04      	ldr	r3, [pc, #16]	@ (800d628 <_vfiprintf_r+0x228>)
 800d616:	f7fb fc8f 	bl	8008f38 <_printf_i>
 800d61a:	e7e4      	b.n	800d5e6 <_vfiprintf_r+0x1e6>
 800d61c:	0800db8b 	.word	0x0800db8b
 800d620:	0800db95 	.word	0x0800db95
 800d624:	08008a01 	.word	0x08008a01
 800d628:	0800d3dd 	.word	0x0800d3dd
 800d62c:	0800db91 	.word	0x0800db91

0800d630 <__swbuf_r>:
 800d630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d632:	460e      	mov	r6, r1
 800d634:	4614      	mov	r4, r2
 800d636:	4605      	mov	r5, r0
 800d638:	b118      	cbz	r0, 800d642 <__swbuf_r+0x12>
 800d63a:	6a03      	ldr	r3, [r0, #32]
 800d63c:	b90b      	cbnz	r3, 800d642 <__swbuf_r+0x12>
 800d63e:	f7fc f833 	bl	80096a8 <__sinit>
 800d642:	69a3      	ldr	r3, [r4, #24]
 800d644:	60a3      	str	r3, [r4, #8]
 800d646:	89a3      	ldrh	r3, [r4, #12]
 800d648:	071a      	lsls	r2, r3, #28
 800d64a:	d501      	bpl.n	800d650 <__swbuf_r+0x20>
 800d64c:	6923      	ldr	r3, [r4, #16]
 800d64e:	b943      	cbnz	r3, 800d662 <__swbuf_r+0x32>
 800d650:	4621      	mov	r1, r4
 800d652:	4628      	mov	r0, r5
 800d654:	f000 f82a 	bl	800d6ac <__swsetup_r>
 800d658:	b118      	cbz	r0, 800d662 <__swbuf_r+0x32>
 800d65a:	f04f 37ff 	mov.w	r7, #4294967295
 800d65e:	4638      	mov	r0, r7
 800d660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d662:	6823      	ldr	r3, [r4, #0]
 800d664:	b2f6      	uxtb	r6, r6
 800d666:	6922      	ldr	r2, [r4, #16]
 800d668:	4637      	mov	r7, r6
 800d66a:	1a98      	subs	r0, r3, r2
 800d66c:	6963      	ldr	r3, [r4, #20]
 800d66e:	4283      	cmp	r3, r0
 800d670:	dc05      	bgt.n	800d67e <__swbuf_r+0x4e>
 800d672:	4621      	mov	r1, r4
 800d674:	4628      	mov	r0, r5
 800d676:	f7ff f979 	bl	800c96c <_fflush_r>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d1ed      	bne.n	800d65a <__swbuf_r+0x2a>
 800d67e:	68a3      	ldr	r3, [r4, #8]
 800d680:	3b01      	subs	r3, #1
 800d682:	60a3      	str	r3, [r4, #8]
 800d684:	6823      	ldr	r3, [r4, #0]
 800d686:	1c5a      	adds	r2, r3, #1
 800d688:	6022      	str	r2, [r4, #0]
 800d68a:	701e      	strb	r6, [r3, #0]
 800d68c:	1c43      	adds	r3, r0, #1
 800d68e:	6962      	ldr	r2, [r4, #20]
 800d690:	429a      	cmp	r2, r3
 800d692:	d004      	beq.n	800d69e <__swbuf_r+0x6e>
 800d694:	89a3      	ldrh	r3, [r4, #12]
 800d696:	07db      	lsls	r3, r3, #31
 800d698:	d5e1      	bpl.n	800d65e <__swbuf_r+0x2e>
 800d69a:	2e0a      	cmp	r6, #10
 800d69c:	d1df      	bne.n	800d65e <__swbuf_r+0x2e>
 800d69e:	4621      	mov	r1, r4
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	f7ff f963 	bl	800c96c <_fflush_r>
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	d0d9      	beq.n	800d65e <__swbuf_r+0x2e>
 800d6aa:	e7d6      	b.n	800d65a <__swbuf_r+0x2a>

0800d6ac <__swsetup_r>:
 800d6ac:	b538      	push	{r3, r4, r5, lr}
 800d6ae:	4b29      	ldr	r3, [pc, #164]	@ (800d754 <__swsetup_r+0xa8>)
 800d6b0:	4605      	mov	r5, r0
 800d6b2:	460c      	mov	r4, r1
 800d6b4:	6818      	ldr	r0, [r3, #0]
 800d6b6:	b118      	cbz	r0, 800d6c0 <__swsetup_r+0x14>
 800d6b8:	6a03      	ldr	r3, [r0, #32]
 800d6ba:	b90b      	cbnz	r3, 800d6c0 <__swsetup_r+0x14>
 800d6bc:	f7fb fff4 	bl	80096a8 <__sinit>
 800d6c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6c4:	0719      	lsls	r1, r3, #28
 800d6c6:	d422      	bmi.n	800d70e <__swsetup_r+0x62>
 800d6c8:	06da      	lsls	r2, r3, #27
 800d6ca:	d407      	bmi.n	800d6dc <__swsetup_r+0x30>
 800d6cc:	2209      	movs	r2, #9
 800d6ce:	602a      	str	r2, [r5, #0]
 800d6d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d8:	81a3      	strh	r3, [r4, #12]
 800d6da:	e033      	b.n	800d744 <__swsetup_r+0x98>
 800d6dc:	0758      	lsls	r0, r3, #29
 800d6de:	d512      	bpl.n	800d706 <__swsetup_r+0x5a>
 800d6e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6e2:	b141      	cbz	r1, 800d6f6 <__swsetup_r+0x4a>
 800d6e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6e8:	4299      	cmp	r1, r3
 800d6ea:	d002      	beq.n	800d6f2 <__swsetup_r+0x46>
 800d6ec:	4628      	mov	r0, r5
 800d6ee:	f7fd f809 	bl	800a704 <_free_r>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6f6:	89a3      	ldrh	r3, [r4, #12]
 800d6f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d6fc:	81a3      	strh	r3, [r4, #12]
 800d6fe:	2300      	movs	r3, #0
 800d700:	6063      	str	r3, [r4, #4]
 800d702:	6923      	ldr	r3, [r4, #16]
 800d704:	6023      	str	r3, [r4, #0]
 800d706:	89a3      	ldrh	r3, [r4, #12]
 800d708:	f043 0308 	orr.w	r3, r3, #8
 800d70c:	81a3      	strh	r3, [r4, #12]
 800d70e:	6923      	ldr	r3, [r4, #16]
 800d710:	b94b      	cbnz	r3, 800d726 <__swsetup_r+0x7a>
 800d712:	89a3      	ldrh	r3, [r4, #12]
 800d714:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d71c:	d003      	beq.n	800d726 <__swsetup_r+0x7a>
 800d71e:	4621      	mov	r1, r4
 800d720:	4628      	mov	r0, r5
 800d722:	f000 f882 	bl	800d82a <__smakebuf_r>
 800d726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d72a:	f013 0201 	ands.w	r2, r3, #1
 800d72e:	d00a      	beq.n	800d746 <__swsetup_r+0x9a>
 800d730:	2200      	movs	r2, #0
 800d732:	60a2      	str	r2, [r4, #8]
 800d734:	6962      	ldr	r2, [r4, #20]
 800d736:	4252      	negs	r2, r2
 800d738:	61a2      	str	r2, [r4, #24]
 800d73a:	6922      	ldr	r2, [r4, #16]
 800d73c:	b942      	cbnz	r2, 800d750 <__swsetup_r+0xa4>
 800d73e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d742:	d1c5      	bne.n	800d6d0 <__swsetup_r+0x24>
 800d744:	bd38      	pop	{r3, r4, r5, pc}
 800d746:	0799      	lsls	r1, r3, #30
 800d748:	bf58      	it	pl
 800d74a:	6962      	ldrpl	r2, [r4, #20]
 800d74c:	60a2      	str	r2, [r4, #8]
 800d74e:	e7f4      	b.n	800d73a <__swsetup_r+0x8e>
 800d750:	2000      	movs	r0, #0
 800d752:	e7f7      	b.n	800d744 <__swsetup_r+0x98>
 800d754:	2000001c 	.word	0x2000001c

0800d758 <_raise_r>:
 800d758:	291f      	cmp	r1, #31
 800d75a:	b538      	push	{r3, r4, r5, lr}
 800d75c:	4605      	mov	r5, r0
 800d75e:	460c      	mov	r4, r1
 800d760:	d904      	bls.n	800d76c <_raise_r+0x14>
 800d762:	2316      	movs	r3, #22
 800d764:	6003      	str	r3, [r0, #0]
 800d766:	f04f 30ff 	mov.w	r0, #4294967295
 800d76a:	bd38      	pop	{r3, r4, r5, pc}
 800d76c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d76e:	b112      	cbz	r2, 800d776 <_raise_r+0x1e>
 800d770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d774:	b94b      	cbnz	r3, 800d78a <_raise_r+0x32>
 800d776:	4628      	mov	r0, r5
 800d778:	f000 f830 	bl	800d7dc <_getpid_r>
 800d77c:	4622      	mov	r2, r4
 800d77e:	4601      	mov	r1, r0
 800d780:	4628      	mov	r0, r5
 800d782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d786:	f000 b817 	b.w	800d7b8 <_kill_r>
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d00a      	beq.n	800d7a4 <_raise_r+0x4c>
 800d78e:	1c59      	adds	r1, r3, #1
 800d790:	d103      	bne.n	800d79a <_raise_r+0x42>
 800d792:	2316      	movs	r3, #22
 800d794:	6003      	str	r3, [r0, #0]
 800d796:	2001      	movs	r0, #1
 800d798:	e7e7      	b.n	800d76a <_raise_r+0x12>
 800d79a:	2100      	movs	r1, #0
 800d79c:	4620      	mov	r0, r4
 800d79e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d7a2:	4798      	blx	r3
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	e7e0      	b.n	800d76a <_raise_r+0x12>

0800d7a8 <raise>:
 800d7a8:	4b02      	ldr	r3, [pc, #8]	@ (800d7b4 <raise+0xc>)
 800d7aa:	4601      	mov	r1, r0
 800d7ac:	6818      	ldr	r0, [r3, #0]
 800d7ae:	f7ff bfd3 	b.w	800d758 <_raise_r>
 800d7b2:	bf00      	nop
 800d7b4:	2000001c 	.word	0x2000001c

0800d7b8 <_kill_r>:
 800d7b8:	b538      	push	{r3, r4, r5, lr}
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	4d06      	ldr	r5, [pc, #24]	@ (800d7d8 <_kill_r+0x20>)
 800d7be:	4604      	mov	r4, r0
 800d7c0:	4608      	mov	r0, r1
 800d7c2:	4611      	mov	r1, r2
 800d7c4:	602b      	str	r3, [r5, #0]
 800d7c6:	f7f4 fb39 	bl	8001e3c <_kill>
 800d7ca:	1c43      	adds	r3, r0, #1
 800d7cc:	d102      	bne.n	800d7d4 <_kill_r+0x1c>
 800d7ce:	682b      	ldr	r3, [r5, #0]
 800d7d0:	b103      	cbz	r3, 800d7d4 <_kill_r+0x1c>
 800d7d2:	6023      	str	r3, [r4, #0]
 800d7d4:	bd38      	pop	{r3, r4, r5, pc}
 800d7d6:	bf00      	nop
 800d7d8:	200004ec 	.word	0x200004ec

0800d7dc <_getpid_r>:
 800d7dc:	f7f4 bb26 	b.w	8001e2c <_getpid>

0800d7e0 <__swhatbuf_r>:
 800d7e0:	b570      	push	{r4, r5, r6, lr}
 800d7e2:	460c      	mov	r4, r1
 800d7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7e8:	b096      	sub	sp, #88	@ 0x58
 800d7ea:	4615      	mov	r5, r2
 800d7ec:	2900      	cmp	r1, #0
 800d7ee:	461e      	mov	r6, r3
 800d7f0:	da0c      	bge.n	800d80c <__swhatbuf_r+0x2c>
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	2100      	movs	r1, #0
 800d7f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d7fa:	bf14      	ite	ne
 800d7fc:	2340      	movne	r3, #64	@ 0x40
 800d7fe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d802:	2000      	movs	r0, #0
 800d804:	6031      	str	r1, [r6, #0]
 800d806:	602b      	str	r3, [r5, #0]
 800d808:	b016      	add	sp, #88	@ 0x58
 800d80a:	bd70      	pop	{r4, r5, r6, pc}
 800d80c:	466a      	mov	r2, sp
 800d80e:	f000 f849 	bl	800d8a4 <_fstat_r>
 800d812:	2800      	cmp	r0, #0
 800d814:	dbed      	blt.n	800d7f2 <__swhatbuf_r+0x12>
 800d816:	9901      	ldr	r1, [sp, #4]
 800d818:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d81c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d820:	4259      	negs	r1, r3
 800d822:	4159      	adcs	r1, r3
 800d824:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d828:	e7eb      	b.n	800d802 <__swhatbuf_r+0x22>

0800d82a <__smakebuf_r>:
 800d82a:	898b      	ldrh	r3, [r1, #12]
 800d82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d82e:	079d      	lsls	r5, r3, #30
 800d830:	4606      	mov	r6, r0
 800d832:	460c      	mov	r4, r1
 800d834:	d507      	bpl.n	800d846 <__smakebuf_r+0x1c>
 800d836:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d83a:	6023      	str	r3, [r4, #0]
 800d83c:	6123      	str	r3, [r4, #16]
 800d83e:	2301      	movs	r3, #1
 800d840:	6163      	str	r3, [r4, #20]
 800d842:	b003      	add	sp, #12
 800d844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d846:	ab01      	add	r3, sp, #4
 800d848:	466a      	mov	r2, sp
 800d84a:	f7ff ffc9 	bl	800d7e0 <__swhatbuf_r>
 800d84e:	9f00      	ldr	r7, [sp, #0]
 800d850:	4605      	mov	r5, r0
 800d852:	4630      	mov	r0, r6
 800d854:	4639      	mov	r1, r7
 800d856:	f7fc ffc9 	bl	800a7ec <_malloc_r>
 800d85a:	b948      	cbnz	r0, 800d870 <__smakebuf_r+0x46>
 800d85c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d860:	059a      	lsls	r2, r3, #22
 800d862:	d4ee      	bmi.n	800d842 <__smakebuf_r+0x18>
 800d864:	f023 0303 	bic.w	r3, r3, #3
 800d868:	f043 0302 	orr.w	r3, r3, #2
 800d86c:	81a3      	strh	r3, [r4, #12]
 800d86e:	e7e2      	b.n	800d836 <__smakebuf_r+0xc>
 800d870:	89a3      	ldrh	r3, [r4, #12]
 800d872:	6020      	str	r0, [r4, #0]
 800d874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d878:	81a3      	strh	r3, [r4, #12]
 800d87a:	9b01      	ldr	r3, [sp, #4]
 800d87c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d880:	b15b      	cbz	r3, 800d89a <__smakebuf_r+0x70>
 800d882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d886:	4630      	mov	r0, r6
 800d888:	f000 f81e 	bl	800d8c8 <_isatty_r>
 800d88c:	b128      	cbz	r0, 800d89a <__smakebuf_r+0x70>
 800d88e:	89a3      	ldrh	r3, [r4, #12]
 800d890:	f023 0303 	bic.w	r3, r3, #3
 800d894:	f043 0301 	orr.w	r3, r3, #1
 800d898:	81a3      	strh	r3, [r4, #12]
 800d89a:	89a3      	ldrh	r3, [r4, #12]
 800d89c:	431d      	orrs	r5, r3
 800d89e:	81a5      	strh	r5, [r4, #12]
 800d8a0:	e7cf      	b.n	800d842 <__smakebuf_r+0x18>
	...

0800d8a4 <_fstat_r>:
 800d8a4:	b538      	push	{r3, r4, r5, lr}
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	4d06      	ldr	r5, [pc, #24]	@ (800d8c4 <_fstat_r+0x20>)
 800d8aa:	4604      	mov	r4, r0
 800d8ac:	4608      	mov	r0, r1
 800d8ae:	4611      	mov	r1, r2
 800d8b0:	602b      	str	r3, [r5, #0]
 800d8b2:	f7f4 fb23 	bl	8001efc <_fstat>
 800d8b6:	1c43      	adds	r3, r0, #1
 800d8b8:	d102      	bne.n	800d8c0 <_fstat_r+0x1c>
 800d8ba:	682b      	ldr	r3, [r5, #0]
 800d8bc:	b103      	cbz	r3, 800d8c0 <_fstat_r+0x1c>
 800d8be:	6023      	str	r3, [r4, #0]
 800d8c0:	bd38      	pop	{r3, r4, r5, pc}
 800d8c2:	bf00      	nop
 800d8c4:	200004ec 	.word	0x200004ec

0800d8c8 <_isatty_r>:
 800d8c8:	b538      	push	{r3, r4, r5, lr}
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	4d05      	ldr	r5, [pc, #20]	@ (800d8e4 <_isatty_r+0x1c>)
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	4608      	mov	r0, r1
 800d8d2:	602b      	str	r3, [r5, #0]
 800d8d4:	f7f4 fb22 	bl	8001f1c <_isatty>
 800d8d8:	1c43      	adds	r3, r0, #1
 800d8da:	d102      	bne.n	800d8e2 <_isatty_r+0x1a>
 800d8dc:	682b      	ldr	r3, [r5, #0]
 800d8de:	b103      	cbz	r3, 800d8e2 <_isatty_r+0x1a>
 800d8e0:	6023      	str	r3, [r4, #0]
 800d8e2:	bd38      	pop	{r3, r4, r5, pc}
 800d8e4:	200004ec 	.word	0x200004ec

0800d8e8 <_init>:
 800d8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ea:	bf00      	nop
 800d8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ee:	bc08      	pop	{r3}
 800d8f0:	469e      	mov	lr, r3
 800d8f2:	4770      	bx	lr

0800d8f4 <_fini>:
 800d8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f6:	bf00      	nop
 800d8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8fa:	bc08      	pop	{r3}
 800d8fc:	469e      	mov	lr, r3
 800d8fe:	4770      	bx	lr
