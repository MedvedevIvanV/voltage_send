
dez_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cca0  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800ce98  0800ce98  0000de98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3fc  0800d3fc  0000f1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d3fc  0800d3fc  0000e3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d404  0800d404  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d404  0800d404  0000e404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d408  0800d408  0000e408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d40c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001d4  0800d5e0  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  0800d5e0  0000f4d0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001392c  00000000  00000000  0000f20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280f  00000000  00000000  00022b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00025348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c34  00000000  00000000  00026328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8b6  00000000  00000000  00026f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012902  00000000  00000000  00051812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112085  00000000  00000000  00064114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00176199  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b40  00000000  00000000  001761dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0017bd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001d4 	.word	0x200001d4
 8000214:	00000000 	.word	0x00000000
 8000218:	0800ce80 	.word	0x0800ce80

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001d8 	.word	0x200001d8
 8000234:	0800ce80 	.word	0x0800ce80

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	@ 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2iz>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b28:	d215      	bcs.n	8000b56 <__aeabi_d2iz+0x36>
 8000b2a:	d511      	bpl.n	8000b50 <__aeabi_d2iz+0x30>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d912      	bls.n	8000b5c <__aeabi_d2iz+0x3c>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d105      	bne.n	8000b68 <__aeabi_d2iz+0x48>
 8000b5c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	bf08      	it	eq
 8000b62:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_d2uiz>:
 8000b70:	004a      	lsls	r2, r1, #1
 8000b72:	d211      	bcs.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b78:	d211      	bcs.n	8000b9e <__aeabi_d2uiz+0x2e>
 8000b7a:	d50d      	bpl.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d40e      	bmi.n	8000ba4 <__aeabi_d2uiz+0x34>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_d2uiz+0x3a>
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b9e6 	b.w	8001034 <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f83c 	bl	8000cec <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_d2lz>:
 8000c80:	b538      	push	{r3, r4, r5, lr}
 8000c82:	2200      	movs	r2, #0
 8000c84:	2300      	movs	r3, #0
 8000c86:	4604      	mov	r4, r0
 8000c88:	460d      	mov	r5, r1
 8000c8a:	f7ff ff0b 	bl	8000aa4 <__aeabi_dcmplt>
 8000c8e:	b928      	cbnz	r0, 8000c9c <__aeabi_d2lz+0x1c>
 8000c90:	4620      	mov	r0, r4
 8000c92:	4629      	mov	r1, r5
 8000c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c98:	f000 b80a 	b.w	8000cb0 <__aeabi_d2ulz>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ca2:	f000 f805 	bl	8000cb0 <__aeabi_d2ulz>
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	bd38      	pop	{r3, r4, r5, pc}
 8000cae:	bf00      	nop

08000cb0 <__aeabi_d2ulz>:
 8000cb0:	b5d0      	push	{r4, r6, r7, lr}
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <__aeabi_d2ulz+0x34>)
 8000cb6:	4606      	mov	r6, r0
 8000cb8:	460f      	mov	r7, r1
 8000cba:	f7ff fc81 	bl	80005c0 <__aeabi_dmul>
 8000cbe:	f7ff ff57 	bl	8000b70 <__aeabi_d2uiz>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	f7ff fc02 	bl	80004cc <__aeabi_ui2d>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <__aeabi_d2ulz+0x38>)
 8000ccc:	f7ff fc78 	bl	80005c0 <__aeabi_dmul>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	4639      	mov	r1, r7
 8000cd8:	f7ff faba 	bl	8000250 <__aeabi_dsub>
 8000cdc:	f7ff ff48 	bl	8000b70 <__aeabi_d2uiz>
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce4:	3df00000 	.word	0x3df00000
 8000ce8:	41f00000 	.word	0x41f00000

08000cec <__udivmoddi4>:
 8000cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cf0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000cf2:	4688      	mov	r8, r1
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	468e      	mov	lr, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d14a      	bne.n	8000d92 <__udivmoddi4+0xa6>
 8000cfc:	428a      	cmp	r2, r1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	d95f      	bls.n	8000dc2 <__udivmoddi4+0xd6>
 8000d02:	fab2 f682 	clz	r6, r2
 8000d06:	b14e      	cbz	r6, 8000d1c <__udivmoddi4+0x30>
 8000d08:	f1c6 0320 	rsb	r3, r6, #32
 8000d0c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d10:	40b7      	lsls	r7, r6
 8000d12:	40b4      	lsls	r4, r6
 8000d14:	fa20 f303 	lsr.w	r3, r0, r3
 8000d18:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d1c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d20:	fa1f fc87 	uxth.w	ip, r7
 8000d24:	0c23      	lsrs	r3, r4, #16
 8000d26:	fbbe f1f8 	udiv	r1, lr, r8
 8000d2a:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d32:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x5e>
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d40:	d202      	bcs.n	8000d48 <__udivmoddi4+0x5c>
 8000d42:	429a      	cmp	r2, r3
 8000d44:	f200 8154 	bhi.w	8000ff0 <__udivmoddi4+0x304>
 8000d48:	4601      	mov	r1, r0
 8000d4a:	1a9b      	subs	r3, r3, r2
 8000d4c:	b2a2      	uxth	r2, r4
 8000d4e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d52:	fb08 3310 	mls	r3, r8, r0, r3
 8000d56:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000d5e:	4594      	cmp	ip, r2
 8000d60:	d90b      	bls.n	8000d7a <__udivmoddi4+0x8e>
 8000d62:	18ba      	adds	r2, r7, r2
 8000d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d68:	bf2c      	ite	cs
 8000d6a:	2401      	movcs	r4, #1
 8000d6c:	2400      	movcc	r4, #0
 8000d6e:	4594      	cmp	ip, r2
 8000d70:	d902      	bls.n	8000d78 <__udivmoddi4+0x8c>
 8000d72:	2c00      	cmp	r4, #0
 8000d74:	f000 813f 	beq.w	8000ff6 <__udivmoddi4+0x30a>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7e:	eba2 020c 	sub.w	r2, r2, ip
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa2>
 8000d86:	40f2      	lsrs	r2, r6
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e9c5 2300 	strd	r2, r3, [r5]
 8000d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xb6>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb0>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d14e      	bne.n	8000e48 <__udivmoddi4+0x15c>
 8000daa:	4543      	cmp	r3, r8
 8000dac:	f0c0 8112 	bcc.w	8000fd4 <__udivmoddi4+0x2e8>
 8000db0:	4282      	cmp	r2, r0
 8000db2:	f240 810f 	bls.w	8000fd4 <__udivmoddi4+0x2e8>
 8000db6:	4608      	mov	r0, r1
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d0e8      	beq.n	8000d8e <__udivmoddi4+0xa2>
 8000dbc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dc0:	e7e5      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	f000 80ac 	beq.w	8000f20 <__udivmoddi4+0x234>
 8000dc8:	fab2 f682 	clz	r6, r2
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	f040 80bb 	bne.w	8000f48 <__udivmoddi4+0x25c>
 8000dd2:	1a8b      	subs	r3, r1, r2
 8000dd4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000dd8:	b2bc      	uxth	r4, r7
 8000dda:	2101      	movs	r1, #1
 8000ddc:	0c02      	lsrs	r2, r0, #16
 8000dde:	b280      	uxth	r0, r0
 8000de0:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000de8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000dec:	fb04 f20c 	mul.w	r2, r4, ip
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d90e      	bls.n	8000e12 <__udivmoddi4+0x126>
 8000df4:	18fb      	adds	r3, r7, r3
 8000df6:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dfa:	bf2c      	ite	cs
 8000dfc:	f04f 0901 	movcs.w	r9, #1
 8000e00:	f04f 0900 	movcc.w	r9, #0
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d903      	bls.n	8000e10 <__udivmoddi4+0x124>
 8000e08:	f1b9 0f00 	cmp.w	r9, #0
 8000e0c:	f000 80ec 	beq.w	8000fe8 <__udivmoddi4+0x2fc>
 8000e10:	46c4      	mov	ip, r8
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e1c:	fb04 f408 	mul.w	r4, r4, r8
 8000e20:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e24:	4294      	cmp	r4, r2
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x154>
 8000e28:	18ba      	adds	r2, r7, r2
 8000e2a:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e2e:	bf2c      	ite	cs
 8000e30:	2001      	movcs	r0, #1
 8000e32:	2000      	movcc	r0, #0
 8000e34:	4294      	cmp	r4, r2
 8000e36:	d902      	bls.n	8000e3e <__udivmoddi4+0x152>
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	f000 80d1 	beq.w	8000fe0 <__udivmoddi4+0x2f4>
 8000e3e:	4698      	mov	r8, r3
 8000e40:	1b12      	subs	r2, r2, r4
 8000e42:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e46:	e79d      	b.n	8000d84 <__udivmoddi4+0x98>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa08 f401 	lsl.w	r4, r8, r1
 8000e52:	fa00 f901 	lsl.w	r9, r0, r1
 8000e56:	fa22 f706 	lsr.w	r7, r2, r6
 8000e5a:	fa28 f806 	lsr.w	r8, r8, r6
 8000e5e:	408a      	lsls	r2, r1
 8000e60:	431f      	orrs	r7, r3
 8000e62:	fa20 f306 	lsr.w	r3, r0, r6
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	4323      	orrs	r3, r4
 8000e6a:	fa1f fc87 	uxth.w	ip, r7
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fbb8 fef0 	udiv	lr, r8, r0
 8000e74:	fb00 881e 	mls	r8, r0, lr, r8
 8000e78:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000e7c:	fb0e f80c 	mul.w	r8, lr, ip
 8000e80:	45a0      	cmp	r8, r4
 8000e82:	d90e      	bls.n	8000ea2 <__udivmoddi4+0x1b6>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8a:	bf2c      	ite	cs
 8000e8c:	f04f 0b01 	movcs.w	fp, #1
 8000e90:	f04f 0b00 	movcc.w	fp, #0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d903      	bls.n	8000ea0 <__udivmoddi4+0x1b4>
 8000e98:	f1bb 0f00 	cmp.w	fp, #0
 8000e9c:	f000 80b8 	beq.w	8001010 <__udivmoddi4+0x324>
 8000ea0:	46d6      	mov	lr, sl
 8000ea2:	eba4 0408 	sub.w	r4, r4, r8
 8000ea6:	fa1f f883 	uxth.w	r8, r3
 8000eaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eae:	fb00 4413 	mls	r4, r0, r3, r4
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000eba:	45a4      	cmp	ip, r4
 8000ebc:	d90e      	bls.n	8000edc <__udivmoddi4+0x1f0>
 8000ebe:	193c      	adds	r4, r7, r4
 8000ec0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec4:	bf2c      	ite	cs
 8000ec6:	f04f 0801 	movcs.w	r8, #1
 8000eca:	f04f 0800 	movcc.w	r8, #0
 8000ece:	45a4      	cmp	ip, r4
 8000ed0:	d903      	bls.n	8000eda <__udivmoddi4+0x1ee>
 8000ed2:	f1b8 0f00 	cmp.w	r8, #0
 8000ed6:	f000 809f 	beq.w	8001018 <__udivmoddi4+0x32c>
 8000eda:	4603      	mov	r3, r0
 8000edc:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ee0:	eba4 040c 	sub.w	r4, r4, ip
 8000ee4:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ee8:	4564      	cmp	r4, ip
 8000eea:	4673      	mov	r3, lr
 8000eec:	46e0      	mov	r8, ip
 8000eee:	d302      	bcc.n	8000ef6 <__udivmoddi4+0x20a>
 8000ef0:	d107      	bne.n	8000f02 <__udivmoddi4+0x216>
 8000ef2:	45f1      	cmp	r9, lr
 8000ef4:	d205      	bcs.n	8000f02 <__udivmoddi4+0x216>
 8000ef6:	ebbe 0302 	subs.w	r3, lr, r2
 8000efa:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000efe:	3801      	subs	r0, #1
 8000f00:	46e0      	mov	r8, ip
 8000f02:	b15d      	cbz	r5, 8000f1c <__udivmoddi4+0x230>
 8000f04:	ebb9 0203 	subs.w	r2, r9, r3
 8000f08:	eb64 0408 	sbc.w	r4, r4, r8
 8000f0c:	fa04 f606 	lsl.w	r6, r4, r6
 8000f10:	fa22 f301 	lsr.w	r3, r2, r1
 8000f14:	40cc      	lsrs	r4, r1
 8000f16:	431e      	orrs	r6, r3
 8000f18:	e9c5 6400 	strd	r6, r4, [r5]
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	e736      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000f20:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f24:	0c01      	lsrs	r1, r0, #16
 8000f26:	4614      	mov	r4, r2
 8000f28:	b280      	uxth	r0, r0
 8000f2a:	4696      	mov	lr, r2
 8000f2c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f30:	2620      	movs	r6, #32
 8000f32:	4690      	mov	r8, r2
 8000f34:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f38:	4610      	mov	r0, r2
 8000f3a:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f3e:	eba3 0308 	sub.w	r3, r3, r8
 8000f42:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f46:	e74b      	b.n	8000de0 <__udivmoddi4+0xf4>
 8000f48:	40b7      	lsls	r7, r6
 8000f4a:	f1c6 0320 	rsb	r3, r6, #32
 8000f4e:	fa01 f206 	lsl.w	r2, r1, r6
 8000f52:	fa21 f803 	lsr.w	r8, r1, r3
 8000f56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f5a:	fa20 f303 	lsr.w	r3, r0, r3
 8000f5e:	b2bc      	uxth	r4, r7
 8000f60:	40b0      	lsls	r0, r6
 8000f62:	4313      	orrs	r3, r2
 8000f64:	0c02      	lsrs	r2, r0, #16
 8000f66:	0c19      	lsrs	r1, r3, #16
 8000f68:	b280      	uxth	r0, r0
 8000f6a:	fbb8 f9fe 	udiv	r9, r8, lr
 8000f6e:	fb0e 8819 	mls	r8, lr, r9, r8
 8000f72:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	4588      	cmp	r8, r1
 8000f7c:	d951      	bls.n	8001022 <__udivmoddi4+0x336>
 8000f7e:	1879      	adds	r1, r7, r1
 8000f80:	f109 3cff 	add.w	ip, r9, #4294967295
 8000f84:	bf2c      	ite	cs
 8000f86:	f04f 0a01 	movcs.w	sl, #1
 8000f8a:	f04f 0a00 	movcc.w	sl, #0
 8000f8e:	4588      	cmp	r8, r1
 8000f90:	d902      	bls.n	8000f98 <__udivmoddi4+0x2ac>
 8000f92:	f1ba 0f00 	cmp.w	sl, #0
 8000f96:	d031      	beq.n	8000ffc <__udivmoddi4+0x310>
 8000f98:	eba1 0108 	sub.w	r1, r1, r8
 8000f9c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa0:	fb09 f804 	mul.w	r8, r9, r4
 8000fa4:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fae:	4543      	cmp	r3, r8
 8000fb0:	d235      	bcs.n	800101e <__udivmoddi4+0x332>
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fb8:	bf2c      	ite	cs
 8000fba:	f04f 0a01 	movcs.w	sl, #1
 8000fbe:	f04f 0a00 	movcc.w	sl, #0
 8000fc2:	4543      	cmp	r3, r8
 8000fc4:	d2bb      	bcs.n	8000f3e <__udivmoddi4+0x252>
 8000fc6:	f1ba 0f00 	cmp.w	sl, #0
 8000fca:	d1b8      	bne.n	8000f3e <__udivmoddi4+0x252>
 8000fcc:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd0:	443b      	add	r3, r7
 8000fd2:	e7b4      	b.n	8000f3e <__udivmoddi4+0x252>
 8000fd4:	1a84      	subs	r4, r0, r2
 8000fd6:	eb68 0203 	sbc.w	r2, r8, r3
 8000fda:	2001      	movs	r0, #1
 8000fdc:	4696      	mov	lr, r2
 8000fde:	e6eb      	b.n	8000db8 <__udivmoddi4+0xcc>
 8000fe0:	443a      	add	r2, r7
 8000fe2:	f1a8 0802 	sub.w	r8, r8, #2
 8000fe6:	e72b      	b.n	8000e40 <__udivmoddi4+0x154>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	443b      	add	r3, r7
 8000fee:	e710      	b.n	8000e12 <__udivmoddi4+0x126>
 8000ff0:	3902      	subs	r1, #2
 8000ff2:	443b      	add	r3, r7
 8000ff4:	e6a9      	b.n	8000d4a <__udivmoddi4+0x5e>
 8000ff6:	443a      	add	r2, r7
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e6be      	b.n	8000d7a <__udivmoddi4+0x8e>
 8000ffc:	eba7 0808 	sub.w	r8, r7, r8
 8001000:	f1a9 0c02 	sub.w	ip, r9, #2
 8001004:	4441      	add	r1, r8
 8001006:	fbb1 f9fe 	udiv	r9, r1, lr
 800100a:	fb09 f804 	mul.w	r8, r9, r4
 800100e:	e7c9      	b.n	8000fa4 <__udivmoddi4+0x2b8>
 8001010:	f1ae 0e02 	sub.w	lr, lr, #2
 8001014:	443c      	add	r4, r7
 8001016:	e744      	b.n	8000ea2 <__udivmoddi4+0x1b6>
 8001018:	3b02      	subs	r3, #2
 800101a:	443c      	add	r4, r7
 800101c:	e75e      	b.n	8000edc <__udivmoddi4+0x1f0>
 800101e:	4649      	mov	r1, r9
 8001020:	e78d      	b.n	8000f3e <__udivmoddi4+0x252>
 8001022:	eba1 0108 	sub.w	r1, r1, r8
 8001026:	46cc      	mov	ip, r9
 8001028:	fbb1 f9fe 	udiv	r9, r1, lr
 800102c:	fb09 f804 	mul.w	r8, r9, r4
 8001030:	e7b8      	b.n	8000fa4 <__udivmoddi4+0x2b8>
 8001032:	bf00      	nop

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <read_voltage>:

/**
  * @brief Read voltage from ADC
  */
static float read_voltage(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
    float voltage = 0.0f;
 8001042:	f04f 0300 	mov.w	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	615a      	str	r2, [r3, #20]

    // Конфигурация канала ADC
    sConfig.Channel = ADC_CHANNEL_5;
 8001058:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <read_voltage+0xa4>)
 800105a:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800105c:	2306      	movs	r3, #6
 800105e:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001064:	237f      	movs	r3, #127	@ 0x7f
 8001066:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001068:	2304      	movs	r3, #4
 800106a:	613b      	str	r3, [r7, #16]
    sConfig.Offset = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	4619      	mov	r1, r3
 8001074:	481a      	ldr	r0, [pc, #104]	@ (80010e0 <read_voltage+0xa8>)
 8001076:	f001 fd15 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <read_voltage+0x4e>
    {
        return 0.0f;
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e023      	b.n	80010ce <read_voltage+0x96>
    }

    // Запуск преобразования ADC
    if (HAL_ADC_Start(&hadc1) == HAL_OK)
 8001086:	4816      	ldr	r0, [pc, #88]	@ (80010e0 <read_voltage+0xa8>)
 8001088:	f001 fb38 	bl	80026fc <HAL_ADC_Start>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d11c      	bne.n	80010cc <read_voltage+0x94>
    {
        // Ожидание завершения преобразования
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001092:	2164      	movs	r1, #100	@ 0x64
 8001094:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <read_voltage+0xa8>)
 8001096:	f001 fc1f 	bl	80028d8 <HAL_ADC_PollForConversion>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d112      	bne.n	80010c6 <read_voltage+0x8e>
        {
            adcValue = HAL_ADC_GetValue(&hadc1);
 80010a0:	480f      	ldr	r0, [pc, #60]	@ (80010e0 <read_voltage+0xa8>)
 80010a2:	f001 fcf1 	bl	8002a88 <HAL_ADC_GetValue>
 80010a6:	61b8      	str	r0, [r7, #24]
            voltage = (float)adcValue * 3.3f / 4095.0f;
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80010e4 <read_voltage+0xac>
 80010b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010ba:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80010e8 <read_voltage+0xb0>
 80010be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        HAL_ADC_Stop(&hadc1);
 80010c6:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <read_voltage+0xa8>)
 80010c8:	f001 fbd2 	bl	8002870 <HAL_ADC_Stop>
    }

    return voltage;
 80010cc:	69fb      	ldr	r3, [r7, #28]
}
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eeb0 0a67 	vmov.f32	s0, s15
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	14f00020 	.word	0x14f00020
 80010e0:	200001f0 	.word	0x200001f0
 80010e4:	40533333 	.word	0x40533333
 80010e8:	457ff000 	.word	0x457ff000

080010ec <read_temperature>:

/**
  * @brief Read temperature from internal sensor
  */
static float read_temperature(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
    float temperature = 0.0f;
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
    ADC_ChannelConfTypeDef sConfig = {0};
 80010fc:	463b      	mov	r3, r7
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	615a      	str	r2, [r3, #20]

    // Конфигурация канала температурного датчика
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800110c:	4b33      	ldr	r3, [pc, #204]	@ (80011dc <read_temperature+0xf0>)
 800110e:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001110:	2306      	movs	r3, #6
 8001112:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001114:	2307      	movs	r3, #7
 8001116:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001118:	237f      	movs	r3, #127	@ 0x7f
 800111a:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111c:	2304      	movs	r3, #4
 800111e:	613b      	str	r3, [r7, #16]
    sConfig.Offset = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	4619      	mov	r1, r3
 8001128:	482d      	ldr	r0, [pc, #180]	@ (80011e0 <read_temperature+0xf4>)
 800112a:	f001 fcbb 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <read_temperature+0x4e>
    {
        return 0.0f;
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	e048      	b.n	80011cc <read_temperature+0xe0>
    }

    // Калибровка ADC
    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800113a:	217f      	movs	r1, #127	@ 0x7f
 800113c:	4828      	ldr	r0, [pc, #160]	@ (80011e0 <read_temperature+0xf4>)
 800113e:	f002 fa8f 	bl	8003660 <HAL_ADCEx_Calibration_Start>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <read_temperature+0x62>
    {
        return 0.0f;
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	e03e      	b.n	80011cc <read_temperature+0xe0>
    }

    // Запуск преобразования ADC
    if (HAL_ADC_Start(&hadc1) == HAL_OK)
 800114e:	4824      	ldr	r0, [pc, #144]	@ (80011e0 <read_temperature+0xf4>)
 8001150:	f001 fad4 	bl	80026fc <HAL_ADC_Start>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d137      	bne.n	80011ca <read_temperature+0xde>
    {
        // Ожидание завершения преобразования
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 800115a:	2164      	movs	r1, #100	@ 0x64
 800115c:	4820      	ldr	r0, [pc, #128]	@ (80011e0 <read_temperature+0xf4>)
 800115e:	f001 fbbb 	bl	80028d8 <HAL_ADC_PollForConversion>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d12d      	bne.n	80011c4 <read_temperature+0xd8>
        {
            adcValue = HAL_ADC_GetValue(&hadc1);
 8001168:	481d      	ldr	r0, [pc, #116]	@ (80011e0 <read_temperature+0xf4>)
 800116a:	f001 fc8d 	bl	8002a88 <HAL_ADC_GetValue>
 800116e:	6238      	str	r0, [r7, #32]

            // Калибровочные значения для STM32L5
            uint32_t raw_ts_cal1 = *((uint16_t*)0x0BFA05A8); // Калибровка при 30°C
 8001170:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <read_temperature+0xf8>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	61fb      	str	r3, [r7, #28]
            uint32_t raw_ts_cal2 = *((uint16_t*)0x0BFA05CA); // Калибровка при 130°C
 8001176:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <read_temperature+0xfc>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	61bb      	str	r3, [r7, #24]

            // Расчет температуры по калибровочным значениям
            temperature = 30.0f + ((float)adcValue - (float)raw_ts_cal1) *
 800117c:	6a3b      	ldr	r3, [r7, #32]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001190:	ee37 7a67 	vsub.f32	s14, s14, s15
                         (100.0f / ((float)raw_ts_cal2 - (float)raw_ts_cal1));
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80011ac:	ed9f 6a0f 	vldr	s12, [pc, #60]	@ 80011ec <read_temperature+0x100>
 80011b0:	eec6 7a26 	vdiv.f32	s15, s12, s13
            temperature = 30.0f + ((float)adcValue - (float)raw_ts_cal1) *
 80011b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80011bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        }
        HAL_ADC_Stop(&hadc1);
 80011c4:	4806      	ldr	r0, [pc, #24]	@ (80011e0 <read_temperature+0xf4>)
 80011c6:	f001 fb53 	bl	8002870 <HAL_ADC_Stop>
    }

    return temperature;
 80011ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eeb0 0a67 	vmov.f32	s0, s15
 80011d4:	3728      	adds	r7, #40	@ 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	c7520000 	.word	0xc7520000
 80011e0:	200001f0 	.word	0x200001f0
 80011e4:	0bfa05a8 	.word	0x0bfa05a8
 80011e8:	0bfa05ca 	.word	0x0bfa05ca
 80011ec:	42c80000 	.word	0x42c80000

080011f0 <HAL_UART_RxCpltCallback>:

/**
  * @brief UART receive complete callback
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    if(huart->Instance == LPUART1) {
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a19      	ldr	r2, [pc, #100]	@ (8001264 <HAL_UART_RxCpltCallback+0x74>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d12c      	bne.n	800125c <HAL_UART_RxCpltCallback+0x6c>
        uart_last_rx_time = HAL_GetTick();
 8001202:	f000 febb 	bl	8001f7c <HAL_GetTick>
 8001206:	4603      	mov	r3, r0
 8001208:	4a17      	ldr	r2, [pc, #92]	@ (8001268 <HAL_UART_RxCpltCallback+0x78>)
 800120a:	6013      	str	r3, [r2, #0]

        if(uart_rx_buf[uart_rx_pos] == '\n' || uart_rx_pos >= sizeof(uart_rx_buf)-1) {
 800120c:	4b17      	ldr	r3, [pc, #92]	@ (800126c <HAL_UART_RxCpltCallback+0x7c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b17      	ldr	r3, [pc, #92]	@ (8001270 <HAL_UART_RxCpltCallback+0x80>)
 8001214:	5c9b      	ldrb	r3, [r3, r2]
 8001216:	2b0a      	cmp	r3, #10
 8001218:	d003      	beq.n	8001222 <HAL_UART_RxCpltCallback+0x32>
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HAL_UART_RxCpltCallback+0x7c>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001220:	d90c      	bls.n	800123c <HAL_UART_RxCpltCallback+0x4c>
            uart_cmd_ready = 1;
 8001222:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <HAL_UART_RxCpltCallback+0x84>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
            uart_rx_buf[uart_rx_pos] = '\0';
 8001228:	4b10      	ldr	r3, [pc, #64]	@ (800126c <HAL_UART_RxCpltCallback+0x7c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <HAL_UART_RxCpltCallback+0x80>)
 8001230:	2100      	movs	r1, #0
 8001232:	5499      	strb	r1, [r3, r2]
            HAL_UART_AbortReceive_IT(&hlpuart1);
 8001234:	4810      	ldr	r0, [pc, #64]	@ (8001278 <HAL_UART_RxCpltCallback+0x88>)
 8001236:	f004 fd0f 	bl	8005c58 <HAL_UART_AbortReceive_IT>
        } else {
            uart_rx_pos++;
            HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
        }
    }
}
 800123a:	e00f      	b.n	800125c <HAL_UART_RxCpltCallback+0x6c>
            uart_rx_pos++;
 800123c:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <HAL_UART_RxCpltCallback+0x7c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b09      	ldr	r3, [pc, #36]	@ (800126c <HAL_UART_RxCpltCallback+0x7c>)
 8001246:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001248:	4b08      	ldr	r3, [pc, #32]	@ (800126c <HAL_UART_RxCpltCallback+0x7c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <HAL_UART_RxCpltCallback+0x80>)
 8001250:	4413      	add	r3, r2
 8001252:	2201      	movs	r2, #1
 8001254:	4619      	mov	r1, r3
 8001256:	4808      	ldr	r0, [pc, #32]	@ (8001278 <HAL_UART_RxCpltCallback+0x88>)
 8001258:	f004 fcb2 	bl	8005bc0 <HAL_UART_Receive_IT>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40008000 	.word	0x40008000
 8001268:	20000370 	.word	0x20000370
 800126c:	2000036c 	.word	0x2000036c
 8001270:	200002ec 	.word	0x200002ec
 8001274:	2000036d 	.word	0x2000036d
 8001278:	20000258 	.word	0x20000258

0800127c <process_uart_command>:

/**
  * @brief Process UART command from main MCU
  */
static void process_uart_command(uint8_t* data, uint8_t len)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	@ 0x38
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
    char* date_ptr = strstr((char*)data, "DATE:");
 8001288:	4936      	ldr	r1, [pc, #216]	@ (8001364 <process_uart_command+0xe8>)
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f007 fdf2 	bl	8008e74 <strstr>
 8001290:	6378      	str	r0, [r7, #52]	@ 0x34
    char* time_ptr = strstr((char*)data, ";TIME:");
 8001292:	4935      	ldr	r1, [pc, #212]	@ (8001368 <process_uart_command+0xec>)
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f007 fded 	bl	8008e74 <strstr>
 800129a:	6338      	str	r0, [r7, #48]	@ 0x30
    char* period_ptr = strstr((char*)data, ";PERIOD:");
 800129c:	4933      	ldr	r1, [pc, #204]	@ (800136c <process_uart_command+0xf0>)
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f007 fde8 	bl	8008e74 <strstr>
 80012a4:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if(date_ptr && time_ptr && period_ptr) {
 80012a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d045      	beq.n	8001338 <process_uart_command+0xbc>
 80012ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d042      	beq.n	8001338 <process_uart_command+0xbc>
 80012b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d03f      	beq.n	8001338 <process_uart_command+0xbc>
        char date_str[16] = {0};
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
        char time_str[16] = {0};
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]

        // Извлекаем дату и время из команды
        sscanf(date_ptr, "DATE:%15[^;]", date_ptr);
 80012d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012d6:	4926      	ldr	r1, [pc, #152]	@ (8001370 <process_uart_command+0xf4>)
 80012d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80012da:	f007 fd3f 	bl	8008d5c <siscanf>
        sscanf(time_ptr, ";TIME:%15[^;]", time_ptr);
 80012de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012e0:	4924      	ldr	r1, [pc, #144]	@ (8001374 <process_uart_command+0xf8>)
 80012e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80012e4:	f007 fd3a 	bl	8008d5c <siscanf>
        sscanf(period_ptr, ";PERIOD:%lu", &period_sec);
 80012e8:	4a23      	ldr	r2, [pc, #140]	@ (8001378 <process_uart_command+0xfc>)
 80012ea:	4924      	ldr	r1, [pc, #144]	@ (800137c <process_uart_command+0x100>)
 80012ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012ee:	f007 fd35 	bl	8008d5c <siscanf>

        // Копируем только нужные части
        strncpy(date_str, date_ptr + 5, 10); // "DATE:YYYY-MM-DD"
 80012f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f4:	1d59      	adds	r1, r3, #5
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	220a      	movs	r2, #10
 80012fc:	4618      	mov	r0, r3
 80012fe:	f007 fda6 	bl	8008e4e <strncpy>
        strncpy(time_str, time_ptr + 6, 8);  // "TIME:HH:MM:SS"
 8001302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001304:	1d99      	adds	r1, r3, #6
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2208      	movs	r2, #8
 800130c:	4618      	mov	r0, r3
 800130e:	f007 fd9e 	bl	8008e4e <strncpy>

        // Отправляем ответ с напряжением и температурой
        send_datetime_with_voltage_and_temp(date_str, time_str);
 8001312:	f107 020c 	add.w	r2, r7, #12
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f839 	bl	8001394 <send_datetime_with_voltage_and_temp>

        // Выключаем PC13 на 5 секунд после отправки
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001328:	4815      	ldr	r0, [pc, #84]	@ (8001380 <process_uart_command+0x104>)
 800132a:	f002 fde9 	bl	8003f00 <HAL_GPIO_WritePin>
        last_send_time = HAL_GetTick();
 800132e:	f000 fe25 	bl	8001f7c <HAL_GetTick>
 8001332:	4603      	mov	r3, r0
 8001334:	4a13      	ldr	r2, [pc, #76]	@ (8001384 <process_uart_command+0x108>)
 8001336:	6013      	str	r3, [r2, #0]
    }

    uart_rx_pos = 0;
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <process_uart_command+0x10c>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
    memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 800133e:	2280      	movs	r2, #128	@ 0x80
 8001340:	2100      	movs	r1, #0
 8001342:	4812      	ldr	r0, [pc, #72]	@ (800138c <process_uart_command+0x110>)
 8001344:	f007 fd7b 	bl	8008e3e <memset>
    HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <process_uart_command+0x10c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <process_uart_command+0x110>)
 8001350:	4413      	add	r3, r2
 8001352:	2201      	movs	r2, #1
 8001354:	4619      	mov	r1, r3
 8001356:	480e      	ldr	r0, [pc, #56]	@ (8001390 <process_uart_command+0x114>)
 8001358:	f004 fc32 	bl	8005bc0 <HAL_UART_Receive_IT>
}
 800135c:	bf00      	nop
 800135e:	3738      	adds	r7, #56	@ 0x38
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	0800ce98 	.word	0x0800ce98
 8001368:	0800cea0 	.word	0x0800cea0
 800136c:	0800cea8 	.word	0x0800cea8
 8001370:	0800ceb4 	.word	0x0800ceb4
 8001374:	0800cec4 	.word	0x0800cec4
 8001378:	20000374 	.word	0x20000374
 800137c:	0800ced4 	.word	0x0800ced4
 8001380:	42020800 	.word	0x42020800
 8001384:	20000378 	.word	0x20000378
 8001388:	2000036c 	.word	0x2000036c
 800138c:	200002ec 	.word	0x200002ec
 8001390:	20000258 	.word	0x20000258

08001394 <send_datetime_with_voltage_and_temp>:

/**
  * @brief Send datetime with voltage and temperature to main MCU
  */
static void send_datetime_with_voltage_and_temp(char* date_str, char* time_str)
{
 8001394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001396:	b0ab      	sub	sp, #172	@ 0xac
 8001398:	af06      	add	r7, sp, #24
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
    float voltage = read_voltage();
 800139e:	f7ff fe4b 	bl	8001038 <read_voltage>
 80013a2:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
    float temperature = read_temperature();
 80013a6:	f7ff fea1 	bl	80010ec <read_temperature>
 80013aa:	ed87 0a22 	vstr	s0, [r7, #136]	@ 0x88
    char uart_msg[128];

    // Форматируем сообщение в том же формате, что и во втором коде
    snprintf(uart_msg, sizeof(uart_msg),
 80013ae:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <send_datetime_with_voltage_and_temp+0x74>)
 80013b0:	681e      	ldr	r6, [r3, #0]
 80013b2:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80013b6:	f7ff f8ab 	bl	8000510 <__aeabi_f2d>
 80013ba:	4604      	mov	r4, r0
 80013bc:	460d      	mov	r5, r1
 80013be:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80013c2:	f7ff f8a5 	bl	8000510 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	f107 0008 	add.w	r0, r7, #8
 80013ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013d2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80013d6:	9601      	str	r6, [sp, #4]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a0b      	ldr	r2, [pc, #44]	@ (800140c <send_datetime_with_voltage_and_temp+0x78>)
 80013e0:	2180      	movs	r1, #128	@ 0x80
 80013e2:	f007 fc63 	bl	8008cac <sniprintf>
           "DATE:%s;TIME:%s;PERIOD:%lu;VOLTAGE:%.4f;TEMP:%.2f\r\n",
           date_str, time_str, period_sec, voltage, temperature);

    HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_msg, strlen(uart_msg), 100);
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe ff24 	bl	8000238 <strlen>
 80013f0:	4603      	mov	r3, r0
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	f107 0108 	add.w	r1, r7, #8
 80013f8:	2364      	movs	r3, #100	@ 0x64
 80013fa:	4805      	ldr	r0, [pc, #20]	@ (8001410 <send_datetime_with_voltage_and_temp+0x7c>)
 80013fc:	f004 fb52 	bl	8005aa4 <HAL_UART_Transmit>
}
 8001400:	bf00      	nop
 8001402:	3794      	adds	r7, #148	@ 0x94
 8001404:	46bd      	mov	sp, r7
 8001406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001408:	20000374 	.word	0x20000374
 800140c:	0800cee0 	.word	0x0800cee0
 8001410:	20000258 	.word	0x20000258

08001414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001418:	f000 fd45 	bl	8001ea6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141c:	f000 f8a8 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001420:	f000 f9d2 	bl	80017c8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001424:	f000 f984 	bl	8001730 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001428:	f000 f8e8 	bl	80015fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // Включаем транзистор для измерения напряжения
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001432:	4844      	ldr	r0, [pc, #272]	@ (8001544 <main+0x130>)
 8001434:	f002 fd64 	bl	8003f00 <HAL_GPIO_WritePin>

  // Инициализируем UART прием
  uart_last_rx_time = HAL_GetTick();
 8001438:	f000 fda0 	bl	8001f7c <HAL_GetTick>
 800143c:	4603      	mov	r3, r0
 800143e:	4a42      	ldr	r2, [pc, #264]	@ (8001548 <main+0x134>)
 8001440:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001442:	4b42      	ldr	r3, [pc, #264]	@ (800154c <main+0x138>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	4b41      	ldr	r3, [pc, #260]	@ (8001550 <main+0x13c>)
 800144a:	4413      	add	r3, r2
 800144c:	2201      	movs	r2, #1
 800144e:	4619      	mov	r1, r3
 8001450:	4840      	ldr	r0, [pc, #256]	@ (8001554 <main+0x140>)
 8001452:	f004 fbb5 	bl	8005bc0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Обработка UART команд
    if(uart_cmd_ready) {
 8001456:	4b40      	ldr	r3, [pc, #256]	@ (8001558 <main+0x144>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <main+0x5e>
        uart_cmd_ready = 0;
 8001460:	4b3d      	ldr	r3, [pc, #244]	@ (8001558 <main+0x144>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
        process_uart_command(uart_rx_buf, uart_rx_pos);
 8001466:	4b39      	ldr	r3, [pc, #228]	@ (800154c <main+0x138>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	4838      	ldr	r0, [pc, #224]	@ (8001550 <main+0x13c>)
 800146e:	f7ff ff05 	bl	800127c <process_uart_command>
    }

    // Таймаут приема UART
    if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_TIMEOUT_MS) {
 8001472:	4b36      	ldr	r3, [pc, #216]	@ (800154c <main+0x138>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d019      	beq.n	80014ae <main+0x9a>
 800147a:	f000 fd7f 	bl	8001f7c <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	4b31      	ldr	r3, [pc, #196]	@ (8001548 <main+0x134>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	@ 0x64
 8001488:	d911      	bls.n	80014ae <main+0x9a>
        uart_rx_pos = 0;
 800148a:	4b30      	ldr	r3, [pc, #192]	@ (800154c <main+0x138>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
        memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8001490:	2280      	movs	r2, #128	@ 0x80
 8001492:	2100      	movs	r1, #0
 8001494:	482e      	ldr	r0, [pc, #184]	@ (8001550 <main+0x13c>)
 8001496:	f007 fcd2 	bl	8008e3e <memset>
        HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 800149a:	4b2c      	ldr	r3, [pc, #176]	@ (800154c <main+0x138>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001550 <main+0x13c>)
 80014a2:	4413      	add	r3, r2
 80014a4:	2201      	movs	r2, #1
 80014a6:	4619      	mov	r1, r3
 80014a8:	482a      	ldr	r0, [pc, #168]	@ (8001554 <main+0x140>)
 80014aa:	f004 fb89 	bl	8005bc0 <HAL_UART_Receive_IT>
    }

    // Автоматическая отправка каждые 5 секунд (если период установлен)
    if(period_sec > 0 && (HAL_GetTick() - last_send_time) >= 5000) {
 80014ae:	4b2b      	ldr	r3, [pc, #172]	@ (800155c <main+0x148>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d018      	beq.n	80014e8 <main+0xd4>
 80014b6:	f000 fd61 	bl	8001f7c <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	4b28      	ldr	r3, [pc, #160]	@ (8001560 <main+0x14c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d90e      	bls.n	80014e8 <main+0xd4>
        // Используем текущее время как заглушку для автоматической отправки
        send_datetime_with_voltage_and_temp("2000-01-01", "00:00:00");
 80014ca:	4926      	ldr	r1, [pc, #152]	@ (8001564 <main+0x150>)
 80014cc:	4826      	ldr	r0, [pc, #152]	@ (8001568 <main+0x154>)
 80014ce:	f7ff ff61 	bl	8001394 <send_datetime_with_voltage_and_temp>
        last_send_time = HAL_GetTick();
 80014d2:	f000 fd53 	bl	8001f7c <HAL_GetTick>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a21      	ldr	r2, [pc, #132]	@ (8001560 <main+0x14c>)
 80014da:	6013      	str	r3, [r2, #0]

        // Выключаем PC13 на 5 секунд после отправки
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014e2:	4818      	ldr	r0, [pc, #96]	@ (8001544 <main+0x130>)
 80014e4:	f002 fd0c 	bl	8003f00 <HAL_GPIO_WritePin>
    }

    // Включаем PC13 через 5 секунд после выключения
    if((HAL_GetTick() - last_send_time) >= 5000 && (HAL_GetTick() - last_send_time) < 10000) {
 80014e8:	f000 fd48 	bl	8001f7c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <main+0x14c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d90f      	bls.n	800151c <main+0x108>
 80014fc:	f000 fd3e 	bl	8001f7c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <main+0x14c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f242 720f 	movw	r2, #9999	@ 0x270f
 800150c:	4293      	cmp	r3, r2
 800150e:	d805      	bhi.n	800151c <main+0x108>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001516:	480b      	ldr	r0, [pc, #44]	@ (8001544 <main+0x130>)
 8001518:	f002 fcf2 	bl	8003f00 <HAL_GPIO_WritePin>
    }

    // Мигание светодиодом
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	2101      	movs	r1, #1
 8001520:	4812      	ldr	r0, [pc, #72]	@ (800156c <main+0x158>)
 8001522:	f002 fced 	bl	8003f00 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001526:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800152a:	f000 fd33 	bl	8001f94 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2101      	movs	r1, #1
 8001532:	480e      	ldr	r0, [pc, #56]	@ (800156c <main+0x158>)
 8001534:	f002 fce4 	bl	8003f00 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001538:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800153c:	f000 fd2a 	bl	8001f94 <HAL_Delay>
    if(uart_cmd_ready) {
 8001540:	e789      	b.n	8001456 <main+0x42>
 8001542:	bf00      	nop
 8001544:	42020800 	.word	0x42020800
 8001548:	20000370 	.word	0x20000370
 800154c:	2000036c 	.word	0x2000036c
 8001550:	200002ec 	.word	0x200002ec
 8001554:	20000258 	.word	0x20000258
 8001558:	2000036d 	.word	0x2000036d
 800155c:	20000374 	.word	0x20000374
 8001560:	20000378 	.word	0x20000378
 8001564:	0800cf14 	.word	0x0800cf14
 8001568:	0800cf20 	.word	0x0800cf20
 800156c:	42020400 	.word	0x42020400

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b098      	sub	sp, #96	@ 0x60
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 0318 	add.w	r3, r7, #24
 800157a:	2248      	movs	r2, #72	@ 0x48
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f007 fc5d 	bl	8008e3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8001592:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001596:	f002 fcd9 	bl	8003f4c <HAL_PWREx_ControlVoltageScaling>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015a0:	f000 f9a0 	bl	80018e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80015a4:	2310      	movs	r3, #16
 80015a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015a8:	2301      	movs	r3, #1
 80015aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015b0:	2360      	movs	r3, #96	@ 0x60
 80015b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 0318 	add.w	r3, r7, #24
 80015bc:	4618      	mov	r0, r3
 80015be:	f002 fd55 	bl	800406c <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80015c8:	f000 f98c 	bl	80018e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	230f      	movs	r3, #15
 80015ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 fa17 	bl	8004a18 <HAL_RCC_ClockConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80015f0:	f000 f978 	bl	80018e4 <Error_Handler>
  }
}
 80015f4:	bf00      	nop
 80015f6:	3760      	adds	r7, #96	@ 0x60
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	@ 0x28
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
 800161c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800161e:	4b41      	ldr	r3, [pc, #260]	@ (8001724 <MX_ADC1_Init+0x128>)
 8001620:	4a41      	ldr	r2, [pc, #260]	@ (8001728 <MX_ADC1_Init+0x12c>)
 8001622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001624:	4b3f      	ldr	r3, [pc, #252]	@ (8001724 <MX_ADC1_Init+0x128>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800162a:	4b3e      	ldr	r3, [pc, #248]	@ (8001724 <MX_ADC1_Init+0x128>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001630:	4b3c      	ldr	r3, [pc, #240]	@ (8001724 <MX_ADC1_Init+0x128>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001636:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <MX_ADC1_Init+0x128>)
 8001638:	2201      	movs	r2, #1
 800163a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800163c:	4b39      	ldr	r3, [pc, #228]	@ (8001724 <MX_ADC1_Init+0x128>)
 800163e:	2204      	movs	r2, #4
 8001640:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001642:	4b38      	ldr	r3, [pc, #224]	@ (8001724 <MX_ADC1_Init+0x128>)
 8001644:	2200      	movs	r2, #0
 8001646:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001648:	4b36      	ldr	r3, [pc, #216]	@ (8001724 <MX_ADC1_Init+0x128>)
 800164a:	2200      	movs	r2, #0
 800164c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800164e:	4b35      	ldr	r3, [pc, #212]	@ (8001724 <MX_ADC1_Init+0x128>)
 8001650:	2204      	movs	r2, #4
 8001652:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001654:	4b33      	ldr	r3, [pc, #204]	@ (8001724 <MX_ADC1_Init+0x128>)
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800165c:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <MX_ADC1_Init+0x128>)
 800165e:	2200      	movs	r2, #0
 8001660:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001662:	4b30      	ldr	r3, [pc, #192]	@ (8001724 <MX_ADC1_Init+0x128>)
 8001664:	2200      	movs	r2, #0
 8001666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001668:	4b2e      	ldr	r3, [pc, #184]	@ (8001724 <MX_ADC1_Init+0x128>)
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001670:	4b2c      	ldr	r3, [pc, #176]	@ (8001724 <MX_ADC1_Init+0x128>)
 8001672:	2200      	movs	r2, #0
 8001674:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001676:	4b2b      	ldr	r3, [pc, #172]	@ (8001724 <MX_ADC1_Init+0x128>)
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800167e:	4829      	ldr	r0, [pc, #164]	@ (8001724 <MX_ADC1_Init+0x128>)
 8001680:	f000 fef0 	bl	8002464 <HAL_ADC_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800168a:	f000 f92b 	bl	80018e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	4822      	ldr	r0, [pc, #136]	@ (8001724 <MX_ADC1_Init+0x128>)
 800169a:	f002 f843 	bl	8003724 <HAL_ADCEx_MultiModeConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80016a4:	f000 f91e 	bl	80018e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80016a8:	4b20      	ldr	r3, [pc, #128]	@ (800172c <MX_ADC1_Init+0x130>)
 80016aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016ac:	2306      	movs	r3, #6
 80016ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016b4:	237f      	movs	r3, #127	@ 0x7f
 80016b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016b8:	2304      	movs	r3, #4
 80016ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	4619      	mov	r1, r3
 80016c4:	4817      	ldr	r0, [pc, #92]	@ (8001724 <MX_ADC1_Init+0x128>)
 80016c6:	f001 f9ed 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80016d0:	f000 f908 	bl	80018e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016d4:	230c      	movs	r3, #12
 80016d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	4811      	ldr	r0, [pc, #68]	@ (8001724 <MX_ADC1_Init+0x128>)
 80016de:	f001 f9e1 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80016e8:	f000 f8fc 	bl	80018e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80016ec:	2312      	movs	r3, #18
 80016ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	480b      	ldr	r0, [pc, #44]	@ (8001724 <MX_ADC1_Init+0x128>)
 80016f6:	f001 f9d5 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001700:	f000 f8f0 	bl	80018e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001704:	2318      	movs	r3, #24
 8001706:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	@ (8001724 <MX_ADC1_Init+0x128>)
 800170e:	f001 f9c9 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8001718:	f000 f8e4 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	3728      	adds	r7, #40	@ 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200001f0 	.word	0x200001f0
 8001728:	42028000 	.word	0x42028000
 800172c:	14f00020 	.word	0x14f00020

08001730 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001734:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <MX_LPUART1_UART_Init+0x90>)
 8001736:	4a23      	ldr	r2, [pc, #140]	@ (80017c4 <MX_LPUART1_UART_Init+0x94>)
 8001738:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800173a:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <MX_LPUART1_UART_Init+0x90>)
 800173c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001740:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001742:	4b1f      	ldr	r3, [pc, #124]	@ (80017c0 <MX_LPUART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001748:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <MX_LPUART1_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800174e:	4b1c      	ldr	r3, [pc, #112]	@ (80017c0 <MX_LPUART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001754:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <MX_LPUART1_UART_Init+0x90>)
 8001756:	220c      	movs	r2, #12
 8001758:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175a:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <MX_LPUART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001760:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <MX_LPUART1_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001766:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <MX_LPUART1_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176c:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <MX_LPUART1_UART_Init+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001772:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <MX_LPUART1_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001778:	4811      	ldr	r0, [pc, #68]	@ (80017c0 <MX_LPUART1_UART_Init+0x90>)
 800177a:	f004 f943 	bl	8005a04 <HAL_UART_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001784:	f000 f8ae 	bl	80018e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001788:	2100      	movs	r1, #0
 800178a:	480d      	ldr	r0, [pc, #52]	@ (80017c0 <MX_LPUART1_UART_Init+0x90>)
 800178c:	f006 fa9b 	bl	8007cc6 <HAL_UARTEx_SetTxFifoThreshold>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001796:	f000 f8a5 	bl	80018e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800179a:	2100      	movs	r1, #0
 800179c:	4808      	ldr	r0, [pc, #32]	@ (80017c0 <MX_LPUART1_UART_Init+0x90>)
 800179e:	f006 fad0 	bl	8007d42 <HAL_UARTEx_SetRxFifoThreshold>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017a8:	f000 f89c 	bl	80018e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80017ac:	4804      	ldr	r0, [pc, #16]	@ (80017c0 <MX_LPUART1_UART_Init+0x90>)
 80017ae:	f006 fa51 	bl	8007c54 <HAL_UARTEx_DisableFifoMode>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017b8:	f000 f894 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000258 	.word	0x20000258
 80017c4:	40008000 	.word	0x40008000

080017c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	@ 0x28
 80017cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017de:	4b3d      	ldr	r3, [pc, #244]	@ (80018d4 <MX_GPIO_Init+0x10c>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e2:	4a3c      	ldr	r2, [pc, #240]	@ (80018d4 <MX_GPIO_Init+0x10c>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ea:	4b3a      	ldr	r3, [pc, #232]	@ (80018d4 <MX_GPIO_Init+0x10c>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f6:	4b37      	ldr	r3, [pc, #220]	@ (80018d4 <MX_GPIO_Init+0x10c>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fa:	4a36      	ldr	r2, [pc, #216]	@ (80018d4 <MX_GPIO_Init+0x10c>)
 80017fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001802:	4b34      	ldr	r3, [pc, #208]	@ (80018d4 <MX_GPIO_Init+0x10c>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <MX_GPIO_Init+0x10c>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	4a30      	ldr	r2, [pc, #192]	@ (80018d4 <MX_GPIO_Init+0x10c>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181a:	4b2e      	ldr	r3, [pc, #184]	@ (80018d4 <MX_GPIO_Init+0x10c>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	4b2b      	ldr	r3, [pc, #172]	@ (80018d4 <MX_GPIO_Init+0x10c>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182a:	4a2a      	ldr	r2, [pc, #168]	@ (80018d4 <MX_GPIO_Init+0x10c>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001832:	4b28      	ldr	r3, [pc, #160]	@ (80018d4 <MX_GPIO_Init+0x10c>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001844:	4824      	ldr	r0, [pc, #144]	@ (80018d8 <MX_GPIO_Init+0x110>)
 8001846:	f002 fb5b 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2110      	movs	r1, #16
 800184e:	4823      	ldr	r0, [pc, #140]	@ (80018dc <MX_GPIO_Init+0x114>)
 8001850:	f002 fb56 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	2101      	movs	r1, #1
 8001858:	4821      	ldr	r0, [pc, #132]	@ (80018e0 <MX_GPIO_Init+0x118>)
 800185a:	f002 fb51 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800185e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4818      	ldr	r0, [pc, #96]	@ (80018d8 <MX_GPIO_Init+0x110>)
 8001878:	f002 f9c2 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : Bat23_Pin */
  GPIO_InitStruct.Pin = Bat23_Pin;
 800187c:	2302      	movs	r3, #2
 800187e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Bat23_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	4813      	ldr	r0, [pc, #76]	@ (80018dc <MX_GPIO_Init+0x114>)
 8001890:	f002 f9b6 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001894:	2310      	movs	r3, #16
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	480c      	ldr	r0, [pc, #48]	@ (80018dc <MX_GPIO_Init+0x114>)
 80018ac:	f002 f9a8 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018b0:	2301      	movs	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	4806      	ldr	r0, [pc, #24]	@ (80018e0 <MX_GPIO_Init+0x118>)
 80018c8:	f002 f99a 	bl	8003c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	@ 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	42020800 	.word	0x42020800
 80018dc:	42020000 	.word	0x42020000
 80018e0:	42020400 	.word	0x42020400

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <Error_Handler+0x8>

080018f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <HAL_MspInit+0x44>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001934 <HAL_MspInit+0x44>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6613      	str	r3, [r2, #96]	@ 0x60
 8001902:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <HAL_MspInit+0x44>)
 8001904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_MspInit+0x44>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001912:	4a08      	ldr	r2, [pc, #32]	@ (8001934 <HAL_MspInit+0x44>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001918:	6593      	str	r3, [r2, #88]	@ 0x58
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_MspInit+0x44>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001926:	f002 fb6d 	bl	8004004 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000

08001938 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b0ae      	sub	sp, #184	@ 0xb8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	2294      	movs	r2, #148	@ 0x94
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f007 fa70 	bl	8008e3e <memset>
  if(hadc->Instance==ADC1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a27      	ldr	r2, [pc, #156]	@ (8001a00 <HAL_ADC_MspInit+0xc8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d146      	bne.n	80019f6 <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001968:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800196c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800196e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001972:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 8001976:	2301      	movs	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800197a:	2301      	movs	r3, #1
 800197c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800197e:	2310      	movs	r3, #16
 8001980:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001982:	2307      	movs	r3, #7
 8001984:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001986:	2302      	movs	r3, #2
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800198a:	2302      	movs	r3, #2
 800198c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800198e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	4618      	mov	r0, r3
 800199a:	f003 fb1d 	bl	8004fd8 <HAL_RCCEx_PeriphCLKConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80019a4:	f7ff ff9e 	bl	80018e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019a8:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ac:	4a15      	ldr	r2, [pc, #84]	@ (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019b4:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c0:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019d8:	2301      	movs	r3, #1
 80019da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019de:	2303      	movs	r3, #3
 80019e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <HAL_ADC_MspInit+0xd0>)
 80019f2:	f002 f905 	bl	8003c00 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019f6:	bf00      	nop
 80019f8:	37b8      	adds	r7, #184	@ 0xb8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	42028000 	.word	0x42028000
 8001a04:	40021000 	.word	0x40021000
 8001a08:	42020000 	.word	0x42020000

08001a0c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b0ae      	sub	sp, #184	@ 0xb8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	2294      	movs	r2, #148	@ 0x94
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f007 fa06 	bl	8008e3e <memset>
  if(huart->Instance==LPUART1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a25      	ldr	r2, [pc, #148]	@ (8001acc <HAL_UART_MspInit+0xc0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d143      	bne.n	8001ac4 <HAL_UART_MspInit+0xb8>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a3c:	2320      	movs	r3, #32
 8001a3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 fac5 	bl	8004fd8 <HAL_RCCEx_PeriphCLKConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a54:	f7ff ff46 	bl	80018e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad0 <HAL_UART_MspInit+0xc4>)
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad0 <HAL_UART_MspInit+0xc4>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <HAL_UART_MspInit+0xc4>)
 8001a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a70:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <HAL_UART_MspInit+0xc4>)
 8001a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a74:	4a16      	ldr	r2, [pc, #88]	@ (8001ad0 <HAL_UART_MspInit+0xc4>)
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <HAL_UART_MspInit+0xc4>)
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a88:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001aac:	4619      	mov	r1, r3
 8001aae:	4809      	ldr	r0, [pc, #36]	@ (8001ad4 <HAL_UART_MspInit+0xc8>)
 8001ab0:	f002 f8a6 	bl	8003c00 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2042      	movs	r0, #66	@ 0x42
 8001aba:	f001 ffb2 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001abe:	2042      	movs	r0, #66	@ 0x42
 8001ac0:	f001 ffc9 	bl	8003a56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001ac4:	bf00      	nop
 8001ac6:	37b8      	adds	r7, #184	@ 0xb8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40008000 	.word	0x40008000
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	42020400 	.word	0x42020400

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <NMI_Handler+0x4>

08001ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <MemManage_Handler+0x4>

08001af0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <UsageFault_Handler+0x4>

08001b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2e:	f000 fa11 	bl	8001f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 31.
  */
void LPUART1_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001b3c:	4802      	ldr	r0, [pc, #8]	@ (8001b48 <LPUART1_IRQHandler+0x10>)
 8001b3e:	f004 f959 	bl	8005df4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000258 	.word	0x20000258

08001b4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return 1;
 8001b50:	2301      	movs	r3, #1
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_kill>:

int _kill(int pid, int sig)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b66:	f007 f9e5 	bl	8008f34 <__errno>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2216      	movs	r2, #22
 8001b6e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_exit>:

void _exit (int status)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ffe7 	bl	8001b5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b8e:	bf00      	nop
 8001b90:	e7fd      	b.n	8001b8e <_exit+0x12>

08001b92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e00a      	b.n	8001bba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	4601      	mov	r1, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	60ba      	str	r2, [r7, #8]
 8001bb0:	b2ca      	uxtb	r2, r1
 8001bb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	dbf0      	blt.n	8001ba4 <_read+0x12>
  }

  return len;
 8001bc2:	687b      	ldr	r3, [r7, #4]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e009      	b.n	8001bf2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	60ba      	str	r2, [r7, #8]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	dbf1      	blt.n	8001bde <_write+0x12>
  }
  return len;
 8001bfa:	687b      	ldr	r3, [r7, #4]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <_close>:

int _close(int file)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c2c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_isatty>:

int _isatty(int file)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c44:	2301      	movs	r3, #1
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c74:	4a14      	ldr	r2, [pc, #80]	@ (8001cc8 <_sbrk+0x5c>)
 8001c76:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <_sbrk+0x60>)
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c80:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d102      	bne.n	8001c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c88:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <_sbrk+0x64>)
 8001c8a:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <_sbrk+0x68>)
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8e:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <_sbrk+0x64>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d207      	bcs.n	8001cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c9c:	f007 f94a 	bl	8008f34 <__errno>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	e009      	b.n	8001cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cac:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <_sbrk+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb2:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	4a05      	ldr	r2, [pc, #20]	@ (8001cd0 <_sbrk+0x64>)
 8001cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20030000 	.word	0x20030000
 8001ccc:	00000400 	.word	0x00000400
 8001cd0:	2000037c 	.word	0x2000037c
 8001cd4:	200004d0 	.word	0x200004d0

08001cd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <SystemInit+0x20>)
 8001cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ce2:	4a05      	ldr	r2, [pc, #20]	@ (8001cf8 <SystemInit+0x20>)
 8001ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001d02:	4b4f      	ldr	r3, [pc, #316]	@ (8001e40 <SystemCoreClockUpdate+0x144>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d107      	bne.n	8001d1e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001d0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e40 <SystemCoreClockUpdate+0x144>)
 8001d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e005      	b.n	8001d2a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001d1e:	4b48      	ldr	r3, [pc, #288]	@ (8001e40 <SystemCoreClockUpdate+0x144>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001d2a:	4a46      	ldr	r2, [pc, #280]	@ (8001e44 <SystemCoreClockUpdate+0x148>)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d32:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d34:	4b42      	ldr	r3, [pc, #264]	@ (8001e40 <SystemCoreClockUpdate+0x144>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	2b0c      	cmp	r3, #12
 8001d3e:	d866      	bhi.n	8001e0e <SystemCoreClockUpdate+0x112>
 8001d40:	a201      	add	r2, pc, #4	@ (adr r2, 8001d48 <SystemCoreClockUpdate+0x4c>)
 8001d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d46:	bf00      	nop
 8001d48:	08001d7d 	.word	0x08001d7d
 8001d4c:	08001e0f 	.word	0x08001e0f
 8001d50:	08001e0f 	.word	0x08001e0f
 8001d54:	08001e0f 	.word	0x08001e0f
 8001d58:	08001d85 	.word	0x08001d85
 8001d5c:	08001e0f 	.word	0x08001e0f
 8001d60:	08001e0f 	.word	0x08001e0f
 8001d64:	08001e0f 	.word	0x08001e0f
 8001d68:	08001d8d 	.word	0x08001d8d
 8001d6c:	08001e0f 	.word	0x08001e0f
 8001d70:	08001e0f 	.word	0x08001e0f
 8001d74:	08001e0f 	.word	0x08001e0f
 8001d78:	08001d95 	.word	0x08001d95
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001d7c:	4a32      	ldr	r2, [pc, #200]	@ (8001e48 <SystemCoreClockUpdate+0x14c>)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	6013      	str	r3, [r2, #0]
      break;
 8001d82:	e048      	b.n	8001e16 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001d84:	4b30      	ldr	r3, [pc, #192]	@ (8001e48 <SystemCoreClockUpdate+0x14c>)
 8001d86:	4a31      	ldr	r2, [pc, #196]	@ (8001e4c <SystemCoreClockUpdate+0x150>)
 8001d88:	601a      	str	r2, [r3, #0]
      break;
 8001d8a:	e044      	b.n	8001e16 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e48 <SystemCoreClockUpdate+0x14c>)
 8001d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8001e4c <SystemCoreClockUpdate+0x150>)
 8001d90:	601a      	str	r2, [r3, #0]
      break;
 8001d92:	e040      	b.n	8001e16 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d94:	4b2a      	ldr	r3, [pc, #168]	@ (8001e40 <SystemCoreClockUpdate+0x144>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001d9e:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <SystemCoreClockUpdate+0x144>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	3301      	adds	r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d003      	beq.n	8001dba <SystemCoreClockUpdate+0xbe>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d006      	beq.n	8001dc6 <SystemCoreClockUpdate+0xca>
 8001db8:	e00b      	b.n	8001dd2 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001dba:	4a24      	ldr	r2, [pc, #144]	@ (8001e4c <SystemCoreClockUpdate+0x150>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	613b      	str	r3, [r7, #16]
          break;
 8001dc4:	e00b      	b.n	8001dde <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001dc6:	4a21      	ldr	r2, [pc, #132]	@ (8001e4c <SystemCoreClockUpdate+0x150>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	613b      	str	r3, [r7, #16]
          break;
 8001dd0:	e005      	b.n	8001dde <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	613b      	str	r3, [r7, #16]
          break;
 8001ddc:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001dde:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <SystemCoreClockUpdate+0x144>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001df0:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <SystemCoreClockUpdate+0x144>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0e5b      	lsrs	r3, r3, #25
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e08:	4a0f      	ldr	r2, [pc, #60]	@ (8001e48 <SystemCoreClockUpdate+0x14c>)
 8001e0a:	6013      	str	r3, [r2, #0]
      break;
 8001e0c:	e003      	b.n	8001e16 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e48 <SystemCoreClockUpdate+0x14c>)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	6013      	str	r3, [r2, #0]
      break;
 8001e14:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001e16:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <SystemCoreClockUpdate+0x144>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	4a0b      	ldr	r2, [pc, #44]	@ (8001e50 <SystemCoreClockUpdate+0x154>)
 8001e22:	5cd3      	ldrb	r3, [r2, r3]
 8001e24:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001e26:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <SystemCoreClockUpdate+0x14c>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e30:	4a05      	ldr	r2, [pc, #20]	@ (8001e48 <SystemCoreClockUpdate+0x14c>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	40021000 	.word	0x40021000
 8001e44:	0800cf50 	.word	0x0800cf50
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	00f42400 	.word	0x00f42400
 8001e50:	0800cf38 	.word	0x0800cf38

08001e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e58:	f7ff ff3e 	bl	8001cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e5e:	e003      	b.n	8001e68 <LoopCopyDataInit>

08001e60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e60:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e66:	3104      	adds	r1, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e68:	480a      	ldr	r0, [pc, #40]	@ (8001e94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e70:	d3f6      	bcc.n	8001e60 <CopyDataInit>
	ldr	r2, =_sbss
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e74:	e002      	b.n	8001e7c <LoopFillZerobss>

08001e76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e78:	f842 3b04 	str.w	r3, [r2], #4

08001e7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <LoopForever+0x16>)
	cmp	r2, r3
 8001e7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e80:	d3f9      	bcc.n	8001e76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e82:	f007 f85d 	bl	8008f40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e86:	f7ff fac5 	bl	8001414 <main>

08001e8a <LoopForever>:

LoopForever:
    b LoopForever
 8001e8a:	e7fe      	b.n	8001e8a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001e8c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001e90:	0800d40c 	.word	0x0800d40c
	ldr	r0, =_sdata
 8001e94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e98:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8001e9c:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8001ea0:	200004d0 	.word	0x200004d0

08001ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC1_2_IRQHandler>

08001ea6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001eb0:	2004      	movs	r0, #4
 8001eb2:	f001 fdab 	bl	8003a0c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001eb6:	f7ff ff21 	bl	8001cfc <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eba:	2007      	movs	r0, #7
 8001ebc:	f000 f80e 	bl	8001edc <HAL_InitTick>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	71fb      	strb	r3, [r7, #7]
 8001eca:	e001      	b.n	8001ed0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ecc:	f7ff fd10 	bl	80018f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ee8:	4b17      	ldr	r3, [pc, #92]	@ (8001f48 <HAL_InitTick+0x6c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d023      	beq.n	8001f38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ef0:	4b16      	ldr	r3, [pc, #88]	@ (8001f4c <HAL_InitTick+0x70>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <HAL_InitTick+0x6c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 fdb3 	bl	8003a72 <HAL_SYSTICK_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10f      	bne.n	8001f32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b07      	cmp	r3, #7
 8001f16:	d809      	bhi.n	8001f2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f001 fd7f 	bl	8003a22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f24:	4a0a      	ldr	r2, [pc, #40]	@ (8001f50 <HAL_InitTick+0x74>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e007      	b.n	8001f3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e004      	b.n	8001f3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
 8001f36:	e001      	b.n	8001f3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000004 	.word	0x20000004

08001f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <HAL_IncTick+0x20>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <HAL_IncTick+0x24>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a04      	ldr	r2, [pc, #16]	@ (8001f78 <HAL_IncTick+0x24>)
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000008 	.word	0x20000008
 8001f78:	20000380 	.word	0x20000380

08001f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f80:	4b03      	ldr	r3, [pc, #12]	@ (8001f90 <HAL_GetTick+0x14>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000380 	.word	0x20000380

08001f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff ffee 	bl	8001f7c <HAL_GetTick>
 8001fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d005      	beq.n	8001fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fae:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <HAL_Delay+0x44>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fba:	bf00      	nop
 8001fbc:	f7ff ffde 	bl	8001f7c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d8f7      	bhi.n	8001fbc <HAL_Delay+0x28>
  {
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000008 	.word	0x20000008

08001fdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	609a      	str	r2, [r3, #8]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	3360      	adds	r3, #96	@ 0x60
 8002056:	461a      	mov	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <LL_ADC_SetOffset+0x44>)
 8002066:	4013      	ands	r3, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	4313      	orrs	r3, r2
 8002074:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800207c:	bf00      	nop
 800207e:	371c      	adds	r7, #28
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	03fff000 	.word	0x03fff000

0800208c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3360      	adds	r3, #96	@ 0x60
 800209a:	461a      	mov	r2, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3360      	adds	r3, #96	@ 0x60
 80020c8:	461a      	mov	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	431a      	orrs	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020e2:	bf00      	nop
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	615a      	str	r2, [r3, #20]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800213a:	b480      	push	{r7}
 800213c:	b087      	sub	sp, #28
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3330      	adds	r3, #48	@ 0x30
 800214a:	461a      	mov	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	4413      	add	r3, r2
 8002158:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	211f      	movs	r1, #31
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	401a      	ands	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	0e9b      	lsrs	r3, r3, #26
 8002172:	f003 011f 	and.w	r1, r3, #31
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	431a      	orrs	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002186:	bf00      	nop
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002192:	b480      	push	{r7}
 8002194:	b087      	sub	sp, #28
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3314      	adds	r3, #20
 80021a2:	461a      	mov	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	0e5b      	lsrs	r3, r3, #25
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	4413      	add	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	0d1b      	lsrs	r3, r3, #20
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	2107      	movs	r1, #7
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	0d1b      	lsrs	r3, r3, #20
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	431a      	orrs	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021dc:	bf00      	nop
 80021de:	371c      	adds	r7, #28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002200:	43db      	mvns	r3, r3
 8002202:	401a      	ands	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0318 	and.w	r3, r3, #24
 800220a:	4908      	ldr	r1, [pc, #32]	@ (800222c <LL_ADC_SetChannelSingleDiff+0x44>)
 800220c:	40d9      	lsrs	r1, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	400b      	ands	r3, r1
 8002212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002216:	431a      	orrs	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	0007ffff 	.word	0x0007ffff

08002230 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 031f 	and.w	r3, r3, #31
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002278:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6093      	str	r3, [r2, #8]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800229c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022a0:	d101      	bne.n	80022a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80022c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022f0:	d101      	bne.n	80022f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002314:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800233c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002340:	f043 0202 	orr.w	r2, r3, #2
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <LL_ADC_IsEnabled+0x18>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <LL_ADC_IsEnabled+0x1a>
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b02      	cmp	r3, #2
 800238c:	d101      	bne.n	8002392 <LL_ADC_IsDisableOngoing+0x18>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <LL_ADC_IsDisableOngoing+0x1a>
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023b4:	f043 0204 	orr.w	r2, r3, #4
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023dc:	f043 0210 	orr.w	r2, r3, #16
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b04      	cmp	r3, #4
 8002402:	d101      	bne.n	8002408 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002426:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800242a:	f043 0220 	orr.w	r2, r3, #32
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b08      	cmp	r3, #8
 8002450:	d101      	bne.n	8002456 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b089      	sub	sp, #36	@ 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e12e      	b.n	80026dc <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff fa53 	bl	8001938 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fef1 	bl	800228c <LL_ADC_IsDeepPowerDownEnabled>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d004      	beq.n	80024ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fed7 	bl	8002268 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff0c 	bl	80022dc <LL_ADC_IsInternalRegulatorEnabled>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d115      	bne.n	80024f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fef0 	bl	80022b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024d4:	4b83      	ldr	r3, [pc, #524]	@ (80026e4 <HAL_ADC_Init+0x280>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	099b      	lsrs	r3, r3, #6
 80024da:	4a83      	ldr	r2, [pc, #524]	@ (80026e8 <HAL_ADC_Init+0x284>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	099b      	lsrs	r3, r3, #6
 80024e2:	3301      	adds	r3, #1
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024e8:	e002      	b.n	80024f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f9      	bne.n	80024ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff feee 	bl	80022dc <LL_ADC_IsInternalRegulatorEnabled>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10d      	bne.n	8002522 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250a:	f043 0210 	orr.w	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002516:	f043 0201 	orr.w	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff62 	bl	80023f0 <LL_ADC_REG_IsConversionOngoing>
 800252c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 80c7 	bne.w	80026ca <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 80c3 	bne.w	80026ca <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002548:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800254c:	f043 0202 	orr.w	r2, r3, #2
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fefb 	bl	8002354 <LL_ADC_IsEnabled>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d110      	bne.n	8002586 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002564:	4861      	ldr	r0, [pc, #388]	@ (80026ec <HAL_ADC_Init+0x288>)
 8002566:	f7ff fef5 	bl	8002354 <LL_ADC_IsEnabled>
 800256a:	4604      	mov	r4, r0
 800256c:	4860      	ldr	r0, [pc, #384]	@ (80026f0 <HAL_ADC_Init+0x28c>)
 800256e:	f7ff fef1 	bl	8002354 <LL_ADC_IsEnabled>
 8002572:	4603      	mov	r3, r0
 8002574:	4323      	orrs	r3, r4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4619      	mov	r1, r3
 8002580:	485c      	ldr	r0, [pc, #368]	@ (80026f4 <HAL_ADC_Init+0x290>)
 8002582:	f7ff fd2b 	bl	8001fdc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	7e5b      	ldrb	r3, [r3, #25]
 800258a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002590:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002596:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800259c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d106      	bne.n	80025c2 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	3b01      	subs	r3, #1
 80025ba:	045b      	lsls	r3, r3, #17
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ce:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	4b44      	ldr	r3, [pc, #272]	@ (80026f8 <HAL_ADC_Init+0x294>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	69b9      	ldr	r1, [r7, #24]
 80025ee:	430b      	orrs	r3, r1
 80025f0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff ff21 	bl	800243e <LL_ADC_INJ_IsConversionOngoing>
 80025fc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d140      	bne.n	8002686 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d13d      	bne.n	8002686 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7e1b      	ldrb	r3, [r3, #24]
 8002612:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002614:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800261c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800262c:	f023 0306 	bic.w	r3, r3, #6
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	69b9      	ldr	r1, [r7, #24]
 8002636:	430b      	orrs	r3, r1
 8002638:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002640:	2b01      	cmp	r3, #1
 8002642:	d118      	bne.n	8002676 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800264e:	f023 0304 	bic.w	r3, r3, #4
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002660:	4311      	orrs	r1, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002666:	430a      	orrs	r2, r1
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	611a      	str	r2, [r3, #16]
 8002674:	e007      	b.n	8002686 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d10c      	bne.n	80026a8 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002694:	f023 010f 	bic.w	r1, r3, #15
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	1e5a      	subs	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80026a6:	e007      	b.n	80026b8 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 020f 	bic.w	r2, r2, #15
 80026b6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026bc:	f023 0303 	bic.w	r3, r3, #3
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80026c8:	e007      	b.n	80026da <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026da:	7ffb      	ldrb	r3, [r7, #31]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3724      	adds	r7, #36	@ 0x24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd90      	pop	{r4, r7, pc}
 80026e4:	20000000 	.word	0x20000000
 80026e8:	053e2d63 	.word	0x053e2d63
 80026ec:	42028000 	.word	0x42028000
 80026f0:	42028100 	.word	0x42028100
 80026f4:	42028300 	.word	0x42028300
 80026f8:	fff0c007 	.word	0xfff0c007

080026fc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002704:	4857      	ldr	r0, [pc, #348]	@ (8002864 <HAL_ADC_Start+0x168>)
 8002706:	f7ff fd93 	bl	8002230 <LL_ADC_GetMultimode>
 800270a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fe6d 	bl	80023f0 <LL_ADC_REG_IsConversionOngoing>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	f040 809c 	bne.w	8002856 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_ADC_Start+0x30>
 8002728:	2302      	movs	r3, #2
 800272a:	e097      	b.n	800285c <HAL_ADC_Start+0x160>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fe5b 	bl	80033f0 <ADC_Enable>
 800273a:	4603      	mov	r3, r0
 800273c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	2b00      	cmp	r3, #0
 8002742:	f040 8083 	bne.w	800284c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a42      	ldr	r2, [pc, #264]	@ (8002868 <HAL_ADC_Start+0x16c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d002      	beq.n	800276a <HAL_ADC_Start+0x6e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	e000      	b.n	800276c <HAL_ADC_Start+0x70>
 800276a:	4b40      	ldr	r3, [pc, #256]	@ (800286c <HAL_ADC_Start+0x170>)
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	4293      	cmp	r3, r2
 8002772:	d002      	beq.n	800277a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d105      	bne.n	8002786 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800278e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002792:	d106      	bne.n	80027a2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002798:	f023 0206 	bic.w	r2, r3, #6
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027a0:	e002      	b.n	80027a8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	221c      	movs	r2, #28
 80027ae:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002868 <HAL_ADC_Start+0x16c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d002      	beq.n	80027c8 <HAL_ADC_Start+0xcc>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	e000      	b.n	80027ca <HAL_ADC_Start+0xce>
 80027c8:	4b28      	ldr	r3, [pc, #160]	@ (800286c <HAL_ADC_Start+0x170>)
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d008      	beq.n	80027e4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	2b05      	cmp	r3, #5
 80027dc:	d002      	beq.n	80027e4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2b09      	cmp	r3, #9
 80027e2:	d114      	bne.n	800280e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fdca 	bl	80023a0 <LL_ADC_REG_StartConversion>
 800280c:	e025      	b.n	800285a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002812:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a12      	ldr	r2, [pc, #72]	@ (8002868 <HAL_ADC_Start+0x16c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d002      	beq.n	800282a <HAL_ADC_Start+0x12e>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	e000      	b.n	800282c <HAL_ADC_Start+0x130>
 800282a:	4b10      	ldr	r3, [pc, #64]	@ (800286c <HAL_ADC_Start+0x170>)
 800282c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00f      	beq.n	800285a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002842:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	659a      	str	r2, [r3, #88]	@ 0x58
 800284a:	e006      	b.n	800285a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002854:	e001      	b.n	800285a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002856:	2302      	movs	r3, #2
 8002858:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800285a:	7dfb      	ldrb	r3, [r7, #23]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	42028300 	.word	0x42028300
 8002868:	42028100 	.word	0x42028100
 800286c:	42028000 	.word	0x42028000

08002870 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_ADC_Stop+0x16>
 8002882:	2302      	movs	r3, #2
 8002884:	e023      	b.n	80028ce <HAL_ADC_Stop+0x5e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800288e:	2103      	movs	r1, #3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fcf1 	bl	8003278 <ADC_ConversionStop>
 8002896:	4603      	mov	r3, r0
 8002898:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d111      	bne.n	80028c4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fe2b 	bl	80034fc <ADC_Disable>
 80028a6:	4603      	mov	r3, r0
 80028a8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028e2:	4866      	ldr	r0, [pc, #408]	@ (8002a7c <HAL_ADC_PollForConversion+0x1a4>)
 80028e4:	f7ff fca4 	bl	8002230 <LL_ADC_GetMultimode>
 80028e8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d102      	bne.n	80028f8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80028f2:	2308      	movs	r3, #8
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	e02a      	b.n	800294e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b05      	cmp	r3, #5
 8002902:	d002      	beq.n	800290a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b09      	cmp	r3, #9
 8002908:	d111      	bne.n	800292e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291c:	f043 0220 	orr.w	r2, r3, #32
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0a4      	b.n	8002a72 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002928:	2304      	movs	r3, #4
 800292a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800292c:	e00f      	b.n	800294e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800292e:	4853      	ldr	r0, [pc, #332]	@ (8002a7c <HAL_ADC_PollForConversion+0x1a4>)
 8002930:	f7ff fc8c 	bl	800224c <LL_ADC_GetMultiDMATransfer>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293e:	f043 0220 	orr.w	r2, r3, #32
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e093      	b.n	8002a72 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800294a:	2304      	movs	r3, #4
 800294c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800294e:	f7ff fb15 	bl	8001f7c <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002954:	e021      	b.n	800299a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d01d      	beq.n	800299a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800295e:	f7ff fb0d 	bl	8001f7c <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d302      	bcc.n	8002974 <HAL_ADC_PollForConversion+0x9c>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d112      	bne.n	800299a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10b      	bne.n	800299a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002986:	f043 0204 	orr.w	r2, r3, #4
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e06b      	b.n	8002a72 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0d6      	beq.n	8002956 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fbab 	bl	8002114 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01c      	beq.n	80029fe <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	7e5b      	ldrb	r3, [r3, #25]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d118      	bne.n	80029fe <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d111      	bne.n	80029fe <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d105      	bne.n	80029fe <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1f      	ldr	r2, [pc, #124]	@ (8002a80 <HAL_ADC_PollForConversion+0x1a8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d002      	beq.n	8002a0e <HAL_ADC_PollForConversion+0x136>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	e000      	b.n	8002a10 <HAL_ADC_PollForConversion+0x138>
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <HAL_ADC_PollForConversion+0x1ac>)
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d008      	beq.n	8002a2a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d002      	beq.n	8002a2a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b09      	cmp	r3, #9
 8002a28:	d104      	bne.n	8002a34 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	e00c      	b.n	8002a4e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a11      	ldr	r2, [pc, #68]	@ (8002a80 <HAL_ADC_PollForConversion+0x1a8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d002      	beq.n	8002a44 <HAL_ADC_PollForConversion+0x16c>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	e000      	b.n	8002a46 <HAL_ADC_PollForConversion+0x16e>
 8002a44:	4b0f      	ldr	r3, [pc, #60]	@ (8002a84 <HAL_ADC_PollForConversion+0x1ac>)
 8002a46:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d104      	bne.n	8002a5e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2208      	movs	r2, #8
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e008      	b.n	8002a70 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d103      	bne.n	8002a70 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	220c      	movs	r2, #12
 8002a6e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3720      	adds	r7, #32
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	42028300 	.word	0x42028300
 8002a80:	42028100 	.word	0x42028100
 8002a84:	42028000 	.word	0x42028000

08002a88 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b0b7      	sub	sp, #220	@ 0xdc
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x22>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e3c1      	b.n	800324a <HAL_ADC_ConfigChannel+0x7a6>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fc8c 	bl	80023f0 <LL_ADC_REG_IsConversionOngoing>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 83a6 	bne.w	800322c <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	6859      	ldr	r1, [r3, #4]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	f7ff fb24 	bl	800213a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fc7a 	bl	80023f0 <LL_ADC_REG_IsConversionOngoing>
 8002afc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fc9a 	bl	800243e <LL_ADC_INJ_IsConversionOngoing>
 8002b0a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 81c1 	bne.w	8002e9a <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f040 81bc 	bne.w	8002e9a <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b2a:	d10f      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2200      	movs	r2, #0
 8002b36:	4619      	mov	r1, r3
 8002b38:	f7ff fb2b 	bl	8002192 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fad2 	bl	80020ee <LL_ADC_SetSamplingTimeCommonConfig>
 8002b4a:	e00e      	b.n	8002b6a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f7ff fb1a 	bl	8002192 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fac2 	bl	80020ee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	08db      	lsrs	r3, r3, #3
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6919      	ldr	r1, [r3, #16]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b9c:	f7ff fa52 	bl	8002044 <LL_ADC_SetOffset>
 8002ba0:	e17b      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fa6f 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x12a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fa64 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	0e9b      	lsrs	r3, r3, #26
 8002bc8:	f003 021f 	and.w	r2, r3, #31
 8002bcc:	e01e      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x168>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fa59 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002bfc:	2320      	movs	r3, #32
 8002bfe:	e004      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8002c00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x180>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0e9b      	lsrs	r3, r3, #26
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	e018      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x1b2>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002c38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002c40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002c48:	2320      	movs	r3, #32
 8002c4a:	e004      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d106      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fa28 	bl	80020b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fa0c 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10a      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x1f0>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2101      	movs	r1, #1
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fa01 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	f003 021f 	and.w	r2, r3, #31
 8002c92:	e01e      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x22e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff f9f6 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002cba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8002cc2:	2320      	movs	r3, #32
 8002cc4:	e004      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8002cc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d105      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x246>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	0e9b      	lsrs	r3, r3, #26
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	e018      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x278>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002cfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002d06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8002d0e:	2320      	movs	r3, #32
 8002d10:	e004      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8002d12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d106      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2200      	movs	r2, #0
 8002d26:	2101      	movs	r1, #1
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff f9c5 	bl	80020b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2102      	movs	r1, #2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff f9a9 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x2b6>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2102      	movs	r1, #2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f99e 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002d50:	4603      	mov	r3, r0
 8002d52:	0e9b      	lsrs	r3, r3, #26
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	e01e      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x2f4>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2102      	movs	r1, #2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff f993 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002d80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002d88:	2320      	movs	r3, #32
 8002d8a:	e004      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002d8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d90:	fab3 f383 	clz	r3, r3
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x30c>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0e9b      	lsrs	r3, r3, #26
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	e016      	b.n	8002dde <HAL_ADC_ConfigChannel+0x33a>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002dc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002dd0:	2320      	movs	r3, #32
 8002dd2:	e004      	b.n	8002dde <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8002dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dd8:	fab3 f383 	clz	r3, r3
 8002ddc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d106      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2200      	movs	r2, #0
 8002de8:	2102      	movs	r1, #2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff f964 	bl	80020b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2103      	movs	r1, #3
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff f948 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10a      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x378>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2103      	movs	r1, #3
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff f93d 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002e12:	4603      	mov	r3, r0
 8002e14:	0e9b      	lsrs	r3, r3, #26
 8002e16:	f003 021f 	and.w	r2, r3, #31
 8002e1a:	e017      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x3a8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2103      	movs	r1, #3
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff f932 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e36:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002e38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002e3e:	2320      	movs	r3, #32
 8002e40:	e003      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8002e42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e44:	fab3 f383 	clz	r3, r3
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x3c0>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0e9b      	lsrs	r3, r3, #26
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	e011      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x3e4>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002e72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e74:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002e76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	e003      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d106      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2200      	movs	r2, #0
 8002e92:	2103      	movs	r1, #3
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff f90f 	bl	80020b8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fa58 	bl	8002354 <LL_ADC_IsEnabled>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f040 81c9 	bne.w	800323e <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	6819      	ldr	r1, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f7ff f995 	bl	80021e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	4a8f      	ldr	r2, [pc, #572]	@ (8003100 <HAL_ADC_ConfigChannel+0x65c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	f040 8131 	bne.w	800312c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x44e>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	0e9b      	lsrs	r3, r3, #26
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	2b09      	cmp	r3, #9
 8002ee8:	bf94      	ite	ls
 8002eea:	2301      	movls	r3, #1
 8002eec:	2300      	movhi	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	e019      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x482>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002f00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f02:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002f04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	e003      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002f0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	3301      	adds	r3, #1
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	2b09      	cmp	r3, #9
 8002f1e:	bf94      	ite	ls
 8002f20:	2301      	movls	r3, #1
 8002f22:	2300      	movhi	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d079      	beq.n	800301e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d107      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x4a2>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	0e9b      	lsrs	r3, r3, #26
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	069b      	lsls	r3, r3, #26
 8002f40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f44:	e015      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x4ce>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f56:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002f5e:	2320      	movs	r3, #32
 8002f60:	e003      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	069b      	lsls	r3, r3, #26
 8002f6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x4ee>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	0e9b      	lsrs	r3, r3, #26
 8002f84:	3301      	adds	r3, #1
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f90:	e017      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x51e>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002fa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002fa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002faa:	2320      	movs	r3, #32
 8002fac:	e003      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	ea42 0103 	orr.w	r1, r2, r3
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x544>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	0e9b      	lsrs	r3, r3, #26
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f003 021f 	and.w	r2, r3, #31
 8002fde:	4613      	mov	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4413      	add	r3, r2
 8002fe4:	051b      	lsls	r3, r3, #20
 8002fe6:	e018      	b.n	800301a <HAL_ADC_ConfigChannel+0x576>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff0:	fa93 f3a3 	rbit	r3, r3
 8002ff4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003000:	2320      	movs	r3, #32
 8003002:	e003      	b.n	800300c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003006:	fab3 f383 	clz	r3, r3
 800300a:	b2db      	uxtb	r3, r3
 800300c:	3301      	adds	r3, #1
 800300e:	f003 021f 	and.w	r2, r3, #31
 8003012:	4613      	mov	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800301a:	430b      	orrs	r3, r1
 800301c:	e081      	b.n	8003122 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003026:	2b00      	cmp	r3, #0
 8003028:	d107      	bne.n	800303a <HAL_ADC_ConfigChannel+0x596>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	0e9b      	lsrs	r3, r3, #26
 8003030:	3301      	adds	r3, #1
 8003032:	069b      	lsls	r3, r3, #26
 8003034:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003038:	e015      	b.n	8003066 <HAL_ADC_ConfigChannel+0x5c2>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800304c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8003052:	2320      	movs	r3, #32
 8003054:	e003      	b.n	800305e <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8003056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	3301      	adds	r3, #1
 8003060:	069b      	lsls	r3, r3, #26
 8003062:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x5e2>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	0e9b      	lsrs	r3, r3, #26
 8003078:	3301      	adds	r3, #1
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2101      	movs	r1, #1
 8003080:	fa01 f303 	lsl.w	r3, r1, r3
 8003084:	e017      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x612>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	61fb      	str	r3, [r7, #28]
  return result;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 800309e:	2320      	movs	r3, #32
 80030a0:	e003      	b.n	80030aa <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	fab3 f383 	clz	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	3301      	adds	r3, #1
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	2101      	movs	r1, #1
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	ea42 0103 	orr.w	r1, r2, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10d      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x63e>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	0e9b      	lsrs	r3, r3, #26
 80030cc:	3301      	adds	r3, #1
 80030ce:	f003 021f 	and.w	r2, r3, #31
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	3b1e      	subs	r3, #30
 80030da:	051b      	lsls	r3, r3, #20
 80030dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030e0:	e01e      	b.n	8003120 <HAL_ADC_ConfigChannel+0x67c>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	613b      	str	r3, [r7, #16]
  return result;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d104      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80030fa:	2320      	movs	r3, #32
 80030fc:	e006      	b.n	800310c <HAL_ADC_ConfigChannel+0x668>
 80030fe:	bf00      	nop
 8003100:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	3301      	adds	r3, #1
 800310e:	f003 021f 	and.w	r2, r3, #31
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	3b1e      	subs	r3, #30
 800311a:	051b      	lsls	r3, r3, #20
 800311c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003120:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003126:	4619      	mov	r1, r3
 8003128:	f7ff f833 	bl	8002192 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b48      	ldr	r3, [pc, #288]	@ (8003254 <HAL_ADC_ConfigChannel+0x7b0>)
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8082 	beq.w	800323e <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800313a:	4847      	ldr	r0, [pc, #284]	@ (8003258 <HAL_ADC_ConfigChannel+0x7b4>)
 800313c:	f7fe ff74 	bl	8002028 <LL_ADC_GetCommonPathInternalCh>
 8003140:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003144:	4845      	ldr	r0, [pc, #276]	@ (800325c <HAL_ADC_ConfigChannel+0x7b8>)
 8003146:	f7ff f905 	bl	8002354 <LL_ADC_IsEnabled>
 800314a:	4604      	mov	r4, r0
 800314c:	4844      	ldr	r0, [pc, #272]	@ (8003260 <HAL_ADC_ConfigChannel+0x7bc>)
 800314e:	f7ff f901 	bl	8002354 <LL_ADC_IsEnabled>
 8003152:	4603      	mov	r3, r0
 8003154:	4323      	orrs	r3, r4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d15e      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a41      	ldr	r2, [pc, #260]	@ (8003264 <HAL_ADC_ConfigChannel+0x7c0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d127      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003168:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d121      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a39      	ldr	r2, [pc, #228]	@ (800325c <HAL_ADC_ConfigChannel+0x7b8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d161      	bne.n	800323e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800317a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800317e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003182:	4619      	mov	r1, r3
 8003184:	4834      	ldr	r0, [pc, #208]	@ (8003258 <HAL_ADC_ConfigChannel+0x7b4>)
 8003186:	f7fe ff3c 	bl	8002002 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800318a:	4b37      	ldr	r3, [pc, #220]	@ (8003268 <HAL_ADC_ConfigChannel+0x7c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	099b      	lsrs	r3, r3, #6
 8003190:	4a36      	ldr	r2, [pc, #216]	@ (800326c <HAL_ADC_ConfigChannel+0x7c8>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80031a2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80031a4:	e002      	b.n	80031ac <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f9      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031b2:	e044      	b.n	800323e <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003270 <HAL_ADC_ConfigChannel+0x7cc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d113      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10d      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a23      	ldr	r2, [pc, #140]	@ (800325c <HAL_ADC_ConfigChannel+0x7b8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d134      	bne.n	800323e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031dc:	4619      	mov	r1, r3
 80031de:	481e      	ldr	r0, [pc, #120]	@ (8003258 <HAL_ADC_ConfigChannel+0x7b4>)
 80031e0:	f7fe ff0f 	bl	8002002 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031e4:	e02b      	b.n	800323e <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a22      	ldr	r2, [pc, #136]	@ (8003274 <HAL_ADC_ConfigChannel+0x7d0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d126      	bne.n	800323e <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d120      	bne.n	800323e <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a16      	ldr	r2, [pc, #88]	@ (800325c <HAL_ADC_ConfigChannel+0x7b8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d11b      	bne.n	800323e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800320a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800320e:	4619      	mov	r1, r3
 8003210:	4811      	ldr	r0, [pc, #68]	@ (8003258 <HAL_ADC_ConfigChannel+0x7b4>)
 8003212:	f7fe fef6 	bl	8002002 <LL_ADC_SetCommonPathInternalCh>
 8003216:	e012      	b.n	800323e <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800322a:	e008      	b.n	800323e <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003230:	f043 0220 	orr.w	r2, r3, #32
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003246:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800324a:	4618      	mov	r0, r3
 800324c:	37dc      	adds	r7, #220	@ 0xdc
 800324e:	46bd      	mov	sp, r7
 8003250:	bd90      	pop	{r4, r7, pc}
 8003252:	bf00      	nop
 8003254:	80080000 	.word	0x80080000
 8003258:	42028300 	.word	0x42028300
 800325c:	42028000 	.word	0x42028000
 8003260:	42028100 	.word	0x42028100
 8003264:	c7520000 	.word	0xc7520000
 8003268:	20000000 	.word	0x20000000
 800326c:	053e2d63 	.word	0x053e2d63
 8003270:	cb840000 	.word	0xcb840000
 8003274:	80000001 	.word	0x80000001

08003278 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f8ae 	bl	80023f0 <LL_ADC_REG_IsConversionOngoing>
 8003294:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff f8cf 	bl	800243e <LL_ADC_INJ_IsConversionOngoing>
 80032a0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d103      	bne.n	80032b0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8098 	beq.w	80033e0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d02a      	beq.n	8003314 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7e5b      	ldrb	r3, [r3, #25]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d126      	bne.n	8003314 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	7e1b      	ldrb	r3, [r3, #24]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d122      	bne.n	8003314 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80032ce:	2301      	movs	r3, #1
 80032d0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80032d2:	e014      	b.n	80032fe <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	4a45      	ldr	r2, [pc, #276]	@ (80033ec <ADC_ConversionStop+0x174>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d90d      	bls.n	80032f8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e0:	f043 0210 	orr.w	r2, r3, #16
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e074      	b.n	80033e2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	3301      	adds	r3, #1
 80032fc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003308:	2b40      	cmp	r3, #64	@ 0x40
 800330a:	d1e3      	bne.n	80032d4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2240      	movs	r2, #64	@ 0x40
 8003312:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d014      	beq.n	8003344 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff f866 	bl	80023f0 <LL_ADC_REG_IsConversionOngoing>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00c      	beq.n	8003344 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff f823 	bl	800237a <LL_ADC_IsDisableOngoing>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d104      	bne.n	8003344 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff f842 	bl	80023c8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d014      	beq.n	8003374 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff f875 	bl	800243e <LL_ADC_INJ_IsConversionOngoing>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00c      	beq.n	8003374 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff f80b 	bl	800237a <LL_ADC_IsDisableOngoing>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d104      	bne.n	8003374 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff f851 	bl	8002416 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d005      	beq.n	8003386 <ADC_ConversionStop+0x10e>
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2b03      	cmp	r3, #3
 800337e:	d105      	bne.n	800338c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003380:	230c      	movs	r3, #12
 8003382:	617b      	str	r3, [r7, #20]
        break;
 8003384:	e005      	b.n	8003392 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003386:	2308      	movs	r3, #8
 8003388:	617b      	str	r3, [r7, #20]
        break;
 800338a:	e002      	b.n	8003392 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800338c:	2304      	movs	r3, #4
 800338e:	617b      	str	r3, [r7, #20]
        break;
 8003390:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003392:	f7fe fdf3 	bl	8001f7c <HAL_GetTick>
 8003396:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003398:	e01b      	b.n	80033d2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800339a:	f7fe fdef 	bl	8001f7c <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	d914      	bls.n	80033d2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00d      	beq.n	80033d2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ba:	f043 0210 	orr.w	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c6:	f043 0201 	orr.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e007      	b.n	80033e2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1dc      	bne.n	800339a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	a33fffff 	.word	0xa33fffff

080033f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe ffa7 	bl	8002354 <LL_ADC_IsEnabled>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d169      	bne.n	80034e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	4b36      	ldr	r3, [pc, #216]	@ (80034ec <ADC_Enable+0xfc>)
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341e:	f043 0210 	orr.w	r2, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e055      	b.n	80034e2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe ff62 	bl	8002304 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003440:	482b      	ldr	r0, [pc, #172]	@ (80034f0 <ADC_Enable+0x100>)
 8003442:	f7fe fdf1 	bl	8002028 <LL_ADC_GetCommonPathInternalCh>
 8003446:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003448:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800344c:	2b00      	cmp	r3, #0
 800344e:	d013      	beq.n	8003478 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003450:	4b28      	ldr	r3, [pc, #160]	@ (80034f4 <ADC_Enable+0x104>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	4a28      	ldr	r2, [pc, #160]	@ (80034f8 <ADC_Enable+0x108>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	4613      	mov	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800346a:	e002      	b.n	8003472 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	3b01      	subs	r3, #1
 8003470:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f9      	bne.n	800346c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003478:	f7fe fd80 	bl	8001f7c <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800347e:	e028      	b.n	80034d2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe ff65 	bl	8002354 <LL_ADC_IsEnabled>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d104      	bne.n	800349a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe ff35 	bl	8002304 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800349a:	f7fe fd6f 	bl	8001f7c <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d914      	bls.n	80034d2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d00d      	beq.n	80034d2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ba:	f043 0210 	orr.w	r2, r3, #16
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e007      	b.n	80034e2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d1cf      	bne.n	8003480 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	8000003f 	.word	0x8000003f
 80034f0:	42028300 	.word	0x42028300
 80034f4:	20000000 	.word	0x20000000
 80034f8:	053e2d63 	.word	0x053e2d63

080034fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe ff36 	bl	800237a <LL_ADC_IsDisableOngoing>
 800350e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe ff1d 	bl	8002354 <LL_ADC_IsEnabled>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d047      	beq.n	80035b0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d144      	bne.n	80035b0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 030d 	and.w	r3, r3, #13
 8003530:	2b01      	cmp	r3, #1
 8003532:	d10c      	bne.n	800354e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fe fef7 	bl	800232c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2203      	movs	r2, #3
 8003544:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003546:	f7fe fd19 	bl	8001f7c <HAL_GetTick>
 800354a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800354c:	e029      	b.n	80035a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003552:	f043 0210 	orr.w	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355e:	f043 0201 	orr.w	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e023      	b.n	80035b2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800356a:	f7fe fd07 	bl	8001f7c <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d914      	bls.n	80035a2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00d      	beq.n	80035a2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358a:	f043 0210 	orr.w	r2, r3, #16
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003596:	f043 0201 	orr.w	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e007      	b.n	80035b2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1dc      	bne.n	800356a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <LL_ADC_IsEnabled>:
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <LL_ADC_IsEnabled+0x18>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <LL_ADC_IsEnabled+0x1a>
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_ADC_StartCalibration>:
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80035f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	609a      	str	r2, [r3, #8]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <LL_ADC_IsCalibrationOnGoing>:
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003622:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003626:	d101      	bne.n	800362c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <LL_ADC_REG_IsConversionOngoing>:
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b04      	cmp	r3, #4
 800364c:	d101      	bne.n	8003652 <LL_ADC_REG_IsConversionOngoing+0x18>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_ADCEx_Calibration_Start+0x1c>
 8003678:	2302      	movs	r3, #2
 800367a:	e04d      	b.n	8003718 <HAL_ADCEx_Calibration_Start+0xb8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ff39 	bl	80034fc <ADC_Disable>
 800368a:	4603      	mov	r3, r0
 800368c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d136      	bne.n	8003702 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003698:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800369c:	f023 0302 	bic.w	r3, r3, #2
 80036a0:	f043 0202 	orr.w	r2, r3, #2
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6839      	ldr	r1, [r7, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff ff96 	bl	80035e0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80036b4:	e014      	b.n	80036e0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	3301      	adds	r3, #1
 80036ba:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4a18      	ldr	r2, [pc, #96]	@ (8003720 <HAL_ADCEx_Calibration_Start+0xc0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d90d      	bls.n	80036e0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c8:	f023 0312 	bic.w	r3, r3, #18
 80036cc:	f043 0210 	orr.w	r2, r3, #16
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e01b      	b.n	8003718 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff94 	bl	8003612 <LL_ADC_IsCalibrationOnGoing>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e2      	bne.n	80036b6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f4:	f023 0303 	bic.w	r3, r3, #3
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8003700:	e005      	b.n	800370e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003706:	f043 0210 	orr.w	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	0006cbff 	.word	0x0006cbff

08003724 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b0a1      	sub	sp, #132	@ 0x84
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800373e:	2302      	movs	r3, #2
 8003740:	e089      	b.n	8003856 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800374a:	2300      	movs	r3, #0
 800374c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800374e:	2300      	movs	r3, #0
 8003750:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a42      	ldr	r2, [pc, #264]	@ (8003860 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d102      	bne.n	8003762 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800375c:	4b41      	ldr	r3, [pc, #260]	@ (8003864 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e001      	b.n	8003766 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10b      	bne.n	8003784 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003770:	f043 0220 	orr.w	r2, r3, #32
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e068      	b.n	8003856 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff ff57 	bl	800363a <LL_ADC_REG_IsConversionOngoing>
 800378c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff ff51 	bl	800363a <LL_ADC_REG_IsConversionOngoing>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d14a      	bne.n	8003834 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800379e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d147      	bne.n	8003834 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037a4:	4b30      	ldr	r3, [pc, #192]	@ (8003868 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80037a6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d027      	beq.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80037b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037c2:	035b      	lsls	r3, r3, #13
 80037c4:	430b      	orrs	r3, r1
 80037c6:	431a      	orrs	r2, r3
 80037c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037cc:	4824      	ldr	r0, [pc, #144]	@ (8003860 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80037ce:	f7ff fef4 	bl	80035ba <LL_ADC_IsEnabled>
 80037d2:	4604      	mov	r4, r0
 80037d4:	4823      	ldr	r0, [pc, #140]	@ (8003864 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80037d6:	f7ff fef0 	bl	80035ba <LL_ADC_IsEnabled>
 80037da:	4603      	mov	r3, r0
 80037dc:	4323      	orrs	r3, r4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d132      	bne.n	8003848 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80037ea:	f023 030f 	bic.w	r3, r3, #15
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	6811      	ldr	r1, [r2, #0]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	6892      	ldr	r2, [r2, #8]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	431a      	orrs	r2, r3
 80037fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037fc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037fe:	e023      	b.n	8003848 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003800:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800380a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800380c:	4814      	ldr	r0, [pc, #80]	@ (8003860 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800380e:	f7ff fed4 	bl	80035ba <LL_ADC_IsEnabled>
 8003812:	4604      	mov	r4, r0
 8003814:	4813      	ldr	r0, [pc, #76]	@ (8003864 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003816:	f7ff fed0 	bl	80035ba <LL_ADC_IsEnabled>
 800381a:	4603      	mov	r3, r0
 800381c:	4323      	orrs	r3, r4
 800381e:	2b00      	cmp	r3, #0
 8003820:	d112      	bne.n	8003848 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003822:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800382a:	f023 030f 	bic.w	r3, r3, #15
 800382e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003830:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003832:	e009      	b.n	8003848 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003846:	e000      	b.n	800384a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003848:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003852:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003856:	4618      	mov	r0, r3
 8003858:	3784      	adds	r7, #132	@ 0x84
 800385a:	46bd      	mov	sp, r7
 800385c:	bd90      	pop	{r4, r7, pc}
 800385e:	bf00      	nop
 8003860:	42028000 	.word	0x42028000
 8003864:	42028100 	.word	0x42028100
 8003868:	42028300 	.word	0x42028300

0800386c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800387c:	4b0c      	ldr	r3, [pc, #48]	@ (80038b0 <__NVIC_SetPriorityGrouping+0x44>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003888:	4013      	ands	r3, r2
 800388a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003894:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800389c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800389e:	4a04      	ldr	r2, [pc, #16]	@ (80038b0 <__NVIC_SetPriorityGrouping+0x44>)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	60d3      	str	r3, [r2, #12]
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b8:	4b04      	ldr	r3, [pc, #16]	@ (80038cc <__NVIC_GetPriorityGrouping+0x18>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	f003 0307 	and.w	r3, r3, #7
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	db0b      	blt.n	80038fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	f003 021f 	and.w	r2, r3, #31
 80038e8:	4907      	ldr	r1, [pc, #28]	@ (8003908 <__NVIC_EnableIRQ+0x38>)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	2001      	movs	r0, #1
 80038f2:	fa00 f202 	lsl.w	r2, r0, r2
 80038f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	e000e100 	.word	0xe000e100

0800390c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391c:	2b00      	cmp	r3, #0
 800391e:	db0a      	blt.n	8003936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	490c      	ldr	r1, [pc, #48]	@ (8003958 <__NVIC_SetPriority+0x4c>)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	0152      	lsls	r2, r2, #5
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	440b      	add	r3, r1
 8003930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003934:	e00a      	b.n	800394c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	4908      	ldr	r1, [pc, #32]	@ (800395c <__NVIC_SetPriority+0x50>)
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	3b04      	subs	r3, #4
 8003944:	0152      	lsls	r2, r2, #5
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	440b      	add	r3, r1
 800394a:	761a      	strb	r2, [r3, #24]
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000e100 	.word	0xe000e100
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003960:	b480      	push	{r7}
 8003962:	b089      	sub	sp, #36	@ 0x24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f1c3 0307 	rsb	r3, r3, #7
 800397a:	2b03      	cmp	r3, #3
 800397c:	bf28      	it	cs
 800397e:	2303      	movcs	r3, #3
 8003980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3303      	adds	r3, #3
 8003986:	2b06      	cmp	r3, #6
 8003988:	d902      	bls.n	8003990 <NVIC_EncodePriority+0x30>
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	3b04      	subs	r3, #4
 800398e:	e000      	b.n	8003992 <NVIC_EncodePriority+0x32>
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003994:	f04f 32ff 	mov.w	r2, #4294967295
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43da      	mvns	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	401a      	ands	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a8:	f04f 31ff 	mov.w	r1, #4294967295
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	43d9      	mvns	r1, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b8:	4313      	orrs	r3, r2
         );
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3724      	adds	r7, #36	@ 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039d8:	d301      	bcc.n	80039de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039da:	2301      	movs	r3, #1
 80039dc:	e00f      	b.n	80039fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039de:	4a0a      	ldr	r2, [pc, #40]	@ (8003a08 <SysTick_Config+0x40>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039e6:	2107      	movs	r1, #7
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	f7ff ff8e 	bl	800390c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039f0:	4b05      	ldr	r3, [pc, #20]	@ (8003a08 <SysTick_Config+0x40>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039f6:	4b04      	ldr	r3, [pc, #16]	@ (8003a08 <SysTick_Config+0x40>)
 80039f8:	2207      	movs	r2, #7
 80039fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	e000e010 	.word	0xe000e010

08003a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ff29 	bl	800386c <__NVIC_SetPriorityGrouping>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b086      	sub	sp, #24
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	4603      	mov	r3, r0
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a30:	f7ff ff40 	bl	80038b4 <__NVIC_GetPriorityGrouping>
 8003a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	6978      	ldr	r0, [r7, #20]
 8003a3c:	f7ff ff90 	bl	8003960 <NVIC_EncodePriority>
 8003a40:	4602      	mov	r2, r0
 8003a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff5f 	bl	800390c <__NVIC_SetPriority>
}
 8003a4e:	bf00      	nop
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff33 	bl	80038d0 <__NVIC_EnableIRQ>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff ffa4 	bl	80039c8 <SysTick_Config>
 8003a80:	4603      	mov	r3, r0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b085      	sub	sp, #20
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d008      	beq.n	8003ab4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e040      	b.n	8003b36 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 020e 	bic.w	r2, r2, #14
 8003ac2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ace:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ad2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae8:	f003 021c 	and.w	r2, r3, #28
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af0:	2101      	movs	r1, #1
 8003af2:	fa01 f202 	lsl.w	r2, r1, r2
 8003af6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003b00:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00c      	beq.n	8003b24 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003b22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d005      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	645a      	str	r2, [r3, #68]	@ 0x44

    status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
 8003b64:	e047      	b.n	8003bf6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 020e 	bic.w	r2, r2, #14
 8003b74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9a:	f003 021c 	and.w	r2, r3, #28
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003bb2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00c      	beq.n	8003bd6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003bd4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
    }
  }
  return status;
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c0e:	e158      	b.n	8003ec2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2101      	movs	r1, #1
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 814a 	beq.w	8003ebc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d005      	beq.n	8003c40 <HAL_GPIO_Init+0x40>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d130      	bne.n	8003ca2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c76:	2201      	movs	r2, #1
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	091b      	lsrs	r3, r3, #4
 8003c8c:	f003 0201 	and.w	r2, r3, #1
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d017      	beq.n	8003cde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	2203      	movs	r2, #3
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d123      	bne.n	8003d32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	08da      	lsrs	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3208      	adds	r2, #8
 8003cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	220f      	movs	r2, #15
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	08da      	lsrs	r2, r3, #3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3208      	adds	r2, #8
 8003d2c:	6939      	ldr	r1, [r7, #16]
 8003d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43db      	mvns	r3, r3
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4013      	ands	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0203 	and.w	r2, r3, #3
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80a4 	beq.w	8003ebc <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003d74:	4a5a      	ldr	r2, [pc, #360]	@ (8003ee0 <HAL_GPIO_Init+0x2e0>)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	3318      	adds	r3, #24
 8003d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d80:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	220f      	movs	r2, #15
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a52      	ldr	r2, [pc, #328]	@ (8003ee4 <HAL_GPIO_Init+0x2e4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d025      	beq.n	8003dec <HAL_GPIO_Init+0x1ec>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a51      	ldr	r2, [pc, #324]	@ (8003ee8 <HAL_GPIO_Init+0x2e8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d01f      	beq.n	8003de8 <HAL_GPIO_Init+0x1e8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a50      	ldr	r2, [pc, #320]	@ (8003eec <HAL_GPIO_Init+0x2ec>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d019      	beq.n	8003de4 <HAL_GPIO_Init+0x1e4>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a4f      	ldr	r2, [pc, #316]	@ (8003ef0 <HAL_GPIO_Init+0x2f0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d013      	beq.n	8003de0 <HAL_GPIO_Init+0x1e0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a4e      	ldr	r2, [pc, #312]	@ (8003ef4 <HAL_GPIO_Init+0x2f4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00d      	beq.n	8003ddc <HAL_GPIO_Init+0x1dc>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a4d      	ldr	r2, [pc, #308]	@ (8003ef8 <HAL_GPIO_Init+0x2f8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d007      	beq.n	8003dd8 <HAL_GPIO_Init+0x1d8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a4c      	ldr	r2, [pc, #304]	@ (8003efc <HAL_GPIO_Init+0x2fc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <HAL_GPIO_Init+0x1d4>
 8003dd0:	2306      	movs	r3, #6
 8003dd2:	e00c      	b.n	8003dee <HAL_GPIO_Init+0x1ee>
 8003dd4:	2307      	movs	r3, #7
 8003dd6:	e00a      	b.n	8003dee <HAL_GPIO_Init+0x1ee>
 8003dd8:	2305      	movs	r3, #5
 8003dda:	e008      	b.n	8003dee <HAL_GPIO_Init+0x1ee>
 8003ddc:	2304      	movs	r3, #4
 8003dde:	e006      	b.n	8003dee <HAL_GPIO_Init+0x1ee>
 8003de0:	2303      	movs	r3, #3
 8003de2:	e004      	b.n	8003dee <HAL_GPIO_Init+0x1ee>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e002      	b.n	8003dee <HAL_GPIO_Init+0x1ee>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <HAL_GPIO_Init+0x1ee>
 8003dec:	2300      	movs	r3, #0
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	f002 0203 	and.w	r2, r2, #3
 8003df4:	00d2      	lsls	r2, r2, #3
 8003df6:	4093      	lsls	r3, r2
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003dfe:	4938      	ldr	r1, [pc, #224]	@ (8003ee0 <HAL_GPIO_Init+0x2e0>)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	089b      	lsrs	r3, r3, #2
 8003e04:	3318      	adds	r3, #24
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e0c:	4b34      	ldr	r3, [pc, #208]	@ (8003ee0 <HAL_GPIO_Init+0x2e0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e30:	4a2b      	ldr	r2, [pc, #172]	@ (8003ee0 <HAL_GPIO_Init+0x2e0>)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e36:	4b2a      	ldr	r3, [pc, #168]	@ (8003ee0 <HAL_GPIO_Init+0x2e0>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e5a:	4a21      	ldr	r2, [pc, #132]	@ (8003ee0 <HAL_GPIO_Init+0x2e0>)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e60:	4b1f      	ldr	r3, [pc, #124]	@ (8003ee0 <HAL_GPIO_Init+0x2e0>)
 8003e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e86:	4a16      	ldr	r2, [pc, #88]	@ (8003ee0 <HAL_GPIO_Init+0x2e0>)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8003e8e:	4b14      	ldr	r3, [pc, #80]	@ (8003ee0 <HAL_GPIO_Init+0x2e0>)
 8003e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee0 <HAL_GPIO_Init+0x2e0>)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f47f ae9f 	bne.w	8003c10 <HAL_GPIO_Init+0x10>
  }
}
 8003ed2:	bf00      	nop
 8003ed4:	bf00      	nop
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	4002f400 	.word	0x4002f400
 8003ee4:	42020000 	.word	0x42020000
 8003ee8:	42020400 	.word	0x42020400
 8003eec:	42020800 	.word	0x42020800
 8003ef0:	42020c00 	.word	0x42020c00
 8003ef4:	42021000 	.word	0x42021000
 8003ef8:	42021400 	.word	0x42021400
 8003efc:	42021800 	.word	0x42021800

08003f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	807b      	strh	r3, [r7, #2]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f10:	787b      	ldrb	r3, [r7, #1]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f1c:	e002      	b.n	8003f24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f1e:	887a      	ldrh	r2, [r7, #2]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003f34:	4b04      	ldr	r3, [pc, #16]	@ (8003f48 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40007000 	.word	0x40007000

08003f4c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003f54:	4b27      	ldr	r3, [pc, #156]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f5c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003f5e:	f000 f861 	bl	8004024 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f68:	d101      	bne.n	8003f6e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e03e      	b.n	8003fec <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003f6e:	4b21      	ldr	r3, [pc, #132]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f7a:	d101      	bne.n	8003f80 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e035      	b.n	8003fec <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d101      	bne.n	8003f8c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	e02f      	b.n	8003fec <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003f8c:	4b19      	ldr	r3, [pc, #100]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003f94:	4917      	ldr	r1, [pc, #92]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003f9c:	4b16      	ldr	r3, [pc, #88]	@ (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	4a16      	ldr	r2, [pc, #88]	@ (8003ffc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	09db      	lsrs	r3, r3, #7
 8003faa:	2232      	movs	r2, #50	@ 0x32
 8003fac:	fb02 f303 	mul.w	r3, r2, r3
 8003fb0:	4a13      	ldr	r2, [pc, #76]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	08db      	lsrs	r3, r3, #3
 8003fb8:	3301      	adds	r3, #1
 8003fba:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fbc:	e002      	b.n	8003fc4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd0:	d102      	bne.n	8003fd8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f2      	bne.n	8003fbe <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fd8:	4b06      	ldr	r3, [pc, #24]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fe4:	d101      	bne.n	8003fea <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e000      	b.n	8003fec <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40007000 	.word	0x40007000
 8003ff8:	20000000 	.word	0x20000000
 8003ffc:	0a7c5ac5 	.word	0x0a7c5ac5
 8004000:	cccccccd 	.word	0xcccccccd

08004004 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004008:	4b05      	ldr	r3, [pc, #20]	@ (8004020 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4a04      	ldr	r2, [pc, #16]	@ (8004020 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800400e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004012:	6093      	str	r3, [r2, #8]
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40007000 	.word	0x40007000

08004024 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800402a:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800403a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800403e:	607b      	str	r3, [r7, #4]
 8004040:	e00a      	b.n	8004058 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d103      	bne.n	8004054 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800404c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004050:	607b      	str	r3, [r7, #4]
 8004052:	e001      	b.n	8004058 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004054:	2300      	movs	r3, #0
 8004056:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004058:	687b      	ldr	r3, [r7, #4]
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40007000 	.word	0x40007000

0800406c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f000 bcc2 	b.w	8004a04 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004080:	4b99      	ldr	r3, [pc, #612]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 030c 	and.w	r3, r3, #12
 8004088:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800408a:	4b97      	ldr	r3, [pc, #604]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80e9 	beq.w	8004274 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d006      	beq.n	80040b6 <HAL_RCC_OscConfig+0x4a>
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b0c      	cmp	r3, #12
 80040ac:	f040 8083 	bne.w	80041b6 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d17f      	bne.n	80041b6 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040b6:	4b8c      	ldr	r3, [pc, #560]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d006      	beq.n	80040d0 <HAL_RCC_OscConfig+0x64>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d102      	bne.n	80040d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f000 bc9a 	b.w	8004a04 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040d4:	4b84      	ldr	r3, [pc, #528]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <HAL_RCC_OscConfig+0x7e>
 80040e0:	4b81      	ldr	r3, [pc, #516]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040e8:	e005      	b.n	80040f6 <HAL_RCC_OscConfig+0x8a>
 80040ea:	4b7f      	ldr	r3, [pc, #508]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80040ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040f0:	091b      	lsrs	r3, r3, #4
 80040f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d224      	bcs.n	8004144 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fe9a 	bl	8004e38 <RCC_SetFlashLatencyFromMSIRange>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f000 bc7a 	b.w	8004a04 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004110:	4b75      	ldr	r3, [pc, #468]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a74      	ldr	r2, [pc, #464]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004116:	f043 0308 	orr.w	r3, r3, #8
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	4b72      	ldr	r3, [pc, #456]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	496f      	ldr	r1, [pc, #444]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800412e:	4b6e      	ldr	r3, [pc, #440]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	496a      	ldr	r1, [pc, #424]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 800413e:	4313      	orrs	r3, r2
 8004140:	604b      	str	r3, [r1, #4]
 8004142:	e026      	b.n	8004192 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004144:	4b68      	ldr	r3, [pc, #416]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a67      	ldr	r2, [pc, #412]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 800414a:	f043 0308 	orr.w	r3, r3, #8
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	4b65      	ldr	r3, [pc, #404]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	4962      	ldr	r1, [pc, #392]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004162:	4b61      	ldr	r3, [pc, #388]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	495d      	ldr	r1, [pc, #372]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004172:	4313      	orrs	r3, r2
 8004174:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fe59 	bl	8004e38 <RCC_SetFlashLatencyFromMSIRange>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	f000 bc39 	b.w	8004a04 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004192:	f000 fe15 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 8004196:	4603      	mov	r3, r0
 8004198:	4a54      	ldr	r2, [pc, #336]	@ (80042ec <HAL_RCC_OscConfig+0x280>)
 800419a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800419c:	4b54      	ldr	r3, [pc, #336]	@ (80042f0 <HAL_RCC_OscConfig+0x284>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fd fe9b 	bl	8001edc <HAL_InitTick>
 80041a6:	4603      	mov	r3, r0
 80041a8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d060      	beq.n	8004272 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	f000 bc27 	b.w	8004a04 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d039      	beq.n	8004232 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041be:	4b4a      	ldr	r3, [pc, #296]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a49      	ldr	r2, [pc, #292]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041ca:	f7fd fed7 	bl	8001f7c <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041d0:	e00f      	b.n	80041f2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041d2:	f7fd fed3 	bl	8001f7c <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d908      	bls.n	80041f2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041e0:	4b41      	ldr	r3, [pc, #260]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d102      	bne.n	80041f2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	f000 bc09 	b.w	8004a04 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041f2:	4b3d      	ldr	r3, [pc, #244]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0e9      	beq.n	80041d2 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041fe:	4b3a      	ldr	r3, [pc, #232]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a39      	ldr	r2, [pc, #228]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004204:	f043 0308 	orr.w	r3, r3, #8
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	4b37      	ldr	r3, [pc, #220]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	4934      	ldr	r1, [pc, #208]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004218:	4313      	orrs	r3, r2
 800421a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800421c:	4b32      	ldr	r3, [pc, #200]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	492f      	ldr	r1, [pc, #188]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 800422c:	4313      	orrs	r3, r2
 800422e:	604b      	str	r3, [r1, #4]
 8004230:	e020      	b.n	8004274 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004232:	4b2d      	ldr	r3, [pc, #180]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2c      	ldr	r2, [pc, #176]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004238:	f023 0301 	bic.w	r3, r3, #1
 800423c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800423e:	f7fd fe9d 	bl	8001f7c <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004244:	e00e      	b.n	8004264 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004246:	f7fd fe99 	bl	8001f7c <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d907      	bls.n	8004264 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004254:	4b24      	ldr	r3, [pc, #144]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e3cf      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004264:	4b20      	ldr	r3, [pc, #128]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1ea      	bne.n	8004246 <HAL_RCC_OscConfig+0x1da>
 8004270:	e000      	b.n	8004274 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004272:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d07e      	beq.n	800437e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b08      	cmp	r3, #8
 8004284:	d005      	beq.n	8004292 <HAL_RCC_OscConfig+0x226>
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b0c      	cmp	r3, #12
 800428a:	d10e      	bne.n	80042aa <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b03      	cmp	r3, #3
 8004290:	d10b      	bne.n	80042aa <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004292:	4b15      	ldr	r3, [pc, #84]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d06e      	beq.n	800437c <HAL_RCC_OscConfig+0x310>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d16a      	bne.n	800437c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e3ac      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042b2:	d106      	bne.n	80042c2 <HAL_RCC_OscConfig+0x256>
 80042b4:	4b0c      	ldr	r3, [pc, #48]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a0b      	ldr	r2, [pc, #44]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80042ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	e024      	b.n	800430c <HAL_RCC_OscConfig+0x2a0>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042ca:	d113      	bne.n	80042f4 <HAL_RCC_OscConfig+0x288>
 80042cc:	4b06      	ldr	r3, [pc, #24]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a05      	ldr	r2, [pc, #20]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80042d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	4b03      	ldr	r3, [pc, #12]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a02      	ldr	r2, [pc, #8]	@ (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80042de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	e012      	b.n	800430c <HAL_RCC_OscConfig+0x2a0>
 80042e6:	bf00      	nop
 80042e8:	40021000 	.word	0x40021000
 80042ec:	20000000 	.word	0x20000000
 80042f0:	20000004 	.word	0x20000004
 80042f4:	4b8b      	ldr	r3, [pc, #556]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a8a      	ldr	r2, [pc, #552]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b88      	ldr	r3, [pc, #544]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a87      	ldr	r2, [pc, #540]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800430a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d019      	beq.n	8004348 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fd fe32 	bl	8001f7c <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800431a:	e00e      	b.n	800433a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7fd fe2e 	bl	8001f7c <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	@ 0x64
 8004328:	d907      	bls.n	800433a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800432a:	4b7e      	ldr	r3, [pc, #504]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e364      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800433a:	4b7a      	ldr	r3, [pc, #488]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0ea      	beq.n	800431c <HAL_RCC_OscConfig+0x2b0>
 8004346:	e01a      	b.n	800437e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fd fe18 	bl	8001f7c <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800434e:	e00e      	b.n	800436e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004350:	f7fd fe14 	bl	8001f7c <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	@ 0x64
 800435c:	d907      	bls.n	800436e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800435e:	4b71      	ldr	r3, [pc, #452]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e34a      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800436e:	4b6d      	ldr	r3, [pc, #436]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1ea      	bne.n	8004350 <HAL_RCC_OscConfig+0x2e4>
 800437a:	e000      	b.n	800437e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800437c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d06c      	beq.n	8004464 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b04      	cmp	r3, #4
 800438e:	d005      	beq.n	800439c <HAL_RCC_OscConfig+0x330>
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b0c      	cmp	r3, #12
 8004394:	d119      	bne.n	80043ca <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d116      	bne.n	80043ca <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800439c:	4b61      	ldr	r3, [pc, #388]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_OscConfig+0x348>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e327      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	061b      	lsls	r3, r3, #24
 80043c2:	4958      	ldr	r1, [pc, #352]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043c8:	e04c      	b.n	8004464 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d029      	beq.n	8004426 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d2:	4b54      	ldr	r3, [pc, #336]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a53      	ldr	r2, [pc, #332]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80043d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043de:	f7fd fdcd 	bl	8001f7c <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e4:	e00e      	b.n	8004404 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e6:	f7fd fdc9 	bl	8001f7c <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d907      	bls.n	8004404 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e2ff      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004404:	4b47      	ldr	r3, [pc, #284]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0ea      	beq.n	80043e6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004410:	4b44      	ldr	r3, [pc, #272]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	061b      	lsls	r3, r3, #24
 800441e:	4941      	ldr	r1, [pc, #260]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004420:	4313      	orrs	r3, r2
 8004422:	604b      	str	r3, [r1, #4]
 8004424:	e01e      	b.n	8004464 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004426:	4b3f      	ldr	r3, [pc, #252]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a3e      	ldr	r2, [pc, #248]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 800442c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fd fda3 	bl	8001f7c <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004438:	e00e      	b.n	8004458 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443a:	f7fd fd9f 	bl	8001f7c <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d907      	bls.n	8004458 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004448:	4b36      	ldr	r3, [pc, #216]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e2d5      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004458:	4b32      	ldr	r3, [pc, #200]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1ea      	bne.n	800443a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d062      	beq.n	8004536 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d038      	beq.n	80044ea <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d108      	bne.n	8004492 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004480:	4b28      	ldr	r3, [pc, #160]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004486:	4a27      	ldr	r2, [pc, #156]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004488:	f023 0310 	bic.w	r3, r3, #16
 800448c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004490:	e007      	b.n	80044a2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004492:	4b24      	ldr	r3, [pc, #144]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004494:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004498:	4a22      	ldr	r2, [pc, #136]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 800449a:	f043 0310 	orr.w	r3, r3, #16
 800449e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a2:	4b20      	ldr	r3, [pc, #128]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80044a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b2:	f7fd fd63 	bl	8001f7c <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044b8:	e00f      	b.n	80044da <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ba:	f7fd fd5f 	bl	8001f7c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b07      	cmp	r3, #7
 80044c6:	d908      	bls.n	80044da <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c8:	4b16      	ldr	r3, [pc, #88]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80044ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e294      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044da:	4b12      	ldr	r3, [pc, #72]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80044dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0e8      	beq.n	80044ba <HAL_RCC_OscConfig+0x44e>
 80044e8:	e025      	b.n	8004536 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80044ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fa:	f7fd fd3f 	bl	8001f7c <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004500:	e012      	b.n	8004528 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004502:	f7fd fd3b 	bl	8001f7c <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b07      	cmp	r3, #7
 800450e:	d90b      	bls.n	8004528 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004510:	4b04      	ldr	r3, [pc, #16]	@ (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d004      	beq.n	8004528 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e270      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004528:	4ba8      	ldr	r3, [pc, #672]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 800452a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e5      	bne.n	8004502 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 812d 	beq.w	800479e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004544:	2300      	movs	r3, #0
 8004546:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004548:	4ba0      	ldr	r3, [pc, #640]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 800454a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10d      	bne.n	8004570 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004554:	4b9d      	ldr	r3, [pc, #628]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004558:	4a9c      	ldr	r2, [pc, #624]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 800455a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800455e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004560:	4b9a      	ldr	r3, [pc, #616]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 8004562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800456c:	2301      	movs	r3, #1
 800456e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004570:	4b97      	ldr	r3, [pc, #604]	@ (80047d0 <HAL_RCC_OscConfig+0x764>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d11e      	bne.n	80045ba <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800457c:	4b94      	ldr	r3, [pc, #592]	@ (80047d0 <HAL_RCC_OscConfig+0x764>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a93      	ldr	r2, [pc, #588]	@ (80047d0 <HAL_RCC_OscConfig+0x764>)
 8004582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004586:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004588:	f7fd fcf8 	bl	8001f7c <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800458e:	e00e      	b.n	80045ae <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004590:	f7fd fcf4 	bl	8001f7c <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d907      	bls.n	80045ae <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800459e:	4b8c      	ldr	r3, [pc, #560]	@ (80047d0 <HAL_RCC_OscConfig+0x764>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e22a      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ae:	4b88      	ldr	r3, [pc, #544]	@ (80047d0 <HAL_RCC_OscConfig+0x764>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0ea      	beq.n	8004590 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d01f      	beq.n	8004606 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d010      	beq.n	80045f4 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80045d2:	4b7e      	ldr	r3, [pc, #504]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d8:	4a7c      	ldr	r2, [pc, #496]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 80045da:	f043 0304 	orr.w	r3, r3, #4
 80045de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045e2:	4b7a      	ldr	r3, [pc, #488]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e8:	4a78      	ldr	r2, [pc, #480]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045f2:	e018      	b.n	8004626 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045f4:	4b75      	ldr	r3, [pc, #468]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fa:	4a74      	ldr	r2, [pc, #464]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004604:	e00f      	b.n	8004626 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004606:	4b71      	ldr	r3, [pc, #452]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460c:	4a6f      	ldr	r2, [pc, #444]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004616:	4b6d      	ldr	r3, [pc, #436]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461c:	4a6b      	ldr	r2, [pc, #428]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 800461e:	f023 0304 	bic.w	r3, r3, #4
 8004622:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d068      	beq.n	8004700 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462e:	f7fd fca5 	bl	8001f7c <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004634:	e011      	b.n	800465a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004636:	f7fd fca1 	bl	8001f7c <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004644:	4293      	cmp	r3, r2
 8004646:	d908      	bls.n	800465a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004648:	4b60      	ldr	r3, [pc, #384]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e1d4      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465a:	4b5c      	ldr	r3, [pc, #368]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0e6      	beq.n	8004636 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004670:	2b00      	cmp	r3, #0
 8004672:	d022      	beq.n	80046ba <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004674:	4b55      	ldr	r3, [pc, #340]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467a:	4a54      	ldr	r2, [pc, #336]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 800467c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004684:	e011      	b.n	80046aa <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004686:	f7fd fc79 	bl	8001f7c <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004694:	4293      	cmp	r3, r2
 8004696:	d908      	bls.n	80046aa <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004698:	4b4c      	ldr	r3, [pc, #304]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800469e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e1ac      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80046aa:	4b48      	ldr	r3, [pc, #288]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0e6      	beq.n	8004686 <HAL_RCC_OscConfig+0x61a>
 80046b8:	e068      	b.n	800478c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046ba:	4b44      	ldr	r3, [pc, #272]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 80046bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c0:	4a42      	ldr	r2, [pc, #264]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 80046c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046ca:	e011      	b.n	80046f0 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046cc:	f7fd fc56 	bl	8001f7c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d908      	bls.n	80046f0 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046de:	4b3b      	ldr	r3, [pc, #236]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e189      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046f0:	4b36      	ldr	r3, [pc, #216]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e6      	bne.n	80046cc <HAL_RCC_OscConfig+0x660>
 80046fe:	e045      	b.n	800478c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004700:	f7fd fc3c 	bl	8001f7c <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004706:	e011      	b.n	800472c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004708:	f7fd fc38 	bl	8001f7c <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d908      	bls.n	800472c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800471a:	4b2c      	ldr	r3, [pc, #176]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e16b      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800472c:	4b27      	ldr	r3, [pc, #156]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1e6      	bne.n	8004708 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800473a:	4b24      	ldr	r3, [pc, #144]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004744:	2b00      	cmp	r3, #0
 8004746:	d021      	beq.n	800478c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004748:	4b20      	ldr	r3, [pc, #128]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474e:	4a1f      	ldr	r2, [pc, #124]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 8004750:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004758:	e011      	b.n	800477e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800475a:	f7fd fc0f 	bl	8001f7c <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004768:	4293      	cmp	r3, r2
 800476a:	d908      	bls.n	800477e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800476c:	4b17      	ldr	r3, [pc, #92]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004772:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e142      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800477e:	4b13      	ldr	r3, [pc, #76]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004784:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e6      	bne.n	800475a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800478c:	7ffb      	ldrb	r3, [r7, #31]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d105      	bne.n	800479e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004792:	4b0e      	ldr	r3, [pc, #56]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 8004794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004796:	4a0d      	ldr	r2, [pc, #52]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 8004798:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800479c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d04f      	beq.n	800484a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d028      	beq.n	8004804 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047b2:	4b06      	ldr	r3, [pc, #24]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 80047b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047b8:	4a04      	ldr	r2, [pc, #16]	@ (80047cc <HAL_RCC_OscConfig+0x760>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c2:	f7fd fbdb 	bl	8001f7c <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047c8:	e014      	b.n	80047f4 <HAL_RCC_OscConfig+0x788>
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047d4:	f7fd fbd2 	bl	8001f7c <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d908      	bls.n	80047f4 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047e2:	4b8a      	ldr	r3, [pc, #552]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 80047e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e107      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047f4:	4b85      	ldr	r3, [pc, #532]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 80047f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0e8      	beq.n	80047d4 <HAL_RCC_OscConfig+0x768>
 8004802:	e022      	b.n	800484a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004804:	4b81      	ldr	r3, [pc, #516]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 8004806:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800480a:	4a80      	ldr	r2, [pc, #512]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004814:	f7fd fbb2 	bl	8001f7c <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800481a:	e00f      	b.n	800483c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800481c:	f7fd fbae 	bl	8001f7c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d908      	bls.n	800483c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800482a:	4b78      	ldr	r3, [pc, #480]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 800482c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e0e3      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800483c:	4b73      	ldr	r3, [pc, #460]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 800483e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e8      	bne.n	800481c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 80d7 	beq.w	8004a02 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004854:	4b6d      	ldr	r3, [pc, #436]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 030c 	and.w	r3, r3, #12
 800485c:	2b0c      	cmp	r3, #12
 800485e:	f000 8091 	beq.w	8004984 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004866:	2b02      	cmp	r3, #2
 8004868:	d166      	bne.n	8004938 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486a:	4b68      	ldr	r3, [pc, #416]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a67      	ldr	r2, [pc, #412]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 8004870:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004876:	f7fd fb81 	bl	8001f7c <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800487c:	e00e      	b.n	800489c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487e:	f7fd fb7d 	bl	8001f7c <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d907      	bls.n	800489c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800488c:	4b5f      	ldr	r3, [pc, #380]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e0b3      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800489c:	4b5b      	ldr	r3, [pc, #364]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1ea      	bne.n	800487e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048a8:	4b58      	ldr	r3, [pc, #352]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	4b58      	ldr	r3, [pc, #352]	@ (8004a10 <HAL_RCC_OscConfig+0x9a4>)
 80048ae:	4013      	ands	r3, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048b8:	3a01      	subs	r2, #1
 80048ba:	0112      	lsls	r2, r2, #4
 80048bc:	4311      	orrs	r1, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048c2:	0212      	lsls	r2, r2, #8
 80048c4:	4311      	orrs	r1, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80048ca:	0852      	lsrs	r2, r2, #1
 80048cc:	3a01      	subs	r2, #1
 80048ce:	0552      	lsls	r2, r2, #21
 80048d0:	4311      	orrs	r1, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80048d6:	0852      	lsrs	r2, r2, #1
 80048d8:	3a01      	subs	r2, #1
 80048da:	0652      	lsls	r2, r2, #25
 80048dc:	4311      	orrs	r1, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048e2:	06d2      	lsls	r2, r2, #27
 80048e4:	430a      	orrs	r2, r1
 80048e6:	4949      	ldr	r1, [pc, #292]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ec:	4b47      	ldr	r3, [pc, #284]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a46      	ldr	r2, [pc, #280]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 80048f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048f8:	4b44      	ldr	r3, [pc, #272]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4a43      	ldr	r2, [pc, #268]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 80048fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004902:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fd fb3a 	bl	8001f7c <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800490a:	e00e      	b.n	800492a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490c:	f7fd fb36 	bl	8001f7c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d907      	bls.n	800492a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800491a:	4b3c      	ldr	r3, [pc, #240]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e06c      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800492a:	4b38      	ldr	r3, [pc, #224]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0ea      	beq.n	800490c <HAL_RCC_OscConfig+0x8a0>
 8004936:	e064      	b.n	8004a02 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004938:	4b34      	ldr	r3, [pc, #208]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a33      	ldr	r2, [pc, #204]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 800493e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7fd fb1a 	bl	8001f7c <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800494a:	e00e      	b.n	800496a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800494c:	f7fd fb16 	bl	8001f7c <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d907      	bls.n	800496a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800495a:	4b2c      	ldr	r3, [pc, #176]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e04c      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800496a:	4b28      	ldr	r3, [pc, #160]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1ea      	bne.n	800494c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004976:	4b25      	ldr	r3, [pc, #148]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	4924      	ldr	r1, [pc, #144]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 800497c:	4b25      	ldr	r3, [pc, #148]	@ (8004a14 <HAL_RCC_OscConfig+0x9a8>)
 800497e:	4013      	ands	r3, r2
 8004980:	60cb      	str	r3, [r1, #12]
 8004982:	e03e      	b.n	8004a02 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e039      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004990:	4b1e      	ldr	r3, [pc, #120]	@ (8004a0c <HAL_RCC_OscConfig+0x9a0>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f003 0203 	and.w	r2, r3, #3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d12c      	bne.n	80049fe <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ae:	3b01      	subs	r3, #1
 80049b0:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d123      	bne.n	80049fe <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c0:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d11b      	bne.n	80049fe <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d113      	bne.n	80049fe <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e0:	085b      	lsrs	r3, r3, #1
 80049e2:	3b01      	subs	r3, #1
 80049e4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d109      	bne.n	80049fe <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f4:	085b      	lsrs	r3, r3, #1
 80049f6:	3b01      	subs	r3, #1
 80049f8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d001      	beq.n	8004a02 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	019f800c 	.word	0x019f800c
 8004a14:	feeefffc 	.word	0xfeeefffc

08004a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e11c      	b.n	8004c6a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a30:	4b90      	ldr	r3, [pc, #576]	@ (8004c74 <HAL_RCC_ClockConfig+0x25c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d910      	bls.n	8004a60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8004c74 <HAL_RCC_ClockConfig+0x25c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 020f 	bic.w	r2, r3, #15
 8004a46:	498b      	ldr	r1, [pc, #556]	@ (8004c74 <HAL_RCC_ClockConfig+0x25c>)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4e:	4b89      	ldr	r3, [pc, #548]	@ (8004c74 <HAL_RCC_ClockConfig+0x25c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d001      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e104      	b.n	8004c6a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d010      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	4b81      	ldr	r3, [pc, #516]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d908      	bls.n	8004a8e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a7c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	497b      	ldr	r1, [pc, #492]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 8085 	beq.w	8004ba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d11f      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa4:	4b74      	ldr	r3, [pc, #464]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0da      	b.n	8004c6a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ab4:	f000 fa24 	bl	8004f00 <RCC_GetSysClockFreqFromPLLSource>
 8004ab8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4a6f      	ldr	r2, [pc, #444]	@ (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d947      	bls.n	8004b52 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d141      	bne.n	8004b52 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ace:	4b6a      	ldr	r3, [pc, #424]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ad6:	4a68      	ldr	r2, [pc, #416]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004adc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ade:	2380      	movs	r3, #128	@ 0x80
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	e036      	b.n	8004b52 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d107      	bne.n	8004afc <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aec:	4b62      	ldr	r3, [pc, #392]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d115      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0b6      	b.n	8004c6a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d107      	bne.n	8004b14 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b04:	4b5c      	ldr	r3, [pc, #368]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d109      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e0aa      	b.n	8004c6a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b14:	4b58      	ldr	r3, [pc, #352]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0a2      	b.n	8004c6a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b24:	f000 f8b0 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8004b28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4a53      	ldr	r2, [pc, #332]	@ (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d90f      	bls.n	8004b52 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004b32:	4b51      	ldr	r3, [pc, #324]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b3e:	4b4e      	ldr	r3, [pc, #312]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b46:	4a4c      	ldr	r2, [pc, #304]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b4e:	2380      	movs	r3, #128	@ 0x80
 8004b50:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b52:	4b49      	ldr	r3, [pc, #292]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f023 0203 	bic.w	r2, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4946      	ldr	r1, [pc, #280]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b64:	f7fd fa0a 	bl	8001f7c <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6a:	e013      	b.n	8004b94 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b6c:	f7fd fa06 	bl	8001f7c <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d90a      	bls.n	8004b94 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 020c 	and.w	r2, r3, #12
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d001      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e06a      	b.n	8004c6a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b94:	4b38      	ldr	r3, [pc, #224]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 020c 	and.w	r2, r3, #12
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d1e2      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b80      	cmp	r3, #128	@ 0x80
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004bac:	4b32      	ldr	r3, [pc, #200]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4a31      	ldr	r2, [pc, #196]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004bb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bb6:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d010      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d208      	bcs.n	8004be6 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd4:	4b28      	ldr	r3, [pc, #160]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4925      	ldr	r1, [pc, #148]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004be6:	4b23      	ldr	r3, [pc, #140]	@ (8004c74 <HAL_RCC_ClockConfig+0x25c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d210      	bcs.n	8004c16 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8004c74 <HAL_RCC_ClockConfig+0x25c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f023 020f 	bic.w	r2, r3, #15
 8004bfc:	491d      	ldr	r1, [pc, #116]	@ (8004c74 <HAL_RCC_ClockConfig+0x25c>)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c04:	4b1b      	ldr	r3, [pc, #108]	@ (8004c74 <HAL_RCC_ClockConfig+0x25c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e029      	b.n	8004c6a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d008      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c22:	4b15      	ldr	r3, [pc, #84]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	4912      	ldr	r1, [pc, #72]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d009      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c40:	4b0d      	ldr	r3, [pc, #52]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	490a      	ldr	r1, [pc, #40]	@ (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c54:	f000 f8b4 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	4a09      	ldr	r2, [pc, #36]	@ (8004c80 <HAL_RCC_ClockConfig+0x268>)
 8004c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c5e:	4b09      	ldr	r3, [pc, #36]	@ (8004c84 <HAL_RCC_ClockConfig+0x26c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fd f93a 	bl	8001edc <HAL_InitTick>
 8004c68:	4603      	mov	r3, r0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40022000 	.word	0x40022000
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	04c4b400 	.word	0x04c4b400
 8004c80:	20000000 	.word	0x20000000
 8004c84:	20000004 	.word	0x20000004

08004c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b089      	sub	sp, #36	@ 0x24
 8004c8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	2300      	movs	r3, #0
 8004c94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c96:	4b47      	ldr	r3, [pc, #284]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
 8004c9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ca0:	4b44      	ldr	r3, [pc, #272]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_RCC_GetSysClockFreq+0x34>
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b0c      	cmp	r3, #12
 8004cb4:	d121      	bne.n	8004cfa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d11e      	bne.n	8004cfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cbc:	4b3d      	ldr	r3, [pc, #244]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d107      	bne.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cce:	0a1b      	lsrs	r3, r3, #8
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	61fb      	str	r3, [r7, #28]
 8004cd6:	e005      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cd8:	4b36      	ldr	r3, [pc, #216]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004ce4:	4a34      	ldr	r2, [pc, #208]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x130>)
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cec:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10d      	bne.n	8004d10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cf8:	e00a      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d102      	bne.n	8004d06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d00:	4b2e      	ldr	r3, [pc, #184]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x134>)
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	e004      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d101      	bne.n	8004d10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x134>)
 8004d0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	2b0c      	cmp	r3, #12
 8004d14:	d146      	bne.n	8004da4 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004d16:	4b27      	ldr	r3, [pc, #156]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d20:	4b24      	ldr	r3, [pc, #144]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d003      	beq.n	8004d3c <HAL_RCC_GetSysClockFreq+0xb4>
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d00d      	beq.n	8004d56 <HAL_RCC_GetSysClockFreq+0xce>
 8004d3a:	e019      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x134>)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	4a1b      	ldr	r2, [pc, #108]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004d46:	68d2      	ldr	r2, [r2, #12]
 8004d48:	0a12      	lsrs	r2, r2, #8
 8004d4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	617b      	str	r3, [r7, #20]
        break;
 8004d54:	e019      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d56:	4a19      	ldr	r2, [pc, #100]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x134>)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	4a15      	ldr	r2, [pc, #84]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004d60:	68d2      	ldr	r2, [r2, #12]
 8004d62:	0a12      	lsrs	r2, r2, #8
 8004d64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d68:	fb02 f303 	mul.w	r3, r2, r3
 8004d6c:	617b      	str	r3, [r7, #20]
        break;
 8004d6e:	e00c      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	4a0e      	ldr	r2, [pc, #56]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004d7a:	68d2      	ldr	r2, [r2, #12]
 8004d7c:	0a12      	lsrs	r2, r2, #8
 8004d7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d82:	fb02 f303 	mul.w	r3, r2, r3
 8004d86:	617b      	str	r3, [r7, #20]
        break;
 8004d88:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	0e5b      	lsrs	r3, r3, #25
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	3301      	adds	r3, #1
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004da4:	69bb      	ldr	r3, [r7, #24]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3724      	adds	r7, #36	@ 0x24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40021000 	.word	0x40021000
 8004db8:	0800cf50 	.word	0x0800cf50
 8004dbc:	00f42400 	.word	0x00f42400

08004dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004dc4:	f7ff ff60 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4b05      	ldr	r3, [pc, #20]	@ (8004de0 <HAL_RCC_GetHCLKFreq+0x20>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	091b      	lsrs	r3, r3, #4
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	4903      	ldr	r1, [pc, #12]	@ (8004de4 <HAL_RCC_GetHCLKFreq+0x24>)
 8004dd6:	5ccb      	ldrb	r3, [r1, r3]
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40021000 	.word	0x40021000
 8004de4:	0800cf38 	.word	0x0800cf38

08004de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dec:	f7ff ffe8 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 8004df0:	4602      	mov	r2, r0
 8004df2:	4b05      	ldr	r3, [pc, #20]	@ (8004e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	0a1b      	lsrs	r3, r3, #8
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	4903      	ldr	r1, [pc, #12]	@ (8004e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dfe:	5ccb      	ldrb	r3, [r1, r3]
 8004e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	0800cf48 	.word	0x0800cf48

08004e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e14:	f7ff ffd4 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4b05      	ldr	r3, [pc, #20]	@ (8004e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	0adb      	lsrs	r3, r3, #11
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	4903      	ldr	r1, [pc, #12]	@ (8004e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e26:	5ccb      	ldrb	r3, [r1, r3]
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40021000 	.word	0x40021000
 8004e34:	0800cf48 	.word	0x0800cf48

08004e38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e44:	4b2c      	ldr	r3, [pc, #176]	@ (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e50:	f7ff f86e 	bl	8003f30 <HAL_PWREx_GetVoltageRange>
 8004e54:	6138      	str	r0, [r7, #16]
 8004e56:	e014      	b.n	8004e82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e58:	4b27      	ldr	r3, [pc, #156]	@ (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5c:	4a26      	ldr	r2, [pc, #152]	@ (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e62:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e64:	4b24      	ldr	r3, [pc, #144]	@ (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e70:	f7ff f85e 	bl	8003f30 <HAL_PWREx_GetVoltageRange>
 8004e74:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e76:	4b20      	ldr	r3, [pc, #128]	@ (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004e7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e80:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e8e:	d10b      	bne.n	8004ea8 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b80      	cmp	r3, #128	@ 0x80
 8004e94:	d919      	bls.n	8004eca <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2ba0      	cmp	r3, #160	@ 0xa0
 8004e9a:	d902      	bls.n	8004ea2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004ea0:	e013      	b.n	8004eca <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004ea6:	e010      	b.n	8004eca <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b80      	cmp	r3, #128	@ 0x80
 8004eac:	d902      	bls.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004eae:	2303      	movs	r3, #3
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	e00a      	b.n	8004eca <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b80      	cmp	r3, #128	@ 0x80
 8004eb8:	d102      	bne.n	8004ec0 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004eba:	2302      	movs	r3, #2
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	e004      	b.n	8004eca <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b70      	cmp	r3, #112	@ 0x70
 8004ec4:	d101      	bne.n	8004eca <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004eca:	4b0c      	ldr	r3, [pc, #48]	@ (8004efc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f023 020f 	bic.w	r2, r3, #15
 8004ed2:	490a      	ldr	r1, [pc, #40]	@ (8004efc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004eda:	4b08      	ldr	r3, [pc, #32]	@ (8004efc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e000      	b.n	8004eee <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	40022000 	.word	0x40022000

08004f00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f06:	4b31      	ldr	r3, [pc, #196]	@ (8004fcc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f10:	4b2e      	ldr	r3, [pc, #184]	@ (8004fcc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	091b      	lsrs	r3, r3, #4
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d015      	beq.n	8004f50 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d839      	bhi.n	8004f9e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d01c      	beq.n	8004f6a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d133      	bne.n	8004f9e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f36:	4a26      	ldr	r2, [pc, #152]	@ (8004fd0 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3e:	4a23      	ldr	r2, [pc, #140]	@ (8004fcc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004f40:	68d2      	ldr	r2, [r2, #12]
 8004f42:	0a12      	lsrs	r2, r2, #8
 8004f44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f48:	fb02 f303 	mul.w	r3, r2, r3
 8004f4c:	613b      	str	r3, [r7, #16]
      break;
 8004f4e:	e029      	b.n	8004fa4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f50:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd0 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f58:	4a1c      	ldr	r2, [pc, #112]	@ (8004fcc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004f5a:	68d2      	ldr	r2, [r2, #12]
 8004f5c:	0a12      	lsrs	r2, r2, #8
 8004f5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	613b      	str	r3, [r7, #16]
      break;
 8004f68:	e01c      	b.n	8004fa4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f6a:	4b18      	ldr	r3, [pc, #96]	@ (8004fcc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d107      	bne.n	8004f86 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f76:	4b15      	ldr	r3, [pc, #84]	@ (8004fcc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f7c:	0a1b      	lsrs	r3, r3, #8
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	e005      	b.n	8004f92 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f86:	4b11      	ldr	r3, [pc, #68]	@ (8004fcc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	091b      	lsrs	r3, r3, #4
 8004f8c:	f003 030f 	and.w	r3, r3, #15
 8004f90:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004f92:	4a10      	ldr	r2, [pc, #64]	@ (8004fd4 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f9a:	613b      	str	r3, [r7, #16]
        break;
 8004f9c:	e002      	b.n	8004fa4 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	613b      	str	r3, [r7, #16]
      break;
 8004fa2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004fa4:	4b09      	ldr	r3, [pc, #36]	@ (8004fcc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	0e5b      	lsrs	r3, r3, #25
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004fbe:	683b      	ldr	r3, [r7, #0]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	00f42400 	.word	0x00f42400
 8004fd4:	0800cf50 	.word	0x0800cf50

08004fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d040      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ff8:	2b80      	cmp	r3, #128	@ 0x80
 8004ffa:	d02a      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ffc:	2b80      	cmp	r3, #128	@ 0x80
 8004ffe:	d825      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005000:	2b60      	cmp	r3, #96	@ 0x60
 8005002:	d026      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005004:	2b60      	cmp	r3, #96	@ 0x60
 8005006:	d821      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005008:	2b40      	cmp	r3, #64	@ 0x40
 800500a:	d006      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800500c:	2b40      	cmp	r3, #64	@ 0x40
 800500e:	d81d      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d009      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005014:	2b20      	cmp	r3, #32
 8005016:	d010      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005018:	e018      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800501a:	4b8f      	ldr	r3, [pc, #572]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	4a8e      	ldr	r2, [pc, #568]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005024:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005026:	e015      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	2100      	movs	r1, #0
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fb56 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005038:	e00c      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3320      	adds	r3, #32
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fc33 	bl	80058ac <RCCEx_PLLSAI2_Config>
 8005046:	4603      	mov	r3, r0
 8005048:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800504a:	e003      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	77fb      	strb	r3, [r7, #31]
        break;
 8005050:	e000      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8005052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005054:	7ffb      	ldrb	r3, [r7, #31]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10b      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800505a:	4b7f      	ldr	r3, [pc, #508]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800505c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005060:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005068:	497b      	ldr	r1, [pc, #492]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005070:	e001      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005072:	7ffb      	ldrb	r3, [r7, #31]
 8005074:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d047      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800508a:	d030      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 800508c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005090:	d82a      	bhi.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005092:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005096:	d02a      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005098:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800509c:	d824      	bhi.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800509e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050a2:	d008      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80050a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050a8:	d81e      	bhi.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80050ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050b2:	d010      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80050b4:	e018      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050b6:	4b68      	ldr	r3, [pc, #416]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	4a67      	ldr	r2, [pc, #412]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c0:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80050c2:	e015      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3304      	adds	r3, #4
 80050c8:	2100      	movs	r1, #0
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fb08 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 80050d0:	4603      	mov	r3, r0
 80050d2:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80050d4:	e00c      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3320      	adds	r3, #32
 80050da:	2100      	movs	r1, #0
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 fbe5 	bl	80058ac <RCCEx_PLLSAI2_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80050e6:	e003      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	77fb      	strb	r3, [r7, #31]
        break;
 80050ec:	e000      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80050ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050f0:	7ffb      	ldrb	r3, [r7, #31]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10b      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050f6:	4b58      	ldr	r3, [pc, #352]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005104:	4954      	ldr	r1, [pc, #336]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800510c:	e001      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510e:	7ffb      	ldrb	r3, [r7, #31]
 8005110:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80ab 	beq.w	8005276 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005120:	2300      	movs	r3, #0
 8005122:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005124:	4b4c      	ldr	r3, [pc, #304]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10d      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005130:	4b49      	ldr	r3, [pc, #292]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005134:	4a48      	ldr	r2, [pc, #288]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800513a:	6593      	str	r3, [r2, #88]	@ 0x58
 800513c:	4b46      	ldr	r3, [pc, #280]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800513e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005148:	2301      	movs	r3, #1
 800514a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800514c:	4b43      	ldr	r3, [pc, #268]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a42      	ldr	r2, [pc, #264]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005158:	f7fc ff10 	bl	8001f7c <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800515e:	e00f      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005160:	f7fc ff0c 	bl	8001f7c <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d908      	bls.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800516e:	4b3b      	ldr	r3, [pc, #236]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800517e:	e006      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005180:	4b36      	ldr	r3, [pc, #216]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0e9      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800518c:	e000      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800518e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8005190:	7ffb      	ldrb	r3, [r7, #31]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d164      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005196:	4b30      	ldr	r3, [pc, #192]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051a0:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01f      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d019      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051b4:	4b28      	ldr	r3, [pc, #160]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051be:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051c0:	4b25      	ldr	r3, [pc, #148]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c6:	4a24      	ldr	r2, [pc, #144]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051d0:	4b21      	ldr	r3, [pc, #132]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d6:	4a20      	ldr	r2, [pc, #128]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01f      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f2:	f7fc fec3 	bl	8001f7c <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f8:	e012      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051fa:	f7fc febf 	bl	8001f7c <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005208:	4293      	cmp	r3, r2
 800520a:	d909      	bls.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800520c:	4b12      	ldr	r3, [pc, #72]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800521e:	e007      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005220:	4b0d      	ldr	r3, [pc, #52]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0e5      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x222>
 800522e:	e000      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005230:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005232:	7ffb      	ldrb	r3, [r7, #31]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10c      	bne.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005238:	4b07      	ldr	r3, [pc, #28]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800523a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005248:	4903      	ldr	r1, [pc, #12]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005250:	e008      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005252:	7ffb      	ldrb	r3, [r7, #31]
 8005254:	77bb      	strb	r3, [r7, #30]
 8005256:	e005      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005258:	40021000 	.word	0x40021000
 800525c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005260:	7ffb      	ldrb	r3, [r7, #31]
 8005262:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005264:	7dfb      	ldrb	r3, [r7, #23]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d105      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800526a:	4b9c      	ldr	r3, [pc, #624]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800526c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526e:	4a9b      	ldr	r2, [pc, #620]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005270:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005274:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005282:	4b96      	ldr	r3, [pc, #600]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005288:	f023 0203 	bic.w	r2, r3, #3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005290:	4992      	ldr	r1, [pc, #584]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052a4:	4b8d      	ldr	r3, [pc, #564]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052aa:	f023 020c 	bic.w	r2, r3, #12
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b2:	498a      	ldr	r1, [pc, #552]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052c6:	4b85      	ldr	r3, [pc, #532]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d4:	4981      	ldr	r1, [pc, #516]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052e8:	4b7c      	ldr	r3, [pc, #496]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f6:	4979      	ldr	r1, [pc, #484]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800530a:	4b74      	ldr	r3, [pc, #464]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005310:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005318:	4970      	ldr	r1, [pc, #448]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800532c:	4b6b      	ldr	r3, [pc, #428]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005332:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800533a:	4968      	ldr	r1, [pc, #416]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800534e:	4b63      	ldr	r3, [pc, #396]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005354:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800535c:	495f      	ldr	r1, [pc, #380]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005370:	4b5a      	ldr	r3, [pc, #360]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005376:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800537e:	4957      	ldr	r1, [pc, #348]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005392:	4b52      	ldr	r3, [pc, #328]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005398:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053a0:	494e      	ldr	r1, [pc, #312]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d031      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053bc:	d00e      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x404>
 80053be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053c2:	d814      	bhi.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x416>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d015      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80053c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053cc:	d10f      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ce:	4b43      	ldr	r3, [pc, #268]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	4a42      	ldr	r2, [pc, #264]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053d8:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80053da:	e00c      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	2100      	movs	r1, #0
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 f97c 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80053ec:	e003      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	77fb      	strb	r3, [r7, #31]
        break;
 80053f2:	e000      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80053f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053f6:	7ffb      	ldrb	r3, [r7, #31]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10b      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80053fc:	4b37      	ldr	r3, [pc, #220]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005402:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800540a:	4934      	ldr	r1, [pc, #208]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005412:	e001      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005414:	7ffb      	ldrb	r3, [r7, #31]
 8005416:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005424:	4b2d      	ldr	r3, [pc, #180]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005432:	492a      	ldr	r1, [pc, #168]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005434:	4313      	orrs	r3, r2
 8005436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005446:	4b25      	ldr	r3, [pc, #148]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800544c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005454:	4921      	ldr	r1, [pc, #132]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005468:	4b1c      	ldr	r3, [pc, #112]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800546a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	4919      	ldr	r1, [pc, #100]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800548a:	4b14      	ldr	r3, [pc, #80]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800548c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005490:	f023 0203 	bic.w	r2, r3, #3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005498:	4910      	ldr	r1, [pc, #64]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d02b      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054ac:	4b0b      	ldr	r3, [pc, #44]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ba:	4908      	ldr	r1, [pc, #32]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054ca:	d109      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054cc:	4b03      	ldr	r3, [pc, #12]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	4a02      	ldr	r2, [pc, #8]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054d6:	60d3      	str	r3, [r2, #12]
 80054d8:	e014      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80054da:	bf00      	nop
 80054dc:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054e8:	d10c      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3304      	adds	r3, #4
 80054ee:	2101      	movs	r1, #1
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 f8f5 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 80054f6:	4603      	mov	r3, r0
 80054f8:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80054fa:	7ffb      	ldrb	r3, [r7, #31]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8005500:	7ffb      	ldrb	r3, [r7, #31]
 8005502:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d04a      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005514:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005518:	d108      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x554>
 800551a:	4b70      	ldr	r3, [pc, #448]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800551c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005520:	4a6e      	ldr	r2, [pc, #440]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005522:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005526:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800552a:	e012      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800552c:	4b6b      	ldr	r3, [pc, #428]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005532:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800553a:	4968      	ldr	r1, [pc, #416]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005542:	4b66      	ldr	r3, [pc, #408]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005544:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005548:	4a64      	ldr	r2, [pc, #400]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800554a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800554e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005556:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800555a:	d10d      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3304      	adds	r3, #4
 8005560:	2101      	movs	r1, #1
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f8bc 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800556c:	7ffb      	ldrb	r3, [r7, #31]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d019      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8005572:	7ffb      	ldrb	r3, [r7, #31]
 8005574:	77bb      	strb	r3, [r7, #30]
 8005576:	e016      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800557c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005580:	d106      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005582:	4b56      	ldr	r3, [pc, #344]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	4a55      	ldr	r2, [pc, #340]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800558c:	60d3      	str	r3, [r2, #12]
 800558e:	e00a      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005594:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005598:	d105      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800559a:	4b50      	ldr	r3, [pc, #320]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	4a4f      	ldr	r2, [pc, #316]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055a4:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d028      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055b2:	4b4a      	ldr	r3, [pc, #296]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055c0:	4946      	ldr	r1, [pc, #280]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055d0:	d106      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055d2:	4b42      	ldr	r3, [pc, #264]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	4a41      	ldr	r2, [pc, #260]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055dc:	60d3      	str	r3, [r2, #12]
 80055de:	e011      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055e8:	d10c      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3304      	adds	r3, #4
 80055ee:	2101      	movs	r1, #1
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 f875 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80055fa:	7ffb      	ldrb	r3, [r7, #31]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005600:	7ffb      	ldrb	r3, [r7, #31]
 8005602:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01e      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005610:	4b32      	ldr	r3, [pc, #200]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005616:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005620:	492e      	ldr	r1, [pc, #184]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800562e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005632:	d10c      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3304      	adds	r3, #4
 8005638:	2102      	movs	r1, #2
 800563a:	4618      	mov	r0, r3
 800563c:	f000 f850 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 8005640:	4603      	mov	r3, r0
 8005642:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005644:	7ffb      	ldrb	r3, [r7, #31]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800564a:	7ffb      	ldrb	r3, [r7, #31]
 800564c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00b      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800565a:	4b20      	ldr	r3, [pc, #128]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800565c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005660:	f023 0204 	bic.w	r2, r3, #4
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800566a:	491c      	ldr	r1, [pc, #112]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00b      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800567e:	4b17      	ldr	r3, [pc, #92]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005680:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005684:	f023 0218 	bic.w	r2, r3, #24
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568e:	4913      	ldr	r1, [pc, #76]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d017      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80056a2:	4b0e      	ldr	r3, [pc, #56]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056b2:	490a      	ldr	r1, [pc, #40]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056c4:	d105      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c6:	4b05      	ldr	r3, [pc, #20]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	4a04      	ldr	r2, [pc, #16]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056d0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80056d2:	7fbb      	ldrb	r3, [r7, #30]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3720      	adds	r7, #32
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40021000 	.word	0x40021000

080056e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d018      	beq.n	8005728 <RCCEx_PLLSAI1_Config+0x48>
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d81f      	bhi.n	800573a <RCCEx_PLLSAI1_Config+0x5a>
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d002      	beq.n	8005704 <RCCEx_PLLSAI1_Config+0x24>
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d009      	beq.n	8005716 <RCCEx_PLLSAI1_Config+0x36>
 8005702:	e01a      	b.n	800573a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005704:	4b65      	ldr	r3, [pc, #404]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d117      	bne.n	8005740 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005714:	e014      	b.n	8005740 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005716:	4b61      	ldr	r3, [pc, #388]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800571e:	2b00      	cmp	r3, #0
 8005720:	d110      	bne.n	8005744 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005726:	e00d      	b.n	8005744 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005728:	4b5c      	ldr	r3, [pc, #368]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d109      	bne.n	8005748 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005738:	e006      	b.n	8005748 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	73fb      	strb	r3, [r7, #15]
      break;
 800573e:	e004      	b.n	800574a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005740:	bf00      	nop
 8005742:	e002      	b.n	800574a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005744:	bf00      	nop
 8005746:	e000      	b.n	800574a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005748:	bf00      	nop
  }

  if (status == HAL_OK)
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	2b00      	cmp	r3, #0
 800574e:	f040 809f 	bne.w	8005890 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005752:	4b52      	ldr	r3, [pc, #328]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a51      	ldr	r2, [pc, #324]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005758:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800575c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575e:	f7fc fc0d 	bl	8001f7c <HAL_GetTick>
 8005762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005764:	e00f      	b.n	8005786 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005766:	f7fc fc09 	bl	8001f7c <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d908      	bls.n	8005786 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005774:	4b49      	ldr	r3, [pc, #292]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d009      	beq.n	8005794 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005784:	e006      	b.n	8005794 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005786:	4b45      	ldr	r3, [pc, #276]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e9      	bne.n	8005766 <RCCEx_PLLSAI1_Config+0x86>
 8005792:	e000      	b.n	8005796 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005794:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d179      	bne.n	8005890 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d116      	bne.n	80057d0 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057a2:	4b3e      	ldr	r3, [pc, #248]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	4b3e      	ldr	r3, [pc, #248]	@ (80058a0 <RCCEx_PLLSAI1_Config+0x1c0>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6892      	ldr	r2, [r2, #8]
 80057ae:	0211      	lsls	r1, r2, #8
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	68d2      	ldr	r2, [r2, #12]
 80057b4:	06d2      	lsls	r2, r2, #27
 80057b6:	4311      	orrs	r1, r2
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6852      	ldr	r2, [r2, #4]
 80057bc:	3a01      	subs	r2, #1
 80057be:	0112      	lsls	r2, r2, #4
 80057c0:	4311      	orrs	r1, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	4934      	ldr	r1, [pc, #208]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	610b      	str	r3, [r1, #16]
 80057ce:	e033      	b.n	8005838 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d118      	bne.n	8005808 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057d6:	4b31      	ldr	r3, [pc, #196]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	4b32      	ldr	r3, [pc, #200]	@ (80058a4 <RCCEx_PLLSAI1_Config+0x1c4>)
 80057dc:	4013      	ands	r3, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6892      	ldr	r2, [r2, #8]
 80057e2:	0211      	lsls	r1, r2, #8
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6912      	ldr	r2, [r2, #16]
 80057e8:	0852      	lsrs	r2, r2, #1
 80057ea:	3a01      	subs	r2, #1
 80057ec:	0552      	lsls	r2, r2, #21
 80057ee:	4311      	orrs	r1, r2
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6852      	ldr	r2, [r2, #4]
 80057f4:	3a01      	subs	r2, #1
 80057f6:	0112      	lsls	r2, r2, #4
 80057f8:	4311      	orrs	r1, r2
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	4926      	ldr	r1, [pc, #152]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005802:	4313      	orrs	r3, r2
 8005804:	610b      	str	r3, [r1, #16]
 8005806:	e017      	b.n	8005838 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005808:	4b24      	ldr	r3, [pc, #144]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	4b26      	ldr	r3, [pc, #152]	@ (80058a8 <RCCEx_PLLSAI1_Config+0x1c8>)
 800580e:	4013      	ands	r3, r2
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6892      	ldr	r2, [r2, #8]
 8005814:	0211      	lsls	r1, r2, #8
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6952      	ldr	r2, [r2, #20]
 800581a:	0852      	lsrs	r2, r2, #1
 800581c:	3a01      	subs	r2, #1
 800581e:	0652      	lsls	r2, r2, #25
 8005820:	4311      	orrs	r1, r2
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6852      	ldr	r2, [r2, #4]
 8005826:	3a01      	subs	r2, #1
 8005828:	0112      	lsls	r2, r2, #4
 800582a:	4311      	orrs	r1, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6812      	ldr	r2, [r2, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	491a      	ldr	r1, [pc, #104]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005834:	4313      	orrs	r3, r2
 8005836:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005838:	4b18      	ldr	r3, [pc, #96]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a17      	ldr	r2, [pc, #92]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 800583e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005842:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005844:	f7fc fb9a 	bl	8001f7c <HAL_GetTick>
 8005848:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800584a:	e00f      	b.n	800586c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800584c:	f7fc fb96 	bl	8001f7c <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d908      	bls.n	800586c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800585a:	4b10      	ldr	r3, [pc, #64]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d109      	bne.n	800587a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800586a:	e006      	b.n	800587a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800586c:	4b0b      	ldr	r3, [pc, #44]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0e9      	beq.n	800584c <RCCEx_PLLSAI1_Config+0x16c>
 8005878:	e000      	b.n	800587c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800587a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005882:	4b06      	ldr	r3, [pc, #24]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	4904      	ldr	r1, [pc, #16]	@ (800589c <RCCEx_PLLSAI1_Config+0x1bc>)
 800588c:	4313      	orrs	r3, r2
 800588e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005890:	7bfb      	ldrb	r3, [r7, #15]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40021000 	.word	0x40021000
 80058a0:	07ff800c 	.word	0x07ff800c
 80058a4:	ff9f800c 	.word	0xff9f800c
 80058a8:	f9ff800c 	.word	0xf9ff800c

080058ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d018      	beq.n	80058f4 <RCCEx_PLLSAI2_Config+0x48>
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	d81f      	bhi.n	8005906 <RCCEx_PLLSAI2_Config+0x5a>
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d002      	beq.n	80058d0 <RCCEx_PLLSAI2_Config+0x24>
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d009      	beq.n	80058e2 <RCCEx_PLLSAI2_Config+0x36>
 80058ce:	e01a      	b.n	8005906 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058d0:	4b4a      	ldr	r3, [pc, #296]	@ (80059fc <RCCEx_PLLSAI2_Config+0x150>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d117      	bne.n	800590c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e0:	e014      	b.n	800590c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058e2:	4b46      	ldr	r3, [pc, #280]	@ (80059fc <RCCEx_PLLSAI2_Config+0x150>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d110      	bne.n	8005910 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f2:	e00d      	b.n	8005910 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80058f4:	4b41      	ldr	r3, [pc, #260]	@ (80059fc <RCCEx_PLLSAI2_Config+0x150>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d109      	bne.n	8005914 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005904:	e006      	b.n	8005914 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	73fb      	strb	r3, [r7, #15]
      break;
 800590a:	e004      	b.n	8005916 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800590c:	bf00      	nop
 800590e:	e002      	b.n	8005916 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005910:	bf00      	nop
 8005912:	e000      	b.n	8005916 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005914:	bf00      	nop
  }

  if (status == HAL_OK)
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d169      	bne.n	80059f0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800591c:	4b37      	ldr	r3, [pc, #220]	@ (80059fc <RCCEx_PLLSAI2_Config+0x150>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a36      	ldr	r2, [pc, #216]	@ (80059fc <RCCEx_PLLSAI2_Config+0x150>)
 8005922:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005928:	f7fc fb28 	bl	8001f7c <HAL_GetTick>
 800592c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800592e:	e00f      	b.n	8005950 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005930:	f7fc fb24 	bl	8001f7c <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d908      	bls.n	8005950 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800593e:	4b2f      	ldr	r3, [pc, #188]	@ (80059fc <RCCEx_PLLSAI2_Config+0x150>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d009      	beq.n	800595e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800594e:	e006      	b.n	800595e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005950:	4b2a      	ldr	r3, [pc, #168]	@ (80059fc <RCCEx_PLLSAI2_Config+0x150>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e9      	bne.n	8005930 <RCCEx_PLLSAI2_Config+0x84>
 800595c:	e000      	b.n	8005960 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800595e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d144      	bne.n	80059f0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d115      	bne.n	8005998 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800596c:	4b23      	ldr	r3, [pc, #140]	@ (80059fc <RCCEx_PLLSAI2_Config+0x150>)
 800596e:	695a      	ldr	r2, [r3, #20]
 8005970:	4b23      	ldr	r3, [pc, #140]	@ (8005a00 <RCCEx_PLLSAI2_Config+0x154>)
 8005972:	4013      	ands	r3, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6892      	ldr	r2, [r2, #8]
 8005978:	0211      	lsls	r1, r2, #8
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	68d2      	ldr	r2, [r2, #12]
 800597e:	06d2      	lsls	r2, r2, #27
 8005980:	4311      	orrs	r1, r2
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6852      	ldr	r2, [r2, #4]
 8005986:	3a01      	subs	r2, #1
 8005988:	0112      	lsls	r2, r2, #4
 800598a:	4311      	orrs	r1, r2
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6812      	ldr	r2, [r2, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	491a      	ldr	r1, [pc, #104]	@ (80059fc <RCCEx_PLLSAI2_Config+0x150>)
 8005994:	4313      	orrs	r3, r2
 8005996:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005998:	4b18      	ldr	r3, [pc, #96]	@ (80059fc <RCCEx_PLLSAI2_Config+0x150>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a17      	ldr	r2, [pc, #92]	@ (80059fc <RCCEx_PLLSAI2_Config+0x150>)
 800599e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a4:	f7fc faea 	bl	8001f7c <HAL_GetTick>
 80059a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059aa:	e00f      	b.n	80059cc <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059ac:	f7fc fae6 	bl	8001f7c <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d908      	bls.n	80059cc <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059ba:	4b10      	ldr	r3, [pc, #64]	@ (80059fc <RCCEx_PLLSAI2_Config+0x150>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d109      	bne.n	80059da <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80059ca:	e006      	b.n	80059da <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059cc:	4b0b      	ldr	r3, [pc, #44]	@ (80059fc <RCCEx_PLLSAI2_Config+0x150>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0e9      	beq.n	80059ac <RCCEx_PLLSAI2_Config+0x100>
 80059d8:	e000      	b.n	80059dc <RCCEx_PLLSAI2_Config+0x130>
          break;
 80059da:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80059e2:	4b06      	ldr	r3, [pc, #24]	@ (80059fc <RCCEx_PLLSAI2_Config+0x150>)
 80059e4:	695a      	ldr	r2, [r3, #20]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	4904      	ldr	r1, [pc, #16]	@ (80059fc <RCCEx_PLLSAI2_Config+0x150>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40021000 	.word	0x40021000
 8005a00:	07ff800c 	.word	0x07ff800c

08005a04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e042      	b.n	8005a9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d106      	bne.n	8005a2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7fb ffef 	bl	8001a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2224      	movs	r2, #36	@ 0x24
 8005a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0201 	bic.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f001 f81e 	bl	8006a90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fd1b 	bl	8006490 <UART_SetConfig>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e01b      	b.n	8005a9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f001 f89d 	bl	8006bd4 <UART_CheckIdleState>
 8005a9a:	4603      	mov	r3, r0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	@ 0x28
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d17b      	bne.n	8005bb6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <HAL_UART_Transmit+0x26>
 8005ac4:	88fb      	ldrh	r3, [r7, #6]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e074      	b.n	8005bb8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2221      	movs	r2, #33	@ 0x21
 8005ada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ade:	f7fc fa4d 	bl	8001f7c <HAL_GetTick>
 8005ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	88fa      	ldrh	r2, [r7, #6]
 8005ae8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	88fa      	ldrh	r2, [r7, #6]
 8005af0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005afc:	d108      	bne.n	8005b10 <HAL_UART_Transmit+0x6c>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d104      	bne.n	8005b10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	e003      	b.n	8005b18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b18:	e030      	b.n	8005b7c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2200      	movs	r2, #0
 8005b22:	2180      	movs	r1, #128	@ 0x80
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f001 f8ff 	bl	8006d28 <UART_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d005      	beq.n	8005b3c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e03d      	b.n	8005bb8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10b      	bne.n	8005b5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b50:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	3302      	adds	r3, #2
 8005b56:	61bb      	str	r3, [r7, #24]
 8005b58:	e007      	b.n	8005b6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	781a      	ldrb	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	3301      	adds	r3, #1
 8005b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1c8      	bne.n	8005b1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2140      	movs	r1, #64	@ 0x40
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f001 f8c8 	bl	8006d28 <UART_WaitOnFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d005      	beq.n	8005baa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e006      	b.n	8005bb8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e000      	b.n	8005bb8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005bb6:	2302      	movs	r3, #2
  }
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	@ 0x28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d137      	bne.n	8005c48 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_UART_Receive_IT+0x24>
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e030      	b.n	8005c4a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a18      	ldr	r2, [pc, #96]	@ (8005c54 <HAL_UART_Receive_IT+0x94>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d01f      	beq.n	8005c38 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d018      	beq.n	8005c38 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	613b      	str	r3, [r7, #16]
   return(result);
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c24:	623b      	str	r3, [r7, #32]
 8005c26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	69f9      	ldr	r1, [r7, #28]
 8005c2a:	6a3a      	ldr	r2, [r7, #32]
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e6      	bne.n	8005c06 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c38:	88fb      	ldrh	r3, [r7, #6]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f001 f8e0 	bl	8006e04 <UART_Start_Receive_IT>
 8005c44:	4603      	mov	r3, r0
 8005c46:	e000      	b.n	8005c4a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c48:	2302      	movs	r3, #2
  }
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3728      	adds	r7, #40	@ 0x28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40008000 	.word	0x40008000

08005c58 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b09a      	sub	sp, #104	@ 0x68
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c74:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c80:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e6      	bne.n	8005c60 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3308      	adds	r3, #8
 8005c98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ca8:	f023 0301 	bic.w	r3, r3, #1
 8005cac:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005cb6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e3      	bne.n	8005c92 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d118      	bne.n	8005d04 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f023 0310 	bic.w	r3, r3, #16
 8005ce6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cf2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e6      	bne.n	8005cd2 <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0e:	2b40      	cmp	r3, #64	@ 0x40
 8005d10:	d154      	bne.n	8005dbc <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3308      	adds	r3, #8
 8005d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3308      	adds	r3, #8
 8005d30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d32:	61ba      	str	r2, [r7, #24]
 8005d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d36:	6979      	ldr	r1, [r7, #20]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	e841 2300 	strex	r3, r2, [r1]
 8005d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1e5      	bne.n	8005d12 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d017      	beq.n	8005d80 <HAL_UART_AbortReceive_IT+0x128>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d56:	4a26      	ldr	r2, [pc, #152]	@ (8005df0 <HAL_UART_AbortReceive_IT+0x198>)
 8005d58:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fd feee 	bl	8003b42 <HAL_DMA_Abort_IT>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d03c      	beq.n	8005de6 <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	4798      	blx	r3
 8005d7e:	e032      	b.n	8005de6 <HAL_UART_AbortReceive_IT+0x18e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	220f      	movs	r2, #15
 8005d94:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699a      	ldr	r2, [r3, #24]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0208 	orr.w	r2, r2, #8
 8005da4:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fb55 	bl	8006464 <HAL_UART_AbortReceiveCpltCallback>
 8005dba:	e014      	b.n	8005de6 <HAL_UART_AbortReceive_IT+0x18e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	220f      	movs	r2, #15
 8005dd0:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fb3f 	bl	8006464 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3768      	adds	r7, #104	@ 0x68
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	08007141 	.word	0x08007141

08005df4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b0ba      	sub	sp, #232	@ 0xe8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005e1e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005e22:	4013      	ands	r3, r2
 8005e24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005e28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d11b      	bne.n	8005e68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d015      	beq.n	8005e68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d105      	bne.n	8005e54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d009      	beq.n	8005e68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 82e3 	beq.w	8006424 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
      }
      return;
 8005e66:	e2dd      	b.n	8006424 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8123 	beq.w	80060b8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005e76:	4b8d      	ldr	r3, [pc, #564]	@ (80060ac <HAL_UART_IRQHandler+0x2b8>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005e82:	4b8b      	ldr	r3, [pc, #556]	@ (80060b0 <HAL_UART_IRQHandler+0x2bc>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 8116 	beq.w	80060b8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d011      	beq.n	8005ebc <HAL_UART_IRQHandler+0xc8>
 8005e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb2:	f043 0201 	orr.w	r2, r3, #1
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d011      	beq.n	8005eec <HAL_UART_IRQHandler+0xf8>
 8005ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ee2:	f043 0204 	orr.w	r2, r3, #4
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d011      	beq.n	8005f1c <HAL_UART_IRQHandler+0x128>
 8005ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2204      	movs	r2, #4
 8005f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f12:	f043 0202 	orr.w	r2, r3, #2
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d017      	beq.n	8005f58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d105      	bne.n	8005f40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005f38:	4b5c      	ldr	r3, [pc, #368]	@ (80060ac <HAL_UART_IRQHandler+0x2b8>)
 8005f3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00b      	beq.n	8005f58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2208      	movs	r2, #8
 8005f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f4e:	f043 0208 	orr.w	r2, r3, #8
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d012      	beq.n	8005f8a <HAL_UART_IRQHandler+0x196>
 8005f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00c      	beq.n	8005f8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f80:	f043 0220 	orr.w	r2, r3, #32
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8249 	beq.w	8006428 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d013      	beq.n	8005fca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d105      	bne.n	8005fba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fde:	2b40      	cmp	r3, #64	@ 0x40
 8005fe0:	d005      	beq.n	8005fee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fe6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d054      	beq.n	8006098 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f001 f82a 	bl	8007048 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffe:	2b40      	cmp	r3, #64	@ 0x40
 8006000:	d146      	bne.n	8006090 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3308      	adds	r3, #8
 8006008:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006018:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800601c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006020:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3308      	adds	r3, #8
 800602a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800602e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006032:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800603a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1d9      	bne.n	8006002 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006054:	2b00      	cmp	r3, #0
 8006056:	d017      	beq.n	8006088 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800605e:	4a15      	ldr	r2, [pc, #84]	@ (80060b4 <HAL_UART_IRQHandler+0x2c0>)
 8006060:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006068:	4618      	mov	r0, r3
 800606a:	f7fd fd6a 	bl	8003b42 <HAL_DMA_Abort_IT>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d019      	beq.n	80060a8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800607a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006082:	4610      	mov	r0, r2
 8006084:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006086:	e00f      	b.n	80060a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f9e1 	bl	8006450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608e:	e00b      	b.n	80060a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f9dd 	bl	8006450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006096:	e007      	b.n	80060a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f9d9 	bl	8006450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80060a6:	e1bf      	b.n	8006428 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a8:	bf00      	nop
    return;
 80060aa:	e1bd      	b.n	8006428 <HAL_UART_IRQHandler+0x634>
 80060ac:	10000001 	.word	0x10000001
 80060b0:	04000120 	.word	0x04000120
 80060b4:	08007115 	.word	0x08007115

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060bc:	2b01      	cmp	r3, #1
 80060be:	f040 8153 	bne.w	8006368 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060c6:	f003 0310 	and.w	r3, r3, #16
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 814c 	beq.w	8006368 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 8145 	beq.w	8006368 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2210      	movs	r2, #16
 80060e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f0:	2b40      	cmp	r3, #64	@ 0x40
 80060f2:	f040 80bb 	bne.w	800626c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006104:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 818f 	beq.w	800642c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006114:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006118:	429a      	cmp	r2, r3
 800611a:	f080 8187 	bcs.w	800642c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006124:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b00      	cmp	r3, #0
 8006138:	f040 8087 	bne.w	800624a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006150:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006158:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006166:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800616a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006172:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800617e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1da      	bne.n	800613c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3308      	adds	r3, #8
 800618c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3308      	adds	r3, #8
 80061a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e1      	bne.n	8006186 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3308      	adds	r3, #8
 80061c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3308      	adds	r3, #8
 80061e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e3      	bne.n	80061c2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006218:	f023 0310 	bic.w	r3, r3, #16
 800621c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800622a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800622c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006230:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e4      	bne.n	8006208 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006244:	4618      	mov	r0, r3
 8006246:	f7fd fc20 	bl	8003a8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2202      	movs	r2, #2
 800624e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800625c:	b29b      	uxth	r3, r3
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	b29b      	uxth	r3, r3
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f907 	bl	8006478 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800626a:	e0df      	b.n	800642c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006278:	b29b      	uxth	r3, r3
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006286:	b29b      	uxth	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80d1 	beq.w	8006430 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800628e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 80cc 	beq.w	8006430 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	461a      	mov	r2, r3
 80062b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80062bc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e4      	bne.n	8006298 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3308      	adds	r3, #8
 80062d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	623b      	str	r3, [r7, #32]
   return(result);
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062e4:	f023 0301 	bic.w	r3, r3, #1
 80062e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3308      	adds	r3, #8
 80062f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80062f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e1      	bne.n	80062ce <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2220      	movs	r2, #32
 800630e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	60fb      	str	r3, [r7, #12]
   return(result);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0310 	bic.w	r3, r3, #16
 8006332:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006340:	61fb      	str	r3, [r7, #28]
 8006342:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	69b9      	ldr	r1, [r7, #24]
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	617b      	str	r3, [r7, #20]
   return(result);
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e4      	bne.n	800631e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800635a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f889 	bl	8006478 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006366:	e063      	b.n	8006430 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800636c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00e      	beq.n	8006392 <HAL_UART_IRQHandler+0x59e>
 8006374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d008      	beq.n	8006392 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006388:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 fc44 	bl	8007c18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006390:	e051      	b.n	8006436 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800639a:	2b00      	cmp	r3, #0
 800639c:	d014      	beq.n	80063c8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800639e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d105      	bne.n	80063b6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80063aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d008      	beq.n	80063c8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d03a      	beq.n	8006434 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	4798      	blx	r3
    }
    return;
 80063c6:	e035      	b.n	8006434 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d009      	beq.n	80063e8 <HAL_UART_IRQHandler+0x5f4>
 80063d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fed2 	bl	800718a <UART_EndTransmit_IT>
    return;
 80063e6:	e026      	b.n	8006436 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d009      	beq.n	8006408 <HAL_UART_IRQHandler+0x614>
 80063f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 fc1d 	bl	8007c40 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006406:	e016      	b.n	8006436 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d010      	beq.n	8006436 <HAL_UART_IRQHandler+0x642>
 8006414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006418:	2b00      	cmp	r3, #0
 800641a:	da0c      	bge.n	8006436 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 fc05 	bl	8007c2c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006422:	e008      	b.n	8006436 <HAL_UART_IRQHandler+0x642>
      return;
 8006424:	bf00      	nop
 8006426:	e006      	b.n	8006436 <HAL_UART_IRQHandler+0x642>
    return;
 8006428:	bf00      	nop
 800642a:	e004      	b.n	8006436 <HAL_UART_IRQHandler+0x642>
      return;
 800642c:	bf00      	nop
 800642e:	e002      	b.n	8006436 <HAL_UART_IRQHandler+0x642>
      return;
 8006430:	bf00      	nop
 8006432:	e000      	b.n	8006436 <HAL_UART_IRQHandler+0x642>
    return;
 8006434:	bf00      	nop
  }
}
 8006436:	37e8      	adds	r7, #232	@ 0xe8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006494:	b08c      	sub	sp, #48	@ 0x30
 8006496:	af00      	add	r7, sp, #0
 8006498:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	431a      	orrs	r2, r3
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4baa      	ldr	r3, [pc, #680]	@ (8006768 <UART_SetConfig+0x2d8>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	6812      	ldr	r2, [r2, #0]
 80064c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064c8:	430b      	orrs	r3, r1
 80064ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a9f      	ldr	r2, [pc, #636]	@ (800676c <UART_SetConfig+0x2dc>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d004      	beq.n	80064fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064f8:	4313      	orrs	r3, r2
 80064fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006506:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	6812      	ldr	r2, [r2, #0]
 800650e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006510:	430b      	orrs	r3, r1
 8006512:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651a:	f023 010f 	bic.w	r1, r3, #15
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a90      	ldr	r2, [pc, #576]	@ (8006770 <UART_SetConfig+0x2e0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d125      	bne.n	8006580 <UART_SetConfig+0xf0>
 8006534:	4b8f      	ldr	r3, [pc, #572]	@ (8006774 <UART_SetConfig+0x2e4>)
 8006536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	2b03      	cmp	r3, #3
 8006540:	d81a      	bhi.n	8006578 <UART_SetConfig+0xe8>
 8006542:	a201      	add	r2, pc, #4	@ (adr r2, 8006548 <UART_SetConfig+0xb8>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	08006559 	.word	0x08006559
 800654c:	08006569 	.word	0x08006569
 8006550:	08006561 	.word	0x08006561
 8006554:	08006571 	.word	0x08006571
 8006558:	2301      	movs	r3, #1
 800655a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800655e:	e116      	b.n	800678e <UART_SetConfig+0x2fe>
 8006560:	2302      	movs	r3, #2
 8006562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006566:	e112      	b.n	800678e <UART_SetConfig+0x2fe>
 8006568:	2304      	movs	r3, #4
 800656a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800656e:	e10e      	b.n	800678e <UART_SetConfig+0x2fe>
 8006570:	2308      	movs	r3, #8
 8006572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006576:	e10a      	b.n	800678e <UART_SetConfig+0x2fe>
 8006578:	2310      	movs	r3, #16
 800657a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800657e:	e106      	b.n	800678e <UART_SetConfig+0x2fe>
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a7c      	ldr	r2, [pc, #496]	@ (8006778 <UART_SetConfig+0x2e8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d138      	bne.n	80065fc <UART_SetConfig+0x16c>
 800658a:	4b7a      	ldr	r3, [pc, #488]	@ (8006774 <UART_SetConfig+0x2e4>)
 800658c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006590:	f003 030c 	and.w	r3, r3, #12
 8006594:	2b0c      	cmp	r3, #12
 8006596:	d82d      	bhi.n	80065f4 <UART_SetConfig+0x164>
 8006598:	a201      	add	r2, pc, #4	@ (adr r2, 80065a0 <UART_SetConfig+0x110>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065d5 	.word	0x080065d5
 80065a4:	080065f5 	.word	0x080065f5
 80065a8:	080065f5 	.word	0x080065f5
 80065ac:	080065f5 	.word	0x080065f5
 80065b0:	080065e5 	.word	0x080065e5
 80065b4:	080065f5 	.word	0x080065f5
 80065b8:	080065f5 	.word	0x080065f5
 80065bc:	080065f5 	.word	0x080065f5
 80065c0:	080065dd 	.word	0x080065dd
 80065c4:	080065f5 	.word	0x080065f5
 80065c8:	080065f5 	.word	0x080065f5
 80065cc:	080065f5 	.word	0x080065f5
 80065d0:	080065ed 	.word	0x080065ed
 80065d4:	2300      	movs	r3, #0
 80065d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065da:	e0d8      	b.n	800678e <UART_SetConfig+0x2fe>
 80065dc:	2302      	movs	r3, #2
 80065de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065e2:	e0d4      	b.n	800678e <UART_SetConfig+0x2fe>
 80065e4:	2304      	movs	r3, #4
 80065e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ea:	e0d0      	b.n	800678e <UART_SetConfig+0x2fe>
 80065ec:	2308      	movs	r3, #8
 80065ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065f2:	e0cc      	b.n	800678e <UART_SetConfig+0x2fe>
 80065f4:	2310      	movs	r3, #16
 80065f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065fa:	e0c8      	b.n	800678e <UART_SetConfig+0x2fe>
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a5e      	ldr	r2, [pc, #376]	@ (800677c <UART_SetConfig+0x2ec>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d125      	bne.n	8006652 <UART_SetConfig+0x1c2>
 8006606:	4b5b      	ldr	r3, [pc, #364]	@ (8006774 <UART_SetConfig+0x2e4>)
 8006608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006610:	2b30      	cmp	r3, #48	@ 0x30
 8006612:	d016      	beq.n	8006642 <UART_SetConfig+0x1b2>
 8006614:	2b30      	cmp	r3, #48	@ 0x30
 8006616:	d818      	bhi.n	800664a <UART_SetConfig+0x1ba>
 8006618:	2b20      	cmp	r3, #32
 800661a:	d00a      	beq.n	8006632 <UART_SetConfig+0x1a2>
 800661c:	2b20      	cmp	r3, #32
 800661e:	d814      	bhi.n	800664a <UART_SetConfig+0x1ba>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <UART_SetConfig+0x19a>
 8006624:	2b10      	cmp	r3, #16
 8006626:	d008      	beq.n	800663a <UART_SetConfig+0x1aa>
 8006628:	e00f      	b.n	800664a <UART_SetConfig+0x1ba>
 800662a:	2300      	movs	r3, #0
 800662c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006630:	e0ad      	b.n	800678e <UART_SetConfig+0x2fe>
 8006632:	2302      	movs	r3, #2
 8006634:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006638:	e0a9      	b.n	800678e <UART_SetConfig+0x2fe>
 800663a:	2304      	movs	r3, #4
 800663c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006640:	e0a5      	b.n	800678e <UART_SetConfig+0x2fe>
 8006642:	2308      	movs	r3, #8
 8006644:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006648:	e0a1      	b.n	800678e <UART_SetConfig+0x2fe>
 800664a:	2310      	movs	r3, #16
 800664c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006650:	e09d      	b.n	800678e <UART_SetConfig+0x2fe>
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a4a      	ldr	r2, [pc, #296]	@ (8006780 <UART_SetConfig+0x2f0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d125      	bne.n	80066a8 <UART_SetConfig+0x218>
 800665c:	4b45      	ldr	r3, [pc, #276]	@ (8006774 <UART_SetConfig+0x2e4>)
 800665e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006662:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006666:	2bc0      	cmp	r3, #192	@ 0xc0
 8006668:	d016      	beq.n	8006698 <UART_SetConfig+0x208>
 800666a:	2bc0      	cmp	r3, #192	@ 0xc0
 800666c:	d818      	bhi.n	80066a0 <UART_SetConfig+0x210>
 800666e:	2b80      	cmp	r3, #128	@ 0x80
 8006670:	d00a      	beq.n	8006688 <UART_SetConfig+0x1f8>
 8006672:	2b80      	cmp	r3, #128	@ 0x80
 8006674:	d814      	bhi.n	80066a0 <UART_SetConfig+0x210>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <UART_SetConfig+0x1f0>
 800667a:	2b40      	cmp	r3, #64	@ 0x40
 800667c:	d008      	beq.n	8006690 <UART_SetConfig+0x200>
 800667e:	e00f      	b.n	80066a0 <UART_SetConfig+0x210>
 8006680:	2300      	movs	r3, #0
 8006682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006686:	e082      	b.n	800678e <UART_SetConfig+0x2fe>
 8006688:	2302      	movs	r3, #2
 800668a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800668e:	e07e      	b.n	800678e <UART_SetConfig+0x2fe>
 8006690:	2304      	movs	r3, #4
 8006692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006696:	e07a      	b.n	800678e <UART_SetConfig+0x2fe>
 8006698:	2308      	movs	r3, #8
 800669a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800669e:	e076      	b.n	800678e <UART_SetConfig+0x2fe>
 80066a0:	2310      	movs	r3, #16
 80066a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066a6:	e072      	b.n	800678e <UART_SetConfig+0x2fe>
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a35      	ldr	r2, [pc, #212]	@ (8006784 <UART_SetConfig+0x2f4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d12a      	bne.n	8006708 <UART_SetConfig+0x278>
 80066b2:	4b30      	ldr	r3, [pc, #192]	@ (8006774 <UART_SetConfig+0x2e4>)
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066c0:	d01a      	beq.n	80066f8 <UART_SetConfig+0x268>
 80066c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066c6:	d81b      	bhi.n	8006700 <UART_SetConfig+0x270>
 80066c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066cc:	d00c      	beq.n	80066e8 <UART_SetConfig+0x258>
 80066ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066d2:	d815      	bhi.n	8006700 <UART_SetConfig+0x270>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <UART_SetConfig+0x250>
 80066d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066dc:	d008      	beq.n	80066f0 <UART_SetConfig+0x260>
 80066de:	e00f      	b.n	8006700 <UART_SetConfig+0x270>
 80066e0:	2300      	movs	r3, #0
 80066e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066e6:	e052      	b.n	800678e <UART_SetConfig+0x2fe>
 80066e8:	2302      	movs	r3, #2
 80066ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ee:	e04e      	b.n	800678e <UART_SetConfig+0x2fe>
 80066f0:	2304      	movs	r3, #4
 80066f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066f6:	e04a      	b.n	800678e <UART_SetConfig+0x2fe>
 80066f8:	2308      	movs	r3, #8
 80066fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066fe:	e046      	b.n	800678e <UART_SetConfig+0x2fe>
 8006700:	2310      	movs	r3, #16
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006706:	e042      	b.n	800678e <UART_SetConfig+0x2fe>
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a17      	ldr	r2, [pc, #92]	@ (800676c <UART_SetConfig+0x2dc>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d13a      	bne.n	8006788 <UART_SetConfig+0x2f8>
 8006712:	4b18      	ldr	r3, [pc, #96]	@ (8006774 <UART_SetConfig+0x2e4>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006718:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800671c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006720:	d01a      	beq.n	8006758 <UART_SetConfig+0x2c8>
 8006722:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006726:	d81b      	bhi.n	8006760 <UART_SetConfig+0x2d0>
 8006728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800672c:	d00c      	beq.n	8006748 <UART_SetConfig+0x2b8>
 800672e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006732:	d815      	bhi.n	8006760 <UART_SetConfig+0x2d0>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <UART_SetConfig+0x2b0>
 8006738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800673c:	d008      	beq.n	8006750 <UART_SetConfig+0x2c0>
 800673e:	e00f      	b.n	8006760 <UART_SetConfig+0x2d0>
 8006740:	2300      	movs	r3, #0
 8006742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006746:	e022      	b.n	800678e <UART_SetConfig+0x2fe>
 8006748:	2302      	movs	r3, #2
 800674a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800674e:	e01e      	b.n	800678e <UART_SetConfig+0x2fe>
 8006750:	2304      	movs	r3, #4
 8006752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006756:	e01a      	b.n	800678e <UART_SetConfig+0x2fe>
 8006758:	2308      	movs	r3, #8
 800675a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800675e:	e016      	b.n	800678e <UART_SetConfig+0x2fe>
 8006760:	2310      	movs	r3, #16
 8006762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006766:	e012      	b.n	800678e <UART_SetConfig+0x2fe>
 8006768:	cfff69f3 	.word	0xcfff69f3
 800676c:	40008000 	.word	0x40008000
 8006770:	40013800 	.word	0x40013800
 8006774:	40021000 	.word	0x40021000
 8006778:	40004400 	.word	0x40004400
 800677c:	40004800 	.word	0x40004800
 8006780:	40004c00 	.word	0x40004c00
 8006784:	40005000 	.word	0x40005000
 8006788:	2310      	movs	r3, #16
 800678a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4ab0      	ldr	r2, [pc, #704]	@ (8006a54 <UART_SetConfig+0x5c4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	f040 809b 	bne.w	80068d0 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800679a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800679e:	2b08      	cmp	r3, #8
 80067a0:	d827      	bhi.n	80067f2 <UART_SetConfig+0x362>
 80067a2:	a201      	add	r2, pc, #4	@ (adr r2, 80067a8 <UART_SetConfig+0x318>)
 80067a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a8:	080067cd 	.word	0x080067cd
 80067ac:	080067d5 	.word	0x080067d5
 80067b0:	080067dd 	.word	0x080067dd
 80067b4:	080067f3 	.word	0x080067f3
 80067b8:	080067e3 	.word	0x080067e3
 80067bc:	080067f3 	.word	0x080067f3
 80067c0:	080067f3 	.word	0x080067f3
 80067c4:	080067f3 	.word	0x080067f3
 80067c8:	080067eb 	.word	0x080067eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067cc:	f7fe fb0c 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 80067d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067d2:	e014      	b.n	80067fe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067d4:	f7fe fb1c 	bl	8004e10 <HAL_RCC_GetPCLK2Freq>
 80067d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067da:	e010      	b.n	80067fe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067dc:	4b9e      	ldr	r3, [pc, #632]	@ (8006a58 <UART_SetConfig+0x5c8>)
 80067de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067e0:	e00d      	b.n	80067fe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067e2:	f7fe fa51 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 80067e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067e8:	e009      	b.n	80067fe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067f0:	e005      	b.n	80067fe <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80067fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8130 	beq.w	8006a66 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680a:	4a94      	ldr	r2, [pc, #592]	@ (8006a5c <UART_SetConfig+0x5cc>)
 800680c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006810:	461a      	mov	r2, r3
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	fbb3 f3f2 	udiv	r3, r3, r2
 8006818:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	4613      	mov	r3, r2
 8006820:	005b      	lsls	r3, r3, #1
 8006822:	4413      	add	r3, r2
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	429a      	cmp	r2, r3
 8006828:	d305      	bcc.n	8006836 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	429a      	cmp	r2, r3
 8006834:	d903      	bls.n	800683e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800683c:	e113      	b.n	8006a66 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	2200      	movs	r2, #0
 8006842:	60bb      	str	r3, [r7, #8]
 8006844:	60fa      	str	r2, [r7, #12]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684a:	4a84      	ldr	r2, [pc, #528]	@ (8006a5c <UART_SetConfig+0x5cc>)
 800684c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006850:	b29b      	uxth	r3, r3
 8006852:	2200      	movs	r2, #0
 8006854:	603b      	str	r3, [r7, #0]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800685c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006860:	f7fa f9f6 	bl	8000c50 <__aeabi_uldivmod>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4610      	mov	r0, r2
 800686a:	4619      	mov	r1, r3
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	020b      	lsls	r3, r1, #8
 8006876:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800687a:	0202      	lsls	r2, r0, #8
 800687c:	6979      	ldr	r1, [r7, #20]
 800687e:	6849      	ldr	r1, [r1, #4]
 8006880:	0849      	lsrs	r1, r1, #1
 8006882:	2000      	movs	r0, #0
 8006884:	460c      	mov	r4, r1
 8006886:	4605      	mov	r5, r0
 8006888:	eb12 0804 	adds.w	r8, r2, r4
 800688c:	eb43 0905 	adc.w	r9, r3, r5
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	469a      	mov	sl, r3
 8006898:	4693      	mov	fp, r2
 800689a:	4652      	mov	r2, sl
 800689c:	465b      	mov	r3, fp
 800689e:	4640      	mov	r0, r8
 80068a0:	4649      	mov	r1, r9
 80068a2:	f7fa f9d5 	bl	8000c50 <__aeabi_uldivmod>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4613      	mov	r3, r2
 80068ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068b4:	d308      	bcc.n	80068c8 <UART_SetConfig+0x438>
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068bc:	d204      	bcs.n	80068c8 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6a3a      	ldr	r2, [r7, #32]
 80068c4:	60da      	str	r2, [r3, #12]
 80068c6:	e0ce      	b.n	8006a66 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80068ce:	e0ca      	b.n	8006a66 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068d8:	d166      	bne.n	80069a8 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80068da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80068de:	2b08      	cmp	r3, #8
 80068e0:	d827      	bhi.n	8006932 <UART_SetConfig+0x4a2>
 80068e2:	a201      	add	r2, pc, #4	@ (adr r2, 80068e8 <UART_SetConfig+0x458>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	0800690d 	.word	0x0800690d
 80068ec:	08006915 	.word	0x08006915
 80068f0:	0800691d 	.word	0x0800691d
 80068f4:	08006933 	.word	0x08006933
 80068f8:	08006923 	.word	0x08006923
 80068fc:	08006933 	.word	0x08006933
 8006900:	08006933 	.word	0x08006933
 8006904:	08006933 	.word	0x08006933
 8006908:	0800692b 	.word	0x0800692b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800690c:	f7fe fa6c 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 8006910:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006912:	e014      	b.n	800693e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006914:	f7fe fa7c 	bl	8004e10 <HAL_RCC_GetPCLK2Freq>
 8006918:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800691a:	e010      	b.n	800693e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800691c:	4b4e      	ldr	r3, [pc, #312]	@ (8006a58 <UART_SetConfig+0x5c8>)
 800691e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006920:	e00d      	b.n	800693e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006922:	f7fe f9b1 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8006926:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006928:	e009      	b.n	800693e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800692a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800692e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006930:	e005      	b.n	800693e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800693c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 8090 	beq.w	8006a66 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694a:	4a44      	ldr	r2, [pc, #272]	@ (8006a5c <UART_SetConfig+0x5cc>)
 800694c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006950:	461a      	mov	r2, r3
 8006952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006954:	fbb3 f3f2 	udiv	r3, r3, r2
 8006958:	005a      	lsls	r2, r3, #1
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	085b      	lsrs	r3, r3, #1
 8006960:	441a      	add	r2, r3
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	fbb2 f3f3 	udiv	r3, r2, r3
 800696a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	2b0f      	cmp	r3, #15
 8006970:	d916      	bls.n	80069a0 <UART_SetConfig+0x510>
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006978:	d212      	bcs.n	80069a0 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f023 030f 	bic.w	r3, r3, #15
 8006982:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	085b      	lsrs	r3, r3, #1
 8006988:	b29b      	uxth	r3, r3
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	b29a      	uxth	r2, r3
 8006990:	8bfb      	ldrh	r3, [r7, #30]
 8006992:	4313      	orrs	r3, r2
 8006994:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	8bfa      	ldrh	r2, [r7, #30]
 800699c:	60da      	str	r2, [r3, #12]
 800699e:	e062      	b.n	8006a66 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80069a6:	e05e      	b.n	8006a66 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d828      	bhi.n	8006a02 <UART_SetConfig+0x572>
 80069b0:	a201      	add	r2, pc, #4	@ (adr r2, 80069b8 <UART_SetConfig+0x528>)
 80069b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b6:	bf00      	nop
 80069b8:	080069dd 	.word	0x080069dd
 80069bc:	080069e5 	.word	0x080069e5
 80069c0:	080069ed 	.word	0x080069ed
 80069c4:	08006a03 	.word	0x08006a03
 80069c8:	080069f3 	.word	0x080069f3
 80069cc:	08006a03 	.word	0x08006a03
 80069d0:	08006a03 	.word	0x08006a03
 80069d4:	08006a03 	.word	0x08006a03
 80069d8:	080069fb 	.word	0x080069fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069dc:	f7fe fa04 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 80069e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069e2:	e014      	b.n	8006a0e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069e4:	f7fe fa14 	bl	8004e10 <HAL_RCC_GetPCLK2Freq>
 80069e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069ea:	e010      	b.n	8006a0e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006a58 <UART_SetConfig+0x5c8>)
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069f0:	e00d      	b.n	8006a0e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069f2:	f7fe f949 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 80069f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069f8:	e009      	b.n	8006a0e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a00:	e005      	b.n	8006a0e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a0c:	bf00      	nop
    }

    if (pclk != 0U)
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d028      	beq.n	8006a66 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a18:	4a10      	ldr	r2, [pc, #64]	@ (8006a5c <UART_SetConfig+0x5cc>)
 8006a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a22:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	085b      	lsrs	r3, r3, #1
 8006a2c:	441a      	add	r2, r3
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	2b0f      	cmp	r3, #15
 8006a3c:	d910      	bls.n	8006a60 <UART_SetConfig+0x5d0>
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a44:	d20c      	bcs.n	8006a60 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60da      	str	r2, [r3, #12]
 8006a50:	e009      	b.n	8006a66 <UART_SetConfig+0x5d6>
 8006a52:	bf00      	nop
 8006a54:	40008000 	.word	0x40008000
 8006a58:	00f42400 	.word	0x00f42400
 8006a5c:	0800cf90 	.word	0x0800cf90
      }
      else
      {
        ret = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006a82:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3730      	adds	r7, #48	@ 0x30
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9c:	f003 0308 	and.w	r3, r3, #8
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00a      	beq.n	8006afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b24:	f003 0310 	and.w	r3, r3, #16
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01a      	beq.n	8006ba6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b8e:	d10a      	bne.n	8006ba6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	605a      	str	r2, [r3, #4]
  }
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b098      	sub	sp, #96	@ 0x60
 8006bd8:	af02      	add	r7, sp, #8
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006be4:	f7fb f9ca 	bl	8001f7c <HAL_GetTick>
 8006be8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d12f      	bne.n	8006c58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c00:	2200      	movs	r2, #0
 8006c02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f88e 	bl	8006d28 <UART_WaitOnFlagUntilTimeout>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d022      	beq.n	8006c58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c30:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e6      	bne.n	8006c12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e063      	b.n	8006d20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d149      	bne.n	8006cfa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f857 	bl	8006d28 <UART_WaitOnFlagUntilTimeout>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d03c      	beq.n	8006cfa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ca0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e6      	bne.n	8006c80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3308      	adds	r3, #8
 8006cb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f023 0301 	bic.w	r3, r3, #1
 8006cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3308      	adds	r3, #8
 8006cd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cd2:	61fa      	str	r2, [r7, #28]
 8006cd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	69b9      	ldr	r1, [r7, #24]
 8006cd8:	69fa      	ldr	r2, [r7, #28]
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	617b      	str	r3, [r7, #20]
   return(result);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e5      	bne.n	8006cb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e012      	b.n	8006d20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3758      	adds	r7, #88	@ 0x58
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	4613      	mov	r3, r2
 8006d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d38:	e04f      	b.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d40:	d04b      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d42:	f7fb f91b 	bl	8001f7c <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d302      	bcc.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e04e      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d037      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b80      	cmp	r3, #128	@ 0x80
 8006d6e:	d034      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b40      	cmp	r3, #64	@ 0x40
 8006d74:	d031      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d110      	bne.n	8006da6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2208      	movs	r2, #8
 8006d8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f95b 	bl	8007048 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2208      	movs	r2, #8
 8006d96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e029      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006db0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006db4:	d111      	bne.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006dbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f941 	bl	8007048 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e00f      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	69da      	ldr	r2, [r3, #28]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4013      	ands	r3, r2
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	bf0c      	ite	eq
 8006dea:	2301      	moveq	r3, #1
 8006dec:	2300      	movne	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	461a      	mov	r2, r3
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d0a0      	beq.n	8006d3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b0a3      	sub	sp, #140	@ 0x8c
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	88fa      	ldrh	r2, [r7, #6]
 8006e1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	88fa      	ldrh	r2, [r7, #6]
 8006e24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e36:	d10e      	bne.n	8006e56 <UART_Start_Receive_IT+0x52>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d105      	bne.n	8006e4c <UART_Start_Receive_IT+0x48>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006e46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e4a:	e02d      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	22ff      	movs	r2, #255	@ 0xff
 8006e50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e54:	e028      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10d      	bne.n	8006e7a <UART_Start_Receive_IT+0x76>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d104      	bne.n	8006e70 <UART_Start_Receive_IT+0x6c>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	22ff      	movs	r2, #255	@ 0xff
 8006e6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e6e:	e01b      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	227f      	movs	r2, #127	@ 0x7f
 8006e74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e78:	e016      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e82:	d10d      	bne.n	8006ea0 <UART_Start_Receive_IT+0x9c>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d104      	bne.n	8006e96 <UART_Start_Receive_IT+0x92>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	227f      	movs	r2, #127	@ 0x7f
 8006e90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e94:	e008      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	223f      	movs	r2, #63	@ 0x3f
 8006e9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e9e:	e003      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2222      	movs	r2, #34	@ 0x22
 8006eb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3308      	adds	r3, #8
 8006ebe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ec2:	e853 3f00 	ldrex	r3, [r3]
 8006ec6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006ec8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006eca:	f043 0301 	orr.w	r3, r3, #1
 8006ece:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006edc:	673a      	str	r2, [r7, #112]	@ 0x70
 8006ede:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006ee2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006eea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e3      	bne.n	8006eb8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ef8:	d14f      	bne.n	8006f9a <UART_Start_Receive_IT+0x196>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f00:	88fa      	ldrh	r2, [r7, #6]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d349      	bcc.n	8006f9a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f0e:	d107      	bne.n	8006f20 <UART_Start_Receive_IT+0x11c>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d103      	bne.n	8006f20 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4a47      	ldr	r2, [pc, #284]	@ (8007038 <UART_Start_Receive_IT+0x234>)
 8006f1c:	675a      	str	r2, [r3, #116]	@ 0x74
 8006f1e:	e002      	b.n	8006f26 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4a46      	ldr	r2, [pc, #280]	@ (800703c <UART_Start_Receive_IT+0x238>)
 8006f24:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d01a      	beq.n	8006f64 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f52:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006f56:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e4      	bne.n	8006f2e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3308      	adds	r3, #8
 8006f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f6e:	e853 3f00 	ldrex	r3, [r3]
 8006f72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3308      	adds	r3, #8
 8006f82:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006f84:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006f86:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f8c:	e841 2300 	strex	r3, r2, [r1]
 8006f90:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e5      	bne.n	8006f64 <UART_Start_Receive_IT+0x160>
 8006f98:	e046      	b.n	8007028 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fa2:	d107      	bne.n	8006fb4 <UART_Start_Receive_IT+0x1b0>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d103      	bne.n	8006fb4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4a24      	ldr	r2, [pc, #144]	@ (8007040 <UART_Start_Receive_IT+0x23c>)
 8006fb0:	675a      	str	r2, [r3, #116]	@ 0x74
 8006fb2:	e002      	b.n	8006fba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4a23      	ldr	r2, [pc, #140]	@ (8007044 <UART_Start_Receive_IT+0x240>)
 8006fb8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d019      	beq.n	8006ff6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006fd6:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fe2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fe6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e6      	bne.n	8006fc2 <UART_Start_Receive_IT+0x1be>
 8006ff4:	e018      	b.n	8007028 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	613b      	str	r3, [r7, #16]
   return(result);
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f043 0320 	orr.w	r3, r3, #32
 800700a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007014:	623b      	str	r3, [r7, #32]
 8007016:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	69f9      	ldr	r1, [r7, #28]
 800701a:	6a3a      	ldr	r2, [r7, #32]
 800701c:	e841 2300 	strex	r3, r2, [r1]
 8007020:	61bb      	str	r3, [r7, #24]
   return(result);
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e6      	bne.n	8006ff6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	378c      	adds	r7, #140	@ 0x8c
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	080078b1 	.word	0x080078b1
 800703c:	08007551 	.word	0x08007551
 8007040:	08007399 	.word	0x08007399
 8007044:	080071e1 	.word	0x080071e1

08007048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007048:	b480      	push	{r7}
 800704a:	b095      	sub	sp, #84	@ 0x54
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007064:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800706e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007070:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007074:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800707c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e6      	bne.n	8007050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3308      	adds	r3, #8
 8007088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	61fb      	str	r3, [r7, #28]
   return(result);
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007098:	f023 0301 	bic.w	r3, r3, #1
 800709c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3308      	adds	r3, #8
 80070a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e3      	bne.n	8007082 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d118      	bne.n	80070f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	e853 3f00 	ldrex	r3, [r3]
 80070ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f023 0310 	bic.w	r3, r3, #16
 80070d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	461a      	mov	r2, r3
 80070de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070e0:	61bb      	str	r3, [r7, #24]
 80070e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e4:	6979      	ldr	r1, [r7, #20]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	e841 2300 	strex	r3, r2, [r1]
 80070ec:	613b      	str	r3, [r7, #16]
   return(result);
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1e6      	bne.n	80070c2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007108:	bf00      	nop
 800710a:	3754      	adds	r7, #84	@ 0x54
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007120:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f7ff f98c 	bl	8006450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007138:	bf00      	nop
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	220f      	movs	r2, #15
 800715c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	699a      	ldr	r2, [r3, #24]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f042 0208 	orr.w	r2, r2, #8
 800716c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2220      	movs	r2, #32
 8007172:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f7ff f971 	bl	8006464 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007182:	bf00      	nop
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b088      	sub	sp, #32
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	e853 3f00 	ldrex	r3, [r3]
 800719e:	60bb      	str	r3, [r7, #8]
   return(result);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	6979      	ldr	r1, [r7, #20]
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	e841 2300 	strex	r3, r2, [r1]
 80071bc:	613b      	str	r3, [r7, #16]
   return(result);
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e6      	bne.n	8007192 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff f932 	bl	800643c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071d8:	bf00      	nop
 80071da:	3720      	adds	r7, #32
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b09c      	sub	sp, #112	@ 0x70
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80071ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071f8:	2b22      	cmp	r3, #34	@ 0x22
 80071fa:	f040 80be 	bne.w	800737a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007204:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007208:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800720c:	b2d9      	uxtb	r1, r3
 800720e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007212:	b2da      	uxtb	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007218:	400a      	ands	r2, r1
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800722e:	b29b      	uxth	r3, r3
 8007230:	3b01      	subs	r3, #1
 8007232:	b29a      	uxth	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007240:	b29b      	uxth	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	f040 80a1 	bne.w	800738a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007250:	e853 3f00 	ldrex	r3, [r3]
 8007254:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007258:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800725c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	461a      	mov	r2, r3
 8007264:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007266:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007268:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800726c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800726e:	e841 2300 	strex	r3, r2, [r1]
 8007272:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e6      	bne.n	8007248 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3308      	adds	r3, #8
 8007280:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800728a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800728c:	f023 0301 	bic.w	r3, r3, #1
 8007290:	667b      	str	r3, [r7, #100]	@ 0x64
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3308      	adds	r3, #8
 8007298:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800729a:	647a      	str	r2, [r7, #68]	@ 0x44
 800729c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e5      	bne.n	800727a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2220      	movs	r2, #32
 80072b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a33      	ldr	r2, [pc, #204]	@ (8007394 <UART_RxISR_8BIT+0x1b4>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d01f      	beq.n	800730c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d018      	beq.n	800730c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	e853 3f00 	ldrex	r3, [r3]
 80072e6:	623b      	str	r3, [r7, #32]
   return(result);
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80072ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	461a      	mov	r2, r3
 80072f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80072fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e6      	bne.n	80072da <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007310:	2b01      	cmp	r3, #1
 8007312:	d12e      	bne.n	8007372 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	60fb      	str	r3, [r7, #12]
   return(result);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 0310 	bic.w	r3, r3, #16
 800732e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007338:	61fb      	str	r3, [r7, #28]
 800733a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	69b9      	ldr	r1, [r7, #24]
 800733e:	69fa      	ldr	r2, [r7, #28]
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	617b      	str	r3, [r7, #20]
   return(result);
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e6      	bne.n	800731a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b10      	cmp	r3, #16
 8007358:	d103      	bne.n	8007362 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2210      	movs	r2, #16
 8007360:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff f884 	bl	8006478 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007370:	e00b      	b.n	800738a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7f9 ff3c 	bl	80011f0 <HAL_UART_RxCpltCallback>
}
 8007378:	e007      	b.n	800738a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	699a      	ldr	r2, [r3, #24]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f042 0208 	orr.w	r2, r2, #8
 8007388:	619a      	str	r2, [r3, #24]
}
 800738a:	bf00      	nop
 800738c:	3770      	adds	r7, #112	@ 0x70
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	40008000 	.word	0x40008000

08007398 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b09c      	sub	sp, #112	@ 0x70
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80073a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073b0:	2b22      	cmp	r3, #34	@ 0x22
 80073b2:	f040 80be 	bne.w	8007532 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80073c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80073ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80073ce:	4013      	ands	r3, r2
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073da:	1c9a      	adds	r2, r3, #2
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	3b01      	subs	r3, #1
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f040 80a1 	bne.w	8007542 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800740e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007410:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007414:	667b      	str	r3, [r7, #100]	@ 0x64
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800741e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007420:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007424:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800742c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e6      	bne.n	8007400 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3308      	adds	r3, #8
 8007438:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	663b      	str	r3, [r7, #96]	@ 0x60
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3308      	adds	r3, #8
 8007450:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007452:	643a      	str	r2, [r7, #64]	@ 0x40
 8007454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007458:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e5      	bne.n	8007432 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2220      	movs	r2, #32
 800746a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a33      	ldr	r2, [pc, #204]	@ (800754c <UART_RxISR_16BIT+0x1b4>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d01f      	beq.n	80074c4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d018      	beq.n	80074c4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	61fb      	str	r3, [r7, #28]
   return(result);
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074b2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e6      	bne.n	8007492 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d12e      	bne.n	800752a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	60bb      	str	r3, [r7, #8]
   return(result);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f023 0310 	bic.w	r3, r3, #16
 80074e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	6979      	ldr	r1, [r7, #20]
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	613b      	str	r3, [r7, #16]
   return(result);
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e6      	bne.n	80074d2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	f003 0310 	and.w	r3, r3, #16
 800750e:	2b10      	cmp	r3, #16
 8007510:	d103      	bne.n	800751a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2210      	movs	r2, #16
 8007518:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007520:	4619      	mov	r1, r3
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fe ffa8 	bl	8006478 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007528:	e00b      	b.n	8007542 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7f9 fe60 	bl	80011f0 <HAL_UART_RxCpltCallback>
}
 8007530:	e007      	b.n	8007542 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	699a      	ldr	r2, [r3, #24]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 0208 	orr.w	r2, r2, #8
 8007540:	619a      	str	r2, [r3, #24]
}
 8007542:	bf00      	nop
 8007544:	3770      	adds	r7, #112	@ 0x70
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	40008000 	.word	0x40008000

08007550 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b0ac      	sub	sp, #176	@ 0xb0
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800755e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007586:	2b22      	cmp	r3, #34	@ 0x22
 8007588:	f040 8182 	bne.w	8007890 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007592:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007596:	e125      	b.n	80077e4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80075a2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80075a6:	b2d9      	uxtb	r1, r3
 80075a8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b2:	400a      	ands	r2, r1
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80075de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075e2:	f003 0307 	and.w	r3, r3, #7
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d053      	beq.n	8007692 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d011      	beq.n	800761a <UART_RxISR_8BIT_FIFOEN+0xca>
 80075f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00b      	beq.n	800761a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2201      	movs	r2, #1
 8007608:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007610:	f043 0201 	orr.w	r2, r3, #1
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800761a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d011      	beq.n	800764a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00b      	beq.n	800764a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2202      	movs	r2, #2
 8007638:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007640:	f043 0204 	orr.w	r2, r3, #4
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800764a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800764e:	f003 0304 	and.w	r3, r3, #4
 8007652:	2b00      	cmp	r3, #0
 8007654:	d011      	beq.n	800767a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2204      	movs	r2, #4
 8007668:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007670:	f043 0202 	orr.w	r2, r3, #2
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007680:	2b00      	cmp	r3, #0
 8007682:	d006      	beq.n	8007692 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7fe fee3 	bl	8006450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007698:	b29b      	uxth	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	f040 80a2 	bne.w	80077e4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80076ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	461a      	mov	r2, r3
 80076be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076c4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80076c8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80076d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e4      	bne.n	80076a0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3308      	adds	r3, #8
 80076dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80076e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076ec:	f023 0301 	bic.w	r3, r3, #1
 80076f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3308      	adds	r3, #8
 80076fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076fe:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007700:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007702:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007704:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800770c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e1      	bne.n	80076d6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2220      	movs	r2, #32
 8007716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a5f      	ldr	r2, [pc, #380]	@ (80078a8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d021      	beq.n	8007774 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d01a      	beq.n	8007774 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007746:	e853 3f00 	ldrex	r3, [r3]
 800774a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800774c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800774e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007752:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007760:	657b      	str	r3, [r7, #84]	@ 0x54
 8007762:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007764:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007766:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007768:	e841 2300 	strex	r3, r2, [r1]
 800776c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800776e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1e4      	bne.n	800773e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007778:	2b01      	cmp	r3, #1
 800777a:	d130      	bne.n	80077de <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800778a:	e853 3f00 	ldrex	r3, [r3]
 800778e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007792:	f023 0310 	bic.w	r3, r3, #16
 8007796:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80077a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e4      	bne.n	8007782 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	f003 0310 	and.w	r3, r3, #16
 80077c2:	2b10      	cmp	r3, #16
 80077c4:	d103      	bne.n	80077ce <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2210      	movs	r2, #16
 80077cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7fe fe4e 	bl	8006478 <HAL_UARTEx_RxEventCallback>
 80077dc:	e002      	b.n	80077e4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7f9 fd06 	bl	80011f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077e4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d006      	beq.n	80077fa <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80077ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077f0:	f003 0320 	and.w	r3, r3, #32
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f47f aecf 	bne.w	8007598 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007800:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007804:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007808:	2b00      	cmp	r3, #0
 800780a:	d049      	beq.n	80078a0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007812:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007816:	429a      	cmp	r2, r3
 8007818:	d242      	bcs.n	80078a0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3308      	adds	r3, #8
 8007820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	61fb      	str	r3, [r7, #28]
   return(result);
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007830:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3308      	adds	r3, #8
 800783a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800783e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007840:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800784c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e3      	bne.n	800781a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a15      	ldr	r2, [pc, #84]	@ (80078ac <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007856:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	60bb      	str	r3, [r7, #8]
   return(result);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f043 0320 	orr.w	r3, r3, #32
 800786c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	461a      	mov	r2, r3
 8007876:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800787a:	61bb      	str	r3, [r7, #24]
 800787c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	6979      	ldr	r1, [r7, #20]
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	613b      	str	r3, [r7, #16]
   return(result);
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e4      	bne.n	8007858 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800788e:	e007      	b.n	80078a0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	699a      	ldr	r2, [r3, #24]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0208 	orr.w	r2, r2, #8
 800789e:	619a      	str	r2, [r3, #24]
}
 80078a0:	bf00      	nop
 80078a2:	37b0      	adds	r7, #176	@ 0xb0
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	40008000 	.word	0x40008000
 80078ac:	080071e1 	.word	0x080071e1

080078b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b0ae      	sub	sp, #184	@ 0xb8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80078be:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078e6:	2b22      	cmp	r3, #34	@ 0x22
 80078e8:	f040 8186 	bne.w	8007bf8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80078f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078f6:	e129      	b.n	8007b4c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007906:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800790a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800790e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007912:	4013      	ands	r3, r2
 8007914:	b29a      	uxth	r2, r3
 8007916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800791a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007920:	1c9a      	adds	r2, r3, #2
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800792c:	b29b      	uxth	r3, r3
 800792e:	3b01      	subs	r3, #1
 8007930:	b29a      	uxth	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007942:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007946:	f003 0307 	and.w	r3, r3, #7
 800794a:	2b00      	cmp	r3, #0
 800794c:	d053      	beq.n	80079f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800794e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d011      	beq.n	800797e <UART_RxISR_16BIT_FIFOEN+0xce>
 800795a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800795e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00b      	beq.n	800797e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2201      	movs	r2, #1
 800796c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007974:	f043 0201 	orr.w	r2, r3, #1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800797e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d011      	beq.n	80079ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800798a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00b      	beq.n	80079ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2202      	movs	r2, #2
 800799c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a4:	f043 0204 	orr.w	r2, r3, #4
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80079b2:	f003 0304 	and.w	r3, r3, #4
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d011      	beq.n	80079de <UART_RxISR_16BIT_FIFOEN+0x12e>
 80079ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00b      	beq.n	80079de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2204      	movs	r2, #4
 80079cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079d4:	f043 0202 	orr.w	r2, r3, #2
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d006      	beq.n	80079f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7fe fd31 	bl	8006450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f040 80a4 	bne.w	8007b4c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a0c:	e853 3f00 	ldrex	r3, [r3]
 8007a10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e2      	bne.n	8007a04 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3308      	adds	r3, #8
 8007a44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a54:	f023 0301 	bic.w	r3, r3, #1
 8007a58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3308      	adds	r3, #8
 8007a62:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007a66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a6e:	e841 2300 	strex	r3, r2, [r1]
 8007a72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e1      	bne.n	8007a3e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a5f      	ldr	r2, [pc, #380]	@ (8007c10 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d021      	beq.n	8007adc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d01a      	beq.n	8007adc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ab6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007aba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ac8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007aca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007acc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ace:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ad0:	e841 2300 	strex	r3, r2, [r1]
 8007ad4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e4      	bne.n	8007aa6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d130      	bne.n	8007b46 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af2:	e853 3f00 	ldrex	r3, [r3]
 8007af6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007afa:	f023 0310 	bic.w	r3, r3, #16
 8007afe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e4      	bne.n	8007aea <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	f003 0310 	and.w	r3, r3, #16
 8007b2a:	2b10      	cmp	r3, #16
 8007b2c:	d103      	bne.n	8007b36 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2210      	movs	r2, #16
 8007b34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7fe fc9a 	bl	8006478 <HAL_UARTEx_RxEventCallback>
 8007b44:	e002      	b.n	8007b4c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7f9 fb52 	bl	80011f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b4c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d006      	beq.n	8007b62 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007b54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b58:	f003 0320 	and.w	r3, r3, #32
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f47f aecb 	bne.w	80078f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b68:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b6c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d049      	beq.n	8007c08 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b7a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d242      	bcs.n	8007c08 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3308      	adds	r3, #8
 8007b88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	623b      	str	r3, [r7, #32]
   return(result);
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007ba6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e3      	bne.n	8007b82 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a15      	ldr	r2, [pc, #84]	@ (8007c14 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007bbe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f043 0320 	orr.w	r3, r3, #32
 8007bd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007be2:	61fb      	str	r3, [r7, #28]
 8007be4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	69b9      	ldr	r1, [r7, #24]
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	617b      	str	r3, [r7, #20]
   return(result);
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e4      	bne.n	8007bc0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bf6:	e007      	b.n	8007c08 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f042 0208 	orr.w	r2, r2, #8
 8007c06:	619a      	str	r2, [r3, #24]
}
 8007c08:	bf00      	nop
 8007c0a:	37b8      	adds	r7, #184	@ 0xb8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	40008000 	.word	0x40008000
 8007c14:	08007399 	.word	0x08007399

08007c18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <HAL_UARTEx_DisableFifoMode+0x16>
 8007c66:	2302      	movs	r3, #2
 8007c68:	e027      	b.n	8007cba <HAL_UARTEx_DisableFifoMode+0x66>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2224      	movs	r2, #36	@ 0x24
 8007c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 0201 	bic.w	r2, r2, #1
 8007c90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d101      	bne.n	8007cde <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007cda:	2302      	movs	r3, #2
 8007cdc:	e02d      	b.n	8007d3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2224      	movs	r2, #36	@ 0x24
 8007cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 0201 	bic.w	r2, r2, #1
 8007d04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f850 	bl	8007dc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e02d      	b.n	8007db6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2224      	movs	r2, #36	@ 0x24
 8007d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 0201 	bic.w	r2, r2, #1
 8007d80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f812 	bl	8007dc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2220      	movs	r2, #32
 8007da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
	...

08007dc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d108      	bne.n	8007de2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007de0:	e031      	b.n	8007e46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007de2:	2308      	movs	r3, #8
 8007de4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007de6:	2308      	movs	r3, #8
 8007de8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	0e5b      	lsrs	r3, r3, #25
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	f003 0307 	and.w	r3, r3, #7
 8007df8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	0f5b      	lsrs	r3, r3, #29
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	f003 0307 	and.w	r3, r3, #7
 8007e08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e0a:	7bbb      	ldrb	r3, [r7, #14]
 8007e0c:	7b3a      	ldrb	r2, [r7, #12]
 8007e0e:	4911      	ldr	r1, [pc, #68]	@ (8007e54 <UARTEx_SetNbDataToProcess+0x94>)
 8007e10:	5c8a      	ldrb	r2, [r1, r2]
 8007e12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e16:	7b3a      	ldrb	r2, [r7, #12]
 8007e18:	490f      	ldr	r1, [pc, #60]	@ (8007e58 <UARTEx_SetNbDataToProcess+0x98>)
 8007e1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
 8007e2a:	7b7a      	ldrb	r2, [r7, #13]
 8007e2c:	4909      	ldr	r1, [pc, #36]	@ (8007e54 <UARTEx_SetNbDataToProcess+0x94>)
 8007e2e:	5c8a      	ldrb	r2, [r1, r2]
 8007e30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e34:	7b7a      	ldrb	r2, [r7, #13]
 8007e36:	4908      	ldr	r1, [pc, #32]	@ (8007e58 <UARTEx_SetNbDataToProcess+0x98>)
 8007e38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007e46:	bf00      	nop
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	0800cfa8 	.word	0x0800cfa8
 8007e58:	0800cfb0 	.word	0x0800cfb0

08007e5c <__cvt>:
 8007e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e60:	ec57 6b10 	vmov	r6, r7, d0
 8007e64:	2f00      	cmp	r7, #0
 8007e66:	460c      	mov	r4, r1
 8007e68:	4619      	mov	r1, r3
 8007e6a:	463b      	mov	r3, r7
 8007e6c:	bfb4      	ite	lt
 8007e6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007e72:	2300      	movge	r3, #0
 8007e74:	4691      	mov	r9, r2
 8007e76:	bfbf      	itttt	lt
 8007e78:	4632      	movlt	r2, r6
 8007e7a:	461f      	movlt	r7, r3
 8007e7c:	232d      	movlt	r3, #45	@ 0x2d
 8007e7e:	4616      	movlt	r6, r2
 8007e80:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007e84:	700b      	strb	r3, [r1, #0]
 8007e86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e88:	f023 0820 	bic.w	r8, r3, #32
 8007e8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e90:	d005      	beq.n	8007e9e <__cvt+0x42>
 8007e92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e96:	d100      	bne.n	8007e9a <__cvt+0x3e>
 8007e98:	3401      	adds	r4, #1
 8007e9a:	2102      	movs	r1, #2
 8007e9c:	e000      	b.n	8007ea0 <__cvt+0x44>
 8007e9e:	2103      	movs	r1, #3
 8007ea0:	ab03      	add	r3, sp, #12
 8007ea2:	4622      	mov	r2, r4
 8007ea4:	9301      	str	r3, [sp, #4]
 8007ea6:	ab02      	add	r3, sp, #8
 8007ea8:	ec47 6b10 	vmov	d0, r6, r7
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	4653      	mov	r3, sl
 8007eb0:	f001 f912 	bl	80090d8 <_dtoa_r>
 8007eb4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007eb8:	4605      	mov	r5, r0
 8007eba:	d119      	bne.n	8007ef0 <__cvt+0x94>
 8007ebc:	f019 0f01 	tst.w	r9, #1
 8007ec0:	d00e      	beq.n	8007ee0 <__cvt+0x84>
 8007ec2:	eb00 0904 	add.w	r9, r0, r4
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	2300      	movs	r3, #0
 8007eca:	4630      	mov	r0, r6
 8007ecc:	4639      	mov	r1, r7
 8007ece:	f7f8 fddf 	bl	8000a90 <__aeabi_dcmpeq>
 8007ed2:	b108      	cbz	r0, 8007ed8 <__cvt+0x7c>
 8007ed4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ed8:	2230      	movs	r2, #48	@ 0x30
 8007eda:	9b03      	ldr	r3, [sp, #12]
 8007edc:	454b      	cmp	r3, r9
 8007ede:	d31e      	bcc.n	8007f1e <__cvt+0xc2>
 8007ee0:	9b03      	ldr	r3, [sp, #12]
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ee6:	1b5b      	subs	r3, r3, r5
 8007ee8:	6013      	str	r3, [r2, #0]
 8007eea:	b004      	add	sp, #16
 8007eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ef4:	eb00 0904 	add.w	r9, r0, r4
 8007ef8:	d1e5      	bne.n	8007ec6 <__cvt+0x6a>
 8007efa:	7803      	ldrb	r3, [r0, #0]
 8007efc:	2b30      	cmp	r3, #48	@ 0x30
 8007efe:	d10a      	bne.n	8007f16 <__cvt+0xba>
 8007f00:	2200      	movs	r2, #0
 8007f02:	2300      	movs	r3, #0
 8007f04:	4630      	mov	r0, r6
 8007f06:	4639      	mov	r1, r7
 8007f08:	f7f8 fdc2 	bl	8000a90 <__aeabi_dcmpeq>
 8007f0c:	b918      	cbnz	r0, 8007f16 <__cvt+0xba>
 8007f0e:	f1c4 0401 	rsb	r4, r4, #1
 8007f12:	f8ca 4000 	str.w	r4, [sl]
 8007f16:	f8da 3000 	ldr.w	r3, [sl]
 8007f1a:	4499      	add	r9, r3
 8007f1c:	e7d3      	b.n	8007ec6 <__cvt+0x6a>
 8007f1e:	1c59      	adds	r1, r3, #1
 8007f20:	9103      	str	r1, [sp, #12]
 8007f22:	701a      	strb	r2, [r3, #0]
 8007f24:	e7d9      	b.n	8007eda <__cvt+0x7e>

08007f26 <__exponent>:
 8007f26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f28:	2900      	cmp	r1, #0
 8007f2a:	7002      	strb	r2, [r0, #0]
 8007f2c:	bfba      	itte	lt
 8007f2e:	4249      	neglt	r1, r1
 8007f30:	232d      	movlt	r3, #45	@ 0x2d
 8007f32:	232b      	movge	r3, #43	@ 0x2b
 8007f34:	2909      	cmp	r1, #9
 8007f36:	7043      	strb	r3, [r0, #1]
 8007f38:	dd28      	ble.n	8007f8c <__exponent+0x66>
 8007f3a:	f10d 0307 	add.w	r3, sp, #7
 8007f3e:	270a      	movs	r7, #10
 8007f40:	461d      	mov	r5, r3
 8007f42:	461a      	mov	r2, r3
 8007f44:	3b01      	subs	r3, #1
 8007f46:	fbb1 f6f7 	udiv	r6, r1, r7
 8007f4a:	fb07 1416 	mls	r4, r7, r6, r1
 8007f4e:	3430      	adds	r4, #48	@ 0x30
 8007f50:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007f54:	460c      	mov	r4, r1
 8007f56:	4631      	mov	r1, r6
 8007f58:	2c63      	cmp	r4, #99	@ 0x63
 8007f5a:	dcf2      	bgt.n	8007f42 <__exponent+0x1c>
 8007f5c:	3130      	adds	r1, #48	@ 0x30
 8007f5e:	1e94      	subs	r4, r2, #2
 8007f60:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f64:	1c41      	adds	r1, r0, #1
 8007f66:	4623      	mov	r3, r4
 8007f68:	42ab      	cmp	r3, r5
 8007f6a:	d30a      	bcc.n	8007f82 <__exponent+0x5c>
 8007f6c:	f10d 0309 	add.w	r3, sp, #9
 8007f70:	1a9b      	subs	r3, r3, r2
 8007f72:	42ac      	cmp	r4, r5
 8007f74:	bf88      	it	hi
 8007f76:	2300      	movhi	r3, #0
 8007f78:	3302      	adds	r3, #2
 8007f7a:	4403      	add	r3, r0
 8007f7c:	1a18      	subs	r0, r3, r0
 8007f7e:	b003      	add	sp, #12
 8007f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f82:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f86:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f8a:	e7ed      	b.n	8007f68 <__exponent+0x42>
 8007f8c:	2330      	movs	r3, #48	@ 0x30
 8007f8e:	3130      	adds	r1, #48	@ 0x30
 8007f90:	7083      	strb	r3, [r0, #2]
 8007f92:	1d03      	adds	r3, r0, #4
 8007f94:	70c1      	strb	r1, [r0, #3]
 8007f96:	e7f1      	b.n	8007f7c <__exponent+0x56>

08007f98 <_printf_float>:
 8007f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	b08d      	sub	sp, #52	@ 0x34
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	4616      	mov	r6, r2
 8007fa2:	461f      	mov	r7, r3
 8007fa4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007fa8:	4605      	mov	r5, r0
 8007faa:	f000 ff79 	bl	8008ea0 <_localeconv_r>
 8007fae:	6803      	ldr	r3, [r0, #0]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	9304      	str	r3, [sp, #16]
 8007fb4:	f7f8 f940 	bl	8000238 <strlen>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9005      	str	r0, [sp, #20]
 8007fbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8007fc2:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007fc6:	3307      	adds	r3, #7
 8007fc8:	f8d4 b000 	ldr.w	fp, [r4]
 8007fcc:	f023 0307 	bic.w	r3, r3, #7
 8007fd0:	f103 0208 	add.w	r2, r3, #8
 8007fd4:	f8c8 2000 	str.w	r2, [r8]
 8007fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fe0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007fe4:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fe8:	9307      	str	r3, [sp, #28]
 8007fea:	4b9d      	ldr	r3, [pc, #628]	@ (8008260 <_printf_float+0x2c8>)
 8007fec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ff0:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007ff4:	f7f8 fd7e 	bl	8000af4 <__aeabi_dcmpun>
 8007ff8:	bb70      	cbnz	r0, 8008058 <_printf_float+0xc0>
 8007ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffe:	4b98      	ldr	r3, [pc, #608]	@ (8008260 <_printf_float+0x2c8>)
 8008000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008004:	f7f8 fd58 	bl	8000ab8 <__aeabi_dcmple>
 8008008:	bb30      	cbnz	r0, 8008058 <_printf_float+0xc0>
 800800a:	2200      	movs	r2, #0
 800800c:	2300      	movs	r3, #0
 800800e:	4640      	mov	r0, r8
 8008010:	4649      	mov	r1, r9
 8008012:	f7f8 fd47 	bl	8000aa4 <__aeabi_dcmplt>
 8008016:	b110      	cbz	r0, 800801e <_printf_float+0x86>
 8008018:	232d      	movs	r3, #45	@ 0x2d
 800801a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800801e:	4a91      	ldr	r2, [pc, #580]	@ (8008264 <_printf_float+0x2cc>)
 8008020:	4b91      	ldr	r3, [pc, #580]	@ (8008268 <_printf_float+0x2d0>)
 8008022:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008026:	bf8c      	ite	hi
 8008028:	4690      	movhi	r8, r2
 800802a:	4698      	movls	r8, r3
 800802c:	2303      	movs	r3, #3
 800802e:	f04f 0900 	mov.w	r9, #0
 8008032:	6123      	str	r3, [r4, #16]
 8008034:	f02b 0304 	bic.w	r3, fp, #4
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	4633      	mov	r3, r6
 800803c:	aa0b      	add	r2, sp, #44	@ 0x2c
 800803e:	4621      	mov	r1, r4
 8008040:	4628      	mov	r0, r5
 8008042:	9700      	str	r7, [sp, #0]
 8008044:	f000 f9d2 	bl	80083ec <_printf_common>
 8008048:	3001      	adds	r0, #1
 800804a:	f040 808d 	bne.w	8008168 <_printf_float+0x1d0>
 800804e:	f04f 30ff 	mov.w	r0, #4294967295
 8008052:	b00d      	add	sp, #52	@ 0x34
 8008054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008058:	4642      	mov	r2, r8
 800805a:	464b      	mov	r3, r9
 800805c:	4640      	mov	r0, r8
 800805e:	4649      	mov	r1, r9
 8008060:	f7f8 fd48 	bl	8000af4 <__aeabi_dcmpun>
 8008064:	b140      	cbz	r0, 8008078 <_printf_float+0xe0>
 8008066:	464b      	mov	r3, r9
 8008068:	4a80      	ldr	r2, [pc, #512]	@ (800826c <_printf_float+0x2d4>)
 800806a:	2b00      	cmp	r3, #0
 800806c:	bfbc      	itt	lt
 800806e:	232d      	movlt	r3, #45	@ 0x2d
 8008070:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008074:	4b7e      	ldr	r3, [pc, #504]	@ (8008270 <_printf_float+0x2d8>)
 8008076:	e7d4      	b.n	8008022 <_printf_float+0x8a>
 8008078:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800807c:	6863      	ldr	r3, [r4, #4]
 800807e:	9206      	str	r2, [sp, #24]
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	d13b      	bne.n	80080fc <_printf_float+0x164>
 8008084:	2306      	movs	r3, #6
 8008086:	6063      	str	r3, [r4, #4]
 8008088:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800808c:	2300      	movs	r3, #0
 800808e:	4628      	mov	r0, r5
 8008090:	6022      	str	r2, [r4, #0]
 8008092:	9303      	str	r3, [sp, #12]
 8008094:	ab0a      	add	r3, sp, #40	@ 0x28
 8008096:	e9cd a301 	strd	sl, r3, [sp, #4]
 800809a:	ab09      	add	r3, sp, #36	@ 0x24
 800809c:	ec49 8b10 	vmov	d0, r8, r9
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80080a6:	6861      	ldr	r1, [r4, #4]
 80080a8:	f7ff fed8 	bl	8007e5c <__cvt>
 80080ac:	9b06      	ldr	r3, [sp, #24]
 80080ae:	4680      	mov	r8, r0
 80080b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80080b2:	2b47      	cmp	r3, #71	@ 0x47
 80080b4:	d129      	bne.n	800810a <_printf_float+0x172>
 80080b6:	1cc8      	adds	r0, r1, #3
 80080b8:	db02      	blt.n	80080c0 <_printf_float+0x128>
 80080ba:	6863      	ldr	r3, [r4, #4]
 80080bc:	4299      	cmp	r1, r3
 80080be:	dd41      	ble.n	8008144 <_printf_float+0x1ac>
 80080c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80080c4:	fa5f fa8a 	uxtb.w	sl, sl
 80080c8:	3901      	subs	r1, #1
 80080ca:	4652      	mov	r2, sl
 80080cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80080d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80080d2:	f7ff ff28 	bl	8007f26 <__exponent>
 80080d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080d8:	4681      	mov	r9, r0
 80080da:	1813      	adds	r3, r2, r0
 80080dc:	2a01      	cmp	r2, #1
 80080de:	6123      	str	r3, [r4, #16]
 80080e0:	dc02      	bgt.n	80080e8 <_printf_float+0x150>
 80080e2:	6822      	ldr	r2, [r4, #0]
 80080e4:	07d2      	lsls	r2, r2, #31
 80080e6:	d501      	bpl.n	80080ec <_printf_float+0x154>
 80080e8:	3301      	adds	r3, #1
 80080ea:	6123      	str	r3, [r4, #16]
 80080ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d0a2      	beq.n	800803a <_printf_float+0xa2>
 80080f4:	232d      	movs	r3, #45	@ 0x2d
 80080f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080fa:	e79e      	b.n	800803a <_printf_float+0xa2>
 80080fc:	9a06      	ldr	r2, [sp, #24]
 80080fe:	2a47      	cmp	r2, #71	@ 0x47
 8008100:	d1c2      	bne.n	8008088 <_printf_float+0xf0>
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1c0      	bne.n	8008088 <_printf_float+0xf0>
 8008106:	2301      	movs	r3, #1
 8008108:	e7bd      	b.n	8008086 <_printf_float+0xee>
 800810a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800810e:	d9db      	bls.n	80080c8 <_printf_float+0x130>
 8008110:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008114:	d118      	bne.n	8008148 <_printf_float+0x1b0>
 8008116:	2900      	cmp	r1, #0
 8008118:	6863      	ldr	r3, [r4, #4]
 800811a:	dd0b      	ble.n	8008134 <_printf_float+0x19c>
 800811c:	6121      	str	r1, [r4, #16]
 800811e:	b913      	cbnz	r3, 8008126 <_printf_float+0x18e>
 8008120:	6822      	ldr	r2, [r4, #0]
 8008122:	07d0      	lsls	r0, r2, #31
 8008124:	d502      	bpl.n	800812c <_printf_float+0x194>
 8008126:	3301      	adds	r3, #1
 8008128:	440b      	add	r3, r1
 800812a:	6123      	str	r3, [r4, #16]
 800812c:	f04f 0900 	mov.w	r9, #0
 8008130:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008132:	e7db      	b.n	80080ec <_printf_float+0x154>
 8008134:	b913      	cbnz	r3, 800813c <_printf_float+0x1a4>
 8008136:	6822      	ldr	r2, [r4, #0]
 8008138:	07d2      	lsls	r2, r2, #31
 800813a:	d501      	bpl.n	8008140 <_printf_float+0x1a8>
 800813c:	3302      	adds	r3, #2
 800813e:	e7f4      	b.n	800812a <_printf_float+0x192>
 8008140:	2301      	movs	r3, #1
 8008142:	e7f2      	b.n	800812a <_printf_float+0x192>
 8008144:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800814a:	4299      	cmp	r1, r3
 800814c:	db05      	blt.n	800815a <_printf_float+0x1c2>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	6121      	str	r1, [r4, #16]
 8008152:	07d8      	lsls	r0, r3, #31
 8008154:	d5ea      	bpl.n	800812c <_printf_float+0x194>
 8008156:	1c4b      	adds	r3, r1, #1
 8008158:	e7e7      	b.n	800812a <_printf_float+0x192>
 800815a:	2900      	cmp	r1, #0
 800815c:	bfd4      	ite	le
 800815e:	f1c1 0202 	rsble	r2, r1, #2
 8008162:	2201      	movgt	r2, #1
 8008164:	4413      	add	r3, r2
 8008166:	e7e0      	b.n	800812a <_printf_float+0x192>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	055a      	lsls	r2, r3, #21
 800816c:	d407      	bmi.n	800817e <_printf_float+0x1e6>
 800816e:	6923      	ldr	r3, [r4, #16]
 8008170:	4642      	mov	r2, r8
 8008172:	4631      	mov	r1, r6
 8008174:	4628      	mov	r0, r5
 8008176:	47b8      	blx	r7
 8008178:	3001      	adds	r0, #1
 800817a:	d12b      	bne.n	80081d4 <_printf_float+0x23c>
 800817c:	e767      	b.n	800804e <_printf_float+0xb6>
 800817e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008182:	f240 80dd 	bls.w	8008340 <_printf_float+0x3a8>
 8008186:	2200      	movs	r2, #0
 8008188:	2300      	movs	r3, #0
 800818a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800818e:	f7f8 fc7f 	bl	8000a90 <__aeabi_dcmpeq>
 8008192:	2800      	cmp	r0, #0
 8008194:	d033      	beq.n	80081fe <_printf_float+0x266>
 8008196:	2301      	movs	r3, #1
 8008198:	4a36      	ldr	r2, [pc, #216]	@ (8008274 <_printf_float+0x2dc>)
 800819a:	4631      	mov	r1, r6
 800819c:	4628      	mov	r0, r5
 800819e:	47b8      	blx	r7
 80081a0:	3001      	adds	r0, #1
 80081a2:	f43f af54 	beq.w	800804e <_printf_float+0xb6>
 80081a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80081aa:	4543      	cmp	r3, r8
 80081ac:	db02      	blt.n	80081b4 <_printf_float+0x21c>
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	07d8      	lsls	r0, r3, #31
 80081b2:	d50f      	bpl.n	80081d4 <_printf_float+0x23c>
 80081b4:	4631      	mov	r1, r6
 80081b6:	4628      	mov	r0, r5
 80081b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081bc:	47b8      	blx	r7
 80081be:	3001      	adds	r0, #1
 80081c0:	f43f af45 	beq.w	800804e <_printf_float+0xb6>
 80081c4:	f04f 0900 	mov.w	r9, #0
 80081c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80081cc:	f104 0a1a 	add.w	sl, r4, #26
 80081d0:	45c8      	cmp	r8, r9
 80081d2:	dc09      	bgt.n	80081e8 <_printf_float+0x250>
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	079b      	lsls	r3, r3, #30
 80081d8:	f100 8103 	bmi.w	80083e2 <_printf_float+0x44a>
 80081dc:	68e0      	ldr	r0, [r4, #12]
 80081de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081e0:	4298      	cmp	r0, r3
 80081e2:	bfb8      	it	lt
 80081e4:	4618      	movlt	r0, r3
 80081e6:	e734      	b.n	8008052 <_printf_float+0xba>
 80081e8:	2301      	movs	r3, #1
 80081ea:	4652      	mov	r2, sl
 80081ec:	4631      	mov	r1, r6
 80081ee:	4628      	mov	r0, r5
 80081f0:	47b8      	blx	r7
 80081f2:	3001      	adds	r0, #1
 80081f4:	f43f af2b 	beq.w	800804e <_printf_float+0xb6>
 80081f8:	f109 0901 	add.w	r9, r9, #1
 80081fc:	e7e8      	b.n	80081d0 <_printf_float+0x238>
 80081fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008200:	2b00      	cmp	r3, #0
 8008202:	dc39      	bgt.n	8008278 <_printf_float+0x2e0>
 8008204:	2301      	movs	r3, #1
 8008206:	4a1b      	ldr	r2, [pc, #108]	@ (8008274 <_printf_float+0x2dc>)
 8008208:	4631      	mov	r1, r6
 800820a:	4628      	mov	r0, r5
 800820c:	47b8      	blx	r7
 800820e:	3001      	adds	r0, #1
 8008210:	f43f af1d 	beq.w	800804e <_printf_float+0xb6>
 8008214:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008218:	ea59 0303 	orrs.w	r3, r9, r3
 800821c:	d102      	bne.n	8008224 <_printf_float+0x28c>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	07d9      	lsls	r1, r3, #31
 8008222:	d5d7      	bpl.n	80081d4 <_printf_float+0x23c>
 8008224:	4631      	mov	r1, r6
 8008226:	4628      	mov	r0, r5
 8008228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800822c:	47b8      	blx	r7
 800822e:	3001      	adds	r0, #1
 8008230:	f43f af0d 	beq.w	800804e <_printf_float+0xb6>
 8008234:	f04f 0a00 	mov.w	sl, #0
 8008238:	f104 0b1a 	add.w	fp, r4, #26
 800823c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800823e:	425b      	negs	r3, r3
 8008240:	4553      	cmp	r3, sl
 8008242:	dc01      	bgt.n	8008248 <_printf_float+0x2b0>
 8008244:	464b      	mov	r3, r9
 8008246:	e793      	b.n	8008170 <_printf_float+0x1d8>
 8008248:	2301      	movs	r3, #1
 800824a:	465a      	mov	r2, fp
 800824c:	4631      	mov	r1, r6
 800824e:	4628      	mov	r0, r5
 8008250:	47b8      	blx	r7
 8008252:	3001      	adds	r0, #1
 8008254:	f43f aefb 	beq.w	800804e <_printf_float+0xb6>
 8008258:	f10a 0a01 	add.w	sl, sl, #1
 800825c:	e7ee      	b.n	800823c <_printf_float+0x2a4>
 800825e:	bf00      	nop
 8008260:	7fefffff 	.word	0x7fefffff
 8008264:	0800cfbc 	.word	0x0800cfbc
 8008268:	0800cfb8 	.word	0x0800cfb8
 800826c:	0800cfc4 	.word	0x0800cfc4
 8008270:	0800cfc0 	.word	0x0800cfc0
 8008274:	0800d0fe 	.word	0x0800d0fe
 8008278:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800827a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800827e:	4553      	cmp	r3, sl
 8008280:	bfa8      	it	ge
 8008282:	4653      	movge	r3, sl
 8008284:	2b00      	cmp	r3, #0
 8008286:	4699      	mov	r9, r3
 8008288:	dc36      	bgt.n	80082f8 <_printf_float+0x360>
 800828a:	f04f 0b00 	mov.w	fp, #0
 800828e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008292:	f104 021a 	add.w	r2, r4, #26
 8008296:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008298:	9306      	str	r3, [sp, #24]
 800829a:	eba3 0309 	sub.w	r3, r3, r9
 800829e:	455b      	cmp	r3, fp
 80082a0:	dc31      	bgt.n	8008306 <_printf_float+0x36e>
 80082a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a4:	459a      	cmp	sl, r3
 80082a6:	dc3a      	bgt.n	800831e <_printf_float+0x386>
 80082a8:	6823      	ldr	r3, [r4, #0]
 80082aa:	07da      	lsls	r2, r3, #31
 80082ac:	d437      	bmi.n	800831e <_printf_float+0x386>
 80082ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082b0:	ebaa 0903 	sub.w	r9, sl, r3
 80082b4:	9b06      	ldr	r3, [sp, #24]
 80082b6:	ebaa 0303 	sub.w	r3, sl, r3
 80082ba:	4599      	cmp	r9, r3
 80082bc:	bfa8      	it	ge
 80082be:	4699      	movge	r9, r3
 80082c0:	f1b9 0f00 	cmp.w	r9, #0
 80082c4:	dc33      	bgt.n	800832e <_printf_float+0x396>
 80082c6:	f04f 0800 	mov.w	r8, #0
 80082ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082ce:	f104 0b1a 	add.w	fp, r4, #26
 80082d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082d4:	ebaa 0303 	sub.w	r3, sl, r3
 80082d8:	eba3 0309 	sub.w	r3, r3, r9
 80082dc:	4543      	cmp	r3, r8
 80082de:	f77f af79 	ble.w	80081d4 <_printf_float+0x23c>
 80082e2:	2301      	movs	r3, #1
 80082e4:	465a      	mov	r2, fp
 80082e6:	4631      	mov	r1, r6
 80082e8:	4628      	mov	r0, r5
 80082ea:	47b8      	blx	r7
 80082ec:	3001      	adds	r0, #1
 80082ee:	f43f aeae 	beq.w	800804e <_printf_float+0xb6>
 80082f2:	f108 0801 	add.w	r8, r8, #1
 80082f6:	e7ec      	b.n	80082d2 <_printf_float+0x33a>
 80082f8:	4642      	mov	r2, r8
 80082fa:	4631      	mov	r1, r6
 80082fc:	4628      	mov	r0, r5
 80082fe:	47b8      	blx	r7
 8008300:	3001      	adds	r0, #1
 8008302:	d1c2      	bne.n	800828a <_printf_float+0x2f2>
 8008304:	e6a3      	b.n	800804e <_printf_float+0xb6>
 8008306:	2301      	movs	r3, #1
 8008308:	4631      	mov	r1, r6
 800830a:	4628      	mov	r0, r5
 800830c:	9206      	str	r2, [sp, #24]
 800830e:	47b8      	blx	r7
 8008310:	3001      	adds	r0, #1
 8008312:	f43f ae9c 	beq.w	800804e <_printf_float+0xb6>
 8008316:	f10b 0b01 	add.w	fp, fp, #1
 800831a:	9a06      	ldr	r2, [sp, #24]
 800831c:	e7bb      	b.n	8008296 <_printf_float+0x2fe>
 800831e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008322:	4631      	mov	r1, r6
 8008324:	4628      	mov	r0, r5
 8008326:	47b8      	blx	r7
 8008328:	3001      	adds	r0, #1
 800832a:	d1c0      	bne.n	80082ae <_printf_float+0x316>
 800832c:	e68f      	b.n	800804e <_printf_float+0xb6>
 800832e:	9a06      	ldr	r2, [sp, #24]
 8008330:	464b      	mov	r3, r9
 8008332:	4631      	mov	r1, r6
 8008334:	4628      	mov	r0, r5
 8008336:	4442      	add	r2, r8
 8008338:	47b8      	blx	r7
 800833a:	3001      	adds	r0, #1
 800833c:	d1c3      	bne.n	80082c6 <_printf_float+0x32e>
 800833e:	e686      	b.n	800804e <_printf_float+0xb6>
 8008340:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008344:	f1ba 0f01 	cmp.w	sl, #1
 8008348:	dc01      	bgt.n	800834e <_printf_float+0x3b6>
 800834a:	07db      	lsls	r3, r3, #31
 800834c:	d536      	bpl.n	80083bc <_printf_float+0x424>
 800834e:	2301      	movs	r3, #1
 8008350:	4642      	mov	r2, r8
 8008352:	4631      	mov	r1, r6
 8008354:	4628      	mov	r0, r5
 8008356:	47b8      	blx	r7
 8008358:	3001      	adds	r0, #1
 800835a:	f43f ae78 	beq.w	800804e <_printf_float+0xb6>
 800835e:	4631      	mov	r1, r6
 8008360:	4628      	mov	r0, r5
 8008362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008366:	47b8      	blx	r7
 8008368:	3001      	adds	r0, #1
 800836a:	f43f ae70 	beq.w	800804e <_printf_float+0xb6>
 800836e:	2200      	movs	r2, #0
 8008370:	2300      	movs	r3, #0
 8008372:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008376:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800837a:	f7f8 fb89 	bl	8000a90 <__aeabi_dcmpeq>
 800837e:	b9c0      	cbnz	r0, 80083b2 <_printf_float+0x41a>
 8008380:	4653      	mov	r3, sl
 8008382:	f108 0201 	add.w	r2, r8, #1
 8008386:	4631      	mov	r1, r6
 8008388:	4628      	mov	r0, r5
 800838a:	47b8      	blx	r7
 800838c:	3001      	adds	r0, #1
 800838e:	d10c      	bne.n	80083aa <_printf_float+0x412>
 8008390:	e65d      	b.n	800804e <_printf_float+0xb6>
 8008392:	2301      	movs	r3, #1
 8008394:	465a      	mov	r2, fp
 8008396:	4631      	mov	r1, r6
 8008398:	4628      	mov	r0, r5
 800839a:	47b8      	blx	r7
 800839c:	3001      	adds	r0, #1
 800839e:	f43f ae56 	beq.w	800804e <_printf_float+0xb6>
 80083a2:	f108 0801 	add.w	r8, r8, #1
 80083a6:	45d0      	cmp	r8, sl
 80083a8:	dbf3      	blt.n	8008392 <_printf_float+0x3fa>
 80083aa:	464b      	mov	r3, r9
 80083ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80083b0:	e6df      	b.n	8008172 <_printf_float+0x1da>
 80083b2:	f04f 0800 	mov.w	r8, #0
 80083b6:	f104 0b1a 	add.w	fp, r4, #26
 80083ba:	e7f4      	b.n	80083a6 <_printf_float+0x40e>
 80083bc:	2301      	movs	r3, #1
 80083be:	4642      	mov	r2, r8
 80083c0:	e7e1      	b.n	8008386 <_printf_float+0x3ee>
 80083c2:	2301      	movs	r3, #1
 80083c4:	464a      	mov	r2, r9
 80083c6:	4631      	mov	r1, r6
 80083c8:	4628      	mov	r0, r5
 80083ca:	47b8      	blx	r7
 80083cc:	3001      	adds	r0, #1
 80083ce:	f43f ae3e 	beq.w	800804e <_printf_float+0xb6>
 80083d2:	f108 0801 	add.w	r8, r8, #1
 80083d6:	68e3      	ldr	r3, [r4, #12]
 80083d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083da:	1a5b      	subs	r3, r3, r1
 80083dc:	4543      	cmp	r3, r8
 80083de:	dcf0      	bgt.n	80083c2 <_printf_float+0x42a>
 80083e0:	e6fc      	b.n	80081dc <_printf_float+0x244>
 80083e2:	f04f 0800 	mov.w	r8, #0
 80083e6:	f104 0919 	add.w	r9, r4, #25
 80083ea:	e7f4      	b.n	80083d6 <_printf_float+0x43e>

080083ec <_printf_common>:
 80083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	4616      	mov	r6, r2
 80083f2:	4698      	mov	r8, r3
 80083f4:	688a      	ldr	r2, [r1, #8]
 80083f6:	4607      	mov	r7, r0
 80083f8:	690b      	ldr	r3, [r1, #16]
 80083fa:	460c      	mov	r4, r1
 80083fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008400:	4293      	cmp	r3, r2
 8008402:	bfb8      	it	lt
 8008404:	4613      	movlt	r3, r2
 8008406:	6033      	str	r3, [r6, #0]
 8008408:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800840c:	b10a      	cbz	r2, 8008412 <_printf_common+0x26>
 800840e:	3301      	adds	r3, #1
 8008410:	6033      	str	r3, [r6, #0]
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	0699      	lsls	r1, r3, #26
 8008416:	bf42      	ittt	mi
 8008418:	6833      	ldrmi	r3, [r6, #0]
 800841a:	3302      	addmi	r3, #2
 800841c:	6033      	strmi	r3, [r6, #0]
 800841e:	6825      	ldr	r5, [r4, #0]
 8008420:	f015 0506 	ands.w	r5, r5, #6
 8008424:	d106      	bne.n	8008434 <_printf_common+0x48>
 8008426:	f104 0a19 	add.w	sl, r4, #25
 800842a:	68e3      	ldr	r3, [r4, #12]
 800842c:	6832      	ldr	r2, [r6, #0]
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	42ab      	cmp	r3, r5
 8008432:	dc2b      	bgt.n	800848c <_printf_common+0xa0>
 8008434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	3b00      	subs	r3, #0
 800843c:	bf18      	it	ne
 800843e:	2301      	movne	r3, #1
 8008440:	0692      	lsls	r2, r2, #26
 8008442:	d430      	bmi.n	80084a6 <_printf_common+0xba>
 8008444:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008448:	4641      	mov	r1, r8
 800844a:	4638      	mov	r0, r7
 800844c:	47c8      	blx	r9
 800844e:	3001      	adds	r0, #1
 8008450:	d023      	beq.n	800849a <_printf_common+0xae>
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	341a      	adds	r4, #26
 8008456:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800845a:	f003 0306 	and.w	r3, r3, #6
 800845e:	2b04      	cmp	r3, #4
 8008460:	bf0a      	itet	eq
 8008462:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8008466:	2500      	movne	r5, #0
 8008468:	6833      	ldreq	r3, [r6, #0]
 800846a:	f04f 0600 	mov.w	r6, #0
 800846e:	bf08      	it	eq
 8008470:	1aed      	subeq	r5, r5, r3
 8008472:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008476:	bf08      	it	eq
 8008478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800847c:	4293      	cmp	r3, r2
 800847e:	bfc4      	itt	gt
 8008480:	1a9b      	subgt	r3, r3, r2
 8008482:	18ed      	addgt	r5, r5, r3
 8008484:	42b5      	cmp	r5, r6
 8008486:	d11a      	bne.n	80084be <_printf_common+0xd2>
 8008488:	2000      	movs	r0, #0
 800848a:	e008      	b.n	800849e <_printf_common+0xb2>
 800848c:	2301      	movs	r3, #1
 800848e:	4652      	mov	r2, sl
 8008490:	4641      	mov	r1, r8
 8008492:	4638      	mov	r0, r7
 8008494:	47c8      	blx	r9
 8008496:	3001      	adds	r0, #1
 8008498:	d103      	bne.n	80084a2 <_printf_common+0xb6>
 800849a:	f04f 30ff 	mov.w	r0, #4294967295
 800849e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a2:	3501      	adds	r5, #1
 80084a4:	e7c1      	b.n	800842a <_printf_common+0x3e>
 80084a6:	18e1      	adds	r1, r4, r3
 80084a8:	1c5a      	adds	r2, r3, #1
 80084aa:	2030      	movs	r0, #48	@ 0x30
 80084ac:	3302      	adds	r3, #2
 80084ae:	4422      	add	r2, r4
 80084b0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084bc:	e7c2      	b.n	8008444 <_printf_common+0x58>
 80084be:	2301      	movs	r3, #1
 80084c0:	4622      	mov	r2, r4
 80084c2:	4641      	mov	r1, r8
 80084c4:	4638      	mov	r0, r7
 80084c6:	47c8      	blx	r9
 80084c8:	3001      	adds	r0, #1
 80084ca:	d0e6      	beq.n	800849a <_printf_common+0xae>
 80084cc:	3601      	adds	r6, #1
 80084ce:	e7d9      	b.n	8008484 <_printf_common+0x98>

080084d0 <_printf_i>:
 80084d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084d4:	7e0f      	ldrb	r7, [r1, #24]
 80084d6:	4691      	mov	r9, r2
 80084d8:	4680      	mov	r8, r0
 80084da:	460c      	mov	r4, r1
 80084dc:	2f78      	cmp	r7, #120	@ 0x78
 80084de:	469a      	mov	sl, r3
 80084e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084e6:	d807      	bhi.n	80084f8 <_printf_i+0x28>
 80084e8:	2f62      	cmp	r7, #98	@ 0x62
 80084ea:	d80a      	bhi.n	8008502 <_printf_i+0x32>
 80084ec:	2f00      	cmp	r7, #0
 80084ee:	f000 80d1 	beq.w	8008694 <_printf_i+0x1c4>
 80084f2:	2f58      	cmp	r7, #88	@ 0x58
 80084f4:	f000 80b8 	beq.w	8008668 <_printf_i+0x198>
 80084f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008500:	e03a      	b.n	8008578 <_printf_i+0xa8>
 8008502:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008506:	2b15      	cmp	r3, #21
 8008508:	d8f6      	bhi.n	80084f8 <_printf_i+0x28>
 800850a:	a101      	add	r1, pc, #4	@ (adr r1, 8008510 <_printf_i+0x40>)
 800850c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008510:	08008569 	.word	0x08008569
 8008514:	0800857d 	.word	0x0800857d
 8008518:	080084f9 	.word	0x080084f9
 800851c:	080084f9 	.word	0x080084f9
 8008520:	080084f9 	.word	0x080084f9
 8008524:	080084f9 	.word	0x080084f9
 8008528:	0800857d 	.word	0x0800857d
 800852c:	080084f9 	.word	0x080084f9
 8008530:	080084f9 	.word	0x080084f9
 8008534:	080084f9 	.word	0x080084f9
 8008538:	080084f9 	.word	0x080084f9
 800853c:	0800867b 	.word	0x0800867b
 8008540:	080085a7 	.word	0x080085a7
 8008544:	08008635 	.word	0x08008635
 8008548:	080084f9 	.word	0x080084f9
 800854c:	080084f9 	.word	0x080084f9
 8008550:	0800869d 	.word	0x0800869d
 8008554:	080084f9 	.word	0x080084f9
 8008558:	080085a7 	.word	0x080085a7
 800855c:	080084f9 	.word	0x080084f9
 8008560:	080084f9 	.word	0x080084f9
 8008564:	0800863d 	.word	0x0800863d
 8008568:	6833      	ldr	r3, [r6, #0]
 800856a:	1d1a      	adds	r2, r3, #4
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6032      	str	r2, [r6, #0]
 8008570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008574:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008578:	2301      	movs	r3, #1
 800857a:	e09c      	b.n	80086b6 <_printf_i+0x1e6>
 800857c:	6833      	ldr	r3, [r6, #0]
 800857e:	6820      	ldr	r0, [r4, #0]
 8008580:	1d19      	adds	r1, r3, #4
 8008582:	6031      	str	r1, [r6, #0]
 8008584:	0606      	lsls	r6, r0, #24
 8008586:	d501      	bpl.n	800858c <_printf_i+0xbc>
 8008588:	681d      	ldr	r5, [r3, #0]
 800858a:	e003      	b.n	8008594 <_printf_i+0xc4>
 800858c:	0645      	lsls	r5, r0, #25
 800858e:	d5fb      	bpl.n	8008588 <_printf_i+0xb8>
 8008590:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008594:	2d00      	cmp	r5, #0
 8008596:	da03      	bge.n	80085a0 <_printf_i+0xd0>
 8008598:	232d      	movs	r3, #45	@ 0x2d
 800859a:	426d      	negs	r5, r5
 800859c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085a0:	4858      	ldr	r0, [pc, #352]	@ (8008704 <_printf_i+0x234>)
 80085a2:	230a      	movs	r3, #10
 80085a4:	e011      	b.n	80085ca <_printf_i+0xfa>
 80085a6:	6821      	ldr	r1, [r4, #0]
 80085a8:	6833      	ldr	r3, [r6, #0]
 80085aa:	0608      	lsls	r0, r1, #24
 80085ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80085b0:	d402      	bmi.n	80085b8 <_printf_i+0xe8>
 80085b2:	0649      	lsls	r1, r1, #25
 80085b4:	bf48      	it	mi
 80085b6:	b2ad      	uxthmi	r5, r5
 80085b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80085ba:	6033      	str	r3, [r6, #0]
 80085bc:	4851      	ldr	r0, [pc, #324]	@ (8008704 <_printf_i+0x234>)
 80085be:	bf14      	ite	ne
 80085c0:	230a      	movne	r3, #10
 80085c2:	2308      	moveq	r3, #8
 80085c4:	2100      	movs	r1, #0
 80085c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085ca:	6866      	ldr	r6, [r4, #4]
 80085cc:	2e00      	cmp	r6, #0
 80085ce:	60a6      	str	r6, [r4, #8]
 80085d0:	db05      	blt.n	80085de <_printf_i+0x10e>
 80085d2:	6821      	ldr	r1, [r4, #0]
 80085d4:	432e      	orrs	r6, r5
 80085d6:	f021 0104 	bic.w	r1, r1, #4
 80085da:	6021      	str	r1, [r4, #0]
 80085dc:	d04b      	beq.n	8008676 <_printf_i+0x1a6>
 80085de:	4616      	mov	r6, r2
 80085e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80085e4:	fb03 5711 	mls	r7, r3, r1, r5
 80085e8:	5dc7      	ldrb	r7, [r0, r7]
 80085ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085ee:	462f      	mov	r7, r5
 80085f0:	460d      	mov	r5, r1
 80085f2:	42bb      	cmp	r3, r7
 80085f4:	d9f4      	bls.n	80085e0 <_printf_i+0x110>
 80085f6:	2b08      	cmp	r3, #8
 80085f8:	d10b      	bne.n	8008612 <_printf_i+0x142>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	07df      	lsls	r7, r3, #31
 80085fe:	d508      	bpl.n	8008612 <_printf_i+0x142>
 8008600:	6923      	ldr	r3, [r4, #16]
 8008602:	6861      	ldr	r1, [r4, #4]
 8008604:	4299      	cmp	r1, r3
 8008606:	bfde      	ittt	le
 8008608:	2330      	movle	r3, #48	@ 0x30
 800860a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800860e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008612:	1b92      	subs	r2, r2, r6
 8008614:	6122      	str	r2, [r4, #16]
 8008616:	464b      	mov	r3, r9
 8008618:	aa03      	add	r2, sp, #12
 800861a:	4621      	mov	r1, r4
 800861c:	4640      	mov	r0, r8
 800861e:	f8cd a000 	str.w	sl, [sp]
 8008622:	f7ff fee3 	bl	80083ec <_printf_common>
 8008626:	3001      	adds	r0, #1
 8008628:	d14a      	bne.n	80086c0 <_printf_i+0x1f0>
 800862a:	f04f 30ff 	mov.w	r0, #4294967295
 800862e:	b004      	add	sp, #16
 8008630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	f043 0320 	orr.w	r3, r3, #32
 800863a:	6023      	str	r3, [r4, #0]
 800863c:	2778      	movs	r7, #120	@ 0x78
 800863e:	4832      	ldr	r0, [pc, #200]	@ (8008708 <_printf_i+0x238>)
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008646:	061f      	lsls	r7, r3, #24
 8008648:	6831      	ldr	r1, [r6, #0]
 800864a:	f851 5b04 	ldr.w	r5, [r1], #4
 800864e:	d402      	bmi.n	8008656 <_printf_i+0x186>
 8008650:	065f      	lsls	r7, r3, #25
 8008652:	bf48      	it	mi
 8008654:	b2ad      	uxthmi	r5, r5
 8008656:	6031      	str	r1, [r6, #0]
 8008658:	07d9      	lsls	r1, r3, #31
 800865a:	bf44      	itt	mi
 800865c:	f043 0320 	orrmi.w	r3, r3, #32
 8008660:	6023      	strmi	r3, [r4, #0]
 8008662:	b11d      	cbz	r5, 800866c <_printf_i+0x19c>
 8008664:	2310      	movs	r3, #16
 8008666:	e7ad      	b.n	80085c4 <_printf_i+0xf4>
 8008668:	4826      	ldr	r0, [pc, #152]	@ (8008704 <_printf_i+0x234>)
 800866a:	e7e9      	b.n	8008640 <_printf_i+0x170>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	f023 0320 	bic.w	r3, r3, #32
 8008672:	6023      	str	r3, [r4, #0]
 8008674:	e7f6      	b.n	8008664 <_printf_i+0x194>
 8008676:	4616      	mov	r6, r2
 8008678:	e7bd      	b.n	80085f6 <_printf_i+0x126>
 800867a:	6833      	ldr	r3, [r6, #0]
 800867c:	6825      	ldr	r5, [r4, #0]
 800867e:	1d18      	adds	r0, r3, #4
 8008680:	6961      	ldr	r1, [r4, #20]
 8008682:	6030      	str	r0, [r6, #0]
 8008684:	062e      	lsls	r6, r5, #24
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	d501      	bpl.n	800868e <_printf_i+0x1be>
 800868a:	6019      	str	r1, [r3, #0]
 800868c:	e002      	b.n	8008694 <_printf_i+0x1c4>
 800868e:	0668      	lsls	r0, r5, #25
 8008690:	d5fb      	bpl.n	800868a <_printf_i+0x1ba>
 8008692:	8019      	strh	r1, [r3, #0]
 8008694:	2300      	movs	r3, #0
 8008696:	4616      	mov	r6, r2
 8008698:	6123      	str	r3, [r4, #16]
 800869a:	e7bc      	b.n	8008616 <_printf_i+0x146>
 800869c:	6833      	ldr	r3, [r6, #0]
 800869e:	2100      	movs	r1, #0
 80086a0:	1d1a      	adds	r2, r3, #4
 80086a2:	6032      	str	r2, [r6, #0]
 80086a4:	681e      	ldr	r6, [r3, #0]
 80086a6:	6862      	ldr	r2, [r4, #4]
 80086a8:	4630      	mov	r0, r6
 80086aa:	f000 fc70 	bl	8008f8e <memchr>
 80086ae:	b108      	cbz	r0, 80086b4 <_printf_i+0x1e4>
 80086b0:	1b80      	subs	r0, r0, r6
 80086b2:	6060      	str	r0, [r4, #4]
 80086b4:	6863      	ldr	r3, [r4, #4]
 80086b6:	6123      	str	r3, [r4, #16]
 80086b8:	2300      	movs	r3, #0
 80086ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086be:	e7aa      	b.n	8008616 <_printf_i+0x146>
 80086c0:	6923      	ldr	r3, [r4, #16]
 80086c2:	4632      	mov	r2, r6
 80086c4:	4649      	mov	r1, r9
 80086c6:	4640      	mov	r0, r8
 80086c8:	47d0      	blx	sl
 80086ca:	3001      	adds	r0, #1
 80086cc:	d0ad      	beq.n	800862a <_printf_i+0x15a>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	079b      	lsls	r3, r3, #30
 80086d2:	d413      	bmi.n	80086fc <_printf_i+0x22c>
 80086d4:	68e0      	ldr	r0, [r4, #12]
 80086d6:	9b03      	ldr	r3, [sp, #12]
 80086d8:	4298      	cmp	r0, r3
 80086da:	bfb8      	it	lt
 80086dc:	4618      	movlt	r0, r3
 80086de:	e7a6      	b.n	800862e <_printf_i+0x15e>
 80086e0:	2301      	movs	r3, #1
 80086e2:	4632      	mov	r2, r6
 80086e4:	4649      	mov	r1, r9
 80086e6:	4640      	mov	r0, r8
 80086e8:	47d0      	blx	sl
 80086ea:	3001      	adds	r0, #1
 80086ec:	d09d      	beq.n	800862a <_printf_i+0x15a>
 80086ee:	3501      	adds	r5, #1
 80086f0:	68e3      	ldr	r3, [r4, #12]
 80086f2:	9903      	ldr	r1, [sp, #12]
 80086f4:	1a5b      	subs	r3, r3, r1
 80086f6:	42ab      	cmp	r3, r5
 80086f8:	dcf2      	bgt.n	80086e0 <_printf_i+0x210>
 80086fa:	e7eb      	b.n	80086d4 <_printf_i+0x204>
 80086fc:	2500      	movs	r5, #0
 80086fe:	f104 0619 	add.w	r6, r4, #25
 8008702:	e7f5      	b.n	80086f0 <_printf_i+0x220>
 8008704:	0800cfc8 	.word	0x0800cfc8
 8008708:	0800cfd9 	.word	0x0800cfd9

0800870c <_scanf_float>:
 800870c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008710:	b087      	sub	sp, #28
 8008712:	4691      	mov	r9, r2
 8008714:	4680      	mov	r8, r0
 8008716:	460c      	mov	r4, r1
 8008718:	9303      	str	r3, [sp, #12]
 800871a:	688b      	ldr	r3, [r1, #8]
 800871c:	1e5a      	subs	r2, r3, #1
 800871e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008722:	460a      	mov	r2, r1
 8008724:	bf89      	itett	hi
 8008726:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800872a:	f04f 0b00 	movls.w	fp, #0
 800872e:	eb03 0b05 	addhi.w	fp, r3, r5
 8008732:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008736:	f04f 0500 	mov.w	r5, #0
 800873a:	bf88      	it	hi
 800873c:	608b      	strhi	r3, [r1, #8]
 800873e:	680b      	ldr	r3, [r1, #0]
 8008740:	46aa      	mov	sl, r5
 8008742:	462f      	mov	r7, r5
 8008744:	9502      	str	r5, [sp, #8]
 8008746:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800874a:	f842 3b1c 	str.w	r3, [r2], #28
 800874e:	4616      	mov	r6, r2
 8008750:	9201      	str	r2, [sp, #4]
 8008752:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008756:	68a2      	ldr	r2, [r4, #8]
 8008758:	b15a      	cbz	r2, 8008772 <_scanf_float+0x66>
 800875a:	f8d9 3000 	ldr.w	r3, [r9]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b4e      	cmp	r3, #78	@ 0x4e
 8008762:	d863      	bhi.n	800882c <_scanf_float+0x120>
 8008764:	2b40      	cmp	r3, #64	@ 0x40
 8008766:	d83b      	bhi.n	80087e0 <_scanf_float+0xd4>
 8008768:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800876c:	b2c8      	uxtb	r0, r1
 800876e:	280e      	cmp	r0, #14
 8008770:	d939      	bls.n	80087e6 <_scanf_float+0xda>
 8008772:	b11f      	cbz	r7, 800877c <_scanf_float+0x70>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800877a:	6023      	str	r3, [r4, #0]
 800877c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008780:	f1ba 0f01 	cmp.w	sl, #1
 8008784:	f200 8115 	bhi.w	80089b2 <_scanf_float+0x2a6>
 8008788:	9b01      	ldr	r3, [sp, #4]
 800878a:	429e      	cmp	r6, r3
 800878c:	f200 8106 	bhi.w	800899c <_scanf_float+0x290>
 8008790:	2001      	movs	r0, #1
 8008792:	b007      	add	sp, #28
 8008794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008798:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800879c:	2a0d      	cmp	r2, #13
 800879e:	d8e8      	bhi.n	8008772 <_scanf_float+0x66>
 80087a0:	a101      	add	r1, pc, #4	@ (adr r1, 80087a8 <_scanf_float+0x9c>)
 80087a2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80087a6:	bf00      	nop
 80087a8:	080088f1 	.word	0x080088f1
 80087ac:	08008773 	.word	0x08008773
 80087b0:	08008773 	.word	0x08008773
 80087b4:	08008773 	.word	0x08008773
 80087b8:	0800894d 	.word	0x0800894d
 80087bc:	08008927 	.word	0x08008927
 80087c0:	08008773 	.word	0x08008773
 80087c4:	08008773 	.word	0x08008773
 80087c8:	080088ff 	.word	0x080088ff
 80087cc:	08008773 	.word	0x08008773
 80087d0:	08008773 	.word	0x08008773
 80087d4:	08008773 	.word	0x08008773
 80087d8:	08008773 	.word	0x08008773
 80087dc:	080088bb 	.word	0x080088bb
 80087e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80087e4:	e7da      	b.n	800879c <_scanf_float+0x90>
 80087e6:	290e      	cmp	r1, #14
 80087e8:	d8c3      	bhi.n	8008772 <_scanf_float+0x66>
 80087ea:	a001      	add	r0, pc, #4	@ (adr r0, 80087f0 <_scanf_float+0xe4>)
 80087ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80087f0:	080088ab 	.word	0x080088ab
 80087f4:	08008773 	.word	0x08008773
 80087f8:	080088ab 	.word	0x080088ab
 80087fc:	0800893b 	.word	0x0800893b
 8008800:	08008773 	.word	0x08008773
 8008804:	0800884d 	.word	0x0800884d
 8008808:	08008891 	.word	0x08008891
 800880c:	08008891 	.word	0x08008891
 8008810:	08008891 	.word	0x08008891
 8008814:	08008891 	.word	0x08008891
 8008818:	08008891 	.word	0x08008891
 800881c:	08008891 	.word	0x08008891
 8008820:	08008891 	.word	0x08008891
 8008824:	08008891 	.word	0x08008891
 8008828:	08008891 	.word	0x08008891
 800882c:	2b6e      	cmp	r3, #110	@ 0x6e
 800882e:	d809      	bhi.n	8008844 <_scanf_float+0x138>
 8008830:	2b60      	cmp	r3, #96	@ 0x60
 8008832:	d8b1      	bhi.n	8008798 <_scanf_float+0x8c>
 8008834:	2b54      	cmp	r3, #84	@ 0x54
 8008836:	d07b      	beq.n	8008930 <_scanf_float+0x224>
 8008838:	2b59      	cmp	r3, #89	@ 0x59
 800883a:	d19a      	bne.n	8008772 <_scanf_float+0x66>
 800883c:	2d07      	cmp	r5, #7
 800883e:	d198      	bne.n	8008772 <_scanf_float+0x66>
 8008840:	2508      	movs	r5, #8
 8008842:	e02f      	b.n	80088a4 <_scanf_float+0x198>
 8008844:	2b74      	cmp	r3, #116	@ 0x74
 8008846:	d073      	beq.n	8008930 <_scanf_float+0x224>
 8008848:	2b79      	cmp	r3, #121	@ 0x79
 800884a:	e7f6      	b.n	800883a <_scanf_float+0x12e>
 800884c:	6821      	ldr	r1, [r4, #0]
 800884e:	05c8      	lsls	r0, r1, #23
 8008850:	d51e      	bpl.n	8008890 <_scanf_float+0x184>
 8008852:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008856:	3701      	adds	r7, #1
 8008858:	6021      	str	r1, [r4, #0]
 800885a:	f1bb 0f00 	cmp.w	fp, #0
 800885e:	d003      	beq.n	8008868 <_scanf_float+0x15c>
 8008860:	3201      	adds	r2, #1
 8008862:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008866:	60a2      	str	r2, [r4, #8]
 8008868:	68a3      	ldr	r3, [r4, #8]
 800886a:	3b01      	subs	r3, #1
 800886c:	60a3      	str	r3, [r4, #8]
 800886e:	6923      	ldr	r3, [r4, #16]
 8008870:	3301      	adds	r3, #1
 8008872:	6123      	str	r3, [r4, #16]
 8008874:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008878:	3b01      	subs	r3, #1
 800887a:	2b00      	cmp	r3, #0
 800887c:	f8c9 3004 	str.w	r3, [r9, #4]
 8008880:	f340 8083 	ble.w	800898a <_scanf_float+0x27e>
 8008884:	f8d9 3000 	ldr.w	r3, [r9]
 8008888:	3301      	adds	r3, #1
 800888a:	f8c9 3000 	str.w	r3, [r9]
 800888e:	e762      	b.n	8008756 <_scanf_float+0x4a>
 8008890:	eb1a 0105 	adds.w	r1, sl, r5
 8008894:	f47f af6d 	bne.w	8008772 <_scanf_float+0x66>
 8008898:	6822      	ldr	r2, [r4, #0]
 800889a:	460d      	mov	r5, r1
 800889c:	468a      	mov	sl, r1
 800889e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80088a2:	6022      	str	r2, [r4, #0]
 80088a4:	f806 3b01 	strb.w	r3, [r6], #1
 80088a8:	e7de      	b.n	8008868 <_scanf_float+0x15c>
 80088aa:	6822      	ldr	r2, [r4, #0]
 80088ac:	0610      	lsls	r0, r2, #24
 80088ae:	f57f af60 	bpl.w	8008772 <_scanf_float+0x66>
 80088b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80088b6:	6022      	str	r2, [r4, #0]
 80088b8:	e7f4      	b.n	80088a4 <_scanf_float+0x198>
 80088ba:	f1ba 0f00 	cmp.w	sl, #0
 80088be:	d10c      	bne.n	80088da <_scanf_float+0x1ce>
 80088c0:	b977      	cbnz	r7, 80088e0 <_scanf_float+0x1d4>
 80088c2:	6822      	ldr	r2, [r4, #0]
 80088c4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80088c8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80088cc:	d108      	bne.n	80088e0 <_scanf_float+0x1d4>
 80088ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80088d2:	f04f 0a01 	mov.w	sl, #1
 80088d6:	6022      	str	r2, [r4, #0]
 80088d8:	e7e4      	b.n	80088a4 <_scanf_float+0x198>
 80088da:	f1ba 0f02 	cmp.w	sl, #2
 80088de:	d051      	beq.n	8008984 <_scanf_float+0x278>
 80088e0:	2d01      	cmp	r5, #1
 80088e2:	d002      	beq.n	80088ea <_scanf_float+0x1de>
 80088e4:	2d04      	cmp	r5, #4
 80088e6:	f47f af44 	bne.w	8008772 <_scanf_float+0x66>
 80088ea:	3501      	adds	r5, #1
 80088ec:	b2ed      	uxtb	r5, r5
 80088ee:	e7d9      	b.n	80088a4 <_scanf_float+0x198>
 80088f0:	f1ba 0f01 	cmp.w	sl, #1
 80088f4:	f47f af3d 	bne.w	8008772 <_scanf_float+0x66>
 80088f8:	f04f 0a02 	mov.w	sl, #2
 80088fc:	e7d2      	b.n	80088a4 <_scanf_float+0x198>
 80088fe:	b975      	cbnz	r5, 800891e <_scanf_float+0x212>
 8008900:	2f00      	cmp	r7, #0
 8008902:	f47f af37 	bne.w	8008774 <_scanf_float+0x68>
 8008906:	6822      	ldr	r2, [r4, #0]
 8008908:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800890c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008910:	f040 8103 	bne.w	8008b1a <_scanf_float+0x40e>
 8008914:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008918:	2501      	movs	r5, #1
 800891a:	6022      	str	r2, [r4, #0]
 800891c:	e7c2      	b.n	80088a4 <_scanf_float+0x198>
 800891e:	2d03      	cmp	r5, #3
 8008920:	d0e3      	beq.n	80088ea <_scanf_float+0x1de>
 8008922:	2d05      	cmp	r5, #5
 8008924:	e7df      	b.n	80088e6 <_scanf_float+0x1da>
 8008926:	2d02      	cmp	r5, #2
 8008928:	f47f af23 	bne.w	8008772 <_scanf_float+0x66>
 800892c:	2503      	movs	r5, #3
 800892e:	e7b9      	b.n	80088a4 <_scanf_float+0x198>
 8008930:	2d06      	cmp	r5, #6
 8008932:	f47f af1e 	bne.w	8008772 <_scanf_float+0x66>
 8008936:	2507      	movs	r5, #7
 8008938:	e7b4      	b.n	80088a4 <_scanf_float+0x198>
 800893a:	6822      	ldr	r2, [r4, #0]
 800893c:	0591      	lsls	r1, r2, #22
 800893e:	f57f af18 	bpl.w	8008772 <_scanf_float+0x66>
 8008942:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008946:	9702      	str	r7, [sp, #8]
 8008948:	6022      	str	r2, [r4, #0]
 800894a:	e7ab      	b.n	80088a4 <_scanf_float+0x198>
 800894c:	6822      	ldr	r2, [r4, #0]
 800894e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008952:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008956:	d005      	beq.n	8008964 <_scanf_float+0x258>
 8008958:	0550      	lsls	r0, r2, #21
 800895a:	f57f af0a 	bpl.w	8008772 <_scanf_float+0x66>
 800895e:	2f00      	cmp	r7, #0
 8008960:	f000 80db 	beq.w	8008b1a <_scanf_float+0x40e>
 8008964:	0591      	lsls	r1, r2, #22
 8008966:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800896a:	bf58      	it	pl
 800896c:	9902      	ldrpl	r1, [sp, #8]
 800896e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008972:	bf58      	it	pl
 8008974:	1a79      	subpl	r1, r7, r1
 8008976:	6022      	str	r2, [r4, #0]
 8008978:	f04f 0700 	mov.w	r7, #0
 800897c:	bf58      	it	pl
 800897e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008982:	e78f      	b.n	80088a4 <_scanf_float+0x198>
 8008984:	f04f 0a03 	mov.w	sl, #3
 8008988:	e78c      	b.n	80088a4 <_scanf_float+0x198>
 800898a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800898e:	4649      	mov	r1, r9
 8008990:	4640      	mov	r0, r8
 8008992:	4798      	blx	r3
 8008994:	2800      	cmp	r0, #0
 8008996:	f43f aede 	beq.w	8008756 <_scanf_float+0x4a>
 800899a:	e6ea      	b.n	8008772 <_scanf_float+0x66>
 800899c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089a0:	464a      	mov	r2, r9
 80089a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80089a6:	4640      	mov	r0, r8
 80089a8:	4798      	blx	r3
 80089aa:	6923      	ldr	r3, [r4, #16]
 80089ac:	3b01      	subs	r3, #1
 80089ae:	6123      	str	r3, [r4, #16]
 80089b0:	e6ea      	b.n	8008788 <_scanf_float+0x7c>
 80089b2:	1e6b      	subs	r3, r5, #1
 80089b4:	2b06      	cmp	r3, #6
 80089b6:	d824      	bhi.n	8008a02 <_scanf_float+0x2f6>
 80089b8:	2d02      	cmp	r5, #2
 80089ba:	d836      	bhi.n	8008a2a <_scanf_float+0x31e>
 80089bc:	9b01      	ldr	r3, [sp, #4]
 80089be:	429e      	cmp	r6, r3
 80089c0:	f67f aee6 	bls.w	8008790 <_scanf_float+0x84>
 80089c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089c8:	464a      	mov	r2, r9
 80089ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80089ce:	4640      	mov	r0, r8
 80089d0:	4798      	blx	r3
 80089d2:	6923      	ldr	r3, [r4, #16]
 80089d4:	3b01      	subs	r3, #1
 80089d6:	6123      	str	r3, [r4, #16]
 80089d8:	e7f0      	b.n	80089bc <_scanf_float+0x2b0>
 80089da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089de:	464a      	mov	r2, r9
 80089e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80089e4:	4640      	mov	r0, r8
 80089e6:	4798      	blx	r3
 80089e8:	6923      	ldr	r3, [r4, #16]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	6123      	str	r3, [r4, #16]
 80089ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089f2:	fa5f fa8a 	uxtb.w	sl, sl
 80089f6:	f1ba 0f02 	cmp.w	sl, #2
 80089fa:	d1ee      	bne.n	80089da <_scanf_float+0x2ce>
 80089fc:	3d03      	subs	r5, #3
 80089fe:	b2ed      	uxtb	r5, r5
 8008a00:	1b76      	subs	r6, r6, r5
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	05da      	lsls	r2, r3, #23
 8008a06:	d52f      	bpl.n	8008a68 <_scanf_float+0x35c>
 8008a08:	055b      	lsls	r3, r3, #21
 8008a0a:	d511      	bpl.n	8008a30 <_scanf_float+0x324>
 8008a0c:	9b01      	ldr	r3, [sp, #4]
 8008a0e:	429e      	cmp	r6, r3
 8008a10:	f67f aebe 	bls.w	8008790 <_scanf_float+0x84>
 8008a14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a18:	464a      	mov	r2, r9
 8008a1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a1e:	4640      	mov	r0, r8
 8008a20:	4798      	blx	r3
 8008a22:	6923      	ldr	r3, [r4, #16]
 8008a24:	3b01      	subs	r3, #1
 8008a26:	6123      	str	r3, [r4, #16]
 8008a28:	e7f0      	b.n	8008a0c <_scanf_float+0x300>
 8008a2a:	46aa      	mov	sl, r5
 8008a2c:	46b3      	mov	fp, r6
 8008a2e:	e7de      	b.n	80089ee <_scanf_float+0x2e2>
 8008a30:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008a34:	1e75      	subs	r5, r6, #1
 8008a36:	6923      	ldr	r3, [r4, #16]
 8008a38:	2965      	cmp	r1, #101	@ 0x65
 8008a3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a3e:	6123      	str	r3, [r4, #16]
 8008a40:	d00c      	beq.n	8008a5c <_scanf_float+0x350>
 8008a42:	2945      	cmp	r1, #69	@ 0x45
 8008a44:	d00a      	beq.n	8008a5c <_scanf_float+0x350>
 8008a46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a4a:	464a      	mov	r2, r9
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	1eb5      	subs	r5, r6, #2
 8008a50:	4798      	blx	r3
 8008a52:	6923      	ldr	r3, [r4, #16]
 8008a54:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	6123      	str	r3, [r4, #16]
 8008a5c:	462e      	mov	r6, r5
 8008a5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a62:	464a      	mov	r2, r9
 8008a64:	4640      	mov	r0, r8
 8008a66:	4798      	blx	r3
 8008a68:	6822      	ldr	r2, [r4, #0]
 8008a6a:	f012 0210 	ands.w	r2, r2, #16
 8008a6e:	d001      	beq.n	8008a74 <_scanf_float+0x368>
 8008a70:	2000      	movs	r0, #0
 8008a72:	e68e      	b.n	8008792 <_scanf_float+0x86>
 8008a74:	7032      	strb	r2, [r6, #0]
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008a7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a80:	d125      	bne.n	8008ace <_scanf_float+0x3c2>
 8008a82:	9b02      	ldr	r3, [sp, #8]
 8008a84:	429f      	cmp	r7, r3
 8008a86:	d00a      	beq.n	8008a9e <_scanf_float+0x392>
 8008a88:	1bda      	subs	r2, r3, r7
 8008a8a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008a8e:	4924      	ldr	r1, [pc, #144]	@ (8008b20 <_scanf_float+0x414>)
 8008a90:	429e      	cmp	r6, r3
 8008a92:	bf28      	it	cs
 8008a94:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f000 f93d 	bl	8008d18 <siprintf>
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	9901      	ldr	r1, [sp, #4]
 8008aa2:	4640      	mov	r0, r8
 8008aa4:	f002 fca4 	bl	800b3f0 <_strtod_r>
 8008aa8:	6821      	ldr	r1, [r4, #0]
 8008aaa:	9b03      	ldr	r3, [sp, #12]
 8008aac:	f011 0f02 	tst.w	r1, #2
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	ec57 6b10 	vmov	r6, r7, d0
 8008ab6:	f103 0204 	add.w	r2, r3, #4
 8008aba:	d015      	beq.n	8008ae8 <_scanf_float+0x3dc>
 8008abc:	9903      	ldr	r1, [sp, #12]
 8008abe:	600a      	str	r2, [r1, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	e9c3 6700 	strd	r6, r7, [r3]
 8008ac6:	68e3      	ldr	r3, [r4, #12]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	60e3      	str	r3, [r4, #12]
 8008acc:	e7d0      	b.n	8008a70 <_scanf_float+0x364>
 8008ace:	9b04      	ldr	r3, [sp, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d0e4      	beq.n	8008a9e <_scanf_float+0x392>
 8008ad4:	9905      	ldr	r1, [sp, #20]
 8008ad6:	230a      	movs	r3, #10
 8008ad8:	4640      	mov	r0, r8
 8008ada:	3101      	adds	r1, #1
 8008adc:	f002 fd08 	bl	800b4f0 <_strtol_r>
 8008ae0:	9b04      	ldr	r3, [sp, #16]
 8008ae2:	9e05      	ldr	r6, [sp, #20]
 8008ae4:	1ac2      	subs	r2, r0, r3
 8008ae6:	e7d0      	b.n	8008a8a <_scanf_float+0x37e>
 8008ae8:	f011 0f04 	tst.w	r1, #4
 8008aec:	9903      	ldr	r1, [sp, #12]
 8008aee:	600a      	str	r2, [r1, #0]
 8008af0:	d1e6      	bne.n	8008ac0 <_scanf_float+0x3b4>
 8008af2:	681d      	ldr	r5, [r3, #0]
 8008af4:	4632      	mov	r2, r6
 8008af6:	463b      	mov	r3, r7
 8008af8:	4630      	mov	r0, r6
 8008afa:	4639      	mov	r1, r7
 8008afc:	f7f7 fffa 	bl	8000af4 <__aeabi_dcmpun>
 8008b00:	b128      	cbz	r0, 8008b0e <_scanf_float+0x402>
 8008b02:	4808      	ldr	r0, [pc, #32]	@ (8008b24 <_scanf_float+0x418>)
 8008b04:	f000 fa52 	bl	8008fac <nanf>
 8008b08:	ed85 0a00 	vstr	s0, [r5]
 8008b0c:	e7db      	b.n	8008ac6 <_scanf_float+0x3ba>
 8008b0e:	4630      	mov	r0, r6
 8008b10:	4639      	mov	r1, r7
 8008b12:	f7f8 f84d 	bl	8000bb0 <__aeabi_d2f>
 8008b16:	6028      	str	r0, [r5, #0]
 8008b18:	e7d5      	b.n	8008ac6 <_scanf_float+0x3ba>
 8008b1a:	2700      	movs	r7, #0
 8008b1c:	e62e      	b.n	800877c <_scanf_float+0x70>
 8008b1e:	bf00      	nop
 8008b20:	0800cfea 	.word	0x0800cfea
 8008b24:	0800d146 	.word	0x0800d146

08008b28 <std>:
 8008b28:	2300      	movs	r3, #0
 8008b2a:	b510      	push	{r4, lr}
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	6083      	str	r3, [r0, #8]
 8008b30:	8181      	strh	r1, [r0, #12]
 8008b32:	4619      	mov	r1, r3
 8008b34:	6643      	str	r3, [r0, #100]	@ 0x64
 8008b36:	81c2      	strh	r2, [r0, #14]
 8008b38:	2208      	movs	r2, #8
 8008b3a:	6183      	str	r3, [r0, #24]
 8008b3c:	e9c0 3300 	strd	r3, r3, [r0]
 8008b40:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b44:	305c      	adds	r0, #92	@ 0x5c
 8008b46:	f000 f97a 	bl	8008e3e <memset>
 8008b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b80 <std+0x58>)
 8008b4c:	6224      	str	r4, [r4, #32]
 8008b4e:	6263      	str	r3, [r4, #36]	@ 0x24
 8008b50:	4b0c      	ldr	r3, [pc, #48]	@ (8008b84 <std+0x5c>)
 8008b52:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008b54:	4b0c      	ldr	r3, [pc, #48]	@ (8008b88 <std+0x60>)
 8008b56:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008b58:	4b0c      	ldr	r3, [pc, #48]	@ (8008b8c <std+0x64>)
 8008b5a:	6323      	str	r3, [r4, #48]	@ 0x30
 8008b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b90 <std+0x68>)
 8008b5e:	429c      	cmp	r4, r3
 8008b60:	d006      	beq.n	8008b70 <std+0x48>
 8008b62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008b66:	4294      	cmp	r4, r2
 8008b68:	d002      	beq.n	8008b70 <std+0x48>
 8008b6a:	33d0      	adds	r3, #208	@ 0xd0
 8008b6c:	429c      	cmp	r4, r3
 8008b6e:	d105      	bne.n	8008b7c <std+0x54>
 8008b70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b78:	f000 ba06 	b.w	8008f88 <__retarget_lock_init_recursive>
 8008b7c:	bd10      	pop	{r4, pc}
 8008b7e:	bf00      	nop
 8008b80:	08008db5 	.word	0x08008db5
 8008b84:	08008ddb 	.word	0x08008ddb
 8008b88:	08008e13 	.word	0x08008e13
 8008b8c:	08008e37 	.word	0x08008e37
 8008b90:	20000384 	.word	0x20000384

08008b94 <stdio_exit_handler>:
 8008b94:	4a02      	ldr	r2, [pc, #8]	@ (8008ba0 <stdio_exit_handler+0xc>)
 8008b96:	4903      	ldr	r1, [pc, #12]	@ (8008ba4 <stdio_exit_handler+0x10>)
 8008b98:	4803      	ldr	r0, [pc, #12]	@ (8008ba8 <stdio_exit_handler+0x14>)
 8008b9a:	f000 b869 	b.w	8008c70 <_fwalk_sglue>
 8008b9e:	bf00      	nop
 8008ba0:	2000000c 	.word	0x2000000c
 8008ba4:	0800bee5 	.word	0x0800bee5
 8008ba8:	2000001c 	.word	0x2000001c

08008bac <cleanup_stdio>:
 8008bac:	6841      	ldr	r1, [r0, #4]
 8008bae:	4b0c      	ldr	r3, [pc, #48]	@ (8008be0 <cleanup_stdio+0x34>)
 8008bb0:	4299      	cmp	r1, r3
 8008bb2:	b510      	push	{r4, lr}
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	d001      	beq.n	8008bbc <cleanup_stdio+0x10>
 8008bb8:	f003 f994 	bl	800bee4 <_fflush_r>
 8008bbc:	68a1      	ldr	r1, [r4, #8]
 8008bbe:	4b09      	ldr	r3, [pc, #36]	@ (8008be4 <cleanup_stdio+0x38>)
 8008bc0:	4299      	cmp	r1, r3
 8008bc2:	d002      	beq.n	8008bca <cleanup_stdio+0x1e>
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f003 f98d 	bl	800bee4 <_fflush_r>
 8008bca:	68e1      	ldr	r1, [r4, #12]
 8008bcc:	4b06      	ldr	r3, [pc, #24]	@ (8008be8 <cleanup_stdio+0x3c>)
 8008bce:	4299      	cmp	r1, r3
 8008bd0:	d004      	beq.n	8008bdc <cleanup_stdio+0x30>
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bd8:	f003 b984 	b.w	800bee4 <_fflush_r>
 8008bdc:	bd10      	pop	{r4, pc}
 8008bde:	bf00      	nop
 8008be0:	20000384 	.word	0x20000384
 8008be4:	200003ec 	.word	0x200003ec
 8008be8:	20000454 	.word	0x20000454

08008bec <global_stdio_init.part.0>:
 8008bec:	b510      	push	{r4, lr}
 8008bee:	4b0b      	ldr	r3, [pc, #44]	@ (8008c1c <global_stdio_init.part.0+0x30>)
 8008bf0:	2104      	movs	r1, #4
 8008bf2:	4c0b      	ldr	r4, [pc, #44]	@ (8008c20 <global_stdio_init.part.0+0x34>)
 8008bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8008c24 <global_stdio_init.part.0+0x38>)
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f7ff ff94 	bl	8008b28 <std>
 8008c00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008c04:	2201      	movs	r2, #1
 8008c06:	2109      	movs	r1, #9
 8008c08:	f7ff ff8e 	bl	8008b28 <std>
 8008c0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008c10:	2202      	movs	r2, #2
 8008c12:	2112      	movs	r1, #18
 8008c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c18:	f7ff bf86 	b.w	8008b28 <std>
 8008c1c:	200004bc 	.word	0x200004bc
 8008c20:	20000384 	.word	0x20000384
 8008c24:	08008b95 	.word	0x08008b95

08008c28 <__sfp_lock_acquire>:
 8008c28:	4801      	ldr	r0, [pc, #4]	@ (8008c30 <__sfp_lock_acquire+0x8>)
 8008c2a:	f000 b9ae 	b.w	8008f8a <__retarget_lock_acquire_recursive>
 8008c2e:	bf00      	nop
 8008c30:	200004c5 	.word	0x200004c5

08008c34 <__sfp_lock_release>:
 8008c34:	4801      	ldr	r0, [pc, #4]	@ (8008c3c <__sfp_lock_release+0x8>)
 8008c36:	f000 b9a9 	b.w	8008f8c <__retarget_lock_release_recursive>
 8008c3a:	bf00      	nop
 8008c3c:	200004c5 	.word	0x200004c5

08008c40 <__sinit>:
 8008c40:	b510      	push	{r4, lr}
 8008c42:	4604      	mov	r4, r0
 8008c44:	f7ff fff0 	bl	8008c28 <__sfp_lock_acquire>
 8008c48:	6a23      	ldr	r3, [r4, #32]
 8008c4a:	b11b      	cbz	r3, 8008c54 <__sinit+0x14>
 8008c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c50:	f7ff bff0 	b.w	8008c34 <__sfp_lock_release>
 8008c54:	4b04      	ldr	r3, [pc, #16]	@ (8008c68 <__sinit+0x28>)
 8008c56:	6223      	str	r3, [r4, #32]
 8008c58:	4b04      	ldr	r3, [pc, #16]	@ (8008c6c <__sinit+0x2c>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1f5      	bne.n	8008c4c <__sinit+0xc>
 8008c60:	f7ff ffc4 	bl	8008bec <global_stdio_init.part.0>
 8008c64:	e7f2      	b.n	8008c4c <__sinit+0xc>
 8008c66:	bf00      	nop
 8008c68:	08008bad 	.word	0x08008bad
 8008c6c:	200004bc 	.word	0x200004bc

08008c70 <_fwalk_sglue>:
 8008c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c74:	4607      	mov	r7, r0
 8008c76:	4688      	mov	r8, r1
 8008c78:	4614      	mov	r4, r2
 8008c7a:	2600      	movs	r6, #0
 8008c7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c80:	f1b9 0901 	subs.w	r9, r9, #1
 8008c84:	d505      	bpl.n	8008c92 <_fwalk_sglue+0x22>
 8008c86:	6824      	ldr	r4, [r4, #0]
 8008c88:	2c00      	cmp	r4, #0
 8008c8a:	d1f7      	bne.n	8008c7c <_fwalk_sglue+0xc>
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c92:	89ab      	ldrh	r3, [r5, #12]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d907      	bls.n	8008ca8 <_fwalk_sglue+0x38>
 8008c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	d003      	beq.n	8008ca8 <_fwalk_sglue+0x38>
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	47c0      	blx	r8
 8008ca6:	4306      	orrs	r6, r0
 8008ca8:	3568      	adds	r5, #104	@ 0x68
 8008caa:	e7e9      	b.n	8008c80 <_fwalk_sglue+0x10>

08008cac <sniprintf>:
 8008cac:	b40c      	push	{r2, r3}
 8008cae:	4b19      	ldr	r3, [pc, #100]	@ (8008d14 <sniprintf+0x68>)
 8008cb0:	b530      	push	{r4, r5, lr}
 8008cb2:	1e0c      	subs	r4, r1, #0
 8008cb4:	b09d      	sub	sp, #116	@ 0x74
 8008cb6:	681d      	ldr	r5, [r3, #0]
 8008cb8:	da08      	bge.n	8008ccc <sniprintf+0x20>
 8008cba:	238b      	movs	r3, #139	@ 0x8b
 8008cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc0:	602b      	str	r3, [r5, #0]
 8008cc2:	b01d      	add	sp, #116	@ 0x74
 8008cc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cc8:	b002      	add	sp, #8
 8008cca:	4770      	bx	lr
 8008ccc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008cd0:	9002      	str	r0, [sp, #8]
 8008cd2:	9006      	str	r0, [sp, #24]
 8008cd4:	a902      	add	r1, sp, #8
 8008cd6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008cda:	f04f 0300 	mov.w	r3, #0
 8008cde:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008ce4:	bf14      	ite	ne
 8008ce6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008cea:	4623      	moveq	r3, r4
 8008cec:	9304      	str	r3, [sp, #16]
 8008cee:	9307      	str	r3, [sp, #28]
 8008cf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008cf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008cf8:	ab21      	add	r3, sp, #132	@ 0x84
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	f002 fc56 	bl	800b5ac <_svfiprintf_r>
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	bfbc      	itt	lt
 8008d04:	238b      	movlt	r3, #139	@ 0x8b
 8008d06:	602b      	strlt	r3, [r5, #0]
 8008d08:	2c00      	cmp	r4, #0
 8008d0a:	d0da      	beq.n	8008cc2 <sniprintf+0x16>
 8008d0c:	9b02      	ldr	r3, [sp, #8]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	701a      	strb	r2, [r3, #0]
 8008d12:	e7d6      	b.n	8008cc2 <sniprintf+0x16>
 8008d14:	20000018 	.word	0x20000018

08008d18 <siprintf>:
 8008d18:	b40e      	push	{r1, r2, r3}
 8008d1a:	b510      	push	{r4, lr}
 8008d1c:	b09d      	sub	sp, #116	@ 0x74
 8008d1e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008d22:	2400      	movs	r4, #0
 8008d24:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008d26:	9002      	str	r0, [sp, #8]
 8008d28:	9006      	str	r0, [sp, #24]
 8008d2a:	9107      	str	r1, [sp, #28]
 8008d2c:	9104      	str	r1, [sp, #16]
 8008d2e:	4809      	ldr	r0, [pc, #36]	@ (8008d54 <siprintf+0x3c>)
 8008d30:	4909      	ldr	r1, [pc, #36]	@ (8008d58 <siprintf+0x40>)
 8008d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d36:	9105      	str	r1, [sp, #20]
 8008d38:	a902      	add	r1, sp, #8
 8008d3a:	6800      	ldr	r0, [r0, #0]
 8008d3c:	9301      	str	r3, [sp, #4]
 8008d3e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008d40:	f002 fc34 	bl	800b5ac <_svfiprintf_r>
 8008d44:	9b02      	ldr	r3, [sp, #8]
 8008d46:	701c      	strb	r4, [r3, #0]
 8008d48:	b01d      	add	sp, #116	@ 0x74
 8008d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d4e:	b003      	add	sp, #12
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	20000018 	.word	0x20000018
 8008d58:	ffff0208 	.word	0xffff0208

08008d5c <siscanf>:
 8008d5c:	b40e      	push	{r1, r2, r3}
 8008d5e:	b570      	push	{r4, r5, r6, lr}
 8008d60:	b09d      	sub	sp, #116	@ 0x74
 8008d62:	2500      	movs	r5, #0
 8008d64:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008d68:	ac21      	add	r4, sp, #132	@ 0x84
 8008d6a:	951b      	str	r5, [sp, #108]	@ 0x6c
 8008d6c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008d70:	f854 6b04 	ldr.w	r6, [r4], #4
 8008d74:	9002      	str	r0, [sp, #8]
 8008d76:	9006      	str	r0, [sp, #24]
 8008d78:	f7f7 fa5e 	bl	8000238 <strlen>
 8008d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008dac <siscanf+0x50>)
 8008d7e:	4632      	mov	r2, r6
 8008d80:	9003      	str	r0, [sp, #12]
 8008d82:	a902      	add	r1, sp, #8
 8008d84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008d8a:	9007      	str	r0, [sp, #28]
 8008d8c:	4808      	ldr	r0, [pc, #32]	@ (8008db0 <siscanf+0x54>)
 8008d8e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d92:	4623      	mov	r3, r4
 8008d94:	6800      	ldr	r0, [r0, #0]
 8008d96:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008d98:	9514      	str	r5, [sp, #80]	@ 0x50
 8008d9a:	9401      	str	r4, [sp, #4]
 8008d9c:	f002 fd5c 	bl	800b858 <__ssvfiscanf_r>
 8008da0:	b01d      	add	sp, #116	@ 0x74
 8008da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008da6:	b003      	add	sp, #12
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	08008dd7 	.word	0x08008dd7
 8008db0:	20000018 	.word	0x20000018

08008db4 <__sread>:
 8008db4:	b510      	push	{r4, lr}
 8008db6:	460c      	mov	r4, r1
 8008db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dbc:	f000 f896 	bl	8008eec <_read_r>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	bfab      	itete	ge
 8008dc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8008dc8:	181b      	addge	r3, r3, r0
 8008dca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008dce:	bfac      	ite	ge
 8008dd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008dd2:	81a3      	strhlt	r3, [r4, #12]
 8008dd4:	bd10      	pop	{r4, pc}

08008dd6 <__seofread>:
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	4770      	bx	lr

08008dda <__swrite>:
 8008dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dde:	461f      	mov	r7, r3
 8008de0:	898b      	ldrh	r3, [r1, #12]
 8008de2:	4605      	mov	r5, r0
 8008de4:	460c      	mov	r4, r1
 8008de6:	05db      	lsls	r3, r3, #23
 8008de8:	4616      	mov	r6, r2
 8008dea:	d505      	bpl.n	8008df8 <__swrite+0x1e>
 8008dec:	2302      	movs	r3, #2
 8008dee:	2200      	movs	r2, #0
 8008df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df4:	f000 f868 	bl	8008ec8 <_lseek_r>
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	4632      	mov	r2, r6
 8008dfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e00:	4628      	mov	r0, r5
 8008e02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	463b      	mov	r3, r7
 8008e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0e:	f000 b87f 	b.w	8008f10 <_write_r>

08008e12 <__sseek>:
 8008e12:	b510      	push	{r4, lr}
 8008e14:	460c      	mov	r4, r1
 8008e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1a:	f000 f855 	bl	8008ec8 <_lseek_r>
 8008e1e:	1c43      	adds	r3, r0, #1
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	bf15      	itete	ne
 8008e24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e2e:	81a3      	strheq	r3, [r4, #12]
 8008e30:	bf18      	it	ne
 8008e32:	81a3      	strhne	r3, [r4, #12]
 8008e34:	bd10      	pop	{r4, pc}

08008e36 <__sclose>:
 8008e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3a:	f000 b835 	b.w	8008ea8 <_close_r>

08008e3e <memset>:
 8008e3e:	4402      	add	r2, r0
 8008e40:	4603      	mov	r3, r0
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d100      	bne.n	8008e48 <memset+0xa>
 8008e46:	4770      	bx	lr
 8008e48:	f803 1b01 	strb.w	r1, [r3], #1
 8008e4c:	e7f9      	b.n	8008e42 <memset+0x4>

08008e4e <strncpy>:
 8008e4e:	3901      	subs	r1, #1
 8008e50:	4603      	mov	r3, r0
 8008e52:	b510      	push	{r4, lr}
 8008e54:	b132      	cbz	r2, 8008e64 <strncpy+0x16>
 8008e56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008e5a:	3a01      	subs	r2, #1
 8008e5c:	f803 4b01 	strb.w	r4, [r3], #1
 8008e60:	2c00      	cmp	r4, #0
 8008e62:	d1f7      	bne.n	8008e54 <strncpy+0x6>
 8008e64:	441a      	add	r2, r3
 8008e66:	2100      	movs	r1, #0
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d100      	bne.n	8008e6e <strncpy+0x20>
 8008e6c:	bd10      	pop	{r4, pc}
 8008e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e72:	e7f9      	b.n	8008e68 <strncpy+0x1a>

08008e74 <strstr>:
 8008e74:	780a      	ldrb	r2, [r1, #0]
 8008e76:	b570      	push	{r4, r5, r6, lr}
 8008e78:	b96a      	cbnz	r2, 8008e96 <strstr+0x22>
 8008e7a:	bd70      	pop	{r4, r5, r6, pc}
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d109      	bne.n	8008e94 <strstr+0x20>
 8008e80:	460c      	mov	r4, r1
 8008e82:	4605      	mov	r5, r0
 8008e84:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d0f6      	beq.n	8008e7a <strstr+0x6>
 8008e8c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008e90:	429e      	cmp	r6, r3
 8008e92:	d0f7      	beq.n	8008e84 <strstr+0x10>
 8008e94:	3001      	adds	r0, #1
 8008e96:	7803      	ldrb	r3, [r0, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1ef      	bne.n	8008e7c <strstr+0x8>
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	e7ec      	b.n	8008e7a <strstr+0x6>

08008ea0 <_localeconv_r>:
 8008ea0:	4800      	ldr	r0, [pc, #0]	@ (8008ea4 <_localeconv_r+0x4>)
 8008ea2:	4770      	bx	lr
 8008ea4:	20000158 	.word	0x20000158

08008ea8 <_close_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	2300      	movs	r3, #0
 8008eac:	4d05      	ldr	r5, [pc, #20]	@ (8008ec4 <_close_r+0x1c>)
 8008eae:	4604      	mov	r4, r0
 8008eb0:	4608      	mov	r0, r1
 8008eb2:	602b      	str	r3, [r5, #0]
 8008eb4:	f7f8 fea6 	bl	8001c04 <_close>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	d102      	bne.n	8008ec2 <_close_r+0x1a>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b103      	cbz	r3, 8008ec2 <_close_r+0x1a>
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	200004c0 	.word	0x200004c0

08008ec8 <_lseek_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4604      	mov	r4, r0
 8008ecc:	4d06      	ldr	r5, [pc, #24]	@ (8008ee8 <_lseek_r+0x20>)
 8008ece:	4608      	mov	r0, r1
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	602a      	str	r2, [r5, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	f7f8 febb 	bl	8001c52 <_lseek>
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	d102      	bne.n	8008ee6 <_lseek_r+0x1e>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	b103      	cbz	r3, 8008ee6 <_lseek_r+0x1e>
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	bd38      	pop	{r3, r4, r5, pc}
 8008ee8:	200004c0 	.word	0x200004c0

08008eec <_read_r>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4d06      	ldr	r5, [pc, #24]	@ (8008f0c <_read_r+0x20>)
 8008ef2:	4608      	mov	r0, r1
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	602a      	str	r2, [r5, #0]
 8008efa:	461a      	mov	r2, r3
 8008efc:	f7f8 fe49 	bl	8001b92 <_read>
 8008f00:	1c43      	adds	r3, r0, #1
 8008f02:	d102      	bne.n	8008f0a <_read_r+0x1e>
 8008f04:	682b      	ldr	r3, [r5, #0]
 8008f06:	b103      	cbz	r3, 8008f0a <_read_r+0x1e>
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	bd38      	pop	{r3, r4, r5, pc}
 8008f0c:	200004c0 	.word	0x200004c0

08008f10 <_write_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4604      	mov	r4, r0
 8008f14:	4d06      	ldr	r5, [pc, #24]	@ (8008f30 <_write_r+0x20>)
 8008f16:	4608      	mov	r0, r1
 8008f18:	4611      	mov	r1, r2
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	602a      	str	r2, [r5, #0]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f7f8 fe54 	bl	8001bcc <_write>
 8008f24:	1c43      	adds	r3, r0, #1
 8008f26:	d102      	bne.n	8008f2e <_write_r+0x1e>
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	b103      	cbz	r3, 8008f2e <_write_r+0x1e>
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	bd38      	pop	{r3, r4, r5, pc}
 8008f30:	200004c0 	.word	0x200004c0

08008f34 <__errno>:
 8008f34:	4b01      	ldr	r3, [pc, #4]	@ (8008f3c <__errno+0x8>)
 8008f36:	6818      	ldr	r0, [r3, #0]
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	20000018 	.word	0x20000018

08008f40 <__libc_init_array>:
 8008f40:	b570      	push	{r4, r5, r6, lr}
 8008f42:	4d0d      	ldr	r5, [pc, #52]	@ (8008f78 <__libc_init_array+0x38>)
 8008f44:	2600      	movs	r6, #0
 8008f46:	4c0d      	ldr	r4, [pc, #52]	@ (8008f7c <__libc_init_array+0x3c>)
 8008f48:	1b64      	subs	r4, r4, r5
 8008f4a:	10a4      	asrs	r4, r4, #2
 8008f4c:	42a6      	cmp	r6, r4
 8008f4e:	d109      	bne.n	8008f64 <__libc_init_array+0x24>
 8008f50:	4d0b      	ldr	r5, [pc, #44]	@ (8008f80 <__libc_init_array+0x40>)
 8008f52:	2600      	movs	r6, #0
 8008f54:	4c0b      	ldr	r4, [pc, #44]	@ (8008f84 <__libc_init_array+0x44>)
 8008f56:	f003 ff93 	bl	800ce80 <_init>
 8008f5a:	1b64      	subs	r4, r4, r5
 8008f5c:	10a4      	asrs	r4, r4, #2
 8008f5e:	42a6      	cmp	r6, r4
 8008f60:	d105      	bne.n	8008f6e <__libc_init_array+0x2e>
 8008f62:	bd70      	pop	{r4, r5, r6, pc}
 8008f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f68:	3601      	adds	r6, #1
 8008f6a:	4798      	blx	r3
 8008f6c:	e7ee      	b.n	8008f4c <__libc_init_array+0xc>
 8008f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f72:	3601      	adds	r6, #1
 8008f74:	4798      	blx	r3
 8008f76:	e7f2      	b.n	8008f5e <__libc_init_array+0x1e>
 8008f78:	0800d404 	.word	0x0800d404
 8008f7c:	0800d404 	.word	0x0800d404
 8008f80:	0800d404 	.word	0x0800d404
 8008f84:	0800d408 	.word	0x0800d408

08008f88 <__retarget_lock_init_recursive>:
 8008f88:	4770      	bx	lr

08008f8a <__retarget_lock_acquire_recursive>:
 8008f8a:	4770      	bx	lr

08008f8c <__retarget_lock_release_recursive>:
 8008f8c:	4770      	bx	lr

08008f8e <memchr>:
 8008f8e:	b2c9      	uxtb	r1, r1
 8008f90:	4603      	mov	r3, r0
 8008f92:	4402      	add	r2, r0
 8008f94:	b510      	push	{r4, lr}
 8008f96:	4293      	cmp	r3, r2
 8008f98:	4618      	mov	r0, r3
 8008f9a:	d101      	bne.n	8008fa0 <memchr+0x12>
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	e003      	b.n	8008fa8 <memchr+0x1a>
 8008fa0:	7804      	ldrb	r4, [r0, #0]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	428c      	cmp	r4, r1
 8008fa6:	d1f6      	bne.n	8008f96 <memchr+0x8>
 8008fa8:	bd10      	pop	{r4, pc}
	...

08008fac <nanf>:
 8008fac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008fb4 <nanf+0x8>
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	7fc00000 	.word	0x7fc00000

08008fb8 <quorem>:
 8008fb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbc:	6903      	ldr	r3, [r0, #16]
 8008fbe:	4607      	mov	r7, r0
 8008fc0:	690c      	ldr	r4, [r1, #16]
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	f2c0 8083 	blt.w	80090ce <quorem+0x116>
 8008fc8:	3c01      	subs	r4, #1
 8008fca:	f100 0514 	add.w	r5, r0, #20
 8008fce:	f101 0814 	add.w	r8, r1, #20
 8008fd2:	00a3      	lsls	r3, r4, #2
 8008fd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fe2:	9301      	str	r3, [sp, #4]
 8008fe4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	429a      	cmp	r2, r3
 8008fec:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ff0:	d331      	bcc.n	8009056 <quorem+0x9e>
 8008ff2:	f04f 0a00 	mov.w	sl, #0
 8008ff6:	46c4      	mov	ip, r8
 8008ff8:	46ae      	mov	lr, r5
 8008ffa:	46d3      	mov	fp, sl
 8008ffc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009000:	b298      	uxth	r0, r3
 8009002:	45e1      	cmp	r9, ip
 8009004:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009008:	fb06 a000 	mla	r0, r6, r0, sl
 800900c:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8009010:	b280      	uxth	r0, r0
 8009012:	fb06 2303 	mla	r3, r6, r3, r2
 8009016:	f8de 2000 	ldr.w	r2, [lr]
 800901a:	b292      	uxth	r2, r2
 800901c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009020:	eba2 0200 	sub.w	r2, r2, r0
 8009024:	b29b      	uxth	r3, r3
 8009026:	f8de 0000 	ldr.w	r0, [lr]
 800902a:	445a      	add	r2, fp
 800902c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009030:	b292      	uxth	r2, r2
 8009032:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009036:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800903a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800903e:	f84e 2b04 	str.w	r2, [lr], #4
 8009042:	d2db      	bcs.n	8008ffc <quorem+0x44>
 8009044:	9b00      	ldr	r3, [sp, #0]
 8009046:	58eb      	ldr	r3, [r5, r3]
 8009048:	b92b      	cbnz	r3, 8009056 <quorem+0x9e>
 800904a:	9b01      	ldr	r3, [sp, #4]
 800904c:	3b04      	subs	r3, #4
 800904e:	429d      	cmp	r5, r3
 8009050:	461a      	mov	r2, r3
 8009052:	d330      	bcc.n	80090b6 <quorem+0xfe>
 8009054:	613c      	str	r4, [r7, #16]
 8009056:	4638      	mov	r0, r7
 8009058:	f001 f9d0 	bl	800a3fc <__mcmp>
 800905c:	2800      	cmp	r0, #0
 800905e:	db26      	blt.n	80090ae <quorem+0xf6>
 8009060:	4629      	mov	r1, r5
 8009062:	2000      	movs	r0, #0
 8009064:	f858 2b04 	ldr.w	r2, [r8], #4
 8009068:	f8d1 c000 	ldr.w	ip, [r1]
 800906c:	fa1f fe82 	uxth.w	lr, r2
 8009070:	45c1      	cmp	r9, r8
 8009072:	fa1f f38c 	uxth.w	r3, ip
 8009076:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800907a:	eba3 030e 	sub.w	r3, r3, lr
 800907e:	4403      	add	r3, r0
 8009080:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009084:	b29b      	uxth	r3, r3
 8009086:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800908a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800908e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009092:	f841 3b04 	str.w	r3, [r1], #4
 8009096:	d2e5      	bcs.n	8009064 <quorem+0xac>
 8009098:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800909c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090a0:	b922      	cbnz	r2, 80090ac <quorem+0xf4>
 80090a2:	3b04      	subs	r3, #4
 80090a4:	429d      	cmp	r5, r3
 80090a6:	461a      	mov	r2, r3
 80090a8:	d30b      	bcc.n	80090c2 <quorem+0x10a>
 80090aa:	613c      	str	r4, [r7, #16]
 80090ac:	3601      	adds	r6, #1
 80090ae:	4630      	mov	r0, r6
 80090b0:	b003      	add	sp, #12
 80090b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b6:	6812      	ldr	r2, [r2, #0]
 80090b8:	3b04      	subs	r3, #4
 80090ba:	2a00      	cmp	r2, #0
 80090bc:	d1ca      	bne.n	8009054 <quorem+0x9c>
 80090be:	3c01      	subs	r4, #1
 80090c0:	e7c5      	b.n	800904e <quorem+0x96>
 80090c2:	6812      	ldr	r2, [r2, #0]
 80090c4:	3b04      	subs	r3, #4
 80090c6:	2a00      	cmp	r2, #0
 80090c8:	d1ef      	bne.n	80090aa <quorem+0xf2>
 80090ca:	3c01      	subs	r4, #1
 80090cc:	e7ea      	b.n	80090a4 <quorem+0xec>
 80090ce:	2000      	movs	r0, #0
 80090d0:	e7ee      	b.n	80090b0 <quorem+0xf8>
 80090d2:	0000      	movs	r0, r0
 80090d4:	0000      	movs	r0, r0
	...

080090d8 <_dtoa_r>:
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	69c7      	ldr	r7, [r0, #28]
 80090de:	b097      	sub	sp, #92	@ 0x5c
 80090e0:	4681      	mov	r9, r0
 80090e2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80090e4:	9107      	str	r1, [sp, #28]
 80090e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80090e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80090ea:	ec55 4b10 	vmov	r4, r5, d0
 80090ee:	ed8d 0b04 	vstr	d0, [sp, #16]
 80090f2:	b97f      	cbnz	r7, 8009114 <_dtoa_r+0x3c>
 80090f4:	2010      	movs	r0, #16
 80090f6:	f000 fe0b 	bl	8009d10 <malloc>
 80090fa:	4602      	mov	r2, r0
 80090fc:	f8c9 001c 	str.w	r0, [r9, #28]
 8009100:	b920      	cbnz	r0, 800910c <_dtoa_r+0x34>
 8009102:	4ba9      	ldr	r3, [pc, #676]	@ (80093a8 <_dtoa_r+0x2d0>)
 8009104:	21ef      	movs	r1, #239	@ 0xef
 8009106:	48a9      	ldr	r0, [pc, #676]	@ (80093ac <_dtoa_r+0x2d4>)
 8009108:	f002 ffd6 	bl	800c0b8 <__assert_func>
 800910c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009110:	6007      	str	r7, [r0, #0]
 8009112:	60c7      	str	r7, [r0, #12]
 8009114:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009118:	6819      	ldr	r1, [r3, #0]
 800911a:	b159      	cbz	r1, 8009134 <_dtoa_r+0x5c>
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	2301      	movs	r3, #1
 8009120:	4648      	mov	r0, r9
 8009122:	4093      	lsls	r3, r2
 8009124:	604a      	str	r2, [r1, #4]
 8009126:	608b      	str	r3, [r1, #8]
 8009128:	f000 fee8 	bl	8009efc <_Bfree>
 800912c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009130:	2200      	movs	r2, #0
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	1e2b      	subs	r3, r5, #0
 8009136:	bfb7      	itett	lt
 8009138:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800913c:	2300      	movge	r3, #0
 800913e:	2201      	movlt	r2, #1
 8009140:	9305      	strlt	r3, [sp, #20]
 8009142:	bfa8      	it	ge
 8009144:	6033      	strge	r3, [r6, #0]
 8009146:	9f05      	ldr	r7, [sp, #20]
 8009148:	4b99      	ldr	r3, [pc, #612]	@ (80093b0 <_dtoa_r+0x2d8>)
 800914a:	bfb8      	it	lt
 800914c:	6032      	strlt	r2, [r6, #0]
 800914e:	43bb      	bics	r3, r7
 8009150:	d112      	bne.n	8009178 <_dtoa_r+0xa0>
 8009152:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009156:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800915e:	4323      	orrs	r3, r4
 8009160:	f000 855a 	beq.w	8009c18 <_dtoa_r+0xb40>
 8009164:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009166:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80093c4 <_dtoa_r+0x2ec>
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 855c 	beq.w	8009c28 <_dtoa_r+0xb50>
 8009170:	f10a 0303 	add.w	r3, sl, #3
 8009174:	f000 bd56 	b.w	8009c24 <_dtoa_r+0xb4c>
 8009178:	ed9d 7b04 	vldr	d7, [sp, #16]
 800917c:	2200      	movs	r2, #0
 800917e:	2300      	movs	r3, #0
 8009180:	ec51 0b17 	vmov	r0, r1, d7
 8009184:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009188:	f7f7 fc82 	bl	8000a90 <__aeabi_dcmpeq>
 800918c:	4680      	mov	r8, r0
 800918e:	b158      	cbz	r0, 80091a8 <_dtoa_r+0xd0>
 8009190:	2301      	movs	r3, #1
 8009192:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009194:	6013      	str	r3, [r2, #0]
 8009196:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009198:	b113      	cbz	r3, 80091a0 <_dtoa_r+0xc8>
 800919a:	4b86      	ldr	r3, [pc, #536]	@ (80093b4 <_dtoa_r+0x2dc>)
 800919c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80093c8 <_dtoa_r+0x2f0>
 80091a4:	f000 bd40 	b.w	8009c28 <_dtoa_r+0xb50>
 80091a8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80091ac:	aa14      	add	r2, sp, #80	@ 0x50
 80091ae:	a915      	add	r1, sp, #84	@ 0x54
 80091b0:	4648      	mov	r0, r9
 80091b2:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80091b6:	f001 fa49 	bl	800a64c <__d2b>
 80091ba:	9002      	str	r0, [sp, #8]
 80091bc:	2e00      	cmp	r6, #0
 80091be:	d076      	beq.n	80092ae <_dtoa_r+0x1d6>
 80091c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091c2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80091c6:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80091ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091ce:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80091d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80091d6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80091da:	4619      	mov	r1, r3
 80091dc:	2200      	movs	r2, #0
 80091de:	4b76      	ldr	r3, [pc, #472]	@ (80093b8 <_dtoa_r+0x2e0>)
 80091e0:	f7f7 f836 	bl	8000250 <__aeabi_dsub>
 80091e4:	a36a      	add	r3, pc, #424	@ (adr r3, 8009390 <_dtoa_r+0x2b8>)
 80091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ea:	f7f7 f9e9 	bl	80005c0 <__aeabi_dmul>
 80091ee:	a36a      	add	r3, pc, #424	@ (adr r3, 8009398 <_dtoa_r+0x2c0>)
 80091f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f4:	f7f7 f82e 	bl	8000254 <__adddf3>
 80091f8:	4604      	mov	r4, r0
 80091fa:	460d      	mov	r5, r1
 80091fc:	4630      	mov	r0, r6
 80091fe:	f7f7 f975 	bl	80004ec <__aeabi_i2d>
 8009202:	a367      	add	r3, pc, #412	@ (adr r3, 80093a0 <_dtoa_r+0x2c8>)
 8009204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009208:	f7f7 f9da 	bl	80005c0 <__aeabi_dmul>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4620      	mov	r0, r4
 8009212:	4629      	mov	r1, r5
 8009214:	f7f7 f81e 	bl	8000254 <__adddf3>
 8009218:	4604      	mov	r4, r0
 800921a:	460d      	mov	r5, r1
 800921c:	f7f7 fc80 	bl	8000b20 <__aeabi_d2iz>
 8009220:	2200      	movs	r2, #0
 8009222:	4607      	mov	r7, r0
 8009224:	2300      	movs	r3, #0
 8009226:	4620      	mov	r0, r4
 8009228:	4629      	mov	r1, r5
 800922a:	f7f7 fc3b 	bl	8000aa4 <__aeabi_dcmplt>
 800922e:	b140      	cbz	r0, 8009242 <_dtoa_r+0x16a>
 8009230:	4638      	mov	r0, r7
 8009232:	f7f7 f95b 	bl	80004ec <__aeabi_i2d>
 8009236:	4622      	mov	r2, r4
 8009238:	462b      	mov	r3, r5
 800923a:	f7f7 fc29 	bl	8000a90 <__aeabi_dcmpeq>
 800923e:	b900      	cbnz	r0, 8009242 <_dtoa_r+0x16a>
 8009240:	3f01      	subs	r7, #1
 8009242:	2f16      	cmp	r7, #22
 8009244:	d852      	bhi.n	80092ec <_dtoa_r+0x214>
 8009246:	4b5d      	ldr	r3, [pc, #372]	@ (80093bc <_dtoa_r+0x2e4>)
 8009248:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800924c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f7f7 fc26 	bl	8000aa4 <__aeabi_dcmplt>
 8009258:	2800      	cmp	r0, #0
 800925a:	d049      	beq.n	80092f0 <_dtoa_r+0x218>
 800925c:	3f01      	subs	r7, #1
 800925e:	2300      	movs	r3, #0
 8009260:	9310      	str	r3, [sp, #64]	@ 0x40
 8009262:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009264:	1b9b      	subs	r3, r3, r6
 8009266:	1e5a      	subs	r2, r3, #1
 8009268:	bf4c      	ite	mi
 800926a:	f1c3 0301 	rsbmi	r3, r3, #1
 800926e:	2300      	movpl	r3, #0
 8009270:	9206      	str	r2, [sp, #24]
 8009272:	bf45      	ittet	mi
 8009274:	9300      	strmi	r3, [sp, #0]
 8009276:	2300      	movmi	r3, #0
 8009278:	9300      	strpl	r3, [sp, #0]
 800927a:	9306      	strmi	r3, [sp, #24]
 800927c:	2f00      	cmp	r7, #0
 800927e:	db39      	blt.n	80092f4 <_dtoa_r+0x21c>
 8009280:	9b06      	ldr	r3, [sp, #24]
 8009282:	970d      	str	r7, [sp, #52]	@ 0x34
 8009284:	443b      	add	r3, r7
 8009286:	9306      	str	r3, [sp, #24]
 8009288:	2300      	movs	r3, #0
 800928a:	9308      	str	r3, [sp, #32]
 800928c:	9b07      	ldr	r3, [sp, #28]
 800928e:	2b09      	cmp	r3, #9
 8009290:	d863      	bhi.n	800935a <_dtoa_r+0x282>
 8009292:	2b05      	cmp	r3, #5
 8009294:	bfc5      	ittet	gt
 8009296:	3b04      	subgt	r3, #4
 8009298:	2400      	movgt	r4, #0
 800929a:	2401      	movle	r4, #1
 800929c:	9307      	strgt	r3, [sp, #28]
 800929e:	9b07      	ldr	r3, [sp, #28]
 80092a0:	3b02      	subs	r3, #2
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d865      	bhi.n	8009372 <_dtoa_r+0x29a>
 80092a6:	e8df f003 	tbb	[pc, r3]
 80092aa:	5654      	.short	0x5654
 80092ac:	2d39      	.short	0x2d39
 80092ae:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80092b2:	441e      	add	r6, r3
 80092b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80092b8:	2b20      	cmp	r3, #32
 80092ba:	bfc9      	itett	gt
 80092bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80092c0:	f1c3 0320 	rsble	r3, r3, #32
 80092c4:	409f      	lslgt	r7, r3
 80092c6:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80092ca:	bfd8      	it	le
 80092cc:	fa04 f003 	lslle.w	r0, r4, r3
 80092d0:	f106 36ff 	add.w	r6, r6, #4294967295
 80092d4:	bfc4      	itt	gt
 80092d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80092da:	ea47 0003 	orrgt.w	r0, r7, r3
 80092de:	f7f7 f8f5 	bl	80004cc <__aeabi_ui2d>
 80092e2:	2201      	movs	r2, #1
 80092e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80092e8:	9212      	str	r2, [sp, #72]	@ 0x48
 80092ea:	e776      	b.n	80091da <_dtoa_r+0x102>
 80092ec:	2301      	movs	r3, #1
 80092ee:	e7b7      	b.n	8009260 <_dtoa_r+0x188>
 80092f0:	9010      	str	r0, [sp, #64]	@ 0x40
 80092f2:	e7b6      	b.n	8009262 <_dtoa_r+0x18a>
 80092f4:	9b00      	ldr	r3, [sp, #0]
 80092f6:	1bdb      	subs	r3, r3, r7
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	427b      	negs	r3, r7
 80092fc:	9308      	str	r3, [sp, #32]
 80092fe:	2300      	movs	r3, #0
 8009300:	930d      	str	r3, [sp, #52]	@ 0x34
 8009302:	e7c3      	b.n	800928c <_dtoa_r+0x1b4>
 8009304:	2301      	movs	r3, #1
 8009306:	9309      	str	r3, [sp, #36]	@ 0x24
 8009308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800930a:	eb07 0b03 	add.w	fp, r7, r3
 800930e:	f10b 0301 	add.w	r3, fp, #1
 8009312:	2b01      	cmp	r3, #1
 8009314:	9303      	str	r3, [sp, #12]
 8009316:	bfb8      	it	lt
 8009318:	2301      	movlt	r3, #1
 800931a:	e006      	b.n	800932a <_dtoa_r+0x252>
 800931c:	2301      	movs	r3, #1
 800931e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009320:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009322:	2b00      	cmp	r3, #0
 8009324:	dd28      	ble.n	8009378 <_dtoa_r+0x2a0>
 8009326:	469b      	mov	fp, r3
 8009328:	9303      	str	r3, [sp, #12]
 800932a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800932e:	2100      	movs	r1, #0
 8009330:	2204      	movs	r2, #4
 8009332:	f102 0514 	add.w	r5, r2, #20
 8009336:	429d      	cmp	r5, r3
 8009338:	d926      	bls.n	8009388 <_dtoa_r+0x2b0>
 800933a:	6041      	str	r1, [r0, #4]
 800933c:	4648      	mov	r0, r9
 800933e:	f000 fd9d 	bl	8009e7c <_Balloc>
 8009342:	4682      	mov	sl, r0
 8009344:	2800      	cmp	r0, #0
 8009346:	d141      	bne.n	80093cc <_dtoa_r+0x2f4>
 8009348:	4b1d      	ldr	r3, [pc, #116]	@ (80093c0 <_dtoa_r+0x2e8>)
 800934a:	4602      	mov	r2, r0
 800934c:	f240 11af 	movw	r1, #431	@ 0x1af
 8009350:	e6d9      	b.n	8009106 <_dtoa_r+0x2e>
 8009352:	2300      	movs	r3, #0
 8009354:	e7e3      	b.n	800931e <_dtoa_r+0x246>
 8009356:	2300      	movs	r3, #0
 8009358:	e7d5      	b.n	8009306 <_dtoa_r+0x22e>
 800935a:	2401      	movs	r4, #1
 800935c:	2300      	movs	r3, #0
 800935e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009360:	9307      	str	r3, [sp, #28]
 8009362:	f04f 3bff 	mov.w	fp, #4294967295
 8009366:	2200      	movs	r2, #0
 8009368:	2312      	movs	r3, #18
 800936a:	f8cd b00c 	str.w	fp, [sp, #12]
 800936e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009370:	e7db      	b.n	800932a <_dtoa_r+0x252>
 8009372:	2301      	movs	r3, #1
 8009374:	9309      	str	r3, [sp, #36]	@ 0x24
 8009376:	e7f4      	b.n	8009362 <_dtoa_r+0x28a>
 8009378:	f04f 0b01 	mov.w	fp, #1
 800937c:	465b      	mov	r3, fp
 800937e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009382:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009386:	e7d0      	b.n	800932a <_dtoa_r+0x252>
 8009388:	3101      	adds	r1, #1
 800938a:	0052      	lsls	r2, r2, #1
 800938c:	e7d1      	b.n	8009332 <_dtoa_r+0x25a>
 800938e:	bf00      	nop
 8009390:	636f4361 	.word	0x636f4361
 8009394:	3fd287a7 	.word	0x3fd287a7
 8009398:	8b60c8b3 	.word	0x8b60c8b3
 800939c:	3fc68a28 	.word	0x3fc68a28
 80093a0:	509f79fb 	.word	0x509f79fb
 80093a4:	3fd34413 	.word	0x3fd34413
 80093a8:	0800cffc 	.word	0x0800cffc
 80093ac:	0800d013 	.word	0x0800d013
 80093b0:	7ff00000 	.word	0x7ff00000
 80093b4:	0800d0ff 	.word	0x0800d0ff
 80093b8:	3ff80000 	.word	0x3ff80000
 80093bc:	0800d1e0 	.word	0x0800d1e0
 80093c0:	0800d06b 	.word	0x0800d06b
 80093c4:	0800cff8 	.word	0x0800cff8
 80093c8:	0800d0fe 	.word	0x0800d0fe
 80093cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80093d0:	6018      	str	r0, [r3, #0]
 80093d2:	9b03      	ldr	r3, [sp, #12]
 80093d4:	2b0e      	cmp	r3, #14
 80093d6:	f200 80a1 	bhi.w	800951c <_dtoa_r+0x444>
 80093da:	2c00      	cmp	r4, #0
 80093dc:	f000 809e 	beq.w	800951c <_dtoa_r+0x444>
 80093e0:	2f00      	cmp	r7, #0
 80093e2:	dd33      	ble.n	800944c <_dtoa_r+0x374>
 80093e4:	f007 020f 	and.w	r2, r7, #15
 80093e8:	4b9b      	ldr	r3, [pc, #620]	@ (8009658 <_dtoa_r+0x580>)
 80093ea:	05f8      	lsls	r0, r7, #23
 80093ec:	ea4f 1427 	mov.w	r4, r7, asr #4
 80093f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093f4:	ed93 7b00 	vldr	d7, [r3]
 80093f8:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80093fc:	d516      	bpl.n	800942c <_dtoa_r+0x354>
 80093fe:	4b97      	ldr	r3, [pc, #604]	@ (800965c <_dtoa_r+0x584>)
 8009400:	f004 040f 	and.w	r4, r4, #15
 8009404:	2603      	movs	r6, #3
 8009406:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800940a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800940e:	f7f7 fa01 	bl	8000814 <__aeabi_ddiv>
 8009412:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009416:	4d91      	ldr	r5, [pc, #580]	@ (800965c <_dtoa_r+0x584>)
 8009418:	b954      	cbnz	r4, 8009430 <_dtoa_r+0x358>
 800941a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800941e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009422:	f7f7 f9f7 	bl	8000814 <__aeabi_ddiv>
 8009426:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800942a:	e028      	b.n	800947e <_dtoa_r+0x3a6>
 800942c:	2602      	movs	r6, #2
 800942e:	e7f2      	b.n	8009416 <_dtoa_r+0x33e>
 8009430:	07e1      	lsls	r1, r4, #31
 8009432:	d508      	bpl.n	8009446 <_dtoa_r+0x36e>
 8009434:	3601      	adds	r6, #1
 8009436:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800943a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800943e:	f7f7 f8bf 	bl	80005c0 <__aeabi_dmul>
 8009442:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009446:	1064      	asrs	r4, r4, #1
 8009448:	3508      	adds	r5, #8
 800944a:	e7e5      	b.n	8009418 <_dtoa_r+0x340>
 800944c:	f000 80af 	beq.w	80095ae <_dtoa_r+0x4d6>
 8009450:	427c      	negs	r4, r7
 8009452:	4b81      	ldr	r3, [pc, #516]	@ (8009658 <_dtoa_r+0x580>)
 8009454:	4d81      	ldr	r5, [pc, #516]	@ (800965c <_dtoa_r+0x584>)
 8009456:	2602      	movs	r6, #2
 8009458:	f004 020f 	and.w	r2, r4, #15
 800945c:	1124      	asrs	r4, r4, #4
 800945e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009462:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946a:	f7f7 f8a9 	bl	80005c0 <__aeabi_dmul>
 800946e:	2300      	movs	r3, #0
 8009470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009474:	2c00      	cmp	r4, #0
 8009476:	f040 808f 	bne.w	8009598 <_dtoa_r+0x4c0>
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1d3      	bne.n	8009426 <_dtoa_r+0x34e>
 800947e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009480:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	f000 8094 	beq.w	80095b2 <_dtoa_r+0x4da>
 800948a:	2200      	movs	r2, #0
 800948c:	4b74      	ldr	r3, [pc, #464]	@ (8009660 <_dtoa_r+0x588>)
 800948e:	4620      	mov	r0, r4
 8009490:	4629      	mov	r1, r5
 8009492:	f7f7 fb07 	bl	8000aa4 <__aeabi_dcmplt>
 8009496:	2800      	cmp	r0, #0
 8009498:	f000 808b 	beq.w	80095b2 <_dtoa_r+0x4da>
 800949c:	9b03      	ldr	r3, [sp, #12]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 8087 	beq.w	80095b2 <_dtoa_r+0x4da>
 80094a4:	f1bb 0f00 	cmp.w	fp, #0
 80094a8:	dd34      	ble.n	8009514 <_dtoa_r+0x43c>
 80094aa:	4620      	mov	r0, r4
 80094ac:	f107 38ff 	add.w	r8, r7, #4294967295
 80094b0:	3601      	adds	r6, #1
 80094b2:	465c      	mov	r4, fp
 80094b4:	2200      	movs	r2, #0
 80094b6:	4b6b      	ldr	r3, [pc, #428]	@ (8009664 <_dtoa_r+0x58c>)
 80094b8:	4629      	mov	r1, r5
 80094ba:	f7f7 f881 	bl	80005c0 <__aeabi_dmul>
 80094be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094c2:	4630      	mov	r0, r6
 80094c4:	f7f7 f812 	bl	80004ec <__aeabi_i2d>
 80094c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094cc:	f7f7 f878 	bl	80005c0 <__aeabi_dmul>
 80094d0:	2200      	movs	r2, #0
 80094d2:	4b65      	ldr	r3, [pc, #404]	@ (8009668 <_dtoa_r+0x590>)
 80094d4:	f7f6 febe 	bl	8000254 <__adddf3>
 80094d8:	4605      	mov	r5, r0
 80094da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80094de:	2c00      	cmp	r4, #0
 80094e0:	d16a      	bne.n	80095b8 <_dtoa_r+0x4e0>
 80094e2:	2200      	movs	r2, #0
 80094e4:	4b61      	ldr	r3, [pc, #388]	@ (800966c <_dtoa_r+0x594>)
 80094e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094ea:	f7f6 feb1 	bl	8000250 <__aeabi_dsub>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094f6:	462a      	mov	r2, r5
 80094f8:	4633      	mov	r3, r6
 80094fa:	f7f7 faf1 	bl	8000ae0 <__aeabi_dcmpgt>
 80094fe:	2800      	cmp	r0, #0
 8009500:	f040 8298 	bne.w	8009a34 <_dtoa_r+0x95c>
 8009504:	462a      	mov	r2, r5
 8009506:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800950a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800950e:	f7f7 fac9 	bl	8000aa4 <__aeabi_dcmplt>
 8009512:	bb38      	cbnz	r0, 8009564 <_dtoa_r+0x48c>
 8009514:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009518:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800951c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800951e:	2b00      	cmp	r3, #0
 8009520:	f2c0 8157 	blt.w	80097d2 <_dtoa_r+0x6fa>
 8009524:	2f0e      	cmp	r7, #14
 8009526:	f300 8154 	bgt.w	80097d2 <_dtoa_r+0x6fa>
 800952a:	4b4b      	ldr	r3, [pc, #300]	@ (8009658 <_dtoa_r+0x580>)
 800952c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009530:	ed93 7b00 	vldr	d7, [r3]
 8009534:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009536:	2b00      	cmp	r3, #0
 8009538:	ed8d 7b00 	vstr	d7, [sp]
 800953c:	f280 80e5 	bge.w	800970a <_dtoa_r+0x632>
 8009540:	9b03      	ldr	r3, [sp, #12]
 8009542:	2b00      	cmp	r3, #0
 8009544:	f300 80e1 	bgt.w	800970a <_dtoa_r+0x632>
 8009548:	d10c      	bne.n	8009564 <_dtoa_r+0x48c>
 800954a:	2200      	movs	r2, #0
 800954c:	4b47      	ldr	r3, [pc, #284]	@ (800966c <_dtoa_r+0x594>)
 800954e:	ec51 0b17 	vmov	r0, r1, d7
 8009552:	f7f7 f835 	bl	80005c0 <__aeabi_dmul>
 8009556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800955a:	f7f7 fab7 	bl	8000acc <__aeabi_dcmpge>
 800955e:	2800      	cmp	r0, #0
 8009560:	f000 8266 	beq.w	8009a30 <_dtoa_r+0x958>
 8009564:	2400      	movs	r4, #0
 8009566:	4625      	mov	r5, r4
 8009568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800956a:	4656      	mov	r6, sl
 800956c:	ea6f 0803 	mvn.w	r8, r3
 8009570:	2700      	movs	r7, #0
 8009572:	4621      	mov	r1, r4
 8009574:	4648      	mov	r0, r9
 8009576:	f000 fcc1 	bl	8009efc <_Bfree>
 800957a:	2d00      	cmp	r5, #0
 800957c:	f000 80bd 	beq.w	80096fa <_dtoa_r+0x622>
 8009580:	b12f      	cbz	r7, 800958e <_dtoa_r+0x4b6>
 8009582:	42af      	cmp	r7, r5
 8009584:	d003      	beq.n	800958e <_dtoa_r+0x4b6>
 8009586:	4639      	mov	r1, r7
 8009588:	4648      	mov	r0, r9
 800958a:	f000 fcb7 	bl	8009efc <_Bfree>
 800958e:	4629      	mov	r1, r5
 8009590:	4648      	mov	r0, r9
 8009592:	f000 fcb3 	bl	8009efc <_Bfree>
 8009596:	e0b0      	b.n	80096fa <_dtoa_r+0x622>
 8009598:	07e2      	lsls	r2, r4, #31
 800959a:	d505      	bpl.n	80095a8 <_dtoa_r+0x4d0>
 800959c:	3601      	adds	r6, #1
 800959e:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095a2:	f7f7 f80d 	bl	80005c0 <__aeabi_dmul>
 80095a6:	2301      	movs	r3, #1
 80095a8:	1064      	asrs	r4, r4, #1
 80095aa:	3508      	adds	r5, #8
 80095ac:	e762      	b.n	8009474 <_dtoa_r+0x39c>
 80095ae:	2602      	movs	r6, #2
 80095b0:	e765      	b.n	800947e <_dtoa_r+0x3a6>
 80095b2:	46b8      	mov	r8, r7
 80095b4:	9c03      	ldr	r4, [sp, #12]
 80095b6:	e784      	b.n	80094c2 <_dtoa_r+0x3ea>
 80095b8:	4b27      	ldr	r3, [pc, #156]	@ (8009658 <_dtoa_r+0x580>)
 80095ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095c0:	4454      	add	r4, sl
 80095c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095c6:	2900      	cmp	r1, #0
 80095c8:	d054      	beq.n	8009674 <_dtoa_r+0x59c>
 80095ca:	2000      	movs	r0, #0
 80095cc:	4928      	ldr	r1, [pc, #160]	@ (8009670 <_dtoa_r+0x598>)
 80095ce:	f7f7 f921 	bl	8000814 <__aeabi_ddiv>
 80095d2:	4633      	mov	r3, r6
 80095d4:	4656      	mov	r6, sl
 80095d6:	462a      	mov	r2, r5
 80095d8:	f7f6 fe3a 	bl	8000250 <__aeabi_dsub>
 80095dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80095e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095e4:	f7f7 fa9c 	bl	8000b20 <__aeabi_d2iz>
 80095e8:	4605      	mov	r5, r0
 80095ea:	f7f6 ff7f 	bl	80004ec <__aeabi_i2d>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	3530      	adds	r5, #48	@ 0x30
 80095f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095f8:	f7f6 fe2a 	bl	8000250 <__aeabi_dsub>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	f806 5b01 	strb.w	r5, [r6], #1
 8009604:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009608:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800960c:	f7f7 fa4a 	bl	8000aa4 <__aeabi_dcmplt>
 8009610:	2800      	cmp	r0, #0
 8009612:	d172      	bne.n	80096fa <_dtoa_r+0x622>
 8009614:	2000      	movs	r0, #0
 8009616:	4912      	ldr	r1, [pc, #72]	@ (8009660 <_dtoa_r+0x588>)
 8009618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800961c:	f7f6 fe18 	bl	8000250 <__aeabi_dsub>
 8009620:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009624:	f7f7 fa3e 	bl	8000aa4 <__aeabi_dcmplt>
 8009628:	2800      	cmp	r0, #0
 800962a:	f040 80b4 	bne.w	8009796 <_dtoa_r+0x6be>
 800962e:	42a6      	cmp	r6, r4
 8009630:	f43f af70 	beq.w	8009514 <_dtoa_r+0x43c>
 8009634:	2200      	movs	r2, #0
 8009636:	4b0b      	ldr	r3, [pc, #44]	@ (8009664 <_dtoa_r+0x58c>)
 8009638:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800963c:	f7f6 ffc0 	bl	80005c0 <__aeabi_dmul>
 8009640:	2200      	movs	r2, #0
 8009642:	4b08      	ldr	r3, [pc, #32]	@ (8009664 <_dtoa_r+0x58c>)
 8009644:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009648:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800964c:	f7f6 ffb8 	bl	80005c0 <__aeabi_dmul>
 8009650:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009654:	e7c4      	b.n	80095e0 <_dtoa_r+0x508>
 8009656:	bf00      	nop
 8009658:	0800d1e0 	.word	0x0800d1e0
 800965c:	0800d1b8 	.word	0x0800d1b8
 8009660:	3ff00000 	.word	0x3ff00000
 8009664:	40240000 	.word	0x40240000
 8009668:	401c0000 	.word	0x401c0000
 800966c:	40140000 	.word	0x40140000
 8009670:	3fe00000 	.word	0x3fe00000
 8009674:	4631      	mov	r1, r6
 8009676:	4656      	mov	r6, sl
 8009678:	4628      	mov	r0, r5
 800967a:	f7f6 ffa1 	bl	80005c0 <__aeabi_dmul>
 800967e:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009680:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009688:	f7f7 fa4a 	bl	8000b20 <__aeabi_d2iz>
 800968c:	4605      	mov	r5, r0
 800968e:	f7f6 ff2d 	bl	80004ec <__aeabi_i2d>
 8009692:	4602      	mov	r2, r0
 8009694:	3530      	adds	r5, #48	@ 0x30
 8009696:	460b      	mov	r3, r1
 8009698:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800969c:	f7f6 fdd8 	bl	8000250 <__aeabi_dsub>
 80096a0:	f806 5b01 	strb.w	r5, [r6], #1
 80096a4:	4602      	mov	r2, r0
 80096a6:	460b      	mov	r3, r1
 80096a8:	42a6      	cmp	r6, r4
 80096aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80096ae:	f04f 0200 	mov.w	r2, #0
 80096b2:	d124      	bne.n	80096fe <_dtoa_r+0x626>
 80096b4:	4baf      	ldr	r3, [pc, #700]	@ (8009974 <_dtoa_r+0x89c>)
 80096b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80096ba:	f7f6 fdcb 	bl	8000254 <__adddf3>
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096c6:	f7f7 fa0b 	bl	8000ae0 <__aeabi_dcmpgt>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d163      	bne.n	8009796 <_dtoa_r+0x6be>
 80096ce:	2000      	movs	r0, #0
 80096d0:	49a8      	ldr	r1, [pc, #672]	@ (8009974 <_dtoa_r+0x89c>)
 80096d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80096d6:	f7f6 fdbb 	bl	8000250 <__aeabi_dsub>
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096e2:	f7f7 f9df 	bl	8000aa4 <__aeabi_dcmplt>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	f43f af14 	beq.w	8009514 <_dtoa_r+0x43c>
 80096ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80096ee:	1e73      	subs	r3, r6, #1
 80096f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80096f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80096f6:	2b30      	cmp	r3, #48	@ 0x30
 80096f8:	d0f8      	beq.n	80096ec <_dtoa_r+0x614>
 80096fa:	4647      	mov	r7, r8
 80096fc:	e03b      	b.n	8009776 <_dtoa_r+0x69e>
 80096fe:	4b9e      	ldr	r3, [pc, #632]	@ (8009978 <_dtoa_r+0x8a0>)
 8009700:	f7f6 ff5e 	bl	80005c0 <__aeabi_dmul>
 8009704:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009708:	e7bc      	b.n	8009684 <_dtoa_r+0x5ac>
 800970a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800970e:	4656      	mov	r6, sl
 8009710:	4620      	mov	r0, r4
 8009712:	4629      	mov	r1, r5
 8009714:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009718:	f7f7 f87c 	bl	8000814 <__aeabi_ddiv>
 800971c:	f7f7 fa00 	bl	8000b20 <__aeabi_d2iz>
 8009720:	4680      	mov	r8, r0
 8009722:	f7f6 fee3 	bl	80004ec <__aeabi_i2d>
 8009726:	e9dd 2300 	ldrd	r2, r3, [sp]
 800972a:	f7f6 ff49 	bl	80005c0 <__aeabi_dmul>
 800972e:	4602      	mov	r2, r0
 8009730:	4620      	mov	r0, r4
 8009732:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009736:	460b      	mov	r3, r1
 8009738:	4629      	mov	r1, r5
 800973a:	f7f6 fd89 	bl	8000250 <__aeabi_dsub>
 800973e:	9d03      	ldr	r5, [sp, #12]
 8009740:	f806 4b01 	strb.w	r4, [r6], #1
 8009744:	eba6 040a 	sub.w	r4, r6, sl
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	42a5      	cmp	r5, r4
 800974e:	d133      	bne.n	80097b8 <_dtoa_r+0x6e0>
 8009750:	f7f6 fd80 	bl	8000254 <__adddf3>
 8009754:	4604      	mov	r4, r0
 8009756:	460d      	mov	r5, r1
 8009758:	e9dd 2300 	ldrd	r2, r3, [sp]
 800975c:	f7f7 f9c0 	bl	8000ae0 <__aeabi_dcmpgt>
 8009760:	b9c0      	cbnz	r0, 8009794 <_dtoa_r+0x6bc>
 8009762:	4620      	mov	r0, r4
 8009764:	4629      	mov	r1, r5
 8009766:	e9dd 2300 	ldrd	r2, r3, [sp]
 800976a:	f7f7 f991 	bl	8000a90 <__aeabi_dcmpeq>
 800976e:	b110      	cbz	r0, 8009776 <_dtoa_r+0x69e>
 8009770:	f018 0f01 	tst.w	r8, #1
 8009774:	d10e      	bne.n	8009794 <_dtoa_r+0x6bc>
 8009776:	9902      	ldr	r1, [sp, #8]
 8009778:	4648      	mov	r0, r9
 800977a:	f000 fbbf 	bl	8009efc <_Bfree>
 800977e:	2300      	movs	r3, #0
 8009780:	3701      	adds	r7, #1
 8009782:	7033      	strb	r3, [r6, #0]
 8009784:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009786:	601f      	str	r7, [r3, #0]
 8009788:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800978a:	2b00      	cmp	r3, #0
 800978c:	f000 824c 	beq.w	8009c28 <_dtoa_r+0xb50>
 8009790:	601e      	str	r6, [r3, #0]
 8009792:	e249      	b.n	8009c28 <_dtoa_r+0xb50>
 8009794:	46b8      	mov	r8, r7
 8009796:	4633      	mov	r3, r6
 8009798:	461e      	mov	r6, r3
 800979a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800979e:	2a39      	cmp	r2, #57	@ 0x39
 80097a0:	d106      	bne.n	80097b0 <_dtoa_r+0x6d8>
 80097a2:	459a      	cmp	sl, r3
 80097a4:	d1f8      	bne.n	8009798 <_dtoa_r+0x6c0>
 80097a6:	2230      	movs	r2, #48	@ 0x30
 80097a8:	f108 0801 	add.w	r8, r8, #1
 80097ac:	f88a 2000 	strb.w	r2, [sl]
 80097b0:	781a      	ldrb	r2, [r3, #0]
 80097b2:	3201      	adds	r2, #1
 80097b4:	701a      	strb	r2, [r3, #0]
 80097b6:	e7a0      	b.n	80096fa <_dtoa_r+0x622>
 80097b8:	2200      	movs	r2, #0
 80097ba:	4b6f      	ldr	r3, [pc, #444]	@ (8009978 <_dtoa_r+0x8a0>)
 80097bc:	f7f6 ff00 	bl	80005c0 <__aeabi_dmul>
 80097c0:	2200      	movs	r2, #0
 80097c2:	2300      	movs	r3, #0
 80097c4:	4604      	mov	r4, r0
 80097c6:	460d      	mov	r5, r1
 80097c8:	f7f7 f962 	bl	8000a90 <__aeabi_dcmpeq>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d09f      	beq.n	8009710 <_dtoa_r+0x638>
 80097d0:	e7d1      	b.n	8009776 <_dtoa_r+0x69e>
 80097d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097d4:	2a00      	cmp	r2, #0
 80097d6:	f000 80ea 	beq.w	80099ae <_dtoa_r+0x8d6>
 80097da:	9a07      	ldr	r2, [sp, #28]
 80097dc:	2a01      	cmp	r2, #1
 80097de:	f300 80cd 	bgt.w	800997c <_dtoa_r+0x8a4>
 80097e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80097e4:	2a00      	cmp	r2, #0
 80097e6:	f000 80c1 	beq.w	800996c <_dtoa_r+0x894>
 80097ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80097ee:	9c08      	ldr	r4, [sp, #32]
 80097f0:	9e00      	ldr	r6, [sp, #0]
 80097f2:	9a00      	ldr	r2, [sp, #0]
 80097f4:	2101      	movs	r1, #1
 80097f6:	4648      	mov	r0, r9
 80097f8:	441a      	add	r2, r3
 80097fa:	9200      	str	r2, [sp, #0]
 80097fc:	9a06      	ldr	r2, [sp, #24]
 80097fe:	441a      	add	r2, r3
 8009800:	9206      	str	r2, [sp, #24]
 8009802:	f000 fc7b 	bl	800a0fc <__i2b>
 8009806:	4605      	mov	r5, r0
 8009808:	b166      	cbz	r6, 8009824 <_dtoa_r+0x74c>
 800980a:	9b06      	ldr	r3, [sp, #24]
 800980c:	2b00      	cmp	r3, #0
 800980e:	dd09      	ble.n	8009824 <_dtoa_r+0x74c>
 8009810:	42b3      	cmp	r3, r6
 8009812:	9a00      	ldr	r2, [sp, #0]
 8009814:	bfa8      	it	ge
 8009816:	4633      	movge	r3, r6
 8009818:	1ad2      	subs	r2, r2, r3
 800981a:	1af6      	subs	r6, r6, r3
 800981c:	9200      	str	r2, [sp, #0]
 800981e:	9a06      	ldr	r2, [sp, #24]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	9306      	str	r3, [sp, #24]
 8009824:	9b08      	ldr	r3, [sp, #32]
 8009826:	b30b      	cbz	r3, 800986c <_dtoa_r+0x794>
 8009828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 80c6 	beq.w	80099bc <_dtoa_r+0x8e4>
 8009830:	2c00      	cmp	r4, #0
 8009832:	f000 80c0 	beq.w	80099b6 <_dtoa_r+0x8de>
 8009836:	4629      	mov	r1, r5
 8009838:	4622      	mov	r2, r4
 800983a:	4648      	mov	r0, r9
 800983c:	f000 fd18 	bl	800a270 <__pow5mult>
 8009840:	9a02      	ldr	r2, [sp, #8]
 8009842:	4601      	mov	r1, r0
 8009844:	4605      	mov	r5, r0
 8009846:	4648      	mov	r0, r9
 8009848:	f000 fc6e 	bl	800a128 <__multiply>
 800984c:	9902      	ldr	r1, [sp, #8]
 800984e:	4680      	mov	r8, r0
 8009850:	4648      	mov	r0, r9
 8009852:	f000 fb53 	bl	8009efc <_Bfree>
 8009856:	9b08      	ldr	r3, [sp, #32]
 8009858:	1b1b      	subs	r3, r3, r4
 800985a:	9308      	str	r3, [sp, #32]
 800985c:	f000 80b1 	beq.w	80099c2 <_dtoa_r+0x8ea>
 8009860:	9a08      	ldr	r2, [sp, #32]
 8009862:	4641      	mov	r1, r8
 8009864:	4648      	mov	r0, r9
 8009866:	f000 fd03 	bl	800a270 <__pow5mult>
 800986a:	9002      	str	r0, [sp, #8]
 800986c:	2101      	movs	r1, #1
 800986e:	4648      	mov	r0, r9
 8009870:	f000 fc44 	bl	800a0fc <__i2b>
 8009874:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009876:	4604      	mov	r4, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 81d9 	beq.w	8009c30 <_dtoa_r+0xb58>
 800987e:	461a      	mov	r2, r3
 8009880:	4601      	mov	r1, r0
 8009882:	4648      	mov	r0, r9
 8009884:	f000 fcf4 	bl	800a270 <__pow5mult>
 8009888:	9b07      	ldr	r3, [sp, #28]
 800988a:	4604      	mov	r4, r0
 800988c:	2b01      	cmp	r3, #1
 800988e:	f300 809f 	bgt.w	80099d0 <_dtoa_r+0x8f8>
 8009892:	9b04      	ldr	r3, [sp, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	f040 8097 	bne.w	80099c8 <_dtoa_r+0x8f0>
 800989a:	9b05      	ldr	r3, [sp, #20]
 800989c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f040 8093 	bne.w	80099cc <_dtoa_r+0x8f4>
 80098a6:	9b05      	ldr	r3, [sp, #20]
 80098a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098ac:	0d1b      	lsrs	r3, r3, #20
 80098ae:	051b      	lsls	r3, r3, #20
 80098b0:	b133      	cbz	r3, 80098c0 <_dtoa_r+0x7e8>
 80098b2:	9b00      	ldr	r3, [sp, #0]
 80098b4:	3301      	adds	r3, #1
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	9b06      	ldr	r3, [sp, #24]
 80098ba:	3301      	adds	r3, #1
 80098bc:	9306      	str	r3, [sp, #24]
 80098be:	2301      	movs	r3, #1
 80098c0:	9308      	str	r3, [sp, #32]
 80098c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 81b9 	beq.w	8009c3c <_dtoa_r+0xb64>
 80098ca:	6923      	ldr	r3, [r4, #16]
 80098cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098d0:	6918      	ldr	r0, [r3, #16]
 80098d2:	f000 fbc7 	bl	800a064 <__hi0bits>
 80098d6:	f1c0 0020 	rsb	r0, r0, #32
 80098da:	9b06      	ldr	r3, [sp, #24]
 80098dc:	4418      	add	r0, r3
 80098de:	f010 001f 	ands.w	r0, r0, #31
 80098e2:	f000 8082 	beq.w	80099ea <_dtoa_r+0x912>
 80098e6:	f1c0 0320 	rsb	r3, r0, #32
 80098ea:	2b04      	cmp	r3, #4
 80098ec:	dd73      	ble.n	80099d6 <_dtoa_r+0x8fe>
 80098ee:	f1c0 001c 	rsb	r0, r0, #28
 80098f2:	9b00      	ldr	r3, [sp, #0]
 80098f4:	4403      	add	r3, r0
 80098f6:	4406      	add	r6, r0
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	9b06      	ldr	r3, [sp, #24]
 80098fc:	4403      	add	r3, r0
 80098fe:	9306      	str	r3, [sp, #24]
 8009900:	9b00      	ldr	r3, [sp, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	dd05      	ble.n	8009912 <_dtoa_r+0x83a>
 8009906:	461a      	mov	r2, r3
 8009908:	9902      	ldr	r1, [sp, #8]
 800990a:	4648      	mov	r0, r9
 800990c:	f000 fd0a 	bl	800a324 <__lshift>
 8009910:	9002      	str	r0, [sp, #8]
 8009912:	9b06      	ldr	r3, [sp, #24]
 8009914:	2b00      	cmp	r3, #0
 8009916:	dd05      	ble.n	8009924 <_dtoa_r+0x84c>
 8009918:	4621      	mov	r1, r4
 800991a:	461a      	mov	r2, r3
 800991c:	4648      	mov	r0, r9
 800991e:	f000 fd01 	bl	800a324 <__lshift>
 8009922:	4604      	mov	r4, r0
 8009924:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009926:	2b00      	cmp	r3, #0
 8009928:	d061      	beq.n	80099ee <_dtoa_r+0x916>
 800992a:	4621      	mov	r1, r4
 800992c:	9802      	ldr	r0, [sp, #8]
 800992e:	f000 fd65 	bl	800a3fc <__mcmp>
 8009932:	2800      	cmp	r0, #0
 8009934:	da5b      	bge.n	80099ee <_dtoa_r+0x916>
 8009936:	2300      	movs	r3, #0
 8009938:	220a      	movs	r2, #10
 800993a:	9902      	ldr	r1, [sp, #8]
 800993c:	4648      	mov	r0, r9
 800993e:	f000 faff 	bl	8009f40 <__multadd>
 8009942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009944:	f107 38ff 	add.w	r8, r7, #4294967295
 8009948:	9002      	str	r0, [sp, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 8178 	beq.w	8009c40 <_dtoa_r+0xb68>
 8009950:	4629      	mov	r1, r5
 8009952:	2300      	movs	r3, #0
 8009954:	220a      	movs	r2, #10
 8009956:	4648      	mov	r0, r9
 8009958:	f000 faf2 	bl	8009f40 <__multadd>
 800995c:	f1bb 0f00 	cmp.w	fp, #0
 8009960:	4605      	mov	r5, r0
 8009962:	dc6f      	bgt.n	8009a44 <_dtoa_r+0x96c>
 8009964:	9b07      	ldr	r3, [sp, #28]
 8009966:	2b02      	cmp	r3, #2
 8009968:	dc49      	bgt.n	80099fe <_dtoa_r+0x926>
 800996a:	e06b      	b.n	8009a44 <_dtoa_r+0x96c>
 800996c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800996e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009972:	e73c      	b.n	80097ee <_dtoa_r+0x716>
 8009974:	3fe00000 	.word	0x3fe00000
 8009978:	40240000 	.word	0x40240000
 800997c:	9b03      	ldr	r3, [sp, #12]
 800997e:	1e5c      	subs	r4, r3, #1
 8009980:	9b08      	ldr	r3, [sp, #32]
 8009982:	42a3      	cmp	r3, r4
 8009984:	db09      	blt.n	800999a <_dtoa_r+0x8c2>
 8009986:	1b1c      	subs	r4, r3, r4
 8009988:	9b03      	ldr	r3, [sp, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	f6bf af30 	bge.w	80097f0 <_dtoa_r+0x718>
 8009990:	9b00      	ldr	r3, [sp, #0]
 8009992:	9a03      	ldr	r2, [sp, #12]
 8009994:	1a9e      	subs	r6, r3, r2
 8009996:	2300      	movs	r3, #0
 8009998:	e72b      	b.n	80097f2 <_dtoa_r+0x71a>
 800999a:	9b08      	ldr	r3, [sp, #32]
 800999c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800999e:	1ae3      	subs	r3, r4, r3
 80099a0:	9408      	str	r4, [sp, #32]
 80099a2:	9e00      	ldr	r6, [sp, #0]
 80099a4:	2400      	movs	r4, #0
 80099a6:	441a      	add	r2, r3
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	920d      	str	r2, [sp, #52]	@ 0x34
 80099ac:	e721      	b.n	80097f2 <_dtoa_r+0x71a>
 80099ae:	9c08      	ldr	r4, [sp, #32]
 80099b0:	9e00      	ldr	r6, [sp, #0]
 80099b2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80099b4:	e728      	b.n	8009808 <_dtoa_r+0x730>
 80099b6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80099ba:	e751      	b.n	8009860 <_dtoa_r+0x788>
 80099bc:	9a08      	ldr	r2, [sp, #32]
 80099be:	9902      	ldr	r1, [sp, #8]
 80099c0:	e750      	b.n	8009864 <_dtoa_r+0x78c>
 80099c2:	f8cd 8008 	str.w	r8, [sp, #8]
 80099c6:	e751      	b.n	800986c <_dtoa_r+0x794>
 80099c8:	2300      	movs	r3, #0
 80099ca:	e779      	b.n	80098c0 <_dtoa_r+0x7e8>
 80099cc:	9b04      	ldr	r3, [sp, #16]
 80099ce:	e777      	b.n	80098c0 <_dtoa_r+0x7e8>
 80099d0:	2300      	movs	r3, #0
 80099d2:	9308      	str	r3, [sp, #32]
 80099d4:	e779      	b.n	80098ca <_dtoa_r+0x7f2>
 80099d6:	d093      	beq.n	8009900 <_dtoa_r+0x828>
 80099d8:	331c      	adds	r3, #28
 80099da:	9a00      	ldr	r2, [sp, #0]
 80099dc:	441a      	add	r2, r3
 80099de:	441e      	add	r6, r3
 80099e0:	9200      	str	r2, [sp, #0]
 80099e2:	9a06      	ldr	r2, [sp, #24]
 80099e4:	441a      	add	r2, r3
 80099e6:	9206      	str	r2, [sp, #24]
 80099e8:	e78a      	b.n	8009900 <_dtoa_r+0x828>
 80099ea:	4603      	mov	r3, r0
 80099ec:	e7f4      	b.n	80099d8 <_dtoa_r+0x900>
 80099ee:	9b03      	ldr	r3, [sp, #12]
 80099f0:	46b8      	mov	r8, r7
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	dc20      	bgt.n	8009a38 <_dtoa_r+0x960>
 80099f6:	469b      	mov	fp, r3
 80099f8:	9b07      	ldr	r3, [sp, #28]
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	dd1e      	ble.n	8009a3c <_dtoa_r+0x964>
 80099fe:	f1bb 0f00 	cmp.w	fp, #0
 8009a02:	f47f adb1 	bne.w	8009568 <_dtoa_r+0x490>
 8009a06:	4621      	mov	r1, r4
 8009a08:	465b      	mov	r3, fp
 8009a0a:	2205      	movs	r2, #5
 8009a0c:	4648      	mov	r0, r9
 8009a0e:	f000 fa97 	bl	8009f40 <__multadd>
 8009a12:	4601      	mov	r1, r0
 8009a14:	4604      	mov	r4, r0
 8009a16:	9802      	ldr	r0, [sp, #8]
 8009a18:	f000 fcf0 	bl	800a3fc <__mcmp>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	f77f ada3 	ble.w	8009568 <_dtoa_r+0x490>
 8009a22:	4656      	mov	r6, sl
 8009a24:	2331      	movs	r3, #49	@ 0x31
 8009a26:	f108 0801 	add.w	r8, r8, #1
 8009a2a:	f806 3b01 	strb.w	r3, [r6], #1
 8009a2e:	e59f      	b.n	8009570 <_dtoa_r+0x498>
 8009a30:	46b8      	mov	r8, r7
 8009a32:	9c03      	ldr	r4, [sp, #12]
 8009a34:	4625      	mov	r5, r4
 8009a36:	e7f4      	b.n	8009a22 <_dtoa_r+0x94a>
 8009a38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f000 8102 	beq.w	8009c48 <_dtoa_r+0xb70>
 8009a44:	2e00      	cmp	r6, #0
 8009a46:	dd05      	ble.n	8009a54 <_dtoa_r+0x97c>
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4632      	mov	r2, r6
 8009a4c:	4648      	mov	r0, r9
 8009a4e:	f000 fc69 	bl	800a324 <__lshift>
 8009a52:	4605      	mov	r5, r0
 8009a54:	9b08      	ldr	r3, [sp, #32]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d05c      	beq.n	8009b14 <_dtoa_r+0xa3c>
 8009a5a:	6869      	ldr	r1, [r5, #4]
 8009a5c:	4648      	mov	r0, r9
 8009a5e:	f000 fa0d 	bl	8009e7c <_Balloc>
 8009a62:	4606      	mov	r6, r0
 8009a64:	b928      	cbnz	r0, 8009a72 <_dtoa_r+0x99a>
 8009a66:	4b83      	ldr	r3, [pc, #524]	@ (8009c74 <_dtoa_r+0xb9c>)
 8009a68:	4602      	mov	r2, r0
 8009a6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009a6e:	f7ff bb4a 	b.w	8009106 <_dtoa_r+0x2e>
 8009a72:	692a      	ldr	r2, [r5, #16]
 8009a74:	f105 010c 	add.w	r1, r5, #12
 8009a78:	300c      	adds	r0, #12
 8009a7a:	3202      	adds	r2, #2
 8009a7c:	0092      	lsls	r2, r2, #2
 8009a7e:	f002 fb05 	bl	800c08c <memcpy>
 8009a82:	2201      	movs	r2, #1
 8009a84:	4631      	mov	r1, r6
 8009a86:	4648      	mov	r0, r9
 8009a88:	f000 fc4c 	bl	800a324 <__lshift>
 8009a8c:	f10a 0301 	add.w	r3, sl, #1
 8009a90:	462f      	mov	r7, r5
 8009a92:	4605      	mov	r5, r0
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	eb0a 030b 	add.w	r3, sl, fp
 8009a9a:	9308      	str	r3, [sp, #32]
 8009a9c:	9b04      	ldr	r3, [sp, #16]
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	9306      	str	r3, [sp, #24]
 8009aa4:	9b00      	ldr	r3, [sp, #0]
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	9802      	ldr	r0, [sp, #8]
 8009aaa:	f103 3bff 	add.w	fp, r3, #4294967295
 8009aae:	f7ff fa83 	bl	8008fb8 <quorem>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	4639      	mov	r1, r7
 8009ab6:	9003      	str	r0, [sp, #12]
 8009ab8:	3330      	adds	r3, #48	@ 0x30
 8009aba:	9802      	ldr	r0, [sp, #8]
 8009abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009abe:	f000 fc9d 	bl	800a3fc <__mcmp>
 8009ac2:	462a      	mov	r2, r5
 8009ac4:	9004      	str	r0, [sp, #16]
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4648      	mov	r0, r9
 8009aca:	f000 fcb3 	bl	800a434 <__mdiff>
 8009ace:	68c2      	ldr	r2, [r0, #12]
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ad4:	bb02      	cbnz	r2, 8009b18 <_dtoa_r+0xa40>
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	9802      	ldr	r0, [sp, #8]
 8009ada:	f000 fc8f 	bl	800a3fc <__mcmp>
 8009ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	4648      	mov	r0, r9
 8009ae6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aea:	f000 fa07 	bl	8009efc <_Bfree>
 8009aee:	9b07      	ldr	r3, [sp, #28]
 8009af0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009af2:	9e00      	ldr	r6, [sp, #0]
 8009af4:	ea42 0103 	orr.w	r1, r2, r3
 8009af8:	9b06      	ldr	r3, [sp, #24]
 8009afa:	4319      	orrs	r1, r3
 8009afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009afe:	d10d      	bne.n	8009b1c <_dtoa_r+0xa44>
 8009b00:	2b39      	cmp	r3, #57	@ 0x39
 8009b02:	d027      	beq.n	8009b54 <_dtoa_r+0xa7c>
 8009b04:	9a04      	ldr	r2, [sp, #16]
 8009b06:	2a00      	cmp	r2, #0
 8009b08:	dd01      	ble.n	8009b0e <_dtoa_r+0xa36>
 8009b0a:	9b03      	ldr	r3, [sp, #12]
 8009b0c:	3331      	adds	r3, #49	@ 0x31
 8009b0e:	f88b 3000 	strb.w	r3, [fp]
 8009b12:	e52e      	b.n	8009572 <_dtoa_r+0x49a>
 8009b14:	4628      	mov	r0, r5
 8009b16:	e7b9      	b.n	8009a8c <_dtoa_r+0x9b4>
 8009b18:	2201      	movs	r2, #1
 8009b1a:	e7e2      	b.n	8009ae2 <_dtoa_r+0xa0a>
 8009b1c:	9904      	ldr	r1, [sp, #16]
 8009b1e:	2900      	cmp	r1, #0
 8009b20:	db04      	blt.n	8009b2c <_dtoa_r+0xa54>
 8009b22:	9807      	ldr	r0, [sp, #28]
 8009b24:	4301      	orrs	r1, r0
 8009b26:	9806      	ldr	r0, [sp, #24]
 8009b28:	4301      	orrs	r1, r0
 8009b2a:	d120      	bne.n	8009b6e <_dtoa_r+0xa96>
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	ddee      	ble.n	8009b0e <_dtoa_r+0xa36>
 8009b30:	2201      	movs	r2, #1
 8009b32:	9902      	ldr	r1, [sp, #8]
 8009b34:	4648      	mov	r0, r9
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	f000 fbf4 	bl	800a324 <__lshift>
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	9002      	str	r0, [sp, #8]
 8009b40:	f000 fc5c 	bl	800a3fc <__mcmp>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	9b00      	ldr	r3, [sp, #0]
 8009b48:	dc02      	bgt.n	8009b50 <_dtoa_r+0xa78>
 8009b4a:	d1e0      	bne.n	8009b0e <_dtoa_r+0xa36>
 8009b4c:	07da      	lsls	r2, r3, #31
 8009b4e:	d5de      	bpl.n	8009b0e <_dtoa_r+0xa36>
 8009b50:	2b39      	cmp	r3, #57	@ 0x39
 8009b52:	d1da      	bne.n	8009b0a <_dtoa_r+0xa32>
 8009b54:	2339      	movs	r3, #57	@ 0x39
 8009b56:	f88b 3000 	strb.w	r3, [fp]
 8009b5a:	4633      	mov	r3, r6
 8009b5c:	461e      	mov	r6, r3
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009b64:	2a39      	cmp	r2, #57	@ 0x39
 8009b66:	d04f      	beq.n	8009c08 <_dtoa_r+0xb30>
 8009b68:	3201      	adds	r2, #1
 8009b6a:	701a      	strb	r2, [r3, #0]
 8009b6c:	e501      	b.n	8009572 <_dtoa_r+0x49a>
 8009b6e:	2a00      	cmp	r2, #0
 8009b70:	dd03      	ble.n	8009b7a <_dtoa_r+0xaa2>
 8009b72:	2b39      	cmp	r3, #57	@ 0x39
 8009b74:	d0ee      	beq.n	8009b54 <_dtoa_r+0xa7c>
 8009b76:	3301      	adds	r3, #1
 8009b78:	e7c9      	b.n	8009b0e <_dtoa_r+0xa36>
 8009b7a:	9a00      	ldr	r2, [sp, #0]
 8009b7c:	9908      	ldr	r1, [sp, #32]
 8009b7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009b82:	428a      	cmp	r2, r1
 8009b84:	d029      	beq.n	8009bda <_dtoa_r+0xb02>
 8009b86:	2300      	movs	r3, #0
 8009b88:	220a      	movs	r2, #10
 8009b8a:	9902      	ldr	r1, [sp, #8]
 8009b8c:	4648      	mov	r0, r9
 8009b8e:	f000 f9d7 	bl	8009f40 <__multadd>
 8009b92:	42af      	cmp	r7, r5
 8009b94:	9002      	str	r0, [sp, #8]
 8009b96:	f04f 0300 	mov.w	r3, #0
 8009b9a:	f04f 020a 	mov.w	r2, #10
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	4648      	mov	r0, r9
 8009ba2:	d107      	bne.n	8009bb4 <_dtoa_r+0xadc>
 8009ba4:	f000 f9cc 	bl	8009f40 <__multadd>
 8009ba8:	4607      	mov	r7, r0
 8009baa:	4605      	mov	r5, r0
 8009bac:	9b00      	ldr	r3, [sp, #0]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	e777      	b.n	8009aa4 <_dtoa_r+0x9cc>
 8009bb4:	f000 f9c4 	bl	8009f40 <__multadd>
 8009bb8:	4629      	mov	r1, r5
 8009bba:	4607      	mov	r7, r0
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	220a      	movs	r2, #10
 8009bc0:	4648      	mov	r0, r9
 8009bc2:	f000 f9bd 	bl	8009f40 <__multadd>
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	e7f0      	b.n	8009bac <_dtoa_r+0xad4>
 8009bca:	f1bb 0f00 	cmp.w	fp, #0
 8009bce:	f04f 0700 	mov.w	r7, #0
 8009bd2:	bfcc      	ite	gt
 8009bd4:	465e      	movgt	r6, fp
 8009bd6:	2601      	movle	r6, #1
 8009bd8:	4456      	add	r6, sl
 8009bda:	2201      	movs	r2, #1
 8009bdc:	9902      	ldr	r1, [sp, #8]
 8009bde:	4648      	mov	r0, r9
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	f000 fb9f 	bl	800a324 <__lshift>
 8009be6:	4621      	mov	r1, r4
 8009be8:	9002      	str	r0, [sp, #8]
 8009bea:	f000 fc07 	bl	800a3fc <__mcmp>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	dcb3      	bgt.n	8009b5a <_dtoa_r+0xa82>
 8009bf2:	d102      	bne.n	8009bfa <_dtoa_r+0xb22>
 8009bf4:	9b00      	ldr	r3, [sp, #0]
 8009bf6:	07db      	lsls	r3, r3, #31
 8009bf8:	d4af      	bmi.n	8009b5a <_dtoa_r+0xa82>
 8009bfa:	4633      	mov	r3, r6
 8009bfc:	461e      	mov	r6, r3
 8009bfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c02:	2a30      	cmp	r2, #48	@ 0x30
 8009c04:	d0fa      	beq.n	8009bfc <_dtoa_r+0xb24>
 8009c06:	e4b4      	b.n	8009572 <_dtoa_r+0x49a>
 8009c08:	459a      	cmp	sl, r3
 8009c0a:	d1a7      	bne.n	8009b5c <_dtoa_r+0xa84>
 8009c0c:	2331      	movs	r3, #49	@ 0x31
 8009c0e:	f108 0801 	add.w	r8, r8, #1
 8009c12:	f88a 3000 	strb.w	r3, [sl]
 8009c16:	e4ac      	b.n	8009572 <_dtoa_r+0x49a>
 8009c18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c1a:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009c78 <_dtoa_r+0xba0>
 8009c1e:	b11b      	cbz	r3, 8009c28 <_dtoa_r+0xb50>
 8009c20:	f10a 0308 	add.w	r3, sl, #8
 8009c24:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	4650      	mov	r0, sl
 8009c2a:	b017      	add	sp, #92	@ 0x5c
 8009c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c30:	9b07      	ldr	r3, [sp, #28]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	f77f ae2d 	ble.w	8009892 <_dtoa_r+0x7ba>
 8009c38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c3a:	9308      	str	r3, [sp, #32]
 8009c3c:	2001      	movs	r0, #1
 8009c3e:	e64c      	b.n	80098da <_dtoa_r+0x802>
 8009c40:	f1bb 0f00 	cmp.w	fp, #0
 8009c44:	f77f aed8 	ble.w	80099f8 <_dtoa_r+0x920>
 8009c48:	4656      	mov	r6, sl
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	9802      	ldr	r0, [sp, #8]
 8009c4e:	f7ff f9b3 	bl	8008fb8 <quorem>
 8009c52:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009c56:	f806 3b01 	strb.w	r3, [r6], #1
 8009c5a:	eba6 020a 	sub.w	r2, r6, sl
 8009c5e:	4593      	cmp	fp, r2
 8009c60:	ddb3      	ble.n	8009bca <_dtoa_r+0xaf2>
 8009c62:	2300      	movs	r3, #0
 8009c64:	220a      	movs	r2, #10
 8009c66:	9902      	ldr	r1, [sp, #8]
 8009c68:	4648      	mov	r0, r9
 8009c6a:	f000 f969 	bl	8009f40 <__multadd>
 8009c6e:	9002      	str	r0, [sp, #8]
 8009c70:	e7eb      	b.n	8009c4a <_dtoa_r+0xb72>
 8009c72:	bf00      	nop
 8009c74:	0800d06b 	.word	0x0800d06b
 8009c78:	0800cfef 	.word	0x0800cfef

08009c7c <_free_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	4605      	mov	r5, r0
 8009c80:	2900      	cmp	r1, #0
 8009c82:	d041      	beq.n	8009d08 <_free_r+0x8c>
 8009c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c88:	1f0c      	subs	r4, r1, #4
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	bfb8      	it	lt
 8009c8e:	18e4      	addlt	r4, r4, r3
 8009c90:	f000 f8e8 	bl	8009e64 <__malloc_lock>
 8009c94:	4a1d      	ldr	r2, [pc, #116]	@ (8009d0c <_free_r+0x90>)
 8009c96:	6813      	ldr	r3, [r2, #0]
 8009c98:	b933      	cbnz	r3, 8009ca8 <_free_r+0x2c>
 8009c9a:	6063      	str	r3, [r4, #4]
 8009c9c:	6014      	str	r4, [r2, #0]
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ca4:	f000 b8e4 	b.w	8009e70 <__malloc_unlock>
 8009ca8:	42a3      	cmp	r3, r4
 8009caa:	d908      	bls.n	8009cbe <_free_r+0x42>
 8009cac:	6820      	ldr	r0, [r4, #0]
 8009cae:	1821      	adds	r1, r4, r0
 8009cb0:	428b      	cmp	r3, r1
 8009cb2:	bf01      	itttt	eq
 8009cb4:	6819      	ldreq	r1, [r3, #0]
 8009cb6:	685b      	ldreq	r3, [r3, #4]
 8009cb8:	1809      	addeq	r1, r1, r0
 8009cba:	6021      	streq	r1, [r4, #0]
 8009cbc:	e7ed      	b.n	8009c9a <_free_r+0x1e>
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	b10b      	cbz	r3, 8009cc8 <_free_r+0x4c>
 8009cc4:	42a3      	cmp	r3, r4
 8009cc6:	d9fa      	bls.n	8009cbe <_free_r+0x42>
 8009cc8:	6811      	ldr	r1, [r2, #0]
 8009cca:	1850      	adds	r0, r2, r1
 8009ccc:	42a0      	cmp	r0, r4
 8009cce:	d10b      	bne.n	8009ce8 <_free_r+0x6c>
 8009cd0:	6820      	ldr	r0, [r4, #0]
 8009cd2:	4401      	add	r1, r0
 8009cd4:	1850      	adds	r0, r2, r1
 8009cd6:	6011      	str	r1, [r2, #0]
 8009cd8:	4283      	cmp	r3, r0
 8009cda:	d1e0      	bne.n	8009c9e <_free_r+0x22>
 8009cdc:	6818      	ldr	r0, [r3, #0]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	4408      	add	r0, r1
 8009ce2:	6053      	str	r3, [r2, #4]
 8009ce4:	6010      	str	r0, [r2, #0]
 8009ce6:	e7da      	b.n	8009c9e <_free_r+0x22>
 8009ce8:	d902      	bls.n	8009cf0 <_free_r+0x74>
 8009cea:	230c      	movs	r3, #12
 8009cec:	602b      	str	r3, [r5, #0]
 8009cee:	e7d6      	b.n	8009c9e <_free_r+0x22>
 8009cf0:	6820      	ldr	r0, [r4, #0]
 8009cf2:	1821      	adds	r1, r4, r0
 8009cf4:	428b      	cmp	r3, r1
 8009cf6:	bf02      	ittt	eq
 8009cf8:	6819      	ldreq	r1, [r3, #0]
 8009cfa:	685b      	ldreq	r3, [r3, #4]
 8009cfc:	1809      	addeq	r1, r1, r0
 8009cfe:	6063      	str	r3, [r4, #4]
 8009d00:	bf08      	it	eq
 8009d02:	6021      	streq	r1, [r4, #0]
 8009d04:	6054      	str	r4, [r2, #4]
 8009d06:	e7ca      	b.n	8009c9e <_free_r+0x22>
 8009d08:	bd38      	pop	{r3, r4, r5, pc}
 8009d0a:	bf00      	nop
 8009d0c:	200004cc 	.word	0x200004cc

08009d10 <malloc>:
 8009d10:	4b02      	ldr	r3, [pc, #8]	@ (8009d1c <malloc+0xc>)
 8009d12:	4601      	mov	r1, r0
 8009d14:	6818      	ldr	r0, [r3, #0]
 8009d16:	f000 b825 	b.w	8009d64 <_malloc_r>
 8009d1a:	bf00      	nop
 8009d1c:	20000018 	.word	0x20000018

08009d20 <sbrk_aligned>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	4e0f      	ldr	r6, [pc, #60]	@ (8009d60 <sbrk_aligned+0x40>)
 8009d24:	460c      	mov	r4, r1
 8009d26:	4605      	mov	r5, r0
 8009d28:	6831      	ldr	r1, [r6, #0]
 8009d2a:	b911      	cbnz	r1, 8009d32 <sbrk_aligned+0x12>
 8009d2c:	f002 f99e 	bl	800c06c <_sbrk_r>
 8009d30:	6030      	str	r0, [r6, #0]
 8009d32:	4621      	mov	r1, r4
 8009d34:	4628      	mov	r0, r5
 8009d36:	f002 f999 	bl	800c06c <_sbrk_r>
 8009d3a:	1c43      	adds	r3, r0, #1
 8009d3c:	d103      	bne.n	8009d46 <sbrk_aligned+0x26>
 8009d3e:	f04f 34ff 	mov.w	r4, #4294967295
 8009d42:	4620      	mov	r0, r4
 8009d44:	bd70      	pop	{r4, r5, r6, pc}
 8009d46:	1cc4      	adds	r4, r0, #3
 8009d48:	f024 0403 	bic.w	r4, r4, #3
 8009d4c:	42a0      	cmp	r0, r4
 8009d4e:	d0f8      	beq.n	8009d42 <sbrk_aligned+0x22>
 8009d50:	1a21      	subs	r1, r4, r0
 8009d52:	4628      	mov	r0, r5
 8009d54:	f002 f98a 	bl	800c06c <_sbrk_r>
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d1f2      	bne.n	8009d42 <sbrk_aligned+0x22>
 8009d5c:	e7ef      	b.n	8009d3e <sbrk_aligned+0x1e>
 8009d5e:	bf00      	nop
 8009d60:	200004c8 	.word	0x200004c8

08009d64 <_malloc_r>:
 8009d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d68:	1ccd      	adds	r5, r1, #3
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	f025 0503 	bic.w	r5, r5, #3
 8009d70:	3508      	adds	r5, #8
 8009d72:	2d0c      	cmp	r5, #12
 8009d74:	bf38      	it	cc
 8009d76:	250c      	movcc	r5, #12
 8009d78:	2d00      	cmp	r5, #0
 8009d7a:	db01      	blt.n	8009d80 <_malloc_r+0x1c>
 8009d7c:	42a9      	cmp	r1, r5
 8009d7e:	d904      	bls.n	8009d8a <_malloc_r+0x26>
 8009d80:	230c      	movs	r3, #12
 8009d82:	6033      	str	r3, [r6, #0]
 8009d84:	2000      	movs	r0, #0
 8009d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e60 <_malloc_r+0xfc>
 8009d8e:	f000 f869 	bl	8009e64 <__malloc_lock>
 8009d92:	f8d8 3000 	ldr.w	r3, [r8]
 8009d96:	461c      	mov	r4, r3
 8009d98:	bb44      	cbnz	r4, 8009dec <_malloc_r+0x88>
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f7ff ffbf 	bl	8009d20 <sbrk_aligned>
 8009da2:	1c43      	adds	r3, r0, #1
 8009da4:	4604      	mov	r4, r0
 8009da6:	d158      	bne.n	8009e5a <_malloc_r+0xf6>
 8009da8:	f8d8 4000 	ldr.w	r4, [r8]
 8009dac:	4627      	mov	r7, r4
 8009dae:	2f00      	cmp	r7, #0
 8009db0:	d143      	bne.n	8009e3a <_malloc_r+0xd6>
 8009db2:	2c00      	cmp	r4, #0
 8009db4:	d04b      	beq.n	8009e4e <_malloc_r+0xea>
 8009db6:	6823      	ldr	r3, [r4, #0]
 8009db8:	4639      	mov	r1, r7
 8009dba:	4630      	mov	r0, r6
 8009dbc:	eb04 0903 	add.w	r9, r4, r3
 8009dc0:	f002 f954 	bl	800c06c <_sbrk_r>
 8009dc4:	4581      	cmp	r9, r0
 8009dc6:	d142      	bne.n	8009e4e <_malloc_r+0xea>
 8009dc8:	6821      	ldr	r1, [r4, #0]
 8009dca:	4630      	mov	r0, r6
 8009dcc:	1a6d      	subs	r5, r5, r1
 8009dce:	4629      	mov	r1, r5
 8009dd0:	f7ff ffa6 	bl	8009d20 <sbrk_aligned>
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d03a      	beq.n	8009e4e <_malloc_r+0xea>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	442b      	add	r3, r5
 8009ddc:	6023      	str	r3, [r4, #0]
 8009dde:	f8d8 3000 	ldr.w	r3, [r8]
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	bb62      	cbnz	r2, 8009e40 <_malloc_r+0xdc>
 8009de6:	f8c8 7000 	str.w	r7, [r8]
 8009dea:	e00f      	b.n	8009e0c <_malloc_r+0xa8>
 8009dec:	6822      	ldr	r2, [r4, #0]
 8009dee:	1b52      	subs	r2, r2, r5
 8009df0:	d420      	bmi.n	8009e34 <_malloc_r+0xd0>
 8009df2:	2a0b      	cmp	r2, #11
 8009df4:	d917      	bls.n	8009e26 <_malloc_r+0xc2>
 8009df6:	1961      	adds	r1, r4, r5
 8009df8:	42a3      	cmp	r3, r4
 8009dfa:	6025      	str	r5, [r4, #0]
 8009dfc:	bf18      	it	ne
 8009dfe:	6059      	strne	r1, [r3, #4]
 8009e00:	6863      	ldr	r3, [r4, #4]
 8009e02:	bf08      	it	eq
 8009e04:	f8c8 1000 	streq.w	r1, [r8]
 8009e08:	5162      	str	r2, [r4, r5]
 8009e0a:	604b      	str	r3, [r1, #4]
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f000 f82f 	bl	8009e70 <__malloc_unlock>
 8009e12:	f104 000b 	add.w	r0, r4, #11
 8009e16:	1d23      	adds	r3, r4, #4
 8009e18:	f020 0007 	bic.w	r0, r0, #7
 8009e1c:	1ac2      	subs	r2, r0, r3
 8009e1e:	bf1c      	itt	ne
 8009e20:	1a1b      	subne	r3, r3, r0
 8009e22:	50a3      	strne	r3, [r4, r2]
 8009e24:	e7af      	b.n	8009d86 <_malloc_r+0x22>
 8009e26:	6862      	ldr	r2, [r4, #4]
 8009e28:	42a3      	cmp	r3, r4
 8009e2a:	bf0c      	ite	eq
 8009e2c:	f8c8 2000 	streq.w	r2, [r8]
 8009e30:	605a      	strne	r2, [r3, #4]
 8009e32:	e7eb      	b.n	8009e0c <_malloc_r+0xa8>
 8009e34:	4623      	mov	r3, r4
 8009e36:	6864      	ldr	r4, [r4, #4]
 8009e38:	e7ae      	b.n	8009d98 <_malloc_r+0x34>
 8009e3a:	463c      	mov	r4, r7
 8009e3c:	687f      	ldr	r7, [r7, #4]
 8009e3e:	e7b6      	b.n	8009dae <_malloc_r+0x4a>
 8009e40:	461a      	mov	r2, r3
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	42a3      	cmp	r3, r4
 8009e46:	d1fb      	bne.n	8009e40 <_malloc_r+0xdc>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	6053      	str	r3, [r2, #4]
 8009e4c:	e7de      	b.n	8009e0c <_malloc_r+0xa8>
 8009e4e:	230c      	movs	r3, #12
 8009e50:	4630      	mov	r0, r6
 8009e52:	6033      	str	r3, [r6, #0]
 8009e54:	f000 f80c 	bl	8009e70 <__malloc_unlock>
 8009e58:	e794      	b.n	8009d84 <_malloc_r+0x20>
 8009e5a:	6005      	str	r5, [r0, #0]
 8009e5c:	e7d6      	b.n	8009e0c <_malloc_r+0xa8>
 8009e5e:	bf00      	nop
 8009e60:	200004cc 	.word	0x200004cc

08009e64 <__malloc_lock>:
 8009e64:	4801      	ldr	r0, [pc, #4]	@ (8009e6c <__malloc_lock+0x8>)
 8009e66:	f7ff b890 	b.w	8008f8a <__retarget_lock_acquire_recursive>
 8009e6a:	bf00      	nop
 8009e6c:	200004c4 	.word	0x200004c4

08009e70 <__malloc_unlock>:
 8009e70:	4801      	ldr	r0, [pc, #4]	@ (8009e78 <__malloc_unlock+0x8>)
 8009e72:	f7ff b88b 	b.w	8008f8c <__retarget_lock_release_recursive>
 8009e76:	bf00      	nop
 8009e78:	200004c4 	.word	0x200004c4

08009e7c <_Balloc>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	69c6      	ldr	r6, [r0, #28]
 8009e80:	4604      	mov	r4, r0
 8009e82:	460d      	mov	r5, r1
 8009e84:	b976      	cbnz	r6, 8009ea4 <_Balloc+0x28>
 8009e86:	2010      	movs	r0, #16
 8009e88:	f7ff ff42 	bl	8009d10 <malloc>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	61e0      	str	r0, [r4, #28]
 8009e90:	b920      	cbnz	r0, 8009e9c <_Balloc+0x20>
 8009e92:	4b18      	ldr	r3, [pc, #96]	@ (8009ef4 <_Balloc+0x78>)
 8009e94:	216b      	movs	r1, #107	@ 0x6b
 8009e96:	4818      	ldr	r0, [pc, #96]	@ (8009ef8 <_Balloc+0x7c>)
 8009e98:	f002 f90e 	bl	800c0b8 <__assert_func>
 8009e9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ea0:	6006      	str	r6, [r0, #0]
 8009ea2:	60c6      	str	r6, [r0, #12]
 8009ea4:	69e6      	ldr	r6, [r4, #28]
 8009ea6:	68f3      	ldr	r3, [r6, #12]
 8009ea8:	b183      	cbz	r3, 8009ecc <_Balloc+0x50>
 8009eaa:	69e3      	ldr	r3, [r4, #28]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009eb2:	b9b8      	cbnz	r0, 8009ee4 <_Balloc+0x68>
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	fa01 f605 	lsl.w	r6, r1, r5
 8009ebc:	1d72      	adds	r2, r6, #5
 8009ebe:	0092      	lsls	r2, r2, #2
 8009ec0:	f002 f918 	bl	800c0f4 <_calloc_r>
 8009ec4:	b160      	cbz	r0, 8009ee0 <_Balloc+0x64>
 8009ec6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009eca:	e00e      	b.n	8009eea <_Balloc+0x6e>
 8009ecc:	2221      	movs	r2, #33	@ 0x21
 8009ece:	2104      	movs	r1, #4
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f002 f90f 	bl	800c0f4 <_calloc_r>
 8009ed6:	69e3      	ldr	r3, [r4, #28]
 8009ed8:	60f0      	str	r0, [r6, #12]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e4      	bne.n	8009eaa <_Balloc+0x2e>
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}
 8009ee4:	6802      	ldr	r2, [r0, #0]
 8009ee6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009eea:	2300      	movs	r3, #0
 8009eec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ef0:	e7f7      	b.n	8009ee2 <_Balloc+0x66>
 8009ef2:	bf00      	nop
 8009ef4:	0800cffc 	.word	0x0800cffc
 8009ef8:	0800d07c 	.word	0x0800d07c

08009efc <_Bfree>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	69c6      	ldr	r6, [r0, #28]
 8009f00:	4605      	mov	r5, r0
 8009f02:	460c      	mov	r4, r1
 8009f04:	b976      	cbnz	r6, 8009f24 <_Bfree+0x28>
 8009f06:	2010      	movs	r0, #16
 8009f08:	f7ff ff02 	bl	8009d10 <malloc>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	61e8      	str	r0, [r5, #28]
 8009f10:	b920      	cbnz	r0, 8009f1c <_Bfree+0x20>
 8009f12:	4b09      	ldr	r3, [pc, #36]	@ (8009f38 <_Bfree+0x3c>)
 8009f14:	218f      	movs	r1, #143	@ 0x8f
 8009f16:	4809      	ldr	r0, [pc, #36]	@ (8009f3c <_Bfree+0x40>)
 8009f18:	f002 f8ce 	bl	800c0b8 <__assert_func>
 8009f1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f20:	6006      	str	r6, [r0, #0]
 8009f22:	60c6      	str	r6, [r0, #12]
 8009f24:	b13c      	cbz	r4, 8009f36 <_Bfree+0x3a>
 8009f26:	69eb      	ldr	r3, [r5, #28]
 8009f28:	6862      	ldr	r2, [r4, #4]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f30:	6021      	str	r1, [r4, #0]
 8009f32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f36:	bd70      	pop	{r4, r5, r6, pc}
 8009f38:	0800cffc 	.word	0x0800cffc
 8009f3c:	0800d07c 	.word	0x0800d07c

08009f40 <__multadd>:
 8009f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f44:	f101 0c14 	add.w	ip, r1, #20
 8009f48:	4607      	mov	r7, r0
 8009f4a:	460c      	mov	r4, r1
 8009f4c:	461e      	mov	r6, r3
 8009f4e:	690d      	ldr	r5, [r1, #16]
 8009f50:	2000      	movs	r0, #0
 8009f52:	f8dc 3000 	ldr.w	r3, [ip]
 8009f56:	3001      	adds	r0, #1
 8009f58:	b299      	uxth	r1, r3
 8009f5a:	4285      	cmp	r5, r0
 8009f5c:	fb02 6101 	mla	r1, r2, r1, r6
 8009f60:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f64:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8009f68:	b289      	uxth	r1, r1
 8009f6a:	fb02 3306 	mla	r3, r2, r6, r3
 8009f6e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f76:	f84c 1b04 	str.w	r1, [ip], #4
 8009f7a:	dcea      	bgt.n	8009f52 <__multadd+0x12>
 8009f7c:	b30e      	cbz	r6, 8009fc2 <__multadd+0x82>
 8009f7e:	68a3      	ldr	r3, [r4, #8]
 8009f80:	42ab      	cmp	r3, r5
 8009f82:	dc19      	bgt.n	8009fb8 <__multadd+0x78>
 8009f84:	6861      	ldr	r1, [r4, #4]
 8009f86:	4638      	mov	r0, r7
 8009f88:	3101      	adds	r1, #1
 8009f8a:	f7ff ff77 	bl	8009e7c <_Balloc>
 8009f8e:	4680      	mov	r8, r0
 8009f90:	b928      	cbnz	r0, 8009f9e <__multadd+0x5e>
 8009f92:	4602      	mov	r2, r0
 8009f94:	4b0c      	ldr	r3, [pc, #48]	@ (8009fc8 <__multadd+0x88>)
 8009f96:	21ba      	movs	r1, #186	@ 0xba
 8009f98:	480c      	ldr	r0, [pc, #48]	@ (8009fcc <__multadd+0x8c>)
 8009f9a:	f002 f88d 	bl	800c0b8 <__assert_func>
 8009f9e:	6922      	ldr	r2, [r4, #16]
 8009fa0:	f104 010c 	add.w	r1, r4, #12
 8009fa4:	300c      	adds	r0, #12
 8009fa6:	3202      	adds	r2, #2
 8009fa8:	0092      	lsls	r2, r2, #2
 8009faa:	f002 f86f 	bl	800c08c <memcpy>
 8009fae:	4621      	mov	r1, r4
 8009fb0:	4644      	mov	r4, r8
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	f7ff ffa2 	bl	8009efc <_Bfree>
 8009fb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fbc:	3501      	adds	r5, #1
 8009fbe:	615e      	str	r6, [r3, #20]
 8009fc0:	6125      	str	r5, [r4, #16]
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc8:	0800d06b 	.word	0x0800d06b
 8009fcc:	0800d07c 	.word	0x0800d07c

08009fd0 <__s2b>:
 8009fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd4:	4615      	mov	r5, r2
 8009fd6:	461f      	mov	r7, r3
 8009fd8:	2209      	movs	r2, #9
 8009fda:	3308      	adds	r3, #8
 8009fdc:	460c      	mov	r4, r1
 8009fde:	4606      	mov	r6, r0
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	db09      	blt.n	800a000 <__s2b+0x30>
 8009fec:	4630      	mov	r0, r6
 8009fee:	f7ff ff45 	bl	8009e7c <_Balloc>
 8009ff2:	b940      	cbnz	r0, 800a006 <__s2b+0x36>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	4b19      	ldr	r3, [pc, #100]	@ (800a05c <__s2b+0x8c>)
 8009ff8:	21d3      	movs	r1, #211	@ 0xd3
 8009ffa:	4819      	ldr	r0, [pc, #100]	@ (800a060 <__s2b+0x90>)
 8009ffc:	f002 f85c 	bl	800c0b8 <__assert_func>
 800a000:	0052      	lsls	r2, r2, #1
 800a002:	3101      	adds	r1, #1
 800a004:	e7f0      	b.n	8009fe8 <__s2b+0x18>
 800a006:	9b08      	ldr	r3, [sp, #32]
 800a008:	2d09      	cmp	r5, #9
 800a00a:	6143      	str	r3, [r0, #20]
 800a00c:	f04f 0301 	mov.w	r3, #1
 800a010:	6103      	str	r3, [r0, #16]
 800a012:	dd16      	ble.n	800a042 <__s2b+0x72>
 800a014:	f104 0909 	add.w	r9, r4, #9
 800a018:	442c      	add	r4, r5
 800a01a:	46c8      	mov	r8, r9
 800a01c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a020:	4601      	mov	r1, r0
 800a022:	220a      	movs	r2, #10
 800a024:	4630      	mov	r0, r6
 800a026:	3b30      	subs	r3, #48	@ 0x30
 800a028:	f7ff ff8a 	bl	8009f40 <__multadd>
 800a02c:	45a0      	cmp	r8, r4
 800a02e:	d1f5      	bne.n	800a01c <__s2b+0x4c>
 800a030:	f1a5 0408 	sub.w	r4, r5, #8
 800a034:	444c      	add	r4, r9
 800a036:	1b2d      	subs	r5, r5, r4
 800a038:	1963      	adds	r3, r4, r5
 800a03a:	42bb      	cmp	r3, r7
 800a03c:	db04      	blt.n	800a048 <__s2b+0x78>
 800a03e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a042:	340a      	adds	r4, #10
 800a044:	2509      	movs	r5, #9
 800a046:	e7f6      	b.n	800a036 <__s2b+0x66>
 800a048:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a04c:	4601      	mov	r1, r0
 800a04e:	220a      	movs	r2, #10
 800a050:	4630      	mov	r0, r6
 800a052:	3b30      	subs	r3, #48	@ 0x30
 800a054:	f7ff ff74 	bl	8009f40 <__multadd>
 800a058:	e7ee      	b.n	800a038 <__s2b+0x68>
 800a05a:	bf00      	nop
 800a05c:	0800d06b 	.word	0x0800d06b
 800a060:	0800d07c 	.word	0x0800d07c

0800a064 <__hi0bits>:
 800a064:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a068:	4603      	mov	r3, r0
 800a06a:	bf36      	itet	cc
 800a06c:	0403      	lslcc	r3, r0, #16
 800a06e:	2000      	movcs	r0, #0
 800a070:	2010      	movcc	r0, #16
 800a072:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a076:	bf3c      	itt	cc
 800a078:	021b      	lslcc	r3, r3, #8
 800a07a:	3008      	addcc	r0, #8
 800a07c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a080:	bf3c      	itt	cc
 800a082:	011b      	lslcc	r3, r3, #4
 800a084:	3004      	addcc	r0, #4
 800a086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a08a:	bf3c      	itt	cc
 800a08c:	009b      	lslcc	r3, r3, #2
 800a08e:	3002      	addcc	r0, #2
 800a090:	2b00      	cmp	r3, #0
 800a092:	db05      	blt.n	800a0a0 <__hi0bits+0x3c>
 800a094:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a098:	f100 0001 	add.w	r0, r0, #1
 800a09c:	bf08      	it	eq
 800a09e:	2020      	moveq	r0, #32
 800a0a0:	4770      	bx	lr

0800a0a2 <__lo0bits>:
 800a0a2:	6803      	ldr	r3, [r0, #0]
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	f013 0007 	ands.w	r0, r3, #7
 800a0aa:	d00b      	beq.n	800a0c4 <__lo0bits+0x22>
 800a0ac:	07d9      	lsls	r1, r3, #31
 800a0ae:	d421      	bmi.n	800a0f4 <__lo0bits+0x52>
 800a0b0:	0798      	lsls	r0, r3, #30
 800a0b2:	bf47      	ittee	mi
 800a0b4:	085b      	lsrmi	r3, r3, #1
 800a0b6:	2001      	movmi	r0, #1
 800a0b8:	089b      	lsrpl	r3, r3, #2
 800a0ba:	2002      	movpl	r0, #2
 800a0bc:	bf4c      	ite	mi
 800a0be:	6013      	strmi	r3, [r2, #0]
 800a0c0:	6013      	strpl	r3, [r2, #0]
 800a0c2:	4770      	bx	lr
 800a0c4:	b299      	uxth	r1, r3
 800a0c6:	b909      	cbnz	r1, 800a0cc <__lo0bits+0x2a>
 800a0c8:	0c1b      	lsrs	r3, r3, #16
 800a0ca:	2010      	movs	r0, #16
 800a0cc:	b2d9      	uxtb	r1, r3
 800a0ce:	b909      	cbnz	r1, 800a0d4 <__lo0bits+0x32>
 800a0d0:	3008      	adds	r0, #8
 800a0d2:	0a1b      	lsrs	r3, r3, #8
 800a0d4:	0719      	lsls	r1, r3, #28
 800a0d6:	bf04      	itt	eq
 800a0d8:	091b      	lsreq	r3, r3, #4
 800a0da:	3004      	addeq	r0, #4
 800a0dc:	0799      	lsls	r1, r3, #30
 800a0de:	bf04      	itt	eq
 800a0e0:	089b      	lsreq	r3, r3, #2
 800a0e2:	3002      	addeq	r0, #2
 800a0e4:	07d9      	lsls	r1, r3, #31
 800a0e6:	d403      	bmi.n	800a0f0 <__lo0bits+0x4e>
 800a0e8:	085b      	lsrs	r3, r3, #1
 800a0ea:	f100 0001 	add.w	r0, r0, #1
 800a0ee:	d003      	beq.n	800a0f8 <__lo0bits+0x56>
 800a0f0:	6013      	str	r3, [r2, #0]
 800a0f2:	4770      	bx	lr
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	4770      	bx	lr
 800a0f8:	2020      	movs	r0, #32
 800a0fa:	4770      	bx	lr

0800a0fc <__i2b>:
 800a0fc:	b510      	push	{r4, lr}
 800a0fe:	460c      	mov	r4, r1
 800a100:	2101      	movs	r1, #1
 800a102:	f7ff febb 	bl	8009e7c <_Balloc>
 800a106:	4602      	mov	r2, r0
 800a108:	b928      	cbnz	r0, 800a116 <__i2b+0x1a>
 800a10a:	4b05      	ldr	r3, [pc, #20]	@ (800a120 <__i2b+0x24>)
 800a10c:	f240 1145 	movw	r1, #325	@ 0x145
 800a110:	4804      	ldr	r0, [pc, #16]	@ (800a124 <__i2b+0x28>)
 800a112:	f001 ffd1 	bl	800c0b8 <__assert_func>
 800a116:	2301      	movs	r3, #1
 800a118:	6144      	str	r4, [r0, #20]
 800a11a:	6103      	str	r3, [r0, #16]
 800a11c:	bd10      	pop	{r4, pc}
 800a11e:	bf00      	nop
 800a120:	0800d06b 	.word	0x0800d06b
 800a124:	0800d07c 	.word	0x0800d07c

0800a128 <__multiply>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	4617      	mov	r7, r2
 800a12e:	690a      	ldr	r2, [r1, #16]
 800a130:	4689      	mov	r9, r1
 800a132:	b085      	sub	sp, #20
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	429a      	cmp	r2, r3
 800a138:	bfa2      	ittt	ge
 800a13a:	463b      	movge	r3, r7
 800a13c:	460f      	movge	r7, r1
 800a13e:	4699      	movge	r9, r3
 800a140:	693d      	ldr	r5, [r7, #16]
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a148:	6879      	ldr	r1, [r7, #4]
 800a14a:	eb05 060a 	add.w	r6, r5, sl
 800a14e:	42b3      	cmp	r3, r6
 800a150:	bfb8      	it	lt
 800a152:	3101      	addlt	r1, #1
 800a154:	f7ff fe92 	bl	8009e7c <_Balloc>
 800a158:	b930      	cbnz	r0, 800a168 <__multiply+0x40>
 800a15a:	4602      	mov	r2, r0
 800a15c:	4b42      	ldr	r3, [pc, #264]	@ (800a268 <__multiply+0x140>)
 800a15e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a162:	4842      	ldr	r0, [pc, #264]	@ (800a26c <__multiply+0x144>)
 800a164:	f001 ffa8 	bl	800c0b8 <__assert_func>
 800a168:	f100 0414 	add.w	r4, r0, #20
 800a16c:	2200      	movs	r2, #0
 800a16e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a172:	4623      	mov	r3, r4
 800a174:	4573      	cmp	r3, lr
 800a176:	d320      	bcc.n	800a1ba <__multiply+0x92>
 800a178:	f107 0814 	add.w	r8, r7, #20
 800a17c:	f109 0114 	add.w	r1, r9, #20
 800a180:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a184:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a188:	9302      	str	r3, [sp, #8]
 800a18a:	1beb      	subs	r3, r5, r7
 800a18c:	3715      	adds	r7, #21
 800a18e:	3b15      	subs	r3, #21
 800a190:	f023 0303 	bic.w	r3, r3, #3
 800a194:	3304      	adds	r3, #4
 800a196:	42bd      	cmp	r5, r7
 800a198:	bf38      	it	cc
 800a19a:	2304      	movcc	r3, #4
 800a19c:	9301      	str	r3, [sp, #4]
 800a19e:	9b02      	ldr	r3, [sp, #8]
 800a1a0:	9103      	str	r1, [sp, #12]
 800a1a2:	428b      	cmp	r3, r1
 800a1a4:	d80c      	bhi.n	800a1c0 <__multiply+0x98>
 800a1a6:	2e00      	cmp	r6, #0
 800a1a8:	dd03      	ble.n	800a1b2 <__multiply+0x8a>
 800a1aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d057      	beq.n	800a262 <__multiply+0x13a>
 800a1b2:	6106      	str	r6, [r0, #16]
 800a1b4:	b005      	add	sp, #20
 800a1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ba:	f843 2b04 	str.w	r2, [r3], #4
 800a1be:	e7d9      	b.n	800a174 <__multiply+0x4c>
 800a1c0:	f8b1 a000 	ldrh.w	sl, [r1]
 800a1c4:	f1ba 0f00 	cmp.w	sl, #0
 800a1c8:	d021      	beq.n	800a20e <__multiply+0xe6>
 800a1ca:	46c4      	mov	ip, r8
 800a1cc:	46a1      	mov	r9, r4
 800a1ce:	2700      	movs	r7, #0
 800a1d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a1d4:	f8d9 3000 	ldr.w	r3, [r9]
 800a1d8:	fa1f fb82 	uxth.w	fp, r2
 800a1dc:	4565      	cmp	r5, ip
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a1e4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a1e8:	443b      	add	r3, r7
 800a1ea:	f8d9 7000 	ldr.w	r7, [r9]
 800a1ee:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800a1f2:	fb0a 7202 	mla	r2, sl, r2, r7
 800a1f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a200:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a204:	f849 3b04 	str.w	r3, [r9], #4
 800a208:	d8e2      	bhi.n	800a1d0 <__multiply+0xa8>
 800a20a:	9b01      	ldr	r3, [sp, #4]
 800a20c:	50e7      	str	r7, [r4, r3]
 800a20e:	9b03      	ldr	r3, [sp, #12]
 800a210:	3104      	adds	r1, #4
 800a212:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a216:	f1b9 0f00 	cmp.w	r9, #0
 800a21a:	d020      	beq.n	800a25e <__multiply+0x136>
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	4647      	mov	r7, r8
 800a220:	46a4      	mov	ip, r4
 800a222:	f04f 0a00 	mov.w	sl, #0
 800a226:	f8b7 b000 	ldrh.w	fp, [r7]
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a230:	fb09 220b 	mla	r2, r9, fp, r2
 800a234:	4452      	add	r2, sl
 800a236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a23a:	f84c 3b04 	str.w	r3, [ip], #4
 800a23e:	f857 3b04 	ldr.w	r3, [r7], #4
 800a242:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a246:	f8bc 3000 	ldrh.w	r3, [ip]
 800a24a:	42bd      	cmp	r5, r7
 800a24c:	fb09 330a 	mla	r3, r9, sl, r3
 800a250:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a254:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a258:	d8e5      	bhi.n	800a226 <__multiply+0xfe>
 800a25a:	9a01      	ldr	r2, [sp, #4]
 800a25c:	50a3      	str	r3, [r4, r2]
 800a25e:	3404      	adds	r4, #4
 800a260:	e79d      	b.n	800a19e <__multiply+0x76>
 800a262:	3e01      	subs	r6, #1
 800a264:	e79f      	b.n	800a1a6 <__multiply+0x7e>
 800a266:	bf00      	nop
 800a268:	0800d06b 	.word	0x0800d06b
 800a26c:	0800d07c 	.word	0x0800d07c

0800a270 <__pow5mult>:
 800a270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a274:	4615      	mov	r5, r2
 800a276:	f012 0203 	ands.w	r2, r2, #3
 800a27a:	4607      	mov	r7, r0
 800a27c:	460e      	mov	r6, r1
 800a27e:	d007      	beq.n	800a290 <__pow5mult+0x20>
 800a280:	3a01      	subs	r2, #1
 800a282:	4c25      	ldr	r4, [pc, #148]	@ (800a318 <__pow5mult+0xa8>)
 800a284:	2300      	movs	r3, #0
 800a286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a28a:	f7ff fe59 	bl	8009f40 <__multadd>
 800a28e:	4606      	mov	r6, r0
 800a290:	10ad      	asrs	r5, r5, #2
 800a292:	d03d      	beq.n	800a310 <__pow5mult+0xa0>
 800a294:	69fc      	ldr	r4, [r7, #28]
 800a296:	b97c      	cbnz	r4, 800a2b8 <__pow5mult+0x48>
 800a298:	2010      	movs	r0, #16
 800a29a:	f7ff fd39 	bl	8009d10 <malloc>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	61f8      	str	r0, [r7, #28]
 800a2a2:	b928      	cbnz	r0, 800a2b0 <__pow5mult+0x40>
 800a2a4:	4b1d      	ldr	r3, [pc, #116]	@ (800a31c <__pow5mult+0xac>)
 800a2a6:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a2aa:	481d      	ldr	r0, [pc, #116]	@ (800a320 <__pow5mult+0xb0>)
 800a2ac:	f001 ff04 	bl	800c0b8 <__assert_func>
 800a2b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2b4:	6004      	str	r4, [r0, #0]
 800a2b6:	60c4      	str	r4, [r0, #12]
 800a2b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a2bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2c0:	b94c      	cbnz	r4, 800a2d6 <__pow5mult+0x66>
 800a2c2:	f240 2171 	movw	r1, #625	@ 0x271
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	f7ff ff18 	bl	800a0fc <__i2b>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2d4:	6003      	str	r3, [r0, #0]
 800a2d6:	f04f 0900 	mov.w	r9, #0
 800a2da:	07eb      	lsls	r3, r5, #31
 800a2dc:	d50a      	bpl.n	800a2f4 <__pow5mult+0x84>
 800a2de:	4631      	mov	r1, r6
 800a2e0:	4622      	mov	r2, r4
 800a2e2:	4638      	mov	r0, r7
 800a2e4:	f7ff ff20 	bl	800a128 <__multiply>
 800a2e8:	4680      	mov	r8, r0
 800a2ea:	4631      	mov	r1, r6
 800a2ec:	4638      	mov	r0, r7
 800a2ee:	4646      	mov	r6, r8
 800a2f0:	f7ff fe04 	bl	8009efc <_Bfree>
 800a2f4:	106d      	asrs	r5, r5, #1
 800a2f6:	d00b      	beq.n	800a310 <__pow5mult+0xa0>
 800a2f8:	6820      	ldr	r0, [r4, #0]
 800a2fa:	b938      	cbnz	r0, 800a30c <__pow5mult+0x9c>
 800a2fc:	4622      	mov	r2, r4
 800a2fe:	4621      	mov	r1, r4
 800a300:	4638      	mov	r0, r7
 800a302:	f7ff ff11 	bl	800a128 <__multiply>
 800a306:	6020      	str	r0, [r4, #0]
 800a308:	f8c0 9000 	str.w	r9, [r0]
 800a30c:	4604      	mov	r4, r0
 800a30e:	e7e4      	b.n	800a2da <__pow5mult+0x6a>
 800a310:	4630      	mov	r0, r6
 800a312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a316:	bf00      	nop
 800a318:	0800d1a8 	.word	0x0800d1a8
 800a31c:	0800cffc 	.word	0x0800cffc
 800a320:	0800d07c 	.word	0x0800d07c

0800a324 <__lshift>:
 800a324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a328:	460c      	mov	r4, r1
 800a32a:	4607      	mov	r7, r0
 800a32c:	4691      	mov	r9, r2
 800a32e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a332:	6923      	ldr	r3, [r4, #16]
 800a334:	6849      	ldr	r1, [r1, #4]
 800a336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a33a:	68a3      	ldr	r3, [r4, #8]
 800a33c:	f108 0601 	add.w	r6, r8, #1
 800a340:	42b3      	cmp	r3, r6
 800a342:	db0b      	blt.n	800a35c <__lshift+0x38>
 800a344:	4638      	mov	r0, r7
 800a346:	f7ff fd99 	bl	8009e7c <_Balloc>
 800a34a:	4605      	mov	r5, r0
 800a34c:	b948      	cbnz	r0, 800a362 <__lshift+0x3e>
 800a34e:	4602      	mov	r2, r0
 800a350:	4b28      	ldr	r3, [pc, #160]	@ (800a3f4 <__lshift+0xd0>)
 800a352:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a356:	4828      	ldr	r0, [pc, #160]	@ (800a3f8 <__lshift+0xd4>)
 800a358:	f001 feae 	bl	800c0b8 <__assert_func>
 800a35c:	3101      	adds	r1, #1
 800a35e:	005b      	lsls	r3, r3, #1
 800a360:	e7ee      	b.n	800a340 <__lshift+0x1c>
 800a362:	2300      	movs	r3, #0
 800a364:	f100 0114 	add.w	r1, r0, #20
 800a368:	f100 0210 	add.w	r2, r0, #16
 800a36c:	4618      	mov	r0, r3
 800a36e:	4553      	cmp	r3, sl
 800a370:	db33      	blt.n	800a3da <__lshift+0xb6>
 800a372:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a376:	f104 0314 	add.w	r3, r4, #20
 800a37a:	6920      	ldr	r0, [r4, #16]
 800a37c:	f019 091f 	ands.w	r9, r9, #31
 800a380:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a384:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a388:	d02b      	beq.n	800a3e2 <__lshift+0xbe>
 800a38a:	f1c9 0e20 	rsb	lr, r9, #32
 800a38e:	468a      	mov	sl, r1
 800a390:	2200      	movs	r2, #0
 800a392:	6818      	ldr	r0, [r3, #0]
 800a394:	fa00 f009 	lsl.w	r0, r0, r9
 800a398:	4310      	orrs	r0, r2
 800a39a:	f84a 0b04 	str.w	r0, [sl], #4
 800a39e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3a2:	459c      	cmp	ip, r3
 800a3a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3a8:	d8f3      	bhi.n	800a392 <__lshift+0x6e>
 800a3aa:	ebac 0304 	sub.w	r3, ip, r4
 800a3ae:	f104 0015 	add.w	r0, r4, #21
 800a3b2:	3b15      	subs	r3, #21
 800a3b4:	f023 0303 	bic.w	r3, r3, #3
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	4560      	cmp	r0, ip
 800a3bc:	bf88      	it	hi
 800a3be:	2304      	movhi	r3, #4
 800a3c0:	50ca      	str	r2, [r1, r3]
 800a3c2:	b10a      	cbz	r2, 800a3c8 <__lshift+0xa4>
 800a3c4:	f108 0602 	add.w	r6, r8, #2
 800a3c8:	3e01      	subs	r6, #1
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	4621      	mov	r1, r4
 800a3ce:	612e      	str	r6, [r5, #16]
 800a3d0:	f7ff fd94 	bl	8009efc <_Bfree>
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3da:	3301      	adds	r3, #1
 800a3dc:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3e0:	e7c5      	b.n	800a36e <__lshift+0x4a>
 800a3e2:	3904      	subs	r1, #4
 800a3e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e8:	459c      	cmp	ip, r3
 800a3ea:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3ee:	d8f9      	bhi.n	800a3e4 <__lshift+0xc0>
 800a3f0:	e7ea      	b.n	800a3c8 <__lshift+0xa4>
 800a3f2:	bf00      	nop
 800a3f4:	0800d06b 	.word	0x0800d06b
 800a3f8:	0800d07c 	.word	0x0800d07c

0800a3fc <__mcmp>:
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	690a      	ldr	r2, [r1, #16]
 800a400:	6900      	ldr	r0, [r0, #16]
 800a402:	1a80      	subs	r0, r0, r2
 800a404:	b530      	push	{r4, r5, lr}
 800a406:	d10e      	bne.n	800a426 <__mcmp+0x2a>
 800a408:	3314      	adds	r3, #20
 800a40a:	3114      	adds	r1, #20
 800a40c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a410:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a414:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a418:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a41c:	4295      	cmp	r5, r2
 800a41e:	d003      	beq.n	800a428 <__mcmp+0x2c>
 800a420:	d205      	bcs.n	800a42e <__mcmp+0x32>
 800a422:	f04f 30ff 	mov.w	r0, #4294967295
 800a426:	bd30      	pop	{r4, r5, pc}
 800a428:	42a3      	cmp	r3, r4
 800a42a:	d3f3      	bcc.n	800a414 <__mcmp+0x18>
 800a42c:	e7fb      	b.n	800a426 <__mcmp+0x2a>
 800a42e:	2001      	movs	r0, #1
 800a430:	e7f9      	b.n	800a426 <__mcmp+0x2a>
	...

0800a434 <__mdiff>:
 800a434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a438:	4689      	mov	r9, r1
 800a43a:	4606      	mov	r6, r0
 800a43c:	4611      	mov	r1, r2
 800a43e:	4614      	mov	r4, r2
 800a440:	4648      	mov	r0, r9
 800a442:	f7ff ffdb 	bl	800a3fc <__mcmp>
 800a446:	1e05      	subs	r5, r0, #0
 800a448:	d112      	bne.n	800a470 <__mdiff+0x3c>
 800a44a:	4629      	mov	r1, r5
 800a44c:	4630      	mov	r0, r6
 800a44e:	f7ff fd15 	bl	8009e7c <_Balloc>
 800a452:	4602      	mov	r2, r0
 800a454:	b928      	cbnz	r0, 800a462 <__mdiff+0x2e>
 800a456:	4b41      	ldr	r3, [pc, #260]	@ (800a55c <__mdiff+0x128>)
 800a458:	f240 2137 	movw	r1, #567	@ 0x237
 800a45c:	4840      	ldr	r0, [pc, #256]	@ (800a560 <__mdiff+0x12c>)
 800a45e:	f001 fe2b 	bl	800c0b8 <__assert_func>
 800a462:	2301      	movs	r3, #1
 800a464:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a468:	4610      	mov	r0, r2
 800a46a:	b003      	add	sp, #12
 800a46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a470:	bfbc      	itt	lt
 800a472:	464b      	movlt	r3, r9
 800a474:	46a1      	movlt	r9, r4
 800a476:	4630      	mov	r0, r6
 800a478:	bfb8      	it	lt
 800a47a:	2501      	movlt	r5, #1
 800a47c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a480:	bfb4      	ite	lt
 800a482:	461c      	movlt	r4, r3
 800a484:	2500      	movge	r5, #0
 800a486:	f7ff fcf9 	bl	8009e7c <_Balloc>
 800a48a:	4602      	mov	r2, r0
 800a48c:	b918      	cbnz	r0, 800a496 <__mdiff+0x62>
 800a48e:	4b33      	ldr	r3, [pc, #204]	@ (800a55c <__mdiff+0x128>)
 800a490:	f240 2145 	movw	r1, #581	@ 0x245
 800a494:	e7e2      	b.n	800a45c <__mdiff+0x28>
 800a496:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a49a:	f104 0e14 	add.w	lr, r4, #20
 800a49e:	6926      	ldr	r6, [r4, #16]
 800a4a0:	f100 0b14 	add.w	fp, r0, #20
 800a4a4:	60c5      	str	r5, [r0, #12]
 800a4a6:	f109 0514 	add.w	r5, r9, #20
 800a4aa:	f109 0310 	add.w	r3, r9, #16
 800a4ae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a4b2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a4b6:	46d9      	mov	r9, fp
 800a4b8:	f04f 0c00 	mov.w	ip, #0
 800a4bc:	9301      	str	r3, [sp, #4]
 800a4be:	9b01      	ldr	r3, [sp, #4]
 800a4c0:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a4c4:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a4c8:	4576      	cmp	r6, lr
 800a4ca:	9301      	str	r3, [sp, #4]
 800a4cc:	fa1f f38a 	uxth.w	r3, sl
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	b283      	uxth	r3, r0
 800a4d4:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800a4d8:	eba1 0303 	sub.w	r3, r1, r3
 800a4dc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a4e0:	4463      	add	r3, ip
 800a4e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a4f0:	f849 3b04 	str.w	r3, [r9], #4
 800a4f4:	d8e3      	bhi.n	800a4be <__mdiff+0x8a>
 800a4f6:	1b33      	subs	r3, r6, r4
 800a4f8:	3415      	adds	r4, #21
 800a4fa:	3b15      	subs	r3, #21
 800a4fc:	f023 0303 	bic.w	r3, r3, #3
 800a500:	3304      	adds	r3, #4
 800a502:	42a6      	cmp	r6, r4
 800a504:	bf38      	it	cc
 800a506:	2304      	movcc	r3, #4
 800a508:	441d      	add	r5, r3
 800a50a:	445b      	add	r3, fp
 800a50c:	462c      	mov	r4, r5
 800a50e:	461e      	mov	r6, r3
 800a510:	4544      	cmp	r4, r8
 800a512:	d30e      	bcc.n	800a532 <__mdiff+0xfe>
 800a514:	f108 0103 	add.w	r1, r8, #3
 800a518:	1b49      	subs	r1, r1, r5
 800a51a:	3d03      	subs	r5, #3
 800a51c:	f021 0103 	bic.w	r1, r1, #3
 800a520:	45a8      	cmp	r8, r5
 800a522:	bf38      	it	cc
 800a524:	2100      	movcc	r1, #0
 800a526:	440b      	add	r3, r1
 800a528:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a52c:	b199      	cbz	r1, 800a556 <__mdiff+0x122>
 800a52e:	6117      	str	r7, [r2, #16]
 800a530:	e79a      	b.n	800a468 <__mdiff+0x34>
 800a532:	f854 1b04 	ldr.w	r1, [r4], #4
 800a536:	46e6      	mov	lr, ip
 800a538:	fa1f fc81 	uxth.w	ip, r1
 800a53c:	0c08      	lsrs	r0, r1, #16
 800a53e:	4471      	add	r1, lr
 800a540:	44f4      	add	ip, lr
 800a542:	b289      	uxth	r1, r1
 800a544:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a54c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a550:	f846 1b04 	str.w	r1, [r6], #4
 800a554:	e7dc      	b.n	800a510 <__mdiff+0xdc>
 800a556:	3f01      	subs	r7, #1
 800a558:	e7e6      	b.n	800a528 <__mdiff+0xf4>
 800a55a:	bf00      	nop
 800a55c:	0800d06b 	.word	0x0800d06b
 800a560:	0800d07c 	.word	0x0800d07c

0800a564 <__ulp>:
 800a564:	b082      	sub	sp, #8
 800a566:	4b11      	ldr	r3, [pc, #68]	@ (800a5ac <__ulp+0x48>)
 800a568:	ed8d 0b00 	vstr	d0, [sp]
 800a56c:	9a01      	ldr	r2, [sp, #4]
 800a56e:	4013      	ands	r3, r2
 800a570:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a574:	2b00      	cmp	r3, #0
 800a576:	dc08      	bgt.n	800a58a <__ulp+0x26>
 800a578:	425b      	negs	r3, r3
 800a57a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a57e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a582:	da04      	bge.n	800a58e <__ulp+0x2a>
 800a584:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a588:	4113      	asrs	r3, r2
 800a58a:	2200      	movs	r2, #0
 800a58c:	e008      	b.n	800a5a0 <__ulp+0x3c>
 800a58e:	f1a2 0314 	sub.w	r3, r2, #20
 800a592:	2b1e      	cmp	r3, #30
 800a594:	bfd6      	itet	le
 800a596:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a59a:	2201      	movgt	r2, #1
 800a59c:	40da      	lsrle	r2, r3
 800a59e:	2300      	movs	r3, #0
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	ec41 0b10 	vmov	d0, r0, r1
 800a5a8:	b002      	add	sp, #8
 800a5aa:	4770      	bx	lr
 800a5ac:	7ff00000 	.word	0x7ff00000

0800a5b0 <__b2d>:
 800a5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b4:	6906      	ldr	r6, [r0, #16]
 800a5b6:	f100 0814 	add.w	r8, r0, #20
 800a5ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a5be:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5c2:	1f37      	subs	r7, r6, #4
 800a5c4:	4610      	mov	r0, r2
 800a5c6:	f7ff fd4d 	bl	800a064 <__hi0bits>
 800a5ca:	f1c0 0320 	rsb	r3, r0, #32
 800a5ce:	280a      	cmp	r0, #10
 800a5d0:	600b      	str	r3, [r1, #0]
 800a5d2:	491d      	ldr	r1, [pc, #116]	@ (800a648 <__b2d+0x98>)
 800a5d4:	dc16      	bgt.n	800a604 <__b2d+0x54>
 800a5d6:	f1c0 0c0b 	rsb	ip, r0, #11
 800a5da:	45b8      	cmp	r8, r7
 800a5dc:	f100 0015 	add.w	r0, r0, #21
 800a5e0:	fa22 f30c 	lsr.w	r3, r2, ip
 800a5e4:	fa02 f000 	lsl.w	r0, r2, r0
 800a5e8:	ea43 0501 	orr.w	r5, r3, r1
 800a5ec:	bf34      	ite	cc
 800a5ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5f2:	2300      	movcs	r3, #0
 800a5f4:	fa23 f30c 	lsr.w	r3, r3, ip
 800a5f8:	4303      	orrs	r3, r0
 800a5fa:	461c      	mov	r4, r3
 800a5fc:	ec45 4b10 	vmov	d0, r4, r5
 800a600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a604:	45b8      	cmp	r8, r7
 800a606:	bf3a      	itte	cc
 800a608:	f1a6 0708 	subcc.w	r7, r6, #8
 800a60c:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a610:	2300      	movcs	r3, #0
 800a612:	380b      	subs	r0, #11
 800a614:	d014      	beq.n	800a640 <__b2d+0x90>
 800a616:	f1c0 0120 	rsb	r1, r0, #32
 800a61a:	4082      	lsls	r2, r0
 800a61c:	4547      	cmp	r7, r8
 800a61e:	fa23 f401 	lsr.w	r4, r3, r1
 800a622:	fa03 f300 	lsl.w	r3, r3, r0
 800a626:	ea42 0204 	orr.w	r2, r2, r4
 800a62a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a62e:	bf8c      	ite	hi
 800a630:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a634:	2200      	movls	r2, #0
 800a636:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a63a:	40ca      	lsrs	r2, r1
 800a63c:	4313      	orrs	r3, r2
 800a63e:	e7dc      	b.n	800a5fa <__b2d+0x4a>
 800a640:	ea42 0501 	orr.w	r5, r2, r1
 800a644:	e7d9      	b.n	800a5fa <__b2d+0x4a>
 800a646:	bf00      	nop
 800a648:	3ff00000 	.word	0x3ff00000

0800a64c <__d2b>:
 800a64c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a650:	460f      	mov	r7, r1
 800a652:	2101      	movs	r1, #1
 800a654:	4616      	mov	r6, r2
 800a656:	ec59 8b10 	vmov	r8, r9, d0
 800a65a:	f7ff fc0f 	bl	8009e7c <_Balloc>
 800a65e:	4604      	mov	r4, r0
 800a660:	b930      	cbnz	r0, 800a670 <__d2b+0x24>
 800a662:	4602      	mov	r2, r0
 800a664:	4b23      	ldr	r3, [pc, #140]	@ (800a6f4 <__d2b+0xa8>)
 800a666:	f240 310f 	movw	r1, #783	@ 0x30f
 800a66a:	4823      	ldr	r0, [pc, #140]	@ (800a6f8 <__d2b+0xac>)
 800a66c:	f001 fd24 	bl	800c0b8 <__assert_func>
 800a670:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a674:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a678:	b10d      	cbz	r5, 800a67e <__d2b+0x32>
 800a67a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a67e:	9301      	str	r3, [sp, #4]
 800a680:	f1b8 0300 	subs.w	r3, r8, #0
 800a684:	d023      	beq.n	800a6ce <__d2b+0x82>
 800a686:	4668      	mov	r0, sp
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	f7ff fd0a 	bl	800a0a2 <__lo0bits>
 800a68e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a692:	b1d0      	cbz	r0, 800a6ca <__d2b+0x7e>
 800a694:	f1c0 0320 	rsb	r3, r0, #32
 800a698:	fa02 f303 	lsl.w	r3, r2, r3
 800a69c:	40c2      	lsrs	r2, r0
 800a69e:	430b      	orrs	r3, r1
 800a6a0:	9201      	str	r2, [sp, #4]
 800a6a2:	6163      	str	r3, [r4, #20]
 800a6a4:	9b01      	ldr	r3, [sp, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	61a3      	str	r3, [r4, #24]
 800a6aa:	bf0c      	ite	eq
 800a6ac:	2201      	moveq	r2, #1
 800a6ae:	2202      	movne	r2, #2
 800a6b0:	6122      	str	r2, [r4, #16]
 800a6b2:	b1a5      	cbz	r5, 800a6de <__d2b+0x92>
 800a6b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a6b8:	4405      	add	r5, r0
 800a6ba:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a6be:	603d      	str	r5, [r7, #0]
 800a6c0:	6030      	str	r0, [r6, #0]
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	b003      	add	sp, #12
 800a6c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6ca:	6161      	str	r1, [r4, #20]
 800a6cc:	e7ea      	b.n	800a6a4 <__d2b+0x58>
 800a6ce:	a801      	add	r0, sp, #4
 800a6d0:	f7ff fce7 	bl	800a0a2 <__lo0bits>
 800a6d4:	9b01      	ldr	r3, [sp, #4]
 800a6d6:	3020      	adds	r0, #32
 800a6d8:	2201      	movs	r2, #1
 800a6da:	6163      	str	r3, [r4, #20]
 800a6dc:	e7e8      	b.n	800a6b0 <__d2b+0x64>
 800a6de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a6e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6e6:	6038      	str	r0, [r7, #0]
 800a6e8:	6918      	ldr	r0, [r3, #16]
 800a6ea:	f7ff fcbb 	bl	800a064 <__hi0bits>
 800a6ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6f2:	e7e5      	b.n	800a6c0 <__d2b+0x74>
 800a6f4:	0800d06b 	.word	0x0800d06b
 800a6f8:	0800d07c 	.word	0x0800d07c

0800a6fc <__ratio>:
 800a6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a700:	b085      	sub	sp, #20
 800a702:	e9cd 1000 	strd	r1, r0, [sp]
 800a706:	a902      	add	r1, sp, #8
 800a708:	f7ff ff52 	bl	800a5b0 <__b2d>
 800a70c:	a903      	add	r1, sp, #12
 800a70e:	9800      	ldr	r0, [sp, #0]
 800a710:	ec55 4b10 	vmov	r4, r5, d0
 800a714:	f7ff ff4c 	bl	800a5b0 <__b2d>
 800a718:	9b01      	ldr	r3, [sp, #4]
 800a71a:	462f      	mov	r7, r5
 800a71c:	4620      	mov	r0, r4
 800a71e:	6919      	ldr	r1, [r3, #16]
 800a720:	9b00      	ldr	r3, [sp, #0]
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	1ac9      	subs	r1, r1, r3
 800a726:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a72a:	ec5b ab10 	vmov	sl, fp, d0
 800a72e:	1a9b      	subs	r3, r3, r2
 800a730:	46d9      	mov	r9, fp
 800a732:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a736:	2b00      	cmp	r3, #0
 800a738:	bfcd      	iteet	gt
 800a73a:	462a      	movgt	r2, r5
 800a73c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a740:	465a      	movle	r2, fp
 800a742:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a746:	bfd8      	it	le
 800a748:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a74c:	4652      	mov	r2, sl
 800a74e:	4639      	mov	r1, r7
 800a750:	464b      	mov	r3, r9
 800a752:	f7f6 f85f 	bl	8000814 <__aeabi_ddiv>
 800a756:	ec41 0b10 	vmov	d0, r0, r1
 800a75a:	b005      	add	sp, #20
 800a75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a760 <__copybits>:
 800a760:	3901      	subs	r1, #1
 800a762:	f102 0314 	add.w	r3, r2, #20
 800a766:	1149      	asrs	r1, r1, #5
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	3101      	adds	r1, #1
 800a76c:	6914      	ldr	r4, [r2, #16]
 800a76e:	1f05      	subs	r5, r0, #4
 800a770:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a774:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a778:	42a3      	cmp	r3, r4
 800a77a:	d30c      	bcc.n	800a796 <__copybits+0x36>
 800a77c:	1aa3      	subs	r3, r4, r2
 800a77e:	3211      	adds	r2, #17
 800a780:	3b11      	subs	r3, #17
 800a782:	f023 0303 	bic.w	r3, r3, #3
 800a786:	42a2      	cmp	r2, r4
 800a788:	bf88      	it	hi
 800a78a:	2300      	movhi	r3, #0
 800a78c:	4418      	add	r0, r3
 800a78e:	2300      	movs	r3, #0
 800a790:	4288      	cmp	r0, r1
 800a792:	d305      	bcc.n	800a7a0 <__copybits+0x40>
 800a794:	bd70      	pop	{r4, r5, r6, pc}
 800a796:	f853 6b04 	ldr.w	r6, [r3], #4
 800a79a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a79e:	e7eb      	b.n	800a778 <__copybits+0x18>
 800a7a0:	f840 3b04 	str.w	r3, [r0], #4
 800a7a4:	e7f4      	b.n	800a790 <__copybits+0x30>

0800a7a6 <__any_on>:
 800a7a6:	f100 0214 	add.w	r2, r0, #20
 800a7aa:	114b      	asrs	r3, r1, #5
 800a7ac:	6900      	ldr	r0, [r0, #16]
 800a7ae:	4298      	cmp	r0, r3
 800a7b0:	b510      	push	{r4, lr}
 800a7b2:	db11      	blt.n	800a7d8 <__any_on+0x32>
 800a7b4:	dd0a      	ble.n	800a7cc <__any_on+0x26>
 800a7b6:	f011 011f 	ands.w	r1, r1, #31
 800a7ba:	d007      	beq.n	800a7cc <__any_on+0x26>
 800a7bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7c0:	fa24 f001 	lsr.w	r0, r4, r1
 800a7c4:	fa00 f101 	lsl.w	r1, r0, r1
 800a7c8:	428c      	cmp	r4, r1
 800a7ca:	d10b      	bne.n	800a7e4 <__any_on+0x3e>
 800a7cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d803      	bhi.n	800a7dc <__any_on+0x36>
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	bd10      	pop	{r4, pc}
 800a7d8:	4603      	mov	r3, r0
 800a7da:	e7f7      	b.n	800a7cc <__any_on+0x26>
 800a7dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7e0:	2900      	cmp	r1, #0
 800a7e2:	d0f5      	beq.n	800a7d0 <__any_on+0x2a>
 800a7e4:	2001      	movs	r0, #1
 800a7e6:	e7f6      	b.n	800a7d6 <__any_on+0x30>

0800a7e8 <sulp>:
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	460d      	mov	r5, r1
 800a7ee:	4616      	mov	r6, r2
 800a7f0:	ec45 4b10 	vmov	d0, r4, r5
 800a7f4:	f7ff feb6 	bl	800a564 <__ulp>
 800a7f8:	ec51 0b10 	vmov	r0, r1, d0
 800a7fc:	b17e      	cbz	r6, 800a81e <sulp+0x36>
 800a7fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a802:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a806:	2b00      	cmp	r3, #0
 800a808:	dd09      	ble.n	800a81e <sulp+0x36>
 800a80a:	051b      	lsls	r3, r3, #20
 800a80c:	2400      	movs	r4, #0
 800a80e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a812:	4622      	mov	r2, r4
 800a814:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a818:	462b      	mov	r3, r5
 800a81a:	f7f5 fed1 	bl	80005c0 <__aeabi_dmul>
 800a81e:	ec41 0b10 	vmov	d0, r0, r1
 800a822:	bd70      	pop	{r4, r5, r6, pc}
 800a824:	0000      	movs	r0, r0
	...

0800a828 <_strtod_l>:
 800a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82c:	b09f      	sub	sp, #124	@ 0x7c
 800a82e:	460c      	mov	r4, r1
 800a830:	f04f 0a00 	mov.w	sl, #0
 800a834:	f04f 0b00 	mov.w	fp, #0
 800a838:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a83a:	2200      	movs	r2, #0
 800a83c:	9005      	str	r0, [sp, #20]
 800a83e:	921a      	str	r2, [sp, #104]	@ 0x68
 800a840:	460a      	mov	r2, r1
 800a842:	9219      	str	r2, [sp, #100]	@ 0x64
 800a844:	7811      	ldrb	r1, [r2, #0]
 800a846:	292b      	cmp	r1, #43	@ 0x2b
 800a848:	d04a      	beq.n	800a8e0 <_strtod_l+0xb8>
 800a84a:	d838      	bhi.n	800a8be <_strtod_l+0x96>
 800a84c:	290d      	cmp	r1, #13
 800a84e:	d832      	bhi.n	800a8b6 <_strtod_l+0x8e>
 800a850:	2908      	cmp	r1, #8
 800a852:	d832      	bhi.n	800a8ba <_strtod_l+0x92>
 800a854:	2900      	cmp	r1, #0
 800a856:	d03b      	beq.n	800a8d0 <_strtod_l+0xa8>
 800a858:	2200      	movs	r2, #0
 800a85a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a85c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a85e:	782a      	ldrb	r2, [r5, #0]
 800a860:	2a30      	cmp	r2, #48	@ 0x30
 800a862:	f040 80b2 	bne.w	800a9ca <_strtod_l+0x1a2>
 800a866:	786a      	ldrb	r2, [r5, #1]
 800a868:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a86c:	2a58      	cmp	r2, #88	@ 0x58
 800a86e:	d16e      	bne.n	800a94e <_strtod_l+0x126>
 800a870:	9302      	str	r3, [sp, #8]
 800a872:	a919      	add	r1, sp, #100	@ 0x64
 800a874:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a876:	4a90      	ldr	r2, [pc, #576]	@ (800aab8 <_strtod_l+0x290>)
 800a878:	9301      	str	r3, [sp, #4]
 800a87a:	ab1a      	add	r3, sp, #104	@ 0x68
 800a87c:	9805      	ldr	r0, [sp, #20]
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a882:	f001 fcb1 	bl	800c1e8 <__gethex>
 800a886:	f010 060f 	ands.w	r6, r0, #15
 800a88a:	4604      	mov	r4, r0
 800a88c:	d005      	beq.n	800a89a <_strtod_l+0x72>
 800a88e:	2e06      	cmp	r6, #6
 800a890:	d128      	bne.n	800a8e4 <_strtod_l+0xbc>
 800a892:	3501      	adds	r5, #1
 800a894:	2300      	movs	r3, #0
 800a896:	9519      	str	r5, [sp, #100]	@ 0x64
 800a898:	930e      	str	r3, [sp, #56]	@ 0x38
 800a89a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f040 858e 	bne.w	800b3be <_strtod_l+0xb96>
 800a8a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8a4:	b1cb      	cbz	r3, 800a8da <_strtod_l+0xb2>
 800a8a6:	4652      	mov	r2, sl
 800a8a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a8ac:	ec43 2b10 	vmov	d0, r2, r3
 800a8b0:	b01f      	add	sp, #124	@ 0x7c
 800a8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b6:	2920      	cmp	r1, #32
 800a8b8:	d1ce      	bne.n	800a858 <_strtod_l+0x30>
 800a8ba:	3201      	adds	r2, #1
 800a8bc:	e7c1      	b.n	800a842 <_strtod_l+0x1a>
 800a8be:	292d      	cmp	r1, #45	@ 0x2d
 800a8c0:	d1ca      	bne.n	800a858 <_strtod_l+0x30>
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	910e      	str	r1, [sp, #56]	@ 0x38
 800a8c6:	1c51      	adds	r1, r2, #1
 800a8c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a8ca:	7852      	ldrb	r2, [r2, #1]
 800a8cc:	2a00      	cmp	r2, #0
 800a8ce:	d1c5      	bne.n	800a85c <_strtod_l+0x34>
 800a8d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f040 8570 	bne.w	800b3ba <_strtod_l+0xb92>
 800a8da:	4652      	mov	r2, sl
 800a8dc:	465b      	mov	r3, fp
 800a8de:	e7e5      	b.n	800a8ac <_strtod_l+0x84>
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	e7ef      	b.n	800a8c4 <_strtod_l+0x9c>
 800a8e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a8e6:	b13a      	cbz	r2, 800a8f8 <_strtod_l+0xd0>
 800a8e8:	2135      	movs	r1, #53	@ 0x35
 800a8ea:	a81c      	add	r0, sp, #112	@ 0x70
 800a8ec:	f7ff ff38 	bl	800a760 <__copybits>
 800a8f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8f2:	9805      	ldr	r0, [sp, #20]
 800a8f4:	f7ff fb02 	bl	8009efc <_Bfree>
 800a8f8:	3e01      	subs	r6, #1
 800a8fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a8fc:	2e04      	cmp	r6, #4
 800a8fe:	d806      	bhi.n	800a90e <_strtod_l+0xe6>
 800a900:	e8df f006 	tbb	[pc, r6]
 800a904:	201d0314 	.word	0x201d0314
 800a908:	14          	.byte	0x14
 800a909:	00          	.byte	0x00
 800a90a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a90e:	05e1      	lsls	r1, r4, #23
 800a910:	bf48      	it	mi
 800a912:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a916:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a91a:	0d1b      	lsrs	r3, r3, #20
 800a91c:	051b      	lsls	r3, r3, #20
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1bb      	bne.n	800a89a <_strtod_l+0x72>
 800a922:	f7fe fb07 	bl	8008f34 <__errno>
 800a926:	2322      	movs	r3, #34	@ 0x22
 800a928:	6003      	str	r3, [r0, #0]
 800a92a:	e7b6      	b.n	800a89a <_strtod_l+0x72>
 800a92c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a930:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a934:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a938:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a93c:	e7e7      	b.n	800a90e <_strtod_l+0xe6>
 800a93e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800aac0 <_strtod_l+0x298>
 800a942:	e7e4      	b.n	800a90e <_strtod_l+0xe6>
 800a944:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a948:	f04f 3aff 	mov.w	sl, #4294967295
 800a94c:	e7df      	b.n	800a90e <_strtod_l+0xe6>
 800a94e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a950:	1c5a      	adds	r2, r3, #1
 800a952:	9219      	str	r2, [sp, #100]	@ 0x64
 800a954:	785b      	ldrb	r3, [r3, #1]
 800a956:	2b30      	cmp	r3, #48	@ 0x30
 800a958:	d0f9      	beq.n	800a94e <_strtod_l+0x126>
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d09d      	beq.n	800a89a <_strtod_l+0x72>
 800a95e:	2301      	movs	r3, #1
 800a960:	2700      	movs	r7, #0
 800a962:	9308      	str	r3, [sp, #32]
 800a964:	220a      	movs	r2, #10
 800a966:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a968:	46b9      	mov	r9, r7
 800a96a:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a96c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a96e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a970:	7805      	ldrb	r5, [r0, #0]
 800a972:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a976:	b2d9      	uxtb	r1, r3
 800a978:	2909      	cmp	r1, #9
 800a97a:	d928      	bls.n	800a9ce <_strtod_l+0x1a6>
 800a97c:	2201      	movs	r2, #1
 800a97e:	494f      	ldr	r1, [pc, #316]	@ (800aabc <_strtod_l+0x294>)
 800a980:	f001 fb62 	bl	800c048 <strncmp>
 800a984:	2800      	cmp	r0, #0
 800a986:	d032      	beq.n	800a9ee <_strtod_l+0x1c6>
 800a988:	2000      	movs	r0, #0
 800a98a:	462a      	mov	r2, r5
 800a98c:	464d      	mov	r5, r9
 800a98e:	4603      	mov	r3, r0
 800a990:	900a      	str	r0, [sp, #40]	@ 0x28
 800a992:	2a65      	cmp	r2, #101	@ 0x65
 800a994:	d001      	beq.n	800a99a <_strtod_l+0x172>
 800a996:	2a45      	cmp	r2, #69	@ 0x45
 800a998:	d114      	bne.n	800a9c4 <_strtod_l+0x19c>
 800a99a:	b91d      	cbnz	r5, 800a9a4 <_strtod_l+0x17c>
 800a99c:	9a08      	ldr	r2, [sp, #32]
 800a99e:	4302      	orrs	r2, r0
 800a9a0:	d096      	beq.n	800a8d0 <_strtod_l+0xa8>
 800a9a2:	2500      	movs	r5, #0
 800a9a4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a9a6:	1c62      	adds	r2, r4, #1
 800a9a8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9aa:	7862      	ldrb	r2, [r4, #1]
 800a9ac:	2a2b      	cmp	r2, #43	@ 0x2b
 800a9ae:	d079      	beq.n	800aaa4 <_strtod_l+0x27c>
 800a9b0:	2a2d      	cmp	r2, #45	@ 0x2d
 800a9b2:	d07d      	beq.n	800aab0 <_strtod_l+0x288>
 800a9b4:	f04f 0c00 	mov.w	ip, #0
 800a9b8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a9bc:	2909      	cmp	r1, #9
 800a9be:	f240 8085 	bls.w	800aacc <_strtod_l+0x2a4>
 800a9c2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a9c4:	f04f 0800 	mov.w	r8, #0
 800a9c8:	e0a5      	b.n	800ab16 <_strtod_l+0x2ee>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e7c8      	b.n	800a960 <_strtod_l+0x138>
 800a9ce:	f1b9 0f08 	cmp.w	r9, #8
 800a9d2:	f100 0001 	add.w	r0, r0, #1
 800a9d6:	f109 0901 	add.w	r9, r9, #1
 800a9da:	bfd4      	ite	le
 800a9dc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a9de:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a9e2:	9019      	str	r0, [sp, #100]	@ 0x64
 800a9e4:	bfdc      	itt	le
 800a9e6:	fb02 3301 	mlale	r3, r2, r1, r3
 800a9ea:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a9ec:	e7bf      	b.n	800a96e <_strtod_l+0x146>
 800a9ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9f0:	1c5a      	adds	r2, r3, #1
 800a9f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9f4:	785a      	ldrb	r2, [r3, #1]
 800a9f6:	f1b9 0f00 	cmp.w	r9, #0
 800a9fa:	d03a      	beq.n	800aa72 <_strtod_l+0x24a>
 800a9fc:	464d      	mov	r5, r9
 800a9fe:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa00:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800aa04:	2b09      	cmp	r3, #9
 800aa06:	d912      	bls.n	800aa2e <_strtod_l+0x206>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e7c2      	b.n	800a992 <_strtod_l+0x16a>
 800aa0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa0e:	3001      	adds	r0, #1
 800aa10:	1c5a      	adds	r2, r3, #1
 800aa12:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa14:	785a      	ldrb	r2, [r3, #1]
 800aa16:	2a30      	cmp	r2, #48	@ 0x30
 800aa18:	d0f8      	beq.n	800aa0c <_strtod_l+0x1e4>
 800aa1a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aa1e:	2b08      	cmp	r3, #8
 800aa20:	f200 84d2 	bhi.w	800b3c8 <_strtod_l+0xba0>
 800aa24:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa26:	2000      	movs	r0, #0
 800aa28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa2e:	3a30      	subs	r2, #48	@ 0x30
 800aa30:	f100 0301 	add.w	r3, r0, #1
 800aa34:	d017      	beq.n	800aa66 <_strtod_l+0x23e>
 800aa36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa38:	462e      	mov	r6, r5
 800aa3a:	f04f 0e0a 	mov.w	lr, #10
 800aa3e:	4419      	add	r1, r3
 800aa40:	910a      	str	r1, [sp, #40]	@ 0x28
 800aa42:	1c71      	adds	r1, r6, #1
 800aa44:	eba1 0c05 	sub.w	ip, r1, r5
 800aa48:	4563      	cmp	r3, ip
 800aa4a:	dc14      	bgt.n	800aa76 <_strtod_l+0x24e>
 800aa4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800aa50:	182b      	adds	r3, r5, r0
 800aa52:	3501      	adds	r5, #1
 800aa54:	2b08      	cmp	r3, #8
 800aa56:	4405      	add	r5, r0
 800aa58:	dc1a      	bgt.n	800aa90 <_strtod_l+0x268>
 800aa5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa5c:	230a      	movs	r3, #10
 800aa5e:	fb03 2301 	mla	r3, r3, r1, r2
 800aa62:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa64:	2300      	movs	r3, #0
 800aa66:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aa68:	4618      	mov	r0, r3
 800aa6a:	1c51      	adds	r1, r2, #1
 800aa6c:	9119      	str	r1, [sp, #100]	@ 0x64
 800aa6e:	7852      	ldrb	r2, [r2, #1]
 800aa70:	e7c6      	b.n	800aa00 <_strtod_l+0x1d8>
 800aa72:	4648      	mov	r0, r9
 800aa74:	e7cf      	b.n	800aa16 <_strtod_l+0x1ee>
 800aa76:	2e08      	cmp	r6, #8
 800aa78:	dc05      	bgt.n	800aa86 <_strtod_l+0x25e>
 800aa7a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800aa7c:	fb0e f606 	mul.w	r6, lr, r6
 800aa80:	960b      	str	r6, [sp, #44]	@ 0x2c
 800aa82:	460e      	mov	r6, r1
 800aa84:	e7dd      	b.n	800aa42 <_strtod_l+0x21a>
 800aa86:	2910      	cmp	r1, #16
 800aa88:	bfd8      	it	le
 800aa8a:	fb0e f707 	mulle.w	r7, lr, r7
 800aa8e:	e7f8      	b.n	800aa82 <_strtod_l+0x25a>
 800aa90:	2b0f      	cmp	r3, #15
 800aa92:	bfdc      	itt	le
 800aa94:	230a      	movle	r3, #10
 800aa96:	fb03 2707 	mlale	r7, r3, r7, r2
 800aa9a:	e7e3      	b.n	800aa64 <_strtod_l+0x23c>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e77b      	b.n	800a99c <_strtod_l+0x174>
 800aaa4:	f04f 0c00 	mov.w	ip, #0
 800aaa8:	1ca2      	adds	r2, r4, #2
 800aaaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800aaac:	78a2      	ldrb	r2, [r4, #2]
 800aaae:	e783      	b.n	800a9b8 <_strtod_l+0x190>
 800aab0:	f04f 0c01 	mov.w	ip, #1
 800aab4:	e7f8      	b.n	800aaa8 <_strtod_l+0x280>
 800aab6:	bf00      	nop
 800aab8:	0800d2bc 	.word	0x0800d2bc
 800aabc:	0800d0d5 	.word	0x0800d0d5
 800aac0:	7ff00000 	.word	0x7ff00000
 800aac4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aac6:	1c51      	adds	r1, r2, #1
 800aac8:	9119      	str	r1, [sp, #100]	@ 0x64
 800aaca:	7852      	ldrb	r2, [r2, #1]
 800aacc:	2a30      	cmp	r2, #48	@ 0x30
 800aace:	d0f9      	beq.n	800aac4 <_strtod_l+0x29c>
 800aad0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800aad4:	2908      	cmp	r1, #8
 800aad6:	f63f af75 	bhi.w	800a9c4 <_strtod_l+0x19c>
 800aada:	3a30      	subs	r2, #48	@ 0x30
 800aadc:	f04f 080a 	mov.w	r8, #10
 800aae0:	9209      	str	r2, [sp, #36]	@ 0x24
 800aae2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aae4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800aae6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aae8:	1c56      	adds	r6, r2, #1
 800aaea:	9619      	str	r6, [sp, #100]	@ 0x64
 800aaec:	7852      	ldrb	r2, [r2, #1]
 800aaee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800aaf2:	f1be 0f09 	cmp.w	lr, #9
 800aaf6:	d939      	bls.n	800ab6c <_strtod_l+0x344>
 800aaf8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800aafa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800aafe:	1a76      	subs	r6, r6, r1
 800ab00:	2e08      	cmp	r6, #8
 800ab02:	dc03      	bgt.n	800ab0c <_strtod_l+0x2e4>
 800ab04:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab06:	4588      	cmp	r8, r1
 800ab08:	bfa8      	it	ge
 800ab0a:	4688      	movge	r8, r1
 800ab0c:	f1bc 0f00 	cmp.w	ip, #0
 800ab10:	d001      	beq.n	800ab16 <_strtod_l+0x2ee>
 800ab12:	f1c8 0800 	rsb	r8, r8, #0
 800ab16:	2d00      	cmp	r5, #0
 800ab18:	d14e      	bne.n	800abb8 <_strtod_l+0x390>
 800ab1a:	9908      	ldr	r1, [sp, #32]
 800ab1c:	4308      	orrs	r0, r1
 800ab1e:	f47f aebc 	bne.w	800a89a <_strtod_l+0x72>
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f47f aed4 	bne.w	800a8d0 <_strtod_l+0xa8>
 800ab28:	2a69      	cmp	r2, #105	@ 0x69
 800ab2a:	d028      	beq.n	800ab7e <_strtod_l+0x356>
 800ab2c:	dc25      	bgt.n	800ab7a <_strtod_l+0x352>
 800ab2e:	2a49      	cmp	r2, #73	@ 0x49
 800ab30:	d025      	beq.n	800ab7e <_strtod_l+0x356>
 800ab32:	2a4e      	cmp	r2, #78	@ 0x4e
 800ab34:	f47f aecc 	bne.w	800a8d0 <_strtod_l+0xa8>
 800ab38:	499a      	ldr	r1, [pc, #616]	@ (800ada4 <_strtod_l+0x57c>)
 800ab3a:	a819      	add	r0, sp, #100	@ 0x64
 800ab3c:	f001 fd74 	bl	800c628 <__match>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	f43f aec5 	beq.w	800a8d0 <_strtod_l+0xa8>
 800ab46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	2b28      	cmp	r3, #40	@ 0x28
 800ab4c:	d12e      	bne.n	800abac <_strtod_l+0x384>
 800ab4e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ab50:	4995      	ldr	r1, [pc, #596]	@ (800ada8 <_strtod_l+0x580>)
 800ab52:	a819      	add	r0, sp, #100	@ 0x64
 800ab54:	f001 fd7c 	bl	800c650 <__hexnan>
 800ab58:	2805      	cmp	r0, #5
 800ab5a:	d127      	bne.n	800abac <_strtod_l+0x384>
 800ab5c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab5e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ab62:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ab66:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ab6a:	e696      	b.n	800a89a <_strtod_l+0x72>
 800ab6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab6e:	fb08 2101 	mla	r1, r8, r1, r2
 800ab72:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ab76:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab78:	e7b5      	b.n	800aae6 <_strtod_l+0x2be>
 800ab7a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ab7c:	e7da      	b.n	800ab34 <_strtod_l+0x30c>
 800ab7e:	498b      	ldr	r1, [pc, #556]	@ (800adac <_strtod_l+0x584>)
 800ab80:	a819      	add	r0, sp, #100	@ 0x64
 800ab82:	f001 fd51 	bl	800c628 <__match>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	f43f aea2 	beq.w	800a8d0 <_strtod_l+0xa8>
 800ab8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab8e:	a819      	add	r0, sp, #100	@ 0x64
 800ab90:	4987      	ldr	r1, [pc, #540]	@ (800adb0 <_strtod_l+0x588>)
 800ab92:	3b01      	subs	r3, #1
 800ab94:	9319      	str	r3, [sp, #100]	@ 0x64
 800ab96:	f001 fd47 	bl	800c628 <__match>
 800ab9a:	b910      	cbnz	r0, 800aba2 <_strtod_l+0x37a>
 800ab9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab9e:	3301      	adds	r3, #1
 800aba0:	9319      	str	r3, [sp, #100]	@ 0x64
 800aba2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800adc0 <_strtod_l+0x598>
 800aba6:	f04f 0a00 	mov.w	sl, #0
 800abaa:	e676      	b.n	800a89a <_strtod_l+0x72>
 800abac:	4881      	ldr	r0, [pc, #516]	@ (800adb4 <_strtod_l+0x58c>)
 800abae:	f001 fa7b 	bl	800c0a8 <nan>
 800abb2:	ec5b ab10 	vmov	sl, fp, d0
 800abb6:	e670      	b.n	800a89a <_strtod_l+0x72>
 800abb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abba:	f1b9 0f00 	cmp.w	r9, #0
 800abbe:	bf08      	it	eq
 800abc0:	46a9      	moveq	r9, r5
 800abc2:	2d10      	cmp	r5, #16
 800abc4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800abc6:	eba8 0303 	sub.w	r3, r8, r3
 800abca:	462c      	mov	r4, r5
 800abcc:	bfa8      	it	ge
 800abce:	2410      	movge	r4, #16
 800abd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800abd2:	f7f5 fc7b 	bl	80004cc <__aeabi_ui2d>
 800abd6:	2d09      	cmp	r5, #9
 800abd8:	4682      	mov	sl, r0
 800abda:	468b      	mov	fp, r1
 800abdc:	dc13      	bgt.n	800ac06 <_strtod_l+0x3de>
 800abde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f43f ae5a 	beq.w	800a89a <_strtod_l+0x72>
 800abe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abe8:	dd78      	ble.n	800acdc <_strtod_l+0x4b4>
 800abea:	2b16      	cmp	r3, #22
 800abec:	dc5f      	bgt.n	800acae <_strtod_l+0x486>
 800abee:	4972      	ldr	r1, [pc, #456]	@ (800adb8 <_strtod_l+0x590>)
 800abf0:	4652      	mov	r2, sl
 800abf2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800abf6:	465b      	mov	r3, fp
 800abf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abfc:	f7f5 fce0 	bl	80005c0 <__aeabi_dmul>
 800ac00:	4682      	mov	sl, r0
 800ac02:	468b      	mov	fp, r1
 800ac04:	e649      	b.n	800a89a <_strtod_l+0x72>
 800ac06:	4b6c      	ldr	r3, [pc, #432]	@ (800adb8 <_strtod_l+0x590>)
 800ac08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ac10:	f7f5 fcd6 	bl	80005c0 <__aeabi_dmul>
 800ac14:	4682      	mov	sl, r0
 800ac16:	468b      	mov	fp, r1
 800ac18:	4638      	mov	r0, r7
 800ac1a:	f7f5 fc57 	bl	80004cc <__aeabi_ui2d>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	460b      	mov	r3, r1
 800ac22:	4650      	mov	r0, sl
 800ac24:	4659      	mov	r1, fp
 800ac26:	f7f5 fb15 	bl	8000254 <__adddf3>
 800ac2a:	2d0f      	cmp	r5, #15
 800ac2c:	4682      	mov	sl, r0
 800ac2e:	468b      	mov	fp, r1
 800ac30:	ddd5      	ble.n	800abde <_strtod_l+0x3b6>
 800ac32:	1b2c      	subs	r4, r5, r4
 800ac34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac36:	441c      	add	r4, r3
 800ac38:	2c00      	cmp	r4, #0
 800ac3a:	f340 8093 	ble.w	800ad64 <_strtod_l+0x53c>
 800ac3e:	f014 030f 	ands.w	r3, r4, #15
 800ac42:	d00a      	beq.n	800ac5a <_strtod_l+0x432>
 800ac44:	495c      	ldr	r1, [pc, #368]	@ (800adb8 <_strtod_l+0x590>)
 800ac46:	4652      	mov	r2, sl
 800ac48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac4c:	465b      	mov	r3, fp
 800ac4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac52:	f7f5 fcb5 	bl	80005c0 <__aeabi_dmul>
 800ac56:	4682      	mov	sl, r0
 800ac58:	468b      	mov	fp, r1
 800ac5a:	f034 040f 	bics.w	r4, r4, #15
 800ac5e:	d073      	beq.n	800ad48 <_strtod_l+0x520>
 800ac60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ac64:	dd49      	ble.n	800acfa <_strtod_l+0x4d2>
 800ac66:	2400      	movs	r4, #0
 800ac68:	46a0      	mov	r8, r4
 800ac6a:	46a1      	mov	r9, r4
 800ac6c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ac6e:	2322      	movs	r3, #34	@ 0x22
 800ac70:	9a05      	ldr	r2, [sp, #20]
 800ac72:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800adc0 <_strtod_l+0x598>
 800ac76:	f04f 0a00 	mov.w	sl, #0
 800ac7a:	6013      	str	r3, [r2, #0]
 800ac7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f43f ae0b 	beq.w	800a89a <_strtod_l+0x72>
 800ac84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac86:	9805      	ldr	r0, [sp, #20]
 800ac88:	f7ff f938 	bl	8009efc <_Bfree>
 800ac8c:	4649      	mov	r1, r9
 800ac8e:	9805      	ldr	r0, [sp, #20]
 800ac90:	f7ff f934 	bl	8009efc <_Bfree>
 800ac94:	4641      	mov	r1, r8
 800ac96:	9805      	ldr	r0, [sp, #20]
 800ac98:	f7ff f930 	bl	8009efc <_Bfree>
 800ac9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac9e:	9805      	ldr	r0, [sp, #20]
 800aca0:	f7ff f92c 	bl	8009efc <_Bfree>
 800aca4:	4621      	mov	r1, r4
 800aca6:	9805      	ldr	r0, [sp, #20]
 800aca8:	f7ff f928 	bl	8009efc <_Bfree>
 800acac:	e5f5      	b.n	800a89a <_strtod_l+0x72>
 800acae:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800acb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acb4:	4293      	cmp	r3, r2
 800acb6:	dbbc      	blt.n	800ac32 <_strtod_l+0x40a>
 800acb8:	f1c5 050f 	rsb	r5, r5, #15
 800acbc:	4c3e      	ldr	r4, [pc, #248]	@ (800adb8 <_strtod_l+0x590>)
 800acbe:	4652      	mov	r2, sl
 800acc0:	465b      	mov	r3, fp
 800acc2:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800acc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acca:	f7f5 fc79 	bl	80005c0 <__aeabi_dmul>
 800acce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acd0:	1b5d      	subs	r5, r3, r5
 800acd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800acd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800acda:	e78f      	b.n	800abfc <_strtod_l+0x3d4>
 800acdc:	3316      	adds	r3, #22
 800acde:	dba8      	blt.n	800ac32 <_strtod_l+0x40a>
 800ace0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ace2:	4650      	mov	r0, sl
 800ace4:	4659      	mov	r1, fp
 800ace6:	eba3 0808 	sub.w	r8, r3, r8
 800acea:	4b33      	ldr	r3, [pc, #204]	@ (800adb8 <_strtod_l+0x590>)
 800acec:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800acf0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800acf4:	f7f5 fd8e 	bl	8000814 <__aeabi_ddiv>
 800acf8:	e782      	b.n	800ac00 <_strtod_l+0x3d8>
 800acfa:	2300      	movs	r3, #0
 800acfc:	1124      	asrs	r4, r4, #4
 800acfe:	4650      	mov	r0, sl
 800ad00:	4659      	mov	r1, fp
 800ad02:	4f2e      	ldr	r7, [pc, #184]	@ (800adbc <_strtod_l+0x594>)
 800ad04:	461e      	mov	r6, r3
 800ad06:	2c01      	cmp	r4, #1
 800ad08:	dc21      	bgt.n	800ad4e <_strtod_l+0x526>
 800ad0a:	b10b      	cbz	r3, 800ad10 <_strtod_l+0x4e8>
 800ad0c:	4682      	mov	sl, r0
 800ad0e:	468b      	mov	fp, r1
 800ad10:	492a      	ldr	r1, [pc, #168]	@ (800adbc <_strtod_l+0x594>)
 800ad12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ad16:	4652      	mov	r2, sl
 800ad18:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ad1c:	465b      	mov	r3, fp
 800ad1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad22:	f7f5 fc4d 	bl	80005c0 <__aeabi_dmul>
 800ad26:	4b26      	ldr	r3, [pc, #152]	@ (800adc0 <_strtod_l+0x598>)
 800ad28:	460a      	mov	r2, r1
 800ad2a:	4682      	mov	sl, r0
 800ad2c:	400b      	ands	r3, r1
 800ad2e:	4925      	ldr	r1, [pc, #148]	@ (800adc4 <_strtod_l+0x59c>)
 800ad30:	428b      	cmp	r3, r1
 800ad32:	d898      	bhi.n	800ac66 <_strtod_l+0x43e>
 800ad34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ad38:	428b      	cmp	r3, r1
 800ad3a:	bf86      	itte	hi
 800ad3c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800adc8 <_strtod_l+0x5a0>
 800ad40:	f04f 3aff 	movhi.w	sl, #4294967295
 800ad44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ad48:	2300      	movs	r3, #0
 800ad4a:	9308      	str	r3, [sp, #32]
 800ad4c:	e076      	b.n	800ae3c <_strtod_l+0x614>
 800ad4e:	07e2      	lsls	r2, r4, #31
 800ad50:	d504      	bpl.n	800ad5c <_strtod_l+0x534>
 800ad52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad56:	f7f5 fc33 	bl	80005c0 <__aeabi_dmul>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	3601      	adds	r6, #1
 800ad5e:	1064      	asrs	r4, r4, #1
 800ad60:	3708      	adds	r7, #8
 800ad62:	e7d0      	b.n	800ad06 <_strtod_l+0x4de>
 800ad64:	d0f0      	beq.n	800ad48 <_strtod_l+0x520>
 800ad66:	4264      	negs	r4, r4
 800ad68:	f014 020f 	ands.w	r2, r4, #15
 800ad6c:	d00a      	beq.n	800ad84 <_strtod_l+0x55c>
 800ad6e:	4b12      	ldr	r3, [pc, #72]	@ (800adb8 <_strtod_l+0x590>)
 800ad70:	4650      	mov	r0, sl
 800ad72:	4659      	mov	r1, fp
 800ad74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7c:	f7f5 fd4a 	bl	8000814 <__aeabi_ddiv>
 800ad80:	4682      	mov	sl, r0
 800ad82:	468b      	mov	fp, r1
 800ad84:	1124      	asrs	r4, r4, #4
 800ad86:	d0df      	beq.n	800ad48 <_strtod_l+0x520>
 800ad88:	2c1f      	cmp	r4, #31
 800ad8a:	dd1f      	ble.n	800adcc <_strtod_l+0x5a4>
 800ad8c:	2400      	movs	r4, #0
 800ad8e:	46a0      	mov	r8, r4
 800ad90:	46a1      	mov	r9, r4
 800ad92:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ad94:	2322      	movs	r3, #34	@ 0x22
 800ad96:	9a05      	ldr	r2, [sp, #20]
 800ad98:	f04f 0a00 	mov.w	sl, #0
 800ad9c:	f04f 0b00 	mov.w	fp, #0
 800ada0:	6013      	str	r3, [r2, #0]
 800ada2:	e76b      	b.n	800ac7c <_strtod_l+0x454>
 800ada4:	0800cfc5 	.word	0x0800cfc5
 800ada8:	0800d2a8 	.word	0x0800d2a8
 800adac:	0800cfbd 	.word	0x0800cfbd
 800adb0:	0800cff2 	.word	0x0800cff2
 800adb4:	0800d146 	.word	0x0800d146
 800adb8:	0800d1e0 	.word	0x0800d1e0
 800adbc:	0800d1b8 	.word	0x0800d1b8
 800adc0:	7ff00000 	.word	0x7ff00000
 800adc4:	7ca00000 	.word	0x7ca00000
 800adc8:	7fefffff 	.word	0x7fefffff
 800adcc:	f014 0310 	ands.w	r3, r4, #16
 800add0:	4650      	mov	r0, sl
 800add2:	4659      	mov	r1, fp
 800add4:	4ea9      	ldr	r6, [pc, #676]	@ (800b07c <_strtod_l+0x854>)
 800add6:	bf18      	it	ne
 800add8:	236a      	movne	r3, #106	@ 0x6a
 800adda:	9308      	str	r3, [sp, #32]
 800addc:	2300      	movs	r3, #0
 800adde:	07e7      	lsls	r7, r4, #31
 800ade0:	d504      	bpl.n	800adec <_strtod_l+0x5c4>
 800ade2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ade6:	f7f5 fbeb 	bl	80005c0 <__aeabi_dmul>
 800adea:	2301      	movs	r3, #1
 800adec:	1064      	asrs	r4, r4, #1
 800adee:	f106 0608 	add.w	r6, r6, #8
 800adf2:	d1f4      	bne.n	800adde <_strtod_l+0x5b6>
 800adf4:	b10b      	cbz	r3, 800adfa <_strtod_l+0x5d2>
 800adf6:	4682      	mov	sl, r0
 800adf8:	468b      	mov	fp, r1
 800adfa:	9b08      	ldr	r3, [sp, #32]
 800adfc:	b1b3      	cbz	r3, 800ae2c <_strtod_l+0x604>
 800adfe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ae02:	4659      	mov	r1, fp
 800ae04:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	dd0f      	ble.n	800ae2c <_strtod_l+0x604>
 800ae0c:	2b1f      	cmp	r3, #31
 800ae0e:	dd56      	ble.n	800aebe <_strtod_l+0x696>
 800ae10:	2b34      	cmp	r3, #52	@ 0x34
 800ae12:	f04f 0a00 	mov.w	sl, #0
 800ae16:	bfdb      	ittet	le
 800ae18:	f04f 33ff 	movle.w	r3, #4294967295
 800ae1c:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ae20:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ae24:	4093      	lslle	r3, r2
 800ae26:	bfd8      	it	le
 800ae28:	ea03 0b01 	andle.w	fp, r3, r1
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	2300      	movs	r3, #0
 800ae30:	4650      	mov	r0, sl
 800ae32:	4659      	mov	r1, fp
 800ae34:	f7f5 fe2c 	bl	8000a90 <__aeabi_dcmpeq>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d1a7      	bne.n	800ad8c <_strtod_l+0x564>
 800ae3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae3e:	464a      	mov	r2, r9
 800ae40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ae42:	9300      	str	r3, [sp, #0]
 800ae44:	462b      	mov	r3, r5
 800ae46:	9805      	ldr	r0, [sp, #20]
 800ae48:	f7ff f8c2 	bl	8009fd0 <__s2b>
 800ae4c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	f43f af09 	beq.w	800ac66 <_strtod_l+0x43e>
 800ae54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae56:	2400      	movs	r4, #0
 800ae58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae5a:	2a00      	cmp	r2, #0
 800ae5c:	eba3 0308 	sub.w	r3, r3, r8
 800ae60:	46a0      	mov	r8, r4
 800ae62:	bfa8      	it	ge
 800ae64:	2300      	movge	r3, #0
 800ae66:	9312      	str	r3, [sp, #72]	@ 0x48
 800ae68:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ae6c:	9316      	str	r3, [sp, #88]	@ 0x58
 800ae6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae70:	9805      	ldr	r0, [sp, #20]
 800ae72:	6859      	ldr	r1, [r3, #4]
 800ae74:	f7ff f802 	bl	8009e7c <_Balloc>
 800ae78:	4681      	mov	r9, r0
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	f43f aef7 	beq.w	800ac6e <_strtod_l+0x446>
 800ae80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae82:	300c      	adds	r0, #12
 800ae84:	691a      	ldr	r2, [r3, #16]
 800ae86:	f103 010c 	add.w	r1, r3, #12
 800ae8a:	3202      	adds	r2, #2
 800ae8c:	0092      	lsls	r2, r2, #2
 800ae8e:	f001 f8fd 	bl	800c08c <memcpy>
 800ae92:	aa1c      	add	r2, sp, #112	@ 0x70
 800ae94:	a91b      	add	r1, sp, #108	@ 0x6c
 800ae96:	9805      	ldr	r0, [sp, #20]
 800ae98:	ec4b ab10 	vmov	d0, sl, fp
 800ae9c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800aea0:	f7ff fbd4 	bl	800a64c <__d2b>
 800aea4:	901a      	str	r0, [sp, #104]	@ 0x68
 800aea6:	2800      	cmp	r0, #0
 800aea8:	f43f aee1 	beq.w	800ac6e <_strtod_l+0x446>
 800aeac:	2101      	movs	r1, #1
 800aeae:	9805      	ldr	r0, [sp, #20]
 800aeb0:	f7ff f924 	bl	800a0fc <__i2b>
 800aeb4:	4680      	mov	r8, r0
 800aeb6:	b948      	cbnz	r0, 800aecc <_strtod_l+0x6a4>
 800aeb8:	f04f 0800 	mov.w	r8, #0
 800aebc:	e6d7      	b.n	800ac6e <_strtod_l+0x446>
 800aebe:	f04f 32ff 	mov.w	r2, #4294967295
 800aec2:	fa02 f303 	lsl.w	r3, r2, r3
 800aec6:	ea03 0a0a 	and.w	sl, r3, sl
 800aeca:	e7af      	b.n	800ae2c <_strtod_l+0x604>
 800aecc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800aece:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800aed0:	2d00      	cmp	r5, #0
 800aed2:	bfa9      	itett	ge
 800aed4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800aed6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800aed8:	18ef      	addge	r7, r5, r3
 800aeda:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800aedc:	bfb8      	it	lt
 800aede:	1b5e      	sublt	r6, r3, r5
 800aee0:	9b08      	ldr	r3, [sp, #32]
 800aee2:	bfb8      	it	lt
 800aee4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800aee6:	1aed      	subs	r5, r5, r3
 800aee8:	4b65      	ldr	r3, [pc, #404]	@ (800b080 <_strtod_l+0x858>)
 800aeea:	4415      	add	r5, r2
 800aeec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aef0:	3d01      	subs	r5, #1
 800aef2:	429d      	cmp	r5, r3
 800aef4:	da4f      	bge.n	800af96 <_strtod_l+0x76e>
 800aef6:	1b5b      	subs	r3, r3, r5
 800aef8:	2101      	movs	r1, #1
 800aefa:	2b1f      	cmp	r3, #31
 800aefc:	eba2 0203 	sub.w	r2, r2, r3
 800af00:	dc3d      	bgt.n	800af7e <_strtod_l+0x756>
 800af02:	fa01 f303 	lsl.w	r3, r1, r3
 800af06:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af08:	2300      	movs	r3, #0
 800af0a:	9310      	str	r3, [sp, #64]	@ 0x40
 800af0c:	18bd      	adds	r5, r7, r2
 800af0e:	9b08      	ldr	r3, [sp, #32]
 800af10:	4416      	add	r6, r2
 800af12:	42af      	cmp	r7, r5
 800af14:	441e      	add	r6, r3
 800af16:	463b      	mov	r3, r7
 800af18:	bfa8      	it	ge
 800af1a:	462b      	movge	r3, r5
 800af1c:	42b3      	cmp	r3, r6
 800af1e:	bfa8      	it	ge
 800af20:	4633      	movge	r3, r6
 800af22:	2b00      	cmp	r3, #0
 800af24:	bfc2      	ittt	gt
 800af26:	1aed      	subgt	r5, r5, r3
 800af28:	1af6      	subgt	r6, r6, r3
 800af2a:	1aff      	subgt	r7, r7, r3
 800af2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af2e:	2b00      	cmp	r3, #0
 800af30:	dd16      	ble.n	800af60 <_strtod_l+0x738>
 800af32:	4641      	mov	r1, r8
 800af34:	461a      	mov	r2, r3
 800af36:	9805      	ldr	r0, [sp, #20]
 800af38:	f7ff f99a 	bl	800a270 <__pow5mult>
 800af3c:	4680      	mov	r8, r0
 800af3e:	2800      	cmp	r0, #0
 800af40:	d0ba      	beq.n	800aeb8 <_strtod_l+0x690>
 800af42:	4601      	mov	r1, r0
 800af44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800af46:	9805      	ldr	r0, [sp, #20]
 800af48:	f7ff f8ee 	bl	800a128 <__multiply>
 800af4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800af4e:	2800      	cmp	r0, #0
 800af50:	f43f ae8d 	beq.w	800ac6e <_strtod_l+0x446>
 800af54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af56:	9805      	ldr	r0, [sp, #20]
 800af58:	f7fe ffd0 	bl	8009efc <_Bfree>
 800af5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af5e:	931a      	str	r3, [sp, #104]	@ 0x68
 800af60:	2d00      	cmp	r5, #0
 800af62:	dc1d      	bgt.n	800afa0 <_strtod_l+0x778>
 800af64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af66:	2b00      	cmp	r3, #0
 800af68:	dd23      	ble.n	800afb2 <_strtod_l+0x78a>
 800af6a:	4649      	mov	r1, r9
 800af6c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800af6e:	9805      	ldr	r0, [sp, #20]
 800af70:	f7ff f97e 	bl	800a270 <__pow5mult>
 800af74:	4681      	mov	r9, r0
 800af76:	b9e0      	cbnz	r0, 800afb2 <_strtod_l+0x78a>
 800af78:	f04f 0900 	mov.w	r9, #0
 800af7c:	e677      	b.n	800ac6e <_strtod_l+0x446>
 800af7e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800af82:	9113      	str	r1, [sp, #76]	@ 0x4c
 800af84:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800af88:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800af8c:	35e2      	adds	r5, #226	@ 0xe2
 800af8e:	fa01 f305 	lsl.w	r3, r1, r5
 800af92:	9310      	str	r3, [sp, #64]	@ 0x40
 800af94:	e7ba      	b.n	800af0c <_strtod_l+0x6e4>
 800af96:	2300      	movs	r3, #0
 800af98:	9310      	str	r3, [sp, #64]	@ 0x40
 800af9a:	2301      	movs	r3, #1
 800af9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af9e:	e7b5      	b.n	800af0c <_strtod_l+0x6e4>
 800afa0:	462a      	mov	r2, r5
 800afa2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afa4:	9805      	ldr	r0, [sp, #20]
 800afa6:	f7ff f9bd 	bl	800a324 <__lshift>
 800afaa:	901a      	str	r0, [sp, #104]	@ 0x68
 800afac:	2800      	cmp	r0, #0
 800afae:	d1d9      	bne.n	800af64 <_strtod_l+0x73c>
 800afb0:	e65d      	b.n	800ac6e <_strtod_l+0x446>
 800afb2:	2e00      	cmp	r6, #0
 800afb4:	dd07      	ble.n	800afc6 <_strtod_l+0x79e>
 800afb6:	4649      	mov	r1, r9
 800afb8:	4632      	mov	r2, r6
 800afba:	9805      	ldr	r0, [sp, #20]
 800afbc:	f7ff f9b2 	bl	800a324 <__lshift>
 800afc0:	4681      	mov	r9, r0
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d0d8      	beq.n	800af78 <_strtod_l+0x750>
 800afc6:	2f00      	cmp	r7, #0
 800afc8:	dd08      	ble.n	800afdc <_strtod_l+0x7b4>
 800afca:	4641      	mov	r1, r8
 800afcc:	463a      	mov	r2, r7
 800afce:	9805      	ldr	r0, [sp, #20]
 800afd0:	f7ff f9a8 	bl	800a324 <__lshift>
 800afd4:	4680      	mov	r8, r0
 800afd6:	2800      	cmp	r0, #0
 800afd8:	f43f ae49 	beq.w	800ac6e <_strtod_l+0x446>
 800afdc:	464a      	mov	r2, r9
 800afde:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afe0:	9805      	ldr	r0, [sp, #20]
 800afe2:	f7ff fa27 	bl	800a434 <__mdiff>
 800afe6:	4604      	mov	r4, r0
 800afe8:	2800      	cmp	r0, #0
 800afea:	f43f ae40 	beq.w	800ac6e <_strtod_l+0x446>
 800afee:	68c3      	ldr	r3, [r0, #12]
 800aff0:	4641      	mov	r1, r8
 800aff2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aff4:	2300      	movs	r3, #0
 800aff6:	60c3      	str	r3, [r0, #12]
 800aff8:	f7ff fa00 	bl	800a3fc <__mcmp>
 800affc:	2800      	cmp	r0, #0
 800affe:	da45      	bge.n	800b08c <_strtod_l+0x864>
 800b000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b002:	ea53 030a 	orrs.w	r3, r3, sl
 800b006:	d16b      	bne.n	800b0e0 <_strtod_l+0x8b8>
 800b008:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d167      	bne.n	800b0e0 <_strtod_l+0x8b8>
 800b010:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b014:	0d1b      	lsrs	r3, r3, #20
 800b016:	051b      	lsls	r3, r3, #20
 800b018:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b01c:	d960      	bls.n	800b0e0 <_strtod_l+0x8b8>
 800b01e:	6963      	ldr	r3, [r4, #20]
 800b020:	b913      	cbnz	r3, 800b028 <_strtod_l+0x800>
 800b022:	6923      	ldr	r3, [r4, #16]
 800b024:	2b01      	cmp	r3, #1
 800b026:	dd5b      	ble.n	800b0e0 <_strtod_l+0x8b8>
 800b028:	4621      	mov	r1, r4
 800b02a:	2201      	movs	r2, #1
 800b02c:	9805      	ldr	r0, [sp, #20]
 800b02e:	f7ff f979 	bl	800a324 <__lshift>
 800b032:	4641      	mov	r1, r8
 800b034:	4604      	mov	r4, r0
 800b036:	f7ff f9e1 	bl	800a3fc <__mcmp>
 800b03a:	2800      	cmp	r0, #0
 800b03c:	dd50      	ble.n	800b0e0 <_strtod_l+0x8b8>
 800b03e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b042:	9a08      	ldr	r2, [sp, #32]
 800b044:	0d1b      	lsrs	r3, r3, #20
 800b046:	051b      	lsls	r3, r3, #20
 800b048:	2a00      	cmp	r2, #0
 800b04a:	d06a      	beq.n	800b122 <_strtod_l+0x8fa>
 800b04c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b050:	d867      	bhi.n	800b122 <_strtod_l+0x8fa>
 800b052:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b056:	f67f ae9d 	bls.w	800ad94 <_strtod_l+0x56c>
 800b05a:	4b0a      	ldr	r3, [pc, #40]	@ (800b084 <_strtod_l+0x85c>)
 800b05c:	4650      	mov	r0, sl
 800b05e:	4659      	mov	r1, fp
 800b060:	2200      	movs	r2, #0
 800b062:	f7f5 faad 	bl	80005c0 <__aeabi_dmul>
 800b066:	4b08      	ldr	r3, [pc, #32]	@ (800b088 <_strtod_l+0x860>)
 800b068:	4682      	mov	sl, r0
 800b06a:	468b      	mov	fp, r1
 800b06c:	400b      	ands	r3, r1
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f47f ae08 	bne.w	800ac84 <_strtod_l+0x45c>
 800b074:	2322      	movs	r3, #34	@ 0x22
 800b076:	9a05      	ldr	r2, [sp, #20]
 800b078:	6013      	str	r3, [r2, #0]
 800b07a:	e603      	b.n	800ac84 <_strtod_l+0x45c>
 800b07c:	0800d2d0 	.word	0x0800d2d0
 800b080:	fffffc02 	.word	0xfffffc02
 800b084:	39500000 	.word	0x39500000
 800b088:	7ff00000 	.word	0x7ff00000
 800b08c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b090:	d165      	bne.n	800b15e <_strtod_l+0x936>
 800b092:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b098:	b35a      	cbz	r2, 800b0f2 <_strtod_l+0x8ca>
 800b09a:	4a9f      	ldr	r2, [pc, #636]	@ (800b318 <_strtod_l+0xaf0>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d12b      	bne.n	800b0f8 <_strtod_l+0x8d0>
 800b0a0:	9b08      	ldr	r3, [sp, #32]
 800b0a2:	4651      	mov	r1, sl
 800b0a4:	b303      	cbz	r3, 800b0e8 <_strtod_l+0x8c0>
 800b0a6:	465a      	mov	r2, fp
 800b0a8:	4b9c      	ldr	r3, [pc, #624]	@ (800b31c <_strtod_l+0xaf4>)
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b0b0:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b0b4:	d81b      	bhi.n	800b0ee <_strtod_l+0x8c6>
 800b0b6:	0d1b      	lsrs	r3, r3, #20
 800b0b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c0:	4299      	cmp	r1, r3
 800b0c2:	d119      	bne.n	800b0f8 <_strtod_l+0x8d0>
 800b0c4:	4b96      	ldr	r3, [pc, #600]	@ (800b320 <_strtod_l+0xaf8>)
 800b0c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d102      	bne.n	800b0d2 <_strtod_l+0x8aa>
 800b0cc:	3101      	adds	r1, #1
 800b0ce:	f43f adce 	beq.w	800ac6e <_strtod_l+0x446>
 800b0d2:	4b92      	ldr	r3, [pc, #584]	@ (800b31c <_strtod_l+0xaf4>)
 800b0d4:	f04f 0a00 	mov.w	sl, #0
 800b0d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0da:	401a      	ands	r2, r3
 800b0dc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b0e0:	9b08      	ldr	r3, [sp, #32]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1b9      	bne.n	800b05a <_strtod_l+0x832>
 800b0e6:	e5cd      	b.n	800ac84 <_strtod_l+0x45c>
 800b0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ec:	e7e8      	b.n	800b0c0 <_strtod_l+0x898>
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	e7e6      	b.n	800b0c0 <_strtod_l+0x898>
 800b0f2:	ea53 030a 	orrs.w	r3, r3, sl
 800b0f6:	d0a2      	beq.n	800b03e <_strtod_l+0x816>
 800b0f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b0fa:	b1db      	cbz	r3, 800b134 <_strtod_l+0x90c>
 800b0fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0fe:	4213      	tst	r3, r2
 800b100:	d0ee      	beq.n	800b0e0 <_strtod_l+0x8b8>
 800b102:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b104:	4650      	mov	r0, sl
 800b106:	9a08      	ldr	r2, [sp, #32]
 800b108:	4659      	mov	r1, fp
 800b10a:	b1bb      	cbz	r3, 800b13c <_strtod_l+0x914>
 800b10c:	f7ff fb6c 	bl	800a7e8 <sulp>
 800b110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b114:	ec53 2b10 	vmov	r2, r3, d0
 800b118:	f7f5 f89c 	bl	8000254 <__adddf3>
 800b11c:	4682      	mov	sl, r0
 800b11e:	468b      	mov	fp, r1
 800b120:	e7de      	b.n	800b0e0 <_strtod_l+0x8b8>
 800b122:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b126:	f04f 3aff 	mov.w	sl, #4294967295
 800b12a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b12e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b132:	e7d5      	b.n	800b0e0 <_strtod_l+0x8b8>
 800b134:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b136:	ea13 0f0a 	tst.w	r3, sl
 800b13a:	e7e1      	b.n	800b100 <_strtod_l+0x8d8>
 800b13c:	f7ff fb54 	bl	800a7e8 <sulp>
 800b140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b144:	ec53 2b10 	vmov	r2, r3, d0
 800b148:	f7f5 f882 	bl	8000250 <__aeabi_dsub>
 800b14c:	2200      	movs	r2, #0
 800b14e:	2300      	movs	r3, #0
 800b150:	4682      	mov	sl, r0
 800b152:	468b      	mov	fp, r1
 800b154:	f7f5 fc9c 	bl	8000a90 <__aeabi_dcmpeq>
 800b158:	2800      	cmp	r0, #0
 800b15a:	d0c1      	beq.n	800b0e0 <_strtod_l+0x8b8>
 800b15c:	e61a      	b.n	800ad94 <_strtod_l+0x56c>
 800b15e:	4641      	mov	r1, r8
 800b160:	4620      	mov	r0, r4
 800b162:	f7ff facb 	bl	800a6fc <__ratio>
 800b166:	2200      	movs	r2, #0
 800b168:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b16c:	ec57 6b10 	vmov	r6, r7, d0
 800b170:	4630      	mov	r0, r6
 800b172:	4639      	mov	r1, r7
 800b174:	f7f5 fca0 	bl	8000ab8 <__aeabi_dcmple>
 800b178:	2800      	cmp	r0, #0
 800b17a:	d06f      	beq.n	800b25c <_strtod_l+0xa34>
 800b17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d17a      	bne.n	800b278 <_strtod_l+0xa50>
 800b182:	f1ba 0f00 	cmp.w	sl, #0
 800b186:	d158      	bne.n	800b23a <_strtod_l+0xa12>
 800b188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b18a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d15a      	bne.n	800b248 <_strtod_l+0xa20>
 800b192:	2200      	movs	r2, #0
 800b194:	4b63      	ldr	r3, [pc, #396]	@ (800b324 <_strtod_l+0xafc>)
 800b196:	4630      	mov	r0, r6
 800b198:	4639      	mov	r1, r7
 800b19a:	f7f5 fc83 	bl	8000aa4 <__aeabi_dcmplt>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d159      	bne.n	800b256 <_strtod_l+0xa2e>
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	4639      	mov	r1, r7
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	4b5f      	ldr	r3, [pc, #380]	@ (800b328 <_strtod_l+0xb00>)
 800b1aa:	f7f5 fa09 	bl	80005c0 <__aeabi_dmul>
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	460f      	mov	r7, r1
 800b1b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b1b6:	9606      	str	r6, [sp, #24]
 800b1b8:	9307      	str	r3, [sp, #28]
 800b1ba:	4d58      	ldr	r5, [pc, #352]	@ (800b31c <_strtod_l+0xaf4>)
 800b1bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b1c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1c6:	401d      	ands	r5, r3
 800b1c8:	4b58      	ldr	r3, [pc, #352]	@ (800b32c <_strtod_l+0xb04>)
 800b1ca:	429d      	cmp	r5, r3
 800b1cc:	f040 80b2 	bne.w	800b334 <_strtod_l+0xb0c>
 800b1d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b1d6:	ec4b ab10 	vmov	d0, sl, fp
 800b1da:	f7ff f9c3 	bl	800a564 <__ulp>
 800b1de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1e2:	ec51 0b10 	vmov	r0, r1, d0
 800b1e6:	f7f5 f9eb 	bl	80005c0 <__aeabi_dmul>
 800b1ea:	4652      	mov	r2, sl
 800b1ec:	465b      	mov	r3, fp
 800b1ee:	f7f5 f831 	bl	8000254 <__adddf3>
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	4949      	ldr	r1, [pc, #292]	@ (800b31c <_strtod_l+0xaf4>)
 800b1f6:	4682      	mov	sl, r0
 800b1f8:	4a4d      	ldr	r2, [pc, #308]	@ (800b330 <_strtod_l+0xb08>)
 800b1fa:	4019      	ands	r1, r3
 800b1fc:	4291      	cmp	r1, r2
 800b1fe:	d942      	bls.n	800b286 <_strtod_l+0xa5e>
 800b200:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b202:	4b47      	ldr	r3, [pc, #284]	@ (800b320 <_strtod_l+0xaf8>)
 800b204:	429a      	cmp	r2, r3
 800b206:	d103      	bne.n	800b210 <_strtod_l+0x9e8>
 800b208:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b20a:	3301      	adds	r3, #1
 800b20c:	f43f ad2f 	beq.w	800ac6e <_strtod_l+0x446>
 800b210:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b320 <_strtod_l+0xaf8>
 800b214:	f04f 3aff 	mov.w	sl, #4294967295
 800b218:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b21a:	9805      	ldr	r0, [sp, #20]
 800b21c:	f7fe fe6e 	bl	8009efc <_Bfree>
 800b220:	4649      	mov	r1, r9
 800b222:	9805      	ldr	r0, [sp, #20]
 800b224:	f7fe fe6a 	bl	8009efc <_Bfree>
 800b228:	4641      	mov	r1, r8
 800b22a:	9805      	ldr	r0, [sp, #20]
 800b22c:	f7fe fe66 	bl	8009efc <_Bfree>
 800b230:	4621      	mov	r1, r4
 800b232:	9805      	ldr	r0, [sp, #20]
 800b234:	f7fe fe62 	bl	8009efc <_Bfree>
 800b238:	e619      	b.n	800ae6e <_strtod_l+0x646>
 800b23a:	f1ba 0f01 	cmp.w	sl, #1
 800b23e:	d103      	bne.n	800b248 <_strtod_l+0xa20>
 800b240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b242:	2b00      	cmp	r3, #0
 800b244:	f43f ada6 	beq.w	800ad94 <_strtod_l+0x56c>
 800b248:	2600      	movs	r6, #0
 800b24a:	4f36      	ldr	r7, [pc, #216]	@ (800b324 <_strtod_l+0xafc>)
 800b24c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800b2f8 <_strtod_l+0xad0>
 800b250:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b254:	e7b1      	b.n	800b1ba <_strtod_l+0x992>
 800b256:	2600      	movs	r6, #0
 800b258:	4f33      	ldr	r7, [pc, #204]	@ (800b328 <_strtod_l+0xb00>)
 800b25a:	e7aa      	b.n	800b1b2 <_strtod_l+0x98a>
 800b25c:	4b32      	ldr	r3, [pc, #200]	@ (800b328 <_strtod_l+0xb00>)
 800b25e:	4630      	mov	r0, r6
 800b260:	4639      	mov	r1, r7
 800b262:	2200      	movs	r2, #0
 800b264:	f7f5 f9ac 	bl	80005c0 <__aeabi_dmul>
 800b268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b26a:	4606      	mov	r6, r0
 800b26c:	460f      	mov	r7, r1
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d09f      	beq.n	800b1b2 <_strtod_l+0x98a>
 800b272:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b276:	e7a0      	b.n	800b1ba <_strtod_l+0x992>
 800b278:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b300 <_strtod_l+0xad8>
 800b27c:	ec57 6b17 	vmov	r6, r7, d7
 800b280:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b284:	e799      	b.n	800b1ba <_strtod_l+0x992>
 800b286:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b28a:	9b08      	ldr	r3, [sp, #32]
 800b28c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1c1      	bne.n	800b218 <_strtod_l+0x9f0>
 800b294:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b298:	0d1b      	lsrs	r3, r3, #20
 800b29a:	051b      	lsls	r3, r3, #20
 800b29c:	429d      	cmp	r5, r3
 800b29e:	d1bb      	bne.n	800b218 <_strtod_l+0x9f0>
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	4639      	mov	r1, r7
 800b2a4:	f7f5 fcec 	bl	8000c80 <__aeabi_d2lz>
 800b2a8:	f7f5 f95c 	bl	8000564 <__aeabi_l2d>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	4639      	mov	r1, r7
 800b2b4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b2b8:	f7f4 ffca 	bl	8000250 <__aeabi_dsub>
 800b2bc:	460b      	mov	r3, r1
 800b2be:	4602      	mov	r2, r0
 800b2c0:	ea46 060a 	orr.w	r6, r6, sl
 800b2c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b2c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2ca:	431e      	orrs	r6, r3
 800b2cc:	d06f      	beq.n	800b3ae <_strtod_l+0xb86>
 800b2ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800b308 <_strtod_l+0xae0>)
 800b2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d4:	f7f5 fbe6 	bl	8000aa4 <__aeabi_dcmplt>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	f47f acd3 	bne.w	800ac84 <_strtod_l+0x45c>
 800b2de:	a30c      	add	r3, pc, #48	@ (adr r3, 800b310 <_strtod_l+0xae8>)
 800b2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2e8:	f7f5 fbfa 	bl	8000ae0 <__aeabi_dcmpgt>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d093      	beq.n	800b218 <_strtod_l+0x9f0>
 800b2f0:	e4c8      	b.n	800ac84 <_strtod_l+0x45c>
 800b2f2:	bf00      	nop
 800b2f4:	f3af 8000 	nop.w
 800b2f8:	00000000 	.word	0x00000000
 800b2fc:	bff00000 	.word	0xbff00000
 800b300:	00000000 	.word	0x00000000
 800b304:	3ff00000 	.word	0x3ff00000
 800b308:	94a03595 	.word	0x94a03595
 800b30c:	3fdfffff 	.word	0x3fdfffff
 800b310:	35afe535 	.word	0x35afe535
 800b314:	3fe00000 	.word	0x3fe00000
 800b318:	000fffff 	.word	0x000fffff
 800b31c:	7ff00000 	.word	0x7ff00000
 800b320:	7fefffff 	.word	0x7fefffff
 800b324:	3ff00000 	.word	0x3ff00000
 800b328:	3fe00000 	.word	0x3fe00000
 800b32c:	7fe00000 	.word	0x7fe00000
 800b330:	7c9fffff 	.word	0x7c9fffff
 800b334:	9b08      	ldr	r3, [sp, #32]
 800b336:	b323      	cbz	r3, 800b382 <_strtod_l+0xb5a>
 800b338:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b33c:	d821      	bhi.n	800b382 <_strtod_l+0xb5a>
 800b33e:	4630      	mov	r0, r6
 800b340:	4639      	mov	r1, r7
 800b342:	a327      	add	r3, pc, #156	@ (adr r3, 800b3e0 <_strtod_l+0xbb8>)
 800b344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b348:	f7f5 fbb6 	bl	8000ab8 <__aeabi_dcmple>
 800b34c:	b1a0      	cbz	r0, 800b378 <_strtod_l+0xb50>
 800b34e:	4639      	mov	r1, r7
 800b350:	4630      	mov	r0, r6
 800b352:	f7f5 fc0d 	bl	8000b70 <__aeabi_d2uiz>
 800b356:	2801      	cmp	r0, #1
 800b358:	bf38      	it	cc
 800b35a:	2001      	movcc	r0, #1
 800b35c:	f7f5 f8b6 	bl	80004cc <__aeabi_ui2d>
 800b360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b362:	4606      	mov	r6, r0
 800b364:	460f      	mov	r7, r1
 800b366:	b9fb      	cbnz	r3, 800b3a8 <_strtod_l+0xb80>
 800b368:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b36c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b36e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b370:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b374:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b378:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b37a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b37e:	1b5b      	subs	r3, r3, r5
 800b380:	9311      	str	r3, [sp, #68]	@ 0x44
 800b382:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b386:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b38a:	f7ff f8eb 	bl	800a564 <__ulp>
 800b38e:	4650      	mov	r0, sl
 800b390:	4659      	mov	r1, fp
 800b392:	ec53 2b10 	vmov	r2, r3, d0
 800b396:	f7f5 f913 	bl	80005c0 <__aeabi_dmul>
 800b39a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b39e:	f7f4 ff59 	bl	8000254 <__adddf3>
 800b3a2:	4682      	mov	sl, r0
 800b3a4:	468b      	mov	fp, r1
 800b3a6:	e770      	b.n	800b28a <_strtod_l+0xa62>
 800b3a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b3ac:	e7e0      	b.n	800b370 <_strtod_l+0xb48>
 800b3ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800b3e8 <_strtod_l+0xbc0>)
 800b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b4:	f7f5 fb76 	bl	8000aa4 <__aeabi_dcmplt>
 800b3b8:	e798      	b.n	800b2ec <_strtod_l+0xac4>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	930e      	str	r3, [sp, #56]	@ 0x38
 800b3be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3c0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b3c2:	6013      	str	r3, [r2, #0]
 800b3c4:	f7ff ba6d 	b.w	800a8a2 <_strtod_l+0x7a>
 800b3c8:	2a65      	cmp	r2, #101	@ 0x65
 800b3ca:	f43f ab67 	beq.w	800aa9c <_strtod_l+0x274>
 800b3ce:	2a45      	cmp	r2, #69	@ 0x45
 800b3d0:	f43f ab64 	beq.w	800aa9c <_strtod_l+0x274>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	f7ff bba0 	b.w	800ab1a <_strtod_l+0x2f2>
 800b3da:	bf00      	nop
 800b3dc:	f3af 8000 	nop.w
 800b3e0:	ffc00000 	.word	0xffc00000
 800b3e4:	41dfffff 	.word	0x41dfffff
 800b3e8:	94a03595 	.word	0x94a03595
 800b3ec:	3fcfffff 	.word	0x3fcfffff

0800b3f0 <_strtod_r>:
 800b3f0:	4b01      	ldr	r3, [pc, #4]	@ (800b3f8 <_strtod_r+0x8>)
 800b3f2:	f7ff ba19 	b.w	800a828 <_strtod_l>
 800b3f6:	bf00      	nop
 800b3f8:	20000068 	.word	0x20000068

0800b3fc <_strtol_l.isra.0>:
 800b3fc:	2b24      	cmp	r3, #36	@ 0x24
 800b3fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b402:	4686      	mov	lr, r0
 800b404:	4690      	mov	r8, r2
 800b406:	d801      	bhi.n	800b40c <_strtol_l.isra.0+0x10>
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d106      	bne.n	800b41a <_strtol_l.isra.0+0x1e>
 800b40c:	f7fd fd92 	bl	8008f34 <__errno>
 800b410:	2316      	movs	r3, #22
 800b412:	6003      	str	r3, [r0, #0]
 800b414:	2000      	movs	r0, #0
 800b416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b41a:	460d      	mov	r5, r1
 800b41c:	4833      	ldr	r0, [pc, #204]	@ (800b4ec <_strtol_l.isra.0+0xf0>)
 800b41e:	462a      	mov	r2, r5
 800b420:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b424:	5d06      	ldrb	r6, [r0, r4]
 800b426:	f016 0608 	ands.w	r6, r6, #8
 800b42a:	d1f8      	bne.n	800b41e <_strtol_l.isra.0+0x22>
 800b42c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b42e:	d110      	bne.n	800b452 <_strtol_l.isra.0+0x56>
 800b430:	782c      	ldrb	r4, [r5, #0]
 800b432:	2601      	movs	r6, #1
 800b434:	1c95      	adds	r5, r2, #2
 800b436:	f033 0210 	bics.w	r2, r3, #16
 800b43a:	d115      	bne.n	800b468 <_strtol_l.isra.0+0x6c>
 800b43c:	2c30      	cmp	r4, #48	@ 0x30
 800b43e:	d10d      	bne.n	800b45c <_strtol_l.isra.0+0x60>
 800b440:	782a      	ldrb	r2, [r5, #0]
 800b442:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b446:	2a58      	cmp	r2, #88	@ 0x58
 800b448:	d108      	bne.n	800b45c <_strtol_l.isra.0+0x60>
 800b44a:	786c      	ldrb	r4, [r5, #1]
 800b44c:	3502      	adds	r5, #2
 800b44e:	2310      	movs	r3, #16
 800b450:	e00a      	b.n	800b468 <_strtol_l.isra.0+0x6c>
 800b452:	2c2b      	cmp	r4, #43	@ 0x2b
 800b454:	bf04      	itt	eq
 800b456:	782c      	ldrbeq	r4, [r5, #0]
 800b458:	1c95      	addeq	r5, r2, #2
 800b45a:	e7ec      	b.n	800b436 <_strtol_l.isra.0+0x3a>
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1f6      	bne.n	800b44e <_strtol_l.isra.0+0x52>
 800b460:	2c30      	cmp	r4, #48	@ 0x30
 800b462:	bf14      	ite	ne
 800b464:	230a      	movne	r3, #10
 800b466:	2308      	moveq	r3, #8
 800b468:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b46c:	2200      	movs	r2, #0
 800b46e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b472:	4610      	mov	r0, r2
 800b474:	fbbc f9f3 	udiv	r9, ip, r3
 800b478:	fb03 ca19 	mls	sl, r3, r9, ip
 800b47c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b480:	2f09      	cmp	r7, #9
 800b482:	d80f      	bhi.n	800b4a4 <_strtol_l.isra.0+0xa8>
 800b484:	463c      	mov	r4, r7
 800b486:	42a3      	cmp	r3, r4
 800b488:	dd1b      	ble.n	800b4c2 <_strtol_l.isra.0+0xc6>
 800b48a:	1c57      	adds	r7, r2, #1
 800b48c:	d007      	beq.n	800b49e <_strtol_l.isra.0+0xa2>
 800b48e:	4581      	cmp	r9, r0
 800b490:	d314      	bcc.n	800b4bc <_strtol_l.isra.0+0xc0>
 800b492:	d101      	bne.n	800b498 <_strtol_l.isra.0+0x9c>
 800b494:	45a2      	cmp	sl, r4
 800b496:	db11      	blt.n	800b4bc <_strtol_l.isra.0+0xc0>
 800b498:	fb00 4003 	mla	r0, r0, r3, r4
 800b49c:	2201      	movs	r2, #1
 800b49e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4a2:	e7eb      	b.n	800b47c <_strtol_l.isra.0+0x80>
 800b4a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b4a8:	2f19      	cmp	r7, #25
 800b4aa:	d801      	bhi.n	800b4b0 <_strtol_l.isra.0+0xb4>
 800b4ac:	3c37      	subs	r4, #55	@ 0x37
 800b4ae:	e7ea      	b.n	800b486 <_strtol_l.isra.0+0x8a>
 800b4b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b4b4:	2f19      	cmp	r7, #25
 800b4b6:	d804      	bhi.n	800b4c2 <_strtol_l.isra.0+0xc6>
 800b4b8:	3c57      	subs	r4, #87	@ 0x57
 800b4ba:	e7e4      	b.n	800b486 <_strtol_l.isra.0+0x8a>
 800b4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c0:	e7ed      	b.n	800b49e <_strtol_l.isra.0+0xa2>
 800b4c2:	1c53      	adds	r3, r2, #1
 800b4c4:	d108      	bne.n	800b4d8 <_strtol_l.isra.0+0xdc>
 800b4c6:	2322      	movs	r3, #34	@ 0x22
 800b4c8:	4660      	mov	r0, ip
 800b4ca:	f8ce 3000 	str.w	r3, [lr]
 800b4ce:	f1b8 0f00 	cmp.w	r8, #0
 800b4d2:	d0a0      	beq.n	800b416 <_strtol_l.isra.0+0x1a>
 800b4d4:	1e69      	subs	r1, r5, #1
 800b4d6:	e006      	b.n	800b4e6 <_strtol_l.isra.0+0xea>
 800b4d8:	b106      	cbz	r6, 800b4dc <_strtol_l.isra.0+0xe0>
 800b4da:	4240      	negs	r0, r0
 800b4dc:	f1b8 0f00 	cmp.w	r8, #0
 800b4e0:	d099      	beq.n	800b416 <_strtol_l.isra.0+0x1a>
 800b4e2:	2a00      	cmp	r2, #0
 800b4e4:	d1f6      	bne.n	800b4d4 <_strtol_l.isra.0+0xd8>
 800b4e6:	f8c8 1000 	str.w	r1, [r8]
 800b4ea:	e794      	b.n	800b416 <_strtol_l.isra.0+0x1a>
 800b4ec:	0800d2f9 	.word	0x0800d2f9

0800b4f0 <_strtol_r>:
 800b4f0:	f7ff bf84 	b.w	800b3fc <_strtol_l.isra.0>

0800b4f4 <__ssputs_r>:
 800b4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f8:	461f      	mov	r7, r3
 800b4fa:	688e      	ldr	r6, [r1, #8]
 800b4fc:	4682      	mov	sl, r0
 800b4fe:	460c      	mov	r4, r1
 800b500:	42be      	cmp	r6, r7
 800b502:	4690      	mov	r8, r2
 800b504:	680b      	ldr	r3, [r1, #0]
 800b506:	d82d      	bhi.n	800b564 <__ssputs_r+0x70>
 800b508:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b50c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b510:	d026      	beq.n	800b560 <__ssputs_r+0x6c>
 800b512:	6965      	ldr	r5, [r4, #20]
 800b514:	6909      	ldr	r1, [r1, #16]
 800b516:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b51a:	eba3 0901 	sub.w	r9, r3, r1
 800b51e:	1c7b      	adds	r3, r7, #1
 800b520:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b524:	444b      	add	r3, r9
 800b526:	106d      	asrs	r5, r5, #1
 800b528:	429d      	cmp	r5, r3
 800b52a:	bf38      	it	cc
 800b52c:	461d      	movcc	r5, r3
 800b52e:	0553      	lsls	r3, r2, #21
 800b530:	d527      	bpl.n	800b582 <__ssputs_r+0x8e>
 800b532:	4629      	mov	r1, r5
 800b534:	f7fe fc16 	bl	8009d64 <_malloc_r>
 800b538:	4606      	mov	r6, r0
 800b53a:	b360      	cbz	r0, 800b596 <__ssputs_r+0xa2>
 800b53c:	464a      	mov	r2, r9
 800b53e:	6921      	ldr	r1, [r4, #16]
 800b540:	f000 fda4 	bl	800c08c <memcpy>
 800b544:	89a3      	ldrh	r3, [r4, #12]
 800b546:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b54a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b54e:	81a3      	strh	r3, [r4, #12]
 800b550:	6126      	str	r6, [r4, #16]
 800b552:	444e      	add	r6, r9
 800b554:	6165      	str	r5, [r4, #20]
 800b556:	eba5 0509 	sub.w	r5, r5, r9
 800b55a:	6026      	str	r6, [r4, #0]
 800b55c:	463e      	mov	r6, r7
 800b55e:	60a5      	str	r5, [r4, #8]
 800b560:	42be      	cmp	r6, r7
 800b562:	d900      	bls.n	800b566 <__ssputs_r+0x72>
 800b564:	463e      	mov	r6, r7
 800b566:	4632      	mov	r2, r6
 800b568:	4641      	mov	r1, r8
 800b56a:	6820      	ldr	r0, [r4, #0]
 800b56c:	f000 fd52 	bl	800c014 <memmove>
 800b570:	68a3      	ldr	r3, [r4, #8]
 800b572:	2000      	movs	r0, #0
 800b574:	1b9b      	subs	r3, r3, r6
 800b576:	60a3      	str	r3, [r4, #8]
 800b578:	6823      	ldr	r3, [r4, #0]
 800b57a:	4433      	add	r3, r6
 800b57c:	6023      	str	r3, [r4, #0]
 800b57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b582:	462a      	mov	r2, r5
 800b584:	f001 f911 	bl	800c7aa <_realloc_r>
 800b588:	4606      	mov	r6, r0
 800b58a:	2800      	cmp	r0, #0
 800b58c:	d1e0      	bne.n	800b550 <__ssputs_r+0x5c>
 800b58e:	6921      	ldr	r1, [r4, #16]
 800b590:	4650      	mov	r0, sl
 800b592:	f7fe fb73 	bl	8009c7c <_free_r>
 800b596:	230c      	movs	r3, #12
 800b598:	f04f 30ff 	mov.w	r0, #4294967295
 800b59c:	f8ca 3000 	str.w	r3, [sl]
 800b5a0:	89a3      	ldrh	r3, [r4, #12]
 800b5a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5a6:	81a3      	strh	r3, [r4, #12]
 800b5a8:	e7e9      	b.n	800b57e <__ssputs_r+0x8a>
	...

0800b5ac <_svfiprintf_r>:
 800b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b0:	4698      	mov	r8, r3
 800b5b2:	898b      	ldrh	r3, [r1, #12]
 800b5b4:	b09d      	sub	sp, #116	@ 0x74
 800b5b6:	4607      	mov	r7, r0
 800b5b8:	061b      	lsls	r3, r3, #24
 800b5ba:	460d      	mov	r5, r1
 800b5bc:	4614      	mov	r4, r2
 800b5be:	d510      	bpl.n	800b5e2 <_svfiprintf_r+0x36>
 800b5c0:	690b      	ldr	r3, [r1, #16]
 800b5c2:	b973      	cbnz	r3, 800b5e2 <_svfiprintf_r+0x36>
 800b5c4:	2140      	movs	r1, #64	@ 0x40
 800b5c6:	f7fe fbcd 	bl	8009d64 <_malloc_r>
 800b5ca:	6028      	str	r0, [r5, #0]
 800b5cc:	6128      	str	r0, [r5, #16]
 800b5ce:	b930      	cbnz	r0, 800b5de <_svfiprintf_r+0x32>
 800b5d0:	230c      	movs	r3, #12
 800b5d2:	603b      	str	r3, [r7, #0]
 800b5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d8:	b01d      	add	sp, #116	@ 0x74
 800b5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5de:	2340      	movs	r3, #64	@ 0x40
 800b5e0:	616b      	str	r3, [r5, #20]
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5e8:	f04f 0901 	mov.w	r9, #1
 800b5ec:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800b790 <_svfiprintf_r+0x1e4>
 800b5f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5f2:	2320      	movs	r3, #32
 800b5f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5f8:	2330      	movs	r3, #48	@ 0x30
 800b5fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5fe:	4623      	mov	r3, r4
 800b600:	469a      	mov	sl, r3
 800b602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b606:	b10a      	cbz	r2, 800b60c <_svfiprintf_r+0x60>
 800b608:	2a25      	cmp	r2, #37	@ 0x25
 800b60a:	d1f9      	bne.n	800b600 <_svfiprintf_r+0x54>
 800b60c:	ebba 0b04 	subs.w	fp, sl, r4
 800b610:	d00b      	beq.n	800b62a <_svfiprintf_r+0x7e>
 800b612:	465b      	mov	r3, fp
 800b614:	4622      	mov	r2, r4
 800b616:	4629      	mov	r1, r5
 800b618:	4638      	mov	r0, r7
 800b61a:	f7ff ff6b 	bl	800b4f4 <__ssputs_r>
 800b61e:	3001      	adds	r0, #1
 800b620:	f000 80a7 	beq.w	800b772 <_svfiprintf_r+0x1c6>
 800b624:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b626:	445a      	add	r2, fp
 800b628:	9209      	str	r2, [sp, #36]	@ 0x24
 800b62a:	f89a 3000 	ldrb.w	r3, [sl]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	f000 809f 	beq.w	800b772 <_svfiprintf_r+0x1c6>
 800b634:	2300      	movs	r3, #0
 800b636:	f04f 32ff 	mov.w	r2, #4294967295
 800b63a:	f10a 0a01 	add.w	sl, sl, #1
 800b63e:	9304      	str	r3, [sp, #16]
 800b640:	9307      	str	r3, [sp, #28]
 800b642:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b646:	931a      	str	r3, [sp, #104]	@ 0x68
 800b648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b64c:	4654      	mov	r4, sl
 800b64e:	2205      	movs	r2, #5
 800b650:	484f      	ldr	r0, [pc, #316]	@ (800b790 <_svfiprintf_r+0x1e4>)
 800b652:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b656:	f7fd fc9a 	bl	8008f8e <memchr>
 800b65a:	9a04      	ldr	r2, [sp, #16]
 800b65c:	b9d8      	cbnz	r0, 800b696 <_svfiprintf_r+0xea>
 800b65e:	06d0      	lsls	r0, r2, #27
 800b660:	bf44      	itt	mi
 800b662:	2320      	movmi	r3, #32
 800b664:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b668:	0711      	lsls	r1, r2, #28
 800b66a:	bf44      	itt	mi
 800b66c:	232b      	movmi	r3, #43	@ 0x2b
 800b66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b672:	f89a 3000 	ldrb.w	r3, [sl]
 800b676:	2b2a      	cmp	r3, #42	@ 0x2a
 800b678:	d015      	beq.n	800b6a6 <_svfiprintf_r+0xfa>
 800b67a:	9a07      	ldr	r2, [sp, #28]
 800b67c:	4654      	mov	r4, sl
 800b67e:	2000      	movs	r0, #0
 800b680:	f04f 0c0a 	mov.w	ip, #10
 800b684:	4621      	mov	r1, r4
 800b686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b68a:	3b30      	subs	r3, #48	@ 0x30
 800b68c:	2b09      	cmp	r3, #9
 800b68e:	d94b      	bls.n	800b728 <_svfiprintf_r+0x17c>
 800b690:	b1b0      	cbz	r0, 800b6c0 <_svfiprintf_r+0x114>
 800b692:	9207      	str	r2, [sp, #28]
 800b694:	e014      	b.n	800b6c0 <_svfiprintf_r+0x114>
 800b696:	eba0 0308 	sub.w	r3, r0, r8
 800b69a:	46a2      	mov	sl, r4
 800b69c:	fa09 f303 	lsl.w	r3, r9, r3
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	9304      	str	r3, [sp, #16]
 800b6a4:	e7d2      	b.n	800b64c <_svfiprintf_r+0xa0>
 800b6a6:	9b03      	ldr	r3, [sp, #12]
 800b6a8:	1d19      	adds	r1, r3, #4
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	9103      	str	r1, [sp, #12]
 800b6b0:	bfbb      	ittet	lt
 800b6b2:	425b      	neglt	r3, r3
 800b6b4:	f042 0202 	orrlt.w	r2, r2, #2
 800b6b8:	9307      	strge	r3, [sp, #28]
 800b6ba:	9307      	strlt	r3, [sp, #28]
 800b6bc:	bfb8      	it	lt
 800b6be:	9204      	strlt	r2, [sp, #16]
 800b6c0:	7823      	ldrb	r3, [r4, #0]
 800b6c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6c4:	d10a      	bne.n	800b6dc <_svfiprintf_r+0x130>
 800b6c6:	7863      	ldrb	r3, [r4, #1]
 800b6c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6ca:	d132      	bne.n	800b732 <_svfiprintf_r+0x186>
 800b6cc:	9b03      	ldr	r3, [sp, #12]
 800b6ce:	3402      	adds	r4, #2
 800b6d0:	1d1a      	adds	r2, r3, #4
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6d8:	9203      	str	r2, [sp, #12]
 800b6da:	9305      	str	r3, [sp, #20]
 800b6dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b7a0 <_svfiprintf_r+0x1f4>
 800b6e0:	2203      	movs	r2, #3
 800b6e2:	7821      	ldrb	r1, [r4, #0]
 800b6e4:	4650      	mov	r0, sl
 800b6e6:	f7fd fc52 	bl	8008f8e <memchr>
 800b6ea:	b138      	cbz	r0, 800b6fc <_svfiprintf_r+0x150>
 800b6ec:	eba0 000a 	sub.w	r0, r0, sl
 800b6f0:	2240      	movs	r2, #64	@ 0x40
 800b6f2:	9b04      	ldr	r3, [sp, #16]
 800b6f4:	3401      	adds	r4, #1
 800b6f6:	4082      	lsls	r2, r0
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	9304      	str	r3, [sp, #16]
 800b6fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b700:	2206      	movs	r2, #6
 800b702:	4824      	ldr	r0, [pc, #144]	@ (800b794 <_svfiprintf_r+0x1e8>)
 800b704:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b708:	f7fd fc41 	bl	8008f8e <memchr>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d036      	beq.n	800b77e <_svfiprintf_r+0x1d2>
 800b710:	4b21      	ldr	r3, [pc, #132]	@ (800b798 <_svfiprintf_r+0x1ec>)
 800b712:	bb1b      	cbnz	r3, 800b75c <_svfiprintf_r+0x1b0>
 800b714:	9b03      	ldr	r3, [sp, #12]
 800b716:	3307      	adds	r3, #7
 800b718:	f023 0307 	bic.w	r3, r3, #7
 800b71c:	3308      	adds	r3, #8
 800b71e:	9303      	str	r3, [sp, #12]
 800b720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b722:	4433      	add	r3, r6
 800b724:	9309      	str	r3, [sp, #36]	@ 0x24
 800b726:	e76a      	b.n	800b5fe <_svfiprintf_r+0x52>
 800b728:	fb0c 3202 	mla	r2, ip, r2, r3
 800b72c:	460c      	mov	r4, r1
 800b72e:	2001      	movs	r0, #1
 800b730:	e7a8      	b.n	800b684 <_svfiprintf_r+0xd8>
 800b732:	2300      	movs	r3, #0
 800b734:	3401      	adds	r4, #1
 800b736:	f04f 0c0a 	mov.w	ip, #10
 800b73a:	4619      	mov	r1, r3
 800b73c:	9305      	str	r3, [sp, #20]
 800b73e:	4620      	mov	r0, r4
 800b740:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b744:	3a30      	subs	r2, #48	@ 0x30
 800b746:	2a09      	cmp	r2, #9
 800b748:	d903      	bls.n	800b752 <_svfiprintf_r+0x1a6>
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d0c6      	beq.n	800b6dc <_svfiprintf_r+0x130>
 800b74e:	9105      	str	r1, [sp, #20]
 800b750:	e7c4      	b.n	800b6dc <_svfiprintf_r+0x130>
 800b752:	fb0c 2101 	mla	r1, ip, r1, r2
 800b756:	4604      	mov	r4, r0
 800b758:	2301      	movs	r3, #1
 800b75a:	e7f0      	b.n	800b73e <_svfiprintf_r+0x192>
 800b75c:	ab03      	add	r3, sp, #12
 800b75e:	462a      	mov	r2, r5
 800b760:	a904      	add	r1, sp, #16
 800b762:	4638      	mov	r0, r7
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	4b0d      	ldr	r3, [pc, #52]	@ (800b79c <_svfiprintf_r+0x1f0>)
 800b768:	f7fc fc16 	bl	8007f98 <_printf_float>
 800b76c:	1c42      	adds	r2, r0, #1
 800b76e:	4606      	mov	r6, r0
 800b770:	d1d6      	bne.n	800b720 <_svfiprintf_r+0x174>
 800b772:	89ab      	ldrh	r3, [r5, #12]
 800b774:	065b      	lsls	r3, r3, #25
 800b776:	f53f af2d 	bmi.w	800b5d4 <_svfiprintf_r+0x28>
 800b77a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b77c:	e72c      	b.n	800b5d8 <_svfiprintf_r+0x2c>
 800b77e:	ab03      	add	r3, sp, #12
 800b780:	462a      	mov	r2, r5
 800b782:	a904      	add	r1, sp, #16
 800b784:	4638      	mov	r0, r7
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	4b04      	ldr	r3, [pc, #16]	@ (800b79c <_svfiprintf_r+0x1f0>)
 800b78a:	f7fc fea1 	bl	80084d0 <_printf_i>
 800b78e:	e7ed      	b.n	800b76c <_svfiprintf_r+0x1c0>
 800b790:	0800d0d7 	.word	0x0800d0d7
 800b794:	0800d0e1 	.word	0x0800d0e1
 800b798:	08007f99 	.word	0x08007f99
 800b79c:	0800b4f5 	.word	0x0800b4f5
 800b7a0:	0800d0dd 	.word	0x0800d0dd

0800b7a4 <_sungetc_r>:
 800b7a4:	b538      	push	{r3, r4, r5, lr}
 800b7a6:	1c4b      	adds	r3, r1, #1
 800b7a8:	4614      	mov	r4, r2
 800b7aa:	d103      	bne.n	800b7b4 <_sungetc_r+0x10>
 800b7ac:	f04f 35ff 	mov.w	r5, #4294967295
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	bd38      	pop	{r3, r4, r5, pc}
 800b7b4:	8993      	ldrh	r3, [r2, #12]
 800b7b6:	b2cd      	uxtb	r5, r1
 800b7b8:	f023 0320 	bic.w	r3, r3, #32
 800b7bc:	8193      	strh	r3, [r2, #12]
 800b7be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b7c0:	6852      	ldr	r2, [r2, #4]
 800b7c2:	b18b      	cbz	r3, 800b7e8 <_sungetc_r+0x44>
 800b7c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	dd08      	ble.n	800b7dc <_sungetc_r+0x38>
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	1e5a      	subs	r2, r3, #1
 800b7ce:	6022      	str	r2, [r4, #0]
 800b7d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b7d4:	6863      	ldr	r3, [r4, #4]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	6063      	str	r3, [r4, #4]
 800b7da:	e7e9      	b.n	800b7b0 <_sungetc_r+0xc>
 800b7dc:	4621      	mov	r1, r4
 800b7de:	f000 fbe2 	bl	800bfa6 <__submore>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d0f1      	beq.n	800b7ca <_sungetc_r+0x26>
 800b7e6:	e7e1      	b.n	800b7ac <_sungetc_r+0x8>
 800b7e8:	6921      	ldr	r1, [r4, #16]
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	b151      	cbz	r1, 800b804 <_sungetc_r+0x60>
 800b7ee:	4299      	cmp	r1, r3
 800b7f0:	d208      	bcs.n	800b804 <_sungetc_r+0x60>
 800b7f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b7f6:	42a9      	cmp	r1, r5
 800b7f8:	d104      	bne.n	800b804 <_sungetc_r+0x60>
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	3201      	adds	r2, #1
 800b7fe:	6023      	str	r3, [r4, #0]
 800b800:	6062      	str	r2, [r4, #4]
 800b802:	e7d5      	b.n	800b7b0 <_sungetc_r+0xc>
 800b804:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800b808:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b80c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b80e:	2303      	movs	r3, #3
 800b810:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b812:	4623      	mov	r3, r4
 800b814:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	2301      	movs	r3, #1
 800b81c:	e7dc      	b.n	800b7d8 <_sungetc_r+0x34>

0800b81e <__ssrefill_r>:
 800b81e:	b510      	push	{r4, lr}
 800b820:	460c      	mov	r4, r1
 800b822:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b824:	b169      	cbz	r1, 800b842 <__ssrefill_r+0x24>
 800b826:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b82a:	4299      	cmp	r1, r3
 800b82c:	d001      	beq.n	800b832 <__ssrefill_r+0x14>
 800b82e:	f7fe fa25 	bl	8009c7c <_free_r>
 800b832:	2000      	movs	r0, #0
 800b834:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b836:	6360      	str	r0, [r4, #52]	@ 0x34
 800b838:	6063      	str	r3, [r4, #4]
 800b83a:	b113      	cbz	r3, 800b842 <__ssrefill_r+0x24>
 800b83c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b83e:	6023      	str	r3, [r4, #0]
 800b840:	bd10      	pop	{r4, pc}
 800b842:	6923      	ldr	r3, [r4, #16]
 800b844:	f04f 30ff 	mov.w	r0, #4294967295
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	2300      	movs	r3, #0
 800b84c:	6063      	str	r3, [r4, #4]
 800b84e:	89a3      	ldrh	r3, [r4, #12]
 800b850:	f043 0320 	orr.w	r3, r3, #32
 800b854:	81a3      	strh	r3, [r4, #12]
 800b856:	e7f3      	b.n	800b840 <__ssrefill_r+0x22>

0800b858 <__ssvfiscanf_r>:
 800b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85c:	460c      	mov	r4, r1
 800b85e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800b862:	2100      	movs	r1, #0
 800b864:	4606      	mov	r6, r0
 800b866:	f10d 0804 	add.w	r8, sp, #4
 800b86a:	4fa6      	ldr	r7, [pc, #664]	@ (800bb04 <__ssvfiscanf_r+0x2ac>)
 800b86c:	9300      	str	r3, [sp, #0]
 800b86e:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b872:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800b876:	49a4      	ldr	r1, [pc, #656]	@ (800bb08 <__ssvfiscanf_r+0x2b0>)
 800b878:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b87a:	49a4      	ldr	r1, [pc, #656]	@ (800bb0c <__ssvfiscanf_r+0x2b4>)
 800b87c:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b87e:	f892 9000 	ldrb.w	r9, [r2]
 800b882:	f1b9 0f00 	cmp.w	r9, #0
 800b886:	f000 8158 	beq.w	800bb3a <__ssvfiscanf_r+0x2e2>
 800b88a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800b88e:	1c55      	adds	r5, r2, #1
 800b890:	f013 0308 	ands.w	r3, r3, #8
 800b894:	d019      	beq.n	800b8ca <__ssvfiscanf_r+0x72>
 800b896:	6863      	ldr	r3, [r4, #4]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	dd0f      	ble.n	800b8bc <__ssvfiscanf_r+0x64>
 800b89c:	6823      	ldr	r3, [r4, #0]
 800b89e:	781a      	ldrb	r2, [r3, #0]
 800b8a0:	5cba      	ldrb	r2, [r7, r2]
 800b8a2:	0712      	lsls	r2, r2, #28
 800b8a4:	d401      	bmi.n	800b8aa <__ssvfiscanf_r+0x52>
 800b8a6:	462a      	mov	r2, r5
 800b8a8:	e7e9      	b.n	800b87e <__ssvfiscanf_r+0x26>
 800b8aa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	3201      	adds	r2, #1
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	9245      	str	r2, [sp, #276]	@ 0x114
 800b8b4:	6862      	ldr	r2, [r4, #4]
 800b8b6:	3a01      	subs	r2, #1
 800b8b8:	6062      	str	r2, [r4, #4]
 800b8ba:	e7ec      	b.n	800b896 <__ssvfiscanf_r+0x3e>
 800b8bc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b8be:	4621      	mov	r1, r4
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	4798      	blx	r3
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	d0e9      	beq.n	800b89c <__ssvfiscanf_r+0x44>
 800b8c8:	e7ed      	b.n	800b8a6 <__ssvfiscanf_r+0x4e>
 800b8ca:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800b8ce:	f040 8086 	bne.w	800b9de <__ssvfiscanf_r+0x186>
 800b8d2:	9341      	str	r3, [sp, #260]	@ 0x104
 800b8d4:	9343      	str	r3, [sp, #268]	@ 0x10c
 800b8d6:	7853      	ldrb	r3, [r2, #1]
 800b8d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8da:	bf04      	itt	eq
 800b8dc:	2310      	moveq	r3, #16
 800b8de:	1c95      	addeq	r5, r2, #2
 800b8e0:	f04f 020a 	mov.w	r2, #10
 800b8e4:	bf08      	it	eq
 800b8e6:	9341      	streq	r3, [sp, #260]	@ 0x104
 800b8e8:	46aa      	mov	sl, r5
 800b8ea:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b8ee:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800b8f2:	2b09      	cmp	r3, #9
 800b8f4:	d91e      	bls.n	800b934 <__ssvfiscanf_r+0xdc>
 800b8f6:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800bb10 <__ssvfiscanf_r+0x2b8>
 800b8fa:	2203      	movs	r2, #3
 800b8fc:	4658      	mov	r0, fp
 800b8fe:	f7fd fb46 	bl	8008f8e <memchr>
 800b902:	b138      	cbz	r0, 800b914 <__ssvfiscanf_r+0xbc>
 800b904:	eba0 000b 	sub.w	r0, r0, fp
 800b908:	2301      	movs	r3, #1
 800b90a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b90c:	4655      	mov	r5, sl
 800b90e:	4083      	lsls	r3, r0
 800b910:	4313      	orrs	r3, r2
 800b912:	9341      	str	r3, [sp, #260]	@ 0x104
 800b914:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b918:	2b78      	cmp	r3, #120	@ 0x78
 800b91a:	d806      	bhi.n	800b92a <__ssvfiscanf_r+0xd2>
 800b91c:	2b57      	cmp	r3, #87	@ 0x57
 800b91e:	d810      	bhi.n	800b942 <__ssvfiscanf_r+0xea>
 800b920:	2b25      	cmp	r3, #37	@ 0x25
 800b922:	d05c      	beq.n	800b9de <__ssvfiscanf_r+0x186>
 800b924:	d856      	bhi.n	800b9d4 <__ssvfiscanf_r+0x17c>
 800b926:	2b00      	cmp	r3, #0
 800b928:	d074      	beq.n	800ba14 <__ssvfiscanf_r+0x1bc>
 800b92a:	2303      	movs	r3, #3
 800b92c:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b92e:	230a      	movs	r3, #10
 800b930:	9342      	str	r3, [sp, #264]	@ 0x108
 800b932:	e087      	b.n	800ba44 <__ssvfiscanf_r+0x1ec>
 800b934:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b936:	4655      	mov	r5, sl
 800b938:	fb02 1103 	mla	r1, r2, r3, r1
 800b93c:	3930      	subs	r1, #48	@ 0x30
 800b93e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b940:	e7d2      	b.n	800b8e8 <__ssvfiscanf_r+0x90>
 800b942:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800b946:	2a20      	cmp	r2, #32
 800b948:	d8ef      	bhi.n	800b92a <__ssvfiscanf_r+0xd2>
 800b94a:	a101      	add	r1, pc, #4	@ (adr r1, 800b950 <__ssvfiscanf_r+0xf8>)
 800b94c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b950:	0800ba23 	.word	0x0800ba23
 800b954:	0800b92b 	.word	0x0800b92b
 800b958:	0800b92b 	.word	0x0800b92b
 800b95c:	0800ba7d 	.word	0x0800ba7d
 800b960:	0800b92b 	.word	0x0800b92b
 800b964:	0800b92b 	.word	0x0800b92b
 800b968:	0800b92b 	.word	0x0800b92b
 800b96c:	0800b92b 	.word	0x0800b92b
 800b970:	0800b92b 	.word	0x0800b92b
 800b974:	0800b92b 	.word	0x0800b92b
 800b978:	0800b92b 	.word	0x0800b92b
 800b97c:	0800ba93 	.word	0x0800ba93
 800b980:	0800ba79 	.word	0x0800ba79
 800b984:	0800b9db 	.word	0x0800b9db
 800b988:	0800b9db 	.word	0x0800b9db
 800b98c:	0800b9db 	.word	0x0800b9db
 800b990:	0800b92b 	.word	0x0800b92b
 800b994:	0800ba35 	.word	0x0800ba35
 800b998:	0800b92b 	.word	0x0800b92b
 800b99c:	0800b92b 	.word	0x0800b92b
 800b9a0:	0800b92b 	.word	0x0800b92b
 800b9a4:	0800b92b 	.word	0x0800b92b
 800b9a8:	0800baa3 	.word	0x0800baa3
 800b9ac:	0800ba3d 	.word	0x0800ba3d
 800b9b0:	0800ba1b 	.word	0x0800ba1b
 800b9b4:	0800b92b 	.word	0x0800b92b
 800b9b8:	0800b92b 	.word	0x0800b92b
 800b9bc:	0800ba9f 	.word	0x0800ba9f
 800b9c0:	0800b92b 	.word	0x0800b92b
 800b9c4:	0800ba79 	.word	0x0800ba79
 800b9c8:	0800b92b 	.word	0x0800b92b
 800b9cc:	0800b92b 	.word	0x0800b92b
 800b9d0:	0800ba23 	.word	0x0800ba23
 800b9d4:	3b45      	subs	r3, #69	@ 0x45
 800b9d6:	2b02      	cmp	r3, #2
 800b9d8:	d8a7      	bhi.n	800b92a <__ssvfiscanf_r+0xd2>
 800b9da:	2305      	movs	r3, #5
 800b9dc:	e031      	b.n	800ba42 <__ssvfiscanf_r+0x1ea>
 800b9de:	6863      	ldr	r3, [r4, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	dd0d      	ble.n	800ba00 <__ssvfiscanf_r+0x1a8>
 800b9e4:	6823      	ldr	r3, [r4, #0]
 800b9e6:	781a      	ldrb	r2, [r3, #0]
 800b9e8:	454a      	cmp	r2, r9
 800b9ea:	f040 80a6 	bne.w	800bb3a <__ssvfiscanf_r+0x2e2>
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	6862      	ldr	r2, [r4, #4]
 800b9f2:	6023      	str	r3, [r4, #0]
 800b9f4:	3a01      	subs	r2, #1
 800b9f6:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800b9f8:	6062      	str	r2, [r4, #4]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	9345      	str	r3, [sp, #276]	@ 0x114
 800b9fe:	e752      	b.n	800b8a6 <__ssvfiscanf_r+0x4e>
 800ba00:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ba02:	4621      	mov	r1, r4
 800ba04:	4630      	mov	r0, r6
 800ba06:	4798      	blx	r3
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d0eb      	beq.n	800b9e4 <__ssvfiscanf_r+0x18c>
 800ba0c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	f040 808b 	bne.w	800bb2a <__ssvfiscanf_r+0x2d2>
 800ba14:	f04f 30ff 	mov.w	r0, #4294967295
 800ba18:	e08b      	b.n	800bb32 <__ssvfiscanf_r+0x2da>
 800ba1a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ba1c:	f042 0220 	orr.w	r2, r2, #32
 800ba20:	9241      	str	r2, [sp, #260]	@ 0x104
 800ba22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ba24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba28:	9241      	str	r2, [sp, #260]	@ 0x104
 800ba2a:	2210      	movs	r2, #16
 800ba2c:	2b6e      	cmp	r3, #110	@ 0x6e
 800ba2e:	9242      	str	r2, [sp, #264]	@ 0x108
 800ba30:	d902      	bls.n	800ba38 <__ssvfiscanf_r+0x1e0>
 800ba32:	e005      	b.n	800ba40 <__ssvfiscanf_r+0x1e8>
 800ba34:	2300      	movs	r3, #0
 800ba36:	9342      	str	r3, [sp, #264]	@ 0x108
 800ba38:	2303      	movs	r3, #3
 800ba3a:	e002      	b.n	800ba42 <__ssvfiscanf_r+0x1ea>
 800ba3c:	2308      	movs	r3, #8
 800ba3e:	9342      	str	r3, [sp, #264]	@ 0x108
 800ba40:	2304      	movs	r3, #4
 800ba42:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ba44:	6863      	ldr	r3, [r4, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	dd3a      	ble.n	800bac0 <__ssvfiscanf_r+0x268>
 800ba4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ba4c:	0659      	lsls	r1, r3, #25
 800ba4e:	d404      	bmi.n	800ba5a <__ssvfiscanf_r+0x202>
 800ba50:	6823      	ldr	r3, [r4, #0]
 800ba52:	781a      	ldrb	r2, [r3, #0]
 800ba54:	5cba      	ldrb	r2, [r7, r2]
 800ba56:	0712      	lsls	r2, r2, #28
 800ba58:	d439      	bmi.n	800bace <__ssvfiscanf_r+0x276>
 800ba5a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	dc48      	bgt.n	800baf2 <__ssvfiscanf_r+0x29a>
 800ba60:	466b      	mov	r3, sp
 800ba62:	4622      	mov	r2, r4
 800ba64:	a941      	add	r1, sp, #260	@ 0x104
 800ba66:	4630      	mov	r0, r6
 800ba68:	f000 f86c 	bl	800bb44 <_scanf_chars>
 800ba6c:	2801      	cmp	r0, #1
 800ba6e:	d064      	beq.n	800bb3a <__ssvfiscanf_r+0x2e2>
 800ba70:	2802      	cmp	r0, #2
 800ba72:	f47f af18 	bne.w	800b8a6 <__ssvfiscanf_r+0x4e>
 800ba76:	e7c9      	b.n	800ba0c <__ssvfiscanf_r+0x1b4>
 800ba78:	220a      	movs	r2, #10
 800ba7a:	e7d7      	b.n	800ba2c <__ssvfiscanf_r+0x1d4>
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	4640      	mov	r0, r8
 800ba80:	f000 fa58 	bl	800bf34 <__sccl>
 800ba84:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ba86:	4605      	mov	r5, r0
 800ba88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba8c:	9341      	str	r3, [sp, #260]	@ 0x104
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e7d7      	b.n	800ba42 <__ssvfiscanf_r+0x1ea>
 800ba92:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ba94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba98:	9341      	str	r3, [sp, #260]	@ 0x104
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	e7d1      	b.n	800ba42 <__ssvfiscanf_r+0x1ea>
 800ba9e:	2302      	movs	r3, #2
 800baa0:	e7cf      	b.n	800ba42 <__ssvfiscanf_r+0x1ea>
 800baa2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800baa4:	06c3      	lsls	r3, r0, #27
 800baa6:	f53f aefe 	bmi.w	800b8a6 <__ssvfiscanf_r+0x4e>
 800baaa:	9b00      	ldr	r3, [sp, #0]
 800baac:	07c0      	lsls	r0, r0, #31
 800baae:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bab0:	f103 0104 	add.w	r1, r3, #4
 800bab4:	9100      	str	r1, [sp, #0]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	bf4c      	ite	mi
 800baba:	801a      	strhmi	r2, [r3, #0]
 800babc:	601a      	strpl	r2, [r3, #0]
 800babe:	e6f2      	b.n	800b8a6 <__ssvfiscanf_r+0x4e>
 800bac0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bac2:	4621      	mov	r1, r4
 800bac4:	4630      	mov	r0, r6
 800bac6:	4798      	blx	r3
 800bac8:	2800      	cmp	r0, #0
 800baca:	d0be      	beq.n	800ba4a <__ssvfiscanf_r+0x1f2>
 800bacc:	e79e      	b.n	800ba0c <__ssvfiscanf_r+0x1b4>
 800bace:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bad0:	3201      	adds	r2, #1
 800bad2:	9245      	str	r2, [sp, #276]	@ 0x114
 800bad4:	6862      	ldr	r2, [r4, #4]
 800bad6:	3a01      	subs	r2, #1
 800bad8:	2a00      	cmp	r2, #0
 800bada:	6062      	str	r2, [r4, #4]
 800badc:	dd02      	ble.n	800bae4 <__ssvfiscanf_r+0x28c>
 800bade:	3301      	adds	r3, #1
 800bae0:	6023      	str	r3, [r4, #0]
 800bae2:	e7b5      	b.n	800ba50 <__ssvfiscanf_r+0x1f8>
 800bae4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bae6:	4621      	mov	r1, r4
 800bae8:	4630      	mov	r0, r6
 800baea:	4798      	blx	r3
 800baec:	2800      	cmp	r0, #0
 800baee:	d0af      	beq.n	800ba50 <__ssvfiscanf_r+0x1f8>
 800baf0:	e78c      	b.n	800ba0c <__ssvfiscanf_r+0x1b4>
 800baf2:	2b04      	cmp	r3, #4
 800baf4:	dc0e      	bgt.n	800bb14 <__ssvfiscanf_r+0x2bc>
 800baf6:	466b      	mov	r3, sp
 800baf8:	4622      	mov	r2, r4
 800bafa:	a941      	add	r1, sp, #260	@ 0x104
 800bafc:	4630      	mov	r0, r6
 800bafe:	f000 f87b 	bl	800bbf8 <_scanf_i>
 800bb02:	e7b3      	b.n	800ba6c <__ssvfiscanf_r+0x214>
 800bb04:	0800d2f9 	.word	0x0800d2f9
 800bb08:	0800b7a5 	.word	0x0800b7a5
 800bb0c:	0800b81f 	.word	0x0800b81f
 800bb10:	0800d0dd 	.word	0x0800d0dd
 800bb14:	4b0a      	ldr	r3, [pc, #40]	@ (800bb40 <__ssvfiscanf_r+0x2e8>)
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f43f aec5 	beq.w	800b8a6 <__ssvfiscanf_r+0x4e>
 800bb1c:	466b      	mov	r3, sp
 800bb1e:	4622      	mov	r2, r4
 800bb20:	a941      	add	r1, sp, #260	@ 0x104
 800bb22:	4630      	mov	r0, r6
 800bb24:	f7fc fdf2 	bl	800870c <_scanf_float>
 800bb28:	e7a0      	b.n	800ba6c <__ssvfiscanf_r+0x214>
 800bb2a:	89a3      	ldrh	r3, [r4, #12]
 800bb2c:	065b      	lsls	r3, r3, #25
 800bb2e:	f53f af71 	bmi.w	800ba14 <__ssvfiscanf_r+0x1bc>
 800bb32:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800bb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bb3c:	e7f9      	b.n	800bb32 <__ssvfiscanf_r+0x2da>
 800bb3e:	bf00      	nop
 800bb40:	0800870d 	.word	0x0800870d

0800bb44 <_scanf_chars>:
 800bb44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb48:	4615      	mov	r5, r2
 800bb4a:	688a      	ldr	r2, [r1, #8]
 800bb4c:	4680      	mov	r8, r0
 800bb4e:	460c      	mov	r4, r1
 800bb50:	b932      	cbnz	r2, 800bb60 <_scanf_chars+0x1c>
 800bb52:	698a      	ldr	r2, [r1, #24]
 800bb54:	2a00      	cmp	r2, #0
 800bb56:	bf14      	ite	ne
 800bb58:	f04f 32ff 	movne.w	r2, #4294967295
 800bb5c:	2201      	moveq	r2, #1
 800bb5e:	608a      	str	r2, [r1, #8]
 800bb60:	6822      	ldr	r2, [r4, #0]
 800bb62:	2700      	movs	r7, #0
 800bb64:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800bbf4 <_scanf_chars+0xb0>
 800bb68:	06d1      	lsls	r1, r2, #27
 800bb6a:	bf5f      	itttt	pl
 800bb6c:	681a      	ldrpl	r2, [r3, #0]
 800bb6e:	1d11      	addpl	r1, r2, #4
 800bb70:	6019      	strpl	r1, [r3, #0]
 800bb72:	6816      	ldrpl	r6, [r2, #0]
 800bb74:	69a0      	ldr	r0, [r4, #24]
 800bb76:	b188      	cbz	r0, 800bb9c <_scanf_chars+0x58>
 800bb78:	2801      	cmp	r0, #1
 800bb7a:	d107      	bne.n	800bb8c <_scanf_chars+0x48>
 800bb7c:	682b      	ldr	r3, [r5, #0]
 800bb7e:	781a      	ldrb	r2, [r3, #0]
 800bb80:	6963      	ldr	r3, [r4, #20]
 800bb82:	5c9b      	ldrb	r3, [r3, r2]
 800bb84:	b953      	cbnz	r3, 800bb9c <_scanf_chars+0x58>
 800bb86:	2f00      	cmp	r7, #0
 800bb88:	d031      	beq.n	800bbee <_scanf_chars+0xaa>
 800bb8a:	e022      	b.n	800bbd2 <_scanf_chars+0x8e>
 800bb8c:	2802      	cmp	r0, #2
 800bb8e:	d120      	bne.n	800bbd2 <_scanf_chars+0x8e>
 800bb90:	682b      	ldr	r3, [r5, #0]
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	f819 3003 	ldrb.w	r3, [r9, r3]
 800bb98:	071b      	lsls	r3, r3, #28
 800bb9a:	d41a      	bmi.n	800bbd2 <_scanf_chars+0x8e>
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	3701      	adds	r7, #1
 800bba0:	06da      	lsls	r2, r3, #27
 800bba2:	bf5e      	ittt	pl
 800bba4:	682b      	ldrpl	r3, [r5, #0]
 800bba6:	781b      	ldrbpl	r3, [r3, #0]
 800bba8:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bbac:	682a      	ldr	r2, [r5, #0]
 800bbae:	686b      	ldr	r3, [r5, #4]
 800bbb0:	3201      	adds	r2, #1
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	602a      	str	r2, [r5, #0]
 800bbb6:	68a2      	ldr	r2, [r4, #8]
 800bbb8:	606b      	str	r3, [r5, #4]
 800bbba:	3a01      	subs	r2, #1
 800bbbc:	60a2      	str	r2, [r4, #8]
 800bbbe:	b142      	cbz	r2, 800bbd2 <_scanf_chars+0x8e>
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	dcd7      	bgt.n	800bb74 <_scanf_chars+0x30>
 800bbc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bbc8:	4629      	mov	r1, r5
 800bbca:	4640      	mov	r0, r8
 800bbcc:	4798      	blx	r3
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d0d0      	beq.n	800bb74 <_scanf_chars+0x30>
 800bbd2:	6823      	ldr	r3, [r4, #0]
 800bbd4:	f013 0310 	ands.w	r3, r3, #16
 800bbd8:	d105      	bne.n	800bbe6 <_scanf_chars+0xa2>
 800bbda:	68e2      	ldr	r2, [r4, #12]
 800bbdc:	3201      	adds	r2, #1
 800bbde:	60e2      	str	r2, [r4, #12]
 800bbe0:	69a2      	ldr	r2, [r4, #24]
 800bbe2:	b102      	cbz	r2, 800bbe6 <_scanf_chars+0xa2>
 800bbe4:	7033      	strb	r3, [r6, #0]
 800bbe6:	6923      	ldr	r3, [r4, #16]
 800bbe8:	2000      	movs	r0, #0
 800bbea:	443b      	add	r3, r7
 800bbec:	6123      	str	r3, [r4, #16]
 800bbee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbf2:	bf00      	nop
 800bbf4:	0800d2f9 	.word	0x0800d2f9

0800bbf8 <_scanf_i>:
 800bbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfc:	4698      	mov	r8, r3
 800bbfe:	b087      	sub	sp, #28
 800bc00:	4b72      	ldr	r3, [pc, #456]	@ (800bdcc <_scanf_i+0x1d4>)
 800bc02:	460c      	mov	r4, r1
 800bc04:	4682      	mov	sl, r0
 800bc06:	4616      	mov	r6, r2
 800bc08:	4627      	mov	r7, r4
 800bc0a:	f04f 0b00 	mov.w	fp, #0
 800bc0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bc12:	ab03      	add	r3, sp, #12
 800bc14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bc18:	4b6d      	ldr	r3, [pc, #436]	@ (800bdd0 <_scanf_i+0x1d8>)
 800bc1a:	69a1      	ldr	r1, [r4, #24]
 800bc1c:	4a6d      	ldr	r2, [pc, #436]	@ (800bdd4 <_scanf_i+0x1dc>)
 800bc1e:	2903      	cmp	r1, #3
 800bc20:	bf08      	it	eq
 800bc22:	461a      	moveq	r2, r3
 800bc24:	68a3      	ldr	r3, [r4, #8]
 800bc26:	9201      	str	r2, [sp, #4]
 800bc28:	1e5a      	subs	r2, r3, #1
 800bc2a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bc2e:	bf89      	itett	hi
 800bc30:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bc34:	f04f 0900 	movls.w	r9, #0
 800bc38:	eb03 0905 	addhi.w	r9, r3, r5
 800bc3c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bc40:	bf88      	it	hi
 800bc42:	60a3      	strhi	r3, [r4, #8]
 800bc44:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bc48:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800bc4c:	463d      	mov	r5, r7
 800bc4e:	6023      	str	r3, [r4, #0]
 800bc50:	6831      	ldr	r1, [r6, #0]
 800bc52:	ab03      	add	r3, sp, #12
 800bc54:	2202      	movs	r2, #2
 800bc56:	7809      	ldrb	r1, [r1, #0]
 800bc58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bc5c:	f7fd f997 	bl	8008f8e <memchr>
 800bc60:	b328      	cbz	r0, 800bcae <_scanf_i+0xb6>
 800bc62:	f1bb 0f01 	cmp.w	fp, #1
 800bc66:	d159      	bne.n	800bd1c <_scanf_i+0x124>
 800bc68:	6862      	ldr	r2, [r4, #4]
 800bc6a:	b92a      	cbnz	r2, 800bc78 <_scanf_i+0x80>
 800bc6c:	6822      	ldr	r2, [r4, #0]
 800bc6e:	2108      	movs	r1, #8
 800bc70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc74:	6061      	str	r1, [r4, #4]
 800bc76:	6022      	str	r2, [r4, #0]
 800bc78:	6822      	ldr	r2, [r4, #0]
 800bc7a:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800bc7e:	6022      	str	r2, [r4, #0]
 800bc80:	68a2      	ldr	r2, [r4, #8]
 800bc82:	1e51      	subs	r1, r2, #1
 800bc84:	60a1      	str	r1, [r4, #8]
 800bc86:	b192      	cbz	r2, 800bcae <_scanf_i+0xb6>
 800bc88:	6832      	ldr	r2, [r6, #0]
 800bc8a:	1c51      	adds	r1, r2, #1
 800bc8c:	6031      	str	r1, [r6, #0]
 800bc8e:	7812      	ldrb	r2, [r2, #0]
 800bc90:	f805 2b01 	strb.w	r2, [r5], #1
 800bc94:	6872      	ldr	r2, [r6, #4]
 800bc96:	3a01      	subs	r2, #1
 800bc98:	2a00      	cmp	r2, #0
 800bc9a:	6072      	str	r2, [r6, #4]
 800bc9c:	dc07      	bgt.n	800bcae <_scanf_i+0xb6>
 800bc9e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800bca2:	4631      	mov	r1, r6
 800bca4:	4650      	mov	r0, sl
 800bca6:	4790      	blx	r2
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	f040 8085 	bne.w	800bdb8 <_scanf_i+0x1c0>
 800bcae:	f10b 0b01 	add.w	fp, fp, #1
 800bcb2:	f1bb 0f03 	cmp.w	fp, #3
 800bcb6:	d1cb      	bne.n	800bc50 <_scanf_i+0x58>
 800bcb8:	6863      	ldr	r3, [r4, #4]
 800bcba:	b90b      	cbnz	r3, 800bcc0 <_scanf_i+0xc8>
 800bcbc:	230a      	movs	r3, #10
 800bcbe:	6063      	str	r3, [r4, #4]
 800bcc0:	6863      	ldr	r3, [r4, #4]
 800bcc2:	f04f 0b00 	mov.w	fp, #0
 800bcc6:	4944      	ldr	r1, [pc, #272]	@ (800bdd8 <_scanf_i+0x1e0>)
 800bcc8:	6960      	ldr	r0, [r4, #20]
 800bcca:	1ac9      	subs	r1, r1, r3
 800bccc:	f000 f932 	bl	800bf34 <__sccl>
 800bcd0:	68a3      	ldr	r3, [r4, #8]
 800bcd2:	6822      	ldr	r2, [r4, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d03d      	beq.n	800bd54 <_scanf_i+0x15c>
 800bcd8:	6831      	ldr	r1, [r6, #0]
 800bcda:	6960      	ldr	r0, [r4, #20]
 800bcdc:	f891 c000 	ldrb.w	ip, [r1]
 800bce0:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bce4:	2800      	cmp	r0, #0
 800bce6:	d035      	beq.n	800bd54 <_scanf_i+0x15c>
 800bce8:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800bcec:	d124      	bne.n	800bd38 <_scanf_i+0x140>
 800bcee:	0510      	lsls	r0, r2, #20
 800bcf0:	d522      	bpl.n	800bd38 <_scanf_i+0x140>
 800bcf2:	f10b 0b01 	add.w	fp, fp, #1
 800bcf6:	f1b9 0f00 	cmp.w	r9, #0
 800bcfa:	d003      	beq.n	800bd04 <_scanf_i+0x10c>
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	f109 39ff 	add.w	r9, r9, #4294967295
 800bd02:	60a3      	str	r3, [r4, #8]
 800bd04:	6873      	ldr	r3, [r6, #4]
 800bd06:	3b01      	subs	r3, #1
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	6073      	str	r3, [r6, #4]
 800bd0c:	dd1b      	ble.n	800bd46 <_scanf_i+0x14e>
 800bd0e:	6833      	ldr	r3, [r6, #0]
 800bd10:	3301      	adds	r3, #1
 800bd12:	6033      	str	r3, [r6, #0]
 800bd14:	68a3      	ldr	r3, [r4, #8]
 800bd16:	3b01      	subs	r3, #1
 800bd18:	60a3      	str	r3, [r4, #8]
 800bd1a:	e7d9      	b.n	800bcd0 <_scanf_i+0xd8>
 800bd1c:	f1bb 0f02 	cmp.w	fp, #2
 800bd20:	d1ae      	bne.n	800bc80 <_scanf_i+0x88>
 800bd22:	6822      	ldr	r2, [r4, #0]
 800bd24:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800bd28:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800bd2c:	d1c4      	bne.n	800bcb8 <_scanf_i+0xc0>
 800bd2e:	2110      	movs	r1, #16
 800bd30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bd34:	6061      	str	r1, [r4, #4]
 800bd36:	e7a2      	b.n	800bc7e <_scanf_i+0x86>
 800bd38:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800bd3c:	6022      	str	r2, [r4, #0]
 800bd3e:	780b      	ldrb	r3, [r1, #0]
 800bd40:	f805 3b01 	strb.w	r3, [r5], #1
 800bd44:	e7de      	b.n	800bd04 <_scanf_i+0x10c>
 800bd46:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bd4a:	4631      	mov	r1, r6
 800bd4c:	4650      	mov	r0, sl
 800bd4e:	4798      	blx	r3
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d0df      	beq.n	800bd14 <_scanf_i+0x11c>
 800bd54:	6823      	ldr	r3, [r4, #0]
 800bd56:	05d9      	lsls	r1, r3, #23
 800bd58:	d50d      	bpl.n	800bd76 <_scanf_i+0x17e>
 800bd5a:	42bd      	cmp	r5, r7
 800bd5c:	d909      	bls.n	800bd72 <_scanf_i+0x17a>
 800bd5e:	f105 39ff 	add.w	r9, r5, #4294967295
 800bd62:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bd66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd6a:	4632      	mov	r2, r6
 800bd6c:	464d      	mov	r5, r9
 800bd6e:	4650      	mov	r0, sl
 800bd70:	4798      	blx	r3
 800bd72:	42bd      	cmp	r5, r7
 800bd74:	d028      	beq.n	800bdc8 <_scanf_i+0x1d0>
 800bd76:	6822      	ldr	r2, [r4, #0]
 800bd78:	f012 0210 	ands.w	r2, r2, #16
 800bd7c:	d113      	bne.n	800bda6 <_scanf_i+0x1ae>
 800bd7e:	702a      	strb	r2, [r5, #0]
 800bd80:	4639      	mov	r1, r7
 800bd82:	6863      	ldr	r3, [r4, #4]
 800bd84:	4650      	mov	r0, sl
 800bd86:	9e01      	ldr	r6, [sp, #4]
 800bd88:	47b0      	blx	r6
 800bd8a:	f8d8 3000 	ldr.w	r3, [r8]
 800bd8e:	6821      	ldr	r1, [r4, #0]
 800bd90:	1d1a      	adds	r2, r3, #4
 800bd92:	f011 0f20 	tst.w	r1, #32
 800bd96:	f8c8 2000 	str.w	r2, [r8]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	d00f      	beq.n	800bdbe <_scanf_i+0x1c6>
 800bd9e:	6018      	str	r0, [r3, #0]
 800bda0:	68e3      	ldr	r3, [r4, #12]
 800bda2:	3301      	adds	r3, #1
 800bda4:	60e3      	str	r3, [r4, #12]
 800bda6:	1bed      	subs	r5, r5, r7
 800bda8:	6923      	ldr	r3, [r4, #16]
 800bdaa:	2000      	movs	r0, #0
 800bdac:	445d      	add	r5, fp
 800bdae:	442b      	add	r3, r5
 800bdb0:	6123      	str	r3, [r4, #16]
 800bdb2:	b007      	add	sp, #28
 800bdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb8:	f04f 0b00 	mov.w	fp, #0
 800bdbc:	e7ca      	b.n	800bd54 <_scanf_i+0x15c>
 800bdbe:	07ca      	lsls	r2, r1, #31
 800bdc0:	bf4c      	ite	mi
 800bdc2:	8018      	strhmi	r0, [r3, #0]
 800bdc4:	6018      	strpl	r0, [r3, #0]
 800bdc6:	e7eb      	b.n	800bda0 <_scanf_i+0x1a8>
 800bdc8:	2001      	movs	r0, #1
 800bdca:	e7f2      	b.n	800bdb2 <_scanf_i+0x1ba>
 800bdcc:	0800cf2c 	.word	0x0800cf2c
 800bdd0:	0800b4f1 	.word	0x0800b4f1
 800bdd4:	0800c8e5 	.word	0x0800c8e5
 800bdd8:	0800d0f8 	.word	0x0800d0f8

0800bddc <__sflush_r>:
 800bddc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde4:	0716      	lsls	r6, r2, #28
 800bde6:	4605      	mov	r5, r0
 800bde8:	460c      	mov	r4, r1
 800bdea:	d454      	bmi.n	800be96 <__sflush_r+0xba>
 800bdec:	684b      	ldr	r3, [r1, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	dc02      	bgt.n	800bdf8 <__sflush_r+0x1c>
 800bdf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	dd48      	ble.n	800be8a <__sflush_r+0xae>
 800bdf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdfa:	2e00      	cmp	r6, #0
 800bdfc:	d045      	beq.n	800be8a <__sflush_r+0xae>
 800bdfe:	2300      	movs	r3, #0
 800be00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be04:	682f      	ldr	r7, [r5, #0]
 800be06:	6a21      	ldr	r1, [r4, #32]
 800be08:	602b      	str	r3, [r5, #0]
 800be0a:	d030      	beq.n	800be6e <__sflush_r+0x92>
 800be0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	0759      	lsls	r1, r3, #29
 800be12:	d505      	bpl.n	800be20 <__sflush_r+0x44>
 800be14:	6863      	ldr	r3, [r4, #4]
 800be16:	1ad2      	subs	r2, r2, r3
 800be18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be1a:	b10b      	cbz	r3, 800be20 <__sflush_r+0x44>
 800be1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be1e:	1ad2      	subs	r2, r2, r3
 800be20:	2300      	movs	r3, #0
 800be22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be24:	6a21      	ldr	r1, [r4, #32]
 800be26:	4628      	mov	r0, r5
 800be28:	47b0      	blx	r6
 800be2a:	1c43      	adds	r3, r0, #1
 800be2c:	89a3      	ldrh	r3, [r4, #12]
 800be2e:	d106      	bne.n	800be3e <__sflush_r+0x62>
 800be30:	6829      	ldr	r1, [r5, #0]
 800be32:	291d      	cmp	r1, #29
 800be34:	d82b      	bhi.n	800be8e <__sflush_r+0xb2>
 800be36:	4a2a      	ldr	r2, [pc, #168]	@ (800bee0 <__sflush_r+0x104>)
 800be38:	40ca      	lsrs	r2, r1
 800be3a:	07d6      	lsls	r6, r2, #31
 800be3c:	d527      	bpl.n	800be8e <__sflush_r+0xb2>
 800be3e:	2200      	movs	r2, #0
 800be40:	04d9      	lsls	r1, r3, #19
 800be42:	6062      	str	r2, [r4, #4]
 800be44:	6922      	ldr	r2, [r4, #16]
 800be46:	6022      	str	r2, [r4, #0]
 800be48:	d504      	bpl.n	800be54 <__sflush_r+0x78>
 800be4a:	1c42      	adds	r2, r0, #1
 800be4c:	d101      	bne.n	800be52 <__sflush_r+0x76>
 800be4e:	682b      	ldr	r3, [r5, #0]
 800be50:	b903      	cbnz	r3, 800be54 <__sflush_r+0x78>
 800be52:	6560      	str	r0, [r4, #84]	@ 0x54
 800be54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be56:	602f      	str	r7, [r5, #0]
 800be58:	b1b9      	cbz	r1, 800be8a <__sflush_r+0xae>
 800be5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be5e:	4299      	cmp	r1, r3
 800be60:	d002      	beq.n	800be68 <__sflush_r+0x8c>
 800be62:	4628      	mov	r0, r5
 800be64:	f7fd ff0a 	bl	8009c7c <_free_r>
 800be68:	2300      	movs	r3, #0
 800be6a:	6363      	str	r3, [r4, #52]	@ 0x34
 800be6c:	e00d      	b.n	800be8a <__sflush_r+0xae>
 800be6e:	2301      	movs	r3, #1
 800be70:	4628      	mov	r0, r5
 800be72:	47b0      	blx	r6
 800be74:	4602      	mov	r2, r0
 800be76:	1c50      	adds	r0, r2, #1
 800be78:	d1c9      	bne.n	800be0e <__sflush_r+0x32>
 800be7a:	682b      	ldr	r3, [r5, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d0c6      	beq.n	800be0e <__sflush_r+0x32>
 800be80:	2b1d      	cmp	r3, #29
 800be82:	d001      	beq.n	800be88 <__sflush_r+0xac>
 800be84:	2b16      	cmp	r3, #22
 800be86:	d11d      	bne.n	800bec4 <__sflush_r+0xe8>
 800be88:	602f      	str	r7, [r5, #0]
 800be8a:	2000      	movs	r0, #0
 800be8c:	e021      	b.n	800bed2 <__sflush_r+0xf6>
 800be8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be92:	b21b      	sxth	r3, r3
 800be94:	e01a      	b.n	800becc <__sflush_r+0xf0>
 800be96:	690f      	ldr	r7, [r1, #16]
 800be98:	2f00      	cmp	r7, #0
 800be9a:	d0f6      	beq.n	800be8a <__sflush_r+0xae>
 800be9c:	0793      	lsls	r3, r2, #30
 800be9e:	680e      	ldr	r6, [r1, #0]
 800bea0:	600f      	str	r7, [r1, #0]
 800bea2:	bf0c      	ite	eq
 800bea4:	694b      	ldreq	r3, [r1, #20]
 800bea6:	2300      	movne	r3, #0
 800bea8:	eba6 0807 	sub.w	r8, r6, r7
 800beac:	608b      	str	r3, [r1, #8]
 800beae:	f1b8 0f00 	cmp.w	r8, #0
 800beb2:	ddea      	ble.n	800be8a <__sflush_r+0xae>
 800beb4:	4643      	mov	r3, r8
 800beb6:	463a      	mov	r2, r7
 800beb8:	6a21      	ldr	r1, [r4, #32]
 800beba:	4628      	mov	r0, r5
 800bebc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bebe:	47b0      	blx	r6
 800bec0:	2800      	cmp	r0, #0
 800bec2:	dc08      	bgt.n	800bed6 <__sflush_r+0xfa>
 800bec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800becc:	f04f 30ff 	mov.w	r0, #4294967295
 800bed0:	81a3      	strh	r3, [r4, #12]
 800bed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bed6:	4407      	add	r7, r0
 800bed8:	eba8 0800 	sub.w	r8, r8, r0
 800bedc:	e7e7      	b.n	800beae <__sflush_r+0xd2>
 800bede:	bf00      	nop
 800bee0:	20400001 	.word	0x20400001

0800bee4 <_fflush_r>:
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	690b      	ldr	r3, [r1, #16]
 800bee8:	4605      	mov	r5, r0
 800beea:	460c      	mov	r4, r1
 800beec:	b913      	cbnz	r3, 800bef4 <_fflush_r+0x10>
 800beee:	2500      	movs	r5, #0
 800bef0:	4628      	mov	r0, r5
 800bef2:	bd38      	pop	{r3, r4, r5, pc}
 800bef4:	b118      	cbz	r0, 800befe <_fflush_r+0x1a>
 800bef6:	6a03      	ldr	r3, [r0, #32]
 800bef8:	b90b      	cbnz	r3, 800befe <_fflush_r+0x1a>
 800befa:	f7fc fea1 	bl	8008c40 <__sinit>
 800befe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d0f3      	beq.n	800beee <_fflush_r+0xa>
 800bf06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf08:	07d0      	lsls	r0, r2, #31
 800bf0a:	d404      	bmi.n	800bf16 <_fflush_r+0x32>
 800bf0c:	0599      	lsls	r1, r3, #22
 800bf0e:	d402      	bmi.n	800bf16 <_fflush_r+0x32>
 800bf10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf12:	f7fd f83a 	bl	8008f8a <__retarget_lock_acquire_recursive>
 800bf16:	4628      	mov	r0, r5
 800bf18:	4621      	mov	r1, r4
 800bf1a:	f7ff ff5f 	bl	800bddc <__sflush_r>
 800bf1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf20:	4605      	mov	r5, r0
 800bf22:	07da      	lsls	r2, r3, #31
 800bf24:	d4e4      	bmi.n	800bef0 <_fflush_r+0xc>
 800bf26:	89a3      	ldrh	r3, [r4, #12]
 800bf28:	059b      	lsls	r3, r3, #22
 800bf2a:	d4e1      	bmi.n	800bef0 <_fflush_r+0xc>
 800bf2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf2e:	f7fd f82d 	bl	8008f8c <__retarget_lock_release_recursive>
 800bf32:	e7dd      	b.n	800bef0 <_fflush_r+0xc>

0800bf34 <__sccl>:
 800bf34:	b570      	push	{r4, r5, r6, lr}
 800bf36:	780b      	ldrb	r3, [r1, #0]
 800bf38:	4604      	mov	r4, r0
 800bf3a:	3801      	subs	r0, #1
 800bf3c:	2b5e      	cmp	r3, #94	@ 0x5e
 800bf3e:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800bf42:	bf13      	iteet	ne
 800bf44:	1c4a      	addne	r2, r1, #1
 800bf46:	1c8a      	addeq	r2, r1, #2
 800bf48:	784b      	ldrbeq	r3, [r1, #1]
 800bf4a:	2100      	movne	r1, #0
 800bf4c:	bf08      	it	eq
 800bf4e:	2101      	moveq	r1, #1
 800bf50:	f800 1f01 	strb.w	r1, [r0, #1]!
 800bf54:	42a8      	cmp	r0, r5
 800bf56:	d1fb      	bne.n	800bf50 <__sccl+0x1c>
 800bf58:	b90b      	cbnz	r3, 800bf5e <__sccl+0x2a>
 800bf5a:	1e50      	subs	r0, r2, #1
 800bf5c:	bd70      	pop	{r4, r5, r6, pc}
 800bf5e:	f081 0101 	eor.w	r1, r1, #1
 800bf62:	4610      	mov	r0, r2
 800bf64:	54e1      	strb	r1, [r4, r3]
 800bf66:	4602      	mov	r2, r0
 800bf68:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bf6c:	2d2d      	cmp	r5, #45	@ 0x2d
 800bf6e:	d005      	beq.n	800bf7c <__sccl+0x48>
 800bf70:	2d5d      	cmp	r5, #93	@ 0x5d
 800bf72:	d016      	beq.n	800bfa2 <__sccl+0x6e>
 800bf74:	2d00      	cmp	r5, #0
 800bf76:	d0f1      	beq.n	800bf5c <__sccl+0x28>
 800bf78:	462b      	mov	r3, r5
 800bf7a:	e7f2      	b.n	800bf62 <__sccl+0x2e>
 800bf7c:	7846      	ldrb	r6, [r0, #1]
 800bf7e:	2e5d      	cmp	r6, #93	@ 0x5d
 800bf80:	d0fa      	beq.n	800bf78 <__sccl+0x44>
 800bf82:	42b3      	cmp	r3, r6
 800bf84:	dcf8      	bgt.n	800bf78 <__sccl+0x44>
 800bf86:	3002      	adds	r0, #2
 800bf88:	461a      	mov	r2, r3
 800bf8a:	3201      	adds	r2, #1
 800bf8c:	4296      	cmp	r6, r2
 800bf8e:	54a1      	strb	r1, [r4, r2]
 800bf90:	dcfb      	bgt.n	800bf8a <__sccl+0x56>
 800bf92:	1af2      	subs	r2, r6, r3
 800bf94:	1c5d      	adds	r5, r3, #1
 800bf96:	3a01      	subs	r2, #1
 800bf98:	42b3      	cmp	r3, r6
 800bf9a:	bfa8      	it	ge
 800bf9c:	2200      	movge	r2, #0
 800bf9e:	18ab      	adds	r3, r5, r2
 800bfa0:	e7e1      	b.n	800bf66 <__sccl+0x32>
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	e7da      	b.n	800bf5c <__sccl+0x28>

0800bfa6 <__submore>:
 800bfa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfaa:	460c      	mov	r4, r1
 800bfac:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bfae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfb2:	4299      	cmp	r1, r3
 800bfb4:	d11a      	bne.n	800bfec <__submore+0x46>
 800bfb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bfba:	f7fd fed3 	bl	8009d64 <_malloc_r>
 800bfbe:	b918      	cbnz	r0, 800bfc8 <__submore+0x22>
 800bfc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bfcc:	6360      	str	r0, [r4, #52]	@ 0x34
 800bfce:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800bfd2:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bfd4:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800bfd8:	7083      	strb	r3, [r0, #2]
 800bfda:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bfde:	7043      	strb	r3, [r0, #1]
 800bfe0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bfe4:	7003      	strb	r3, [r0, #0]
 800bfe6:	6020      	str	r0, [r4, #0]
 800bfe8:	2000      	movs	r0, #0
 800bfea:	e7eb      	b.n	800bfc4 <__submore+0x1e>
 800bfec:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800bfee:	0077      	lsls	r7, r6, #1
 800bff0:	463a      	mov	r2, r7
 800bff2:	f000 fbda 	bl	800c7aa <_realloc_r>
 800bff6:	4605      	mov	r5, r0
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d0e1      	beq.n	800bfc0 <__submore+0x1a>
 800bffc:	eb00 0806 	add.w	r8, r0, r6
 800c000:	4601      	mov	r1, r0
 800c002:	4632      	mov	r2, r6
 800c004:	4640      	mov	r0, r8
 800c006:	f000 f841 	bl	800c08c <memcpy>
 800c00a:	f8c4 8000 	str.w	r8, [r4]
 800c00e:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c012:	e7e9      	b.n	800bfe8 <__submore+0x42>

0800c014 <memmove>:
 800c014:	4288      	cmp	r0, r1
 800c016:	b510      	push	{r4, lr}
 800c018:	eb01 0402 	add.w	r4, r1, r2
 800c01c:	d902      	bls.n	800c024 <memmove+0x10>
 800c01e:	4284      	cmp	r4, r0
 800c020:	4623      	mov	r3, r4
 800c022:	d807      	bhi.n	800c034 <memmove+0x20>
 800c024:	1e43      	subs	r3, r0, #1
 800c026:	42a1      	cmp	r1, r4
 800c028:	d008      	beq.n	800c03c <memmove+0x28>
 800c02a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c02e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c032:	e7f8      	b.n	800c026 <memmove+0x12>
 800c034:	4402      	add	r2, r0
 800c036:	4601      	mov	r1, r0
 800c038:	428a      	cmp	r2, r1
 800c03a:	d100      	bne.n	800c03e <memmove+0x2a>
 800c03c:	bd10      	pop	{r4, pc}
 800c03e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c046:	e7f7      	b.n	800c038 <memmove+0x24>

0800c048 <strncmp>:
 800c048:	b510      	push	{r4, lr}
 800c04a:	b16a      	cbz	r2, 800c068 <strncmp+0x20>
 800c04c:	3901      	subs	r1, #1
 800c04e:	1884      	adds	r4, r0, r2
 800c050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c054:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c058:	429a      	cmp	r2, r3
 800c05a:	d103      	bne.n	800c064 <strncmp+0x1c>
 800c05c:	42a0      	cmp	r0, r4
 800c05e:	d001      	beq.n	800c064 <strncmp+0x1c>
 800c060:	2a00      	cmp	r2, #0
 800c062:	d1f5      	bne.n	800c050 <strncmp+0x8>
 800c064:	1ad0      	subs	r0, r2, r3
 800c066:	bd10      	pop	{r4, pc}
 800c068:	4610      	mov	r0, r2
 800c06a:	e7fc      	b.n	800c066 <strncmp+0x1e>

0800c06c <_sbrk_r>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	2300      	movs	r3, #0
 800c070:	4d05      	ldr	r5, [pc, #20]	@ (800c088 <_sbrk_r+0x1c>)
 800c072:	4604      	mov	r4, r0
 800c074:	4608      	mov	r0, r1
 800c076:	602b      	str	r3, [r5, #0]
 800c078:	f7f5 fdf8 	bl	8001c6c <_sbrk>
 800c07c:	1c43      	adds	r3, r0, #1
 800c07e:	d102      	bne.n	800c086 <_sbrk_r+0x1a>
 800c080:	682b      	ldr	r3, [r5, #0]
 800c082:	b103      	cbz	r3, 800c086 <_sbrk_r+0x1a>
 800c084:	6023      	str	r3, [r4, #0]
 800c086:	bd38      	pop	{r3, r4, r5, pc}
 800c088:	200004c0 	.word	0x200004c0

0800c08c <memcpy>:
 800c08c:	440a      	add	r2, r1
 800c08e:	1e43      	subs	r3, r0, #1
 800c090:	4291      	cmp	r1, r2
 800c092:	d100      	bne.n	800c096 <memcpy+0xa>
 800c094:	4770      	bx	lr
 800c096:	b510      	push	{r4, lr}
 800c098:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c09c:	4291      	cmp	r1, r2
 800c09e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0a2:	d1f9      	bne.n	800c098 <memcpy+0xc>
 800c0a4:	bd10      	pop	{r4, pc}
	...

0800c0a8 <nan>:
 800c0a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c0b0 <nan+0x8>
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	00000000 	.word	0x00000000
 800c0b4:	7ff80000 	.word	0x7ff80000

0800c0b8 <__assert_func>:
 800c0b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0ba:	4614      	mov	r4, r2
 800c0bc:	461a      	mov	r2, r3
 800c0be:	4b09      	ldr	r3, [pc, #36]	@ (800c0e4 <__assert_func+0x2c>)
 800c0c0:	4605      	mov	r5, r0
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	68d8      	ldr	r0, [r3, #12]
 800c0c6:	b14c      	cbz	r4, 800c0dc <__assert_func+0x24>
 800c0c8:	4b07      	ldr	r3, [pc, #28]	@ (800c0e8 <__assert_func+0x30>)
 800c0ca:	9100      	str	r1, [sp, #0]
 800c0cc:	4907      	ldr	r1, [pc, #28]	@ (800c0ec <__assert_func+0x34>)
 800c0ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0d2:	462b      	mov	r3, r5
 800c0d4:	f000 fc16 	bl	800c904 <fiprintf>
 800c0d8:	f000 fc26 	bl	800c928 <abort>
 800c0dc:	4b04      	ldr	r3, [pc, #16]	@ (800c0f0 <__assert_func+0x38>)
 800c0de:	461c      	mov	r4, r3
 800c0e0:	e7f3      	b.n	800c0ca <__assert_func+0x12>
 800c0e2:	bf00      	nop
 800c0e4:	20000018 	.word	0x20000018
 800c0e8:	0800d10b 	.word	0x0800d10b
 800c0ec:	0800d118 	.word	0x0800d118
 800c0f0:	0800d146 	.word	0x0800d146

0800c0f4 <_calloc_r>:
 800c0f4:	b570      	push	{r4, r5, r6, lr}
 800c0f6:	fba1 5402 	umull	r5, r4, r1, r2
 800c0fa:	b934      	cbnz	r4, 800c10a <_calloc_r+0x16>
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	f7fd fe31 	bl	8009d64 <_malloc_r>
 800c102:	4606      	mov	r6, r0
 800c104:	b928      	cbnz	r0, 800c112 <_calloc_r+0x1e>
 800c106:	4630      	mov	r0, r6
 800c108:	bd70      	pop	{r4, r5, r6, pc}
 800c10a:	220c      	movs	r2, #12
 800c10c:	2600      	movs	r6, #0
 800c10e:	6002      	str	r2, [r0, #0]
 800c110:	e7f9      	b.n	800c106 <_calloc_r+0x12>
 800c112:	462a      	mov	r2, r5
 800c114:	4621      	mov	r1, r4
 800c116:	f7fc fe92 	bl	8008e3e <memset>
 800c11a:	e7f4      	b.n	800c106 <_calloc_r+0x12>

0800c11c <rshift>:
 800c11c:	6903      	ldr	r3, [r0, #16]
 800c11e:	114a      	asrs	r2, r1, #5
 800c120:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c128:	f100 0414 	add.w	r4, r0, #20
 800c12c:	dd45      	ble.n	800c1ba <rshift+0x9e>
 800c12e:	f011 011f 	ands.w	r1, r1, #31
 800c132:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c136:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c13a:	d10c      	bne.n	800c156 <rshift+0x3a>
 800c13c:	f100 0710 	add.w	r7, r0, #16
 800c140:	4629      	mov	r1, r5
 800c142:	42b1      	cmp	r1, r6
 800c144:	d334      	bcc.n	800c1b0 <rshift+0x94>
 800c146:	1a9b      	subs	r3, r3, r2
 800c148:	1eea      	subs	r2, r5, #3
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	4296      	cmp	r6, r2
 800c14e:	bf38      	it	cc
 800c150:	2300      	movcc	r3, #0
 800c152:	4423      	add	r3, r4
 800c154:	e015      	b.n	800c182 <rshift+0x66>
 800c156:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c15a:	f1c1 0820 	rsb	r8, r1, #32
 800c15e:	f105 0e04 	add.w	lr, r5, #4
 800c162:	46a1      	mov	r9, r4
 800c164:	40cf      	lsrs	r7, r1
 800c166:	4576      	cmp	r6, lr
 800c168:	46f4      	mov	ip, lr
 800c16a:	d815      	bhi.n	800c198 <rshift+0x7c>
 800c16c:	1a9a      	subs	r2, r3, r2
 800c16e:	3501      	adds	r5, #1
 800c170:	0092      	lsls	r2, r2, #2
 800c172:	3a04      	subs	r2, #4
 800c174:	42ae      	cmp	r6, r5
 800c176:	bf38      	it	cc
 800c178:	2200      	movcc	r2, #0
 800c17a:	18a3      	adds	r3, r4, r2
 800c17c:	50a7      	str	r7, [r4, r2]
 800c17e:	b107      	cbz	r7, 800c182 <rshift+0x66>
 800c180:	3304      	adds	r3, #4
 800c182:	1b1a      	subs	r2, r3, r4
 800c184:	42a3      	cmp	r3, r4
 800c186:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c18a:	bf08      	it	eq
 800c18c:	2300      	moveq	r3, #0
 800c18e:	6102      	str	r2, [r0, #16]
 800c190:	bf08      	it	eq
 800c192:	6143      	streq	r3, [r0, #20]
 800c194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c198:	f8dc c000 	ldr.w	ip, [ip]
 800c19c:	fa0c fc08 	lsl.w	ip, ip, r8
 800c1a0:	ea4c 0707 	orr.w	r7, ip, r7
 800c1a4:	f849 7b04 	str.w	r7, [r9], #4
 800c1a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c1ac:	40cf      	lsrs	r7, r1
 800c1ae:	e7da      	b.n	800c166 <rshift+0x4a>
 800c1b0:	f851 cb04 	ldr.w	ip, [r1], #4
 800c1b4:	f847 cf04 	str.w	ip, [r7, #4]!
 800c1b8:	e7c3      	b.n	800c142 <rshift+0x26>
 800c1ba:	4623      	mov	r3, r4
 800c1bc:	e7e1      	b.n	800c182 <rshift+0x66>

0800c1be <__hexdig_fun>:
 800c1be:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c1c2:	2b09      	cmp	r3, #9
 800c1c4:	d802      	bhi.n	800c1cc <__hexdig_fun+0xe>
 800c1c6:	3820      	subs	r0, #32
 800c1c8:	b2c0      	uxtb	r0, r0
 800c1ca:	4770      	bx	lr
 800c1cc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c1d0:	2b05      	cmp	r3, #5
 800c1d2:	d801      	bhi.n	800c1d8 <__hexdig_fun+0x1a>
 800c1d4:	3847      	subs	r0, #71	@ 0x47
 800c1d6:	e7f7      	b.n	800c1c8 <__hexdig_fun+0xa>
 800c1d8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c1dc:	2b05      	cmp	r3, #5
 800c1de:	d801      	bhi.n	800c1e4 <__hexdig_fun+0x26>
 800c1e0:	3827      	subs	r0, #39	@ 0x27
 800c1e2:	e7f1      	b.n	800c1c8 <__hexdig_fun+0xa>
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	4770      	bx	lr

0800c1e8 <__gethex>:
 800c1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ec:	b085      	sub	sp, #20
 800c1ee:	468a      	mov	sl, r1
 800c1f0:	4690      	mov	r8, r2
 800c1f2:	9302      	str	r3, [sp, #8]
 800c1f4:	680b      	ldr	r3, [r1, #0]
 800c1f6:	9001      	str	r0, [sp, #4]
 800c1f8:	1c9c      	adds	r4, r3, #2
 800c1fa:	46a1      	mov	r9, r4
 800c1fc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c200:	2830      	cmp	r0, #48	@ 0x30
 800c202:	d0fa      	beq.n	800c1fa <__gethex+0x12>
 800c204:	eba9 0303 	sub.w	r3, r9, r3
 800c208:	f1a3 0b02 	sub.w	fp, r3, #2
 800c20c:	f7ff ffd7 	bl	800c1be <__hexdig_fun>
 800c210:	4605      	mov	r5, r0
 800c212:	2800      	cmp	r0, #0
 800c214:	d166      	bne.n	800c2e4 <__gethex+0xfc>
 800c216:	2201      	movs	r2, #1
 800c218:	499e      	ldr	r1, [pc, #632]	@ (800c494 <__gethex+0x2ac>)
 800c21a:	4648      	mov	r0, r9
 800c21c:	f7ff ff14 	bl	800c048 <strncmp>
 800c220:	4607      	mov	r7, r0
 800c222:	2800      	cmp	r0, #0
 800c224:	d165      	bne.n	800c2f2 <__gethex+0x10a>
 800c226:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c22a:	4626      	mov	r6, r4
 800c22c:	f7ff ffc7 	bl	800c1be <__hexdig_fun>
 800c230:	2800      	cmp	r0, #0
 800c232:	d060      	beq.n	800c2f6 <__gethex+0x10e>
 800c234:	4623      	mov	r3, r4
 800c236:	7818      	ldrb	r0, [r3, #0]
 800c238:	4699      	mov	r9, r3
 800c23a:	3301      	adds	r3, #1
 800c23c:	2830      	cmp	r0, #48	@ 0x30
 800c23e:	d0fa      	beq.n	800c236 <__gethex+0x4e>
 800c240:	f7ff ffbd 	bl	800c1be <__hexdig_fun>
 800c244:	fab0 f580 	clz	r5, r0
 800c248:	f04f 0b01 	mov.w	fp, #1
 800c24c:	096d      	lsrs	r5, r5, #5
 800c24e:	464a      	mov	r2, r9
 800c250:	4616      	mov	r6, r2
 800c252:	3201      	adds	r2, #1
 800c254:	7830      	ldrb	r0, [r6, #0]
 800c256:	f7ff ffb2 	bl	800c1be <__hexdig_fun>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	d1f8      	bne.n	800c250 <__gethex+0x68>
 800c25e:	2201      	movs	r2, #1
 800c260:	498c      	ldr	r1, [pc, #560]	@ (800c494 <__gethex+0x2ac>)
 800c262:	4630      	mov	r0, r6
 800c264:	f7ff fef0 	bl	800c048 <strncmp>
 800c268:	2800      	cmp	r0, #0
 800c26a:	d13e      	bne.n	800c2ea <__gethex+0x102>
 800c26c:	b944      	cbnz	r4, 800c280 <__gethex+0x98>
 800c26e:	1c74      	adds	r4, r6, #1
 800c270:	4622      	mov	r2, r4
 800c272:	4616      	mov	r6, r2
 800c274:	3201      	adds	r2, #1
 800c276:	7830      	ldrb	r0, [r6, #0]
 800c278:	f7ff ffa1 	bl	800c1be <__hexdig_fun>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d1f8      	bne.n	800c272 <__gethex+0x8a>
 800c280:	1ba4      	subs	r4, r4, r6
 800c282:	00a7      	lsls	r7, r4, #2
 800c284:	7833      	ldrb	r3, [r6, #0]
 800c286:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c28a:	2b50      	cmp	r3, #80	@ 0x50
 800c28c:	d13d      	bne.n	800c30a <__gethex+0x122>
 800c28e:	7873      	ldrb	r3, [r6, #1]
 800c290:	2b2b      	cmp	r3, #43	@ 0x2b
 800c292:	d032      	beq.n	800c2fa <__gethex+0x112>
 800c294:	2b2d      	cmp	r3, #45	@ 0x2d
 800c296:	d033      	beq.n	800c300 <__gethex+0x118>
 800c298:	1c71      	adds	r1, r6, #1
 800c29a:	2400      	movs	r4, #0
 800c29c:	7808      	ldrb	r0, [r1, #0]
 800c29e:	f7ff ff8e 	bl	800c1be <__hexdig_fun>
 800c2a2:	1e43      	subs	r3, r0, #1
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	2b18      	cmp	r3, #24
 800c2a8:	d82f      	bhi.n	800c30a <__gethex+0x122>
 800c2aa:	f1a0 0210 	sub.w	r2, r0, #16
 800c2ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c2b2:	f7ff ff84 	bl	800c1be <__hexdig_fun>
 800c2b6:	f100 3cff 	add.w	ip, r0, #4294967295
 800c2ba:	230a      	movs	r3, #10
 800c2bc:	fa5f fc8c 	uxtb.w	ip, ip
 800c2c0:	f1bc 0f18 	cmp.w	ip, #24
 800c2c4:	d91e      	bls.n	800c304 <__gethex+0x11c>
 800c2c6:	b104      	cbz	r4, 800c2ca <__gethex+0xe2>
 800c2c8:	4252      	negs	r2, r2
 800c2ca:	4417      	add	r7, r2
 800c2cc:	f8ca 1000 	str.w	r1, [sl]
 800c2d0:	b1ed      	cbz	r5, 800c30e <__gethex+0x126>
 800c2d2:	f1bb 0f00 	cmp.w	fp, #0
 800c2d6:	bf0c      	ite	eq
 800c2d8:	2506      	moveq	r5, #6
 800c2da:	2500      	movne	r5, #0
 800c2dc:	4628      	mov	r0, r5
 800c2de:	b005      	add	sp, #20
 800c2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e4:	2500      	movs	r5, #0
 800c2e6:	462c      	mov	r4, r5
 800c2e8:	e7b1      	b.n	800c24e <__gethex+0x66>
 800c2ea:	2c00      	cmp	r4, #0
 800c2ec:	d1c8      	bne.n	800c280 <__gethex+0x98>
 800c2ee:	4627      	mov	r7, r4
 800c2f0:	e7c8      	b.n	800c284 <__gethex+0x9c>
 800c2f2:	464e      	mov	r6, r9
 800c2f4:	462f      	mov	r7, r5
 800c2f6:	2501      	movs	r5, #1
 800c2f8:	e7c4      	b.n	800c284 <__gethex+0x9c>
 800c2fa:	2400      	movs	r4, #0
 800c2fc:	1cb1      	adds	r1, r6, #2
 800c2fe:	e7cd      	b.n	800c29c <__gethex+0xb4>
 800c300:	2401      	movs	r4, #1
 800c302:	e7fb      	b.n	800c2fc <__gethex+0x114>
 800c304:	fb03 0002 	mla	r0, r3, r2, r0
 800c308:	e7cf      	b.n	800c2aa <__gethex+0xc2>
 800c30a:	4631      	mov	r1, r6
 800c30c:	e7de      	b.n	800c2cc <__gethex+0xe4>
 800c30e:	eba6 0309 	sub.w	r3, r6, r9
 800c312:	4629      	mov	r1, r5
 800c314:	3b01      	subs	r3, #1
 800c316:	2b07      	cmp	r3, #7
 800c318:	dc0a      	bgt.n	800c330 <__gethex+0x148>
 800c31a:	9801      	ldr	r0, [sp, #4]
 800c31c:	f7fd fdae 	bl	8009e7c <_Balloc>
 800c320:	4604      	mov	r4, r0
 800c322:	b940      	cbnz	r0, 800c336 <__gethex+0x14e>
 800c324:	4b5c      	ldr	r3, [pc, #368]	@ (800c498 <__gethex+0x2b0>)
 800c326:	4602      	mov	r2, r0
 800c328:	21e4      	movs	r1, #228	@ 0xe4
 800c32a:	485c      	ldr	r0, [pc, #368]	@ (800c49c <__gethex+0x2b4>)
 800c32c:	f7ff fec4 	bl	800c0b8 <__assert_func>
 800c330:	3101      	adds	r1, #1
 800c332:	105b      	asrs	r3, r3, #1
 800c334:	e7ef      	b.n	800c316 <__gethex+0x12e>
 800c336:	f100 0a14 	add.w	sl, r0, #20
 800c33a:	2300      	movs	r3, #0
 800c33c:	4655      	mov	r5, sl
 800c33e:	469b      	mov	fp, r3
 800c340:	45b1      	cmp	r9, r6
 800c342:	d337      	bcc.n	800c3b4 <__gethex+0x1cc>
 800c344:	f845 bb04 	str.w	fp, [r5], #4
 800c348:	eba5 050a 	sub.w	r5, r5, sl
 800c34c:	4658      	mov	r0, fp
 800c34e:	10ad      	asrs	r5, r5, #2
 800c350:	6125      	str	r5, [r4, #16]
 800c352:	016d      	lsls	r5, r5, #5
 800c354:	f7fd fe86 	bl	800a064 <__hi0bits>
 800c358:	f8d8 6000 	ldr.w	r6, [r8]
 800c35c:	1a2d      	subs	r5, r5, r0
 800c35e:	42b5      	cmp	r5, r6
 800c360:	dd54      	ble.n	800c40c <__gethex+0x224>
 800c362:	1bad      	subs	r5, r5, r6
 800c364:	4620      	mov	r0, r4
 800c366:	4629      	mov	r1, r5
 800c368:	f7fe fa1d 	bl	800a7a6 <__any_on>
 800c36c:	4681      	mov	r9, r0
 800c36e:	b178      	cbz	r0, 800c390 <__gethex+0x1a8>
 800c370:	1e6b      	subs	r3, r5, #1
 800c372:	f04f 0901 	mov.w	r9, #1
 800c376:	1159      	asrs	r1, r3, #5
 800c378:	f003 021f 	and.w	r2, r3, #31
 800c37c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c380:	fa09 f202 	lsl.w	r2, r9, r2
 800c384:	420a      	tst	r2, r1
 800c386:	d003      	beq.n	800c390 <__gethex+0x1a8>
 800c388:	454b      	cmp	r3, r9
 800c38a:	dc36      	bgt.n	800c3fa <__gethex+0x212>
 800c38c:	f04f 0902 	mov.w	r9, #2
 800c390:	442f      	add	r7, r5
 800c392:	4629      	mov	r1, r5
 800c394:	4620      	mov	r0, r4
 800c396:	f7ff fec1 	bl	800c11c <rshift>
 800c39a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c39e:	42bb      	cmp	r3, r7
 800c3a0:	da42      	bge.n	800c428 <__gethex+0x240>
 800c3a2:	4621      	mov	r1, r4
 800c3a4:	9801      	ldr	r0, [sp, #4]
 800c3a6:	f7fd fda9 	bl	8009efc <_Bfree>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3ae:	25a3      	movs	r5, #163	@ 0xa3
 800c3b0:	6013      	str	r3, [r2, #0]
 800c3b2:	e793      	b.n	800c2dc <__gethex+0xf4>
 800c3b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c3b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c3ba:	d012      	beq.n	800c3e2 <__gethex+0x1fa>
 800c3bc:	2b20      	cmp	r3, #32
 800c3be:	d104      	bne.n	800c3ca <__gethex+0x1e2>
 800c3c0:	f845 bb04 	str.w	fp, [r5], #4
 800c3c4:	f04f 0b00 	mov.w	fp, #0
 800c3c8:	465b      	mov	r3, fp
 800c3ca:	7830      	ldrb	r0, [r6, #0]
 800c3cc:	9303      	str	r3, [sp, #12]
 800c3ce:	f7ff fef6 	bl	800c1be <__hexdig_fun>
 800c3d2:	9b03      	ldr	r3, [sp, #12]
 800c3d4:	f000 000f 	and.w	r0, r0, #15
 800c3d8:	4098      	lsls	r0, r3
 800c3da:	3304      	adds	r3, #4
 800c3dc:	ea4b 0b00 	orr.w	fp, fp, r0
 800c3e0:	e7ae      	b.n	800c340 <__gethex+0x158>
 800c3e2:	45b1      	cmp	r9, r6
 800c3e4:	d8ea      	bhi.n	800c3bc <__gethex+0x1d4>
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	492a      	ldr	r1, [pc, #168]	@ (800c494 <__gethex+0x2ac>)
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	9303      	str	r3, [sp, #12]
 800c3ee:	f7ff fe2b 	bl	800c048 <strncmp>
 800c3f2:	9b03      	ldr	r3, [sp, #12]
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d1e1      	bne.n	800c3bc <__gethex+0x1d4>
 800c3f8:	e7a2      	b.n	800c340 <__gethex+0x158>
 800c3fa:	1ea9      	subs	r1, r5, #2
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f7fe f9d2 	bl	800a7a6 <__any_on>
 800c402:	2800      	cmp	r0, #0
 800c404:	d0c2      	beq.n	800c38c <__gethex+0x1a4>
 800c406:	f04f 0903 	mov.w	r9, #3
 800c40a:	e7c1      	b.n	800c390 <__gethex+0x1a8>
 800c40c:	da09      	bge.n	800c422 <__gethex+0x23a>
 800c40e:	1b75      	subs	r5, r6, r5
 800c410:	4621      	mov	r1, r4
 800c412:	9801      	ldr	r0, [sp, #4]
 800c414:	462a      	mov	r2, r5
 800c416:	1b7f      	subs	r7, r7, r5
 800c418:	f7fd ff84 	bl	800a324 <__lshift>
 800c41c:	4604      	mov	r4, r0
 800c41e:	f100 0a14 	add.w	sl, r0, #20
 800c422:	f04f 0900 	mov.w	r9, #0
 800c426:	e7b8      	b.n	800c39a <__gethex+0x1b2>
 800c428:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c42c:	42bd      	cmp	r5, r7
 800c42e:	dd6f      	ble.n	800c510 <__gethex+0x328>
 800c430:	1bed      	subs	r5, r5, r7
 800c432:	42ae      	cmp	r6, r5
 800c434:	dc34      	bgt.n	800c4a0 <__gethex+0x2b8>
 800c436:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c43a:	2b02      	cmp	r3, #2
 800c43c:	d022      	beq.n	800c484 <__gethex+0x29c>
 800c43e:	2b03      	cmp	r3, #3
 800c440:	d024      	beq.n	800c48c <__gethex+0x2a4>
 800c442:	2b01      	cmp	r3, #1
 800c444:	d115      	bne.n	800c472 <__gethex+0x28a>
 800c446:	42ae      	cmp	r6, r5
 800c448:	d113      	bne.n	800c472 <__gethex+0x28a>
 800c44a:	2e01      	cmp	r6, #1
 800c44c:	d10b      	bne.n	800c466 <__gethex+0x27e>
 800c44e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c452:	2562      	movs	r5, #98	@ 0x62
 800c454:	9a02      	ldr	r2, [sp, #8]
 800c456:	6013      	str	r3, [r2, #0]
 800c458:	2301      	movs	r3, #1
 800c45a:	6123      	str	r3, [r4, #16]
 800c45c:	f8ca 3000 	str.w	r3, [sl]
 800c460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c462:	601c      	str	r4, [r3, #0]
 800c464:	e73a      	b.n	800c2dc <__gethex+0xf4>
 800c466:	1e71      	subs	r1, r6, #1
 800c468:	4620      	mov	r0, r4
 800c46a:	f7fe f99c 	bl	800a7a6 <__any_on>
 800c46e:	2800      	cmp	r0, #0
 800c470:	d1ed      	bne.n	800c44e <__gethex+0x266>
 800c472:	4621      	mov	r1, r4
 800c474:	9801      	ldr	r0, [sp, #4]
 800c476:	f7fd fd41 	bl	8009efc <_Bfree>
 800c47a:	2300      	movs	r3, #0
 800c47c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c47e:	2550      	movs	r5, #80	@ 0x50
 800c480:	6013      	str	r3, [r2, #0]
 800c482:	e72b      	b.n	800c2dc <__gethex+0xf4>
 800c484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1f3      	bne.n	800c472 <__gethex+0x28a>
 800c48a:	e7e0      	b.n	800c44e <__gethex+0x266>
 800c48c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1dd      	bne.n	800c44e <__gethex+0x266>
 800c492:	e7ee      	b.n	800c472 <__gethex+0x28a>
 800c494:	0800d0d5 	.word	0x0800d0d5
 800c498:	0800d06b 	.word	0x0800d06b
 800c49c:	0800d147 	.word	0x0800d147
 800c4a0:	1e6f      	subs	r7, r5, #1
 800c4a2:	f1b9 0f00 	cmp.w	r9, #0
 800c4a6:	d130      	bne.n	800c50a <__gethex+0x322>
 800c4a8:	b127      	cbz	r7, 800c4b4 <__gethex+0x2cc>
 800c4aa:	4639      	mov	r1, r7
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f7fe f97a 	bl	800a7a6 <__any_on>
 800c4b2:	4681      	mov	r9, r0
 800c4b4:	117a      	asrs	r2, r7, #5
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	f007 071f 	and.w	r7, r7, #31
 800c4bc:	4629      	mov	r1, r5
 800c4be:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	40bb      	lsls	r3, r7
 800c4c6:	1b76      	subs	r6, r6, r5
 800c4c8:	2502      	movs	r5, #2
 800c4ca:	4213      	tst	r3, r2
 800c4cc:	bf18      	it	ne
 800c4ce:	f049 0902 	orrne.w	r9, r9, #2
 800c4d2:	f7ff fe23 	bl	800c11c <rshift>
 800c4d6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c4da:	f1b9 0f00 	cmp.w	r9, #0
 800c4de:	d047      	beq.n	800c570 <__gethex+0x388>
 800c4e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	d015      	beq.n	800c514 <__gethex+0x32c>
 800c4e8:	2b03      	cmp	r3, #3
 800c4ea:	d017      	beq.n	800c51c <__gethex+0x334>
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d109      	bne.n	800c504 <__gethex+0x31c>
 800c4f0:	f019 0f02 	tst.w	r9, #2
 800c4f4:	d006      	beq.n	800c504 <__gethex+0x31c>
 800c4f6:	f8da 3000 	ldr.w	r3, [sl]
 800c4fa:	ea49 0903 	orr.w	r9, r9, r3
 800c4fe:	f019 0f01 	tst.w	r9, #1
 800c502:	d10e      	bne.n	800c522 <__gethex+0x33a>
 800c504:	f045 0510 	orr.w	r5, r5, #16
 800c508:	e032      	b.n	800c570 <__gethex+0x388>
 800c50a:	f04f 0901 	mov.w	r9, #1
 800c50e:	e7d1      	b.n	800c4b4 <__gethex+0x2cc>
 800c510:	2501      	movs	r5, #1
 800c512:	e7e2      	b.n	800c4da <__gethex+0x2f2>
 800c514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c516:	f1c3 0301 	rsb	r3, r3, #1
 800c51a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c51c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d0f0      	beq.n	800c504 <__gethex+0x31c>
 800c522:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c526:	f104 0314 	add.w	r3, r4, #20
 800c52a:	f04f 0c00 	mov.w	ip, #0
 800c52e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c532:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c536:	4618      	mov	r0, r3
 800c538:	f853 2b04 	ldr.w	r2, [r3], #4
 800c53c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c540:	d01b      	beq.n	800c57a <__gethex+0x392>
 800c542:	3201      	adds	r2, #1
 800c544:	6002      	str	r2, [r0, #0]
 800c546:	2d02      	cmp	r5, #2
 800c548:	f104 0314 	add.w	r3, r4, #20
 800c54c:	d13c      	bne.n	800c5c8 <__gethex+0x3e0>
 800c54e:	f8d8 2000 	ldr.w	r2, [r8]
 800c552:	3a01      	subs	r2, #1
 800c554:	42b2      	cmp	r2, r6
 800c556:	d109      	bne.n	800c56c <__gethex+0x384>
 800c558:	1171      	asrs	r1, r6, #5
 800c55a:	2201      	movs	r2, #1
 800c55c:	f006 061f 	and.w	r6, r6, #31
 800c560:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c564:	fa02 f606 	lsl.w	r6, r2, r6
 800c568:	421e      	tst	r6, r3
 800c56a:	d13a      	bne.n	800c5e2 <__gethex+0x3fa>
 800c56c:	f045 0520 	orr.w	r5, r5, #32
 800c570:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c572:	601c      	str	r4, [r3, #0]
 800c574:	9b02      	ldr	r3, [sp, #8]
 800c576:	601f      	str	r7, [r3, #0]
 800c578:	e6b0      	b.n	800c2dc <__gethex+0xf4>
 800c57a:	4299      	cmp	r1, r3
 800c57c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c580:	d8d9      	bhi.n	800c536 <__gethex+0x34e>
 800c582:	68a3      	ldr	r3, [r4, #8]
 800c584:	459b      	cmp	fp, r3
 800c586:	db17      	blt.n	800c5b8 <__gethex+0x3d0>
 800c588:	6861      	ldr	r1, [r4, #4]
 800c58a:	9801      	ldr	r0, [sp, #4]
 800c58c:	3101      	adds	r1, #1
 800c58e:	f7fd fc75 	bl	8009e7c <_Balloc>
 800c592:	4681      	mov	r9, r0
 800c594:	b918      	cbnz	r0, 800c59e <__gethex+0x3b6>
 800c596:	4b1a      	ldr	r3, [pc, #104]	@ (800c600 <__gethex+0x418>)
 800c598:	4602      	mov	r2, r0
 800c59a:	2184      	movs	r1, #132	@ 0x84
 800c59c:	e6c5      	b.n	800c32a <__gethex+0x142>
 800c59e:	6922      	ldr	r2, [r4, #16]
 800c5a0:	f104 010c 	add.w	r1, r4, #12
 800c5a4:	300c      	adds	r0, #12
 800c5a6:	3202      	adds	r2, #2
 800c5a8:	0092      	lsls	r2, r2, #2
 800c5aa:	f7ff fd6f 	bl	800c08c <memcpy>
 800c5ae:	4621      	mov	r1, r4
 800c5b0:	464c      	mov	r4, r9
 800c5b2:	9801      	ldr	r0, [sp, #4]
 800c5b4:	f7fd fca2 	bl	8009efc <_Bfree>
 800c5b8:	6923      	ldr	r3, [r4, #16]
 800c5ba:	1c5a      	adds	r2, r3, #1
 800c5bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c5c0:	6122      	str	r2, [r4, #16]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	615a      	str	r2, [r3, #20]
 800c5c6:	e7be      	b.n	800c546 <__gethex+0x35e>
 800c5c8:	6922      	ldr	r2, [r4, #16]
 800c5ca:	455a      	cmp	r2, fp
 800c5cc:	dd0b      	ble.n	800c5e6 <__gethex+0x3fe>
 800c5ce:	2101      	movs	r1, #1
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f7ff fda3 	bl	800c11c <rshift>
 800c5d6:	3701      	adds	r7, #1
 800c5d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5dc:	42bb      	cmp	r3, r7
 800c5de:	f6ff aee0 	blt.w	800c3a2 <__gethex+0x1ba>
 800c5e2:	2501      	movs	r5, #1
 800c5e4:	e7c2      	b.n	800c56c <__gethex+0x384>
 800c5e6:	f016 061f 	ands.w	r6, r6, #31
 800c5ea:	d0fa      	beq.n	800c5e2 <__gethex+0x3fa>
 800c5ec:	4453      	add	r3, sl
 800c5ee:	f1c6 0620 	rsb	r6, r6, #32
 800c5f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c5f6:	f7fd fd35 	bl	800a064 <__hi0bits>
 800c5fa:	42b0      	cmp	r0, r6
 800c5fc:	dbe7      	blt.n	800c5ce <__gethex+0x3e6>
 800c5fe:	e7f0      	b.n	800c5e2 <__gethex+0x3fa>
 800c600:	0800d06b 	.word	0x0800d06b

0800c604 <L_shift>:
 800c604:	f1c2 0208 	rsb	r2, r2, #8
 800c608:	0092      	lsls	r2, r2, #2
 800c60a:	b570      	push	{r4, r5, r6, lr}
 800c60c:	f1c2 0620 	rsb	r6, r2, #32
 800c610:	6843      	ldr	r3, [r0, #4]
 800c612:	6804      	ldr	r4, [r0, #0]
 800c614:	fa03 f506 	lsl.w	r5, r3, r6
 800c618:	40d3      	lsrs	r3, r2
 800c61a:	432c      	orrs	r4, r5
 800c61c:	6004      	str	r4, [r0, #0]
 800c61e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c622:	4288      	cmp	r0, r1
 800c624:	d3f4      	bcc.n	800c610 <L_shift+0xc>
 800c626:	bd70      	pop	{r4, r5, r6, pc}

0800c628 <__match>:
 800c628:	6803      	ldr	r3, [r0, #0]
 800c62a:	3301      	adds	r3, #1
 800c62c:	b530      	push	{r4, r5, lr}
 800c62e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c632:	b914      	cbnz	r4, 800c63a <__match+0x12>
 800c634:	6003      	str	r3, [r0, #0]
 800c636:	2001      	movs	r0, #1
 800c638:	bd30      	pop	{r4, r5, pc}
 800c63a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c63e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c642:	2d19      	cmp	r5, #25
 800c644:	bf98      	it	ls
 800c646:	3220      	addls	r2, #32
 800c648:	42a2      	cmp	r2, r4
 800c64a:	d0f0      	beq.n	800c62e <__match+0x6>
 800c64c:	2000      	movs	r0, #0
 800c64e:	e7f3      	b.n	800c638 <__match+0x10>

0800c650 <__hexnan>:
 800c650:	680b      	ldr	r3, [r1, #0]
 800c652:	6801      	ldr	r1, [r0, #0]
 800c654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c658:	115e      	asrs	r6, r3, #5
 800c65a:	f013 031f 	ands.w	r3, r3, #31
 800c65e:	f04f 0500 	mov.w	r5, #0
 800c662:	b087      	sub	sp, #28
 800c664:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c668:	4682      	mov	sl, r0
 800c66a:	4690      	mov	r8, r2
 800c66c:	46ab      	mov	fp, r5
 800c66e:	bf18      	it	ne
 800c670:	3604      	addne	r6, #4
 800c672:	9301      	str	r3, [sp, #4]
 800c674:	9502      	str	r5, [sp, #8]
 800c676:	1f37      	subs	r7, r6, #4
 800c678:	f846 5c04 	str.w	r5, [r6, #-4]
 800c67c:	46b9      	mov	r9, r7
 800c67e:	463c      	mov	r4, r7
 800c680:	1c4b      	adds	r3, r1, #1
 800c682:	784a      	ldrb	r2, [r1, #1]
 800c684:	9303      	str	r3, [sp, #12]
 800c686:	b342      	cbz	r2, 800c6da <__hexnan+0x8a>
 800c688:	4610      	mov	r0, r2
 800c68a:	9105      	str	r1, [sp, #20]
 800c68c:	9204      	str	r2, [sp, #16]
 800c68e:	f7ff fd96 	bl	800c1be <__hexdig_fun>
 800c692:	2800      	cmp	r0, #0
 800c694:	d151      	bne.n	800c73a <__hexnan+0xea>
 800c696:	9a04      	ldr	r2, [sp, #16]
 800c698:	9905      	ldr	r1, [sp, #20]
 800c69a:	2a20      	cmp	r2, #32
 800c69c:	d818      	bhi.n	800c6d0 <__hexnan+0x80>
 800c69e:	9b02      	ldr	r3, [sp, #8]
 800c6a0:	459b      	cmp	fp, r3
 800c6a2:	dd13      	ble.n	800c6cc <__hexnan+0x7c>
 800c6a4:	454c      	cmp	r4, r9
 800c6a6:	d206      	bcs.n	800c6b6 <__hexnan+0x66>
 800c6a8:	2d07      	cmp	r5, #7
 800c6aa:	dc04      	bgt.n	800c6b6 <__hexnan+0x66>
 800c6ac:	462a      	mov	r2, r5
 800c6ae:	4649      	mov	r1, r9
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	f7ff ffa7 	bl	800c604 <L_shift>
 800c6b6:	4544      	cmp	r4, r8
 800c6b8:	d951      	bls.n	800c75e <__hexnan+0x10e>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	f1a4 0904 	sub.w	r9, r4, #4
 800c6c0:	f8cd b008 	str.w	fp, [sp, #8]
 800c6c4:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6c8:	461d      	mov	r5, r3
 800c6ca:	464c      	mov	r4, r9
 800c6cc:	9903      	ldr	r1, [sp, #12]
 800c6ce:	e7d7      	b.n	800c680 <__hexnan+0x30>
 800c6d0:	2a29      	cmp	r2, #41	@ 0x29
 800c6d2:	d156      	bne.n	800c782 <__hexnan+0x132>
 800c6d4:	3102      	adds	r1, #2
 800c6d6:	f8ca 1000 	str.w	r1, [sl]
 800c6da:	f1bb 0f00 	cmp.w	fp, #0
 800c6de:	d050      	beq.n	800c782 <__hexnan+0x132>
 800c6e0:	454c      	cmp	r4, r9
 800c6e2:	d206      	bcs.n	800c6f2 <__hexnan+0xa2>
 800c6e4:	2d07      	cmp	r5, #7
 800c6e6:	dc04      	bgt.n	800c6f2 <__hexnan+0xa2>
 800c6e8:	462a      	mov	r2, r5
 800c6ea:	4649      	mov	r1, r9
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f7ff ff89 	bl	800c604 <L_shift>
 800c6f2:	4544      	cmp	r4, r8
 800c6f4:	d935      	bls.n	800c762 <__hexnan+0x112>
 800c6f6:	f1a8 0204 	sub.w	r2, r8, #4
 800c6fa:	4623      	mov	r3, r4
 800c6fc:	f853 1b04 	ldr.w	r1, [r3], #4
 800c700:	429f      	cmp	r7, r3
 800c702:	f842 1f04 	str.w	r1, [r2, #4]!
 800c706:	d2f9      	bcs.n	800c6fc <__hexnan+0xac>
 800c708:	1b3b      	subs	r3, r7, r4
 800c70a:	3e03      	subs	r6, #3
 800c70c:	3401      	adds	r4, #1
 800c70e:	2200      	movs	r2, #0
 800c710:	f023 0303 	bic.w	r3, r3, #3
 800c714:	3304      	adds	r3, #4
 800c716:	42b4      	cmp	r4, r6
 800c718:	bf88      	it	hi
 800c71a:	2304      	movhi	r3, #4
 800c71c:	4443      	add	r3, r8
 800c71e:	f843 2b04 	str.w	r2, [r3], #4
 800c722:	429f      	cmp	r7, r3
 800c724:	d2fb      	bcs.n	800c71e <__hexnan+0xce>
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	b91b      	cbnz	r3, 800c732 <__hexnan+0xe2>
 800c72a:	4547      	cmp	r7, r8
 800c72c:	d127      	bne.n	800c77e <__hexnan+0x12e>
 800c72e:	2301      	movs	r3, #1
 800c730:	603b      	str	r3, [r7, #0]
 800c732:	2005      	movs	r0, #5
 800c734:	b007      	add	sp, #28
 800c736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c73a:	3501      	adds	r5, #1
 800c73c:	f10b 0b01 	add.w	fp, fp, #1
 800c740:	2d08      	cmp	r5, #8
 800c742:	dd05      	ble.n	800c750 <__hexnan+0x100>
 800c744:	4544      	cmp	r4, r8
 800c746:	d9c1      	bls.n	800c6cc <__hexnan+0x7c>
 800c748:	2300      	movs	r3, #0
 800c74a:	3c04      	subs	r4, #4
 800c74c:	2501      	movs	r5, #1
 800c74e:	6023      	str	r3, [r4, #0]
 800c750:	6822      	ldr	r2, [r4, #0]
 800c752:	f000 000f 	and.w	r0, r0, #15
 800c756:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c75a:	6020      	str	r0, [r4, #0]
 800c75c:	e7b6      	b.n	800c6cc <__hexnan+0x7c>
 800c75e:	2508      	movs	r5, #8
 800c760:	e7b4      	b.n	800c6cc <__hexnan+0x7c>
 800c762:	9b01      	ldr	r3, [sp, #4]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d0de      	beq.n	800c726 <__hexnan+0xd6>
 800c768:	f1c3 0320 	rsb	r3, r3, #32
 800c76c:	f04f 32ff 	mov.w	r2, #4294967295
 800c770:	40da      	lsrs	r2, r3
 800c772:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c776:	4013      	ands	r3, r2
 800c778:	f846 3c04 	str.w	r3, [r6, #-4]
 800c77c:	e7d3      	b.n	800c726 <__hexnan+0xd6>
 800c77e:	3f04      	subs	r7, #4
 800c780:	e7d1      	b.n	800c726 <__hexnan+0xd6>
 800c782:	2004      	movs	r0, #4
 800c784:	e7d6      	b.n	800c734 <__hexnan+0xe4>

0800c786 <__ascii_mbtowc>:
 800c786:	b082      	sub	sp, #8
 800c788:	b901      	cbnz	r1, 800c78c <__ascii_mbtowc+0x6>
 800c78a:	a901      	add	r1, sp, #4
 800c78c:	b142      	cbz	r2, 800c7a0 <__ascii_mbtowc+0x1a>
 800c78e:	b14b      	cbz	r3, 800c7a4 <__ascii_mbtowc+0x1e>
 800c790:	7813      	ldrb	r3, [r2, #0]
 800c792:	600b      	str	r3, [r1, #0]
 800c794:	7812      	ldrb	r2, [r2, #0]
 800c796:	1e10      	subs	r0, r2, #0
 800c798:	bf18      	it	ne
 800c79a:	2001      	movne	r0, #1
 800c79c:	b002      	add	sp, #8
 800c79e:	4770      	bx	lr
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	e7fb      	b.n	800c79c <__ascii_mbtowc+0x16>
 800c7a4:	f06f 0001 	mvn.w	r0, #1
 800c7a8:	e7f8      	b.n	800c79c <__ascii_mbtowc+0x16>

0800c7aa <_realloc_r>:
 800c7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ae:	4607      	mov	r7, r0
 800c7b0:	4614      	mov	r4, r2
 800c7b2:	460d      	mov	r5, r1
 800c7b4:	b921      	cbnz	r1, 800c7c0 <_realloc_r+0x16>
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7bc:	f7fd bad2 	b.w	8009d64 <_malloc_r>
 800c7c0:	b92a      	cbnz	r2, 800c7ce <_realloc_r+0x24>
 800c7c2:	4625      	mov	r5, r4
 800c7c4:	f7fd fa5a 	bl	8009c7c <_free_r>
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ce:	f000 f8b2 	bl	800c936 <_malloc_usable_size_r>
 800c7d2:	4284      	cmp	r4, r0
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	d802      	bhi.n	800c7de <_realloc_r+0x34>
 800c7d8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7dc:	d8f4      	bhi.n	800c7c8 <_realloc_r+0x1e>
 800c7de:	4621      	mov	r1, r4
 800c7e0:	4638      	mov	r0, r7
 800c7e2:	f7fd fabf 	bl	8009d64 <_malloc_r>
 800c7e6:	4680      	mov	r8, r0
 800c7e8:	b908      	cbnz	r0, 800c7ee <_realloc_r+0x44>
 800c7ea:	4645      	mov	r5, r8
 800c7ec:	e7ec      	b.n	800c7c8 <_realloc_r+0x1e>
 800c7ee:	42b4      	cmp	r4, r6
 800c7f0:	4622      	mov	r2, r4
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	bf28      	it	cs
 800c7f6:	4632      	movcs	r2, r6
 800c7f8:	f7ff fc48 	bl	800c08c <memcpy>
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	4638      	mov	r0, r7
 800c800:	f7fd fa3c 	bl	8009c7c <_free_r>
 800c804:	e7f1      	b.n	800c7ea <_realloc_r+0x40>
	...

0800c808 <_strtoul_l.isra.0>:
 800c808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c80c:	4686      	mov	lr, r0
 800c80e:	460d      	mov	r5, r1
 800c810:	4e33      	ldr	r6, [pc, #204]	@ (800c8e0 <_strtoul_l.isra.0+0xd8>)
 800c812:	4628      	mov	r0, r5
 800c814:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c818:	5d37      	ldrb	r7, [r6, r4]
 800c81a:	f017 0708 	ands.w	r7, r7, #8
 800c81e:	d1f8      	bne.n	800c812 <_strtoul_l.isra.0+0xa>
 800c820:	2c2d      	cmp	r4, #45	@ 0x2d
 800c822:	d110      	bne.n	800c846 <_strtoul_l.isra.0+0x3e>
 800c824:	782c      	ldrb	r4, [r5, #0]
 800c826:	2701      	movs	r7, #1
 800c828:	1c85      	adds	r5, r0, #2
 800c82a:	f033 0010 	bics.w	r0, r3, #16
 800c82e:	d115      	bne.n	800c85c <_strtoul_l.isra.0+0x54>
 800c830:	2c30      	cmp	r4, #48	@ 0x30
 800c832:	d10d      	bne.n	800c850 <_strtoul_l.isra.0+0x48>
 800c834:	7828      	ldrb	r0, [r5, #0]
 800c836:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800c83a:	2858      	cmp	r0, #88	@ 0x58
 800c83c:	d108      	bne.n	800c850 <_strtoul_l.isra.0+0x48>
 800c83e:	786c      	ldrb	r4, [r5, #1]
 800c840:	3502      	adds	r5, #2
 800c842:	2310      	movs	r3, #16
 800c844:	e00a      	b.n	800c85c <_strtoul_l.isra.0+0x54>
 800c846:	2c2b      	cmp	r4, #43	@ 0x2b
 800c848:	bf04      	itt	eq
 800c84a:	782c      	ldrbeq	r4, [r5, #0]
 800c84c:	1c85      	addeq	r5, r0, #2
 800c84e:	e7ec      	b.n	800c82a <_strtoul_l.isra.0+0x22>
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1f6      	bne.n	800c842 <_strtoul_l.isra.0+0x3a>
 800c854:	2c30      	cmp	r4, #48	@ 0x30
 800c856:	bf14      	ite	ne
 800c858:	230a      	movne	r3, #10
 800c85a:	2308      	moveq	r3, #8
 800c85c:	f04f 38ff 	mov.w	r8, #4294967295
 800c860:	2600      	movs	r6, #0
 800c862:	fbb8 f8f3 	udiv	r8, r8, r3
 800c866:	fb03 f908 	mul.w	r9, r3, r8
 800c86a:	4630      	mov	r0, r6
 800c86c:	ea6f 0909 	mvn.w	r9, r9
 800c870:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c874:	f1bc 0f09 	cmp.w	ip, #9
 800c878:	d810      	bhi.n	800c89c <_strtoul_l.isra.0+0x94>
 800c87a:	4664      	mov	r4, ip
 800c87c:	42a3      	cmp	r3, r4
 800c87e:	dd1e      	ble.n	800c8be <_strtoul_l.isra.0+0xb6>
 800c880:	f1b6 3fff 	cmp.w	r6, #4294967295
 800c884:	d007      	beq.n	800c896 <_strtoul_l.isra.0+0x8e>
 800c886:	4580      	cmp	r8, r0
 800c888:	d316      	bcc.n	800c8b8 <_strtoul_l.isra.0+0xb0>
 800c88a:	d101      	bne.n	800c890 <_strtoul_l.isra.0+0x88>
 800c88c:	45a1      	cmp	r9, r4
 800c88e:	db13      	blt.n	800c8b8 <_strtoul_l.isra.0+0xb0>
 800c890:	fb00 4003 	mla	r0, r0, r3, r4
 800c894:	2601      	movs	r6, #1
 800c896:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c89a:	e7e9      	b.n	800c870 <_strtoul_l.isra.0+0x68>
 800c89c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800c8a0:	f1bc 0f19 	cmp.w	ip, #25
 800c8a4:	d801      	bhi.n	800c8aa <_strtoul_l.isra.0+0xa2>
 800c8a6:	3c37      	subs	r4, #55	@ 0x37
 800c8a8:	e7e8      	b.n	800c87c <_strtoul_l.isra.0+0x74>
 800c8aa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c8ae:	f1bc 0f19 	cmp.w	ip, #25
 800c8b2:	d804      	bhi.n	800c8be <_strtoul_l.isra.0+0xb6>
 800c8b4:	3c57      	subs	r4, #87	@ 0x57
 800c8b6:	e7e1      	b.n	800c87c <_strtoul_l.isra.0+0x74>
 800c8b8:	f04f 36ff 	mov.w	r6, #4294967295
 800c8bc:	e7eb      	b.n	800c896 <_strtoul_l.isra.0+0x8e>
 800c8be:	1c73      	adds	r3, r6, #1
 800c8c0:	d106      	bne.n	800c8d0 <_strtoul_l.isra.0+0xc8>
 800c8c2:	2322      	movs	r3, #34	@ 0x22
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f8ce 3000 	str.w	r3, [lr]
 800c8ca:	b932      	cbnz	r2, 800c8da <_strtoul_l.isra.0+0xd2>
 800c8cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8d0:	b107      	cbz	r7, 800c8d4 <_strtoul_l.isra.0+0xcc>
 800c8d2:	4240      	negs	r0, r0
 800c8d4:	2a00      	cmp	r2, #0
 800c8d6:	d0f9      	beq.n	800c8cc <_strtoul_l.isra.0+0xc4>
 800c8d8:	b106      	cbz	r6, 800c8dc <_strtoul_l.isra.0+0xd4>
 800c8da:	1e69      	subs	r1, r5, #1
 800c8dc:	6011      	str	r1, [r2, #0]
 800c8de:	e7f5      	b.n	800c8cc <_strtoul_l.isra.0+0xc4>
 800c8e0:	0800d2f9 	.word	0x0800d2f9

0800c8e4 <_strtoul_r>:
 800c8e4:	f7ff bf90 	b.w	800c808 <_strtoul_l.isra.0>

0800c8e8 <__ascii_wctomb>:
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	4608      	mov	r0, r1
 800c8ec:	b141      	cbz	r1, 800c900 <__ascii_wctomb+0x18>
 800c8ee:	2aff      	cmp	r2, #255	@ 0xff
 800c8f0:	d904      	bls.n	800c8fc <__ascii_wctomb+0x14>
 800c8f2:	228a      	movs	r2, #138	@ 0x8a
 800c8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f8:	601a      	str	r2, [r3, #0]
 800c8fa:	4770      	bx	lr
 800c8fc:	2001      	movs	r0, #1
 800c8fe:	700a      	strb	r2, [r1, #0]
 800c900:	4770      	bx	lr
	...

0800c904 <fiprintf>:
 800c904:	b40e      	push	{r1, r2, r3}
 800c906:	b503      	push	{r0, r1, lr}
 800c908:	ab03      	add	r3, sp, #12
 800c90a:	4601      	mov	r1, r0
 800c90c:	4805      	ldr	r0, [pc, #20]	@ (800c924 <fiprintf+0x20>)
 800c90e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c912:	6800      	ldr	r0, [r0, #0]
 800c914:	9301      	str	r3, [sp, #4]
 800c916:	f000 f83f 	bl	800c998 <_vfiprintf_r>
 800c91a:	b002      	add	sp, #8
 800c91c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c920:	b003      	add	sp, #12
 800c922:	4770      	bx	lr
 800c924:	20000018 	.word	0x20000018

0800c928 <abort>:
 800c928:	2006      	movs	r0, #6
 800c92a:	b508      	push	{r3, lr}
 800c92c:	f000 fa08 	bl	800cd40 <raise>
 800c930:	2001      	movs	r0, #1
 800c932:	f7f5 f923 	bl	8001b7c <_exit>

0800c936 <_malloc_usable_size_r>:
 800c936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c93a:	1f18      	subs	r0, r3, #4
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	bfbc      	itt	lt
 800c940:	580b      	ldrlt	r3, [r1, r0]
 800c942:	18c0      	addlt	r0, r0, r3
 800c944:	4770      	bx	lr

0800c946 <__sfputc_r>:
 800c946:	6893      	ldr	r3, [r2, #8]
 800c948:	3b01      	subs	r3, #1
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	b410      	push	{r4}
 800c94e:	6093      	str	r3, [r2, #8]
 800c950:	da08      	bge.n	800c964 <__sfputc_r+0x1e>
 800c952:	6994      	ldr	r4, [r2, #24]
 800c954:	42a3      	cmp	r3, r4
 800c956:	db01      	blt.n	800c95c <__sfputc_r+0x16>
 800c958:	290a      	cmp	r1, #10
 800c95a:	d103      	bne.n	800c964 <__sfputc_r+0x1e>
 800c95c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c960:	f000 b932 	b.w	800cbc8 <__swbuf_r>
 800c964:	6813      	ldr	r3, [r2, #0]
 800c966:	1c58      	adds	r0, r3, #1
 800c968:	6010      	str	r0, [r2, #0]
 800c96a:	4608      	mov	r0, r1
 800c96c:	7019      	strb	r1, [r3, #0]
 800c96e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <__sfputs_r>:
 800c974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c976:	4606      	mov	r6, r0
 800c978:	460f      	mov	r7, r1
 800c97a:	4614      	mov	r4, r2
 800c97c:	18d5      	adds	r5, r2, r3
 800c97e:	42ac      	cmp	r4, r5
 800c980:	d101      	bne.n	800c986 <__sfputs_r+0x12>
 800c982:	2000      	movs	r0, #0
 800c984:	e007      	b.n	800c996 <__sfputs_r+0x22>
 800c986:	463a      	mov	r2, r7
 800c988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c98c:	4630      	mov	r0, r6
 800c98e:	f7ff ffda 	bl	800c946 <__sfputc_r>
 800c992:	1c43      	adds	r3, r0, #1
 800c994:	d1f3      	bne.n	800c97e <__sfputs_r+0xa>
 800c996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c998 <_vfiprintf_r>:
 800c998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99c:	460d      	mov	r5, r1
 800c99e:	b09d      	sub	sp, #116	@ 0x74
 800c9a0:	4614      	mov	r4, r2
 800c9a2:	4698      	mov	r8, r3
 800c9a4:	4606      	mov	r6, r0
 800c9a6:	b118      	cbz	r0, 800c9b0 <_vfiprintf_r+0x18>
 800c9a8:	6a03      	ldr	r3, [r0, #32]
 800c9aa:	b90b      	cbnz	r3, 800c9b0 <_vfiprintf_r+0x18>
 800c9ac:	f7fc f948 	bl	8008c40 <__sinit>
 800c9b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9b2:	07d9      	lsls	r1, r3, #31
 800c9b4:	d405      	bmi.n	800c9c2 <_vfiprintf_r+0x2a>
 800c9b6:	89ab      	ldrh	r3, [r5, #12]
 800c9b8:	059a      	lsls	r2, r3, #22
 800c9ba:	d402      	bmi.n	800c9c2 <_vfiprintf_r+0x2a>
 800c9bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9be:	f7fc fae4 	bl	8008f8a <__retarget_lock_acquire_recursive>
 800c9c2:	89ab      	ldrh	r3, [r5, #12]
 800c9c4:	071b      	lsls	r3, r3, #28
 800c9c6:	d501      	bpl.n	800c9cc <_vfiprintf_r+0x34>
 800c9c8:	692b      	ldr	r3, [r5, #16]
 800c9ca:	b99b      	cbnz	r3, 800c9f4 <_vfiprintf_r+0x5c>
 800c9cc:	4629      	mov	r1, r5
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	f000 f938 	bl	800cc44 <__swsetup_r>
 800c9d4:	b170      	cbz	r0, 800c9f4 <_vfiprintf_r+0x5c>
 800c9d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9d8:	07dc      	lsls	r4, r3, #31
 800c9da:	d504      	bpl.n	800c9e6 <_vfiprintf_r+0x4e>
 800c9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e0:	b01d      	add	sp, #116	@ 0x74
 800c9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9e6:	89ab      	ldrh	r3, [r5, #12]
 800c9e8:	0598      	lsls	r0, r3, #22
 800c9ea:	d4f7      	bmi.n	800c9dc <_vfiprintf_r+0x44>
 800c9ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9ee:	f7fc facd 	bl	8008f8c <__retarget_lock_release_recursive>
 800c9f2:	e7f3      	b.n	800c9dc <_vfiprintf_r+0x44>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9fa:	f04f 0901 	mov.w	r9, #1
 800c9fe:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800cbb4 <_vfiprintf_r+0x21c>
 800ca02:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca04:	2320      	movs	r3, #32
 800ca06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca0a:	2330      	movs	r3, #48	@ 0x30
 800ca0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca10:	4623      	mov	r3, r4
 800ca12:	469a      	mov	sl, r3
 800ca14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca18:	b10a      	cbz	r2, 800ca1e <_vfiprintf_r+0x86>
 800ca1a:	2a25      	cmp	r2, #37	@ 0x25
 800ca1c:	d1f9      	bne.n	800ca12 <_vfiprintf_r+0x7a>
 800ca1e:	ebba 0b04 	subs.w	fp, sl, r4
 800ca22:	d00b      	beq.n	800ca3c <_vfiprintf_r+0xa4>
 800ca24:	465b      	mov	r3, fp
 800ca26:	4622      	mov	r2, r4
 800ca28:	4629      	mov	r1, r5
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	f7ff ffa2 	bl	800c974 <__sfputs_r>
 800ca30:	3001      	adds	r0, #1
 800ca32:	f000 80a7 	beq.w	800cb84 <_vfiprintf_r+0x1ec>
 800ca36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca38:	445a      	add	r2, fp
 800ca3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f000 809f 	beq.w	800cb84 <_vfiprintf_r+0x1ec>
 800ca46:	2300      	movs	r3, #0
 800ca48:	f04f 32ff 	mov.w	r2, #4294967295
 800ca4c:	f10a 0a01 	add.w	sl, sl, #1
 800ca50:	9304      	str	r3, [sp, #16]
 800ca52:	9307      	str	r3, [sp, #28]
 800ca54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca58:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca5e:	4654      	mov	r4, sl
 800ca60:	2205      	movs	r2, #5
 800ca62:	4854      	ldr	r0, [pc, #336]	@ (800cbb4 <_vfiprintf_r+0x21c>)
 800ca64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca68:	f7fc fa91 	bl	8008f8e <memchr>
 800ca6c:	9a04      	ldr	r2, [sp, #16]
 800ca6e:	b9d8      	cbnz	r0, 800caa8 <_vfiprintf_r+0x110>
 800ca70:	06d1      	lsls	r1, r2, #27
 800ca72:	bf44      	itt	mi
 800ca74:	2320      	movmi	r3, #32
 800ca76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca7a:	0713      	lsls	r3, r2, #28
 800ca7c:	bf44      	itt	mi
 800ca7e:	232b      	movmi	r3, #43	@ 0x2b
 800ca80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca84:	f89a 3000 	ldrb.w	r3, [sl]
 800ca88:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca8a:	d015      	beq.n	800cab8 <_vfiprintf_r+0x120>
 800ca8c:	9a07      	ldr	r2, [sp, #28]
 800ca8e:	4654      	mov	r4, sl
 800ca90:	2000      	movs	r0, #0
 800ca92:	f04f 0c0a 	mov.w	ip, #10
 800ca96:	4621      	mov	r1, r4
 800ca98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca9c:	3b30      	subs	r3, #48	@ 0x30
 800ca9e:	2b09      	cmp	r3, #9
 800caa0:	d94b      	bls.n	800cb3a <_vfiprintf_r+0x1a2>
 800caa2:	b1b0      	cbz	r0, 800cad2 <_vfiprintf_r+0x13a>
 800caa4:	9207      	str	r2, [sp, #28]
 800caa6:	e014      	b.n	800cad2 <_vfiprintf_r+0x13a>
 800caa8:	eba0 0308 	sub.w	r3, r0, r8
 800caac:	46a2      	mov	sl, r4
 800caae:	fa09 f303 	lsl.w	r3, r9, r3
 800cab2:	4313      	orrs	r3, r2
 800cab4:	9304      	str	r3, [sp, #16]
 800cab6:	e7d2      	b.n	800ca5e <_vfiprintf_r+0xc6>
 800cab8:	9b03      	ldr	r3, [sp, #12]
 800caba:	1d19      	adds	r1, r3, #4
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	9103      	str	r1, [sp, #12]
 800cac2:	bfbb      	ittet	lt
 800cac4:	425b      	neglt	r3, r3
 800cac6:	f042 0202 	orrlt.w	r2, r2, #2
 800caca:	9307      	strge	r3, [sp, #28]
 800cacc:	9307      	strlt	r3, [sp, #28]
 800cace:	bfb8      	it	lt
 800cad0:	9204      	strlt	r2, [sp, #16]
 800cad2:	7823      	ldrb	r3, [r4, #0]
 800cad4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cad6:	d10a      	bne.n	800caee <_vfiprintf_r+0x156>
 800cad8:	7863      	ldrb	r3, [r4, #1]
 800cada:	2b2a      	cmp	r3, #42	@ 0x2a
 800cadc:	d132      	bne.n	800cb44 <_vfiprintf_r+0x1ac>
 800cade:	9b03      	ldr	r3, [sp, #12]
 800cae0:	3402      	adds	r4, #2
 800cae2:	1d1a      	adds	r2, r3, #4
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800caea:	9203      	str	r2, [sp, #12]
 800caec:	9305      	str	r3, [sp, #20]
 800caee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cbc4 <_vfiprintf_r+0x22c>
 800caf2:	2203      	movs	r2, #3
 800caf4:	7821      	ldrb	r1, [r4, #0]
 800caf6:	4650      	mov	r0, sl
 800caf8:	f7fc fa49 	bl	8008f8e <memchr>
 800cafc:	b138      	cbz	r0, 800cb0e <_vfiprintf_r+0x176>
 800cafe:	eba0 000a 	sub.w	r0, r0, sl
 800cb02:	2240      	movs	r2, #64	@ 0x40
 800cb04:	9b04      	ldr	r3, [sp, #16]
 800cb06:	3401      	adds	r4, #1
 800cb08:	4082      	lsls	r2, r0
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	9304      	str	r3, [sp, #16]
 800cb0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb12:	2206      	movs	r2, #6
 800cb14:	4828      	ldr	r0, [pc, #160]	@ (800cbb8 <_vfiprintf_r+0x220>)
 800cb16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb1a:	f7fc fa38 	bl	8008f8e <memchr>
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d03f      	beq.n	800cba2 <_vfiprintf_r+0x20a>
 800cb22:	4b26      	ldr	r3, [pc, #152]	@ (800cbbc <_vfiprintf_r+0x224>)
 800cb24:	bb1b      	cbnz	r3, 800cb6e <_vfiprintf_r+0x1d6>
 800cb26:	9b03      	ldr	r3, [sp, #12]
 800cb28:	3307      	adds	r3, #7
 800cb2a:	f023 0307 	bic.w	r3, r3, #7
 800cb2e:	3308      	adds	r3, #8
 800cb30:	9303      	str	r3, [sp, #12]
 800cb32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb34:	443b      	add	r3, r7
 800cb36:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb38:	e76a      	b.n	800ca10 <_vfiprintf_r+0x78>
 800cb3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb3e:	460c      	mov	r4, r1
 800cb40:	2001      	movs	r0, #1
 800cb42:	e7a8      	b.n	800ca96 <_vfiprintf_r+0xfe>
 800cb44:	2300      	movs	r3, #0
 800cb46:	3401      	adds	r4, #1
 800cb48:	f04f 0c0a 	mov.w	ip, #10
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	9305      	str	r3, [sp, #20]
 800cb50:	4620      	mov	r0, r4
 800cb52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb56:	3a30      	subs	r2, #48	@ 0x30
 800cb58:	2a09      	cmp	r2, #9
 800cb5a:	d903      	bls.n	800cb64 <_vfiprintf_r+0x1cc>
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d0c6      	beq.n	800caee <_vfiprintf_r+0x156>
 800cb60:	9105      	str	r1, [sp, #20]
 800cb62:	e7c4      	b.n	800caee <_vfiprintf_r+0x156>
 800cb64:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb68:	4604      	mov	r4, r0
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e7f0      	b.n	800cb50 <_vfiprintf_r+0x1b8>
 800cb6e:	ab03      	add	r3, sp, #12
 800cb70:	462a      	mov	r2, r5
 800cb72:	a904      	add	r1, sp, #16
 800cb74:	4630      	mov	r0, r6
 800cb76:	9300      	str	r3, [sp, #0]
 800cb78:	4b11      	ldr	r3, [pc, #68]	@ (800cbc0 <_vfiprintf_r+0x228>)
 800cb7a:	f7fb fa0d 	bl	8007f98 <_printf_float>
 800cb7e:	4607      	mov	r7, r0
 800cb80:	1c78      	adds	r0, r7, #1
 800cb82:	d1d6      	bne.n	800cb32 <_vfiprintf_r+0x19a>
 800cb84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb86:	07d9      	lsls	r1, r3, #31
 800cb88:	d405      	bmi.n	800cb96 <_vfiprintf_r+0x1fe>
 800cb8a:	89ab      	ldrh	r3, [r5, #12]
 800cb8c:	059a      	lsls	r2, r3, #22
 800cb8e:	d402      	bmi.n	800cb96 <_vfiprintf_r+0x1fe>
 800cb90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb92:	f7fc f9fb 	bl	8008f8c <__retarget_lock_release_recursive>
 800cb96:	89ab      	ldrh	r3, [r5, #12]
 800cb98:	065b      	lsls	r3, r3, #25
 800cb9a:	f53f af1f 	bmi.w	800c9dc <_vfiprintf_r+0x44>
 800cb9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cba0:	e71e      	b.n	800c9e0 <_vfiprintf_r+0x48>
 800cba2:	ab03      	add	r3, sp, #12
 800cba4:	462a      	mov	r2, r5
 800cba6:	a904      	add	r1, sp, #16
 800cba8:	4630      	mov	r0, r6
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	4b04      	ldr	r3, [pc, #16]	@ (800cbc0 <_vfiprintf_r+0x228>)
 800cbae:	f7fb fc8f 	bl	80084d0 <_printf_i>
 800cbb2:	e7e4      	b.n	800cb7e <_vfiprintf_r+0x1e6>
 800cbb4:	0800d0d7 	.word	0x0800d0d7
 800cbb8:	0800d0e1 	.word	0x0800d0e1
 800cbbc:	08007f99 	.word	0x08007f99
 800cbc0:	0800c975 	.word	0x0800c975
 800cbc4:	0800d0dd 	.word	0x0800d0dd

0800cbc8 <__swbuf_r>:
 800cbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbca:	460e      	mov	r6, r1
 800cbcc:	4614      	mov	r4, r2
 800cbce:	4605      	mov	r5, r0
 800cbd0:	b118      	cbz	r0, 800cbda <__swbuf_r+0x12>
 800cbd2:	6a03      	ldr	r3, [r0, #32]
 800cbd4:	b90b      	cbnz	r3, 800cbda <__swbuf_r+0x12>
 800cbd6:	f7fc f833 	bl	8008c40 <__sinit>
 800cbda:	69a3      	ldr	r3, [r4, #24]
 800cbdc:	60a3      	str	r3, [r4, #8]
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	071a      	lsls	r2, r3, #28
 800cbe2:	d501      	bpl.n	800cbe8 <__swbuf_r+0x20>
 800cbe4:	6923      	ldr	r3, [r4, #16]
 800cbe6:	b943      	cbnz	r3, 800cbfa <__swbuf_r+0x32>
 800cbe8:	4621      	mov	r1, r4
 800cbea:	4628      	mov	r0, r5
 800cbec:	f000 f82a 	bl	800cc44 <__swsetup_r>
 800cbf0:	b118      	cbz	r0, 800cbfa <__swbuf_r+0x32>
 800cbf2:	f04f 37ff 	mov.w	r7, #4294967295
 800cbf6:	4638      	mov	r0, r7
 800cbf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbfa:	6823      	ldr	r3, [r4, #0]
 800cbfc:	b2f6      	uxtb	r6, r6
 800cbfe:	6922      	ldr	r2, [r4, #16]
 800cc00:	4637      	mov	r7, r6
 800cc02:	1a98      	subs	r0, r3, r2
 800cc04:	6963      	ldr	r3, [r4, #20]
 800cc06:	4283      	cmp	r3, r0
 800cc08:	dc05      	bgt.n	800cc16 <__swbuf_r+0x4e>
 800cc0a:	4621      	mov	r1, r4
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	f7ff f969 	bl	800bee4 <_fflush_r>
 800cc12:	2800      	cmp	r0, #0
 800cc14:	d1ed      	bne.n	800cbf2 <__swbuf_r+0x2a>
 800cc16:	68a3      	ldr	r3, [r4, #8]
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	60a3      	str	r3, [r4, #8]
 800cc1c:	6823      	ldr	r3, [r4, #0]
 800cc1e:	1c5a      	adds	r2, r3, #1
 800cc20:	6022      	str	r2, [r4, #0]
 800cc22:	701e      	strb	r6, [r3, #0]
 800cc24:	1c43      	adds	r3, r0, #1
 800cc26:	6962      	ldr	r2, [r4, #20]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d004      	beq.n	800cc36 <__swbuf_r+0x6e>
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	07db      	lsls	r3, r3, #31
 800cc30:	d5e1      	bpl.n	800cbf6 <__swbuf_r+0x2e>
 800cc32:	2e0a      	cmp	r6, #10
 800cc34:	d1df      	bne.n	800cbf6 <__swbuf_r+0x2e>
 800cc36:	4621      	mov	r1, r4
 800cc38:	4628      	mov	r0, r5
 800cc3a:	f7ff f953 	bl	800bee4 <_fflush_r>
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d0d9      	beq.n	800cbf6 <__swbuf_r+0x2e>
 800cc42:	e7d6      	b.n	800cbf2 <__swbuf_r+0x2a>

0800cc44 <__swsetup_r>:
 800cc44:	b538      	push	{r3, r4, r5, lr}
 800cc46:	4b29      	ldr	r3, [pc, #164]	@ (800ccec <__swsetup_r+0xa8>)
 800cc48:	4605      	mov	r5, r0
 800cc4a:	460c      	mov	r4, r1
 800cc4c:	6818      	ldr	r0, [r3, #0]
 800cc4e:	b118      	cbz	r0, 800cc58 <__swsetup_r+0x14>
 800cc50:	6a03      	ldr	r3, [r0, #32]
 800cc52:	b90b      	cbnz	r3, 800cc58 <__swsetup_r+0x14>
 800cc54:	f7fb fff4 	bl	8008c40 <__sinit>
 800cc58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc5c:	0719      	lsls	r1, r3, #28
 800cc5e:	d422      	bmi.n	800cca6 <__swsetup_r+0x62>
 800cc60:	06da      	lsls	r2, r3, #27
 800cc62:	d407      	bmi.n	800cc74 <__swsetup_r+0x30>
 800cc64:	2209      	movs	r2, #9
 800cc66:	602a      	str	r2, [r5, #0]
 800cc68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc70:	81a3      	strh	r3, [r4, #12]
 800cc72:	e033      	b.n	800ccdc <__swsetup_r+0x98>
 800cc74:	0758      	lsls	r0, r3, #29
 800cc76:	d512      	bpl.n	800cc9e <__swsetup_r+0x5a>
 800cc78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc7a:	b141      	cbz	r1, 800cc8e <__swsetup_r+0x4a>
 800cc7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc80:	4299      	cmp	r1, r3
 800cc82:	d002      	beq.n	800cc8a <__swsetup_r+0x46>
 800cc84:	4628      	mov	r0, r5
 800cc86:	f7fc fff9 	bl	8009c7c <_free_r>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc8e:	89a3      	ldrh	r3, [r4, #12]
 800cc90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cc94:	81a3      	strh	r3, [r4, #12]
 800cc96:	2300      	movs	r3, #0
 800cc98:	6063      	str	r3, [r4, #4]
 800cc9a:	6923      	ldr	r3, [r4, #16]
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	f043 0308 	orr.w	r3, r3, #8
 800cca4:	81a3      	strh	r3, [r4, #12]
 800cca6:	6923      	ldr	r3, [r4, #16]
 800cca8:	b94b      	cbnz	r3, 800ccbe <__swsetup_r+0x7a>
 800ccaa:	89a3      	ldrh	r3, [r4, #12]
 800ccac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ccb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ccb4:	d003      	beq.n	800ccbe <__swsetup_r+0x7a>
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	4628      	mov	r0, r5
 800ccba:	f000 f882 	bl	800cdc2 <__smakebuf_r>
 800ccbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccc2:	f013 0201 	ands.w	r2, r3, #1
 800ccc6:	d00a      	beq.n	800ccde <__swsetup_r+0x9a>
 800ccc8:	2200      	movs	r2, #0
 800ccca:	60a2      	str	r2, [r4, #8]
 800cccc:	6962      	ldr	r2, [r4, #20]
 800ccce:	4252      	negs	r2, r2
 800ccd0:	61a2      	str	r2, [r4, #24]
 800ccd2:	6922      	ldr	r2, [r4, #16]
 800ccd4:	b942      	cbnz	r2, 800cce8 <__swsetup_r+0xa4>
 800ccd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ccda:	d1c5      	bne.n	800cc68 <__swsetup_r+0x24>
 800ccdc:	bd38      	pop	{r3, r4, r5, pc}
 800ccde:	0799      	lsls	r1, r3, #30
 800cce0:	bf58      	it	pl
 800cce2:	6962      	ldrpl	r2, [r4, #20]
 800cce4:	60a2      	str	r2, [r4, #8]
 800cce6:	e7f4      	b.n	800ccd2 <__swsetup_r+0x8e>
 800cce8:	2000      	movs	r0, #0
 800ccea:	e7f7      	b.n	800ccdc <__swsetup_r+0x98>
 800ccec:	20000018 	.word	0x20000018

0800ccf0 <_raise_r>:
 800ccf0:	291f      	cmp	r1, #31
 800ccf2:	b538      	push	{r3, r4, r5, lr}
 800ccf4:	4605      	mov	r5, r0
 800ccf6:	460c      	mov	r4, r1
 800ccf8:	d904      	bls.n	800cd04 <_raise_r+0x14>
 800ccfa:	2316      	movs	r3, #22
 800ccfc:	6003      	str	r3, [r0, #0]
 800ccfe:	f04f 30ff 	mov.w	r0, #4294967295
 800cd02:	bd38      	pop	{r3, r4, r5, pc}
 800cd04:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cd06:	b112      	cbz	r2, 800cd0e <_raise_r+0x1e>
 800cd08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd0c:	b94b      	cbnz	r3, 800cd22 <_raise_r+0x32>
 800cd0e:	4628      	mov	r0, r5
 800cd10:	f000 f830 	bl	800cd74 <_getpid_r>
 800cd14:	4622      	mov	r2, r4
 800cd16:	4601      	mov	r1, r0
 800cd18:	4628      	mov	r0, r5
 800cd1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd1e:	f000 b817 	b.w	800cd50 <_kill_r>
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d00a      	beq.n	800cd3c <_raise_r+0x4c>
 800cd26:	1c59      	adds	r1, r3, #1
 800cd28:	d103      	bne.n	800cd32 <_raise_r+0x42>
 800cd2a:	2316      	movs	r3, #22
 800cd2c:	6003      	str	r3, [r0, #0]
 800cd2e:	2001      	movs	r0, #1
 800cd30:	e7e7      	b.n	800cd02 <_raise_r+0x12>
 800cd32:	2100      	movs	r1, #0
 800cd34:	4620      	mov	r0, r4
 800cd36:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cd3a:	4798      	blx	r3
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	e7e0      	b.n	800cd02 <_raise_r+0x12>

0800cd40 <raise>:
 800cd40:	4b02      	ldr	r3, [pc, #8]	@ (800cd4c <raise+0xc>)
 800cd42:	4601      	mov	r1, r0
 800cd44:	6818      	ldr	r0, [r3, #0]
 800cd46:	f7ff bfd3 	b.w	800ccf0 <_raise_r>
 800cd4a:	bf00      	nop
 800cd4c:	20000018 	.word	0x20000018

0800cd50 <_kill_r>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	2300      	movs	r3, #0
 800cd54:	4d06      	ldr	r5, [pc, #24]	@ (800cd70 <_kill_r+0x20>)
 800cd56:	4604      	mov	r4, r0
 800cd58:	4608      	mov	r0, r1
 800cd5a:	4611      	mov	r1, r2
 800cd5c:	602b      	str	r3, [r5, #0]
 800cd5e:	f7f4 fefd 	bl	8001b5c <_kill>
 800cd62:	1c43      	adds	r3, r0, #1
 800cd64:	d102      	bne.n	800cd6c <_kill_r+0x1c>
 800cd66:	682b      	ldr	r3, [r5, #0]
 800cd68:	b103      	cbz	r3, 800cd6c <_kill_r+0x1c>
 800cd6a:	6023      	str	r3, [r4, #0]
 800cd6c:	bd38      	pop	{r3, r4, r5, pc}
 800cd6e:	bf00      	nop
 800cd70:	200004c0 	.word	0x200004c0

0800cd74 <_getpid_r>:
 800cd74:	f7f4 beea 	b.w	8001b4c <_getpid>

0800cd78 <__swhatbuf_r>:
 800cd78:	b570      	push	{r4, r5, r6, lr}
 800cd7a:	460c      	mov	r4, r1
 800cd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd80:	b096      	sub	sp, #88	@ 0x58
 800cd82:	4615      	mov	r5, r2
 800cd84:	2900      	cmp	r1, #0
 800cd86:	461e      	mov	r6, r3
 800cd88:	da0c      	bge.n	800cda4 <__swhatbuf_r+0x2c>
 800cd8a:	89a3      	ldrh	r3, [r4, #12]
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd92:	bf14      	ite	ne
 800cd94:	2340      	movne	r3, #64	@ 0x40
 800cd96:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd9a:	2000      	movs	r0, #0
 800cd9c:	6031      	str	r1, [r6, #0]
 800cd9e:	602b      	str	r3, [r5, #0]
 800cda0:	b016      	add	sp, #88	@ 0x58
 800cda2:	bd70      	pop	{r4, r5, r6, pc}
 800cda4:	466a      	mov	r2, sp
 800cda6:	f000 f849 	bl	800ce3c <_fstat_r>
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	dbed      	blt.n	800cd8a <__swhatbuf_r+0x12>
 800cdae:	9901      	ldr	r1, [sp, #4]
 800cdb0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cdb4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cdb8:	4259      	negs	r1, r3
 800cdba:	4159      	adcs	r1, r3
 800cdbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdc0:	e7eb      	b.n	800cd9a <__swhatbuf_r+0x22>

0800cdc2 <__smakebuf_r>:
 800cdc2:	898b      	ldrh	r3, [r1, #12]
 800cdc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdc6:	079d      	lsls	r5, r3, #30
 800cdc8:	4606      	mov	r6, r0
 800cdca:	460c      	mov	r4, r1
 800cdcc:	d507      	bpl.n	800cdde <__smakebuf_r+0x1c>
 800cdce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cdd2:	6023      	str	r3, [r4, #0]
 800cdd4:	6123      	str	r3, [r4, #16]
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	6163      	str	r3, [r4, #20]
 800cdda:	b003      	add	sp, #12
 800cddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdde:	ab01      	add	r3, sp, #4
 800cde0:	466a      	mov	r2, sp
 800cde2:	f7ff ffc9 	bl	800cd78 <__swhatbuf_r>
 800cde6:	9f00      	ldr	r7, [sp, #0]
 800cde8:	4605      	mov	r5, r0
 800cdea:	4630      	mov	r0, r6
 800cdec:	4639      	mov	r1, r7
 800cdee:	f7fc ffb9 	bl	8009d64 <_malloc_r>
 800cdf2:	b948      	cbnz	r0, 800ce08 <__smakebuf_r+0x46>
 800cdf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdf8:	059a      	lsls	r2, r3, #22
 800cdfa:	d4ee      	bmi.n	800cdda <__smakebuf_r+0x18>
 800cdfc:	f023 0303 	bic.w	r3, r3, #3
 800ce00:	f043 0302 	orr.w	r3, r3, #2
 800ce04:	81a3      	strh	r3, [r4, #12]
 800ce06:	e7e2      	b.n	800cdce <__smakebuf_r+0xc>
 800ce08:	89a3      	ldrh	r3, [r4, #12]
 800ce0a:	6020      	str	r0, [r4, #0]
 800ce0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce10:	81a3      	strh	r3, [r4, #12]
 800ce12:	9b01      	ldr	r3, [sp, #4]
 800ce14:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce18:	b15b      	cbz	r3, 800ce32 <__smakebuf_r+0x70>
 800ce1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce1e:	4630      	mov	r0, r6
 800ce20:	f000 f81e 	bl	800ce60 <_isatty_r>
 800ce24:	b128      	cbz	r0, 800ce32 <__smakebuf_r+0x70>
 800ce26:	89a3      	ldrh	r3, [r4, #12]
 800ce28:	f023 0303 	bic.w	r3, r3, #3
 800ce2c:	f043 0301 	orr.w	r3, r3, #1
 800ce30:	81a3      	strh	r3, [r4, #12]
 800ce32:	89a3      	ldrh	r3, [r4, #12]
 800ce34:	431d      	orrs	r5, r3
 800ce36:	81a5      	strh	r5, [r4, #12]
 800ce38:	e7cf      	b.n	800cdda <__smakebuf_r+0x18>
	...

0800ce3c <_fstat_r>:
 800ce3c:	b538      	push	{r3, r4, r5, lr}
 800ce3e:	2300      	movs	r3, #0
 800ce40:	4d06      	ldr	r5, [pc, #24]	@ (800ce5c <_fstat_r+0x20>)
 800ce42:	4604      	mov	r4, r0
 800ce44:	4608      	mov	r0, r1
 800ce46:	4611      	mov	r1, r2
 800ce48:	602b      	str	r3, [r5, #0]
 800ce4a:	f7f4 fee7 	bl	8001c1c <_fstat>
 800ce4e:	1c43      	adds	r3, r0, #1
 800ce50:	d102      	bne.n	800ce58 <_fstat_r+0x1c>
 800ce52:	682b      	ldr	r3, [r5, #0]
 800ce54:	b103      	cbz	r3, 800ce58 <_fstat_r+0x1c>
 800ce56:	6023      	str	r3, [r4, #0]
 800ce58:	bd38      	pop	{r3, r4, r5, pc}
 800ce5a:	bf00      	nop
 800ce5c:	200004c0 	.word	0x200004c0

0800ce60 <_isatty_r>:
 800ce60:	b538      	push	{r3, r4, r5, lr}
 800ce62:	2300      	movs	r3, #0
 800ce64:	4d05      	ldr	r5, [pc, #20]	@ (800ce7c <_isatty_r+0x1c>)
 800ce66:	4604      	mov	r4, r0
 800ce68:	4608      	mov	r0, r1
 800ce6a:	602b      	str	r3, [r5, #0]
 800ce6c:	f7f4 fee6 	bl	8001c3c <_isatty>
 800ce70:	1c43      	adds	r3, r0, #1
 800ce72:	d102      	bne.n	800ce7a <_isatty_r+0x1a>
 800ce74:	682b      	ldr	r3, [r5, #0]
 800ce76:	b103      	cbz	r3, 800ce7a <_isatty_r+0x1a>
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	bd38      	pop	{r3, r4, r5, pc}
 800ce7c:	200004c0 	.word	0x200004c0

0800ce80 <_init>:
 800ce80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce82:	bf00      	nop
 800ce84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce86:	bc08      	pop	{r3}
 800ce88:	469e      	mov	lr, r3
 800ce8a:	4770      	bx	lr

0800ce8c <_fini>:
 800ce8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce8e:	bf00      	nop
 800ce90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce92:	bc08      	pop	{r3}
 800ce94:	469e      	mov	lr, r3
 800ce96:	4770      	bx	lr
