
dez_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f228  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0800f420  0800f420  00010420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb2c  0800fb2c  00011254  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fb2c  0800fb2c  00010b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb34  0800fb34  00011254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb34  0800fb34  00010b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fb38  0800fb38  00010b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  0800fb3c  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000254  0800fd90  00011254  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  0800fd90  00011600  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00011254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f035  00000000  00000000  0001128a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004029  00000000  00000000  000302bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a88  00000000  00000000  000342e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149a  00000000  00000000  00035d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd6f  00000000  00000000  0003720a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f8a9  00000000  00000000  00064f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124ca6  00000000  00000000  00084822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a94c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d10  00000000  00000000  001a950c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001b221c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000254 	.word	0x20000254
 8000214:	00000000 	.word	0x00000000
 8000218:	0800f408 	.word	0x0800f408

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000258 	.word	0x20000258
 8000234:	0800f408 	.word	0x0800f408

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_drsub>:
 800025c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000260:	e002      	b.n	8000268 <__adddf3>
 8000262:	bf00      	nop

08000264 <__aeabi_dsub>:
 8000264:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000268 <__adddf3>:
 8000268:	b530      	push	{r4, r5, lr}
 800026a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800026e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000272:	ea94 0f05 	teq	r4, r5
 8000276:	bf08      	it	eq
 8000278:	ea90 0f02 	teqeq	r0, r2
 800027c:	bf1f      	itttt	ne
 800027e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000282:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000286:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800028a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800028e:	f000 80e2 	beq.w	8000456 <__adddf3+0x1ee>
 8000292:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000296:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800029a:	bfb8      	it	lt
 800029c:	426d      	neglt	r5, r5
 800029e:	dd0c      	ble.n	80002ba <__adddf3+0x52>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	ea82 0000 	eor.w	r0, r2, r0
 80002ae:	ea83 0101 	eor.w	r1, r3, r1
 80002b2:	ea80 0202 	eor.w	r2, r0, r2
 80002b6:	ea81 0303 	eor.w	r3, r1, r3
 80002ba:	2d36      	cmp	r5, #54	@ 0x36
 80002bc:	bf88      	it	hi
 80002be:	bd30      	pophi	{r4, r5, pc}
 80002c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x70>
 80002d2:	4240      	negs	r0, r0
 80002d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x84>
 80002e6:	4252      	negs	r2, r2
 80002e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ec:	ea94 0f05 	teq	r4, r5
 80002f0:	f000 80a7 	beq.w	8000442 <__adddf3+0x1da>
 80002f4:	f1a4 0401 	sub.w	r4, r4, #1
 80002f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002fc:	db0d      	blt.n	800031a <__adddf3+0xb2>
 80002fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000302:	fa22 f205 	lsr.w	r2, r2, r5
 8000306:	1880      	adds	r0, r0, r2
 8000308:	f141 0100 	adc.w	r1, r1, #0
 800030c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000310:	1880      	adds	r0, r0, r2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	4159      	adcs	r1, r3
 8000318:	e00e      	b.n	8000338 <__adddf3+0xd0>
 800031a:	f1a5 0520 	sub.w	r5, r5, #32
 800031e:	f10e 0e20 	add.w	lr, lr, #32
 8000322:	2a01      	cmp	r2, #1
 8000324:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000328:	bf28      	it	cs
 800032a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	18c0      	adds	r0, r0, r3
 8000334:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000338:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800033c:	d507      	bpl.n	800034e <__adddf3+0xe6>
 800033e:	f04f 0e00 	mov.w	lr, #0
 8000342:	f1dc 0c00 	rsbs	ip, ip, #0
 8000346:	eb7e 0000 	sbcs.w	r0, lr, r0
 800034a:	eb6e 0101 	sbc.w	r1, lr, r1
 800034e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000352:	d31b      	bcc.n	800038c <__adddf3+0x124>
 8000354:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000358:	d30c      	bcc.n	8000374 <__adddf3+0x10c>
 800035a:	0849      	lsrs	r1, r1, #1
 800035c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000360:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000364:	f104 0401 	add.w	r4, r4, #1
 8000368:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800036c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000370:	f080 809a 	bcs.w	80004a8 <__adddf3+0x240>
 8000374:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000378:	bf08      	it	eq
 800037a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800037e:	f150 0000 	adcs.w	r0, r0, #0
 8000382:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000386:	ea41 0105 	orr.w	r1, r1, r5
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000390:	4140      	adcs	r0, r0
 8000392:	eb41 0101 	adc.w	r1, r1, r1
 8000396:	3c01      	subs	r4, #1
 8000398:	bf28      	it	cs
 800039a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800039e:	d2e9      	bcs.n	8000374 <__adddf3+0x10c>
 80003a0:	f091 0f00 	teq	r1, #0
 80003a4:	bf04      	itt	eq
 80003a6:	4601      	moveq	r1, r0
 80003a8:	2000      	moveq	r0, #0
 80003aa:	fab1 f381 	clz	r3, r1
 80003ae:	bf08      	it	eq
 80003b0:	3320      	addeq	r3, #32
 80003b2:	f1a3 030b 	sub.w	r3, r3, #11
 80003b6:	f1b3 0220 	subs.w	r2, r3, #32
 80003ba:	da0c      	bge.n	80003d6 <__adddf3+0x16e>
 80003bc:	320c      	adds	r2, #12
 80003be:	dd08      	ble.n	80003d2 <__adddf3+0x16a>
 80003c0:	f102 0c14 	add.w	ip, r2, #20
 80003c4:	f1c2 020c 	rsb	r2, r2, #12
 80003c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003cc:	fa21 f102 	lsr.w	r1, r1, r2
 80003d0:	e00c      	b.n	80003ec <__adddf3+0x184>
 80003d2:	f102 0214 	add.w	r2, r2, #20
 80003d6:	bfd8      	it	le
 80003d8:	f1c2 0c20 	rsble	ip, r2, #32
 80003dc:	fa01 f102 	lsl.w	r1, r1, r2
 80003e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003e4:	bfdc      	itt	le
 80003e6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ea:	4090      	lslle	r0, r2
 80003ec:	1ae4      	subs	r4, r4, r3
 80003ee:	bfa2      	ittt	ge
 80003f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003f4:	4329      	orrge	r1, r5
 80003f6:	bd30      	popge	{r4, r5, pc}
 80003f8:	ea6f 0404 	mvn.w	r4, r4
 80003fc:	3c1f      	subs	r4, #31
 80003fe:	da1c      	bge.n	800043a <__adddf3+0x1d2>
 8000400:	340c      	adds	r4, #12
 8000402:	dc0e      	bgt.n	8000422 <__adddf3+0x1ba>
 8000404:	f104 0414 	add.w	r4, r4, #20
 8000408:	f1c4 0220 	rsb	r2, r4, #32
 800040c:	fa20 f004 	lsr.w	r0, r0, r4
 8000410:	fa01 f302 	lsl.w	r3, r1, r2
 8000414:	ea40 0003 	orr.w	r0, r0, r3
 8000418:	fa21 f304 	lsr.w	r3, r1, r4
 800041c:	ea45 0103 	orr.w	r1, r5, r3
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	f1c4 040c 	rsb	r4, r4, #12
 8000426:	f1c4 0220 	rsb	r2, r4, #32
 800042a:	fa20 f002 	lsr.w	r0, r0, r2
 800042e:	fa01 f304 	lsl.w	r3, r1, r4
 8000432:	ea40 0003 	orr.w	r0, r0, r3
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	fa21 f004 	lsr.w	r0, r1, r4
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	f094 0f00 	teq	r4, #0
 8000446:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800044a:	bf06      	itte	eq
 800044c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000450:	3401      	addeq	r4, #1
 8000452:	3d01      	subne	r5, #1
 8000454:	e74e      	b.n	80002f4 <__adddf3+0x8c>
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf18      	it	ne
 800045c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000460:	d029      	beq.n	80004b6 <__adddf3+0x24e>
 8000462:	ea94 0f05 	teq	r4, r5
 8000466:	bf08      	it	eq
 8000468:	ea90 0f02 	teqeq	r0, r2
 800046c:	d005      	beq.n	800047a <__adddf3+0x212>
 800046e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000472:	bf04      	itt	eq
 8000474:	4619      	moveq	r1, r3
 8000476:	4610      	moveq	r0, r2
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea91 0f03 	teq	r1, r3
 800047e:	bf1e      	ittt	ne
 8000480:	2100      	movne	r1, #0
 8000482:	2000      	movne	r0, #0
 8000484:	bd30      	popne	{r4, r5, pc}
 8000486:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800048a:	d105      	bne.n	8000498 <__adddf3+0x230>
 800048c:	0040      	lsls	r0, r0, #1
 800048e:	4149      	adcs	r1, r1
 8000490:	bf28      	it	cs
 8000492:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000496:	bd30      	pop	{r4, r5, pc}
 8000498:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800049c:	bf3c      	itt	cc
 800049e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004a2:	bd30      	popcc	{r4, r5, pc}
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ba:	bf1a      	itte	ne
 80004bc:	4619      	movne	r1, r3
 80004be:	4610      	movne	r0, r2
 80004c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004c4:	bf1c      	itt	ne
 80004c6:	460b      	movne	r3, r1
 80004c8:	4602      	movne	r2, r0
 80004ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ce:	bf06      	itte	eq
 80004d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004d4:	ea91 0f03 	teqeq	r1, r3
 80004d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	bf00      	nop

080004e0 <__aeabi_ui2d>:
 80004e0:	f090 0f00 	teq	r0, #0
 80004e4:	bf04      	itt	eq
 80004e6:	2100      	moveq	r1, #0
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f4:	f04f 0500 	mov.w	r5, #0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e750      	b.n	80003a0 <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2d>:
 8000500:	f090 0f00 	teq	r0, #0
 8000504:	bf04      	itt	eq
 8000506:	2100      	moveq	r1, #0
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000510:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000514:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000518:	bf48      	it	mi
 800051a:	4240      	negmi	r0, r0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e73e      	b.n	80003a0 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_f2d>:
 8000524:	0042      	lsls	r2, r0, #1
 8000526:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800052a:	ea4f 0131 	mov.w	r1, r1, rrx
 800052e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000532:	bf1f      	itttt	ne
 8000534:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000538:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800053c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000540:	4770      	bxne	lr
 8000542:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000546:	bf08      	it	eq
 8000548:	4770      	bxeq	lr
 800054a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800054e:	bf04      	itt	eq
 8000550:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800055c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000560:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000564:	e71c      	b.n	80003a0 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_ul2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f04f 0500 	mov.w	r5, #0
 8000576:	e00a      	b.n	800058e <__aeabi_l2d+0x16>

08000578 <__aeabi_l2d>:
 8000578:	ea50 0201 	orrs.w	r2, r0, r1
 800057c:	bf08      	it	eq
 800057e:	4770      	bxeq	lr
 8000580:	b530      	push	{r4, r5, lr}
 8000582:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000586:	d502      	bpl.n	800058e <__aeabi_l2d+0x16>
 8000588:	4240      	negs	r0, r0
 800058a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800058e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000592:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000596:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800059a:	f43f aed8 	beq.w	800034e <__adddf3+0xe6>
 800059e:	f04f 0203 	mov.w	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005b6:	f1c2 0320 	rsb	r3, r2, #32
 80005ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80005be:	fa20 f002 	lsr.w	r0, r0, r2
 80005c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005c6:	ea40 000e 	orr.w	r0, r0, lr
 80005ca:	fa21 f102 	lsr.w	r1, r1, r2
 80005ce:	4414      	add	r4, r2
 80005d0:	e6bd      	b.n	800034e <__adddf3+0xe6>
 80005d2:	bf00      	nop

080005d4 <__aeabi_dmul>:
 80005d4:	b570      	push	{r4, r5, r6, lr}
 80005d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005e2:	bf1d      	ittte	ne
 80005e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e8:	ea94 0f0c 	teqne	r4, ip
 80005ec:	ea95 0f0c 	teqne	r5, ip
 80005f0:	f000 f8de 	bleq	80007b0 <__aeabi_dmul+0x1dc>
 80005f4:	442c      	add	r4, r5
 80005f6:	ea81 0603 	eor.w	r6, r1, r3
 80005fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000602:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000606:	bf18      	it	ne
 8000608:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000610:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000614:	d038      	beq.n	8000688 <__aeabi_dmul+0xb4>
 8000616:	fba0 ce02 	umull	ip, lr, r0, r2
 800061a:	f04f 0500 	mov.w	r5, #0
 800061e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000622:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000626:	fbe0 e503 	umlal	lr, r5, r0, r3
 800062a:	f04f 0600 	mov.w	r6, #0
 800062e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000632:	f09c 0f00 	teq	ip, #0
 8000636:	bf18      	it	ne
 8000638:	f04e 0e01 	orrne.w	lr, lr, #1
 800063c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000640:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000644:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000648:	d204      	bcs.n	8000654 <__aeabi_dmul+0x80>
 800064a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800064e:	416d      	adcs	r5, r5
 8000650:	eb46 0606 	adc.w	r6, r6, r6
 8000654:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000658:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800065c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000660:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000664:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000668:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800066c:	bf88      	it	hi
 800066e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000672:	d81e      	bhi.n	80006b2 <__aeabi_dmul+0xde>
 8000674:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000678:	bf08      	it	eq
 800067a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800067e:	f150 0000 	adcs.w	r0, r0, #0
 8000682:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800068c:	ea46 0101 	orr.w	r1, r6, r1
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	ea81 0103 	eor.w	r1, r1, r3
 8000698:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800069c:	bfc2      	ittt	gt
 800069e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006a6:	bd70      	popgt	{r4, r5, r6, pc}
 80006a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006ac:	f04f 0e00 	mov.w	lr, #0
 80006b0:	3c01      	subs	r4, #1
 80006b2:	f300 80ab 	bgt.w	800080c <__aeabi_dmul+0x238>
 80006b6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ba:	bfde      	ittt	le
 80006bc:	2000      	movle	r0, #0
 80006be:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006c2:	bd70      	pople	{r4, r5, r6, pc}
 80006c4:	f1c4 0400 	rsb	r4, r4, #0
 80006c8:	3c20      	subs	r4, #32
 80006ca:	da35      	bge.n	8000738 <__aeabi_dmul+0x164>
 80006cc:	340c      	adds	r4, #12
 80006ce:	dc1b      	bgt.n	8000708 <__aeabi_dmul+0x134>
 80006d0:	f104 0414 	add.w	r4, r4, #20
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f305 	lsl.w	r3, r0, r5
 80006dc:	fa20 f004 	lsr.w	r0, r0, r4
 80006e0:	fa01 f205 	lsl.w	r2, r1, r5
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	fa21 f604 	lsr.w	r6, r1, r4
 80006f8:	eb42 0106 	adc.w	r1, r2, r6
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f1c4 040c 	rsb	r4, r4, #12
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f304 	lsl.w	r3, r0, r4
 8000714:	fa20 f005 	lsr.w	r0, r0, r5
 8000718:	fa01 f204 	lsl.w	r2, r1, r4
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	f141 0100 	adc.w	r1, r1, #0
 800072c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000730:	bf08      	it	eq
 8000732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f205 	lsl.w	r2, r0, r5
 8000740:	ea4e 0e02 	orr.w	lr, lr, r2
 8000744:	fa20 f304 	lsr.w	r3, r0, r4
 8000748:	fa01 f205 	lsl.w	r2, r1, r5
 800074c:	ea43 0302 	orr.w	r3, r3, r2
 8000750:	fa21 f004 	lsr.w	r0, r1, r4
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	fa21 f204 	lsr.w	r2, r1, r4
 800075c:	ea20 0002 	bic.w	r0, r0, r2
 8000760:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f094 0f00 	teq	r4, #0
 8000774:	d10f      	bne.n	8000796 <__aeabi_dmul+0x1c2>
 8000776:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800077a:	0040      	lsls	r0, r0, #1
 800077c:	eb41 0101 	adc.w	r1, r1, r1
 8000780:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000784:	bf08      	it	eq
 8000786:	3c01      	subeq	r4, #1
 8000788:	d0f7      	beq.n	800077a <__aeabi_dmul+0x1a6>
 800078a:	ea41 0106 	orr.w	r1, r1, r6
 800078e:	f095 0f00 	teq	r5, #0
 8000792:	bf18      	it	ne
 8000794:	4770      	bxne	lr
 8000796:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800079a:	0052      	lsls	r2, r2, #1
 800079c:	eb43 0303 	adc.w	r3, r3, r3
 80007a0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007a4:	bf08      	it	eq
 80007a6:	3d01      	subeq	r5, #1
 80007a8:	d0f7      	beq.n	800079a <__aeabi_dmul+0x1c6>
 80007aa:	ea43 0306 	orr.w	r3, r3, r6
 80007ae:	4770      	bx	lr
 80007b0:	ea94 0f0c 	teq	r4, ip
 80007b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b8:	bf18      	it	ne
 80007ba:	ea95 0f0c 	teqne	r5, ip
 80007be:	d00c      	beq.n	80007da <__aeabi_dmul+0x206>
 80007c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c4:	bf18      	it	ne
 80007c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ca:	d1d1      	bne.n	8000770 <__aeabi_dmul+0x19c>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007de:	bf06      	itte	eq
 80007e0:	4610      	moveq	r0, r2
 80007e2:	4619      	moveq	r1, r3
 80007e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e8:	d019      	beq.n	800081e <__aeabi_dmul+0x24a>
 80007ea:	ea94 0f0c 	teq	r4, ip
 80007ee:	d102      	bne.n	80007f6 <__aeabi_dmul+0x222>
 80007f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007f4:	d113      	bne.n	800081e <__aeabi_dmul+0x24a>
 80007f6:	ea95 0f0c 	teq	r5, ip
 80007fa:	d105      	bne.n	8000808 <__aeabi_dmul+0x234>
 80007fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000800:	bf1c      	itt	ne
 8000802:	4610      	movne	r0, r2
 8000804:	4619      	movne	r1, r3
 8000806:	d10a      	bne.n	800081e <__aeabi_dmul+0x24a>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000810:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000814:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000822:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000826:	bd70      	pop	{r4, r5, r6, pc}

08000828 <__aeabi_ddiv>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800082e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000832:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000836:	bf1d      	ittte	ne
 8000838:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800083c:	ea94 0f0c 	teqne	r4, ip
 8000840:	ea95 0f0c 	teqne	r5, ip
 8000844:	f000 f8a7 	bleq	8000996 <__aeabi_ddiv+0x16e>
 8000848:	eba4 0405 	sub.w	r4, r4, r5
 800084c:	ea81 0e03 	eor.w	lr, r1, r3
 8000850:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000854:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000858:	f000 8088 	beq.w	800096c <__aeabi_ddiv+0x144>
 800085c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000860:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000864:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000868:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800086c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000870:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000874:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000878:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800087c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000880:	429d      	cmp	r5, r3
 8000882:	bf08      	it	eq
 8000884:	4296      	cmpeq	r6, r2
 8000886:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800088a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800088e:	d202      	bcs.n	8000896 <__aeabi_ddiv+0x6e>
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	1ab6      	subs	r6, r6, r2
 8000898:	eb65 0503 	sbc.w	r5, r5, r3
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008a6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000904:	ea55 0e06 	orrs.w	lr, r5, r6
 8000908:	d018      	beq.n	800093c <__aeabi_ddiv+0x114>
 800090a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800090e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000912:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000916:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800091a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800091e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000922:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000926:	d1c0      	bne.n	80008aa <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800092c:	d10b      	bne.n	8000946 <__aeabi_ddiv+0x11e>
 800092e:	ea41 0100 	orr.w	r1, r1, r0
 8000932:	f04f 0000 	mov.w	r0, #0
 8000936:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800093a:	e7b6      	b.n	80008aa <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	bf04      	itt	eq
 8000942:	4301      	orreq	r1, r0
 8000944:	2000      	moveq	r0, #0
 8000946:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800094a:	bf88      	it	hi
 800094c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000950:	f63f aeaf 	bhi.w	80006b2 <__aeabi_dmul+0xde>
 8000954:	ebb5 0c03 	subs.w	ip, r5, r3
 8000958:	bf04      	itt	eq
 800095a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800095e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000962:	f150 0000 	adcs.w	r0, r0, #0
 8000966:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000970:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000974:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000978:	bfc2      	ittt	gt
 800097a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800097e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000982:	bd70      	popgt	{r4, r5, r6, pc}
 8000984:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000988:	f04f 0e00 	mov.w	lr, #0
 800098c:	3c01      	subs	r4, #1
 800098e:	e690      	b.n	80006b2 <__aeabi_dmul+0xde>
 8000990:	ea45 0e06 	orr.w	lr, r5, r6
 8000994:	e68d      	b.n	80006b2 <__aeabi_dmul+0xde>
 8000996:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800099a:	ea94 0f0c 	teq	r4, ip
 800099e:	bf08      	it	eq
 80009a0:	ea95 0f0c 	teqeq	r5, ip
 80009a4:	f43f af3b 	beq.w	800081e <__aeabi_dmul+0x24a>
 80009a8:	ea94 0f0c 	teq	r4, ip
 80009ac:	d10a      	bne.n	80009c4 <__aeabi_ddiv+0x19c>
 80009ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009b2:	f47f af34 	bne.w	800081e <__aeabi_dmul+0x24a>
 80009b6:	ea95 0f0c 	teq	r5, ip
 80009ba:	f47f af25 	bne.w	8000808 <__aeabi_dmul+0x234>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e72c      	b.n	800081e <__aeabi_dmul+0x24a>
 80009c4:	ea95 0f0c 	teq	r5, ip
 80009c8:	d106      	bne.n	80009d8 <__aeabi_ddiv+0x1b0>
 80009ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ce:	f43f aefd 	beq.w	80007cc <__aeabi_dmul+0x1f8>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e722      	b.n	800081e <__aeabi_dmul+0x24a>
 80009d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009dc:	bf18      	it	ne
 80009de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009e2:	f47f aec5 	bne.w	8000770 <__aeabi_dmul+0x19c>
 80009e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ea:	f47f af0d 	bne.w	8000808 <__aeabi_dmul+0x234>
 80009ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009f2:	f47f aeeb 	bne.w	80007cc <__aeabi_dmul+0x1f8>
 80009f6:	e712      	b.n	800081e <__aeabi_dmul+0x24a>

080009f8 <__gedf2>:
 80009f8:	f04f 3cff 	mov.w	ip, #4294967295
 80009fc:	e006      	b.n	8000a0c <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__ledf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	e002      	b.n	8000a0c <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__cmpdf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	bf18      	it	ne
 8000a1e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a22:	d01b      	beq.n	8000a5c <__cmpdf2+0x54>
 8000a24:	b001      	add	sp, #4
 8000a26:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a2a:	bf0c      	ite	eq
 8000a2c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a30:	ea91 0f03 	teqne	r1, r3
 8000a34:	bf02      	ittt	eq
 8000a36:	ea90 0f02 	teqeq	r0, r2
 8000a3a:	2000      	moveq	r0, #0
 8000a3c:	4770      	bxeq	lr
 8000a3e:	f110 0f00 	cmn.w	r0, #0
 8000a42:	ea91 0f03 	teq	r1, r3
 8000a46:	bf58      	it	pl
 8000a48:	4299      	cmppl	r1, r3
 8000a4a:	bf08      	it	eq
 8000a4c:	4290      	cmpeq	r0, r2
 8000a4e:	bf2c      	ite	cs
 8000a50:	17d8      	asrcs	r0, r3, #31
 8000a52:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a56:	f040 0001 	orr.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d102      	bne.n	8000a6c <__cmpdf2+0x64>
 8000a66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a6a:	d107      	bne.n	8000a7c <__cmpdf2+0x74>
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d1d6      	bne.n	8000a24 <__cmpdf2+0x1c>
 8000a76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a7a:	d0d3      	beq.n	8000a24 <__cmpdf2+0x1c>
 8000a7c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdrcmple>:
 8000a84:	4684      	mov	ip, r0
 8000a86:	4610      	mov	r0, r2
 8000a88:	4662      	mov	r2, ip
 8000a8a:	468c      	mov	ip, r1
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4663      	mov	r3, ip
 8000a90:	e000      	b.n	8000a94 <__aeabi_cdcmpeq>
 8000a92:	bf00      	nop

08000a94 <__aeabi_cdcmpeq>:
 8000a94:	b501      	push	{r0, lr}
 8000a96:	f7ff ffb7 	bl	8000a08 <__cmpdf2>
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	bf48      	it	mi
 8000a9e:	f110 0f00 	cmnmi.w	r0, #0
 8000aa2:	bd01      	pop	{r0, pc}

08000aa4 <__aeabi_dcmpeq>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff fff4 	bl	8000a94 <__aeabi_cdcmpeq>
 8000aac:	bf0c      	ite	eq
 8000aae:	2001      	moveq	r0, #1
 8000ab0:	2000      	movne	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmplt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffea 	bl	8000a94 <__aeabi_cdcmpeq>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmple>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffe0 	bl	8000a94 <__aeabi_cdcmpeq>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpge>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffce 	bl	8000a84 <__aeabi_cdrcmple>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpgt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffc4 	bl	8000a84 <__aeabi_cdrcmple>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpun>:
 8000b08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__aeabi_dcmpun+0x10>
 8000b12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b16:	d10a      	bne.n	8000b2e <__aeabi_dcmpun+0x26>
 8000b18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b20:	d102      	bne.n	8000b28 <__aeabi_dcmpun+0x20>
 8000b22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b26:	d102      	bne.n	8000b2e <__aeabi_dcmpun+0x26>
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	f04f 0001 	mov.w	r0, #1
 8000b32:	4770      	bx	lr

08000b34 <__aeabi_d2iz>:
 8000b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b3c:	d215      	bcs.n	8000b6a <__aeabi_d2iz+0x36>
 8000b3e:	d511      	bpl.n	8000b64 <__aeabi_d2iz+0x30>
 8000b40:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d912      	bls.n	8000b70 <__aeabi_d2iz+0x3c>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d105      	bne.n	8000b7c <__aeabi_d2iz+0x48>
 8000b70:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	bf08      	it	eq
 8000b76:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__aeabi_d2uiz>:
 8000b84:	004a      	lsls	r2, r1, #1
 8000b86:	d211      	bcs.n	8000bac <__aeabi_d2uiz+0x28>
 8000b88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b8c:	d211      	bcs.n	8000bb2 <__aeabi_d2uiz+0x2e>
 8000b8e:	d50d      	bpl.n	8000bac <__aeabi_d2uiz+0x28>
 8000b90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b98:	d40e      	bmi.n	8000bb8 <__aeabi_d2uiz+0x34>
 8000b9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d102      	bne.n	8000bbe <__aeabi_d2uiz+0x3a>
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	4770      	bx	lr
 8000bbe:	f04f 0000 	mov.w	r0, #0
 8000bc2:	4770      	bx	lr

08000bc4 <__aeabi_d2f>:
 8000bc4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bcc:	bf24      	itt	cs
 8000bce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bd6:	d90d      	bls.n	8000bf4 <__aeabi_d2f+0x30>
 8000bd8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bdc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bec:	bf08      	it	eq
 8000bee:	f020 0001 	biceq.w	r0, r0, #1
 8000bf2:	4770      	bx	lr
 8000bf4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf8:	d121      	bne.n	8000c3e <__aeabi_d2f+0x7a>
 8000bfa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bfe:	bfbc      	itt	lt
 8000c00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c04:	4770      	bxlt	lr
 8000c06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c0e:	f1c2 0218 	rsb	r2, r2, #24
 8000c12:	f1c2 0c20 	rsb	ip, r2, #32
 8000c16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c1e:	bf18      	it	ne
 8000c20:	f040 0001 	orrne.w	r0, r0, #1
 8000c24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c30:	ea40 000c 	orr.w	r0, r0, ip
 8000c34:	fa23 f302 	lsr.w	r3, r3, r2
 8000c38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c3c:	e7cc      	b.n	8000bd8 <__aeabi_d2f+0x14>
 8000c3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c42:	d107      	bne.n	8000c54 <__aeabi_d2f+0x90>
 8000c44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c48:	bf1e      	ittt	ne
 8000c4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c52:	4770      	bxne	lr
 8000c54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <__aeabi_ldivmod>:
 8000c64:	b97b      	cbnz	r3, 8000c86 <__aeabi_ldivmod+0x22>
 8000c66:	b972      	cbnz	r2, 8000c86 <__aeabi_ldivmod+0x22>
 8000c68:	2900      	cmp	r1, #0
 8000c6a:	bfbe      	ittt	lt
 8000c6c:	2000      	movlt	r0, #0
 8000c6e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c72:	e006      	blt.n	8000c82 <__aeabi_ldivmod+0x1e>
 8000c74:	bf08      	it	eq
 8000c76:	2800      	cmpeq	r0, #0
 8000c78:	bf1c      	itt	ne
 8000c7a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c7e:	f04f 30ff 	movne.w	r0, #4294967295
 8000c82:	f000 ba31 	b.w	80010e8 <__aeabi_idiv0>
 8000c86:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	db09      	blt.n	8000ca6 <__aeabi_ldivmod+0x42>
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db1a      	blt.n	8000ccc <__aeabi_ldivmod+0x68>
 8000c96:	f000 f883 	bl	8000da0 <__udivmoddi4>
 8000c9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca2:	b004      	add	sp, #16
 8000ca4:	4770      	bx	lr
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db1b      	blt.n	8000ce8 <__aeabi_ldivmod+0x84>
 8000cb0:	f000 f876 	bl	8000da0 <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	4252      	negs	r2, r2
 8000cc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f865 	bl	8000da0 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4240      	negs	r0, r0
 8000ce2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce6:	4770      	bx	lr
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	f000 f857 	bl	8000da0 <__udivmoddi4>
 8000cf2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfa:	b004      	add	sp, #16
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_uldivmod>:
 8000d04:	b953      	cbnz	r3, 8000d1c <__aeabi_uldivmod+0x18>
 8000d06:	b94a      	cbnz	r2, 8000d1c <__aeabi_uldivmod+0x18>
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	2800      	cmpeq	r0, #0
 8000d0e:	bf1c      	itt	ne
 8000d10:	f04f 31ff 	movne.w	r1, #4294967295
 8000d14:	f04f 30ff 	movne.w	r0, #4294967295
 8000d18:	f000 b9e6 	b.w	80010e8 <__aeabi_idiv0>
 8000d1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d24:	f000 f83c 	bl	8000da0 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_d2lz>:
 8000d34:	b538      	push	{r3, r4, r5, lr}
 8000d36:	2200      	movs	r2, #0
 8000d38:	2300      	movs	r3, #0
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	460d      	mov	r5, r1
 8000d3e:	f7ff febb 	bl	8000ab8 <__aeabi_dcmplt>
 8000d42:	b928      	cbnz	r0, 8000d50 <__aeabi_d2lz+0x1c>
 8000d44:	4620      	mov	r0, r4
 8000d46:	4629      	mov	r1, r5
 8000d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d4c:	f000 b80a 	b.w	8000d64 <__aeabi_d2ulz>
 8000d50:	4620      	mov	r0, r4
 8000d52:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d56:	f000 f805 	bl	8000d64 <__aeabi_d2ulz>
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d60:	bd38      	pop	{r3, r4, r5, pc}
 8000d62:	bf00      	nop

08000d64 <__aeabi_d2ulz>:
 8000d64:	b5d0      	push	{r4, r6, r7, lr}
 8000d66:	2200      	movs	r2, #0
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <__aeabi_d2ulz+0x34>)
 8000d6a:	4606      	mov	r6, r0
 8000d6c:	460f      	mov	r7, r1
 8000d6e:	f7ff fc31 	bl	80005d4 <__aeabi_dmul>
 8000d72:	f7ff ff07 	bl	8000b84 <__aeabi_d2uiz>
 8000d76:	4604      	mov	r4, r0
 8000d78:	f7ff fbb2 	bl	80004e0 <__aeabi_ui2d>
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <__aeabi_d2ulz+0x38>)
 8000d80:	f7ff fc28 	bl	80005d4 <__aeabi_dmul>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4630      	mov	r0, r6
 8000d8a:	4639      	mov	r1, r7
 8000d8c:	f7ff fa6a 	bl	8000264 <__aeabi_dsub>
 8000d90:	f7ff fef8 	bl	8000b84 <__aeabi_d2uiz>
 8000d94:	4621      	mov	r1, r4
 8000d96:	bdd0      	pop	{r4, r6, r7, pc}
 8000d98:	3df00000 	.word	0x3df00000
 8000d9c:	41f00000 	.word	0x41f00000

08000da0 <__udivmoddi4>:
 8000da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000da6:	4688      	mov	r8, r1
 8000da8:	4604      	mov	r4, r0
 8000daa:	468e      	mov	lr, r1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d14a      	bne.n	8000e46 <__udivmoddi4+0xa6>
 8000db0:	428a      	cmp	r2, r1
 8000db2:	4617      	mov	r7, r2
 8000db4:	d95f      	bls.n	8000e76 <__udivmoddi4+0xd6>
 8000db6:	fab2 f682 	clz	r6, r2
 8000dba:	b14e      	cbz	r6, 8000dd0 <__udivmoddi4+0x30>
 8000dbc:	f1c6 0320 	rsb	r3, r6, #32
 8000dc0:	fa01 fe06 	lsl.w	lr, r1, r6
 8000dc4:	40b7      	lsls	r7, r6
 8000dc6:	40b4      	lsls	r4, r6
 8000dc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dcc:	ea43 0e0e 	orr.w	lr, r3, lr
 8000dd0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dd4:	fa1f fc87 	uxth.w	ip, r7
 8000dd8:	0c23      	lsrs	r3, r4, #16
 8000dda:	fbbe f1f8 	udiv	r1, lr, r8
 8000dde:	fb08 ee11 	mls	lr, r8, r1, lr
 8000de2:	fb01 f20c 	mul.w	r2, r1, ip
 8000de6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x5e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x5c>
 8000df6:	429a      	cmp	r2, r3
 8000df8:	f200 8154 	bhi.w	80010a4 <__udivmoddi4+0x304>
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	b2a2      	uxth	r2, r4
 8000e02:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e06:	fb08 3310 	mls	r3, r8, r0, r3
 8000e0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000e12:	4594      	cmp	ip, r2
 8000e14:	d90b      	bls.n	8000e2e <__udivmoddi4+0x8e>
 8000e16:	18ba      	adds	r2, r7, r2
 8000e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1c:	bf2c      	ite	cs
 8000e1e:	2401      	movcs	r4, #1
 8000e20:	2400      	movcc	r4, #0
 8000e22:	4594      	cmp	ip, r2
 8000e24:	d902      	bls.n	8000e2c <__udivmoddi4+0x8c>
 8000e26:	2c00      	cmp	r4, #0
 8000e28:	f000 813f 	beq.w	80010aa <__udivmoddi4+0x30a>
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e32:	eba2 020c 	sub.w	r2, r2, ip
 8000e36:	2100      	movs	r1, #0
 8000e38:	b11d      	cbz	r5, 8000e42 <__udivmoddi4+0xa2>
 8000e3a:	40f2      	lsrs	r2, r6
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e9c5 2300 	strd	r2, r3, [r5]
 8000e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d905      	bls.n	8000e56 <__udivmoddi4+0xb6>
 8000e4a:	b10d      	cbz	r5, 8000e50 <__udivmoddi4+0xb0>
 8000e4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000e50:	2100      	movs	r1, #0
 8000e52:	4608      	mov	r0, r1
 8000e54:	e7f5      	b.n	8000e42 <__udivmoddi4+0xa2>
 8000e56:	fab3 f183 	clz	r1, r3
 8000e5a:	2900      	cmp	r1, #0
 8000e5c:	d14e      	bne.n	8000efc <__udivmoddi4+0x15c>
 8000e5e:	4543      	cmp	r3, r8
 8000e60:	f0c0 8112 	bcc.w	8001088 <__udivmoddi4+0x2e8>
 8000e64:	4282      	cmp	r2, r0
 8000e66:	f240 810f 	bls.w	8001088 <__udivmoddi4+0x2e8>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	2d00      	cmp	r5, #0
 8000e6e:	d0e8      	beq.n	8000e42 <__udivmoddi4+0xa2>
 8000e70:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e74:	e7e5      	b.n	8000e42 <__udivmoddi4+0xa2>
 8000e76:	2a00      	cmp	r2, #0
 8000e78:	f000 80ac 	beq.w	8000fd4 <__udivmoddi4+0x234>
 8000e7c:	fab2 f682 	clz	r6, r2
 8000e80:	2e00      	cmp	r6, #0
 8000e82:	f040 80bb 	bne.w	8000ffc <__udivmoddi4+0x25c>
 8000e86:	1a8b      	subs	r3, r1, r2
 8000e88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e8c:	b2bc      	uxth	r4, r7
 8000e8e:	2101      	movs	r1, #1
 8000e90:	0c02      	lsrs	r2, r0, #16
 8000e92:	b280      	uxth	r0, r0
 8000e94:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e9c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000ea0:	fb04 f20c 	mul.w	r2, r4, ip
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d90e      	bls.n	8000ec6 <__udivmoddi4+0x126>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000eae:	bf2c      	ite	cs
 8000eb0:	f04f 0901 	movcs.w	r9, #1
 8000eb4:	f04f 0900 	movcc.w	r9, #0
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d903      	bls.n	8000ec4 <__udivmoddi4+0x124>
 8000ebc:	f1b9 0f00 	cmp.w	r9, #0
 8000ec0:	f000 80ec 	beq.w	800109c <__udivmoddi4+0x2fc>
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ecc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ed0:	fb04 f408 	mul.w	r4, r4, r8
 8000ed4:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000ed8:	4294      	cmp	r4, r2
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x154>
 8000edc:	18ba      	adds	r2, r7, r2
 8000ede:	f108 33ff 	add.w	r3, r8, #4294967295
 8000ee2:	bf2c      	ite	cs
 8000ee4:	2001      	movcs	r0, #1
 8000ee6:	2000      	movcc	r0, #0
 8000ee8:	4294      	cmp	r4, r2
 8000eea:	d902      	bls.n	8000ef2 <__udivmoddi4+0x152>
 8000eec:	2800      	cmp	r0, #0
 8000eee:	f000 80d1 	beq.w	8001094 <__udivmoddi4+0x2f4>
 8000ef2:	4698      	mov	r8, r3
 8000ef4:	1b12      	subs	r2, r2, r4
 8000ef6:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000efa:	e79d      	b.n	8000e38 <__udivmoddi4+0x98>
 8000efc:	f1c1 0620 	rsb	r6, r1, #32
 8000f00:	408b      	lsls	r3, r1
 8000f02:	fa08 f401 	lsl.w	r4, r8, r1
 8000f06:	fa00 f901 	lsl.w	r9, r0, r1
 8000f0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f0e:	fa28 f806 	lsr.w	r8, r8, r6
 8000f12:	408a      	lsls	r2, r1
 8000f14:	431f      	orrs	r7, r3
 8000f16:	fa20 f306 	lsr.w	r3, r0, r6
 8000f1a:	0c38      	lsrs	r0, r7, #16
 8000f1c:	4323      	orrs	r3, r4
 8000f1e:	fa1f fc87 	uxth.w	ip, r7
 8000f22:	0c1c      	lsrs	r4, r3, #16
 8000f24:	fbb8 fef0 	udiv	lr, r8, r0
 8000f28:	fb00 881e 	mls	r8, r0, lr, r8
 8000f2c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000f30:	fb0e f80c 	mul.w	r8, lr, ip
 8000f34:	45a0      	cmp	r8, r4
 8000f36:	d90e      	bls.n	8000f56 <__udivmoddi4+0x1b6>
 8000f38:	193c      	adds	r4, r7, r4
 8000f3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f3e:	bf2c      	ite	cs
 8000f40:	f04f 0b01 	movcs.w	fp, #1
 8000f44:	f04f 0b00 	movcc.w	fp, #0
 8000f48:	45a0      	cmp	r8, r4
 8000f4a:	d903      	bls.n	8000f54 <__udivmoddi4+0x1b4>
 8000f4c:	f1bb 0f00 	cmp.w	fp, #0
 8000f50:	f000 80b8 	beq.w	80010c4 <__udivmoddi4+0x324>
 8000f54:	46d6      	mov	lr, sl
 8000f56:	eba4 0408 	sub.w	r4, r4, r8
 8000f5a:	fa1f f883 	uxth.w	r8, r3
 8000f5e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f62:	fb00 4413 	mls	r4, r0, r3, r4
 8000f66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f6a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000f6e:	45a4      	cmp	ip, r4
 8000f70:	d90e      	bls.n	8000f90 <__udivmoddi4+0x1f0>
 8000f72:	193c      	adds	r4, r7, r4
 8000f74:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f78:	bf2c      	ite	cs
 8000f7a:	f04f 0801 	movcs.w	r8, #1
 8000f7e:	f04f 0800 	movcc.w	r8, #0
 8000f82:	45a4      	cmp	ip, r4
 8000f84:	d903      	bls.n	8000f8e <__udivmoddi4+0x1ee>
 8000f86:	f1b8 0f00 	cmp.w	r8, #0
 8000f8a:	f000 809f 	beq.w	80010cc <__udivmoddi4+0x32c>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f94:	eba4 040c 	sub.w	r4, r4, ip
 8000f98:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f9c:	4564      	cmp	r4, ip
 8000f9e:	4673      	mov	r3, lr
 8000fa0:	46e0      	mov	r8, ip
 8000fa2:	d302      	bcc.n	8000faa <__udivmoddi4+0x20a>
 8000fa4:	d107      	bne.n	8000fb6 <__udivmoddi4+0x216>
 8000fa6:	45f1      	cmp	r9, lr
 8000fa8:	d205      	bcs.n	8000fb6 <__udivmoddi4+0x216>
 8000faa:	ebbe 0302 	subs.w	r3, lr, r2
 8000fae:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fb2:	3801      	subs	r0, #1
 8000fb4:	46e0      	mov	r8, ip
 8000fb6:	b15d      	cbz	r5, 8000fd0 <__udivmoddi4+0x230>
 8000fb8:	ebb9 0203 	subs.w	r2, r9, r3
 8000fbc:	eb64 0408 	sbc.w	r4, r4, r8
 8000fc0:	fa04 f606 	lsl.w	r6, r4, r6
 8000fc4:	fa22 f301 	lsr.w	r3, r2, r1
 8000fc8:	40cc      	lsrs	r4, r1
 8000fca:	431e      	orrs	r6, r3
 8000fcc:	e9c5 6400 	strd	r6, r4, [r5]
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	e736      	b.n	8000e42 <__udivmoddi4+0xa2>
 8000fd4:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fd8:	0c01      	lsrs	r1, r0, #16
 8000fda:	4614      	mov	r4, r2
 8000fdc:	b280      	uxth	r0, r0
 8000fde:	4696      	mov	lr, r2
 8000fe0:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fe4:	2620      	movs	r6, #32
 8000fe6:	4690      	mov	r8, r2
 8000fe8:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000fec:	4610      	mov	r0, r2
 8000fee:	fbb1 f1f2 	udiv	r1, r1, r2
 8000ff2:	eba3 0308 	sub.w	r3, r3, r8
 8000ff6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ffa:	e74b      	b.n	8000e94 <__udivmoddi4+0xf4>
 8000ffc:	40b7      	lsls	r7, r6
 8000ffe:	f1c6 0320 	rsb	r3, r6, #32
 8001002:	fa01 f206 	lsl.w	r2, r1, r6
 8001006:	fa21 f803 	lsr.w	r8, r1, r3
 800100a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800100e:	fa20 f303 	lsr.w	r3, r0, r3
 8001012:	b2bc      	uxth	r4, r7
 8001014:	40b0      	lsls	r0, r6
 8001016:	4313      	orrs	r3, r2
 8001018:	0c02      	lsrs	r2, r0, #16
 800101a:	0c19      	lsrs	r1, r3, #16
 800101c:	b280      	uxth	r0, r0
 800101e:	fbb8 f9fe 	udiv	r9, r8, lr
 8001022:	fb0e 8819 	mls	r8, lr, r9, r8
 8001026:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800102a:	fb09 f804 	mul.w	r8, r9, r4
 800102e:	4588      	cmp	r8, r1
 8001030:	d951      	bls.n	80010d6 <__udivmoddi4+0x336>
 8001032:	1879      	adds	r1, r7, r1
 8001034:	f109 3cff 	add.w	ip, r9, #4294967295
 8001038:	bf2c      	ite	cs
 800103a:	f04f 0a01 	movcs.w	sl, #1
 800103e:	f04f 0a00 	movcc.w	sl, #0
 8001042:	4588      	cmp	r8, r1
 8001044:	d902      	bls.n	800104c <__udivmoddi4+0x2ac>
 8001046:	f1ba 0f00 	cmp.w	sl, #0
 800104a:	d031      	beq.n	80010b0 <__udivmoddi4+0x310>
 800104c:	eba1 0108 	sub.w	r1, r1, r8
 8001050:	fbb1 f9fe 	udiv	r9, r1, lr
 8001054:	fb09 f804 	mul.w	r8, r9, r4
 8001058:	fb0e 1119 	mls	r1, lr, r9, r1
 800105c:	b29b      	uxth	r3, r3
 800105e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001062:	4543      	cmp	r3, r8
 8001064:	d235      	bcs.n	80010d2 <__udivmoddi4+0x332>
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	f109 31ff 	add.w	r1, r9, #4294967295
 800106c:	bf2c      	ite	cs
 800106e:	f04f 0a01 	movcs.w	sl, #1
 8001072:	f04f 0a00 	movcc.w	sl, #0
 8001076:	4543      	cmp	r3, r8
 8001078:	d2bb      	bcs.n	8000ff2 <__udivmoddi4+0x252>
 800107a:	f1ba 0f00 	cmp.w	sl, #0
 800107e:	d1b8      	bne.n	8000ff2 <__udivmoddi4+0x252>
 8001080:	f1a9 0102 	sub.w	r1, r9, #2
 8001084:	443b      	add	r3, r7
 8001086:	e7b4      	b.n	8000ff2 <__udivmoddi4+0x252>
 8001088:	1a84      	subs	r4, r0, r2
 800108a:	eb68 0203 	sbc.w	r2, r8, r3
 800108e:	2001      	movs	r0, #1
 8001090:	4696      	mov	lr, r2
 8001092:	e6eb      	b.n	8000e6c <__udivmoddi4+0xcc>
 8001094:	443a      	add	r2, r7
 8001096:	f1a8 0802 	sub.w	r8, r8, #2
 800109a:	e72b      	b.n	8000ef4 <__udivmoddi4+0x154>
 800109c:	f1ac 0c02 	sub.w	ip, ip, #2
 80010a0:	443b      	add	r3, r7
 80010a2:	e710      	b.n	8000ec6 <__udivmoddi4+0x126>
 80010a4:	3902      	subs	r1, #2
 80010a6:	443b      	add	r3, r7
 80010a8:	e6a9      	b.n	8000dfe <__udivmoddi4+0x5e>
 80010aa:	443a      	add	r2, r7
 80010ac:	3802      	subs	r0, #2
 80010ae:	e6be      	b.n	8000e2e <__udivmoddi4+0x8e>
 80010b0:	eba7 0808 	sub.w	r8, r7, r8
 80010b4:	f1a9 0c02 	sub.w	ip, r9, #2
 80010b8:	4441      	add	r1, r8
 80010ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80010be:	fb09 f804 	mul.w	r8, r9, r4
 80010c2:	e7c9      	b.n	8001058 <__udivmoddi4+0x2b8>
 80010c4:	f1ae 0e02 	sub.w	lr, lr, #2
 80010c8:	443c      	add	r4, r7
 80010ca:	e744      	b.n	8000f56 <__udivmoddi4+0x1b6>
 80010cc:	3b02      	subs	r3, #2
 80010ce:	443c      	add	r4, r7
 80010d0:	e75e      	b.n	8000f90 <__udivmoddi4+0x1f0>
 80010d2:	4649      	mov	r1, r9
 80010d4:	e78d      	b.n	8000ff2 <__udivmoddi4+0x252>
 80010d6:	eba1 0108 	sub.w	r1, r1, r8
 80010da:	46cc      	mov	ip, r9
 80010dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e0:	fb09 f804 	mul.w	r8, r9, r4
 80010e4:	e7b8      	b.n	8001058 <__udivmoddi4+0x2b8>
 80010e6:	bf00      	nop

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800110e:	4b45      	ldr	r3, [pc, #276]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001110:	4a45      	ldr	r2, [pc, #276]	@ (8001228 <MX_ADC1_Init+0x13c>)
 8001112:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001114:	4b43      	ldr	r3, [pc, #268]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800111a:	4b42      	ldr	r3, [pc, #264]	@ (8001224 <MX_ADC1_Init+0x138>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001120:	4b40      	ldr	r3, [pc, #256]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001126:	4b3f      	ldr	r3, [pc, #252]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001128:	2201      	movs	r2, #1
 800112a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112c:	4b3d      	ldr	r3, [pc, #244]	@ (8001224 <MX_ADC1_Init+0x138>)
 800112e:	2204      	movs	r2, #4
 8001130:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001132:	4b3c      	ldr	r3, [pc, #240]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001134:	2200      	movs	r2, #0
 8001136:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001138:	4b3a      	ldr	r3, [pc, #232]	@ (8001224 <MX_ADC1_Init+0x138>)
 800113a:	2200      	movs	r2, #0
 800113c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800113e:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001140:	2204      	movs	r2, #4
 8001142:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001144:	4b37      	ldr	r3, [pc, #220]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800114c:	4b35      	ldr	r3, [pc, #212]	@ (8001224 <MX_ADC1_Init+0x138>)
 800114e:	2200      	movs	r2, #0
 8001150:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001152:	4b34      	ldr	r3, [pc, #208]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001154:	2200      	movs	r2, #0
 8001156:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001158:	4b32      	ldr	r3, [pc, #200]	@ (8001224 <MX_ADC1_Init+0x138>)
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001160:	4b30      	ldr	r3, [pc, #192]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001162:	2200      	movs	r2, #0
 8001164:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001166:	4b2f      	ldr	r3, [pc, #188]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800116e:	482d      	ldr	r0, [pc, #180]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001170:	f001 fde6 	bl	8002d40 <HAL_ADC_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800117a:	f000 ff71 	bl	8002060 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	4826      	ldr	r0, [pc, #152]	@ (8001224 <MX_ADC1_Init+0x138>)
 800118a:	f002 ff39 	bl	8004000 <HAL_ADCEx_MultiModeConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001194:	f000 ff64 	bl	8002060 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001198:	4b24      	ldr	r3, [pc, #144]	@ (800122c <MX_ADC1_Init+0x140>)
 800119a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800119c:	2306      	movs	r3, #6
 800119e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011a4:	237f      	movs	r3, #127	@ 0x7f
 80011a6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a8:	2304      	movs	r3, #4
 80011aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	481b      	ldr	r0, [pc, #108]	@ (8001224 <MX_ADC1_Init+0x138>)
 80011b6:	f002 f8e3 	bl	8003380 <HAL_ADC_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80011c0:	f000 ff4e 	bl	8002060 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_ADC1_Init+0x144>)
 80011c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011c8:	230c      	movs	r3, #12
 80011ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80011cc:	2307      	movs	r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	4813      	ldr	r0, [pc, #76]	@ (8001224 <MX_ADC1_Init+0x138>)
 80011d6:	f002 f8d3 	bl	8003380 <HAL_ADC_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80011e0:	f000 ff3e 	bl	8002060 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <MX_ADC1_Init+0x148>)
 80011e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011e8:	2312      	movs	r3, #18
 80011ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	480c      	ldr	r0, [pc, #48]	@ (8001224 <MX_ADC1_Init+0x138>)
 80011f2:	f002 f8c5 	bl	8003380 <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80011fc:	f000 ff30 	bl	8002060 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8001200:	4b0d      	ldr	r3, [pc, #52]	@ (8001238 <MX_ADC1_Init+0x14c>)
 8001202:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001204:	2318      	movs	r3, #24
 8001206:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_ADC1_Init+0x138>)
 800120e:	f002 f8b7 	bl	8003380 <HAL_ADC_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8001218:	f000 ff22 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	@ 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000270 	.word	0x20000270
 8001228:	42028000 	.word	0x42028000
 800122c:	14f00020 	.word	0x14f00020
 8001230:	c7520000 	.word	0xc7520000
 8001234:	80000001 	.word	0x80000001
 8001238:	cb840000 	.word	0xcb840000

0800123c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0ae      	sub	sp, #184	@ 0xb8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	2294      	movs	r2, #148	@ 0x94
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f009 f924 	bl	800a4aa <memset>
  if(adcHandle->Instance==ADC1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a27      	ldr	r2, [pc, #156]	@ (8001304 <HAL_ADC_MspInit+0xc8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d146      	bne.n	80012fa <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800126c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001270:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001272:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001276:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 800127a:	2301      	movs	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800127e:	2301      	movs	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001282:	2310      	movs	r3, #16
 8001284:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001286:	2307      	movs	r3, #7
 8001288:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800128a:	2302      	movs	r3, #2
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800128e:	2302      	movs	r3, #2
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001292:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4618      	mov	r0, r3
 800129e:	f004 fd0f 	bl	8005cc0 <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80012a8:	f000 feda 	bl	8002060 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012ac:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <HAL_ADC_MspInit+0xcc>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b0:	4a15      	ldr	r2, [pc, #84]	@ (8001308 <HAL_ADC_MspInit+0xcc>)
 80012b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b8:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <HAL_ADC_MspInit+0xcc>)
 80012ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <HAL_ADC_MspInit+0xcc>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001308 <HAL_ADC_MspInit+0xcc>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <HAL_ADC_MspInit+0xcc>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012dc:	2301      	movs	r3, #1
 80012de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	@ (800130c <HAL_ADC_MspInit+0xd0>)
 80012f6:	f003 fadd 	bl	80048b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012fa:	bf00      	nop
 80012fc:	37b8      	adds	r7, #184	@ 0xb8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	42028000 	.word	0x42028000
 8001308:	40021000 	.word	0x40021000
 800130c:	42020000 	.word	0x42020000

08001310 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b3d      	ldr	r3, [pc, #244]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a3c      	ldr	r2, [pc, #240]	@ (800141c <MX_GPIO_Init+0x10c>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b3a      	ldr	r3, [pc, #232]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	4b37      	ldr	r3, [pc, #220]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	4a36      	ldr	r2, [pc, #216]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134a:	4b34      	ldr	r3, [pc, #208]	@ (800141c <MX_GPIO_Init+0x10c>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b31      	ldr	r3, [pc, #196]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	4a30      	ldr	r2, [pc, #192]	@ (800141c <MX_GPIO_Init+0x10c>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001362:	4b2e      	ldr	r3, [pc, #184]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	4a2a      	ldr	r2, [pc, #168]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137a:	4b28      	ldr	r3, [pc, #160]	@ (800141c <MX_GPIO_Init+0x10c>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800138c:	4824      	ldr	r0, [pc, #144]	@ (8001420 <MX_GPIO_Init+0x110>)
 800138e:	f003 fc11 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2110      	movs	r1, #16
 8001396:	4823      	ldr	r0, [pc, #140]	@ (8001424 <MX_GPIO_Init+0x114>)
 8001398:	f003 fc0c 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2101      	movs	r1, #1
 80013a0:	4821      	ldr	r0, [pc, #132]	@ (8001428 <MX_GPIO_Init+0x118>)
 80013a2:	f003 fc07 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4818      	ldr	r0, [pc, #96]	@ (8001420 <MX_GPIO_Init+0x110>)
 80013c0:	f003 fa78 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Bat23_Pin */
  GPIO_InitStruct.Pin = Bat23_Pin;
 80013c4:	2302      	movs	r3, #2
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Bat23_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4813      	ldr	r0, [pc, #76]	@ (8001424 <MX_GPIO_Init+0x114>)
 80013d8:	f003 fa6c 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013dc:	2310      	movs	r3, #16
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	480c      	ldr	r0, [pc, #48]	@ (8001424 <MX_GPIO_Init+0x114>)
 80013f4:	f003 fa5e 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013f8:	2301      	movs	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	@ (8001428 <MX_GPIO_Init+0x118>)
 8001410:	f003 fa50 	bl	80048b4 <HAL_GPIO_Init>

}
 8001414:	bf00      	nop
 8001416:	3728      	adds	r7, #40	@ 0x28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	42020800 	.word	0x42020800
 8001424:	42020000 	.word	0x42020000
 8001428:	42020400 	.word	0x42020400

0800142c <read_voltage>:

/**
  * @brief Read voltage from ADC
  */
static float read_voltage(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
    float voltage = 0.0f;
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    ADC_ChannelConfTypeDef sConfig = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
 800144a:	615a      	str	r2, [r3, #20]

    // Конфигурация канала ADC
    sConfig.Channel = ADC_CHANNEL_0;
 800144c:	2301      	movs	r3, #1
 800144e:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001450:	2306      	movs	r3, #6
 8001452:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001458:	237f      	movs	r3, #127	@ 0x7f
 800145a:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800145c:	2304      	movs	r3, #4
 800145e:	613b      	str	r3, [r7, #16]
    sConfig.Offset = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	4819      	ldr	r0, [pc, #100]	@ (80014d0 <read_voltage+0xa4>)
 800146a:	f001 ff89 	bl	8003380 <HAL_ADC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <read_voltage+0x4e>
    {
        return 0.0f;
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e023      	b.n	80014c2 <read_voltage+0x96>
    }

    // Запуск преобразования ADC
    if (HAL_ADC_Start(&hadc1) == HAL_OK)
 800147a:	4815      	ldr	r0, [pc, #84]	@ (80014d0 <read_voltage+0xa4>)
 800147c:	f001 fdac 	bl	8002fd8 <HAL_ADC_Start>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d11c      	bne.n	80014c0 <read_voltage+0x94>
    {
        // Ожидание завершения преобразования
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001486:	2164      	movs	r1, #100	@ 0x64
 8001488:	4811      	ldr	r0, [pc, #68]	@ (80014d0 <read_voltage+0xa4>)
 800148a:	f001 fe93 	bl	80031b4 <HAL_ADC_PollForConversion>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d112      	bne.n	80014ba <read_voltage+0x8e>
        {
            adcValue = HAL_ADC_GetValue(&hadc1);
 8001494:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <read_voltage+0xa4>)
 8001496:	f001 ff65 	bl	8003364 <HAL_ADC_GetValue>
 800149a:	61b8      	str	r0, [r7, #24]
            voltage = (float)adcValue * 3.3f / 4095.0f;
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	ee07 3a90 	vmov	s15, r3
 80014a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80014d4 <read_voltage+0xa8>
 80014aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014ae:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80014d8 <read_voltage+0xac>
 80014b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        HAL_ADC_Stop(&hadc1);
 80014ba:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <read_voltage+0xa4>)
 80014bc:	f001 fe46 	bl	800314c <HAL_ADC_Stop>
    }

    return voltage;
 80014c0:	69fb      	ldr	r3, [r7, #28]
}
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000270 	.word	0x20000270
 80014d4:	40533333 	.word	0x40533333
 80014d8:	457ff000 	.word	0x457ff000

080014dc <read_temperature>:

/**
  * @brief Read temperature from internal sensor
  */
static float read_temperature(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
    float temperature = 0.0f;
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
    ADC_ChannelConfTypeDef sConfig = {0};
 80014ec:	463b      	mov	r3, r7
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
 80014fa:	615a      	str	r2, [r3, #20]

    // Конфигурация канала температурного датчика
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014fc:	4b33      	ldr	r3, [pc, #204]	@ (80015cc <read_temperature+0xf0>)
 80014fe:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001500:	2306      	movs	r3, #6
 8001502:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001504:	2307      	movs	r3, #7
 8001506:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001508:	237f      	movs	r3, #127	@ 0x7f
 800150a:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800150c:	2304      	movs	r3, #4
 800150e:	613b      	str	r3, [r7, #16]
    sConfig.Offset = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	4619      	mov	r1, r3
 8001518:	482d      	ldr	r0, [pc, #180]	@ (80015d0 <read_temperature+0xf4>)
 800151a:	f001 ff31 	bl	8003380 <HAL_ADC_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <read_temperature+0x4e>
    {
        return 0.0f;
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e048      	b.n	80015bc <read_temperature+0xe0>
    }

    // Калибровка ADC
    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800152a:	217f      	movs	r1, #127	@ 0x7f
 800152c:	4828      	ldr	r0, [pc, #160]	@ (80015d0 <read_temperature+0xf4>)
 800152e:	f002 fd05 	bl	8003f3c <HAL_ADCEx_Calibration_Start>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <read_temperature+0x62>
    {
        return 0.0f;
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e03e      	b.n	80015bc <read_temperature+0xe0>
    }

    // Запуск преобразования ADC
    if (HAL_ADC_Start(&hadc1) == HAL_OK)
 800153e:	4824      	ldr	r0, [pc, #144]	@ (80015d0 <read_temperature+0xf4>)
 8001540:	f001 fd4a 	bl	8002fd8 <HAL_ADC_Start>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d137      	bne.n	80015ba <read_temperature+0xde>
    {
        // Ожидание завершения преобразования
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 800154a:	2164      	movs	r1, #100	@ 0x64
 800154c:	4820      	ldr	r0, [pc, #128]	@ (80015d0 <read_temperature+0xf4>)
 800154e:	f001 fe31 	bl	80031b4 <HAL_ADC_PollForConversion>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d12d      	bne.n	80015b4 <read_temperature+0xd8>
        {
            adcValue = HAL_ADC_GetValue(&hadc1);
 8001558:	481d      	ldr	r0, [pc, #116]	@ (80015d0 <read_temperature+0xf4>)
 800155a:	f001 ff03 	bl	8003364 <HAL_ADC_GetValue>
 800155e:	6238      	str	r0, [r7, #32]

            // Калибровочные значения для STM32L5
            uint32_t raw_ts_cal1 = *((uint16_t*)0x0BFA05A8); // Калибровка при 30°C
 8001560:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <read_temperature+0xf8>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	61fb      	str	r3, [r7, #28]
            uint32_t raw_ts_cal2 = *((uint16_t*)0x0BFA05CA); // Калибровка при 130°C
 8001566:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <read_temperature+0xfc>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	61bb      	str	r3, [r7, #24]

            // Расчет температуры по калибровочным значениям
            temperature = 30.0f + ((float)adcValue - (float)raw_ts_cal1) *
 800156c:	6a3b      	ldr	r3, [r7, #32]
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001580:	ee37 7a67 	vsub.f32	s14, s14, s15
                         (100.0f / ((float)raw_ts_cal2 - (float)raw_ts_cal1));
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001598:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800159c:	ed9f 6a0f 	vldr	s12, [pc, #60]	@ 80015dc <read_temperature+0x100>
 80015a0:	eec6 7a26 	vdiv.f32	s15, s12, s13
            temperature = 30.0f + ((float)adcValue - (float)raw_ts_cal1) *
 80015a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80015ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        }
        HAL_ADC_Stop(&hadc1);
 80015b4:	4806      	ldr	r0, [pc, #24]	@ (80015d0 <read_temperature+0xf4>)
 80015b6:	f001 fdc9 	bl	800314c <HAL_ADC_Stop>
    }

    return temperature;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80015bc:	ee07 3a90 	vmov	s15, r3
 80015c0:	eeb0 0a67 	vmov.f32	s0, s15
 80015c4:	3728      	adds	r7, #40	@ 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	c7520000 	.word	0xc7520000
 80015d0:	20000270 	.word	0x20000270
 80015d4:	0bfa05a8 	.word	0x0bfa05a8
 80015d8:	0bfa05ca 	.word	0x0bfa05ca
 80015dc:	42c80000 	.word	0x42c80000

080015e0 <convert_to_timestamp>:

/**
  * @brief Convert RTC date/time to Unix timestamp (accurate)
  */
static uint32_t convert_to_timestamp(RTC_DateTypeDef date, RTC_TimeTypeDef time)
{
 80015e0:	b084      	sub	sp, #16
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b08c      	sub	sp, #48	@ 0x30
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80015ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    struct tm tm_time = {
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	2224      	movs	r2, #36	@ 0x24
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f008 ff55 	bl	800a4aa <memset>
        .tm_sec = time.Seconds,
 8001600:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
    struct tm tm_time = {
 8001604:	60fb      	str	r3, [r7, #12]
        .tm_min = time.Minutes,
 8001606:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
    struct tm tm_time = {
 800160a:	613b      	str	r3, [r7, #16]
        .tm_hour = time.Hours,
 800160c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
    struct tm tm_time = {
 8001610:	617b      	str	r3, [r7, #20]
        .tm_mday = date.Date,
 8001612:	79bb      	ldrb	r3, [r7, #6]
    struct tm tm_time = {
 8001614:	61bb      	str	r3, [r7, #24]
        .tm_mon = date.Month - 1,
 8001616:	797b      	ldrb	r3, [r7, #5]
 8001618:	3b01      	subs	r3, #1
    struct tm tm_time = {
 800161a:	61fb      	str	r3, [r7, #28]
        .tm_year = date.Year + 100,  // STM32 RTC year is offset from 2000 (2000=0)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	3364      	adds	r3, #100	@ 0x64
    struct tm tm_time = {
 8001620:	623b      	str	r3, [r7, #32]
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .tm_isdst = -1
    };

    return mktime(&tm_time);
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	4618      	mov	r0, r3
 800162e:	f009 f93d 	bl	800a8ac <mktime>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4613      	mov	r3, r2
}
 8001638:	4618      	mov	r0, r3
 800163a:	3730      	adds	r7, #48	@ 0x30
 800163c:	46bd      	mov	sp, r7
 800163e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001642:	b004      	add	sp, #16
 8001644:	4770      	bx	lr

08001646 <convert_from_timestamp>:

/**
  * @brief Convert Unix timestamp to RTC date/time
  */
static void convert_from_timestamp(uint32_t timestamp, RTC_DateTypeDef* date, RTC_TimeTypeDef* time)
{
 8001646:	b5b0      	push	{r4, r5, r7, lr}
 8001648:	b088      	sub	sp, #32
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
    struct tm *tm_time;
    time_t t = timestamp;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	461c      	mov	r4, r3
 8001658:	4615      	mov	r5, r2
 800165a:	e9c7 4504 	strd	r4, r5, [r7, #16]
    tm_time = localtime(&t);
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	4618      	mov	r0, r3
 8001664:	f008 ff40 	bl	800a4e8 <localtime>
 8001668:	61f8      	str	r0, [r7, #28]

    time->Seconds = tm_time->tm_sec;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	709a      	strb	r2, [r3, #2]
    time->Minutes = tm_time->tm_min;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	705a      	strb	r2, [r3, #1]
    time->Hours = tm_time->tm_hour;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	701a      	strb	r2, [r3, #0]

    date->Date = tm_time->tm_mday;
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	709a      	strb	r2, [r3, #2]
    date->Month = tm_time->tm_mon + 1;
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	3301      	adds	r3, #1
 800169a:	b2da      	uxtb	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	705a      	strb	r2, [r3, #1]
    date->Year = tm_time->tm_year - 100;  // Convert back to STM32 RTC format
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	3b64      	subs	r3, #100	@ 0x64
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	70da      	strb	r2, [r3, #3]
    date->WeekDay = tm_time->tm_wday;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	701a      	strb	r2, [r3, #0]
}
 80016b8:	bf00      	nop
 80016ba:	3720      	adds	r7, #32
 80016bc:	46bd      	mov	sp, r7
 80016be:	bdb0      	pop	{r4, r5, r7, pc}

080016c0 <is_data_valid>:

static bool is_data_valid(FlashCalendarData* data)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    return (data->magic == FLASH_DATA_MAGIC &&
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
            data->data_valid == DATA_VALID_FLAG &&
 80016cc:	4a0b      	ldr	r2, [pc, #44]	@ (80016fc <is_data_valid+0x3c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d109      	bne.n	80016e6 <is_data_valid+0x26>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7b1b      	ldrb	r3, [r3, #12]
    return (data->magic == FLASH_DATA_MAGIC &&
 80016d6:	2baa      	cmp	r3, #170	@ 0xaa
 80016d8:	d105      	bne.n	80016e6 <is_data_valid+0x26>
            data->period_sec > 0);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
            data->data_valid == DATA_VALID_FLAG &&
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <is_data_valid+0x26>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <is_data_valid+0x28>
 80016e6:	2300      	movs	r3, #0
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	b2db      	uxtb	r3, r3
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	abcd1234 	.word	0xabcd1234

08001700 <save_to_flash>:

static void save_to_flash(FlashCalendarData data)
{
 8001700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001704:	b099      	sub	sp, #100	@ 0x64
 8001706:	af00      	add	r7, sp, #0
 8001708:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800170c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_FLASH_Unlock();
 8001710:	f002 ff26 	bl	8004560 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase_init = {
 8001714:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001718:	2300      	movs	r3, #0
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	6053      	str	r3, [r2, #4]
 800171e:	6093      	str	r3, [r2, #8]
 8001720:	60d3      	str	r3, [r2, #12]
 8001722:	2302      	movs	r3, #2
 8001724:	643b      	str	r3, [r7, #64]	@ 0x40
        .TypeErase = FLASH_TYPEERASE_PAGES,
        .Page = (FLASH_USER_START_ADDR - FLASH_BASE) / FLASH_PAGE_SIZE,
 8001726:	4b6e      	ldr	r3, [pc, #440]	@ (80018e0 <save_to_flash+0x1e0>)
 8001728:	881a      	ldrh	r2, [r3, #0]
 800172a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800172e:	429a      	cmp	r2, r3
 8001730:	d00e      	beq.n	8001750 <save_to_flash+0x50>
 8001732:	4b6b      	ldr	r3, [pc, #428]	@ (80018e0 <save_to_flash+0x1e0>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d008      	beq.n	800174c <save_to_flash+0x4c>
 800173a:	4b69      	ldr	r3, [pc, #420]	@ (80018e0 <save_to_flash+0x1e0>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	029a      	lsls	r2, r3, #10
 8001740:	4b68      	ldr	r3, [pc, #416]	@ (80018e4 <save_to_flash+0x1e4>)
 8001742:	4013      	ands	r3, r2
 8001744:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001748:	0adb      	lsrs	r3, r3, #11
 800174a:	e002      	b.n	8001752 <save_to_flash+0x52>
 800174c:	23ff      	movs	r3, #255	@ 0xff
 800174e:	e000      	b.n	8001752 <save_to_flash+0x52>
 8001750:	23ff      	movs	r3, #255	@ 0xff
    FLASH_EraseInitTypeDef erase_init = {
 8001752:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001754:	2301      	movs	r3, #1
 8001756:	64fb      	str	r3, [r7, #76]	@ 0x4c
        .NbPages = 1
    };

    uint32_t page_error;
    HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001758:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800175c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f002 ffb6 	bl	80046d4 <HAL_FLASHEx_Erase>

    uint32_t address = FLASH_USER_START_ADDR;
 8001768:	4b5d      	ldr	r3, [pc, #372]	@ (80018e0 <save_to_flash+0x1e0>)
 800176a:	881a      	ldrh	r2, [r3, #0]
 800176c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001770:	429a      	cmp	r2, r3
 8001772:	d00f      	beq.n	8001794 <save_to_flash+0x94>
 8001774:	4b5a      	ldr	r3, [pc, #360]	@ (80018e0 <save_to_flash+0x1e0>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d009      	beq.n	8001790 <save_to_flash+0x90>
 800177c:	4b58      	ldr	r3, [pc, #352]	@ (80018e0 <save_to_flash+0x1e0>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	029a      	lsls	r2, r3, #10
 8001782:	4b58      	ldr	r3, [pc, #352]	@ (80018e4 <save_to_flash+0x1e4>)
 8001784:	4013      	ands	r3, r2
 8001786:	f103 63ff 	add.w	r3, r3, #133693440	@ 0x7f80000
 800178a:	f503 23ff 	add.w	r3, r3, #522240	@ 0x7f800
 800178e:	e002      	b.n	8001796 <save_to_flash+0x96>
 8001790:	4b55      	ldr	r3, [pc, #340]	@ (80018e8 <save_to_flash+0x1e8>)
 8001792:	e000      	b.n	8001796 <save_to_flash+0x96>
 8001794:	4b54      	ldr	r3, [pc, #336]	@ (80018e8 <save_to_flash+0x1e8>)
 8001796:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint64_t data64 = ((uint64_t)data.magic << 32) | data.magic;
 8001798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179a:	2200      	movs	r2, #0
 800179c:	623b      	str	r3, [r7, #32]
 800179e:	627a      	str	r2, [r7, #36]	@ 0x24
 80017a0:	2301      	movs	r3, #1
 80017a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017a6:	460a      	mov	r2, r1
 80017a8:	fb03 f202 	mul.w	r2, r3, r2
 80017ac:	2301      	movs	r3, #1
 80017ae:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80017b2:	4601      	mov	r1, r0
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	441a      	add	r2, r3
 80017ba:	2301      	movs	r3, #1
 80017bc:	6a39      	ldr	r1, [r7, #32]
 80017be:	fba1 8903 	umull	r8, r9, r1, r3
 80017c2:	eb02 0309 	add.w	r3, r2, r9
 80017c6:	4699      	mov	r9, r3
 80017c8:	e9c7 8914 	strd	r8, r9, [r7, #80]	@ 0x50
 80017cc:	e9c7 8914 	strd	r8, r9, [r7, #80]	@ 0x50
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data64);
 80017d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80017d4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80017d6:	2001      	movs	r0, #1
 80017d8:	f002 fe80 	bl	80044dc <HAL_FLASH_Program>
    address += 8;
 80017dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017de:	3308      	adds	r3, #8
 80017e0:	65fb      	str	r3, [r7, #92]	@ 0x5c

    data64 = ((uint64_t)data.timestamp << 32) | data.timestamp;
 80017e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e4:	2200      	movs	r2, #0
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	617a      	str	r2, [r7, #20]
 80017ea:	2301      	movs	r3, #1
 80017ec:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017f0:	464a      	mov	r2, r9
 80017f2:	fb03 f202 	mul.w	r2, r3, r2
 80017f6:	2301      	movs	r3, #1
 80017f8:	4641      	mov	r1, r8
 80017fa:	fb01 f303 	mul.w	r3, r1, r3
 80017fe:	4413      	add	r3, r2
 8001800:	2201      	movs	r2, #1
 8001802:	4641      	mov	r1, r8
 8001804:	fba1 ab02 	umull	sl, fp, r1, r2
 8001808:	445b      	add	r3, fp
 800180a:	469b      	mov	fp, r3
 800180c:	e9c7 ab14 	strd	sl, fp, [r7, #80]	@ 0x50
 8001810:	e9c7 ab14 	strd	sl, fp, [r7, #80]	@ 0x50
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data64);
 8001814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001818:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800181a:	2001      	movs	r0, #1
 800181c:	f002 fe5e 	bl	80044dc <HAL_FLASH_Program>
    address += 8;
 8001820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001822:	3308      	adds	r3, #8
 8001824:	65fb      	str	r3, [r7, #92]	@ 0x5c

    data64 = ((uint64_t)data.period_sec << 32) | data.period_sec;
 8001826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001828:	2200      	movs	r2, #0
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	60fa      	str	r2, [r7, #12]
 800182e:	2301      	movs	r3, #1
 8001830:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001834:	464a      	mov	r2, r9
 8001836:	fb03 f202 	mul.w	r2, r3, r2
 800183a:	2301      	movs	r3, #1
 800183c:	4641      	mov	r1, r8
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	4413      	add	r3, r2
 8001844:	2201      	movs	r2, #1
 8001846:	4641      	mov	r1, r8
 8001848:	fba1 1202 	umull	r1, r2, r1, r2
 800184c:	61fa      	str	r2, [r7, #28]
 800184e:	460a      	mov	r2, r1
 8001850:	61ba      	str	r2, [r7, #24]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	4413      	add	r3, r2
 8001856:	61fb      	str	r3, [r7, #28]
 8001858:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800185c:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 8001860:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data64);
 8001864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001868:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800186a:	2001      	movs	r0, #1
 800186c:	f002 fe36 	bl	80044dc <HAL_FLASH_Program>
    address += 8;
 8001870:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001872:	3308      	adds	r3, #8
 8001874:	65fb      	str	r3, [r7, #92]	@ 0x5c

    data64 = ((uint64_t)data.data_valid << 32) | data.data_valid;
 8001876:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2200      	movs	r2, #0
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	2301      	movs	r3, #1
 8001884:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001888:	464a      	mov	r2, r9
 800188a:	fb03 f202 	mul.w	r2, r3, r2
 800188e:	2301      	movs	r3, #1
 8001890:	4641      	mov	r1, r8
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	2201      	movs	r2, #1
 800189a:	4641      	mov	r1, r8
 800189c:	fba1 5602 	umull	r5, r6, r1, r2
 80018a0:	4433      	add	r3, r6
 80018a2:	461e      	mov	r6, r3
 80018a4:	e9c7 5614 	strd	r5, r6, [r7, #80]	@ 0x50
 80018a8:	e9c7 5614 	strd	r5, r6, [r7, #80]	@ 0x50
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data64);
 80018ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80018b0:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80018b2:	2001      	movs	r0, #1
 80018b4:	f002 fe12 	bl	80044dc <HAL_FLASH_Program>

    HAL_FLASH_Lock();
 80018b8:	f002 fe74 	bl	80045a4 <HAL_FLASH_Lock>
    calendar_data = data;
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <save_to_flash+0x1ec>)
 80018be:	461c      	mov	r4, r3
 80018c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    data_received_from_main = true;
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <save_to_flash+0x1f0>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
    blink_led();
 80018d0:	f000 f854 	bl	800197c <blink_led>
}
 80018d4:	bf00      	nop
 80018d6:	3764      	adds	r7, #100	@ 0x64
 80018d8:	46bd      	mov	sp, r7
 80018da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018de:	bf00      	nop
 80018e0:	0bfa05e0 	.word	0x0bfa05e0
 80018e4:	003ffc00 	.word	0x003ffc00
 80018e8:	0807f800 	.word	0x0807f800
 80018ec:	200002d8 	.word	0x200002d8
 80018f0:	20000378 	.word	0x20000378

080018f4 <read_from_flash>:

static FlashCalendarData read_from_flash(void)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b089      	sub	sp, #36	@ 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
    FlashCalendarData* data = (FlashCalendarData*)FLASH_USER_START_ADDR;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <read_from_flash+0x78>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001904:	4293      	cmp	r3, r2
 8001906:	d00f      	beq.n	8001928 <read_from_flash+0x34>
 8001908:	4b18      	ldr	r3, [pc, #96]	@ (800196c <read_from_flash+0x78>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d009      	beq.n	8001924 <read_from_flash+0x30>
 8001910:	4b16      	ldr	r3, [pc, #88]	@ (800196c <read_from_flash+0x78>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	029a      	lsls	r2, r3, #10
 8001916:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <read_from_flash+0x7c>)
 8001918:	4013      	ands	r3, r2
 800191a:	f103 63ff 	add.w	r3, r3, #133693440	@ 0x7f80000
 800191e:	f503 23ff 	add.w	r3, r3, #522240	@ 0x7f800
 8001922:	e002      	b.n	800192a <read_from_flash+0x36>
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <read_from_flash+0x80>)
 8001926:	e000      	b.n	800192a <read_from_flash+0x36>
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <read_from_flash+0x80>)
 800192a:	61fb      	str	r3, [r7, #28]
    if(is_data_valid(data)) {
 800192c:	69f8      	ldr	r0, [r7, #28]
 800192e:	f7ff fec7 	bl	80016c0 <is_data_valid>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <read_from_flash+0x52>
        return *data;
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	4614      	mov	r4, r2
 800193e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001944:	e00e      	b.n	8001964 <read_from_flash+0x70>
    }

    FlashCalendarData default_data = {
 8001946:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <read_from_flash+0x84>)
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	2300      	movs	r3, #0
 8001954:	763b      	strb	r3, [r7, #24]
        .magic = FLASH_DATA_MAGIC,
        .timestamp = 0,
        .period_sec = 0,
        .data_valid = 0
    };
    return default_data;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	461c      	mov	r4, r3
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001960:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	3724      	adds	r7, #36	@ 0x24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd90      	pop	{r4, r7, pc}
 800196c:	0bfa05e0 	.word	0x0bfa05e0
 8001970:	003ffc00 	.word	0x003ffc00
 8001974:	0807f800 	.word	0x0807f800
 8001978:	abcd1234 	.word	0xabcd1234

0800197c <blink_led>:

static void blink_led(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
    for(int i = 0; i < LED_BLINK_COUNT; i++) {
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	e012      	b.n	80019ae <blink_led+0x32>
        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8001988:	2201      	movs	r2, #1
 800198a:	2101      	movs	r1, #1
 800198c:	480c      	ldr	r0, [pc, #48]	@ (80019c0 <blink_led+0x44>)
 800198e:	f003 f911 	bl	8004bb4 <HAL_GPIO_WritePin>
        HAL_Delay(LED_BLINK_DELAY_MS);
 8001992:	20c8      	movs	r0, #200	@ 0xc8
 8001994:	f000 ff6c 	bl	8002870 <HAL_Delay>
        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2101      	movs	r1, #1
 800199c:	4808      	ldr	r0, [pc, #32]	@ (80019c0 <blink_led+0x44>)
 800199e:	f003 f909 	bl	8004bb4 <HAL_GPIO_WritePin>
        HAL_Delay(LED_BLINK_DELAY_MS);
 80019a2:	20c8      	movs	r0, #200	@ 0xc8
 80019a4:	f000 ff64 	bl	8002870 <HAL_Delay>
    for(int i = 0; i < LED_BLINK_COUNT; i++) {
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3301      	adds	r3, #1
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	dde9      	ble.n	8001988 <blink_led+0xc>
    }
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	42020400 	.word	0x42020400

080019c4 <is_rtc_initialized>:

static bool is_rtc_initialized(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
    return (HAL_RTCEx_BKUPRead(&hrtc, RTC_INIT_FLAG) == RTC_INIT_VALUE);
 80019c8:	2100      	movs	r1, #0
 80019ca:	4806      	ldr	r0, [pc, #24]	@ (80019e4 <is_rtc_initialized+0x20>)
 80019cc:	f005 f9b6 	bl	8006d3c <HAL_RTCEx_BKUPRead>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 80019d6:	4293      	cmp	r3, r2
 80019d8:	bf0c      	ite	eq
 80019da:	2301      	moveq	r3, #1
 80019dc:	2300      	movne	r3, #0
 80019de:	b2db      	uxtb	r3, r3
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000037c 	.word	0x2000037c

080019e8 <initialize_rtc>:

static void initialize_rtc(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80019fc:	2300      	movs	r3, #0
 80019fe:	603b      	str	r3, [r7, #0]

    sTime.Hours = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	71bb      	strb	r3, [r7, #6]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	480c      	ldr	r0, [pc, #48]	@ (8001a44 <initialize_rtc+0x5c>)
 8001a14:	f004 fee2 	bl	80067dc <HAL_RTC_SetTime>

    sDate.Year = 0;  // 2000
 8001a18:	2300      	movs	r3, #0
 8001a1a:	70fb      	strb	r3, [r7, #3]
    sDate.Month = 1;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	707b      	strb	r3, [r7, #1]
    sDate.Date = 1;
 8001a20:	2301      	movs	r3, #1
 8001a22:	70bb      	strb	r3, [r7, #2]
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001a24:	463b      	mov	r3, r7
 8001a26:	2200      	movs	r2, #0
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4806      	ldr	r0, [pc, #24]	@ (8001a44 <initialize_rtc+0x5c>)
 8001a2c:	f004 ffc8 	bl	80069c0 <HAL_RTC_SetDate>

    HAL_RTCEx_BKUPWrite(&hrtc, RTC_INIT_FLAG, RTC_INIT_VALUE);
 8001a30:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8001a34:	2100      	movs	r1, #0
 8001a36:	4803      	ldr	r0, [pc, #12]	@ (8001a44 <initialize_rtc+0x5c>)
 8001a38:	f005 f968 	bl	8006d0c <HAL_RTCEx_BKUPWrite>
}
 8001a3c:	bf00      	nop
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	2000037c 	.word	0x2000037c

08001a48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == LPUART1) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a19      	ldr	r2, [pc, #100]	@ (8001abc <HAL_UART_RxCpltCallback+0x74>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d12c      	bne.n	8001ab4 <HAL_UART_RxCpltCallback+0x6c>
        uart_last_rx_time = HAL_GetTick();
 8001a5a:	f000 fefd 	bl	8002858 <HAL_GetTick>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4a17      	ldr	r2, [pc, #92]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x78>)
 8001a62:	6013      	str	r3, [r2, #0]

        if(uart_rx_buf[uart_rx_pos] == '\n' || uart_rx_pos >= sizeof(uart_rx_buf)-1) {
 8001a64:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x7c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b17      	ldr	r3, [pc, #92]	@ (8001ac8 <HAL_UART_RxCpltCallback+0x80>)
 8001a6c:	5c9b      	ldrb	r3, [r3, r2]
 8001a6e:	2b0a      	cmp	r3, #10
 8001a70:	d003      	beq.n	8001a7a <HAL_UART_RxCpltCallback+0x32>
 8001a72:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x7c>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b7e      	cmp	r3, #126	@ 0x7e
 8001a78:	d90c      	bls.n	8001a94 <HAL_UART_RxCpltCallback+0x4c>
            uart_cmd_ready = 1;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	@ (8001acc <HAL_UART_RxCpltCallback+0x84>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
            uart_rx_buf[uart_rx_pos] = '\0';
 8001a80:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x7c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <HAL_UART_RxCpltCallback+0x80>)
 8001a88:	2100      	movs	r1, #0
 8001a8a:	5499      	strb	r1, [r3, r2]
            HAL_UART_AbortReceive_IT(&hlpuart1);
 8001a8c:	4810      	ldr	r0, [pc, #64]	@ (8001ad0 <HAL_UART_RxCpltCallback+0x88>)
 8001a8e:	f005 fc19 	bl	80072c4 <HAL_UART_AbortReceive_IT>
        } else {
            uart_rx_pos++;
            HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
        }
    }
}
 8001a92:	e00f      	b.n	8001ab4 <HAL_UART_RxCpltCallback+0x6c>
            uart_rx_pos++;
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x7c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x7c>)
 8001a9e:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x7c>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <HAL_UART_RxCpltCallback+0x80>)
 8001aa8:	4413      	add	r3, r2
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4619      	mov	r1, r3
 8001aae:	4808      	ldr	r0, [pc, #32]	@ (8001ad0 <HAL_UART_RxCpltCallback+0x88>)
 8001ab0:	f005 fbbc 	bl	800722c <HAL_UART_Receive_IT>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40008000 	.word	0x40008000
 8001ac0:	2000036c 	.word	0x2000036c
 8001ac4:	20000368 	.word	0x20000368
 8001ac8:	200002e8 	.word	0x200002e8
 8001acc:	20000369 	.word	0x20000369
 8001ad0:	200003f8 	.word	0x200003f8

08001ad4 <process_uart_command>:

static void process_uart_command(uint8_t* data, uint8_t len)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b094      	sub	sp, #80	@ 0x50
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	70fb      	strb	r3, [r7, #3]
    char* date_ptr = strstr((char*)data, "DATE:");
 8001ae0:	4952      	ldr	r1, [pc, #328]	@ (8001c2c <process_uart_command+0x158>)
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f008 fce9 	bl	800a4ba <strstr>
 8001ae8:	6478      	str	r0, [r7, #68]	@ 0x44
    char* time_ptr = strstr((char*)data, ";TIME:");
 8001aea:	4951      	ldr	r1, [pc, #324]	@ (8001c30 <process_uart_command+0x15c>)
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f008 fce4 	bl	800a4ba <strstr>
 8001af2:	6438      	str	r0, [r7, #64]	@ 0x40
    char* period_ptr = strstr((char*)data, ";PERIOD:");
 8001af4:	494f      	ldr	r1, [pc, #316]	@ (8001c34 <process_uart_command+0x160>)
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f008 fcdf 	bl	800a4ba <strstr>
 8001afc:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if(date_ptr && time_ptr && period_ptr) {
 8001afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d077      	beq.n	8001bf4 <process_uart_command+0x120>
 8001b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d074      	beq.n	8001bf4 <process_uart_command+0x120>
 8001b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d071      	beq.n	8001bf4 <process_uart_command+0x120>
        RTC_DateTypeDef date;
        RTC_TimeTypeDef time;
        int year, month, day, hour, min, sec;
        uint32_t period;

        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) != 3) return;
 8001b10:	f107 011c 	add.w	r1, r7, #28
 8001b14:	f107 0220 	add.w	r2, r7, #32
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4945      	ldr	r1, [pc, #276]	@ (8001c38 <process_uart_command+0x164>)
 8001b22:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001b24:	f008 fc50 	bl	800a3c8 <siscanf>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d175      	bne.n	8001c1a <process_uart_command+0x146>
        if(sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) != 3) return;
 8001b2e:	f107 0110 	add.w	r1, r7, #16
 8001b32:	f107 0214 	add.w	r2, r7, #20
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	493f      	ldr	r1, [pc, #252]	@ (8001c3c <process_uart_command+0x168>)
 8001b40:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001b42:	f008 fc41 	bl	800a3c8 <siscanf>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d168      	bne.n	8001c1e <process_uart_command+0x14a>
        if(sscanf(period_ptr, ";PERIOD:%lu", &period) != 1) return;
 8001b4c:	f107 0308 	add.w	r3, r7, #8
 8001b50:	461a      	mov	r2, r3
 8001b52:	493b      	ldr	r1, [pc, #236]	@ (8001c40 <process_uart_command+0x16c>)
 8001b54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001b56:	f008 fc37 	bl	800a3c8 <siscanf>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d160      	bne.n	8001c22 <process_uart_command+0x14e>

        date.Year = year - 2000;
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	3330      	adds	r3, #48	@ 0x30
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        date.Month = month;
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
        date.Date = day;
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
        time.Hours = hour;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        time.Minutes = min;
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        time.Seconds = sec;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

        calendar_data.timestamp = convert_to_timestamp(date, time);
 8001b94:	466a      	mov	r2, sp
 8001b96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b9e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ba8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001baa:	f7ff fd19 	bl	80015e0 <convert_to_timestamp>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a24      	ldr	r2, [pc, #144]	@ (8001c44 <process_uart_command+0x170>)
 8001bb2:	6053      	str	r3, [r2, #4]
        calendar_data.period_sec = period;
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4a23      	ldr	r2, [pc, #140]	@ (8001c44 <process_uart_command+0x170>)
 8001bb8:	6093      	str	r3, [r2, #8]
        calendar_data.magic = FLASH_DATA_MAGIC;
 8001bba:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <process_uart_command+0x170>)
 8001bbc:	4a22      	ldr	r2, [pc, #136]	@ (8001c48 <process_uart_command+0x174>)
 8001bbe:	601a      	str	r2, [r3, #0]
        calendar_data.data_valid = DATA_VALID_FLAG;
 8001bc0:	4b20      	ldr	r3, [pc, #128]	@ (8001c44 <process_uart_command+0x170>)
 8001bc2:	22aa      	movs	r2, #170	@ 0xaa
 8001bc4:	731a      	strb	r2, [r3, #12]

        save_to_flash(calendar_data);
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <process_uart_command+0x170>)
 8001bc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bca:	f7ff fd99 	bl	8001700 <save_to_flash>

        HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	481d      	ldr	r0, [pc, #116]	@ (8001c4c <process_uart_command+0x178>)
 8001bd8:	f004 fe00 	bl	80067dc <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001bdc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001be0:	2200      	movs	r2, #0
 8001be2:	4619      	mov	r1, r3
 8001be4:	4819      	ldr	r0, [pc, #100]	@ (8001c4c <process_uart_command+0x178>)
 8001be6:	f004 feeb 	bl	80069c0 <HAL_RTC_SetDate>

        // Сразу отправляем подтверждение с текущими данными, напряжением и температурой
        send_datetime_with_voltage_and_temp();
 8001bea:	f000 f839 	bl	8001c60 <send_datetime_with_voltage_and_temp>

        // Сбрасываем счетчик периода
        period_counter = 0;
 8001bee:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <process_uart_command+0x17c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
    }

    uart_rx_pos = 0;
 8001bf4:	4b17      	ldr	r3, [pc, #92]	@ (8001c54 <process_uart_command+0x180>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
    memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8001bfa:	2280      	movs	r2, #128	@ 0x80
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4816      	ldr	r0, [pc, #88]	@ (8001c58 <process_uart_command+0x184>)
 8001c00:	f008 fc53 	bl	800a4aa <memset>
    HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001c04:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <process_uart_command+0x180>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <process_uart_command+0x184>)
 8001c0c:	4413      	add	r3, r2
 8001c0e:	2201      	movs	r2, #1
 8001c10:	4619      	mov	r1, r3
 8001c12:	4812      	ldr	r0, [pc, #72]	@ (8001c5c <process_uart_command+0x188>)
 8001c14:	f005 fb0a 	bl	800722c <HAL_UART_Receive_IT>
 8001c18:	e004      	b.n	8001c24 <process_uart_command+0x150>
        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) != 3) return;
 8001c1a:	bf00      	nop
 8001c1c:	e002      	b.n	8001c24 <process_uart_command+0x150>
        if(sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) != 3) return;
 8001c1e:	bf00      	nop
 8001c20:	e000      	b.n	8001c24 <process_uart_command+0x150>
        if(sscanf(period_ptr, ";PERIOD:%lu", &period) != 1) return;
 8001c22:	bf00      	nop
}
 8001c24:	3748      	adds	r7, #72	@ 0x48
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	0800f42c 	.word	0x0800f42c
 8001c30:	0800f434 	.word	0x0800f434
 8001c34:	0800f43c 	.word	0x0800f43c
 8001c38:	0800f448 	.word	0x0800f448
 8001c3c:	0800f458 	.word	0x0800f458
 8001c40:	0800f468 	.word	0x0800f468
 8001c44:	200002d8 	.word	0x200002d8
 8001c48:	abcd1234 	.word	0xabcd1234
 8001c4c:	2000037c 	.word	0x2000037c
 8001c50:	20000370 	.word	0x20000370
 8001c54:	20000368 	.word	0x20000368
 8001c58:	200002e8 	.word	0x200002e8
 8001c5c:	200003f8 	.word	0x200003f8

08001c60 <send_datetime_with_voltage_and_temp>:
    HAL_Delay(50);
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
}

static void send_datetime_with_voltage_and_temp(void)
{
 8001c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c64:	b0b8      	sub	sp, #224	@ 0xe0
 8001c66:	af0a      	add	r7, sp, #40	@ 0x28
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;
    float voltage = read_voltage(); // Измеряем напряжение
 8001c68:	f7ff fbe0 	bl	800142c <read_voltage>
 8001c6c:	ed87 0a2d 	vstr	s0, [r7, #180]	@ 0xb4
    float temperature = read_temperature(); // Измеряем температуру
 8001c70:	f7ff fc34 	bl	80014dc <read_temperature>
 8001c74:	ed87 0a2c 	vstr	s0, [r7, #176]	@ 0xb0
    char uart_msg[128]; // Увеличили буфер для добавления температуры

    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001c78:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	482f      	ldr	r0, [pc, #188]	@ (8001d40 <send_datetime_with_voltage_and_temp+0xe0>)
 8001c82:	f004 fe41 	bl	8006908 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001c86:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	482c      	ldr	r0, [pc, #176]	@ (8001d40 <send_datetime_with_voltage_and_temp+0xe0>)
 8001c90:	f004 ff1c 	bl	8006acc <HAL_RTC_GetDate>

    // Форматируем сообщение с добавлением напряжения и температуры
    snprintf(uart_msg, sizeof(uart_msg),
           "DATE:%04d-%02d-%02d;TIME:%02d:%02d:%02d;PERIOD:%lu;VOLTAGE:%.4f;TEMP:%.2f\r\n",
           date.Year + 2000, date.Month, date.Date,
 8001c94:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
    snprintf(uart_msg, sizeof(uart_msg),
 8001c98:	f503 68fa 	add.w	r8, r3, #2000	@ 0x7d0
           date.Year + 2000, date.Month, date.Date,
 8001c9c:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
    snprintf(uart_msg, sizeof(uart_msg),
 8001ca0:	617b      	str	r3, [r7, #20]
           date.Year + 2000, date.Month, date.Date,
 8001ca2:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
    snprintf(uart_msg, sizeof(uart_msg),
 8001ca6:	613b      	str	r3, [r7, #16]
           time.Hours, time.Minutes, time.Seconds,
 8001ca8:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
    snprintf(uart_msg, sizeof(uart_msg),
 8001cac:	60fb      	str	r3, [r7, #12]
           time.Hours, time.Minutes, time.Seconds,
 8001cae:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
    snprintf(uart_msg, sizeof(uart_msg),
 8001cb2:	60bb      	str	r3, [r7, #8]
           time.Hours, time.Minutes, time.Seconds,
 8001cb4:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
    snprintf(uart_msg, sizeof(uart_msg),
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	4b22      	ldr	r3, [pc, #136]	@ (8001d44 <send_datetime_with_voltage_and_temp+0xe4>)
 8001cbc:	689e      	ldr	r6, [r3, #8]
 8001cbe:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8001cc2:	f7fe fc2f 	bl	8000524 <__aeabi_f2d>
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	460d      	mov	r5, r1
 8001cca:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001cce:	f7fe fc29 	bl	8000524 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	f107 0018 	add.w	r0, r7, #24
 8001cda:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001cde:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001ce2:	9605      	str	r6, [sp, #20]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	9204      	str	r2, [sp, #16]
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	9203      	str	r2, [sp, #12]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	9202      	str	r2, [sp, #8]
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	9201      	str	r2, [sp, #4]
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	4643      	mov	r3, r8
 8001cfa:	4a13      	ldr	r2, [pc, #76]	@ (8001d48 <send_datetime_with_voltage_and_temp+0xe8>)
 8001cfc:	2180      	movs	r1, #128	@ 0x80
 8001cfe:	f008 fb0b 	bl	800a318 <sniprintf>
           calendar_data.period_sec, voltage, temperature);

    HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_msg, strlen(uart_msg), 100);
 8001d02:	f107 0318 	add.w	r3, r7, #24
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe faa0 	bl	800024c <strlen>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	f107 0118 	add.w	r1, r7, #24
 8001d14:	2364      	movs	r3, #100	@ 0x64
 8001d16:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <send_datetime_with_voltage_and_temp+0xec>)
 8001d18:	f005 f9f9 	bl	800710e <HAL_UART_Transmit>

    // Мигаем LED для индикации отправки
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2101      	movs	r1, #1
 8001d20:	480b      	ldr	r0, [pc, #44]	@ (8001d50 <send_datetime_with_voltage_and_temp+0xf0>)
 8001d22:	f002 ff47 	bl	8004bb4 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001d26:	2032      	movs	r0, #50	@ 0x32
 8001d28:	f000 fda2 	bl	8002870 <HAL_Delay>
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2101      	movs	r1, #1
 8001d30:	4807      	ldr	r0, [pc, #28]	@ (8001d50 <send_datetime_with_voltage_and_temp+0xf0>)
 8001d32:	f002 ff3f 	bl	8004bb4 <HAL_GPIO_WritePin>
}
 8001d36:	bf00      	nop
 8001d38:	37b8      	adds	r7, #184	@ 0xb8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d40:	2000037c 	.word	0x2000037c
 8001d44:	200002d8 	.word	0x200002d8
 8001d48:	0800f4ac 	.word	0x0800f4ac
 8001d4c:	200003f8 	.word	0x200003f8
 8001d50:	42020400 	.word	0x42020400

08001d54 <update_calendar>:

static void update_calendar(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	@ 0x30
 8001d58:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef current_time;
    HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	2200      	movs	r2, #0
 8001d60:	4619      	mov	r1, r3
 8001d62:	4824      	ldr	r0, [pc, #144]	@ (8001df4 <update_calendar+0xa0>)
 8001d64:	f004 fdd0 	bl	8006908 <HAL_RTC_GetTime>

    if(current_time.Seconds != last_rtc_seconds) {
 8001d68:	7fbb      	ldrb	r3, [r7, #30]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b22      	ldr	r3, [pc, #136]	@ (8001df8 <update_calendar+0xa4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d03b      	beq.n	8001dec <update_calendar+0x98>
        last_rtc_seconds = current_time.Seconds;
 8001d74:	7fbb      	ldrb	r3, [r7, #30]
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <update_calendar+0xa4>)
 8001d7a:	601a      	str	r2, [r3, #0]

        if(data_received_from_main && calendar_data.period_sec > 0) {
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <update_calendar+0xa8>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d033      	beq.n	8001dec <update_calendar+0x98>
 8001d84:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <update_calendar+0xac>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d02f      	beq.n	8001dec <update_calendar+0x98>
            period_counter++;
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <update_calendar+0xb0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	4a1c      	ldr	r2, [pc, #112]	@ (8001e04 <update_calendar+0xb0>)
 8001d94:	6013      	str	r3, [r2, #0]

            if(period_counter >= calendar_data.period_sec) {
 8001d96:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <update_calendar+0xac>)
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e04 <update_calendar+0xb0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d824      	bhi.n	8001dec <update_calendar+0x98>
                period_counter = 0;
 8001da2:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <update_calendar+0xb0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

                // Обновляем timestamp на величину периода
                calendar_data.timestamp += calendar_data.period_sec;
 8001da8:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <update_calendar+0xac>)
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	4b14      	ldr	r3, [pc, #80]	@ (8001e00 <update_calendar+0xac>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4413      	add	r3, r2
 8001db2:	4a13      	ldr	r2, [pc, #76]	@ (8001e00 <update_calendar+0xac>)
 8001db4:	6053      	str	r3, [r2, #4]

                // Обновляем RTC
                RTC_DateTypeDef date;
                RTC_TimeTypeDef time;
                convert_from_timestamp(calendar_data.timestamp, &date, &time);
 8001db6:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <update_calendar+0xac>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	1d3a      	adds	r2, r7, #4
 8001dbc:	f107 0118 	add.w	r1, r7, #24
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fc40 	bl	8001646 <convert_from_timestamp>
                HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	2200      	movs	r2, #0
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4809      	ldr	r0, [pc, #36]	@ (8001df4 <update_calendar+0xa0>)
 8001dce:	f004 fd05 	bl	80067dc <HAL_RTC_SetTime>
                HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001dd2:	f107 0318 	add.w	r3, r7, #24
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4806      	ldr	r0, [pc, #24]	@ (8001df4 <update_calendar+0xa0>)
 8001ddc:	f004 fdf0 	bl	80069c0 <HAL_RTC_SetDate>

                // Сохраняем обновленные данные во FLASH
                save_to_flash(calendar_data);
 8001de0:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <update_calendar+0xac>)
 8001de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de4:	f7ff fc8c 	bl	8001700 <save_to_flash>

                // ОТПРАВЛЯЕМ обновленные данные основному МК с напряжением и температурой
                send_datetime_with_voltage_and_temp();
 8001de8:	f7ff ff3a 	bl	8001c60 <send_datetime_with_voltage_and_temp>
            }
        }
    }
}
 8001dec:	bf00      	nop
 8001dee:	3730      	adds	r7, #48	@ 0x30
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000037c 	.word	0x2000037c
 8001df8:	20000374 	.word	0x20000374
 8001dfc:	20000378 	.word	0x20000378
 8001e00:	200002d8 	.word	0x200002d8
 8001e04:	20000370 	.word	0x20000370

08001e08 <main>:

/* Main function -------------------------------------------------------------*/
int main(void)
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b091      	sub	sp, #68	@ 0x44
 8001e0c:	af00      	add	r7, sp, #0
    HAL_Init();
 8001e0e:	f000 fcb8 	bl	8002782 <HAL_Init>
    SystemClock_Config();
 8001e12:	f000 f8db 	bl	8001fcc <SystemClock_Config>
    MX_GPIO_Init();
 8001e16:	f7ff fa7b 	bl	8001310 <MX_GPIO_Init>
    MX_ADC1_Init();
 8001e1a:	f7ff f967 	bl	80010ec <MX_ADC1_Init>
    MX_LPUART1_UART_Init();
 8001e1e:	f000 fbd5 	bl	80025cc <MX_LPUART1_UART_Init>
    MX_RTC_Init();
 8001e22:	f000 f92d 	bl	8002080 <MX_RTC_Init>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e26:	4b5c      	ldr	r3, [pc, #368]	@ (8001f98 <main+0x190>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2a:	4a5b      	ldr	r2, [pc, #364]	@ (8001f98 <main+0x190>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e32:	4b59      	ldr	r3, [pc, #356]	@ (8001f98 <main+0x190>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = LED_PIN;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e52:	2301      	movs	r3, #1
 8001e54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 8001e5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e62:	4619      	mov	r1, r3
 8001e64:	484d      	ldr	r0, [pc, #308]	@ (8001f9c <main+0x194>)
 8001e66:	f002 fd25 	bl	80048b4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	484b      	ldr	r0, [pc, #300]	@ (8001f9c <main+0x194>)
 8001e70:	f002 fea0 	bl	8004bb4 <HAL_GPIO_WritePin>

    // Включаем транзистор для измерения напряжения
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001e74:	2201      	movs	r2, #1
 8001e76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e7a:	4849      	ldr	r0, [pc, #292]	@ (8001fa0 <main+0x198>)
 8001e7c:	f002 fe9a 	bl	8004bb4 <HAL_GPIO_WritePin>

    if(!is_rtc_initialized()) {
 8001e80:	f7ff fda0 	bl	80019c4 <is_rtc_initialized>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f083 0301 	eor.w	r3, r3, #1
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <main+0x8c>
        initialize_rtc();
 8001e90:	f7ff fdaa 	bl	80019e8 <initialize_rtc>
    }

    calendar_data = read_from_flash();
 8001e94:	4c43      	ldr	r4, [pc, #268]	@ (8001fa4 <main+0x19c>)
 8001e96:	463b      	mov	r3, r7
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fd2b 	bl	80018f4 <read_from_flash>
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    data_received_from_main = is_data_valid(&calendar_data);
 8001ea6:	483f      	ldr	r0, [pc, #252]	@ (8001fa4 <main+0x19c>)
 8001ea8:	f7ff fc0a 	bl	80016c0 <is_data_valid>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa8 <main+0x1a0>)
 8001eb2:	701a      	strb	r2, [r3, #0]

    if(data_received_from_main) {
 8001eb4:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa8 <main+0x1a0>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d022      	beq.n	8001f02 <main+0xfa>
        RTC_TimeTypeDef sTime = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
        RTC_DateTypeDef sDate = {0};
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]

        convert_from_timestamp(calendar_data.timestamp, &sDate, &sTime);
 8001ed0:	4b34      	ldr	r3, [pc, #208]	@ (8001fa4 <main+0x19c>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f107 0214 	add.w	r2, r7, #20
 8001ed8:	f107 0110 	add.w	r1, r7, #16
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fbb2 	bl	8001646 <convert_from_timestamp>
        HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4830      	ldr	r0, [pc, #192]	@ (8001fac <main+0x1a4>)
 8001eec:	f004 fc76 	bl	80067dc <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	482c      	ldr	r0, [pc, #176]	@ (8001fac <main+0x1a4>)
 8001efa:	f004 fd61 	bl	80069c0 <HAL_RTC_SetDate>

        // Отправляем текущие данные при старте (если есть валидные данные)
        send_datetime_with_voltage_and_temp(); // Используем функцию с измерением напряжения и температуры
 8001efe:	f7ff feaf 	bl	8001c60 <send_datetime_with_voltage_and_temp>
    }

    uart_last_rx_time = HAL_GetTick();
 8001f02:	f000 fca9 	bl	8002858 <HAL_GetTick>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4a29      	ldr	r2, [pc, #164]	@ (8001fb0 <main+0x1a8>)
 8001f0a:	6013      	str	r3, [r2, #0]
    last_rtc_seconds = 0;
 8001f0c:	4b29      	ldr	r3, [pc, #164]	@ (8001fb4 <main+0x1ac>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
    period_counter = 0;
 8001f12:	4b29      	ldr	r3, [pc, #164]	@ (8001fb8 <main+0x1b0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

    HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001f18:	4b28      	ldr	r3, [pc, #160]	@ (8001fbc <main+0x1b4>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b28      	ldr	r3, [pc, #160]	@ (8001fc0 <main+0x1b8>)
 8001f20:	4413      	add	r3, r2
 8001f22:	2201      	movs	r2, #1
 8001f24:	4619      	mov	r1, r3
 8001f26:	4827      	ldr	r0, [pc, #156]	@ (8001fc4 <main+0x1bc>)
 8001f28:	f005 f980 	bl	800722c <HAL_UART_Receive_IT>

    while (1)
    {
        if(uart_cmd_ready) {
 8001f2c:	4b26      	ldr	r3, [pc, #152]	@ (8001fc8 <main+0x1c0>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d008      	beq.n	8001f48 <main+0x140>
            uart_cmd_ready = 0;
 8001f36:	4b24      	ldr	r3, [pc, #144]	@ (8001fc8 <main+0x1c0>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
            process_uart_command(uart_rx_buf, uart_rx_pos);
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fbc <main+0x1b4>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	481f      	ldr	r0, [pc, #124]	@ (8001fc0 <main+0x1b8>)
 8001f44:	f7ff fdc6 	bl	8001ad4 <process_uart_command>
        }

        if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_TIMEOUT_MS) {
 8001f48:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <main+0x1b4>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d019      	beq.n	8001f84 <main+0x17c>
 8001f50:	f000 fc82 	bl	8002858 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b16      	ldr	r3, [pc, #88]	@ (8001fb0 <main+0x1a8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b64      	cmp	r3, #100	@ 0x64
 8001f5e:	d911      	bls.n	8001f84 <main+0x17c>
            uart_rx_pos = 0;
 8001f60:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <main+0x1b4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
            memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8001f66:	2280      	movs	r2, #128	@ 0x80
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4815      	ldr	r0, [pc, #84]	@ (8001fc0 <main+0x1b8>)
 8001f6c:	f008 fa9d 	bl	800a4aa <memset>
            HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001f70:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <main+0x1b4>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <main+0x1b8>)
 8001f78:	4413      	add	r3, r2
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4811      	ldr	r0, [pc, #68]	@ (8001fc4 <main+0x1bc>)
 8001f80:	f005 f954 	bl	800722c <HAL_UART_Receive_IT>
        }

        if(data_received_from_main) {
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <main+0x1a0>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <main+0x188>
            update_calendar();
 8001f8c:	f7ff fee2 	bl	8001d54 <update_calendar>
        }

        HAL_Delay(10);
 8001f90:	200a      	movs	r0, #10
 8001f92:	f000 fc6d 	bl	8002870 <HAL_Delay>
        if(uart_cmd_ready) {
 8001f96:	e7c9      	b.n	8001f2c <main+0x124>
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	42020400 	.word	0x42020400
 8001fa0:	42020800 	.word	0x42020800
 8001fa4:	200002d8 	.word	0x200002d8
 8001fa8:	20000378 	.word	0x20000378
 8001fac:	2000037c 	.word	0x2000037c
 8001fb0:	2000036c 	.word	0x2000036c
 8001fb4:	20000374 	.word	0x20000374
 8001fb8:	20000370 	.word	0x20000370
 8001fbc:	20000368 	.word	0x20000368
 8001fc0:	200002e8 	.word	0x200002e8
 8001fc4:	200003f8 	.word	0x200003f8
 8001fc8:	20000369 	.word	0x20000369

08001fcc <SystemClock_Config>:
    }
}
/* System Clock Configuration */
void SystemClock_Config(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b098      	sub	sp, #96	@ 0x60
 8001fd0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd2:	f107 0318 	add.w	r3, r7, #24
 8001fd6:	2248      	movs	r2, #72	@ 0x48
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f008 fa65 	bl	800a4aa <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	611a      	str	r2, [r3, #16]

    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK) {
 8001fee:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001ff2:	f002 fe1f 	bl	8004c34 <HAL_PWREx_ControlVoltageScaling>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <SystemClock_Config+0x34>
        Error_Handler();
 8001ffc:	f000 f830 	bl	8002060 <Error_Handler>
    }

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8002000:	2318      	movs	r3, #24
 8002002:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8002004:	2300      	movs	r3, #0
 8002006:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002008:	2301      	movs	r3, #1
 800200a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800200c:	2301      	movs	r3, #1
 800200e:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002010:	2300      	movs	r3, #0
 8002012:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002014:	2360      	movs	r3, #96	@ 0x60
 8002016:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002018:	2300      	movs	r3, #0
 800201a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800201c:	f107 0318 	add.w	r3, r7, #24
 8002020:	4618      	mov	r0, r3
 8002022:	f002 fe97 	bl	8004d54 <HAL_RCC_OscConfig>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <SystemClock_Config+0x64>
        Error_Handler();
 800202c:	f000 f818 	bl	8002060 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002030:	230f      	movs	r3, #15
 8002032:	607b      	str	r3, [r7, #4]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800203c:	2300      	movs	r3, #0
 800203e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2100      	movs	r1, #0
 8002048:	4618      	mov	r0, r3
 800204a:	f003 fb59 	bl	8005700 <HAL_RCC_ClockConfig>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <SystemClock_Config+0x8c>
        Error_Handler();
 8002054:	f000 f804 	bl	8002060 <Error_Handler>
    }
}
 8002058:	bf00      	nop
 800205a:	3760      	adds	r7, #96	@ 0x60
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <Error_Handler>:

void Error_Handler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002064:	b672      	cpsid	i
}
 8002066:	bf00      	nop
    __disable_irq();
    while (1) {
        HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8002068:	2101      	movs	r1, #1
 800206a:	4804      	ldr	r0, [pc, #16]	@ (800207c <Error_Handler+0x1c>)
 800206c:	f002 fdba 	bl	8004be4 <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 8002070:	2064      	movs	r0, #100	@ 0x64
 8002072:	f000 fbfd 	bl	8002870 <HAL_Delay>
        HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8002076:	bf00      	nop
 8002078:	e7f6      	b.n	8002068 <Error_Handler+0x8>
 800207a:	bf00      	nop
 800207c:	42020400 	.word	0x42020400

08002080 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	@ 0x30
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8002086:	f107 0318 	add.w	r3, r7, #24
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]
 8002096:	615a      	str	r2, [r3, #20]
  RTC_TimeTypeDef sTime = {0};
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
 80020a4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80020a6:	2300      	movs	r3, #0
 80020a8:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020aa:	4b31      	ldr	r3, [pc, #196]	@ (8002170 <MX_RTC_Init+0xf0>)
 80020ac:	4a31      	ldr	r2, [pc, #196]	@ (8002174 <MX_RTC_Init+0xf4>)
 80020ae:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002170 <MX_RTC_Init+0xf0>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80020b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002170 <MX_RTC_Init+0xf0>)
 80020b8:	227f      	movs	r2, #127	@ 0x7f
 80020ba:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002170 <MX_RTC_Init+0xf0>)
 80020be:	22ff      	movs	r2, #255	@ 0xff
 80020c0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <MX_RTC_Init+0xf0>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80020c8:	4b29      	ldr	r3, [pc, #164]	@ (8002170 <MX_RTC_Init+0xf0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020ce:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <MX_RTC_Init+0xf0>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020d4:	4b26      	ldr	r3, [pc, #152]	@ (8002170 <MX_RTC_Init+0xf0>)
 80020d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020da:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80020dc:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <MX_RTC_Init+0xf0>)
 80020de:	2200      	movs	r2, #0
 80020e0:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020e2:	4823      	ldr	r0, [pc, #140]	@ (8002170 <MX_RTC_Init+0xf0>)
 80020e4:	f004 fb02 	bl	80066ec <HAL_RTC_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_RTC_Init+0x72>
  {
    Error_Handler();
 80020ee:	f7ff ffb7 	bl	8002060 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80020fe:	2300      	movs	r3, #0
 8002100:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8002102:	f107 0318 	add.w	r3, r7, #24
 8002106:	4619      	mov	r1, r3
 8002108:	4819      	ldr	r0, [pc, #100]	@ (8002170 <MX_RTC_Init+0xf0>)
 800210a:	f004 fe2d 	bl	8006d68 <HAL_RTCEx_PrivilegeModeSet>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8002114:	f7ff ffa4 	bl	8002060 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002118:	2300      	movs	r3, #0
 800211a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800211c:	2300      	movs	r3, #0
 800211e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002120:	2300      	movs	r3, #0
 8002122:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	2201      	movs	r2, #1
 8002130:	4619      	mov	r1, r3
 8002132:	480f      	ldr	r0, [pc, #60]	@ (8002170 <MX_RTC_Init+0xf0>)
 8002134:	f004 fb52 	bl	80067dc <HAL_RTC_SetTime>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800213e:	f7ff ff8f 	bl	8002060 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002142:	2301      	movs	r3, #1
 8002144:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002146:	2301      	movs	r3, #1
 8002148:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800214a:	2301      	movs	r3, #1
 800214c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800214e:	2300      	movs	r3, #0
 8002150:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002152:	463b      	mov	r3, r7
 8002154:	2201      	movs	r2, #1
 8002156:	4619      	mov	r1, r3
 8002158:	4805      	ldr	r0, [pc, #20]	@ (8002170 <MX_RTC_Init+0xf0>)
 800215a:	f004 fc31 	bl	80069c0 <HAL_RTC_SetDate>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_RTC_Init+0xe8>
  {
    Error_Handler();
 8002164:	f7ff ff7c 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	3730      	adds	r7, #48	@ 0x30
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	2000037c 	.word	0x2000037c
 8002174:	40002800 	.word	0x40002800

08002178 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b0a8      	sub	sp, #160	@ 0xa0
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	2294      	movs	r2, #148	@ 0x94
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f008 f98e 	bl	800a4aa <memset>
  if(rtcHandle->Instance==RTC)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a16      	ldr	r2, [pc, #88]	@ (80021ec <HAL_RTC_MspInit+0x74>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d124      	bne.n	80021e2 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002198:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800219c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800219e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 fd88 	bl	8005cc0 <HAL_RCCEx_PeriphCLKConfig>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80021b6:	f7ff ff53 	bl	8002060 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021ba:	4b0d      	ldr	r3, [pc, #52]	@ (80021f0 <HAL_RTC_MspInit+0x78>)
 80021bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c0:	4a0b      	ldr	r2, [pc, #44]	@ (80021f0 <HAL_RTC_MspInit+0x78>)
 80021c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021ca:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <HAL_RTC_MspInit+0x78>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ce:	4a08      	ldr	r2, [pc, #32]	@ (80021f0 <HAL_RTC_MspInit+0x78>)
 80021d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80021d6:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_RTC_MspInit+0x78>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80021e2:	bf00      	nop
 80021e4:	37a0      	adds	r7, #160	@ 0xa0
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40002800 	.word	0x40002800
 80021f0:	40021000 	.word	0x40021000

080021f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <HAL_MspInit+0x44>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002238 <HAL_MspInit+0x44>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6613      	str	r3, [r2, #96]	@ 0x60
 8002206:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <HAL_MspInit+0x44>)
 8002208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <HAL_MspInit+0x44>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002216:	4a08      	ldr	r2, [pc, #32]	@ (8002238 <HAL_MspInit+0x44>)
 8002218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800221c:	6593      	str	r3, [r2, #88]	@ 0x58
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_MspInit+0x44>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800222a:	f002 fd5f 	bl	8004cec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000

0800223c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <NMI_Handler+0x4>

08002244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <HardFault_Handler+0x4>

0800224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <MemManage_Handler+0x4>

08002254 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <BusFault_Handler+0x4>

0800225c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <UsageFault_Handler+0x4>

08002264 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002292:	f000 facd 	bl	8002830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022a0:	4802      	ldr	r0, [pc, #8]	@ (80022ac <TIM6_IRQHandler+0x10>)
 80022a2:	f004 fd8d 	bl	8006dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200003ac 	.word	0x200003ac

080022b0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 31.
  */
void LPUART1_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80022b4:	4802      	ldr	r0, [pc, #8]	@ (80022c0 <LPUART1_IRQHandler+0x10>)
 80022b6:	f005 f8d3 	bl	8007460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200003f8 	.word	0x200003f8

080022c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return 1;
 80022c8:	2301      	movs	r3, #1
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_kill>:

int _kill(int pid, int sig)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022de:	f008 ffd1 	bl	800b284 <__errno>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2216      	movs	r2, #22
 80022e6:	601a      	str	r2, [r3, #0]
  return -1;
 80022e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <_exit>:

void _exit (int status)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ffe7 	bl	80022d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002306:	bf00      	nop
 8002308:	e7fd      	b.n	8002306 <_exit+0x12>

0800230a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	e00a      	b.n	8002332 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800231c:	f3af 8000 	nop.w
 8002320:	4601      	mov	r1, r0
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	60ba      	str	r2, [r7, #8]
 8002328:	b2ca      	uxtb	r2, r1
 800232a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3301      	adds	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	429a      	cmp	r2, r3
 8002338:	dbf0      	blt.n	800231c <_read+0x12>
  }

  return len;
 800233a:	687b      	ldr	r3, [r7, #4]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	e009      	b.n	800236a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	60ba      	str	r2, [r7, #8]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3301      	adds	r3, #1
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	429a      	cmp	r2, r3
 8002370:	dbf1      	blt.n	8002356 <_write+0x12>
  }
  return len;
 8002372:	687b      	ldr	r3, [r7, #4]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_close>:

int _close(int file)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002384:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023a4:	605a      	str	r2, [r3, #4]
  return 0;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_isatty>:

int _isatty(int file)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023bc:	2301      	movs	r3, #1
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ec:	4a14      	ldr	r2, [pc, #80]	@ (8002440 <_sbrk+0x5c>)
 80023ee:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <_sbrk+0x60>)
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f8:	4b13      	ldr	r3, [pc, #76]	@ (8002448 <_sbrk+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002400:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <_sbrk+0x64>)
 8002402:	4a12      	ldr	r2, [pc, #72]	@ (800244c <_sbrk+0x68>)
 8002404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002406:	4b10      	ldr	r3, [pc, #64]	@ (8002448 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	429a      	cmp	r2, r3
 8002412:	d207      	bcs.n	8002424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002414:	f008 ff36 	bl	800b284 <__errno>
 8002418:	4603      	mov	r3, r0
 800241a:	220c      	movs	r2, #12
 800241c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	e009      	b.n	8002438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002424:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <_sbrk+0x64>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242a:	4b07      	ldr	r3, [pc, #28]	@ (8002448 <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	4a05      	ldr	r2, [pc, #20]	@ (8002448 <_sbrk+0x64>)
 8002434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002436:	68fb      	ldr	r3, [r7, #12]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20030000 	.word	0x20030000
 8002444:	00000400 	.word	0x00000400
 8002448:	200003a8 	.word	0x200003a8
 800244c:	20000600 	.word	0x20000600

08002450 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <SystemInit+0x20>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245a:	4a05      	ldr	r2, [pc, #20]	@ (8002470 <SystemInit+0x20>)
 800245c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002460:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800247a:	4b4f      	ldr	r3, [pc, #316]	@ (80025b8 <SystemCoreClockUpdate+0x144>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d107      	bne.n	8002496 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8002486:	4b4c      	ldr	r3, [pc, #304]	@ (80025b8 <SystemCoreClockUpdate+0x144>)
 8002488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	e005      	b.n	80024a2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8002496:	4b48      	ldr	r3, [pc, #288]	@ (80025b8 <SystemCoreClockUpdate+0x144>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80024a2:	4a46      	ldr	r2, [pc, #280]	@ (80025bc <SystemCoreClockUpdate+0x148>)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024aa:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ac:	4b42      	ldr	r3, [pc, #264]	@ (80025b8 <SystemCoreClockUpdate+0x144>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b0c      	cmp	r3, #12
 80024b6:	d866      	bhi.n	8002586 <SystemCoreClockUpdate+0x112>
 80024b8:	a201      	add	r2, pc, #4	@ (adr r2, 80024c0 <SystemCoreClockUpdate+0x4c>)
 80024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024be:	bf00      	nop
 80024c0:	080024f5 	.word	0x080024f5
 80024c4:	08002587 	.word	0x08002587
 80024c8:	08002587 	.word	0x08002587
 80024cc:	08002587 	.word	0x08002587
 80024d0:	080024fd 	.word	0x080024fd
 80024d4:	08002587 	.word	0x08002587
 80024d8:	08002587 	.word	0x08002587
 80024dc:	08002587 	.word	0x08002587
 80024e0:	08002505 	.word	0x08002505
 80024e4:	08002587 	.word	0x08002587
 80024e8:	08002587 	.word	0x08002587
 80024ec:	08002587 	.word	0x08002587
 80024f0:	0800250d 	.word	0x0800250d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80024f4:	4a32      	ldr	r2, [pc, #200]	@ (80025c0 <SystemCoreClockUpdate+0x14c>)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	6013      	str	r3, [r2, #0]
      break;
 80024fa:	e048      	b.n	800258e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80024fc:	4b30      	ldr	r3, [pc, #192]	@ (80025c0 <SystemCoreClockUpdate+0x14c>)
 80024fe:	4a31      	ldr	r2, [pc, #196]	@ (80025c4 <SystemCoreClockUpdate+0x150>)
 8002500:	601a      	str	r2, [r3, #0]
      break;
 8002502:	e044      	b.n	800258e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002504:	4b2e      	ldr	r3, [pc, #184]	@ (80025c0 <SystemCoreClockUpdate+0x14c>)
 8002506:	4a2f      	ldr	r2, [pc, #188]	@ (80025c4 <SystemCoreClockUpdate+0x150>)
 8002508:	601a      	str	r2, [r3, #0]
      break;
 800250a:	e040      	b.n	800258e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800250c:	4b2a      	ldr	r3, [pc, #168]	@ (80025b8 <SystemCoreClockUpdate+0x144>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8002516:	4b28      	ldr	r3, [pc, #160]	@ (80025b8 <SystemCoreClockUpdate+0x144>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	3301      	adds	r3, #1
 8002522:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d003      	beq.n	8002532 <SystemCoreClockUpdate+0xbe>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d006      	beq.n	800253e <SystemCoreClockUpdate+0xca>
 8002530:	e00b      	b.n	800254a <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8002532:	4a24      	ldr	r2, [pc, #144]	@ (80025c4 <SystemCoreClockUpdate+0x150>)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	613b      	str	r3, [r7, #16]
          break;
 800253c:	e00b      	b.n	8002556 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800253e:	4a21      	ldr	r2, [pc, #132]	@ (80025c4 <SystemCoreClockUpdate+0x150>)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	613b      	str	r3, [r7, #16]
          break;
 8002548:	e005      	b.n	8002556 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	613b      	str	r3, [r7, #16]
          break;
 8002554:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8002556:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <SystemCoreClockUpdate+0x144>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8002568:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <SystemCoreClockUpdate+0x144>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	0e5b      	lsrs	r3, r3, #25
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	3301      	adds	r3, #1
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	4a0f      	ldr	r2, [pc, #60]	@ (80025c0 <SystemCoreClockUpdate+0x14c>)
 8002582:	6013      	str	r3, [r2, #0]
      break;
 8002584:	e003      	b.n	800258e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8002586:	4a0e      	ldr	r2, [pc, #56]	@ (80025c0 <SystemCoreClockUpdate+0x14c>)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	6013      	str	r3, [r2, #0]
      break;
 800258c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800258e:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <SystemCoreClockUpdate+0x144>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	4a0b      	ldr	r2, [pc, #44]	@ (80025c8 <SystemCoreClockUpdate+0x154>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800259e:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <SystemCoreClockUpdate+0x14c>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	4a05      	ldr	r2, [pc, #20]	@ (80025c0 <SystemCoreClockUpdate+0x14c>)
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	40021000 	.word	0x40021000
 80025bc:	0800f51c 	.word	0x0800f51c
 80025c0:	20000004 	.word	0x20000004
 80025c4:	00f42400 	.word	0x00f42400
 80025c8:	0800f504 	.word	0x0800f504

080025cc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80025d0:	4b22      	ldr	r3, [pc, #136]	@ (800265c <MX_LPUART1_UART_Init+0x90>)
 80025d2:	4a23      	ldr	r2, [pc, #140]	@ (8002660 <MX_LPUART1_UART_Init+0x94>)
 80025d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80025d6:	4b21      	ldr	r3, [pc, #132]	@ (800265c <MX_LPUART1_UART_Init+0x90>)
 80025d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80025dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025de:	4b1f      	ldr	r3, [pc, #124]	@ (800265c <MX_LPUART1_UART_Init+0x90>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80025e4:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <MX_LPUART1_UART_Init+0x90>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80025ea:	4b1c      	ldr	r3, [pc, #112]	@ (800265c <MX_LPUART1_UART_Init+0x90>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80025f0:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <MX_LPUART1_UART_Init+0x90>)
 80025f2:	220c      	movs	r2, #12
 80025f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025f6:	4b19      	ldr	r3, [pc, #100]	@ (800265c <MX_LPUART1_UART_Init+0x90>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025fc:	4b17      	ldr	r3, [pc, #92]	@ (800265c <MX_LPUART1_UART_Init+0x90>)
 80025fe:	2200      	movs	r2, #0
 8002600:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002602:	4b16      	ldr	r3, [pc, #88]	@ (800265c <MX_LPUART1_UART_Init+0x90>)
 8002604:	2200      	movs	r2, #0
 8002606:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002608:	4b14      	ldr	r3, [pc, #80]	@ (800265c <MX_LPUART1_UART_Init+0x90>)
 800260a:	2200      	movs	r2, #0
 800260c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800260e:	4b13      	ldr	r3, [pc, #76]	@ (800265c <MX_LPUART1_UART_Init+0x90>)
 8002610:	2200      	movs	r2, #0
 8002612:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002614:	4811      	ldr	r0, [pc, #68]	@ (800265c <MX_LPUART1_UART_Init+0x90>)
 8002616:	f004 fd2a 	bl	800706e <HAL_UART_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002620:	f7ff fd1e 	bl	8002060 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002624:	2100      	movs	r1, #0
 8002626:	480d      	ldr	r0, [pc, #52]	@ (800265c <MX_LPUART1_UART_Init+0x90>)
 8002628:	f006 fe83 	bl	8009332 <HAL_UARTEx_SetTxFifoThreshold>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002632:	f7ff fd15 	bl	8002060 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002636:	2100      	movs	r1, #0
 8002638:	4808      	ldr	r0, [pc, #32]	@ (800265c <MX_LPUART1_UART_Init+0x90>)
 800263a:	f006 feb8 	bl	80093ae <HAL_UARTEx_SetRxFifoThreshold>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002644:	f7ff fd0c 	bl	8002060 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002648:	4804      	ldr	r0, [pc, #16]	@ (800265c <MX_LPUART1_UART_Init+0x90>)
 800264a:	f006 fe39 	bl	80092c0 <HAL_UARTEx_DisableFifoMode>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002654:	f7ff fd04 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}
 800265c:	200003f8 	.word	0x200003f8
 8002660:	40008000 	.word	0x40008000

08002664 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b0ae      	sub	sp, #184	@ 0xb8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800267c:	f107 0310 	add.w	r3, r7, #16
 8002680:	2294      	movs	r2, #148	@ 0x94
 8002682:	2100      	movs	r1, #0
 8002684:	4618      	mov	r0, r3
 8002686:	f007 ff10 	bl	800a4aa <memset>
  if(uartHandle->Instance==LPUART1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a25      	ldr	r2, [pc, #148]	@ (8002724 <HAL_UART_MspInit+0xc0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d143      	bne.n	800271c <HAL_UART_MspInit+0xb8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002694:	2320      	movs	r3, #32
 8002696:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002698:	2300      	movs	r3, #0
 800269a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	4618      	mov	r0, r3
 80026a2:	f003 fb0d 	bl	8005cc0 <HAL_RCCEx_PeriphCLKConfig>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026ac:	f7ff fcd8 	bl	8002060 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80026b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002728 <HAL_UART_MspInit+0xc4>)
 80026b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002728 <HAL_UART_MspInit+0xc4>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80026bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <HAL_UART_MspInit+0xc4>)
 80026be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c8:	4b17      	ldr	r3, [pc, #92]	@ (8002728 <HAL_UART_MspInit+0xc4>)
 80026ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026cc:	4a16      	ldr	r2, [pc, #88]	@ (8002728 <HAL_UART_MspInit+0xc4>)
 80026ce:	f043 0302 	orr.w	r3, r3, #2
 80026d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d4:	4b14      	ldr	r3, [pc, #80]	@ (8002728 <HAL_UART_MspInit+0xc4>)
 80026d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026e0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80026e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	2302      	movs	r3, #2
 80026ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80026fa:	2308      	movs	r3, #8
 80026fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002700:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002704:	4619      	mov	r1, r3
 8002706:	4809      	ldr	r0, [pc, #36]	@ (800272c <HAL_UART_MspInit+0xc8>)
 8002708:	f002 f8d4 	bl	80048b4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800270c:	2200      	movs	r2, #0
 800270e:	2100      	movs	r1, #0
 8002710:	2042      	movs	r0, #66	@ 0x42
 8002712:	f001 fdf4 	bl	80042fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002716:	2042      	movs	r0, #66	@ 0x42
 8002718:	f001 fe0b 	bl	8004332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800271c:	bf00      	nop
 800271e:	37b8      	adds	r7, #184	@ 0xb8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40008000 	.word	0x40008000
 8002728:	40021000 	.word	0x40021000
 800272c:	42020400 	.word	0x42020400

08002730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002730:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002768 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002734:	f7ff fe8c 	bl	8002450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002738:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800273a:	e003      	b.n	8002744 <LoopCopyDataInit>

0800273c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800273c:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800273e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002740:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002742:	3104      	adds	r1, #4

08002744 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002744:	480a      	ldr	r0, [pc, #40]	@ (8002770 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002746:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002748:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800274a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800274c:	d3f6      	bcc.n	800273c <CopyDataInit>
	ldr	r2, =_sbss
 800274e:	4a0a      	ldr	r2, [pc, #40]	@ (8002778 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002750:	e002      	b.n	8002758 <LoopFillZerobss>

08002752 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002752:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002754:	f842 3b04 	str.w	r3, [r2], #4

08002758 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002758:	4b08      	ldr	r3, [pc, #32]	@ (800277c <LoopForever+0x16>)
	cmp	r2, r3
 800275a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800275c:	d3f9      	bcc.n	8002752 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800275e:	f008 fd97 	bl	800b290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002762:	f7ff fb51 	bl	8001e08 <main>

08002766 <LoopForever>:

LoopForever:
    b LoopForever
 8002766:	e7fe      	b.n	8002766 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002768:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800276c:	0800fb3c 	.word	0x0800fb3c
	ldr	r0, =_sdata
 8002770:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002774:	20000254 	.word	0x20000254
	ldr	r2, =_sbss
 8002778:	20000254 	.word	0x20000254
	ldr	r3, = _ebss
 800277c:	20000600 	.word	0x20000600

08002780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002780:	e7fe      	b.n	8002780 <ADC1_2_IRQHandler>

08002782 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800278c:	2004      	movs	r0, #4
 800278e:	f001 fdab 	bl	80042e8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8002792:	f7ff fe6f 	bl	8002474 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002796:	2007      	movs	r0, #7
 8002798:	f000 f80e 	bl	80027b8 <HAL_InitTick>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	71fb      	strb	r3, [r7, #7]
 80027a6:	e001      	b.n	80027ac <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027a8:	f7ff fd24 	bl	80021f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027ac:	79fb      	ldrb	r3, [r7, #7]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027c4:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <HAL_InitTick+0x6c>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d023      	beq.n	8002814 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027cc:	4b16      	ldr	r3, [pc, #88]	@ (8002828 <HAL_InitTick+0x70>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b14      	ldr	r3, [pc, #80]	@ (8002824 <HAL_InitTick+0x6c>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	4619      	mov	r1, r3
 80027d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027da:	fbb3 f3f1 	udiv	r3, r3, r1
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 fdb3 	bl	800434e <HAL_SYSTICK_Config>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10f      	bne.n	800280e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b07      	cmp	r3, #7
 80027f2:	d809      	bhi.n	8002808 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f4:	2200      	movs	r2, #0
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	f001 fd7f 	bl	80042fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002800:	4a0a      	ldr	r2, [pc, #40]	@ (800282c <HAL_InitTick+0x74>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e007      	b.n	8002818 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e004      	b.n	8002818 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
 8002812:	e001      	b.n	8002818 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	2000000c 	.word	0x2000000c
 8002828:	20000004 	.word	0x20000004
 800282c:	20000008 	.word	0x20000008

08002830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002834:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <HAL_IncTick+0x20>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <HAL_IncTick+0x24>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4413      	add	r3, r2
 8002840:	4a04      	ldr	r2, [pc, #16]	@ (8002854 <HAL_IncTick+0x24>)
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	2000000c 	.word	0x2000000c
 8002854:	2000048c 	.word	0x2000048c

08002858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return uwTick;
 800285c:	4b03      	ldr	r3, [pc, #12]	@ (800286c <HAL_GetTick+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	2000048c 	.word	0x2000048c

08002870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002878:	f7ff ffee 	bl	8002858 <HAL_GetTick>
 800287c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d005      	beq.n	8002896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800288a:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <HAL_Delay+0x44>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002896:	bf00      	nop
 8002898:	f7ff ffde 	bl	8002858 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d8f7      	bhi.n	8002898 <HAL_Delay+0x28>
  {
  }
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2000000c 	.word	0x2000000c

080028b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	609a      	str	r2, [r3, #8]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3360      	adds	r3, #96	@ 0x60
 8002932:	461a      	mov	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <LL_ADC_SetOffset+0x44>)
 8002942:	4013      	ands	r3, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	4313      	orrs	r3, r2
 8002950:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	03fff000 	.word	0x03fff000

08002968 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3360      	adds	r3, #96	@ 0x60
 8002976:	461a      	mov	r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3360      	adds	r3, #96	@ 0x60
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029be:	bf00      	nop
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	615a      	str	r2, [r3, #20]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b087      	sub	sp, #28
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3330      	adds	r3, #48	@ 0x30
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	4413      	add	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	211f      	movs	r1, #31
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	401a      	ands	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0e9b      	lsrs	r3, r3, #26
 8002a4e:	f003 011f 	and.w	r1, r3, #31
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a62:	bf00      	nop
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b087      	sub	sp, #28
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3314      	adds	r3, #20
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	0e5b      	lsrs	r3, r3, #25
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	4413      	add	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	0d1b      	lsrs	r3, r3, #20
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	2107      	movs	r1, #7
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	0d1b      	lsrs	r3, r3, #20
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002adc:	43db      	mvns	r3, r3
 8002ade:	401a      	ands	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0318 	and.w	r3, r3, #24
 8002ae6:	4908      	ldr	r1, [pc, #32]	@ (8002b08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ae8:	40d9      	lsrs	r1, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	400b      	ands	r3, r1
 8002aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af2:	431a      	orrs	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	0007ffff 	.word	0x0007ffff

08002b0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 031f 	and.w	r3, r3, #31
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6093      	str	r3, [r2, #8]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b7c:	d101      	bne.n	8002b82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ba0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ba4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bcc:	d101      	bne.n	8002bd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bf4:	f043 0201 	orr.w	r2, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c1c:	f043 0202 	orr.w	r2, r3, #2
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <LL_ADC_IsEnabled+0x18>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <LL_ADC_IsEnabled+0x1a>
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d101      	bne.n	8002c6e <LL_ADC_IsDisableOngoing+0x18>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <LL_ADC_IsDisableOngoing+0x1a>
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c90:	f043 0204 	orr.w	r2, r3, #4
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cb8:	f043 0210 	orr.w	r2, r3, #16
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d101      	bne.n	8002ce4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d02:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d06:	f043 0220 	orr.w	r2, r3, #32
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d101      	bne.n	8002d32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b089      	sub	sp, #36	@ 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e12e      	b.n	8002fb8 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7fe fa67 	bl	800123c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fef1 	bl	8002b68 <LL_ADC_IsDeepPowerDownEnabled>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d004      	beq.n	8002d96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fed7 	bl	8002b44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff0c 	bl	8002bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d115      	bne.n	8002dd2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fef0 	bl	8002b90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002db0:	4b83      	ldr	r3, [pc, #524]	@ (8002fc0 <HAL_ADC_Init+0x280>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	4a83      	ldr	r2, [pc, #524]	@ (8002fc4 <HAL_ADC_Init+0x284>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	099b      	lsrs	r3, r3, #6
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002dc4:	e002      	b.n	8002dcc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f9      	bne.n	8002dc6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff feee 	bl	8002bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10d      	bne.n	8002dfe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de6:	f043 0210 	orr.w	r2, r3, #16
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df2:	f043 0201 	orr.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff ff62 	bl	8002ccc <LL_ADC_REG_IsConversionOngoing>
 8002e08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 80c7 	bne.w	8002fa6 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 80c3 	bne.w	8002fa6 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e28:	f043 0202 	orr.w	r2, r3, #2
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fefb 	bl	8002c30 <LL_ADC_IsEnabled>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d110      	bne.n	8002e62 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e40:	4861      	ldr	r0, [pc, #388]	@ (8002fc8 <HAL_ADC_Init+0x288>)
 8002e42:	f7ff fef5 	bl	8002c30 <LL_ADC_IsEnabled>
 8002e46:	4604      	mov	r4, r0
 8002e48:	4860      	ldr	r0, [pc, #384]	@ (8002fcc <HAL_ADC_Init+0x28c>)
 8002e4a:	f7ff fef1 	bl	8002c30 <LL_ADC_IsEnabled>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4323      	orrs	r3, r4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	485c      	ldr	r0, [pc, #368]	@ (8002fd0 <HAL_ADC_Init+0x290>)
 8002e5e:	f7ff fd2b 	bl	80028b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7e5b      	ldrb	r3, [r3, #25]
 8002e66:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e6c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002e72:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002e78:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e80:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d106      	bne.n	8002e9e <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	3b01      	subs	r3, #1
 8002e96:	045b      	lsls	r3, r3, #17
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eaa:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb2:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	4b44      	ldr	r3, [pc, #272]	@ (8002fd4 <HAL_ADC_Init+0x294>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	69b9      	ldr	r1, [r7, #24]
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff ff21 	bl	8002d1a <LL_ADC_INJ_IsConversionOngoing>
 8002ed8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d140      	bne.n	8002f62 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d13d      	bne.n	8002f62 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	7e1b      	ldrb	r3, [r3, #24]
 8002eee:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ef0:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ef8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f08:	f023 0306 	bic.w	r3, r3, #6
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	69b9      	ldr	r1, [r7, #24]
 8002f12:	430b      	orrs	r3, r1
 8002f14:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d118      	bne.n	8002f52 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f2a:	f023 0304 	bic.w	r3, r3, #4
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f36:	4311      	orrs	r1, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002f3c:	4311      	orrs	r1, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f42:	430a      	orrs	r2, r1
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	611a      	str	r2, [r3, #16]
 8002f50:	e007      	b.n	8002f62 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10c      	bne.n	8002f84 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f70:	f023 010f 	bic.w	r1, r3, #15
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	1e5a      	subs	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f82:	e007      	b.n	8002f94 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 020f 	bic.w	r2, r2, #15
 8002f92:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f98:	f023 0303 	bic.w	r3, r3, #3
 8002f9c:	f043 0201 	orr.w	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fa4:	e007      	b.n	8002fb6 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002faa:	f043 0210 	orr.w	r2, r3, #16
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3724      	adds	r7, #36	@ 0x24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd90      	pop	{r4, r7, pc}
 8002fc0:	20000004 	.word	0x20000004
 8002fc4:	053e2d63 	.word	0x053e2d63
 8002fc8:	42028000 	.word	0x42028000
 8002fcc:	42028100 	.word	0x42028100
 8002fd0:	42028300 	.word	0x42028300
 8002fd4:	fff0c007 	.word	0xfff0c007

08002fd8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fe0:	4857      	ldr	r0, [pc, #348]	@ (8003140 <HAL_ADC_Start+0x168>)
 8002fe2:	f7ff fd93 	bl	8002b0c <LL_ADC_GetMultimode>
 8002fe6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fe6d 	bl	8002ccc <LL_ADC_REG_IsConversionOngoing>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f040 809c 	bne.w	8003132 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_ADC_Start+0x30>
 8003004:	2302      	movs	r3, #2
 8003006:	e097      	b.n	8003138 <HAL_ADC_Start+0x160>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fe5b 	bl	8003ccc <ADC_Enable>
 8003016:	4603      	mov	r3, r0
 8003018:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800301a:	7dfb      	ldrb	r3, [r7, #23]
 800301c:	2b00      	cmp	r3, #0
 800301e:	f040 8083 	bne.w	8003128 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003026:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800302a:	f023 0301 	bic.w	r3, r3, #1
 800302e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a42      	ldr	r2, [pc, #264]	@ (8003144 <HAL_ADC_Start+0x16c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d002      	beq.n	8003046 <HAL_ADC_Start+0x6e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	e000      	b.n	8003048 <HAL_ADC_Start+0x70>
 8003046:	4b40      	ldr	r3, [pc, #256]	@ (8003148 <HAL_ADC_Start+0x170>)
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	4293      	cmp	r3, r2
 800304e:	d002      	beq.n	8003056 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d105      	bne.n	8003062 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003066:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800306a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800306e:	d106      	bne.n	800307e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003074:	f023 0206 	bic.w	r2, r3, #6
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800307c:	e002      	b.n	8003084 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	221c      	movs	r2, #28
 800308a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a2a      	ldr	r2, [pc, #168]	@ (8003144 <HAL_ADC_Start+0x16c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d002      	beq.n	80030a4 <HAL_ADC_Start+0xcc>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	e000      	b.n	80030a6 <HAL_ADC_Start+0xce>
 80030a4:	4b28      	ldr	r3, [pc, #160]	@ (8003148 <HAL_ADC_Start+0x170>)
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d008      	beq.n	80030c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d002      	beq.n	80030c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b09      	cmp	r3, #9
 80030be:	d114      	bne.n	80030ea <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fdca 	bl	8002c7c <LL_ADC_REG_StartConversion>
 80030e8:	e025      	b.n	8003136 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a12      	ldr	r2, [pc, #72]	@ (8003144 <HAL_ADC_Start+0x16c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d002      	beq.n	8003106 <HAL_ADC_Start+0x12e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	e000      	b.n	8003108 <HAL_ADC_Start+0x130>
 8003106:	4b10      	ldr	r3, [pc, #64]	@ (8003148 <HAL_ADC_Start+0x170>)
 8003108:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00f      	beq.n	8003136 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800311e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	659a      	str	r2, [r3, #88]	@ 0x58
 8003126:	e006      	b.n	8003136 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003130:	e001      	b.n	8003136 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003132:	2302      	movs	r3, #2
 8003134:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003136:	7dfb      	ldrb	r3, [r7, #23]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	42028300 	.word	0x42028300
 8003144:	42028100 	.word	0x42028100
 8003148:	42028000 	.word	0x42028000

0800314c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_ADC_Stop+0x16>
 800315e:	2302      	movs	r3, #2
 8003160:	e023      	b.n	80031aa <HAL_ADC_Stop+0x5e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800316a:	2103      	movs	r1, #3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fcf1 	bl	8003b54 <ADC_ConversionStop>
 8003172:	4603      	mov	r3, r0
 8003174:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d111      	bne.n	80031a0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fe2b 	bl	8003dd8 <ADC_Disable>
 8003182:	4603      	mov	r3, r0
 8003184:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d109      	bne.n	80031a0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003190:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031be:	4866      	ldr	r0, [pc, #408]	@ (8003358 <HAL_ADC_PollForConversion+0x1a4>)
 80031c0:	f7ff fca4 	bl	8002b0c <LL_ADC_GetMultimode>
 80031c4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d102      	bne.n	80031d4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80031ce:	2308      	movs	r3, #8
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	e02a      	b.n	800322a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d002      	beq.n	80031e6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b09      	cmp	r3, #9
 80031e4:	d111      	bne.n	800320a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f8:	f043 0220 	orr.w	r2, r3, #32
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0a4      	b.n	800334e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003204:	2304      	movs	r3, #4
 8003206:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003208:	e00f      	b.n	800322a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800320a:	4853      	ldr	r0, [pc, #332]	@ (8003358 <HAL_ADC_PollForConversion+0x1a4>)
 800320c:	f7ff fc8c 	bl	8002b28 <LL_ADC_GetMultiDMATransfer>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321a:	f043 0220 	orr.w	r2, r3, #32
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e093      	b.n	800334e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003226:	2304      	movs	r3, #4
 8003228:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800322a:	f7ff fb15 	bl	8002858 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003230:	e021      	b.n	8003276 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d01d      	beq.n	8003276 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800323a:	f7ff fb0d 	bl	8002858 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <HAL_ADC_PollForConversion+0x9c>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d112      	bne.n	8003276 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10b      	bne.n	8003276 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003262:	f043 0204 	orr.w	r2, r3, #4
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e06b      	b.n	800334e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0d6      	beq.n	8003232 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003288:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fbab 	bl	80029f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01c      	beq.n	80032da <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7e5b      	ldrb	r3, [r3, #25]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d118      	bne.n	80032da <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d111      	bne.n	80032da <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d105      	bne.n	80032da <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d2:	f043 0201 	orr.w	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1f      	ldr	r2, [pc, #124]	@ (800335c <HAL_ADC_PollForConversion+0x1a8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d002      	beq.n	80032ea <HAL_ADC_PollForConversion+0x136>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	e000      	b.n	80032ec <HAL_ADC_PollForConversion+0x138>
 80032ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003360 <HAL_ADC_PollForConversion+0x1ac>)
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d008      	beq.n	8003306 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b05      	cmp	r3, #5
 80032fe:	d002      	beq.n	8003306 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b09      	cmp	r3, #9
 8003304:	d104      	bne.n	8003310 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	e00c      	b.n	800332a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a11      	ldr	r2, [pc, #68]	@ (800335c <HAL_ADC_PollForConversion+0x1a8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d002      	beq.n	8003320 <HAL_ADC_PollForConversion+0x16c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	e000      	b.n	8003322 <HAL_ADC_PollForConversion+0x16e>
 8003320:	4b0f      	ldr	r3, [pc, #60]	@ (8003360 <HAL_ADC_PollForConversion+0x1ac>)
 8003322:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d104      	bne.n	800333a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2208      	movs	r2, #8
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e008      	b.n	800334c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d103      	bne.n	800334c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	220c      	movs	r2, #12
 800334a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	42028300 	.word	0x42028300
 800335c:	42028100 	.word	0x42028100
 8003360:	42028000 	.word	0x42028000

08003364 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b0b7      	sub	sp, #220	@ 0xdc
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x22>
 800339e:	2302      	movs	r3, #2
 80033a0:	e3c1      	b.n	8003b26 <HAL_ADC_ConfigChannel+0x7a6>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fc8c 	bl	8002ccc <LL_ADC_REG_IsConversionOngoing>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 83a6 	bne.w	8003b08 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	f7ff fb24 	bl	8002a16 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fc7a 	bl	8002ccc <LL_ADC_REG_IsConversionOngoing>
 80033d8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fc9a 	bl	8002d1a <LL_ADC_INJ_IsConversionOngoing>
 80033e6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 81c1 	bne.w	8003776 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f040 81bc 	bne.w	8003776 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003406:	d10f      	bne.n	8003428 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2200      	movs	r2, #0
 8003412:	4619      	mov	r1, r3
 8003414:	f7ff fb2b 	bl	8002a6e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fad2 	bl	80029ca <LL_ADC_SetSamplingTimeCommonConfig>
 8003426:	e00e      	b.n	8003446 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6819      	ldr	r1, [r3, #0]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	461a      	mov	r2, r3
 8003436:	f7ff fb1a 	bl	8002a6e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fac2 	bl	80029ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	08db      	lsrs	r3, r3, #3
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d00a      	beq.n	800347e <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6919      	ldr	r1, [r3, #16]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003478:	f7ff fa52 	bl	8002920 <LL_ADC_SetOffset>
 800347c:	e17b      	b.n	8003776 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2100      	movs	r1, #0
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fa6f 	bl	8002968 <LL_ADC_GetOffsetChannel>
 800348a:	4603      	mov	r3, r0
 800348c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x12a>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fa64 	bl	8002968 <LL_ADC_GetOffsetChannel>
 80034a0:	4603      	mov	r3, r0
 80034a2:	0e9b      	lsrs	r3, r3, #26
 80034a4:	f003 021f 	and.w	r2, r3, #31
 80034a8:	e01e      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x168>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fa59 	bl	8002968 <LL_ADC_GetOffsetChannel>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80034d8:	2320      	movs	r3, #32
 80034da:	e004      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80034dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034e0:	fab3 f383 	clz	r3, r3
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x180>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	0e9b      	lsrs	r3, r3, #26
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	e018      	b.n	8003532 <HAL_ADC_ConfigChannel+0x1b2>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800350c:	fa93 f3a3 	rbit	r3, r3
 8003510:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800351c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8003524:	2320      	movs	r3, #32
 8003526:	e004      	b.n	8003532 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8003528:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800352c:	fab3 f383 	clz	r3, r3
 8003530:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003532:	429a      	cmp	r2, r3
 8003534:	d106      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2200      	movs	r2, #0
 800353c:	2100      	movs	r1, #0
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fa28 	bl	8002994 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2101      	movs	r1, #1
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fa0c 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003550:	4603      	mov	r3, r0
 8003552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x1f0>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2101      	movs	r1, #1
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fa01 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003566:	4603      	mov	r3, r0
 8003568:	0e9b      	lsrs	r3, r3, #26
 800356a:	f003 021f 	and.w	r2, r3, #31
 800356e:	e01e      	b.n	80035ae <HAL_ADC_ConfigChannel+0x22e>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2101      	movs	r1, #1
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff f9f6 	bl	8002968 <LL_ADC_GetOffsetChannel>
 800357c:	4603      	mov	r3, r0
 800357e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800358e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003592:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003596:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800359e:	2320      	movs	r3, #32
 80035a0:	e004      	b.n	80035ac <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80035a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035a6:	fab3 f383 	clz	r3, r3
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d105      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x246>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	0e9b      	lsrs	r3, r3, #26
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	e018      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x278>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80035da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80035e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80035ea:	2320      	movs	r3, #32
 80035ec:	e004      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80035ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035f2:	fab3 f383 	clz	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d106      	bne.n	800360a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2200      	movs	r2, #0
 8003602:	2101      	movs	r1, #1
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff f9c5 	bl	8002994 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2102      	movs	r1, #2
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff f9a9 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003616:	4603      	mov	r3, r0
 8003618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x2b6>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2102      	movs	r1, #2
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff f99e 	bl	8002968 <LL_ADC_GetOffsetChannel>
 800362c:	4603      	mov	r3, r0
 800362e:	0e9b      	lsrs	r3, r3, #26
 8003630:	f003 021f 	and.w	r2, r3, #31
 8003634:	e01e      	b.n	8003674 <HAL_ADC_ConfigChannel+0x2f4>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2102      	movs	r1, #2
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff f993 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003642:	4603      	mov	r3, r0
 8003644:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003654:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003658:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800365c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8003664:	2320      	movs	r3, #32
 8003666:	e004      	b.n	8003672 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8003668:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367c:	2b00      	cmp	r3, #0
 800367e:	d105      	bne.n	800368c <HAL_ADC_ConfigChannel+0x30c>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	0e9b      	lsrs	r3, r3, #26
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	e016      	b.n	80036ba <HAL_ADC_ConfigChannel+0x33a>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003698:	fa93 f3a3 	rbit	r3, r3
 800369c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800369e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80036a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80036ac:	2320      	movs	r3, #32
 80036ae:	e004      	b.n	80036ba <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80036b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036b4:	fab3 f383 	clz	r3, r3
 80036b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d106      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2200      	movs	r2, #0
 80036c4:	2102      	movs	r1, #2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff f964 	bl	8002994 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2103      	movs	r1, #3
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff f948 	bl	8002968 <LL_ADC_GetOffsetChannel>
 80036d8:	4603      	mov	r3, r0
 80036da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10a      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x378>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2103      	movs	r1, #3
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff f93d 	bl	8002968 <LL_ADC_GetOffsetChannel>
 80036ee:	4603      	mov	r3, r0
 80036f0:	0e9b      	lsrs	r3, r3, #26
 80036f2:	f003 021f 	and.w	r2, r3, #31
 80036f6:	e017      	b.n	8003728 <HAL_ADC_ConfigChannel+0x3a8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2103      	movs	r1, #3
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff f932 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003704:	4603      	mov	r3, r0
 8003706:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003710:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003712:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003714:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800371a:	2320      	movs	r3, #32
 800371c:	e003      	b.n	8003726 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800371e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003720:	fab3 f383 	clz	r3, r3
 8003724:	b2db      	uxtb	r3, r3
 8003726:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003730:	2b00      	cmp	r3, #0
 8003732:	d105      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x3c0>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	0e9b      	lsrs	r3, r3, #26
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	e011      	b.n	8003764 <HAL_ADC_ConfigChannel+0x3e4>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003746:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003748:	fa93 f3a3 	rbit	r3, r3
 800374c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800374e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003750:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8003758:	2320      	movs	r3, #32
 800375a:	e003      	b.n	8003764 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800375c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003764:	429a      	cmp	r2, r3
 8003766:	d106      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2200      	movs	r2, #0
 800376e:	2103      	movs	r1, #3
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff f90f 	bl	8002994 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fa58 	bl	8002c30 <LL_ADC_IsEnabled>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	f040 81c9 	bne.w	8003b1a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	461a      	mov	r2, r3
 8003796:	f7ff f995 	bl	8002ac4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	4a8f      	ldr	r2, [pc, #572]	@ (80039dc <HAL_ADC_ConfigChannel+0x65c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	f040 8131 	bne.w	8003a08 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10b      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x44e>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	0e9b      	lsrs	r3, r3, #26
 80037bc:	3301      	adds	r3, #1
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	2b09      	cmp	r3, #9
 80037c4:	bf94      	ite	ls
 80037c6:	2301      	movls	r3, #1
 80037c8:	2300      	movhi	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	e019      	b.n	8003802 <HAL_ADC_ConfigChannel+0x482>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037d6:	fa93 f3a3 	rbit	r3, r3
 80037da:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80037dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037de:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80037e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 80037e6:	2320      	movs	r3, #32
 80037e8:	e003      	b.n	80037f2 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 80037ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	3301      	adds	r3, #1
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	2b09      	cmp	r3, #9
 80037fa:	bf94      	ite	ls
 80037fc:	2301      	movls	r3, #1
 80037fe:	2300      	movhi	r3, #0
 8003800:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003802:	2b00      	cmp	r3, #0
 8003804:	d079      	beq.n	80038fa <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800380e:	2b00      	cmp	r3, #0
 8003810:	d107      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x4a2>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	0e9b      	lsrs	r3, r3, #26
 8003818:	3301      	adds	r3, #1
 800381a:	069b      	lsls	r3, r3, #26
 800381c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003820:	e015      	b.n	800384e <HAL_ADC_ConfigChannel+0x4ce>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003832:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800383a:	2320      	movs	r3, #32
 800383c:	e003      	b.n	8003846 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800383e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	3301      	adds	r3, #1
 8003848:	069b      	lsls	r3, r3, #26
 800384a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <HAL_ADC_ConfigChannel+0x4ee>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	0e9b      	lsrs	r3, r3, #26
 8003860:	3301      	adds	r3, #1
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	2101      	movs	r1, #1
 8003868:	fa01 f303 	lsl.w	r3, r1, r3
 800386c:	e017      	b.n	800389e <HAL_ADC_ConfigChannel+0x51e>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003876:	fa93 f3a3 	rbit	r3, r3
 800387a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800387c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800387e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003880:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8003886:	2320      	movs	r3, #32
 8003888:	e003      	b.n	8003892 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800388a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	2101      	movs	r1, #1
 800389a:	fa01 f303 	lsl.w	r3, r1, r3
 800389e:	ea42 0103 	orr.w	r1, r2, r3
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x544>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	0e9b      	lsrs	r3, r3, #26
 80038b4:	3301      	adds	r3, #1
 80038b6:	f003 021f 	and.w	r2, r3, #31
 80038ba:	4613      	mov	r3, r2
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4413      	add	r3, r2
 80038c0:	051b      	lsls	r3, r3, #20
 80038c2:	e018      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x576>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80038d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80038d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80038dc:	2320      	movs	r3, #32
 80038de:	e003      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80038e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	3301      	adds	r3, #1
 80038ea:	f003 021f 	and.w	r2, r3, #31
 80038ee:	4613      	mov	r3, r2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	4413      	add	r3, r2
 80038f4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f6:	430b      	orrs	r3, r1
 80038f8:	e081      	b.n	80039fe <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003902:	2b00      	cmp	r3, #0
 8003904:	d107      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x596>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	0e9b      	lsrs	r3, r3, #26
 800390c:	3301      	adds	r3, #1
 800390e:	069b      	lsls	r3, r3, #26
 8003910:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003914:	e015      	b.n	8003942 <HAL_ADC_ConfigChannel+0x5c2>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391e:	fa93 f3a3 	rbit	r3, r3
 8003922:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003926:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800392e:	2320      	movs	r3, #32
 8003930:	e003      	b.n	800393a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8003932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003934:	fab3 f383 	clz	r3, r3
 8003938:	b2db      	uxtb	r3, r3
 800393a:	3301      	adds	r3, #1
 800393c:	069b      	lsls	r3, r3, #26
 800393e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x5e2>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	0e9b      	lsrs	r3, r3, #26
 8003954:	3301      	adds	r3, #1
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	2101      	movs	r1, #1
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	e017      	b.n	8003992 <HAL_ADC_ConfigChannel+0x612>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	61fb      	str	r3, [r7, #28]
  return result;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 800397a:	2320      	movs	r3, #32
 800397c:	e003      	b.n	8003986 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	fab3 f383 	clz	r3, r3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	3301      	adds	r3, #1
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	2101      	movs	r1, #1
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	ea42 0103 	orr.w	r1, r2, r3
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10d      	bne.n	80039be <HAL_ADC_ConfigChannel+0x63e>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	0e9b      	lsrs	r3, r3, #26
 80039a8:	3301      	adds	r3, #1
 80039aa:	f003 021f 	and.w	r2, r3, #31
 80039ae:	4613      	mov	r3, r2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	3b1e      	subs	r3, #30
 80039b6:	051b      	lsls	r3, r3, #20
 80039b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039bc:	e01e      	b.n	80039fc <HAL_ADC_ConfigChannel+0x67c>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	fa93 f3a3 	rbit	r3, r3
 80039ca:	613b      	str	r3, [r7, #16]
  return result;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d104      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80039d6:	2320      	movs	r3, #32
 80039d8:	e006      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x668>
 80039da:	bf00      	nop
 80039dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	3301      	adds	r3, #1
 80039ea:	f003 021f 	and.w	r2, r3, #31
 80039ee:	4613      	mov	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	4413      	add	r3, r2
 80039f4:	3b1e      	subs	r3, #30
 80039f6:	051b      	lsls	r3, r3, #20
 80039f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a02:	4619      	mov	r1, r3
 8003a04:	f7ff f833 	bl	8002a6e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4b48      	ldr	r3, [pc, #288]	@ (8003b30 <HAL_ADC_ConfigChannel+0x7b0>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8082 	beq.w	8003b1a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a16:	4847      	ldr	r0, [pc, #284]	@ (8003b34 <HAL_ADC_ConfigChannel+0x7b4>)
 8003a18:	f7fe ff74 	bl	8002904 <LL_ADC_GetCommonPathInternalCh>
 8003a1c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a20:	4845      	ldr	r0, [pc, #276]	@ (8003b38 <HAL_ADC_ConfigChannel+0x7b8>)
 8003a22:	f7ff f905 	bl	8002c30 <LL_ADC_IsEnabled>
 8003a26:	4604      	mov	r4, r0
 8003a28:	4844      	ldr	r0, [pc, #272]	@ (8003b3c <HAL_ADC_ConfigChannel+0x7bc>)
 8003a2a:	f7ff f901 	bl	8002c30 <LL_ADC_IsEnabled>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4323      	orrs	r3, r4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d15e      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a41      	ldr	r2, [pc, #260]	@ (8003b40 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d127      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d121      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a39      	ldr	r2, [pc, #228]	@ (8003b38 <HAL_ADC_ConfigChannel+0x7b8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d161      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4834      	ldr	r0, [pc, #208]	@ (8003b34 <HAL_ADC_ConfigChannel+0x7b4>)
 8003a62:	f7fe ff3c 	bl	80028de <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a66:	4b37      	ldr	r3, [pc, #220]	@ (8003b44 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	099b      	lsrs	r3, r3, #6
 8003a6c:	4a36      	ldr	r2, [pc, #216]	@ (8003b48 <HAL_ADC_ConfigChannel+0x7c8>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	099b      	lsrs	r3, r3, #6
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003a7e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003a80:	e002      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f9      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a8e:	e044      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2d      	ldr	r2, [pc, #180]	@ (8003b4c <HAL_ADC_ConfigChannel+0x7cc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d113      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10d      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a23      	ldr	r2, [pc, #140]	@ (8003b38 <HAL_ADC_ConfigChannel+0x7b8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d134      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ab0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ab4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ab8:	4619      	mov	r1, r3
 8003aba:	481e      	ldr	r0, [pc, #120]	@ (8003b34 <HAL_ADC_ConfigChannel+0x7b4>)
 8003abc:	f7fe ff0f 	bl	80028de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ac0:	e02b      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a22      	ldr	r2, [pc, #136]	@ (8003b50 <HAL_ADC_ConfigChannel+0x7d0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d126      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003acc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ad0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d120      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a16      	ldr	r2, [pc, #88]	@ (8003b38 <HAL_ADC_ConfigChannel+0x7b8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d11b      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ae6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003aea:	4619      	mov	r1, r3
 8003aec:	4811      	ldr	r0, [pc, #68]	@ (8003b34 <HAL_ADC_ConfigChannel+0x7b4>)
 8003aee:	f7fe fef6 	bl	80028de <LL_ADC_SetCommonPathInternalCh>
 8003af2:	e012      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003b06:	e008      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003b22:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	37dc      	adds	r7, #220	@ 0xdc
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd90      	pop	{r4, r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	80080000 	.word	0x80080000
 8003b34:	42028300 	.word	0x42028300
 8003b38:	42028000 	.word	0x42028000
 8003b3c:	42028100 	.word	0x42028100
 8003b40:	c7520000 	.word	0xc7520000
 8003b44:	20000004 	.word	0x20000004
 8003b48:	053e2d63 	.word	0x053e2d63
 8003b4c:	cb840000 	.word	0xcb840000
 8003b50:	80000001 	.word	0x80000001

08003b54 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff f8ae 	bl	8002ccc <LL_ADC_REG_IsConversionOngoing>
 8003b70:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff f8cf 	bl	8002d1a <LL_ADC_INJ_IsConversionOngoing>
 8003b7c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d103      	bne.n	8003b8c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8098 	beq.w	8003cbc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d02a      	beq.n	8003bf0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	7e5b      	ldrb	r3, [r3, #25]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d126      	bne.n	8003bf0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	7e1b      	ldrb	r3, [r3, #24]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d122      	bne.n	8003bf0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003baa:	2301      	movs	r3, #1
 8003bac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bae:	e014      	b.n	8003bda <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4a45      	ldr	r2, [pc, #276]	@ (8003cc8 <ADC_ConversionStop+0x174>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d90d      	bls.n	8003bd4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bbc:	f043 0210 	orr.w	r2, r3, #16
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc8:	f043 0201 	orr.w	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e074      	b.n	8003cbe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be4:	2b40      	cmp	r3, #64	@ 0x40
 8003be6:	d1e3      	bne.n	8003bb0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2240      	movs	r2, #64	@ 0x40
 8003bee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d014      	beq.n	8003c20 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff f866 	bl	8002ccc <LL_ADC_REG_IsConversionOngoing>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff f823 	bl	8002c56 <LL_ADC_IsDisableOngoing>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d104      	bne.n	8003c20 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff f842 	bl	8002ca4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d014      	beq.n	8003c50 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff f875 	bl	8002d1a <LL_ADC_INJ_IsConversionOngoing>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00c      	beq.n	8003c50 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff f80b 	bl	8002c56 <LL_ADC_IsDisableOngoing>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d104      	bne.n	8003c50 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff f851 	bl	8002cf2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d005      	beq.n	8003c62 <ADC_ConversionStop+0x10e>
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d105      	bne.n	8003c68 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c5c:	230c      	movs	r3, #12
 8003c5e:	617b      	str	r3, [r7, #20]
        break;
 8003c60:	e005      	b.n	8003c6e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c62:	2308      	movs	r3, #8
 8003c64:	617b      	str	r3, [r7, #20]
        break;
 8003c66:	e002      	b.n	8003c6e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c68:	2304      	movs	r3, #4
 8003c6a:	617b      	str	r3, [r7, #20]
        break;
 8003c6c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c6e:	f7fe fdf3 	bl	8002858 <HAL_GetTick>
 8003c72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c74:	e01b      	b.n	8003cae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c76:	f7fe fdef 	bl	8002858 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b05      	cmp	r3, #5
 8003c82:	d914      	bls.n	8003cae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c96:	f043 0210 	orr.w	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca2:	f043 0201 	orr.w	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e007      	b.n	8003cbe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1dc      	bne.n	8003c76 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3720      	adds	r7, #32
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	a33fffff 	.word	0xa33fffff

08003ccc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe ffa7 	bl	8002c30 <LL_ADC_IsEnabled>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d169      	bne.n	8003dbc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	4b36      	ldr	r3, [pc, #216]	@ (8003dc8 <ADC_Enable+0xfc>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfa:	f043 0210 	orr.w	r2, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d06:	f043 0201 	orr.w	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e055      	b.n	8003dbe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fe ff62 	bl	8002be0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d1c:	482b      	ldr	r0, [pc, #172]	@ (8003dcc <ADC_Enable+0x100>)
 8003d1e:	f7fe fdf1 	bl	8002904 <LL_ADC_GetCommonPathInternalCh>
 8003d22:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d013      	beq.n	8003d54 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d2c:	4b28      	ldr	r3, [pc, #160]	@ (8003dd0 <ADC_Enable+0x104>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	099b      	lsrs	r3, r3, #6
 8003d32:	4a28      	ldr	r2, [pc, #160]	@ (8003dd4 <ADC_Enable+0x108>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	099b      	lsrs	r3, r3, #6
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d46:	e002      	b.n	8003d4e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f9      	bne.n	8003d48 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d54:	f7fe fd80 	bl	8002858 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d5a:	e028      	b.n	8003dae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe ff65 	bl	8002c30 <LL_ADC_IsEnabled>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d104      	bne.n	8003d76 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe ff35 	bl	8002be0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d76:	f7fe fd6f 	bl	8002858 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d914      	bls.n	8003dae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d00d      	beq.n	8003dae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	f043 0210 	orr.w	r2, r3, #16
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da2:	f043 0201 	orr.w	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e007      	b.n	8003dbe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d1cf      	bne.n	8003d5c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	8000003f 	.word	0x8000003f
 8003dcc:	42028300 	.word	0x42028300
 8003dd0:	20000004 	.word	0x20000004
 8003dd4:	053e2d63 	.word	0x053e2d63

08003dd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe ff36 	bl	8002c56 <LL_ADC_IsDisableOngoing>
 8003dea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe ff1d 	bl	8002c30 <LL_ADC_IsEnabled>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d047      	beq.n	8003e8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d144      	bne.n	8003e8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 030d 	and.w	r3, r3, #13
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d10c      	bne.n	8003e2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe fef7 	bl	8002c08 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2203      	movs	r2, #3
 8003e20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e22:	f7fe fd19 	bl	8002858 <HAL_GetTick>
 8003e26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e28:	e029      	b.n	8003e7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2e:	f043 0210 	orr.w	r2, r3, #16
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3a:	f043 0201 	orr.w	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e023      	b.n	8003e8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e46:	f7fe fd07 	bl	8002858 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d914      	bls.n	8003e7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e66:	f043 0210 	orr.w	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e72:	f043 0201 	orr.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e007      	b.n	8003e8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1dc      	bne.n	8003e46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <LL_ADC_IsEnabled>:
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <LL_ADC_IsEnabled+0x18>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <LL_ADC_IsEnabled+0x1a>
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_ADC_StartCalibration>:
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003ece:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	609a      	str	r2, [r3, #8]
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <LL_ADC_IsCalibrationOnGoing>:
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003efe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f02:	d101      	bne.n	8003f08 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d101      	bne.n	8003f2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_ADCEx_Calibration_Start+0x1c>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e04d      	b.n	8003ff4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ff39 	bl	8003dd8 <ADC_Disable>
 8003f66:	4603      	mov	r3, r0
 8003f68:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d136      	bne.n	8003fde <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f74:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f78:	f023 0302 	bic.w	r3, r3, #2
 8003f7c:	f043 0202 	orr.w	r2, r3, #2
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6839      	ldr	r1, [r7, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff ff96 	bl	8003ebc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f90:	e014      	b.n	8003fbc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	3301      	adds	r3, #1
 8003f96:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4a18      	ldr	r2, [pc, #96]	@ (8003ffc <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d90d      	bls.n	8003fbc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa4:	f023 0312 	bic.w	r3, r3, #18
 8003fa8:	f043 0210 	orr.w	r2, r3, #16
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e01b      	b.n	8003ff4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff ff94 	bl	8003eee <LL_ADC_IsCalibrationOnGoing>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e2      	bne.n	8003f92 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd0:	f023 0303 	bic.w	r3, r3, #3
 8003fd4:	f043 0201 	orr.w	r2, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fdc:	e005      	b.n	8003fea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe2:	f043 0210 	orr.w	r2, r3, #16
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	0006cbff 	.word	0x0006cbff

08004000 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b0a1      	sub	sp, #132	@ 0x84
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800401a:	2302      	movs	r3, #2
 800401c:	e089      	b.n	8004132 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004026:	2300      	movs	r3, #0
 8004028:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800402a:	2300      	movs	r3, #0
 800402c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a42      	ldr	r2, [pc, #264]	@ (800413c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d102      	bne.n	800403e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004038:	4b41      	ldr	r3, [pc, #260]	@ (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	e001      	b.n	8004042 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10b      	bne.n	8004060 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404c:	f043 0220 	orr.w	r2, r3, #32
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e068      	b.n	8004132 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff ff57 	bl	8003f16 <LL_ADC_REG_IsConversionOngoing>
 8004068:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff ff51 	bl	8003f16 <LL_ADC_REG_IsConversionOngoing>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d14a      	bne.n	8004110 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800407a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800407c:	2b00      	cmp	r3, #0
 800407e:	d147      	bne.n	8004110 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004080:	4b30      	ldr	r3, [pc, #192]	@ (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004082:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d027      	beq.n	80040dc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800408c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	6859      	ldr	r1, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800409e:	035b      	lsls	r3, r3, #13
 80040a0:	430b      	orrs	r3, r1
 80040a2:	431a      	orrs	r2, r3
 80040a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040a8:	4824      	ldr	r0, [pc, #144]	@ (800413c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80040aa:	f7ff fef4 	bl	8003e96 <LL_ADC_IsEnabled>
 80040ae:	4604      	mov	r4, r0
 80040b0:	4823      	ldr	r0, [pc, #140]	@ (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80040b2:	f7ff fef0 	bl	8003e96 <LL_ADC_IsEnabled>
 80040b6:	4603      	mov	r3, r0
 80040b8:	4323      	orrs	r3, r4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d132      	bne.n	8004124 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80040c6:	f023 030f 	bic.w	r3, r3, #15
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	6811      	ldr	r1, [r2, #0]
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	6892      	ldr	r2, [r2, #8]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	431a      	orrs	r2, r3
 80040d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040d8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040da:	e023      	b.n	8004124 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040e8:	4814      	ldr	r0, [pc, #80]	@ (800413c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80040ea:	f7ff fed4 	bl	8003e96 <LL_ADC_IsEnabled>
 80040ee:	4604      	mov	r4, r0
 80040f0:	4813      	ldr	r0, [pc, #76]	@ (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80040f2:	f7ff fed0 	bl	8003e96 <LL_ADC_IsEnabled>
 80040f6:	4603      	mov	r3, r0
 80040f8:	4323      	orrs	r3, r4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d112      	bne.n	8004124 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80040fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004106:	f023 030f 	bic.w	r3, r3, #15
 800410a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800410c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800410e:	e009      	b.n	8004124 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004122:	e000      	b.n	8004126 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004124:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800412e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004132:	4618      	mov	r0, r3
 8004134:	3784      	adds	r7, #132	@ 0x84
 8004136:	46bd      	mov	sp, r7
 8004138:	bd90      	pop	{r4, r7, pc}
 800413a:	bf00      	nop
 800413c:	42028000 	.word	0x42028000
 8004140:	42028100 	.word	0x42028100
 8004144:	42028300 	.word	0x42028300

08004148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004158:	4b0c      	ldr	r3, [pc, #48]	@ (800418c <__NVIC_SetPriorityGrouping+0x44>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004164:	4013      	ands	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800417a:	4a04      	ldr	r2, [pc, #16]	@ (800418c <__NVIC_SetPriorityGrouping+0x44>)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	60d3      	str	r3, [r2, #12]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	e000ed00 	.word	0xe000ed00

08004190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004194:	4b04      	ldr	r3, [pc, #16]	@ (80041a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	f003 0307 	and.w	r3, r3, #7
}
 800419e:	4618      	mov	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	db0b      	blt.n	80041d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	f003 021f 	and.w	r2, r3, #31
 80041c4:	4907      	ldr	r1, [pc, #28]	@ (80041e4 <__NVIC_EnableIRQ+0x38>)
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2001      	movs	r0, #1
 80041ce:	fa00 f202 	lsl.w	r2, r0, r2
 80041d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	e000e100 	.word	0xe000e100

080041e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	6039      	str	r1, [r7, #0]
 80041f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	db0a      	blt.n	8004212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	490c      	ldr	r1, [pc, #48]	@ (8004234 <__NVIC_SetPriority+0x4c>)
 8004202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004206:	0152      	lsls	r2, r2, #5
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	440b      	add	r3, r1
 800420c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004210:	e00a      	b.n	8004228 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	b2da      	uxtb	r2, r3
 8004216:	4908      	ldr	r1, [pc, #32]	@ (8004238 <__NVIC_SetPriority+0x50>)
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	3b04      	subs	r3, #4
 8004220:	0152      	lsls	r2, r2, #5
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	440b      	add	r3, r1
 8004226:	761a      	strb	r2, [r3, #24]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	e000e100 	.word	0xe000e100
 8004238:	e000ed00 	.word	0xe000ed00

0800423c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	@ 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f1c3 0307 	rsb	r3, r3, #7
 8004256:	2b03      	cmp	r3, #3
 8004258:	bf28      	it	cs
 800425a:	2303      	movcs	r3, #3
 800425c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	3303      	adds	r3, #3
 8004262:	2b06      	cmp	r3, #6
 8004264:	d902      	bls.n	800426c <NVIC_EncodePriority+0x30>
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	3b04      	subs	r3, #4
 800426a:	e000      	b.n	800426e <NVIC_EncodePriority+0x32>
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004270:	f04f 32ff 	mov.w	r2, #4294967295
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	43da      	mvns	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	401a      	ands	r2, r3
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004284:	f04f 31ff 	mov.w	r1, #4294967295
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	fa01 f303 	lsl.w	r3, r1, r3
 800428e:	43d9      	mvns	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004294:	4313      	orrs	r3, r2
         );
}
 8004296:	4618      	mov	r0, r3
 8004298:	3724      	adds	r7, #36	@ 0x24
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042b4:	d301      	bcc.n	80042ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042b6:	2301      	movs	r3, #1
 80042b8:	e00f      	b.n	80042da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ba:	4a0a      	ldr	r2, [pc, #40]	@ (80042e4 <SysTick_Config+0x40>)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3b01      	subs	r3, #1
 80042c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042c2:	2107      	movs	r1, #7
 80042c4:	f04f 30ff 	mov.w	r0, #4294967295
 80042c8:	f7ff ff8e 	bl	80041e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042cc:	4b05      	ldr	r3, [pc, #20]	@ (80042e4 <SysTick_Config+0x40>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042d2:	4b04      	ldr	r3, [pc, #16]	@ (80042e4 <SysTick_Config+0x40>)
 80042d4:	2207      	movs	r2, #7
 80042d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	e000e010 	.word	0xe000e010

080042e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff ff29 	bl	8004148 <__NVIC_SetPriorityGrouping>
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b086      	sub	sp, #24
 8004302:	af00      	add	r7, sp, #0
 8004304:	4603      	mov	r3, r0
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	607a      	str	r2, [r7, #4]
 800430a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800430c:	f7ff ff40 	bl	8004190 <__NVIC_GetPriorityGrouping>
 8004310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	6978      	ldr	r0, [r7, #20]
 8004318:	f7ff ff90 	bl	800423c <NVIC_EncodePriority>
 800431c:	4602      	mov	r2, r0
 800431e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff ff5f 	bl	80041e8 <__NVIC_SetPriority>
}
 800432a:	bf00      	nop
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	4603      	mov	r3, r0
 800433a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800433c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff ff33 	bl	80041ac <__NVIC_EnableIRQ>
}
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff ffa4 	bl	80042a4 <SysTick_Config>
 800435c:	4603      	mov	r3, r0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d008      	beq.n	8004390 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2204      	movs	r2, #4
 8004382:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e040      	b.n	8004412 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 020e 	bic.w	r2, r2, #14
 800439e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0201 	bic.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c4:	f003 021c 	and.w	r2, r3, #28
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043cc:	2101      	movs	r1, #1
 80043ce:	fa01 f202 	lsl.w	r2, r1, r2
 80043d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80043dc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00c      	beq.n	8004400 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80043fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d005      	beq.n	8004442 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2204      	movs	r2, #4
 800443a:	645a      	str	r2, [r3, #68]	@ 0x44

    status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
 8004440:	e047      	b.n	80044d2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 020e 	bic.w	r2, r2, #14
 8004450:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0201 	bic.w	r2, r2, #1
 8004460:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800446c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004470:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004476:	f003 021c 	and.w	r2, r3, #28
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800447e:	2101      	movs	r1, #1
 8004480:	fa01 f202 	lsl.w	r2, r1, r2
 8004484:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800448e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00c      	beq.n	80044b2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80044b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	4798      	blx	r3
    }
  }
  return status;
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_FLASH_Program>:
  *                This parameter is the data for the double word program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	e9c7 2300 	strd	r2, r3, [r7]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80044ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004558 <HAL_FLASH_Program+0x7c>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_FLASH_Program+0x1a>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e02c      	b.n	8004550 <HAL_FLASH_Program+0x74>
 80044f6:	4b18      	ldr	r3, [pc, #96]	@ (8004558 <HAL_FLASH_Program+0x7c>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044fc:	4b16      	ldr	r3, [pc, #88]	@ (8004558 <HAL_FLASH_Program+0x7c>)
 80044fe:	2200      	movs	r2, #0
 8004500:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004502:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004506:	f000 f867 	bl	80045d8 <FLASH_WaitForLastOperation>
 800450a:	4603      	mov	r3, r0
 800450c:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800450e:	7dfb      	ldrb	r3, [r7, #23]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d119      	bne.n	8004548 <HAL_FLASH_Program+0x6c>
  {
    pFlash.ProcedureOnGoing = TypeProgram;
 8004514:	4a10      	ldr	r2, [pc, #64]	@ (8004558 <HAL_FLASH_Program+0x7c>)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6093      	str	r3, [r2, #8]
    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800451a:	4b10      	ldr	r3, [pc, #64]	@ (800455c <HAL_FLASH_Program+0x80>)
 800451c:	613b      	str	r3, [r7, #16]

    /* Program double-word (64-bit) at a specified address */
    FLASH_Program_DoubleWord(Address, Data);
 800451e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004522:	68b8      	ldr	r0, [r7, #8]
 8004524:	f000 f8a0 	bl	8004668 <FLASH_Program_DoubleWord>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004528:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800452c:	f000 f854 	bl	80045d8 <FLASH_WaitForLastOperation>
 8004530:	4603      	mov	r3, r0
 8004532:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4b07      	ldr	r3, [pc, #28]	@ (8004558 <HAL_FLASH_Program+0x7c>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004540:	43db      	mvns	r3, r3
 8004542:	401a      	ands	r2, r3
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004548:	4b03      	ldr	r3, [pc, #12]	@ (8004558 <HAL_FLASH_Program+0x7c>)
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]

  return status;
 800454e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20000010 	.word	0x20000010
 800455c:	40022028 	.word	0x40022028

08004560 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 800456a:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <HAL_FLASH_Unlock+0x38>)
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	2b00      	cmp	r3, #0
 8004570:	da0b      	bge.n	800458a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8004572:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <HAL_FLASH_Unlock+0x38>)
 8004574:	4a09      	ldr	r2, [pc, #36]	@ (800459c <HAL_FLASH_Unlock+0x3c>)
 8004576:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8004578:	4b07      	ldr	r3, [pc, #28]	@ (8004598 <HAL_FLASH_Unlock+0x38>)
 800457a:	4a09      	ldr	r2, [pc, #36]	@ (80045a0 <HAL_FLASH_Unlock+0x40>)
 800457c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 800457e:	4b06      	ldr	r3, [pc, #24]	@ (8004598 <HAL_FLASH_Unlock+0x38>)
 8004580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004582:	2b00      	cmp	r3, #0
 8004584:	da01      	bge.n	800458a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif

  return status;
 800458a:	79fb      	ldrb	r3, [r7, #7]
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	40022000 	.word	0x40022000
 800459c:	45670123 	.word	0x45670123
 80045a0:	cdef89ab 	.word	0xcdef89ab

080045a4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK);
 80045ae:	4b09      	ldr	r3, [pc, #36]	@ (80045d4 <HAL_FLASH_Lock+0x30>)
 80045b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b2:	4a08      	ldr	r2, [pc, #32]	@ (80045d4 <HAL_FLASH_Lock+0x30>)
 80045b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80045b8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 80045ba:	4b06      	ldr	r3, [pc, #24]	@ (80045d4 <HAL_FLASH_Lock+0x30>)
 80045bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045be:	2b00      	cmp	r3, #0
 80045c0:	da01      	bge.n	80045c6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif

  return status;
 80045c6:	79fb      	ldrb	r3, [r7, #7]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	40022000 	.word	0x40022000

080045d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 80045e0:	f7fe f93a 	bl	8002858 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
  uint32_t error;
  __IO uint32_t *reg_sr;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80045ec:	e00b      	b.n	8004606 <FLASH_WaitForLastOperation+0x2e>
  {
    if(Timeout != HAL_MAX_DELAY)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d007      	beq.n	8004606 <FLASH_WaitForLastOperation+0x2e>
    {
      if(HAL_GetTick() >= timeout)
 80045f6:	f7fe f92f 	bl	8002858 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	4293      	cmp	r3, r2
 8004600:	d801      	bhi.n	8004606 <FLASH_WaitForLastOperation+0x2e>
      {
        return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e025      	b.n	8004652 <FLASH_WaitForLastOperation+0x7a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004606:	4b15      	ldr	r3, [pc, #84]	@ (800465c <FLASH_WaitForLastOperation+0x84>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1ed      	bne.n	80045ee <FLASH_WaitForLastOperation+0x16>
      }
    }
  }
  
  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8004612:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <FLASH_WaitForLastOperation+0x88>)
 8004614:	613b      	str	r3, [r7, #16]

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	f242 03fa 	movw	r3, #8442	@ 0x20fa
 800461e:	4013      	ands	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */ 

  if(error != 0u)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <FLASH_WaitForLastOperation+0x66>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004628:	4b0e      	ldr	r3, [pc, #56]	@ (8004664 <FLASH_WaitForLastOperation+0x8c>)
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	4a0c      	ldr	r2, [pc, #48]	@ (8004664 <FLASH_WaitForLastOperation+0x8c>)
 8004632:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    (*reg_sr) = error;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e009      	b.n	8004652 <FLASH_WaitForLastOperation+0x7a>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <FLASH_WaitForLastOperation+0x78>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2201      	movs	r2, #1
 800464e:	601a      	str	r2, [r3, #0]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40022000 	.word	0x40022000
 8004660:	40022020 	.word	0x40022020
 8004664:	20000010 	.word	0x20000010

08004668 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004668:	b480      	push	{r7}
 800466a:	b089      	sub	sp, #36	@ 0x24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	e9c7 2300 	strd	r2, r3, [r7]
  __IO uint32_t *reg;
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8004674:	4b16      	ldr	r3, [pc, #88]	@ (80046d0 <FLASH_Program_DoubleWord+0x68>)
 8004676:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004678:	f3ef 8310 	mrs	r3, PRIMASK
 800467c:	613b      	str	r3, [r7, #16]
  return(result);
 800467e:	693b      	ldr	r3, [r7, #16]

  /* Disable interrupts to avoid any interruption during the double word programming */
  primask_bit = __get_PRIMASK();
 8004680:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8004682:	b672      	cpsid	i
}
 8004684:	bf00      	nop
  __disable_irq();

  /* Set PG bit */
  SET_BIT((*reg), FLASH_NSCR_NSPG);
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f043 0201 	orr.w	r2, r3, #1
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	601a      	str	r2, [r3, #0]

  /* Program first word */
  *(uint32_t*)Address = (uint32_t)Data;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004698:	f3bf 8f6f 	isb	sy
}
 800469c:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t*)(Address+4U) = (uint32_t)(Data >> 32U);
 800469e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	000a      	movs	r2, r1
 80046ac:	2300      	movs	r3, #0
 80046ae:	68f9      	ldr	r1, [r7, #12]
 80046b0:	3104      	adds	r1, #4
 80046b2:	4613      	mov	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f383 8810 	msr	PRIMASK, r3
}
 80046c0:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80046c2:	bf00      	nop
 80046c4:	3724      	adds	r7, #36	@ 0x24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40022028 	.word	0x40022028

080046d4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80046de:	4b33      	ldr	r3, [pc, #204]	@ (80047ac <HAL_FLASHEx_Erase+0xd8>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <HAL_FLASHEx_Erase+0x16>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e05c      	b.n	80047a4 <HAL_FLASHEx_Erase+0xd0>
 80046ea:	4b30      	ldr	r3, [pc, #192]	@ (80047ac <HAL_FLASHEx_Erase+0xd8>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80046f0:	4b2e      	ldr	r3, [pc, #184]	@ (80047ac <HAL_FLASHEx_Erase+0xd8>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046fa:	f7ff ff6d 	bl	80045d8 <FLASH_WaitForLastOperation>
 80046fe:	4603      	mov	r3, r0
 8004700:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d149      	bne.n	800479c <HAL_FLASHEx_Erase+0xc8>
  {
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a27      	ldr	r2, [pc, #156]	@ (80047ac <HAL_FLASHEx_Erase+0xd8>)
 800470e:	6093      	str	r3, [r2, #8]

    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8004710:	4b27      	ldr	r3, [pc, #156]	@ (80047b0 <HAL_FLASHEx_Erase+0xdc>)
 8004712:	60fb      	str	r3, [r7, #12]

    if ((pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8004714:	4b25      	ldr	r3, [pc, #148]	@ (80047ac <HAL_FLASHEx_Erase+0xd8>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800471c:	f248 0204 	movw	r2, #32772	@ 0x8004
 8004720:	4293      	cmp	r3, r2
 8004722:	d10b      	bne.n	800473c <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4618      	mov	r0, r3
 800472a:	f000 f843 	bl	80047b4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800472e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004732:	f7ff ff51 	bl	80045d8 <FLASH_WaitForLastOperation>
 8004736:	4603      	mov	r3, r0
 8004738:	75fb      	strb	r3, [r7, #23]
 800473a:	e025      	b.n	8004788 <HAL_FLASHEx_Erase+0xb4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	f04f 32ff 	mov.w	r2, #4294967295
 8004742:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	e015      	b.n	8004778 <HAL_FLASHEx_Erase+0xa4>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4619      	mov	r1, r3
 8004752:	6938      	ldr	r0, [r7, #16]
 8004754:	f000 f86a 	bl	800482c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004758:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800475c:	f7ff ff3c 	bl	80045d8 <FLASH_WaitForLastOperation>
 8004760:	4603      	mov	r3, r0
 8004762:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_FLASHEx_Erase+0x9e>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	601a      	str	r2, [r3, #0]
          break;
 8004770:	e00a      	b.n	8004788 <HAL_FLASHEx_Erase+0xb4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	3301      	adds	r3, #1
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4413      	add	r3, r2
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	429a      	cmp	r2, r3
 8004786:	d3e1      	bcc.n	800474c <HAL_FLASHEx_Erase+0x78>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4b07      	ldr	r3, [pc, #28]	@ (80047ac <HAL_FLASHEx_Erase+0xd8>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004794:	43db      	mvns	r3, r3
 8004796:	401a      	ands	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800479c:	4b03      	ldr	r3, [pc, #12]	@ (80047ac <HAL_FLASHEx_Erase+0xd8>)
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]

  return status;
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20000010 	.word	0x20000010
 80047b0:	40022028 	.word	0x40022028

080047b4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  primask_bit = __get_PRIMASK();
  __disable_irq();
#endif
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80047bc:	4b19      	ldr	r3, [pc, #100]	@ (8004824 <FLASH_MassErase+0x70>)
 80047be:	60fb      	str	r3, [r7, #12]

  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 80047c0:	4b19      	ldr	r3, [pc, #100]	@ (8004828 <FLASH_MassErase+0x74>)
 80047c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d016      	beq.n	80047fa <FLASH_MassErase+0x46>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <FLASH_MassErase+0x2e>
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER1);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f043 0204 	orr.w	r2, r3, #4
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	601a      	str	r2, [r3, #0]
    }

    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00e      	beq.n	800480a <FLASH_MassErase+0x56>
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER2);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e007      	b.n	800480a <FLASH_MassErase+0x56>
    }
  }
  else
  {
    SET_BIT((*reg), (FLASH_NSCR_NSMER1 | FLASH_NSCR_NSMER2));
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004802:	f043 0304 	orr.w	r3, r3, #4
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	6013      	str	r3, [r2, #0]
  }

  /* Proceed to erase all sectors */
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40022028 	.word	0x40022028
 8004828:	40022000 	.word	0x40022000

0800482c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  primask_bit = __get_PRIMASK();
  __disable_irq();
#endif

  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8004836:	4b1d      	ldr	r3, [pc, #116]	@ (80048ac <FLASH_PageErase+0x80>)
 8004838:	60fb      	str	r3, [r7, #12]

  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800483a:	4b1d      	ldr	r3, [pc, #116]	@ (80048b0 <FLASH_PageErase+0x84>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <FLASH_PageErase+0x28>
  {
    CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e011      	b.n	8004878 <FLASH_PageErase+0x4c>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d006      	beq.n	800486c <FLASH_PageErase+0x40>
    {
      CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e005      	b.n	8004878 <FLASH_PageErase+0x4c>
    }
    else
    {
      SET_BIT((*reg), FLASH_NSCR_NSBKER);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	601a      	str	r2, [r3, #0]
    }
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg), (FLASH_NSCR_NSPNB | FLASH_NSCR_NSPER), ((Page << FLASH_NSCR_NSPNB_Pos) | FLASH_NSCR_NSPER));
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8004880:	f023 0302 	bic.w	r3, r3, #2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	00d2      	lsls	r2, r2, #3
 8004888:	4313      	orrs	r3, r2
 800488a:	f043 0202 	orr.w	r2, r3, #2
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	601a      	str	r2, [r3, #0]
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40022028 	.word	0x40022028
 80048b0:	40022000 	.word	0x40022000

080048b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048c2:	e158      	b.n	8004b76 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	2101      	movs	r1, #1
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	fa01 f303 	lsl.w	r3, r1, r3
 80048d0:	4013      	ands	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 814a 	beq.w	8004b70 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d005      	beq.n	80048f4 <HAL_GPIO_Init+0x40>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d130      	bne.n	8004956 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	2203      	movs	r2, #3
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4013      	ands	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800492a:	2201      	movs	r2, #1
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43db      	mvns	r3, r3
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4013      	ands	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	091b      	lsrs	r3, r3, #4
 8004940:	f003 0201 	and.w	r2, r3, #1
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	2b03      	cmp	r3, #3
 8004960:	d017      	beq.n	8004992 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	2203      	movs	r2, #3
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4013      	ands	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d123      	bne.n	80049e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	08da      	lsrs	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3208      	adds	r2, #8
 80049a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	220f      	movs	r2, #15
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4013      	ands	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	08da      	lsrs	r2, r3, #3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3208      	adds	r2, #8
 80049e0:	6939      	ldr	r1, [r7, #16]
 80049e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	2203      	movs	r2, #3
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43db      	mvns	r3, r3
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4013      	ands	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f003 0203 	and.w	r2, r3, #3
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 80a4 	beq.w	8004b70 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8004a28:	4a5a      	ldr	r2, [pc, #360]	@ (8004b94 <HAL_GPIO_Init+0x2e0>)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	089b      	lsrs	r3, r3, #2
 8004a2e:	3318      	adds	r3, #24
 8004a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a34:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	220f      	movs	r2, #15
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a52      	ldr	r2, [pc, #328]	@ (8004b98 <HAL_GPIO_Init+0x2e4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d025      	beq.n	8004aa0 <HAL_GPIO_Init+0x1ec>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a51      	ldr	r2, [pc, #324]	@ (8004b9c <HAL_GPIO_Init+0x2e8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d01f      	beq.n	8004a9c <HAL_GPIO_Init+0x1e8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a50      	ldr	r2, [pc, #320]	@ (8004ba0 <HAL_GPIO_Init+0x2ec>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d019      	beq.n	8004a98 <HAL_GPIO_Init+0x1e4>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a4f      	ldr	r2, [pc, #316]	@ (8004ba4 <HAL_GPIO_Init+0x2f0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d013      	beq.n	8004a94 <HAL_GPIO_Init+0x1e0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a4e      	ldr	r2, [pc, #312]	@ (8004ba8 <HAL_GPIO_Init+0x2f4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00d      	beq.n	8004a90 <HAL_GPIO_Init+0x1dc>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a4d      	ldr	r2, [pc, #308]	@ (8004bac <HAL_GPIO_Init+0x2f8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d007      	beq.n	8004a8c <HAL_GPIO_Init+0x1d8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a4c      	ldr	r2, [pc, #304]	@ (8004bb0 <HAL_GPIO_Init+0x2fc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d101      	bne.n	8004a88 <HAL_GPIO_Init+0x1d4>
 8004a84:	2306      	movs	r3, #6
 8004a86:	e00c      	b.n	8004aa2 <HAL_GPIO_Init+0x1ee>
 8004a88:	2307      	movs	r3, #7
 8004a8a:	e00a      	b.n	8004aa2 <HAL_GPIO_Init+0x1ee>
 8004a8c:	2305      	movs	r3, #5
 8004a8e:	e008      	b.n	8004aa2 <HAL_GPIO_Init+0x1ee>
 8004a90:	2304      	movs	r3, #4
 8004a92:	e006      	b.n	8004aa2 <HAL_GPIO_Init+0x1ee>
 8004a94:	2303      	movs	r3, #3
 8004a96:	e004      	b.n	8004aa2 <HAL_GPIO_Init+0x1ee>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e002      	b.n	8004aa2 <HAL_GPIO_Init+0x1ee>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <HAL_GPIO_Init+0x1ee>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	f002 0203 	and.w	r2, r2, #3
 8004aa8:	00d2      	lsls	r2, r2, #3
 8004aaa:	4093      	lsls	r3, r2
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004ab2:	4938      	ldr	r1, [pc, #224]	@ (8004b94 <HAL_GPIO_Init+0x2e0>)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	089b      	lsrs	r3, r3, #2
 8004ab8:	3318      	adds	r3, #24
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ac0:	4b34      	ldr	r3, [pc, #208]	@ (8004b94 <HAL_GPIO_Init+0x2e0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4013      	ands	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8004b94 <HAL_GPIO_Init+0x2e0>)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004aea:	4b2a      	ldr	r3, [pc, #168]	@ (8004b94 <HAL_GPIO_Init+0x2e0>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	43db      	mvns	r3, r3
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4013      	ands	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b0e:	4a21      	ldr	r2, [pc, #132]	@ (8004b94 <HAL_GPIO_Init+0x2e0>)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004b14:	4b1f      	ldr	r3, [pc, #124]	@ (8004b94 <HAL_GPIO_Init+0x2e0>)
 8004b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4013      	ands	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b3a:	4a16      	ldr	r2, [pc, #88]	@ (8004b94 <HAL_GPIO_Init+0x2e0>)
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8004b42:	4b14      	ldr	r3, [pc, #80]	@ (8004b94 <HAL_GPIO_Init+0x2e0>)
 8004b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4013      	ands	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b68:	4a0a      	ldr	r2, [pc, #40]	@ (8004b94 <HAL_GPIO_Init+0x2e0>)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	3301      	adds	r3, #1
 8004b74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f47f ae9f 	bne.w	80048c4 <HAL_GPIO_Init+0x10>
  }
}
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	4002f400 	.word	0x4002f400
 8004b98:	42020000 	.word	0x42020000
 8004b9c:	42020400 	.word	0x42020400
 8004ba0:	42020800 	.word	0x42020800
 8004ba4:	42020c00 	.word	0x42020c00
 8004ba8:	42021000 	.word	0x42021000
 8004bac:	42021400 	.word	0x42021400
 8004bb0:	42021800 	.word	0x42021800

08004bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	807b      	strh	r3, [r7, #2]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bc4:	787b      	ldrb	r3, [r7, #1]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bca:	887a      	ldrh	r2, [r7, #2]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bd0:	e002      	b.n	8004bd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bd2:	887a      	ldrh	r2, [r7, #2]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bf6:	887a      	ldrh	r2, [r7, #2]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	041a      	lsls	r2, r3, #16
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	43d9      	mvns	r1, r3
 8004c02:	887b      	ldrh	r3, [r7, #2]
 8004c04:	400b      	ands	r3, r1
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	619a      	str	r2, [r3, #24]
}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004c1c:	4b04      	ldr	r3, [pc, #16]	@ (8004c30 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40007000 	.word	0x40007000

08004c34 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8004c3c:	4b27      	ldr	r3, [pc, #156]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c44:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8004c46:	f000 f861 	bl	8004d0c <HAL_PWREx_SMPS_GetEffectiveMode>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c50:	d101      	bne.n	8004c56 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e03e      	b.n	8004cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8004c56:	4b21      	ldr	r3, [pc, #132]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c62:	d101      	bne.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e035      	b.n	8004cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d101      	bne.n	8004c74 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	e02f      	b.n	8004cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004c74:	4b19      	ldr	r3, [pc, #100]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004c7c:	4917      	ldr	r1, [pc, #92]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004c84:	4b16      	ldr	r3, [pc, #88]	@ (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	4a16      	ldr	r2, [pc, #88]	@ (8004ce4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	09db      	lsrs	r3, r3, #7
 8004c92:	2232      	movs	r2, #50	@ 0x32
 8004c94:	fb02 f303 	mul.w	r3, r2, r3
 8004c98:	4a13      	ldr	r2, [pc, #76]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9e:	08db      	lsrs	r3, r3, #3
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ca4:	e002      	b.n	8004cac <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cac:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb8:	d102      	bne.n	8004cc0 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f2      	bne.n	8004ca6 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cc0:	4b06      	ldr	r3, [pc, #24]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ccc:	d101      	bne.n	8004cd2 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e000      	b.n	8004cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40007000 	.word	0x40007000
 8004ce0:	20000004 	.word	0x20000004
 8004ce4:	0a7c5ac5 	.word	0x0a7c5ac5
 8004ce8:	cccccccd 	.word	0xcccccccd

08004cec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004cf0:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	4a04      	ldr	r2, [pc, #16]	@ (8004d08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cfa:	6093      	str	r3, [r2, #8]
}
 8004cfc:	bf00      	nop
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40007000 	.word	0x40007000

08004d0c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8004d12:	4b0f      	ldr	r3, [pc, #60]	@ (8004d50 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8004d22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d26:	607b      	str	r3, [r7, #4]
 8004d28:	e00a      	b.n	8004d40 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d103      	bne.n	8004d3c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8004d34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	e001      	b.n	8004d40 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004d40:	687b      	ldr	r3, [r7, #4]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40007000 	.word	0x40007000

08004d54 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f000 bcc2 	b.w	80056ec <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d68:	4b99      	ldr	r3, [pc, #612]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 030c 	and.w	r3, r3, #12
 8004d70:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d72:	4b97      	ldr	r3, [pc, #604]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80e9 	beq.w	8004f5c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d006      	beq.n	8004d9e <HAL_RCC_OscConfig+0x4a>
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b0c      	cmp	r3, #12
 8004d94:	f040 8083 	bne.w	8004e9e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d17f      	bne.n	8004e9e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d9e:	4b8c      	ldr	r3, [pc, #560]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d006      	beq.n	8004db8 <HAL_RCC_OscConfig+0x64>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	f000 bc9a 	b.w	80056ec <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dbc:	4b84      	ldr	r3, [pc, #528]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d004      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x7e>
 8004dc8:	4b81      	ldr	r3, [pc, #516]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dd0:	e005      	b.n	8004dde <HAL_RCC_OscConfig+0x8a>
 8004dd2:	4b7f      	ldr	r3, [pc, #508]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dd8:	091b      	lsrs	r3, r3, #4
 8004dda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d224      	bcs.n	8004e2c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fe9a 	bl	8005b20 <RCC_SetFlashLatencyFromMSIRange>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f000 bc7a 	b.w	80056ec <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004df8:	4b75      	ldr	r3, [pc, #468]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a74      	ldr	r2, [pc, #464]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004dfe:	f043 0308 	orr.w	r3, r3, #8
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	4b72      	ldr	r3, [pc, #456]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	496f      	ldr	r1, [pc, #444]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e16:	4b6e      	ldr	r3, [pc, #440]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	021b      	lsls	r3, r3, #8
 8004e24:	496a      	ldr	r1, [pc, #424]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	604b      	str	r3, [r1, #4]
 8004e2a:	e026      	b.n	8004e7a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e2c:	4b68      	ldr	r3, [pc, #416]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a67      	ldr	r2, [pc, #412]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004e32:	f043 0308 	orr.w	r3, r3, #8
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	4b65      	ldr	r3, [pc, #404]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e44:	4962      	ldr	r1, [pc, #392]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e4a:	4b61      	ldr	r3, [pc, #388]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	495d      	ldr	r1, [pc, #372]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fe59 	bl	8005b20 <RCC_SetFlashLatencyFromMSIRange>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	f000 bc39 	b.w	80056ec <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e7a:	f000 fe15 	bl	8005aa8 <HAL_RCC_GetHCLKFreq>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4a54      	ldr	r2, [pc, #336]	@ (8004fd4 <HAL_RCC_OscConfig+0x280>)
 8004e82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e84:	4b54      	ldr	r3, [pc, #336]	@ (8004fd8 <HAL_RCC_OscConfig+0x284>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fd fc95 	bl	80027b8 <HAL_InitTick>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d060      	beq.n	8004f5a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	f000 bc27 	b.w	80056ec <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d039      	beq.n	8004f1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a49      	ldr	r2, [pc, #292]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004eb2:	f7fd fcd1 	bl	8002858 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eb8:	e00f      	b.n	8004eda <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004eba:	f7fd fccd 	bl	8002858 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d908      	bls.n	8004eda <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ec8:	4b41      	ldr	r3, [pc, #260]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	f000 bc09 	b.w	80056ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eda:	4b3d      	ldr	r3, [pc, #244]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0e9      	beq.n	8004eba <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a39      	ldr	r2, [pc, #228]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004eec:	f043 0308 	orr.w	r3, r3, #8
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	4b37      	ldr	r3, [pc, #220]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	4934      	ldr	r1, [pc, #208]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f04:	4b32      	ldr	r3, [pc, #200]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	492f      	ldr	r1, [pc, #188]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	604b      	str	r3, [r1, #4]
 8004f18:	e020      	b.n	8004f5c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2c      	ldr	r2, [pc, #176]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f26:	f7fd fc97 	bl	8002858 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f2c:	e00e      	b.n	8004f4c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f2e:	f7fd fc93 	bl	8002858 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d907      	bls.n	8004f4c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f3c:	4b24      	ldr	r3, [pc, #144]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e3cf      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f4c:	4b20      	ldr	r3, [pc, #128]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1ea      	bne.n	8004f2e <HAL_RCC_OscConfig+0x1da>
 8004f58:	e000      	b.n	8004f5c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d07e      	beq.n	8005066 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d005      	beq.n	8004f7a <HAL_RCC_OscConfig+0x226>
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b0c      	cmp	r3, #12
 8004f72:	d10e      	bne.n	8004f92 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d10b      	bne.n	8004f92 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7a:	4b15      	ldr	r3, [pc, #84]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d06e      	beq.n	8005064 <HAL_RCC_OscConfig+0x310>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d16a      	bne.n	8005064 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e3ac      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f9a:	d106      	bne.n	8004faa <HAL_RCC_OscConfig+0x256>
 8004f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	e024      	b.n	8004ff4 <HAL_RCC_OscConfig+0x2a0>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fb2:	d113      	bne.n	8004fdc <HAL_RCC_OscConfig+0x288>
 8004fb4:	4b06      	ldr	r3, [pc, #24]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a05      	ldr	r2, [pc, #20]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004fba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	4b03      	ldr	r3, [pc, #12]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a02      	ldr	r2, [pc, #8]	@ (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	e012      	b.n	8004ff4 <HAL_RCC_OscConfig+0x2a0>
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	20000004 	.word	0x20000004
 8004fd8:	20000008 	.word	0x20000008
 8004fdc:	4b8b      	ldr	r3, [pc, #556]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a8a      	ldr	r2, [pc, #552]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8004fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	4b88      	ldr	r3, [pc, #544]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a87      	ldr	r2, [pc, #540]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8004fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d019      	beq.n	8005030 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7fd fc2c 	bl	8002858 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005002:	e00e      	b.n	8005022 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005004:	f7fd fc28 	bl	8002858 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b64      	cmp	r3, #100	@ 0x64
 8005010:	d907      	bls.n	8005022 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005012:	4b7e      	ldr	r3, [pc, #504]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e364      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005022:	4b7a      	ldr	r3, [pc, #488]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0ea      	beq.n	8005004 <HAL_RCC_OscConfig+0x2b0>
 800502e:	e01a      	b.n	8005066 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fd fc12 	bl	8002858 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005036:	e00e      	b.n	8005056 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005038:	f7fd fc0e 	bl	8002858 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b64      	cmp	r3, #100	@ 0x64
 8005044:	d907      	bls.n	8005056 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005046:	4b71      	ldr	r3, [pc, #452]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e34a      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005056:	4b6d      	ldr	r3, [pc, #436]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1ea      	bne.n	8005038 <HAL_RCC_OscConfig+0x2e4>
 8005062:	e000      	b.n	8005066 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d06c      	beq.n	800514c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2b04      	cmp	r3, #4
 8005076:	d005      	beq.n	8005084 <HAL_RCC_OscConfig+0x330>
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	2b0c      	cmp	r3, #12
 800507c:	d119      	bne.n	80050b2 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d116      	bne.n	80050b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005084:	4b61      	ldr	r3, [pc, #388]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_RCC_OscConfig+0x348>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e327      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800509c:	4b5b      	ldr	r3, [pc, #364]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	061b      	lsls	r3, r3, #24
 80050aa:	4958      	ldr	r1, [pc, #352]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050b0:	e04c      	b.n	800514c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d029      	beq.n	800510e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050ba:	4b54      	ldr	r3, [pc, #336]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a53      	ldr	r2, [pc, #332]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 80050c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c6:	f7fd fbc7 	bl	8002858 <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050cc:	e00e      	b.n	80050ec <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ce:	f7fd fbc3 	bl	8002858 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d907      	bls.n	80050ec <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050dc:	4b4b      	ldr	r3, [pc, #300]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e2ff      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050ec:	4b47      	ldr	r3, [pc, #284]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0ea      	beq.n	80050ce <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f8:	4b44      	ldr	r3, [pc, #272]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	061b      	lsls	r3, r3, #24
 8005106:	4941      	ldr	r1, [pc, #260]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8005108:	4313      	orrs	r3, r2
 800510a:	604b      	str	r3, [r1, #4]
 800510c:	e01e      	b.n	800514c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800510e:	4b3f      	ldr	r3, [pc, #252]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a3e      	ldr	r2, [pc, #248]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8005114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511a:	f7fd fb9d 	bl	8002858 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005120:	e00e      	b.n	8005140 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005122:	f7fd fb99 	bl	8002858 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d907      	bls.n	8005140 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005130:	4b36      	ldr	r3, [pc, #216]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e2d5      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005140:	4b32      	ldr	r3, [pc, #200]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1ea      	bne.n	8005122 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d062      	beq.n	800521e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d038      	beq.n	80051d2 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d108      	bne.n	800517a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8005168:	4b28      	ldr	r3, [pc, #160]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 800516a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800516e:	4a27      	ldr	r2, [pc, #156]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8005170:	f023 0310 	bic.w	r3, r3, #16
 8005174:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005178:	e007      	b.n	800518a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800517a:	4b24      	ldr	r3, [pc, #144]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 800517c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005180:	4a22      	ldr	r2, [pc, #136]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8005182:	f043 0310 	orr.w	r3, r3, #16
 8005186:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800518a:	4b20      	ldr	r3, [pc, #128]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 800518c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005190:	4a1e      	ldr	r2, [pc, #120]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 8005192:	f043 0301 	orr.w	r3, r3, #1
 8005196:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519a:	f7fd fb5d 	bl	8002858 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051a0:	e00f      	b.n	80051c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a2:	f7fd fb59 	bl	8002858 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b07      	cmp	r3, #7
 80051ae:	d908      	bls.n	80051c2 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051b0:	4b16      	ldr	r3, [pc, #88]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 80051b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e294      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051c2:	4b12      	ldr	r3, [pc, #72]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 80051c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0e8      	beq.n	80051a2 <HAL_RCC_OscConfig+0x44e>
 80051d0:	e025      	b.n	800521e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051d2:	4b0e      	ldr	r3, [pc, #56]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 80051d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051d8:	4a0c      	ldr	r2, [pc, #48]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 80051da:	f023 0301 	bic.w	r3, r3, #1
 80051de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e2:	f7fd fb39 	bl	8002858 <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051e8:	e012      	b.n	8005210 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ea:	f7fd fb35 	bl	8002858 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b07      	cmp	r3, #7
 80051f6:	d90b      	bls.n	8005210 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051f8:	4b04      	ldr	r3, [pc, #16]	@ (800520c <HAL_RCC_OscConfig+0x4b8>)
 80051fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d004      	beq.n	8005210 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e270      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
 800520a:	bf00      	nop
 800520c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005210:	4ba8      	ldr	r3, [pc, #672]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005212:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e5      	bne.n	80051ea <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 812d 	beq.w	8005486 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522c:	2300      	movs	r3, #0
 800522e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005230:	4ba0      	ldr	r3, [pc, #640]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10d      	bne.n	8005258 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800523c:	4b9d      	ldr	r3, [pc, #628]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 800523e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005240:	4a9c      	ldr	r2, [pc, #624]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005242:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005246:	6593      	str	r3, [r2, #88]	@ 0x58
 8005248:	4b9a      	ldr	r3, [pc, #616]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 800524a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800524c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005254:	2301      	movs	r3, #1
 8005256:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005258:	4b97      	ldr	r3, [pc, #604]	@ (80054b8 <HAL_RCC_OscConfig+0x764>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d11e      	bne.n	80052a2 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005264:	4b94      	ldr	r3, [pc, #592]	@ (80054b8 <HAL_RCC_OscConfig+0x764>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a93      	ldr	r2, [pc, #588]	@ (80054b8 <HAL_RCC_OscConfig+0x764>)
 800526a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800526e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005270:	f7fd faf2 	bl	8002858 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005276:	e00e      	b.n	8005296 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005278:	f7fd faee 	bl	8002858 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d907      	bls.n	8005296 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005286:	4b8c      	ldr	r3, [pc, #560]	@ (80054b8 <HAL_RCC_OscConfig+0x764>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e22a      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005296:	4b88      	ldr	r3, [pc, #544]	@ (80054b8 <HAL_RCC_OscConfig+0x764>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0ea      	beq.n	8005278 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d01f      	beq.n	80052ee <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d010      	beq.n	80052dc <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80052ba:	4b7e      	ldr	r3, [pc, #504]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c0:	4a7c      	ldr	r2, [pc, #496]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 80052c2:	f043 0304 	orr.w	r3, r3, #4
 80052c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052ca:	4b7a      	ldr	r3, [pc, #488]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 80052cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d0:	4a78      	ldr	r2, [pc, #480]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052da:	e018      	b.n	800530e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052dc:	4b75      	ldr	r3, [pc, #468]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e2:	4a74      	ldr	r2, [pc, #464]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052ec:	e00f      	b.n	800530e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052ee:	4b71      	ldr	r3, [pc, #452]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 80052f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f4:	4a6f      	ldr	r2, [pc, #444]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 80052f6:	f023 0301 	bic.w	r3, r3, #1
 80052fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80052fe:	4b6d      	ldr	r3, [pc, #436]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005304:	4a6b      	ldr	r2, [pc, #428]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005306:	f023 0304 	bic.w	r3, r3, #4
 800530a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d068      	beq.n	80053e8 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005316:	f7fd fa9f 	bl	8002858 <HAL_GetTick>
 800531a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531c:	e011      	b.n	8005342 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800531e:	f7fd fa9b 	bl	8002858 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800532c:	4293      	cmp	r3, r2
 800532e:	d908      	bls.n	8005342 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005330:	4b60      	ldr	r3, [pc, #384]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e1d4      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005342:	4b5c      	ldr	r3, [pc, #368]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0e6      	beq.n	800531e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005358:	2b00      	cmp	r3, #0
 800535a:	d022      	beq.n	80053a2 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800535c:	4b55      	ldr	r3, [pc, #340]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005362:	4a54      	ldr	r2, [pc, #336]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800536c:	e011      	b.n	8005392 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536e:	f7fd fa73 	bl	8002858 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800537c:	4293      	cmp	r3, r2
 800537e:	d908      	bls.n	8005392 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005380:	4b4c      	ldr	r3, [pc, #304]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005386:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e1ac      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005392:	4b48      	ldr	r3, [pc, #288]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0e6      	beq.n	800536e <HAL_RCC_OscConfig+0x61a>
 80053a0:	e068      	b.n	8005474 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80053a2:	4b44      	ldr	r3, [pc, #272]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 80053a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a8:	4a42      	ldr	r2, [pc, #264]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 80053aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053b2:	e011      	b.n	80053d8 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b4:	f7fd fa50 	bl	8002858 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d908      	bls.n	80053d8 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053c6:	4b3b      	ldr	r3, [pc, #236]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e189      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053d8:	4b36      	ldr	r3, [pc, #216]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e6      	bne.n	80053b4 <HAL_RCC_OscConfig+0x660>
 80053e6:	e045      	b.n	8005474 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e8:	f7fd fa36 	bl	8002858 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053ee:	e011      	b.n	8005414 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f0:	f7fd fa32 	bl	8002858 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053fe:	4293      	cmp	r3, r2
 8005400:	d908      	bls.n	8005414 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005402:	4b2c      	ldr	r3, [pc, #176]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e16b      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005414:	4b27      	ldr	r3, [pc, #156]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e6      	bne.n	80053f0 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005422:	4b24      	ldr	r3, [pc, #144]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800542c:	2b00      	cmp	r3, #0
 800542e:	d021      	beq.n	8005474 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005430:	4b20      	ldr	r3, [pc, #128]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005436:	4a1f      	ldr	r2, [pc, #124]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005438:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800543c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005440:	e011      	b.n	8005466 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005442:	f7fd fa09 	bl	8002858 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005450:	4293      	cmp	r3, r2
 8005452:	d908      	bls.n	8005466 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005454:	4b17      	ldr	r3, [pc, #92]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800545a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e142      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005466:	4b13      	ldr	r3, [pc, #76]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800546c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e6      	bne.n	8005442 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005474:	7ffb      	ldrb	r3, [r7, #31]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d105      	bne.n	8005486 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800547a:	4b0e      	ldr	r3, [pc, #56]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 800547c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547e:	4a0d      	ldr	r2, [pc, #52]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 8005480:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005484:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d04f      	beq.n	8005532 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005496:	2b00      	cmp	r3, #0
 8005498:	d028      	beq.n	80054ec <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800549a:	4b06      	ldr	r3, [pc, #24]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 800549c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054a0:	4a04      	ldr	r2, [pc, #16]	@ (80054b4 <HAL_RCC_OscConfig+0x760>)
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054aa:	f7fd f9d5 	bl	8002858 <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054b0:	e014      	b.n	80054dc <HAL_RCC_OscConfig+0x788>
 80054b2:	bf00      	nop
 80054b4:	40021000 	.word	0x40021000
 80054b8:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054bc:	f7fd f9cc 	bl	8002858 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d908      	bls.n	80054dc <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054ca:	4b8a      	ldr	r3, [pc, #552]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 80054cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e107      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054dc:	4b85      	ldr	r3, [pc, #532]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 80054de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0e8      	beq.n	80054bc <HAL_RCC_OscConfig+0x768>
 80054ea:	e022      	b.n	8005532 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054ec:	4b81      	ldr	r3, [pc, #516]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 80054ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054f2:	4a80      	ldr	r2, [pc, #512]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 80054f4:	f023 0301 	bic.w	r3, r3, #1
 80054f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fc:	f7fd f9ac 	bl	8002858 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005502:	e00f      	b.n	8005524 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005504:	f7fd f9a8 	bl	8002858 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d908      	bls.n	8005524 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005512:	4b78      	ldr	r3, [pc, #480]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 8005514:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e0e3      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005524:	4b73      	ldr	r3, [pc, #460]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 8005526:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e8      	bne.n	8005504 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 80d7 	beq.w	80056ea <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800553c:	4b6d      	ldr	r3, [pc, #436]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 030c 	and.w	r3, r3, #12
 8005544:	2b0c      	cmp	r3, #12
 8005546:	f000 8091 	beq.w	800566c <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	2b02      	cmp	r3, #2
 8005550:	d166      	bne.n	8005620 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005552:	4b68      	ldr	r3, [pc, #416]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a67      	ldr	r2, [pc, #412]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 8005558:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800555c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555e:	f7fd f97b 	bl	8002858 <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005564:	e00e      	b.n	8005584 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005566:	f7fd f977 	bl	8002858 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d907      	bls.n	8005584 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005574:	4b5f      	ldr	r3, [pc, #380]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e0b3      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005584:	4b5b      	ldr	r3, [pc, #364]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1ea      	bne.n	8005566 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005590:	4b58      	ldr	r3, [pc, #352]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	4b58      	ldr	r3, [pc, #352]	@ (80056f8 <HAL_RCC_OscConfig+0x9a4>)
 8005596:	4013      	ands	r3, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80055a0:	3a01      	subs	r2, #1
 80055a2:	0112      	lsls	r2, r2, #4
 80055a4:	4311      	orrs	r1, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80055aa:	0212      	lsls	r2, r2, #8
 80055ac:	4311      	orrs	r1, r2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80055b2:	0852      	lsrs	r2, r2, #1
 80055b4:	3a01      	subs	r2, #1
 80055b6:	0552      	lsls	r2, r2, #21
 80055b8:	4311      	orrs	r1, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80055be:	0852      	lsrs	r2, r2, #1
 80055c0:	3a01      	subs	r2, #1
 80055c2:	0652      	lsls	r2, r2, #25
 80055c4:	4311      	orrs	r1, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055ca:	06d2      	lsls	r2, r2, #27
 80055cc:	430a      	orrs	r2, r1
 80055ce:	4949      	ldr	r1, [pc, #292]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055d4:	4b47      	ldr	r3, [pc, #284]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a46      	ldr	r2, [pc, #280]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 80055da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055e0:	4b44      	ldr	r3, [pc, #272]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4a43      	ldr	r2, [pc, #268]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 80055e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ec:	f7fd f934 	bl	8002858 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055f2:	e00e      	b.n	8005612 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f4:	f7fd f930 	bl	8002858 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d907      	bls.n	8005612 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005602:	4b3c      	ldr	r3, [pc, #240]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e06c      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005612:	4b38      	ldr	r3, [pc, #224]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0ea      	beq.n	80055f4 <HAL_RCC_OscConfig+0x8a0>
 800561e:	e064      	b.n	80056ea <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005620:	4b34      	ldr	r3, [pc, #208]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a33      	ldr	r2, [pc, #204]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 8005626:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800562a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fd f914 	bl	8002858 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005632:	e00e      	b.n	8005652 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005634:	f7fd f910 	bl	8002858 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d907      	bls.n	8005652 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005642:	4b2c      	ldr	r3, [pc, #176]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e04c      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005652:	4b28      	ldr	r3, [pc, #160]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1ea      	bne.n	8005634 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800565e:	4b25      	ldr	r3, [pc, #148]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	4924      	ldr	r1, [pc, #144]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 8005664:	4b25      	ldr	r3, [pc, #148]	@ (80056fc <HAL_RCC_OscConfig+0x9a8>)
 8005666:	4013      	ands	r3, r2
 8005668:	60cb      	str	r3, [r1, #12]
 800566a:	e03e      	b.n	80056ea <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e039      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005678:	4b1e      	ldr	r3, [pc, #120]	@ (80056f4 <HAL_RCC_OscConfig+0x9a0>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f003 0203 	and.w	r2, r3, #3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005688:	429a      	cmp	r2, r3
 800568a:	d12c      	bne.n	80056e6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005696:	3b01      	subs	r3, #1
 8005698:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800569a:	429a      	cmp	r2, r3
 800569c:	d123      	bne.n	80056e6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a8:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d11b      	bne.n	80056e6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b8:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d113      	bne.n	80056e6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c8:	085b      	lsrs	r3, r3, #1
 80056ca:	3b01      	subs	r3, #1
 80056cc:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d109      	bne.n	80056e6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056dc:	085b      	lsrs	r3, r3, #1
 80056de:	3b01      	subs	r3, #1
 80056e0:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d001      	beq.n	80056ea <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3720      	adds	r7, #32
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40021000 	.word	0x40021000
 80056f8:	019f800c 	.word	0x019f800c
 80056fc:	feeefffc 	.word	0xfeeefffc

08005700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e11c      	b.n	8005952 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005718:	4b90      	ldr	r3, [pc, #576]	@ (800595c <HAL_RCC_ClockConfig+0x25c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d910      	bls.n	8005748 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005726:	4b8d      	ldr	r3, [pc, #564]	@ (800595c <HAL_RCC_ClockConfig+0x25c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f023 020f 	bic.w	r2, r3, #15
 800572e:	498b      	ldr	r1, [pc, #556]	@ (800595c <HAL_RCC_ClockConfig+0x25c>)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	4313      	orrs	r3, r2
 8005734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005736:	4b89      	ldr	r3, [pc, #548]	@ (800595c <HAL_RCC_ClockConfig+0x25c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d001      	beq.n	8005748 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e104      	b.n	8005952 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d010      	beq.n	8005776 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	4b81      	ldr	r3, [pc, #516]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005760:	429a      	cmp	r2, r3
 8005762:	d908      	bls.n	8005776 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005764:	4b7e      	ldr	r3, [pc, #504]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	497b      	ldr	r1, [pc, #492]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 8005772:	4313      	orrs	r3, r2
 8005774:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 8085 	beq.w	800588e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b03      	cmp	r3, #3
 800578a:	d11f      	bne.n	80057cc <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800578c:	4b74      	ldr	r3, [pc, #464]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0da      	b.n	8005952 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800579c:	f000 fa24 	bl	8005be8 <RCC_GetSysClockFreqFromPLLSource>
 80057a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4a6f      	ldr	r2, [pc, #444]	@ (8005964 <HAL_RCC_ClockConfig+0x264>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d947      	bls.n	800583a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80057aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d141      	bne.n	800583a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057be:	4a68      	ldr	r2, [pc, #416]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 80057c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057c6:	2380      	movs	r3, #128	@ 0x80
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	e036      	b.n	800583a <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d107      	bne.n	80057e4 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057d4:	4b62      	ldr	r3, [pc, #392]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d115      	bne.n	800580c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0b6      	b.n	8005952 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057ec:	4b5c      	ldr	r3, [pc, #368]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0aa      	b.n	8005952 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057fc:	4b58      	ldr	r3, [pc, #352]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e0a2      	b.n	8005952 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800580c:	f000 f8b0 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8005810:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	4a53      	ldr	r2, [pc, #332]	@ (8005964 <HAL_RCC_ClockConfig+0x264>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d90f      	bls.n	800583a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800581a:	4b51      	ldr	r3, [pc, #324]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005826:	4b4e      	ldr	r3, [pc, #312]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800582e:	4a4c      	ldr	r2, [pc, #304]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 8005830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005834:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005836:	2380      	movs	r3, #128	@ 0x80
 8005838:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800583a:	4b49      	ldr	r3, [pc, #292]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f023 0203 	bic.w	r2, r3, #3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	4946      	ldr	r1, [pc, #280]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 8005848:	4313      	orrs	r3, r2
 800584a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800584c:	f7fd f804 	bl	8002858 <HAL_GetTick>
 8005850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005852:	e013      	b.n	800587c <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005854:	f7fd f800 	bl	8002858 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005862:	4293      	cmp	r3, r2
 8005864:	d90a      	bls.n	800587c <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005866:	4b3e      	ldr	r3, [pc, #248]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 020c 	and.w	r2, r3, #12
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e06a      	b.n	8005952 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587c:	4b38      	ldr	r3, [pc, #224]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 020c 	and.w	r2, r3, #12
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	429a      	cmp	r2, r3
 800588c:	d1e2      	bne.n	8005854 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b80      	cmp	r3, #128	@ 0x80
 8005892:	d105      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005894:	4b32      	ldr	r3, [pc, #200]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	4a31      	ldr	r2, [pc, #196]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 800589a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800589e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d010      	beq.n	80058ce <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d208      	bcs.n	80058ce <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058bc:	4b28      	ldr	r3, [pc, #160]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4925      	ldr	r1, [pc, #148]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058ce:	4b23      	ldr	r3, [pc, #140]	@ (800595c <HAL_RCC_ClockConfig+0x25c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d210      	bcs.n	80058fe <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058dc:	4b1f      	ldr	r3, [pc, #124]	@ (800595c <HAL_RCC_ClockConfig+0x25c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f023 020f 	bic.w	r2, r3, #15
 80058e4:	491d      	ldr	r1, [pc, #116]	@ (800595c <HAL_RCC_ClockConfig+0x25c>)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ec:	4b1b      	ldr	r3, [pc, #108]	@ (800595c <HAL_RCC_ClockConfig+0x25c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d001      	beq.n	80058fe <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e029      	b.n	8005952 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800590a:	4b15      	ldr	r3, [pc, #84]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	4912      	ldr	r1, [pc, #72]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 8005918:	4313      	orrs	r3, r2
 800591a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d009      	beq.n	800593c <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005928:	4b0d      	ldr	r3, [pc, #52]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	490a      	ldr	r1, [pc, #40]	@ (8005960 <HAL_RCC_ClockConfig+0x260>)
 8005938:	4313      	orrs	r3, r2
 800593a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800593c:	f000 f8b4 	bl	8005aa8 <HAL_RCC_GetHCLKFreq>
 8005940:	4603      	mov	r3, r0
 8005942:	4a09      	ldr	r2, [pc, #36]	@ (8005968 <HAL_RCC_ClockConfig+0x268>)
 8005944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005946:	4b09      	ldr	r3, [pc, #36]	@ (800596c <HAL_RCC_ClockConfig+0x26c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f7fc ff34 	bl	80027b8 <HAL_InitTick>
 8005950:	4603      	mov	r3, r0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40022000 	.word	0x40022000
 8005960:	40021000 	.word	0x40021000
 8005964:	04c4b400 	.word	0x04c4b400
 8005968:	20000004 	.word	0x20000004
 800596c:	20000008 	.word	0x20000008

08005970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005970:	b480      	push	{r7}
 8005972:	b089      	sub	sp, #36	@ 0x24
 8005974:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	2300      	movs	r3, #0
 800597c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800597e:	4b47      	ldr	r3, [pc, #284]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 030c 	and.w	r3, r3, #12
 8005986:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005988:	4b44      	ldr	r3, [pc, #272]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x12c>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_RCC_GetSysClockFreq+0x34>
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	2b0c      	cmp	r3, #12
 800599c:	d121      	bne.n	80059e2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d11e      	bne.n	80059e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80059a4:	4b3d      	ldr	r3, [pc, #244]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x12c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d107      	bne.n	80059c0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80059b0:	4b3a      	ldr	r3, [pc, #232]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x12c>)
 80059b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059b6:	0a1b      	lsrs	r3, r3, #8
 80059b8:	f003 030f 	and.w	r3, r3, #15
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	e005      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80059c0:	4b36      	ldr	r3, [pc, #216]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x12c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	091b      	lsrs	r3, r3, #4
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80059cc:	4a34      	ldr	r2, [pc, #208]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0x130>)
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10d      	bne.n	80059f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059e0:	e00a      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d102      	bne.n	80059ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059e8:	4b2e      	ldr	r3, [pc, #184]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x134>)
 80059ea:	61bb      	str	r3, [r7, #24]
 80059ec:	e004      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d101      	bne.n	80059f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059f4:	4b2b      	ldr	r3, [pc, #172]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x134>)
 80059f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2b0c      	cmp	r3, #12
 80059fc:	d146      	bne.n	8005a8c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80059fe:	4b27      	ldr	r3, [pc, #156]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a08:	4b24      	ldr	r3, [pc, #144]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	3301      	adds	r3, #1
 8005a14:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d003      	beq.n	8005a24 <HAL_RCC_GetSysClockFreq+0xb4>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d00d      	beq.n	8005a3e <HAL_RCC_GetSysClockFreq+0xce>
 8005a22:	e019      	b.n	8005a58 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a24:	4a1f      	ldr	r2, [pc, #124]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x134>)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a2e:	68d2      	ldr	r2, [r2, #12]
 8005a30:	0a12      	lsrs	r2, r2, #8
 8005a32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	617b      	str	r3, [r7, #20]
        break;
 8005a3c:	e019      	b.n	8005a72 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a3e:	4a19      	ldr	r2, [pc, #100]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x134>)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a46:	4a15      	ldr	r2, [pc, #84]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a48:	68d2      	ldr	r2, [r2, #12]
 8005a4a:	0a12      	lsrs	r2, r2, #8
 8005a4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a50:	fb02 f303 	mul.w	r3, r2, r3
 8005a54:	617b      	str	r3, [r7, #20]
        break;
 8005a56:	e00c      	b.n	8005a72 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a60:	4a0e      	ldr	r2, [pc, #56]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a62:	68d2      	ldr	r2, [r2, #12]
 8005a64:	0a12      	lsrs	r2, r2, #8
 8005a66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a6a:	fb02 f303 	mul.w	r3, r2, r3
 8005a6e:	617b      	str	r3, [r7, #20]
        break;
 8005a70:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005a72:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	0e5b      	lsrs	r3, r3, #25
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a8c:	69bb      	ldr	r3, [r7, #24]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3724      	adds	r7, #36	@ 0x24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	0800f51c 	.word	0x0800f51c
 8005aa4:	00f42400 	.word	0x00f42400

08005aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8005aac:	f7ff ff60 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	4b05      	ldr	r3, [pc, #20]	@ (8005ac8 <HAL_RCC_GetHCLKFreq+0x20>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	091b      	lsrs	r3, r3, #4
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	4903      	ldr	r1, [pc, #12]	@ (8005acc <HAL_RCC_GetHCLKFreq+0x24>)
 8005abe:	5ccb      	ldrb	r3, [r1, r3]
 8005ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	0800f504 	.word	0x0800f504

08005ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ad4:	f7ff ffe8 	bl	8005aa8 <HAL_RCC_GetHCLKFreq>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	4b05      	ldr	r3, [pc, #20]	@ (8005af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	4903      	ldr	r1, [pc, #12]	@ (8005af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae6:	5ccb      	ldrb	r3, [r1, r3]
 8005ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40021000 	.word	0x40021000
 8005af4:	0800f514 	.word	0x0800f514

08005af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005afc:	f7ff ffd4 	bl	8005aa8 <HAL_RCC_GetHCLKFreq>
 8005b00:	4602      	mov	r2, r0
 8005b02:	4b05      	ldr	r3, [pc, #20]	@ (8005b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	0adb      	lsrs	r3, r3, #11
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4903      	ldr	r1, [pc, #12]	@ (8005b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b0e:	5ccb      	ldrb	r3, [r1, r3]
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	0800f514 	.word	0x0800f514

08005b20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8005be0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005b38:	f7ff f86e 	bl	8004c18 <HAL_PWREx_GetVoltageRange>
 8005b3c:	6138      	str	r0, [r7, #16]
 8005b3e:	e014      	b.n	8005b6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b40:	4b27      	ldr	r3, [pc, #156]	@ (8005be0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b44:	4a26      	ldr	r2, [pc, #152]	@ (8005be0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005b46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b4c:	4b24      	ldr	r3, [pc, #144]	@ (8005be0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005b58:	f7ff f85e 	bl	8004c18 <HAL_PWREx_GetVoltageRange>
 8005b5c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005b5e:	4b20      	ldr	r3, [pc, #128]	@ (8005be0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b62:	4a1f      	ldr	r2, [pc, #124]	@ (8005be0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005b64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b68:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b76:	d10b      	bne.n	8005b90 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b80      	cmp	r3, #128	@ 0x80
 8005b7c:	d919      	bls.n	8005bb2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2ba0      	cmp	r3, #160	@ 0xa0
 8005b82:	d902      	bls.n	8005b8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b84:	2302      	movs	r3, #2
 8005b86:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005b88:	e013      	b.n	8005bb2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005b8e:	e010      	b.n	8005bb2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b80      	cmp	r3, #128	@ 0x80
 8005b94:	d902      	bls.n	8005b9c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005b96:	2303      	movs	r3, #3
 8005b98:	617b      	str	r3, [r7, #20]
 8005b9a:	e00a      	b.n	8005bb2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b80      	cmp	r3, #128	@ 0x80
 8005ba0:	d102      	bne.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	e004      	b.n	8005bb2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b70      	cmp	r3, #112	@ 0x70
 8005bac:	d101      	bne.n	8005bb2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005bae:	2301      	movs	r3, #1
 8005bb0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005be4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f023 020f 	bic.w	r2, r3, #15
 8005bba:	490a      	ldr	r1, [pc, #40]	@ (8005be4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005bc2:	4b08      	ldr	r3, [pc, #32]	@ (8005be4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d001      	beq.n	8005bd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e000      	b.n	8005bd6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	40021000 	.word	0x40021000
 8005be4:	40022000 	.word	0x40022000

08005be8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bee:	4b31      	ldr	r3, [pc, #196]	@ (8005cb4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8005cb4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	091b      	lsrs	r3, r3, #4
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	3301      	adds	r3, #1
 8005c04:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d015      	beq.n	8005c38 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d839      	bhi.n	8005c86 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d01c      	beq.n	8005c52 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d133      	bne.n	8005c86 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c1e:	4a26      	ldr	r2, [pc, #152]	@ (8005cb8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c26:	4a23      	ldr	r2, [pc, #140]	@ (8005cb4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005c28:	68d2      	ldr	r2, [r2, #12]
 8005c2a:	0a12      	lsrs	r2, r2, #8
 8005c2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c30:	fb02 f303 	mul.w	r3, r2, r3
 8005c34:	613b      	str	r3, [r7, #16]
      break;
 8005c36:	e029      	b.n	8005c8c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c38:	4a1f      	ldr	r2, [pc, #124]	@ (8005cb8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c40:	4a1c      	ldr	r2, [pc, #112]	@ (8005cb4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005c42:	68d2      	ldr	r2, [r2, #12]
 8005c44:	0a12      	lsrs	r2, r2, #8
 8005c46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c4a:	fb02 f303 	mul.w	r3, r2, r3
 8005c4e:	613b      	str	r3, [r7, #16]
      break;
 8005c50:	e01c      	b.n	8005c8c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c52:	4b18      	ldr	r3, [pc, #96]	@ (8005cb4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d107      	bne.n	8005c6e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c5e:	4b15      	ldr	r3, [pc, #84]	@ (8005cb4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c64:	0a1b      	lsrs	r3, r3, #8
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	e005      	b.n	8005c7a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c6e:	4b11      	ldr	r3, [pc, #68]	@ (8005cb4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	091b      	lsrs	r3, r3, #4
 8005c74:	f003 030f 	and.w	r3, r3, #15
 8005c78:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8005c7a:	4a10      	ldr	r2, [pc, #64]	@ (8005cbc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c82:	613b      	str	r3, [r7, #16]
        break;
 8005c84:	e002      	b.n	8005c8c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	613b      	str	r3, [r7, #16]
      break;
 8005c8a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005c8c:	4b09      	ldr	r3, [pc, #36]	@ (8005cb4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	0e5b      	lsrs	r3, r3, #25
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	3301      	adds	r3, #1
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005ca6:	683b      	ldr	r3, [r7, #0]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	00f42400 	.word	0x00f42400
 8005cbc:	0800f51c 	.word	0x0800f51c

08005cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cc8:	2300      	movs	r3, #0
 8005cca:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ccc:	2300      	movs	r3, #0
 8005cce:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d040      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ce0:	2b80      	cmp	r3, #128	@ 0x80
 8005ce2:	d02a      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ce4:	2b80      	cmp	r3, #128	@ 0x80
 8005ce6:	d825      	bhi.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ce8:	2b60      	cmp	r3, #96	@ 0x60
 8005cea:	d026      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005cec:	2b60      	cmp	r3, #96	@ 0x60
 8005cee:	d821      	bhi.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005cf0:	2b40      	cmp	r3, #64	@ 0x40
 8005cf2:	d006      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005cf4:	2b40      	cmp	r3, #64	@ 0x40
 8005cf6:	d81d      	bhi.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d009      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d010      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005d00:	e018      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d02:	4b8f      	ldr	r3, [pc, #572]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	4a8e      	ldr	r2, [pc, #568]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d0c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005d0e:	e015      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3304      	adds	r3, #4
 8005d14:	2100      	movs	r1, #0
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fb56 	bl	80063c8 <RCCEx_PLLSAI1_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005d20:	e00c      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3320      	adds	r3, #32
 8005d26:	2100      	movs	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 fc33 	bl	8006594 <RCCEx_PLLSAI2_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005d32:	e003      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	77fb      	strb	r3, [r7, #31]
        break;
 8005d38:	e000      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8005d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d3c:	7ffb      	ldrb	r3, [r7, #31]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10b      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d42:	4b7f      	ldr	r3, [pc, #508]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d48:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d50:	497b      	ldr	r1, [pc, #492]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005d58:	e001      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5a:	7ffb      	ldrb	r3, [r7, #31]
 8005d5c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d047      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d72:	d030      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d78:	d82a      	bhi.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d7e:	d02a      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005d80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d84:	d824      	bhi.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d8a:	d008      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d90:	d81e      	bhi.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d9a:	d010      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005d9c:	e018      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d9e:	4b68      	ldr	r3, [pc, #416]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	4a67      	ldr	r2, [pc, #412]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005da8:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005daa:	e015      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3304      	adds	r3, #4
 8005db0:	2100      	movs	r1, #0
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fb08 	bl	80063c8 <RCCEx_PLLSAI1_Config>
 8005db8:	4603      	mov	r3, r0
 8005dba:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005dbc:	e00c      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	3320      	adds	r3, #32
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fbe5 	bl	8006594 <RCCEx_PLLSAI2_Config>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005dce:	e003      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	77fb      	strb	r3, [r7, #31]
        break;
 8005dd4:	e000      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8005dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd8:	7ffb      	ldrb	r3, [r7, #31]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10b      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005dde:	4b58      	ldr	r3, [pc, #352]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005de4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dec:	4954      	ldr	r1, [pc, #336]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005df4:	e001      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df6:	7ffb      	ldrb	r3, [r7, #31]
 8005df8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 80ab 	beq.w	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e0c:	4b4c      	ldr	r3, [pc, #304]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10d      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e18:	4b49      	ldr	r3, [pc, #292]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e1c:	4a48      	ldr	r2, [pc, #288]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e24:	4b46      	ldr	r3, [pc, #280]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005e30:	2301      	movs	r3, #1
 8005e32:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e34:	4b43      	ldr	r3, [pc, #268]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a42      	ldr	r2, [pc, #264]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e40:	f7fc fd0a 	bl	8002858 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e46:	e00f      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e48:	f7fc fd06 	bl	8002858 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d908      	bls.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e56:	4b3b      	ldr	r3, [pc, #236]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d109      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8005e66:	e006      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e68:	4b36      	ldr	r3, [pc, #216]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0e9      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005e74:	e000      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8005e76:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8005e78:	7ffb      	ldrb	r3, [r7, #31]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d164      	bne.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e7e:	4b30      	ldr	r3, [pc, #192]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e88:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01f      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d019      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e9c:	4b28      	ldr	r3, [pc, #160]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ea6:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ea8:	4b25      	ldr	r3, [pc, #148]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eae:	4a24      	ldr	r2, [pc, #144]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005eb8:	4b21      	ldr	r3, [pc, #132]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ebe:	4a20      	ldr	r2, [pc, #128]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d01f      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eda:	f7fc fcbd 	bl	8002858 <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ee0:	e012      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ee2:	f7fc fcb9 	bl	8002858 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d909      	bls.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ef4:	4b12      	ldr	r3, [pc, #72]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8005f06:	e007      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f08:	4b0d      	ldr	r3, [pc, #52]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0e5      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005f16:	e000      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005f18:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005f1a:	7ffb      	ldrb	r3, [r7, #31]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10c      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f20:	4b07      	ldr	r3, [pc, #28]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f30:	4903      	ldr	r1, [pc, #12]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005f38:	e008      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f3a:	7ffb      	ldrb	r3, [r7, #31]
 8005f3c:	77bb      	strb	r3, [r7, #30]
 8005f3e:	e005      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005f40:	40021000 	.word	0x40021000
 8005f44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f48:	7ffb      	ldrb	r3, [r7, #31]
 8005f4a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f4c:	7dfb      	ldrb	r3, [r7, #23]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d105      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f52:	4b9c      	ldr	r3, [pc, #624]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f56:	4a9b      	ldr	r2, [pc, #620]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f6a:	4b96      	ldr	r3, [pc, #600]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f70:	f023 0203 	bic.w	r2, r3, #3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f78:	4992      	ldr	r1, [pc, #584]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f8c:	4b8d      	ldr	r3, [pc, #564]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f92:	f023 020c 	bic.w	r2, r3, #12
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9a:	498a      	ldr	r1, [pc, #552]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0304 	and.w	r3, r3, #4
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fae:	4b85      	ldr	r3, [pc, #532]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fbc:	4981      	ldr	r1, [pc, #516]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fd0:	4b7c      	ldr	r3, [pc, #496]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fde:	4979      	ldr	r1, [pc, #484]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00a      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ff2:	4b74      	ldr	r3, [pc, #464]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006000:	4970      	ldr	r1, [pc, #448]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006014:	4b6b      	ldr	r3, [pc, #428]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800601a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006022:	4968      	ldr	r1, [pc, #416]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006036:	4b63      	ldr	r3, [pc, #396]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800603c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006044:	495f      	ldr	r1, [pc, #380]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006058:	4b5a      	ldr	r3, [pc, #360]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800605a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006066:	4957      	ldr	r1, [pc, #348]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800607a:	4b52      	ldr	r3, [pc, #328]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800607c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006080:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006088:	494e      	ldr	r1, [pc, #312]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d031      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060a4:	d00e      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80060a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060aa:	d814      	bhi.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d015      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80060b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060b4:	d10f      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060b6:	4b43      	ldr	r3, [pc, #268]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	4a42      	ldr	r2, [pc, #264]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060c0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80060c2:	e00c      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3304      	adds	r3, #4
 80060c8:	2100      	movs	r1, #0
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 f97c 	bl	80063c8 <RCCEx_PLLSAI1_Config>
 80060d0:	4603      	mov	r3, r0
 80060d2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80060d4:	e003      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	77fb      	strb	r3, [r7, #31]
        break;
 80060da:	e000      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80060dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060de:	7ffb      	ldrb	r3, [r7, #31]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10b      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060e4:	4b37      	ldr	r3, [pc, #220]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060f2:	4934      	ldr	r1, [pc, #208]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80060fa:	e001      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fc:	7ffb      	ldrb	r3, [r7, #31]
 80060fe:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800610c:	4b2d      	ldr	r3, [pc, #180]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800610e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006112:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611a:	492a      	ldr	r1, [pc, #168]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800612e:	4b25      	ldr	r3, [pc, #148]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006134:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800613c:	4921      	ldr	r1, [pc, #132]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006150:	4b1c      	ldr	r3, [pc, #112]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006156:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800615e:	4919      	ldr	r1, [pc, #100]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006172:	4b14      	ldr	r3, [pc, #80]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006174:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006178:	f023 0203 	bic.w	r2, r3, #3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006180:	4910      	ldr	r1, [pc, #64]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006182:	4313      	orrs	r3, r2
 8006184:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d02b      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006194:	4b0b      	ldr	r3, [pc, #44]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800619a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061a2:	4908      	ldr	r1, [pc, #32]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061b2:	d109      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061b4:	4b03      	ldr	r3, [pc, #12]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	4a02      	ldr	r2, [pc, #8]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061be:	60d3      	str	r3, [r2, #12]
 80061c0:	e014      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80061c2:	bf00      	nop
 80061c4:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061d0:	d10c      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3304      	adds	r3, #4
 80061d6:	2101      	movs	r1, #1
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 f8f5 	bl	80063c8 <RCCEx_PLLSAI1_Config>
 80061de:	4603      	mov	r3, r0
 80061e0:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80061e2:	7ffb      	ldrb	r3, [r7, #31]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80061e8:	7ffb      	ldrb	r3, [r7, #31]
 80061ea:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d04a      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006200:	d108      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8006202:	4b70      	ldr	r3, [pc, #448]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006204:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006208:	4a6e      	ldr	r2, [pc, #440]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800620a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800620e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006212:	e012      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8006214:	4b6b      	ldr	r3, [pc, #428]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006222:	4968      	ldr	r1, [pc, #416]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006224:	4313      	orrs	r3, r2
 8006226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800622a:	4b66      	ldr	r3, [pc, #408]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800622c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006230:	4a64      	ldr	r2, [pc, #400]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006232:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006236:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800623e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006242:	d10d      	bne.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3304      	adds	r3, #4
 8006248:	2101      	movs	r1, #1
 800624a:	4618      	mov	r0, r3
 800624c:	f000 f8bc 	bl	80063c8 <RCCEx_PLLSAI1_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006254:	7ffb      	ldrb	r3, [r7, #31]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d019      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800625a:	7ffb      	ldrb	r3, [r7, #31]
 800625c:	77bb      	strb	r3, [r7, #30]
 800625e:	e016      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006264:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006268:	d106      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800626a:	4b56      	ldr	r3, [pc, #344]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	4a55      	ldr	r2, [pc, #340]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006270:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006274:	60d3      	str	r3, [r2, #12]
 8006276:	e00a      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800627c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006280:	d105      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006282:	4b50      	ldr	r3, [pc, #320]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	4a4f      	ldr	r2, [pc, #316]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800628c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d028      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800629a:	4b4a      	ldr	r3, [pc, #296]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800629c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062a8:	4946      	ldr	r1, [pc, #280]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062b8:	d106      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062ba:	4b42      	ldr	r3, [pc, #264]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	4a41      	ldr	r2, [pc, #260]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80062c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062c4:	60d3      	str	r3, [r2, #12]
 80062c6:	e011      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062d0:	d10c      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3304      	adds	r3, #4
 80062d6:	2101      	movs	r1, #1
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 f875 	bl	80063c8 <RCCEx_PLLSAI1_Config>
 80062de:	4603      	mov	r3, r0
 80062e0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80062e2:	7ffb      	ldrb	r3, [r7, #31]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80062e8:	7ffb      	ldrb	r3, [r7, #31]
 80062ea:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01e      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062f8:	4b32      	ldr	r3, [pc, #200]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006308:	492e      	ldr	r1, [pc, #184]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800630a:	4313      	orrs	r3, r2
 800630c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006316:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800631a:	d10c      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3304      	adds	r3, #4
 8006320:	2102      	movs	r1, #2
 8006322:	4618      	mov	r0, r3
 8006324:	f000 f850 	bl	80063c8 <RCCEx_PLLSAI1_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800632c:	7ffb      	ldrb	r3, [r7, #31]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8006332:	7ffb      	ldrb	r3, [r7, #31]
 8006334:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006342:	4b20      	ldr	r3, [pc, #128]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006344:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006348:	f023 0204 	bic.w	r2, r3, #4
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006352:	491c      	ldr	r1, [pc, #112]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006354:	4313      	orrs	r3, r2
 8006356:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00b      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006366:	4b17      	ldr	r3, [pc, #92]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006368:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800636c:	f023 0218 	bic.w	r2, r3, #24
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006376:	4913      	ldr	r1, [pc, #76]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006378:	4313      	orrs	r3, r2
 800637a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d017      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800638a:	4b0e      	ldr	r3, [pc, #56]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800638c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006390:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800639a:	490a      	ldr	r1, [pc, #40]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063ac:	d105      	bne.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063ae:	4b05      	ldr	r3, [pc, #20]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	4a04      	ldr	r2, [pc, #16]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80063b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063b8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80063ba:	7fbb      	ldrb	r3, [r7, #30]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3720      	adds	r7, #32
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	40021000 	.word	0x40021000

080063c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d018      	beq.n	8006410 <RCCEx_PLLSAI1_Config+0x48>
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d81f      	bhi.n	8006422 <RCCEx_PLLSAI1_Config+0x5a>
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d002      	beq.n	80063ec <RCCEx_PLLSAI1_Config+0x24>
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d009      	beq.n	80063fe <RCCEx_PLLSAI1_Config+0x36>
 80063ea:	e01a      	b.n	8006422 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063ec:	4b65      	ldr	r3, [pc, #404]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d117      	bne.n	8006428 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063fc:	e014      	b.n	8006428 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063fe:	4b61      	ldr	r3, [pc, #388]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006406:	2b00      	cmp	r3, #0
 8006408:	d110      	bne.n	800642c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800640e:	e00d      	b.n	800642c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006410:	4b5c      	ldr	r3, [pc, #368]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d109      	bne.n	8006430 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006420:	e006      	b.n	8006430 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
      break;
 8006426:	e004      	b.n	8006432 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006428:	bf00      	nop
 800642a:	e002      	b.n	8006432 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800642c:	bf00      	nop
 800642e:	e000      	b.n	8006432 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006430:	bf00      	nop
  }

  if (status == HAL_OK)
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	2b00      	cmp	r3, #0
 8006436:	f040 809f 	bne.w	8006578 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800643a:	4b52      	ldr	r3, [pc, #328]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a51      	ldr	r2, [pc, #324]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006440:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006446:	f7fc fa07 	bl	8002858 <HAL_GetTick>
 800644a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800644c:	e00f      	b.n	800646e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800644e:	f7fc fa03 	bl	8002858 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	2b02      	cmp	r3, #2
 800645a:	d908      	bls.n	800646e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800645c:	4b49      	ldr	r3, [pc, #292]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d009      	beq.n	800647c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800646c:	e006      	b.n	800647c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800646e:	4b45      	ldr	r3, [pc, #276]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e9      	bne.n	800644e <RCCEx_PLLSAI1_Config+0x86>
 800647a:	e000      	b.n	800647e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 800647c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d179      	bne.n	8006578 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d116      	bne.n	80064b8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800648a:	4b3e      	ldr	r3, [pc, #248]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	4b3e      	ldr	r3, [pc, #248]	@ (8006588 <RCCEx_PLLSAI1_Config+0x1c0>)
 8006490:	4013      	ands	r3, r2
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	6892      	ldr	r2, [r2, #8]
 8006496:	0211      	lsls	r1, r2, #8
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	68d2      	ldr	r2, [r2, #12]
 800649c:	06d2      	lsls	r2, r2, #27
 800649e:	4311      	orrs	r1, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6852      	ldr	r2, [r2, #4]
 80064a4:	3a01      	subs	r2, #1
 80064a6:	0112      	lsls	r2, r2, #4
 80064a8:	4311      	orrs	r1, r2
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	4934      	ldr	r1, [pc, #208]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	610b      	str	r3, [r1, #16]
 80064b6:	e033      	b.n	8006520 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d118      	bne.n	80064f0 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064be:	4b31      	ldr	r3, [pc, #196]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	4b32      	ldr	r3, [pc, #200]	@ (800658c <RCCEx_PLLSAI1_Config+0x1c4>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6892      	ldr	r2, [r2, #8]
 80064ca:	0211      	lsls	r1, r2, #8
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	6912      	ldr	r2, [r2, #16]
 80064d0:	0852      	lsrs	r2, r2, #1
 80064d2:	3a01      	subs	r2, #1
 80064d4:	0552      	lsls	r2, r2, #21
 80064d6:	4311      	orrs	r1, r2
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6852      	ldr	r2, [r2, #4]
 80064dc:	3a01      	subs	r2, #1
 80064de:	0112      	lsls	r2, r2, #4
 80064e0:	4311      	orrs	r1, r2
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	4926      	ldr	r1, [pc, #152]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	610b      	str	r3, [r1, #16]
 80064ee:	e017      	b.n	8006520 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064f0:	4b24      	ldr	r3, [pc, #144]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	4b26      	ldr	r3, [pc, #152]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1c8>)
 80064f6:	4013      	ands	r3, r2
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6892      	ldr	r2, [r2, #8]
 80064fc:	0211      	lsls	r1, r2, #8
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6952      	ldr	r2, [r2, #20]
 8006502:	0852      	lsrs	r2, r2, #1
 8006504:	3a01      	subs	r2, #1
 8006506:	0652      	lsls	r2, r2, #25
 8006508:	4311      	orrs	r1, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6852      	ldr	r2, [r2, #4]
 800650e:	3a01      	subs	r2, #1
 8006510:	0112      	lsls	r2, r2, #4
 8006512:	4311      	orrs	r1, r2
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6812      	ldr	r2, [r2, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	491a      	ldr	r1, [pc, #104]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 800651c:	4313      	orrs	r3, r2
 800651e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006520:	4b18      	ldr	r3, [pc, #96]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a17      	ldr	r2, [pc, #92]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006526:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800652a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652c:	f7fc f994 	bl	8002858 <HAL_GetTick>
 8006530:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006532:	e00f      	b.n	8006554 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006534:	f7fc f990 	bl	8002858 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d908      	bls.n	8006554 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006542:	4b10      	ldr	r3, [pc, #64]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006552:	e006      	b.n	8006562 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006554:	4b0b      	ldr	r3, [pc, #44]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0e9      	beq.n	8006534 <RCCEx_PLLSAI1_Config+0x16c>
 8006560:	e000      	b.n	8006564 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8006562:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800656a:	4b06      	ldr	r3, [pc, #24]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	4904      	ldr	r1, [pc, #16]	@ (8006584 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006574:	4313      	orrs	r3, r2
 8006576:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	40021000 	.word	0x40021000
 8006588:	07ff800c 	.word	0x07ff800c
 800658c:	ff9f800c 	.word	0xff9f800c
 8006590:	f9ff800c 	.word	0xf9ff800c

08006594 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d018      	beq.n	80065dc <RCCEx_PLLSAI2_Config+0x48>
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d81f      	bhi.n	80065ee <RCCEx_PLLSAI2_Config+0x5a>
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d002      	beq.n	80065b8 <RCCEx_PLLSAI2_Config+0x24>
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d009      	beq.n	80065ca <RCCEx_PLLSAI2_Config+0x36>
 80065b6:	e01a      	b.n	80065ee <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065b8:	4b4a      	ldr	r3, [pc, #296]	@ (80066e4 <RCCEx_PLLSAI2_Config+0x150>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d117      	bne.n	80065f4 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065c8:	e014      	b.n	80065f4 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065ca:	4b46      	ldr	r3, [pc, #280]	@ (80066e4 <RCCEx_PLLSAI2_Config+0x150>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d110      	bne.n	80065f8 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065da:	e00d      	b.n	80065f8 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80065dc:	4b41      	ldr	r3, [pc, #260]	@ (80066e4 <RCCEx_PLLSAI2_Config+0x150>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d109      	bne.n	80065fc <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065ec:	e006      	b.n	80065fc <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	73fb      	strb	r3, [r7, #15]
      break;
 80065f2:	e004      	b.n	80065fe <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80065f4:	bf00      	nop
 80065f6:	e002      	b.n	80065fe <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80065f8:	bf00      	nop
 80065fa:	e000      	b.n	80065fe <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80065fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d169      	bne.n	80066d8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006604:	4b37      	ldr	r3, [pc, #220]	@ (80066e4 <RCCEx_PLLSAI2_Config+0x150>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a36      	ldr	r2, [pc, #216]	@ (80066e4 <RCCEx_PLLSAI2_Config+0x150>)
 800660a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800660e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006610:	f7fc f922 	bl	8002858 <HAL_GetTick>
 8006614:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006616:	e00f      	b.n	8006638 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006618:	f7fc f91e 	bl	8002858 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d908      	bls.n	8006638 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006626:	4b2f      	ldr	r3, [pc, #188]	@ (80066e4 <RCCEx_PLLSAI2_Config+0x150>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d009      	beq.n	8006646 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006636:	e006      	b.n	8006646 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006638:	4b2a      	ldr	r3, [pc, #168]	@ (80066e4 <RCCEx_PLLSAI2_Config+0x150>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e9      	bne.n	8006618 <RCCEx_PLLSAI2_Config+0x84>
 8006644:	e000      	b.n	8006648 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8006646:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d144      	bne.n	80066d8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d115      	bne.n	8006680 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006654:	4b23      	ldr	r3, [pc, #140]	@ (80066e4 <RCCEx_PLLSAI2_Config+0x150>)
 8006656:	695a      	ldr	r2, [r3, #20]
 8006658:	4b23      	ldr	r3, [pc, #140]	@ (80066e8 <RCCEx_PLLSAI2_Config+0x154>)
 800665a:	4013      	ands	r3, r2
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6892      	ldr	r2, [r2, #8]
 8006660:	0211      	lsls	r1, r2, #8
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	68d2      	ldr	r2, [r2, #12]
 8006666:	06d2      	lsls	r2, r2, #27
 8006668:	4311      	orrs	r1, r2
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6852      	ldr	r2, [r2, #4]
 800666e:	3a01      	subs	r2, #1
 8006670:	0112      	lsls	r2, r2, #4
 8006672:	4311      	orrs	r1, r2
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6812      	ldr	r2, [r2, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	491a      	ldr	r1, [pc, #104]	@ (80066e4 <RCCEx_PLLSAI2_Config+0x150>)
 800667c:	4313      	orrs	r3, r2
 800667e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006680:	4b18      	ldr	r3, [pc, #96]	@ (80066e4 <RCCEx_PLLSAI2_Config+0x150>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a17      	ldr	r2, [pc, #92]	@ (80066e4 <RCCEx_PLLSAI2_Config+0x150>)
 8006686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800668a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668c:	f7fc f8e4 	bl	8002858 <HAL_GetTick>
 8006690:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006692:	e00f      	b.n	80066b4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006694:	f7fc f8e0 	bl	8002858 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d908      	bls.n	80066b4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80066a2:	4b10      	ldr	r3, [pc, #64]	@ (80066e4 <RCCEx_PLLSAI2_Config+0x150>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80066b2:	e006      	b.n	80066c2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80066b4:	4b0b      	ldr	r3, [pc, #44]	@ (80066e4 <RCCEx_PLLSAI2_Config+0x150>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0e9      	beq.n	8006694 <RCCEx_PLLSAI2_Config+0x100>
 80066c0:	e000      	b.n	80066c4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80066c2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80066ca:	4b06      	ldr	r3, [pc, #24]	@ (80066e4 <RCCEx_PLLSAI2_Config+0x150>)
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	4904      	ldr	r1, [pc, #16]	@ (80066e4 <RCCEx_PLLSAI2_Config+0x150>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	40021000 	.word	0x40021000
 80066e8:	07ff800c 	.word	0x07ff800c

080066ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d066      	beq.n	80067cc <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7fb fd30 	bl	8002178 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	2b10      	cmp	r3, #16
 800672c:	d045      	beq.n	80067ba <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800672e:	4b2a      	ldr	r3, [pc, #168]	@ (80067d8 <HAL_RTC_Init+0xec>)
 8006730:	22ca      	movs	r2, #202	@ 0xca
 8006732:	625a      	str	r2, [r3, #36]	@ 0x24
 8006734:	4b28      	ldr	r3, [pc, #160]	@ (80067d8 <HAL_RTC_Init+0xec>)
 8006736:	2253      	movs	r2, #83	@ 0x53
 8006738:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fa38 	bl	8006bb0 <RTC_EnterInitMode>
 8006740:	4603      	mov	r3, r0
 8006742:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006744:	7bfb      	ldrb	r3, [r7, #15]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d121      	bne.n	800678e <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800674a:	4b23      	ldr	r3, [pc, #140]	@ (80067d8 <HAL_RTC_Init+0xec>)
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	4a22      	ldr	r2, [pc, #136]	@ (80067d8 <HAL_RTC_Init+0xec>)
 8006750:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006754:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006758:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800675a:	4b1f      	ldr	r3, [pc, #124]	@ (80067d8 <HAL_RTC_Init+0xec>)
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6859      	ldr	r1, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	4319      	orrs	r1, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	430b      	orrs	r3, r1
 800676e:	491a      	ldr	r1, [pc, #104]	@ (80067d8 <HAL_RTC_Init+0xec>)
 8006770:	4313      	orrs	r3, r2
 8006772:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	041b      	lsls	r3, r3, #16
 800677e:	4916      	ldr	r1, [pc, #88]	@ (80067d8 <HAL_RTC_Init+0xec>)
 8006780:	4313      	orrs	r3, r2
 8006782:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fa47 	bl	8006c18 <RTC_ExitInitMode>
 800678a:	4603      	mov	r3, r0
 800678c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10e      	bne.n	80067b2 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8006794:	4b10      	ldr	r3, [pc, #64]	@ (80067d8 <HAL_RTC_Init+0xec>)
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a19      	ldr	r1, [r3, #32]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	4319      	orrs	r1, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	430b      	orrs	r3, r1
 80067ac:	490a      	ldr	r1, [pc, #40]	@ (80067d8 <HAL_RTC_Init+0xec>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067b2:	4b09      	ldr	r3, [pc, #36]	@ (80067d8 <HAL_RTC_Init+0xec>)
 80067b4:	22ff      	movs	r2, #255	@ 0xff
 80067b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80067b8:	e001      	b.n	80067be <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d103      	bne.n	80067cc <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	40002800 	.word	0x40002800

080067dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80067dc:	b590      	push	{r4, r7, lr}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_RTC_SetTime+0x1a>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e081      	b.n	80068fa <HAL_RTC_SetTime+0x11e>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2202      	movs	r2, #2
 8006802:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006806:	4b3f      	ldr	r3, [pc, #252]	@ (8006904 <HAL_RTC_SetTime+0x128>)
 8006808:	22ca      	movs	r2, #202	@ 0xca
 800680a:	625a      	str	r2, [r3, #36]	@ 0x24
 800680c:	4b3d      	ldr	r3, [pc, #244]	@ (8006904 <HAL_RTC_SetTime+0x128>)
 800680e:	2253      	movs	r2, #83	@ 0x53
 8006810:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 f9cc 	bl	8006bb0 <RTC_EnterInitMode>
 8006818:	4603      	mov	r3, r0
 800681a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800681c:	7cfb      	ldrb	r3, [r7, #19]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d15c      	bne.n	80068dc <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d125      	bne.n	8006874 <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006828:	4b36      	ldr	r3, [pc, #216]	@ (8006904 <HAL_RTC_SetTime+0x128>)
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2200      	movs	r2, #0
 8006838:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fa28 	bl	8006c94 <RTC_ByteToBcd2>
 8006844:	4603      	mov	r3, r0
 8006846:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	785b      	ldrb	r3, [r3, #1]
 800684c:	4618      	mov	r0, r3
 800684e:	f000 fa21 	bl	8006c94 <RTC_ByteToBcd2>
 8006852:	4603      	mov	r3, r0
 8006854:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006856:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	789b      	ldrb	r3, [r3, #2]
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fa19 	bl	8006c94 <RTC_ByteToBcd2>
 8006862:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006864:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	78db      	ldrb	r3, [r3, #3]
 800686c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800686e:	4313      	orrs	r3, r2
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	e017      	b.n	80068a4 <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006874:	4b23      	ldr	r3, [pc, #140]	@ (8006904 <HAL_RTC_SetTime+0x128>)
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800687c:	2b00      	cmp	r3, #0
 800687e:	d102      	bne.n	8006886 <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2200      	movs	r2, #0
 8006884:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006892:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006898:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	78db      	ldrb	r3, [r3, #3]
 800689e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80068a4:	4a17      	ldr	r2, [pc, #92]	@ (8006904 <HAL_RTC_SetTime+0x128>)
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80068ac:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80068b0:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80068b2:	4b14      	ldr	r3, [pc, #80]	@ (8006904 <HAL_RTC_SetTime+0x128>)
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	4a13      	ldr	r2, [pc, #76]	@ (8006904 <HAL_RTC_SetTime+0x128>)
 80068b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068bc:	6193      	str	r3, [r2, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80068be:	4b11      	ldr	r3, [pc, #68]	@ (8006904 <HAL_RTC_SetTime+0x128>)
 80068c0:	699a      	ldr	r2, [r3, #24]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	68d9      	ldr	r1, [r3, #12]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	430b      	orrs	r3, r1
 80068cc:	490d      	ldr	r1, [pc, #52]	@ (8006904 <HAL_RTC_SetTime+0x128>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 f9a0 	bl	8006c18 <RTC_ExitInitMode>
 80068d8:	4603      	mov	r3, r0
 80068da:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068dc:	4b09      	ldr	r3, [pc, #36]	@ (8006904 <HAL_RTC_SetTime+0x128>)
 80068de:	22ff      	movs	r2, #255	@ 0xff
 80068e0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80068e2:	7cfb      	ldrb	r3, [r7, #19]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d103      	bne.n	80068f0 <HAL_RTC_SetTime+0x114>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80068f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd90      	pop	{r4, r7, pc}
 8006902:	bf00      	nop
 8006904:	40002800 	.word	0x40002800

08006908 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8006914:	4b29      	ldr	r3, [pc, #164]	@ (80069bc <HAL_RTC_GetTime+0xb4>)
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800691c:	4b27      	ldr	r3, [pc, #156]	@ (80069bc <HAL_RTC_GetTime+0xb4>)
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8006928:	4b24      	ldr	r3, [pc, #144]	@ (80069bc <HAL_RTC_GetTime+0xb4>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006930:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006934:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	0c1b      	lsrs	r3, r3, #16
 800693a:	b2db      	uxtb	r3, r3
 800693c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006940:	b2da      	uxtb	r2, r3
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	0a1b      	lsrs	r3, r3, #8
 800694a:	b2db      	uxtb	r3, r3
 800694c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006950:	b2da      	uxtb	r2, r3
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800695e:	b2da      	uxtb	r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	0d9b      	lsrs	r3, r3, #22
 8006968:	b2db      	uxtb	r3, r3
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	b2da      	uxtb	r2, r3
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d11a      	bne.n	80069b0 <HAL_RTC_GetTime+0xa8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f000 f9a8 	bl	8006cd4 <RTC_Bcd2ToByte>
 8006984:	4603      	mov	r3, r0
 8006986:	461a      	mov	r2, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	785b      	ldrb	r3, [r3, #1]
 8006990:	4618      	mov	r0, r3
 8006992:	f000 f99f 	bl	8006cd4 <RTC_Bcd2ToByte>
 8006996:	4603      	mov	r3, r0
 8006998:	461a      	mov	r2, r3
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	789b      	ldrb	r3, [r3, #2]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 f996 	bl	8006cd4 <RTC_Bcd2ToByte>
 80069a8:	4603      	mov	r3, r0
 80069aa:	461a      	mov	r2, r3
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	40002800 	.word	0x40002800

080069c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80069c0:	b590      	push	{r4, r7, lr}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_RTC_SetDate+0x1a>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e071      	b.n	8006abe <HAL_RTC_SetDate+0xfe>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2202      	movs	r2, #2
 80069e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10e      	bne.n	8006a0e <HAL_RTC_SetDate+0x4e>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	785b      	ldrb	r3, [r3, #1]
 80069f4:	f003 0310 	and.w	r3, r3, #16
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d008      	beq.n	8006a0e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	785b      	ldrb	r3, [r3, #1]
 8006a00:	f023 0310 	bic.w	r3, r3, #16
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	330a      	adds	r3, #10
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d11c      	bne.n	8006a4e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	78db      	ldrb	r3, [r3, #3]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 f93b 	bl	8006c94 <RTC_ByteToBcd2>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	785b      	ldrb	r3, [r3, #1]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 f934 	bl	8006c94 <RTC_ByteToBcd2>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006a30:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	789b      	ldrb	r3, [r3, #2]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 f92c 	bl	8006c94 <RTC_ByteToBcd2>
 8006a3c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a3e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	e00e      	b.n	8006a6c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	78db      	ldrb	r3, [r3, #3]
 8006a52:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	785b      	ldrb	r3, [r3, #1]
 8006a58:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006a5a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006a60:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a6c:	4b16      	ldr	r3, [pc, #88]	@ (8006ac8 <HAL_RTC_SetDate+0x108>)
 8006a6e:	22ca      	movs	r2, #202	@ 0xca
 8006a70:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a72:	4b15      	ldr	r3, [pc, #84]	@ (8006ac8 <HAL_RTC_SetDate+0x108>)
 8006a74:	2253      	movs	r2, #83	@ 0x53
 8006a76:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 f899 	bl	8006bb0 <RTC_EnterInitMode>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006a82:	7cfb      	ldrb	r3, [r7, #19]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10b      	bne.n	8006aa0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8006a88:	4a0f      	ldr	r2, [pc, #60]	@ (8006ac8 <HAL_RTC_SetDate+0x108>)
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006a90:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a94:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 f8be 	bl	8006c18 <RTC_ExitInitMode>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aa0:	4b09      	ldr	r3, [pc, #36]	@ (8006ac8 <HAL_RTC_SetDate+0x108>)
 8006aa2:	22ff      	movs	r2, #255	@ 0xff
 8006aa4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8006aa6:	7cfb      	ldrb	r3, [r7, #19]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d103      	bne.n	8006ab4 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006abc:	7cfb      	ldrb	r3, [r7, #19]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd90      	pop	{r4, r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	40002800 	.word	0x40002800

08006acc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8006ad8:	4b22      	ldr	r3, [pc, #136]	@ (8006b64 <HAL_RTC_GetDate+0x98>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006ae0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	0c1b      	lsrs	r3, r3, #16
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	0a1b      	lsrs	r3, r3, #8
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	f003 031f 	and.w	r3, r3, #31
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	0b5b      	lsrs	r3, r3, #13
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f003 0307 	and.w	r3, r3, #7
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d11a      	bne.n	8006b5a <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	78db      	ldrb	r3, [r3, #3]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 f8d3 	bl	8006cd4 <RTC_Bcd2ToByte>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	461a      	mov	r2, r3
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	785b      	ldrb	r3, [r3, #1]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 f8ca 	bl	8006cd4 <RTC_Bcd2ToByte>
 8006b40:	4603      	mov	r3, r0
 8006b42:	461a      	mov	r2, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	789b      	ldrb	r3, [r3, #2]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 f8c1 	bl	8006cd4 <RTC_Bcd2ToByte>
 8006b52:	4603      	mov	r3, r0
 8006b54:	461a      	mov	r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	40002800 	.word	0x40002800

08006b68 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8006b70:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba8 <HAL_RTC_WaitForSynchro+0x40>)
 8006b72:	4a0e      	ldr	r2, [pc, #56]	@ (8006bac <HAL_RTC_WaitForSynchro+0x44>)
 8006b74:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006b76:	f7fb fe6f 	bl	8002858 <HAL_GetTick>
 8006b7a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006b7c:	e009      	b.n	8006b92 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b7e:	f7fb fe6b 	bl	8002858 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b8c:	d901      	bls.n	8006b92 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e006      	b.n	8006ba0 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006b92:	4b05      	ldr	r3, [pc, #20]	@ (8006ba8 <HAL_RTC_WaitForSynchro+0x40>)
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0ef      	beq.n	8006b7e <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40002800 	.word	0x40002800
 8006bac:	0001005c 	.word	0x0001005c

08006bb0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006bbc:	4b15      	ldr	r3, [pc, #84]	@ (8006c14 <RTC_EnterInitMode+0x64>)
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d120      	bne.n	8006c0a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006bc8:	4b12      	ldr	r3, [pc, #72]	@ (8006c14 <RTC_EnterInitMode+0x64>)
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	4a11      	ldr	r2, [pc, #68]	@ (8006c14 <RTC_EnterInitMode+0x64>)
 8006bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bd2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006bd4:	f7fb fe40 	bl	8002858 <HAL_GetTick>
 8006bd8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006bda:	e00d      	b.n	8006bf8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006bdc:	f7fb fe3c 	bl	8002858 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bea:	d905      	bls.n	8006bf8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2203      	movs	r2, #3
 8006bf4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006bf8:	4b06      	ldr	r3, [pc, #24]	@ (8006c14 <RTC_EnterInitMode+0x64>)
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d102      	bne.n	8006c0a <RTC_EnterInitMode+0x5a>
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d1e8      	bne.n	8006bdc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	40002800 	.word	0x40002800

08006c18 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006c24:	4b1a      	ldr	r3, [pc, #104]	@ (8006c90 <RTC_ExitInitMode+0x78>)
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	4a19      	ldr	r2, [pc, #100]	@ (8006c90 <RTC_ExitInitMode+0x78>)
 8006c2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c2e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006c30:	4b17      	ldr	r3, [pc, #92]	@ (8006c90 <RTC_ExitInitMode+0x78>)
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	f003 0320 	and.w	r3, r3, #32
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10c      	bne.n	8006c56 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff ff93 	bl	8006b68 <HAL_RTC_WaitForSynchro>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01e      	beq.n	8006c86 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2203      	movs	r2, #3
 8006c4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	73fb      	strb	r3, [r7, #15]
 8006c54:	e017      	b.n	8006c86 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c56:	4b0e      	ldr	r3, [pc, #56]	@ (8006c90 <RTC_ExitInitMode+0x78>)
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	4a0d      	ldr	r2, [pc, #52]	@ (8006c90 <RTC_ExitInitMode+0x78>)
 8006c5c:	f023 0320 	bic.w	r3, r3, #32
 8006c60:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7ff ff80 	bl	8006b68 <HAL_RTC_WaitForSynchro>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2203      	movs	r2, #3
 8006c72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c7a:	4b05      	ldr	r3, [pc, #20]	@ (8006c90 <RTC_ExitInitMode+0x78>)
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	4a04      	ldr	r2, [pc, #16]	@ (8006c90 <RTC_ExitInitMode+0x78>)
 8006c80:	f043 0320 	orr.w	r3, r3, #32
 8006c84:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40002800 	.word	0x40002800

08006c94 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006ca2:	79fb      	ldrb	r3, [r7, #7]
 8006ca4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006ca6:	e005      	b.n	8006cb4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006cae:	7afb      	ldrb	r3, [r7, #11]
 8006cb0:	3b0a      	subs	r3, #10
 8006cb2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006cb4:	7afb      	ldrb	r3, [r7, #11]
 8006cb6:	2b09      	cmp	r3, #9
 8006cb8:	d8f6      	bhi.n	8006ca8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	7afb      	ldrb	r3, [r7, #11]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	b2db      	uxtb	r3, r3
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	091b      	lsrs	r3, r3, #4
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	4413      	add	r3, r2
 8006cfe:	b2db      	uxtb	r3, r3
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006d18:	4b07      	ldr	r3, [pc, #28]	@ (8006d38 <HAL_RTCEx_BKUPWrite+0x2c>)
 8006d1a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4413      	add	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	601a      	str	r2, [r3, #0]
}
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	40003500 	.word	0x40003500

08006d3c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006d46:	4b07      	ldr	r3, [pc, #28]	@ (8006d64 <HAL_RTCEx_BKUPRead+0x28>)
 8006d48:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	40003500 	.word	0x40003500

08006d68 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	490f      	ldr	r1, [pc, #60]	@ (8006db8 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	490c      	ldr	r1, [pc, #48]	@ (8006dbc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8006d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006dbc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	6919      	ldr	r1, [r3, #16]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	041b      	lsls	r3, r3, #16
 8006da0:	430b      	orrs	r3, r1
 8006da2:	4906      	ldr	r1, [pc, #24]	@ (8006dbc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40002800 	.word	0x40002800
 8006dbc:	40003400 	.word	0x40003400

08006dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d020      	beq.n	8006e24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d01b      	beq.n	8006e24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0202 	mvn.w	r2, #2
 8006df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	f003 0303 	and.w	r3, r3, #3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f8f3 	bl	8006ff6 <HAL_TIM_IC_CaptureCallback>
 8006e10:	e005      	b.n	8006e1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f8e5 	bl	8006fe2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f8f6 	bl	800700a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f003 0304 	and.w	r3, r3, #4
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d020      	beq.n	8006e70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01b      	beq.n	8006e70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f06f 0204 	mvn.w	r2, #4
 8006e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2202      	movs	r2, #2
 8006e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f8cd 	bl	8006ff6 <HAL_TIM_IC_CaptureCallback>
 8006e5c:	e005      	b.n	8006e6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f8bf 	bl	8006fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f8d0 	bl	800700a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f003 0308 	and.w	r3, r3, #8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d020      	beq.n	8006ebc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f003 0308 	and.w	r3, r3, #8
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01b      	beq.n	8006ebc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f06f 0208 	mvn.w	r2, #8
 8006e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2204      	movs	r2, #4
 8006e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f8a7 	bl	8006ff6 <HAL_TIM_IC_CaptureCallback>
 8006ea8:	e005      	b.n	8006eb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f899 	bl	8006fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f8aa 	bl	800700a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f003 0310 	and.w	r3, r3, #16
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d020      	beq.n	8006f08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d01b      	beq.n	8006f08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0210 	mvn.w	r2, #16
 8006ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2208      	movs	r2, #8
 8006ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f881 	bl	8006ff6 <HAL_TIM_IC_CaptureCallback>
 8006ef4:	e005      	b.n	8006f02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f873 	bl	8006fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f884 	bl	800700a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00c      	beq.n	8006f2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d007      	beq.n	8006f2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0201 	mvn.w	r2, #1
 8006f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f851 	bl	8006fce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d104      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00c      	beq.n	8006f5a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d007      	beq.n	8006f5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f876 	bl	8007046 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00c      	beq.n	8006f7e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d007      	beq.n	8006f7e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f86e 	bl	800705a <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00c      	beq.n	8006fa2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d007      	beq.n	8006fa2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f83e 	bl	800701e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f003 0320 	and.w	r3, r3, #32
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00c      	beq.n	8006fc6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d007      	beq.n	8006fc6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f06f 0220 	mvn.w	r2, #32
 8006fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f836 	bl	8007032 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ffe:	bf00      	nop
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800701e:	b480      	push	{r7}
 8007020:	b083      	sub	sp, #12
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007046:	b480      	push	{r7}
 8007048:	b083      	sub	sp, #12
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800704e:	bf00      	nop
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007062:	bf00      	nop
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e042      	b.n	8007106 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7fb fae6 	bl	8002664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2224      	movs	r2, #36	@ 0x24
 800709c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0201 	bic.w	r2, r2, #1
 80070ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 f81f 	bl	80080fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fd1c 	bl	8007afc <UART_SetConfig>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d101      	bne.n	80070ce <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e01b      	b.n	8007106 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80070dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689a      	ldr	r2, [r3, #8]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f042 0201 	orr.w	r2, r2, #1
 80070fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f001 f89e 	bl	8008240 <UART_CheckIdleState>
 8007104:	4603      	mov	r3, r0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b08a      	sub	sp, #40	@ 0x28
 8007112:	af02      	add	r7, sp, #8
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	603b      	str	r3, [r7, #0]
 800711a:	4613      	mov	r3, r2
 800711c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007124:	2b20      	cmp	r3, #32
 8007126:	d17b      	bne.n	8007220 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <HAL_UART_Transmit+0x26>
 800712e:	88fb      	ldrh	r3, [r7, #6]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e074      	b.n	8007222 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2221      	movs	r2, #33	@ 0x21
 8007144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007148:	f7fb fb86 	bl	8002858 <HAL_GetTick>
 800714c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	88fa      	ldrh	r2, [r7, #6]
 8007152:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	88fa      	ldrh	r2, [r7, #6]
 800715a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007166:	d108      	bne.n	800717a <HAL_UART_Transmit+0x6c>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d104      	bne.n	800717a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007170:	2300      	movs	r3, #0
 8007172:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	61bb      	str	r3, [r7, #24]
 8007178:	e003      	b.n	8007182 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800717e:	2300      	movs	r3, #0
 8007180:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007182:	e030      	b.n	80071e6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2200      	movs	r2, #0
 800718c:	2180      	movs	r1, #128	@ 0x80
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f001 f900 	bl	8008394 <UART_WaitOnFlagUntilTimeout>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2220      	movs	r2, #32
 800719e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e03d      	b.n	8007222 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10b      	bne.n	80071c4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	3302      	adds	r3, #2
 80071c0:	61bb      	str	r3, [r7, #24]
 80071c2:	e007      	b.n	80071d4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	781a      	ldrb	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	3301      	adds	r3, #1
 80071d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1c8      	bne.n	8007184 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2200      	movs	r2, #0
 80071fa:	2140      	movs	r1, #64	@ 0x40
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f001 f8c9 	bl	8008394 <UART_WaitOnFlagUntilTimeout>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d005      	beq.n	8007214 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2220      	movs	r2, #32
 800720c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e006      	b.n	8007222 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2220      	movs	r2, #32
 8007218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	e000      	b.n	8007222 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007220:	2302      	movs	r3, #2
  }
}
 8007222:	4618      	mov	r0, r3
 8007224:	3720      	adds	r7, #32
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	@ 0x28
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	4613      	mov	r3, r2
 8007238:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007240:	2b20      	cmp	r3, #32
 8007242:	d137      	bne.n	80072b4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <HAL_UART_Receive_IT+0x24>
 800724a:	88fb      	ldrh	r3, [r7, #6]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e030      	b.n	80072b6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a18      	ldr	r2, [pc, #96]	@ (80072c0 <HAL_UART_Receive_IT+0x94>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d01f      	beq.n	80072a4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d018      	beq.n	80072a4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	e853 3f00 	ldrex	r3, [r3]
 800727e:	613b      	str	r3, [r7, #16]
   return(result);
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007286:	627b      	str	r3, [r7, #36]	@ 0x24
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	623b      	str	r3, [r7, #32]
 8007292:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	69f9      	ldr	r1, [r7, #28]
 8007296:	6a3a      	ldr	r2, [r7, #32]
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	61bb      	str	r3, [r7, #24]
   return(result);
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e6      	bne.n	8007272 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072a4:	88fb      	ldrh	r3, [r7, #6]
 80072a6:	461a      	mov	r2, r3
 80072a8:	68b9      	ldr	r1, [r7, #8]
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f001 f8e0 	bl	8008470 <UART_Start_Receive_IT>
 80072b0:	4603      	mov	r3, r0
 80072b2:	e000      	b.n	80072b6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80072b4:	2302      	movs	r3, #2
  }
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3728      	adds	r7, #40	@ 0x28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	40008000 	.word	0x40008000

080072c4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b09a      	sub	sp, #104	@ 0x68
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072d4:	e853 3f00 	ldrex	r3, [r3]
 80072d8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80072da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80072ec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80072f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80072f2:	e841 2300 	strex	r3, r2, [r1]
 80072f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80072f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1e6      	bne.n	80072cc <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3308      	adds	r3, #8
 8007304:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007314:	f023 0301 	bic.w	r3, r3, #1
 8007318:	663b      	str	r3, [r7, #96]	@ 0x60
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3308      	adds	r3, #8
 8007320:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007322:	643a      	str	r2, [r7, #64]	@ 0x40
 8007324:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007328:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e3      	bne.n	80072fe <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800733a:	2b01      	cmp	r3, #1
 800733c:	d118      	bne.n	8007370 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	e853 3f00 	ldrex	r3, [r3]
 800734a:	61fb      	str	r3, [r7, #28]
   return(result);
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	f023 0310 	bic.w	r3, r3, #16
 8007352:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	461a      	mov	r2, r3
 800735a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800735c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800735e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007360:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007364:	e841 2300 	strex	r3, r2, [r1]
 8007368:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800736a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e6      	bne.n	800733e <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800737a:	2b40      	cmp	r3, #64	@ 0x40
 800737c:	d154      	bne.n	8007428 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3308      	adds	r3, #8
 8007384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	60bb      	str	r3, [r7, #8]
   return(result);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007394:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3308      	adds	r3, #8
 800739c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800739e:	61ba      	str	r2, [r7, #24]
 80073a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6979      	ldr	r1, [r7, #20]
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	613b      	str	r3, [r7, #16]
   return(result);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e5      	bne.n	800737e <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d017      	beq.n	80073ec <HAL_UART_AbortReceive_IT+0x128>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073c2:	4a26      	ldr	r2, [pc, #152]	@ (800745c <HAL_UART_AbortReceive_IT+0x198>)
 80073c4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fd f826 	bl	800441e <HAL_DMA_Abort_IT>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d03c      	beq.n	8007452 <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80073e6:	4610      	mov	r0, r2
 80073e8:	4798      	blx	r3
 80073ea:	e032      	b.n	8007452 <HAL_UART_AbortReceive_IT+0x18e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	220f      	movs	r2, #15
 8007400:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	699a      	ldr	r2, [r3, #24]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f042 0208 	orr.w	r2, r2, #8
 8007410:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fb55 	bl	8007ad0 <HAL_UART_AbortReceiveCpltCallback>
 8007426:	e014      	b.n	8007452 <HAL_UART_AbortReceive_IT+0x18e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	220f      	movs	r2, #15
 800743c:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2220      	movs	r2, #32
 8007442:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fb3f 	bl	8007ad0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3768      	adds	r7, #104	@ 0x68
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	080087ad 	.word	0x080087ad

08007460 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b0ba      	sub	sp, #232	@ 0xe8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007486:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800748a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800748e:	4013      	ands	r3, r2
 8007490:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007498:	2b00      	cmp	r3, #0
 800749a:	d11b      	bne.n	80074d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800749c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a0:	f003 0320 	and.w	r3, r3, #32
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d015      	beq.n	80074d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ac:	f003 0320 	and.w	r3, r3, #32
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d105      	bne.n	80074c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d009      	beq.n	80074d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 82e3 	beq.w	8007a90 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
      }
      return;
 80074d2:	e2dd      	b.n	8007a90 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80074d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 8123 	beq.w	8007724 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80074de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80074e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007718 <HAL_UART_IRQHandler+0x2b8>)
 80074e4:	4013      	ands	r3, r2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80074ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80074ee:	4b8b      	ldr	r3, [pc, #556]	@ (800771c <HAL_UART_IRQHandler+0x2bc>)
 80074f0:	4013      	ands	r3, r2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 8116 	beq.w	8007724 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d011      	beq.n	8007528 <HAL_UART_IRQHandler+0xc8>
 8007504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00b      	beq.n	8007528 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2201      	movs	r2, #1
 8007516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800751e:	f043 0201 	orr.w	r2, r3, #1
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800752c:	f003 0302 	and.w	r3, r3, #2
 8007530:	2b00      	cmp	r3, #0
 8007532:	d011      	beq.n	8007558 <HAL_UART_IRQHandler+0xf8>
 8007534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2202      	movs	r2, #2
 8007546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800754e:	f043 0204 	orr.w	r2, r3, #4
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d011      	beq.n	8007588 <HAL_UART_IRQHandler+0x128>
 8007564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2204      	movs	r2, #4
 8007576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800757e:	f043 0202 	orr.w	r2, r3, #2
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800758c:	f003 0308 	and.w	r3, r3, #8
 8007590:	2b00      	cmp	r3, #0
 8007592:	d017      	beq.n	80075c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007598:	f003 0320 	and.w	r3, r3, #32
 800759c:	2b00      	cmp	r3, #0
 800759e:	d105      	bne.n	80075ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80075a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80075a4:	4b5c      	ldr	r3, [pc, #368]	@ (8007718 <HAL_UART_IRQHandler+0x2b8>)
 80075a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2208      	movs	r2, #8
 80075b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ba:	f043 0208 	orr.w	r2, r3, #8
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d012      	beq.n	80075f6 <HAL_UART_IRQHandler+0x196>
 80075d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00c      	beq.n	80075f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ec:	f043 0220 	orr.w	r2, r3, #32
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 8249 	beq.w	8007a94 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b00      	cmp	r3, #0
 800760c:	d013      	beq.n	8007636 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800760e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	d105      	bne.n	8007626 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800761a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800761e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d007      	beq.n	8007636 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800763c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764a:	2b40      	cmp	r3, #64	@ 0x40
 800764c:	d005      	beq.n	800765a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800764e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007652:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007656:	2b00      	cmp	r3, #0
 8007658:	d054      	beq.n	8007704 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f001 f82a 	bl	80086b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800766a:	2b40      	cmp	r3, #64	@ 0x40
 800766c:	d146      	bne.n	80076fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3308      	adds	r3, #8
 8007674:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007684:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007688:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800768c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3308      	adds	r3, #8
 8007696:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800769a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800769e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80076a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80076aa:	e841 2300 	strex	r3, r2, [r1]
 80076ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80076b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1d9      	bne.n	800766e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d017      	beq.n	80076f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ca:	4a15      	ldr	r2, [pc, #84]	@ (8007720 <HAL_UART_IRQHandler+0x2c0>)
 80076cc:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fc fea2 	bl	800441e <HAL_DMA_Abort_IT>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d019      	beq.n	8007714 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80076ee:	4610      	mov	r0, r2
 80076f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f2:	e00f      	b.n	8007714 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f9e1 	bl	8007abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076fa:	e00b      	b.n	8007714 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f9dd 	bl	8007abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007702:	e007      	b.n	8007714 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f9d9 	bl	8007abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007712:	e1bf      	b.n	8007a94 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007714:	bf00      	nop
    return;
 8007716:	e1bd      	b.n	8007a94 <HAL_UART_IRQHandler+0x634>
 8007718:	10000001 	.word	0x10000001
 800771c:	04000120 	.word	0x04000120
 8007720:	08008781 	.word	0x08008781

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007728:	2b01      	cmp	r3, #1
 800772a:	f040 8153 	bne.w	80079d4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800772e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007732:	f003 0310 	and.w	r3, r3, #16
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 814c 	beq.w	80079d4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800773c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007740:	f003 0310 	and.w	r3, r3, #16
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 8145 	beq.w	80079d4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2210      	movs	r2, #16
 8007750:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800775c:	2b40      	cmp	r3, #64	@ 0x40
 800775e:	f040 80bb 	bne.w	80078d8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007770:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 818f 	beq.w	8007a98 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007780:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007784:	429a      	cmp	r2, r3
 8007786:	f080 8187 	bcs.w	8007a98 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007790:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f040 8087 	bne.w	80078b6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80077bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	461a      	mov	r2, r3
 80077ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80077ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1da      	bne.n	80077a8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3308      	adds	r3, #8
 80077f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007802:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007804:	f023 0301 	bic.w	r3, r3, #1
 8007808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3308      	adds	r3, #8
 8007812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007816:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800781a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800781e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007828:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e1      	bne.n	80077f2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3308      	adds	r3, #8
 8007834:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800783e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007844:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3308      	adds	r3, #8
 800784e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007852:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007854:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007858:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007860:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e3      	bne.n	800782e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2220      	movs	r2, #32
 800786a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007884:	f023 0310 	bic.w	r3, r3, #16
 8007888:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007896:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007898:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800789c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80078a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e4      	bne.n	8007874 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fc fd58 	bl	8004366 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2202      	movs	r2, #2
 80078ba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f907 	bl	8007ae4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078d6:	e0df      	b.n	8007a98 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 80d1 	beq.w	8007a9c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80078fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f000 80cc 	beq.w	8007a9c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007914:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007918:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	461a      	mov	r2, r3
 8007922:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007926:	647b      	str	r3, [r7, #68]	@ 0x44
 8007928:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800792c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800792e:	e841 2300 	strex	r3, r2, [r1]
 8007932:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1e4      	bne.n	8007904 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3308      	adds	r3, #8
 8007940:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007944:	e853 3f00 	ldrex	r3, [r3]
 8007948:	623b      	str	r3, [r7, #32]
   return(result);
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007950:	f023 0301 	bic.w	r3, r3, #1
 8007954:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3308      	adds	r3, #8
 800795e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007962:	633a      	str	r2, [r7, #48]	@ 0x30
 8007964:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e1      	bne.n	800793a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	60fb      	str	r3, [r7, #12]
   return(result);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0310 	bic.w	r3, r3, #16
 800799e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80079ac:	61fb      	str	r3, [r7, #28]
 80079ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	69b9      	ldr	r1, [r7, #24]
 80079b2:	69fa      	ldr	r2, [r7, #28]
 80079b4:	e841 2300 	strex	r3, r2, [r1]
 80079b8:	617b      	str	r3, [r7, #20]
   return(result);
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e4      	bne.n	800798a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f889 	bl	8007ae4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079d2:	e063      	b.n	8007a9c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00e      	beq.n	80079fe <HAL_UART_IRQHandler+0x59e>
 80079e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d008      	beq.n	80079fe <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80079f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 fc44 	bl	8009284 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079fc:	e051      	b.n	8007aa2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d014      	beq.n	8007a34 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d105      	bne.n	8007a22 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d008      	beq.n	8007a34 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d03a      	beq.n	8007aa0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	4798      	blx	r3
    }
    return;
 8007a32:	e035      	b.n	8007aa0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d009      	beq.n	8007a54 <HAL_UART_IRQHandler+0x5f4>
 8007a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fed2 	bl	80087f6 <UART_EndTransmit_IT>
    return;
 8007a52:	e026      	b.n	8007aa2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d009      	beq.n	8007a74 <HAL_UART_IRQHandler+0x614>
 8007a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a64:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 fc1d 	bl	80092ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a72:	e016      	b.n	8007aa2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d010      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x642>
 8007a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	da0c      	bge.n	8007aa2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 fc05 	bl	8009298 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a8e:	e008      	b.n	8007aa2 <HAL_UART_IRQHandler+0x642>
      return;
 8007a90:	bf00      	nop
 8007a92:	e006      	b.n	8007aa2 <HAL_UART_IRQHandler+0x642>
    return;
 8007a94:	bf00      	nop
 8007a96:	e004      	b.n	8007aa2 <HAL_UART_IRQHandler+0x642>
      return;
 8007a98:	bf00      	nop
 8007a9a:	e002      	b.n	8007aa2 <HAL_UART_IRQHandler+0x642>
      return;
 8007a9c:	bf00      	nop
 8007a9e:	e000      	b.n	8007aa2 <HAL_UART_IRQHandler+0x642>
    return;
 8007aa0:	bf00      	nop
  }
}
 8007aa2:	37e8      	adds	r7, #232	@ 0xe8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	460b      	mov	r3, r1
 8007aee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b00:	b08c      	sub	sp, #48	@ 0x30
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	431a      	orrs	r2, r3
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	4baa      	ldr	r3, [pc, #680]	@ (8007dd4 <UART_SetConfig+0x2d8>)
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	6812      	ldr	r2, [r2, #0]
 8007b32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b34:	430b      	orrs	r3, r1
 8007b36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	68da      	ldr	r2, [r3, #12]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a9f      	ldr	r2, [pc, #636]	@ (8007dd8 <UART_SetConfig+0x2dc>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d004      	beq.n	8007b68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b64:	4313      	orrs	r3, r2
 8007b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007b72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	6812      	ldr	r2, [r2, #0]
 8007b7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b7c:	430b      	orrs	r3, r1
 8007b7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b86:	f023 010f 	bic.w	r1, r3, #15
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a90      	ldr	r2, [pc, #576]	@ (8007ddc <UART_SetConfig+0x2e0>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d125      	bne.n	8007bec <UART_SetConfig+0xf0>
 8007ba0:	4b8f      	ldr	r3, [pc, #572]	@ (8007de0 <UART_SetConfig+0x2e4>)
 8007ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ba6:	f003 0303 	and.w	r3, r3, #3
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d81a      	bhi.n	8007be4 <UART_SetConfig+0xe8>
 8007bae:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb4 <UART_SetConfig+0xb8>)
 8007bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb4:	08007bc5 	.word	0x08007bc5
 8007bb8:	08007bd5 	.word	0x08007bd5
 8007bbc:	08007bcd 	.word	0x08007bcd
 8007bc0:	08007bdd 	.word	0x08007bdd
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bca:	e116      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bd2:	e112      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007bd4:	2304      	movs	r3, #4
 8007bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bda:	e10e      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007bdc:	2308      	movs	r3, #8
 8007bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007be2:	e10a      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007be4:	2310      	movs	r3, #16
 8007be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bea:	e106      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a7c      	ldr	r2, [pc, #496]	@ (8007de4 <UART_SetConfig+0x2e8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d138      	bne.n	8007c68 <UART_SetConfig+0x16c>
 8007bf6:	4b7a      	ldr	r3, [pc, #488]	@ (8007de0 <UART_SetConfig+0x2e4>)
 8007bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bfc:	f003 030c 	and.w	r3, r3, #12
 8007c00:	2b0c      	cmp	r3, #12
 8007c02:	d82d      	bhi.n	8007c60 <UART_SetConfig+0x164>
 8007c04:	a201      	add	r2, pc, #4	@ (adr r2, 8007c0c <UART_SetConfig+0x110>)
 8007c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0a:	bf00      	nop
 8007c0c:	08007c41 	.word	0x08007c41
 8007c10:	08007c61 	.word	0x08007c61
 8007c14:	08007c61 	.word	0x08007c61
 8007c18:	08007c61 	.word	0x08007c61
 8007c1c:	08007c51 	.word	0x08007c51
 8007c20:	08007c61 	.word	0x08007c61
 8007c24:	08007c61 	.word	0x08007c61
 8007c28:	08007c61 	.word	0x08007c61
 8007c2c:	08007c49 	.word	0x08007c49
 8007c30:	08007c61 	.word	0x08007c61
 8007c34:	08007c61 	.word	0x08007c61
 8007c38:	08007c61 	.word	0x08007c61
 8007c3c:	08007c59 	.word	0x08007c59
 8007c40:	2300      	movs	r3, #0
 8007c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c46:	e0d8      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c4e:	e0d4      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007c50:	2304      	movs	r3, #4
 8007c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c56:	e0d0      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007c58:	2308      	movs	r3, #8
 8007c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c5e:	e0cc      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007c60:	2310      	movs	r3, #16
 8007c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c66:	e0c8      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a5e      	ldr	r2, [pc, #376]	@ (8007de8 <UART_SetConfig+0x2ec>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d125      	bne.n	8007cbe <UART_SetConfig+0x1c2>
 8007c72:	4b5b      	ldr	r3, [pc, #364]	@ (8007de0 <UART_SetConfig+0x2e4>)
 8007c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007c7c:	2b30      	cmp	r3, #48	@ 0x30
 8007c7e:	d016      	beq.n	8007cae <UART_SetConfig+0x1b2>
 8007c80:	2b30      	cmp	r3, #48	@ 0x30
 8007c82:	d818      	bhi.n	8007cb6 <UART_SetConfig+0x1ba>
 8007c84:	2b20      	cmp	r3, #32
 8007c86:	d00a      	beq.n	8007c9e <UART_SetConfig+0x1a2>
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	d814      	bhi.n	8007cb6 <UART_SetConfig+0x1ba>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <UART_SetConfig+0x19a>
 8007c90:	2b10      	cmp	r3, #16
 8007c92:	d008      	beq.n	8007ca6 <UART_SetConfig+0x1aa>
 8007c94:	e00f      	b.n	8007cb6 <UART_SetConfig+0x1ba>
 8007c96:	2300      	movs	r3, #0
 8007c98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c9c:	e0ad      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ca4:	e0a9      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007ca6:	2304      	movs	r3, #4
 8007ca8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cac:	e0a5      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007cae:	2308      	movs	r3, #8
 8007cb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cb4:	e0a1      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007cb6:	2310      	movs	r3, #16
 8007cb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cbc:	e09d      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a4a      	ldr	r2, [pc, #296]	@ (8007dec <UART_SetConfig+0x2f0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d125      	bne.n	8007d14 <UART_SetConfig+0x218>
 8007cc8:	4b45      	ldr	r3, [pc, #276]	@ (8007de0 <UART_SetConfig+0x2e4>)
 8007cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007cd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cd4:	d016      	beq.n	8007d04 <UART_SetConfig+0x208>
 8007cd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cd8:	d818      	bhi.n	8007d0c <UART_SetConfig+0x210>
 8007cda:	2b80      	cmp	r3, #128	@ 0x80
 8007cdc:	d00a      	beq.n	8007cf4 <UART_SetConfig+0x1f8>
 8007cde:	2b80      	cmp	r3, #128	@ 0x80
 8007ce0:	d814      	bhi.n	8007d0c <UART_SetConfig+0x210>
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <UART_SetConfig+0x1f0>
 8007ce6:	2b40      	cmp	r3, #64	@ 0x40
 8007ce8:	d008      	beq.n	8007cfc <UART_SetConfig+0x200>
 8007cea:	e00f      	b.n	8007d0c <UART_SetConfig+0x210>
 8007cec:	2300      	movs	r3, #0
 8007cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cf2:	e082      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cfa:	e07e      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d02:	e07a      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007d04:	2308      	movs	r3, #8
 8007d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d0a:	e076      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007d0c:	2310      	movs	r3, #16
 8007d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d12:	e072      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a35      	ldr	r2, [pc, #212]	@ (8007df0 <UART_SetConfig+0x2f4>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d12a      	bne.n	8007d74 <UART_SetConfig+0x278>
 8007d1e:	4b30      	ldr	r3, [pc, #192]	@ (8007de0 <UART_SetConfig+0x2e4>)
 8007d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d2c:	d01a      	beq.n	8007d64 <UART_SetConfig+0x268>
 8007d2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d32:	d81b      	bhi.n	8007d6c <UART_SetConfig+0x270>
 8007d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d38:	d00c      	beq.n	8007d54 <UART_SetConfig+0x258>
 8007d3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d3e:	d815      	bhi.n	8007d6c <UART_SetConfig+0x270>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <UART_SetConfig+0x250>
 8007d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d48:	d008      	beq.n	8007d5c <UART_SetConfig+0x260>
 8007d4a:	e00f      	b.n	8007d6c <UART_SetConfig+0x270>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d52:	e052      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007d54:	2302      	movs	r3, #2
 8007d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d5a:	e04e      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007d5c:	2304      	movs	r3, #4
 8007d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d62:	e04a      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007d64:	2308      	movs	r3, #8
 8007d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d6a:	e046      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007d6c:	2310      	movs	r3, #16
 8007d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d72:	e042      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a17      	ldr	r2, [pc, #92]	@ (8007dd8 <UART_SetConfig+0x2dc>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d13a      	bne.n	8007df4 <UART_SetConfig+0x2f8>
 8007d7e:	4b18      	ldr	r3, [pc, #96]	@ (8007de0 <UART_SetConfig+0x2e4>)
 8007d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007d88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d8c:	d01a      	beq.n	8007dc4 <UART_SetConfig+0x2c8>
 8007d8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d92:	d81b      	bhi.n	8007dcc <UART_SetConfig+0x2d0>
 8007d94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d98:	d00c      	beq.n	8007db4 <UART_SetConfig+0x2b8>
 8007d9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d9e:	d815      	bhi.n	8007dcc <UART_SetConfig+0x2d0>
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <UART_SetConfig+0x2b0>
 8007da4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007da8:	d008      	beq.n	8007dbc <UART_SetConfig+0x2c0>
 8007daa:	e00f      	b.n	8007dcc <UART_SetConfig+0x2d0>
 8007dac:	2300      	movs	r3, #0
 8007dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007db2:	e022      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007db4:	2302      	movs	r3, #2
 8007db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dba:	e01e      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007dbc:	2304      	movs	r3, #4
 8007dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dc2:	e01a      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007dc4:	2308      	movs	r3, #8
 8007dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dca:	e016      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007dcc:	2310      	movs	r3, #16
 8007dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dd2:	e012      	b.n	8007dfa <UART_SetConfig+0x2fe>
 8007dd4:	cfff69f3 	.word	0xcfff69f3
 8007dd8:	40008000 	.word	0x40008000
 8007ddc:	40013800 	.word	0x40013800
 8007de0:	40021000 	.word	0x40021000
 8007de4:	40004400 	.word	0x40004400
 8007de8:	40004800 	.word	0x40004800
 8007dec:	40004c00 	.word	0x40004c00
 8007df0:	40005000 	.word	0x40005000
 8007df4:	2310      	movs	r3, #16
 8007df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4ab0      	ldr	r2, [pc, #704]	@ (80080c0 <UART_SetConfig+0x5c4>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	f040 809b 	bne.w	8007f3c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e0a:	2b08      	cmp	r3, #8
 8007e0c:	d827      	bhi.n	8007e5e <UART_SetConfig+0x362>
 8007e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e14 <UART_SetConfig+0x318>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007e39 	.word	0x08007e39
 8007e18:	08007e41 	.word	0x08007e41
 8007e1c:	08007e49 	.word	0x08007e49
 8007e20:	08007e5f 	.word	0x08007e5f
 8007e24:	08007e4f 	.word	0x08007e4f
 8007e28:	08007e5f 	.word	0x08007e5f
 8007e2c:	08007e5f 	.word	0x08007e5f
 8007e30:	08007e5f 	.word	0x08007e5f
 8007e34:	08007e57 	.word	0x08007e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e38:	f7fd fe4a 	bl	8005ad0 <HAL_RCC_GetPCLK1Freq>
 8007e3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e3e:	e014      	b.n	8007e6a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e40:	f7fd fe5a 	bl	8005af8 <HAL_RCC_GetPCLK2Freq>
 8007e44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e46:	e010      	b.n	8007e6a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e48:	4b9e      	ldr	r3, [pc, #632]	@ (80080c4 <UART_SetConfig+0x5c8>)
 8007e4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e4c:	e00d      	b.n	8007e6a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e4e:	f7fd fd8f 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8007e52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e54:	e009      	b.n	8007e6a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e5c:	e005      	b.n	8007e6a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 8130 	beq.w	80080d2 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e76:	4a94      	ldr	r2, [pc, #592]	@ (80080c8 <UART_SetConfig+0x5cc>)
 8007e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e80:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	4413      	add	r3, r2
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d305      	bcc.n	8007ea2 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d903      	bls.n	8007eaa <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ea8:	e113      	b.n	80080d2 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eac:	2200      	movs	r2, #0
 8007eae:	60bb      	str	r3, [r7, #8]
 8007eb0:	60fa      	str	r2, [r7, #12]
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb6:	4a84      	ldr	r2, [pc, #528]	@ (80080c8 <UART_SetConfig+0x5cc>)
 8007eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	603b      	str	r3, [r7, #0]
 8007ec2:	607a      	str	r2, [r7, #4]
 8007ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ecc:	f7f8 ff1a 	bl	8000d04 <__aeabi_uldivmod>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	f04f 0300 	mov.w	r3, #0
 8007ee0:	020b      	lsls	r3, r1, #8
 8007ee2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ee6:	0202      	lsls	r2, r0, #8
 8007ee8:	6979      	ldr	r1, [r7, #20]
 8007eea:	6849      	ldr	r1, [r1, #4]
 8007eec:	0849      	lsrs	r1, r1, #1
 8007eee:	2000      	movs	r0, #0
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	eb12 0804 	adds.w	r8, r2, r4
 8007ef8:	eb43 0905 	adc.w	r9, r3, r5
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	469a      	mov	sl, r3
 8007f04:	4693      	mov	fp, r2
 8007f06:	4652      	mov	r2, sl
 8007f08:	465b      	mov	r3, fp
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	4649      	mov	r1, r9
 8007f0e:	f7f8 fef9 	bl	8000d04 <__aeabi_uldivmod>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	4613      	mov	r3, r2
 8007f18:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f20:	d308      	bcc.n	8007f34 <UART_SetConfig+0x438>
 8007f22:	6a3b      	ldr	r3, [r7, #32]
 8007f24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f28:	d204      	bcs.n	8007f34 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6a3a      	ldr	r2, [r7, #32]
 8007f30:	60da      	str	r2, [r3, #12]
 8007f32:	e0ce      	b.n	80080d2 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f3a:	e0ca      	b.n	80080d2 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	69db      	ldr	r3, [r3, #28]
 8007f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f44:	d166      	bne.n	8008014 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8007f46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f4a:	2b08      	cmp	r3, #8
 8007f4c:	d827      	bhi.n	8007f9e <UART_SetConfig+0x4a2>
 8007f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f54 <UART_SetConfig+0x458>)
 8007f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f54:	08007f79 	.word	0x08007f79
 8007f58:	08007f81 	.word	0x08007f81
 8007f5c:	08007f89 	.word	0x08007f89
 8007f60:	08007f9f 	.word	0x08007f9f
 8007f64:	08007f8f 	.word	0x08007f8f
 8007f68:	08007f9f 	.word	0x08007f9f
 8007f6c:	08007f9f 	.word	0x08007f9f
 8007f70:	08007f9f 	.word	0x08007f9f
 8007f74:	08007f97 	.word	0x08007f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f78:	f7fd fdaa 	bl	8005ad0 <HAL_RCC_GetPCLK1Freq>
 8007f7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f7e:	e014      	b.n	8007faa <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f80:	f7fd fdba 	bl	8005af8 <HAL_RCC_GetPCLK2Freq>
 8007f84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f86:	e010      	b.n	8007faa <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f88:	4b4e      	ldr	r3, [pc, #312]	@ (80080c4 <UART_SetConfig+0x5c8>)
 8007f8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f8c:	e00d      	b.n	8007faa <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f8e:	f7fd fcef 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8007f92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f94:	e009      	b.n	8007faa <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f9c:	e005      	b.n	8007faa <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007fa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 8090 	beq.w	80080d2 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb6:	4a44      	ldr	r2, [pc, #272]	@ (80080c8 <UART_SetConfig+0x5cc>)
 8007fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fc4:	005a      	lsls	r2, r3, #1
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	085b      	lsrs	r3, r3, #1
 8007fcc:	441a      	add	r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	2b0f      	cmp	r3, #15
 8007fdc:	d916      	bls.n	800800c <UART_SetConfig+0x510>
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fe4:	d212      	bcs.n	800800c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	f023 030f 	bic.w	r3, r3, #15
 8007fee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ff0:	6a3b      	ldr	r3, [r7, #32]
 8007ff2:	085b      	lsrs	r3, r3, #1
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	8bfb      	ldrh	r3, [r7, #30]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	8bfa      	ldrh	r2, [r7, #30]
 8008008:	60da      	str	r2, [r3, #12]
 800800a:	e062      	b.n	80080d2 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008012:	e05e      	b.n	80080d2 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008014:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008018:	2b08      	cmp	r3, #8
 800801a:	d828      	bhi.n	800806e <UART_SetConfig+0x572>
 800801c:	a201      	add	r2, pc, #4	@ (adr r2, 8008024 <UART_SetConfig+0x528>)
 800801e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008022:	bf00      	nop
 8008024:	08008049 	.word	0x08008049
 8008028:	08008051 	.word	0x08008051
 800802c:	08008059 	.word	0x08008059
 8008030:	0800806f 	.word	0x0800806f
 8008034:	0800805f 	.word	0x0800805f
 8008038:	0800806f 	.word	0x0800806f
 800803c:	0800806f 	.word	0x0800806f
 8008040:	0800806f 	.word	0x0800806f
 8008044:	08008067 	.word	0x08008067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008048:	f7fd fd42 	bl	8005ad0 <HAL_RCC_GetPCLK1Freq>
 800804c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800804e:	e014      	b.n	800807a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008050:	f7fd fd52 	bl	8005af8 <HAL_RCC_GetPCLK2Freq>
 8008054:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008056:	e010      	b.n	800807a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008058:	4b1a      	ldr	r3, [pc, #104]	@ (80080c4 <UART_SetConfig+0x5c8>)
 800805a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800805c:	e00d      	b.n	800807a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800805e:	f7fd fc87 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8008062:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008064:	e009      	b.n	800807a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800806a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800806c:	e005      	b.n	800807a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008078:	bf00      	nop
    }

    if (pclk != 0U)
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	2b00      	cmp	r3, #0
 800807e:	d028      	beq.n	80080d2 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008084:	4a10      	ldr	r2, [pc, #64]	@ (80080c8 <UART_SetConfig+0x5cc>)
 8008086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800808a:	461a      	mov	r2, r3
 800808c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	085b      	lsrs	r3, r3, #1
 8008098:	441a      	add	r2, r3
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	2b0f      	cmp	r3, #15
 80080a8:	d910      	bls.n	80080cc <UART_SetConfig+0x5d0>
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b0:	d20c      	bcs.n	80080cc <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60da      	str	r2, [r3, #12]
 80080bc:	e009      	b.n	80080d2 <UART_SetConfig+0x5d6>
 80080be:	bf00      	nop
 80080c0:	40008000 	.word	0x40008000
 80080c4:	00f42400 	.word	0x00f42400
 80080c8:	0800f55c 	.word	0x0800f55c
      }
      else
      {
        ret = HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	2201      	movs	r2, #1
 80080de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2200      	movs	r2, #0
 80080e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2200      	movs	r2, #0
 80080ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80080ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3730      	adds	r7, #48	@ 0x30
 80080f6:	46bd      	mov	sp, r7
 80080f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080080fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008108:	f003 0308 	and.w	r3, r3, #8
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00a      	beq.n	8008126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00a      	beq.n	8008148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	430a      	orrs	r2, r1
 8008146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00a      	beq.n	800816a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	430a      	orrs	r2, r1
 8008168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816e:	f003 0304 	and.w	r3, r3, #4
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00a      	beq.n	800818c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	430a      	orrs	r2, r1
 800818a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008190:	f003 0310 	and.w	r3, r3, #16
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00a      	beq.n	80081ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01a      	beq.n	8008212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081fa:	d10a      	bne.n	8008212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	605a      	str	r2, [r3, #4]
  }
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b098      	sub	sp, #96	@ 0x60
 8008244:	af02      	add	r7, sp, #8
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008250:	f7fa fb02 	bl	8002858 <HAL_GetTick>
 8008254:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0308 	and.w	r3, r3, #8
 8008260:	2b08      	cmp	r3, #8
 8008262:	d12f      	bne.n	80082c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008264:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800826c:	2200      	movs	r2, #0
 800826e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f88e 	bl	8008394 <UART_WaitOnFlagUntilTimeout>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d022      	beq.n	80082c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008286:	e853 3f00 	ldrex	r3, [r3]
 800828a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800828c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800828e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008292:	653b      	str	r3, [r7, #80]	@ 0x50
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	461a      	mov	r2, r3
 800829a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800829c:	647b      	str	r3, [r7, #68]	@ 0x44
 800829e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082a4:	e841 2300 	strex	r3, r2, [r1]
 80082a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e6      	bne.n	800827e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2220      	movs	r2, #32
 80082b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e063      	b.n	800838c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0304 	and.w	r3, r3, #4
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	d149      	bne.n	8008366 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082da:	2200      	movs	r2, #0
 80082dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f857 	bl	8008394 <UART_WaitOnFlagUntilTimeout>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d03c      	beq.n	8008366 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f4:	e853 3f00 	ldrex	r3, [r3]
 80082f8:	623b      	str	r3, [r7, #32]
   return(result);
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800830a:	633b      	str	r3, [r7, #48]	@ 0x30
 800830c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008312:	e841 2300 	strex	r3, r2, [r1]
 8008316:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1e6      	bne.n	80082ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3308      	adds	r3, #8
 8008324:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	e853 3f00 	ldrex	r3, [r3]
 800832c:	60fb      	str	r3, [r7, #12]
   return(result);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f023 0301 	bic.w	r3, r3, #1
 8008334:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3308      	adds	r3, #8
 800833c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800833e:	61fa      	str	r2, [r7, #28]
 8008340:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	69b9      	ldr	r1, [r7, #24]
 8008344:	69fa      	ldr	r2, [r7, #28]
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	617b      	str	r3, [r7, #20]
   return(result);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1e5      	bne.n	800831e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2220      	movs	r2, #32
 8008356:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e012      	b.n	800838c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2220      	movs	r2, #32
 800836a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2220      	movs	r2, #32
 8008372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3758      	adds	r7, #88	@ 0x58
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	4613      	mov	r3, r2
 80083a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a4:	e04f      	b.n	8008446 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ac:	d04b      	beq.n	8008446 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ae:	f7fa fa53 	bl	8002858 <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d302      	bcc.n	80083c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d101      	bne.n	80083c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e04e      	b.n	8008466 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0304 	and.w	r3, r3, #4
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d037      	beq.n	8008446 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2b80      	cmp	r3, #128	@ 0x80
 80083da:	d034      	beq.n	8008446 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	2b40      	cmp	r3, #64	@ 0x40
 80083e0:	d031      	beq.n	8008446 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	f003 0308 	and.w	r3, r3, #8
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d110      	bne.n	8008412 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2208      	movs	r2, #8
 80083f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 f95b 	bl	80086b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2208      	movs	r2, #8
 8008402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e029      	b.n	8008466 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800841c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008420:	d111      	bne.n	8008446 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800842a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 f941 	bl	80086b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2220      	movs	r2, #32
 8008436:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e00f      	b.n	8008466 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	69da      	ldr	r2, [r3, #28]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4013      	ands	r3, r2
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	429a      	cmp	r2, r3
 8008454:	bf0c      	ite	eq
 8008456:	2301      	moveq	r3, #1
 8008458:	2300      	movne	r3, #0
 800845a:	b2db      	uxtb	r3, r3
 800845c:	461a      	mov	r2, r3
 800845e:	79fb      	ldrb	r3, [r7, #7]
 8008460:	429a      	cmp	r2, r3
 8008462:	d0a0      	beq.n	80083a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008470:	b480      	push	{r7}
 8008472:	b0a3      	sub	sp, #140	@ 0x8c
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	4613      	mov	r3, r2
 800847c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	88fa      	ldrh	r2, [r7, #6]
 8008488:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	88fa      	ldrh	r2, [r7, #6]
 8008490:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084a2:	d10e      	bne.n	80084c2 <UART_Start_Receive_IT+0x52>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d105      	bne.n	80084b8 <UART_Start_Receive_IT+0x48>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80084b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084b6:	e02d      	b.n	8008514 <UART_Start_Receive_IT+0xa4>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	22ff      	movs	r2, #255	@ 0xff
 80084bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084c0:	e028      	b.n	8008514 <UART_Start_Receive_IT+0xa4>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10d      	bne.n	80084e6 <UART_Start_Receive_IT+0x76>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d104      	bne.n	80084dc <UART_Start_Receive_IT+0x6c>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	22ff      	movs	r2, #255	@ 0xff
 80084d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084da:	e01b      	b.n	8008514 <UART_Start_Receive_IT+0xa4>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	227f      	movs	r2, #127	@ 0x7f
 80084e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084e4:	e016      	b.n	8008514 <UART_Start_Receive_IT+0xa4>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084ee:	d10d      	bne.n	800850c <UART_Start_Receive_IT+0x9c>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d104      	bne.n	8008502 <UART_Start_Receive_IT+0x92>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	227f      	movs	r2, #127	@ 0x7f
 80084fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008500:	e008      	b.n	8008514 <UART_Start_Receive_IT+0xa4>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	223f      	movs	r2, #63	@ 0x3f
 8008506:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800850a:	e003      	b.n	8008514 <UART_Start_Receive_IT+0xa4>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2222      	movs	r2, #34	@ 0x22
 8008520:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3308      	adds	r3, #8
 800852a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800852e:	e853 3f00 	ldrex	r3, [r3]
 8008532:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008534:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008536:	f043 0301 	orr.w	r3, r3, #1
 800853a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3308      	adds	r3, #8
 8008544:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008548:	673a      	str	r2, [r7, #112]	@ 0x70
 800854a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800854e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008556:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e3      	bne.n	8008524 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008564:	d14f      	bne.n	8008606 <UART_Start_Receive_IT+0x196>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800856c:	88fa      	ldrh	r2, [r7, #6]
 800856e:	429a      	cmp	r2, r3
 8008570:	d349      	bcc.n	8008606 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800857a:	d107      	bne.n	800858c <UART_Start_Receive_IT+0x11c>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d103      	bne.n	800858c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4a47      	ldr	r2, [pc, #284]	@ (80086a4 <UART_Start_Receive_IT+0x234>)
 8008588:	675a      	str	r2, [r3, #116]	@ 0x74
 800858a:	e002      	b.n	8008592 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4a46      	ldr	r2, [pc, #280]	@ (80086a8 <UART_Start_Receive_IT+0x238>)
 8008590:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d01a      	beq.n	80085d0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085a2:	e853 3f00 	ldrex	r3, [r3]
 80085a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80085a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	461a      	mov	r2, r3
 80085b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80085bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085be:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80085c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80085c4:	e841 2300 	strex	r3, r2, [r1]
 80085c8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80085ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1e4      	bne.n	800859a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3308      	adds	r3, #8
 80085d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085da:	e853 3f00 	ldrex	r3, [r3]
 80085de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3308      	adds	r3, #8
 80085ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80085f0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80085f2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80085f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085f8:	e841 2300 	strex	r3, r2, [r1]
 80085fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80085fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e5      	bne.n	80085d0 <UART_Start_Receive_IT+0x160>
 8008604:	e046      	b.n	8008694 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800860e:	d107      	bne.n	8008620 <UART_Start_Receive_IT+0x1b0>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d103      	bne.n	8008620 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	4a24      	ldr	r2, [pc, #144]	@ (80086ac <UART_Start_Receive_IT+0x23c>)
 800861c:	675a      	str	r2, [r3, #116]	@ 0x74
 800861e:	e002      	b.n	8008626 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4a23      	ldr	r2, [pc, #140]	@ (80086b0 <UART_Start_Receive_IT+0x240>)
 8008624:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d019      	beq.n	8008662 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008636:	e853 3f00 	ldrex	r3, [r3]
 800863a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800863c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008642:	677b      	str	r3, [r7, #116]	@ 0x74
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	461a      	mov	r2, r3
 800864a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800864c:	637b      	str	r3, [r7, #52]	@ 0x34
 800864e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008652:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008654:	e841 2300 	strex	r3, r2, [r1]
 8008658:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800865a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e6      	bne.n	800862e <UART_Start_Receive_IT+0x1be>
 8008660:	e018      	b.n	8008694 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	e853 3f00 	ldrex	r3, [r3]
 800866e:	613b      	str	r3, [r7, #16]
   return(result);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f043 0320 	orr.w	r3, r3, #32
 8008676:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	461a      	mov	r2, r3
 800867e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008680:	623b      	str	r3, [r7, #32]
 8008682:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008684:	69f9      	ldr	r1, [r7, #28]
 8008686:	6a3a      	ldr	r2, [r7, #32]
 8008688:	e841 2300 	strex	r3, r2, [r1]
 800868c:	61bb      	str	r3, [r7, #24]
   return(result);
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1e6      	bne.n	8008662 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	378c      	adds	r7, #140	@ 0x8c
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	08008f1d 	.word	0x08008f1d
 80086a8:	08008bbd 	.word	0x08008bbd
 80086ac:	08008a05 	.word	0x08008a05
 80086b0:	0800884d 	.word	0x0800884d

080086b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b095      	sub	sp, #84	@ 0x54
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c4:	e853 3f00 	ldrex	r3, [r3]
 80086c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086da:	643b      	str	r3, [r7, #64]	@ 0x40
 80086dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086e2:	e841 2300 	strex	r3, r2, [r1]
 80086e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1e6      	bne.n	80086bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3308      	adds	r3, #8
 80086f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	e853 3f00 	ldrex	r3, [r3]
 80086fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008704:	f023 0301 	bic.w	r3, r3, #1
 8008708:	64bb      	str	r3, [r7, #72]	@ 0x48
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3308      	adds	r3, #8
 8008710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008714:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1e3      	bne.n	80086ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800872a:	2b01      	cmp	r3, #1
 800872c:	d118      	bne.n	8008760 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	60bb      	str	r3, [r7, #8]
   return(result);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f023 0310 	bic.w	r3, r3, #16
 8008742:	647b      	str	r3, [r7, #68]	@ 0x44
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	461a      	mov	r2, r3
 800874a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800874c:	61bb      	str	r3, [r7, #24]
 800874e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	6979      	ldr	r1, [r7, #20]
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	e841 2300 	strex	r3, r2, [r1]
 8008758:	613b      	str	r3, [r7, #16]
   return(result);
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e6      	bne.n	800872e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2220      	movs	r2, #32
 8008764:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008774:	bf00      	nop
 8008776:	3754      	adds	r7, #84	@ 0x54
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f7ff f98c 	bl	8007abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087a4:	bf00      	nop
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b8:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	220f      	movs	r2, #15
 80087c8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	699a      	ldr	r2, [r3, #24]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f042 0208 	orr.w	r2, r2, #8
 80087d8:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2220      	movs	r2, #32
 80087de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7ff f971 	bl	8007ad0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ee:	bf00      	nop
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b088      	sub	sp, #32
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	e853 3f00 	ldrex	r3, [r3]
 800880a:	60bb      	str	r3, [r7, #8]
   return(result);
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008812:	61fb      	str	r3, [r7, #28]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	461a      	mov	r2, r3
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	61bb      	str	r3, [r7, #24]
 800881e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	6979      	ldr	r1, [r7, #20]
 8008822:	69ba      	ldr	r2, [r7, #24]
 8008824:	e841 2300 	strex	r3, r2, [r1]
 8008828:	613b      	str	r3, [r7, #16]
   return(result);
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1e6      	bne.n	80087fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2220      	movs	r2, #32
 8008834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff f932 	bl	8007aa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008844:	bf00      	nop
 8008846:	3720      	adds	r7, #32
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b09c      	sub	sp, #112	@ 0x70
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800885a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008864:	2b22      	cmp	r3, #34	@ 0x22
 8008866:	f040 80be 	bne.w	80089e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008870:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008874:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008878:	b2d9      	uxtb	r1, r3
 800887a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800887e:	b2da      	uxtb	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008884:	400a      	ands	r2, r1
 8008886:	b2d2      	uxtb	r2, r2
 8008888:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800889a:	b29b      	uxth	r3, r3
 800889c:	3b01      	subs	r3, #1
 800889e:	b29a      	uxth	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f040 80a1 	bne.w	80089f6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088bc:	e853 3f00 	ldrex	r3, [r3]
 80088c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	461a      	mov	r2, r3
 80088d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088da:	e841 2300 	strex	r3, r2, [r1]
 80088de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1e6      	bne.n	80088b4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3308      	adds	r3, #8
 80088ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f0:	e853 3f00 	ldrex	r3, [r3]
 80088f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088f8:	f023 0301 	bic.w	r3, r3, #1
 80088fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3308      	adds	r3, #8
 8008904:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008906:	647a      	str	r2, [r7, #68]	@ 0x44
 8008908:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800890c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800890e:	e841 2300 	strex	r3, r2, [r1]
 8008912:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1e5      	bne.n	80088e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2220      	movs	r2, #32
 800891e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a33      	ldr	r2, [pc, #204]	@ (8008a00 <UART_RxISR_8BIT+0x1b4>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d01f      	beq.n	8008978 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d018      	beq.n	8008978 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894e:	e853 3f00 	ldrex	r3, [r3]
 8008952:	623b      	str	r3, [r7, #32]
   return(result);
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800895a:	663b      	str	r3, [r7, #96]	@ 0x60
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	461a      	mov	r2, r3
 8008962:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008964:	633b      	str	r3, [r7, #48]	@ 0x30
 8008966:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008968:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800896a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800896c:	e841 2300 	strex	r3, r2, [r1]
 8008970:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e6      	bne.n	8008946 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800897c:	2b01      	cmp	r3, #1
 800897e:	d12e      	bne.n	80089de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	e853 3f00 	ldrex	r3, [r3]
 8008992:	60fb      	str	r3, [r7, #12]
   return(result);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f023 0310 	bic.w	r3, r3, #16
 800899a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	461a      	mov	r2, r3
 80089a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089a4:	61fb      	str	r3, [r7, #28]
 80089a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a8:	69b9      	ldr	r1, [r7, #24]
 80089aa:	69fa      	ldr	r2, [r7, #28]
 80089ac:	e841 2300 	strex	r3, r2, [r1]
 80089b0:	617b      	str	r3, [r7, #20]
   return(result);
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e6      	bne.n	8008986 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	f003 0310 	and.w	r3, r3, #16
 80089c2:	2b10      	cmp	r3, #16
 80089c4:	d103      	bne.n	80089ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2210      	movs	r2, #16
 80089cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7ff f884 	bl	8007ae4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089dc:	e00b      	b.n	80089f6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7f9 f832 	bl	8001a48 <HAL_UART_RxCpltCallback>
}
 80089e4:	e007      	b.n	80089f6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	699a      	ldr	r2, [r3, #24]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f042 0208 	orr.w	r2, r2, #8
 80089f4:	619a      	str	r2, [r3, #24]
}
 80089f6:	bf00      	nop
 80089f8:	3770      	adds	r7, #112	@ 0x70
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	40008000 	.word	0x40008000

08008a04 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b09c      	sub	sp, #112	@ 0x70
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a1c:	2b22      	cmp	r3, #34	@ 0x22
 8008a1e:	f040 80be 	bne.w	8008b9e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a30:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a32:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008a36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a40:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a46:	1c9a      	adds	r2, r3, #2
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	3b01      	subs	r3, #1
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f040 80a1 	bne.w	8008bae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a80:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a8c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a92:	e841 2300 	strex	r3, r2, [r1]
 8008a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e6      	bne.n	8008a6c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab0:	f023 0301 	bic.w	r3, r3, #1
 8008ab4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3308      	adds	r3, #8
 8008abc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008abe:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ac4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e5      	bne.n	8008a9e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a33      	ldr	r2, [pc, #204]	@ (8008bb8 <UART_RxISR_16BIT+0x1b4>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d01f      	beq.n	8008b30 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d018      	beq.n	8008b30 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	e853 3f00 	ldrex	r3, [r3]
 8008b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b1e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b24:	e841 2300 	strex	r3, r2, [r1]
 8008b28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1e6      	bne.n	8008afe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d12e      	bne.n	8008b96 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	e853 3f00 	ldrex	r3, [r3]
 8008b4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	f023 0310 	bic.w	r3, r3, #16
 8008b52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	461a      	mov	r2, r3
 8008b5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b5c:	61bb      	str	r3, [r7, #24]
 8008b5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b60:	6979      	ldr	r1, [r7, #20]
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	e841 2300 	strex	r3, r2, [r1]
 8008b68:	613b      	str	r3, [r7, #16]
   return(result);
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e6      	bne.n	8008b3e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	69db      	ldr	r3, [r3, #28]
 8008b76:	f003 0310 	and.w	r3, r3, #16
 8008b7a:	2b10      	cmp	r3, #16
 8008b7c:	d103      	bne.n	8008b86 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2210      	movs	r2, #16
 8008b84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7fe ffa8 	bl	8007ae4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b94:	e00b      	b.n	8008bae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7f8 ff56 	bl	8001a48 <HAL_UART_RxCpltCallback>
}
 8008b9c:	e007      	b.n	8008bae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	699a      	ldr	r2, [r3, #24]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f042 0208 	orr.w	r2, r2, #8
 8008bac:	619a      	str	r2, [r3, #24]
}
 8008bae:	bf00      	nop
 8008bb0:	3770      	adds	r7, #112	@ 0x70
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	40008000 	.word	0x40008000

08008bbc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b0ac      	sub	sp, #176	@ 0xb0
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008bca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	69db      	ldr	r3, [r3, #28]
 8008bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bf2:	2b22      	cmp	r3, #34	@ 0x22
 8008bf4:	f040 8182 	bne.w	8008efc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008bfe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c02:	e125      	b.n	8008e50 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c0a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c0e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008c12:	b2d9      	uxtb	r1, r3
 8008c14:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c1e:	400a      	ands	r2, r1
 8008c20:	b2d2      	uxtb	r2, r2
 8008c22:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c4e:	f003 0307 	and.w	r3, r3, #7
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d053      	beq.n	8008cfe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d011      	beq.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00b      	beq.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2201      	movs	r2, #1
 8008c74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c7c:	f043 0201 	orr.w	r2, r3, #1
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c8a:	f003 0302 	and.w	r3, r3, #2
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d011      	beq.n	8008cb6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00b      	beq.n	8008cb6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cac:	f043 0204 	orr.w	r2, r3, #4
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cba:	f003 0304 	and.w	r3, r3, #4
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d011      	beq.n	8008ce6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00b      	beq.n	8008ce6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2204      	movs	r2, #4
 8008cd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cdc:	f043 0202 	orr.w	r2, r3, #2
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d006      	beq.n	8008cfe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f7fe fee3 	bl	8007abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f040 80a2 	bne.w	8008e50 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008d1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d30:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008d34:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008d3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e4      	bne.n	8008d0c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3308      	adds	r3, #8
 8008d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008d52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d58:	f023 0301 	bic.w	r3, r3, #1
 8008d5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	3308      	adds	r3, #8
 8008d66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d6a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008d6c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008d70:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008d72:	e841 2300 	strex	r3, r2, [r1]
 8008d76:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008d78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1e1      	bne.n	8008d42 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2220      	movs	r2, #32
 8008d82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a5f      	ldr	r2, [pc, #380]	@ (8008f14 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d021      	beq.n	8008de0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d01a      	beq.n	8008de0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008db2:	e853 3f00 	ldrex	r3, [r3]
 8008db6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008dbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008dcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8008dce:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008dd2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008dd4:	e841 2300 	strex	r3, r2, [r1]
 8008dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1e4      	bne.n	8008daa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d130      	bne.n	8008e4a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df6:	e853 3f00 	ldrex	r3, [r3]
 8008dfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfe:	f023 0310 	bic.w	r3, r3, #16
 8008e02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e10:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e18:	e841 2300 	strex	r3, r2, [r1]
 8008e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1e4      	bne.n	8008dee <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	f003 0310 	and.w	r3, r3, #16
 8008e2e:	2b10      	cmp	r3, #16
 8008e30:	d103      	bne.n	8008e3a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2210      	movs	r2, #16
 8008e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7fe fe4e 	bl	8007ae4 <HAL_UARTEx_RxEventCallback>
 8008e48:	e002      	b.n	8008e50 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7f8 fdfc 	bl	8001a48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e50:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d006      	beq.n	8008e66 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e5c:	f003 0320 	and.w	r3, r3, #32
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f47f aecf 	bne.w	8008c04 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e6c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d049      	beq.n	8008f0c <UART_RxISR_8BIT_FIFOEN+0x350>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e7e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d242      	bcs.n	8008f0c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008eaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008eb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e3      	bne.n	8008e86 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a15      	ldr	r2, [pc, #84]	@ (8008f18 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008ec2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	f043 0320 	orr.w	r3, r3, #32
 8008ed8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ee6:	61bb      	str	r3, [r7, #24]
 8008ee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6979      	ldr	r1, [r7, #20]
 8008eec:	69ba      	ldr	r2, [r7, #24]
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e4      	bne.n	8008ec4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008efa:	e007      	b.n	8008f0c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	699a      	ldr	r2, [r3, #24]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f042 0208 	orr.w	r2, r2, #8
 8008f0a:	619a      	str	r2, [r3, #24]
}
 8008f0c:	bf00      	nop
 8008f0e:	37b0      	adds	r7, #176	@ 0xb0
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	40008000 	.word	0x40008000
 8008f18:	0800884d 	.word	0x0800884d

08008f1c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b0ae      	sub	sp, #184	@ 0xb8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f2a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f52:	2b22      	cmp	r3, #34	@ 0x22
 8008f54:	f040 8186 	bne.w	8009264 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f5e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f62:	e129      	b.n	80091b8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008f76:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008f7a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008f7e:	4013      	ands	r3, r2
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f8c:	1c9a      	adds	r2, r3, #2
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fb2:	f003 0307 	and.w	r3, r3, #7
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d053      	beq.n	8009062 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d011      	beq.n	8008fea <UART_RxISR_16BIT_FIFOEN+0xce>
 8008fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00b      	beq.n	8008fea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fe0:	f043 0201 	orr.w	r2, r3, #1
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fee:	f003 0302 	and.w	r3, r3, #2
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d011      	beq.n	800901a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008ff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00b      	beq.n	800901a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2202      	movs	r2, #2
 8009008:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009010:	f043 0204 	orr.w	r2, r3, #4
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800901a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800901e:	f003 0304 	and.w	r3, r3, #4
 8009022:	2b00      	cmp	r3, #0
 8009024:	d011      	beq.n	800904a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009026:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00b      	beq.n	800904a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2204      	movs	r2, #4
 8009038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009040:	f043 0202 	orr.w	r2, r3, #2
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009050:	2b00      	cmp	r3, #0
 8009052:	d006      	beq.n	8009062 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7fe fd31 	bl	8007abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009068:	b29b      	uxth	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	f040 80a4 	bne.w	80091b8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009078:	e853 3f00 	ldrex	r3, [r3]
 800907c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800907e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009084:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	461a      	mov	r2, r3
 800908e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009092:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009096:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009098:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800909a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80090a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e2      	bne.n	8009070 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3308      	adds	r3, #8
 80090b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80090ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090c0:	f023 0301 	bic.w	r3, r3, #1
 80090c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3308      	adds	r3, #8
 80090ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80090d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e1      	bne.n	80090aa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2220      	movs	r2, #32
 80090ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a5f      	ldr	r2, [pc, #380]	@ (800927c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d021      	beq.n	8009148 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d01a      	beq.n	8009148 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800911a:	e853 3f00 	ldrex	r3, [r3]
 800911e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009120:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009122:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009126:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	461a      	mov	r2, r3
 8009130:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009134:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009136:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009138:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800913a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800913c:	e841 2300 	strex	r3, r2, [r1]
 8009140:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e4      	bne.n	8009112 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800914c:	2b01      	cmp	r3, #1
 800914e:	d130      	bne.n	80091b2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915e:	e853 3f00 	ldrex	r3, [r3]
 8009162:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009166:	f023 0310 	bic.w	r3, r3, #16
 800916a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009178:	647b      	str	r3, [r7, #68]	@ 0x44
 800917a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800917e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009180:	e841 2300 	strex	r3, r2, [r1]
 8009184:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1e4      	bne.n	8009156 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	f003 0310 	and.w	r3, r3, #16
 8009196:	2b10      	cmp	r3, #16
 8009198:	d103      	bne.n	80091a2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2210      	movs	r2, #16
 80091a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7fe fc9a 	bl	8007ae4 <HAL_UARTEx_RxEventCallback>
 80091b0:	e002      	b.n	80091b8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7f8 fc48 	bl	8001a48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091b8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d006      	beq.n	80091ce <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80091c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091c4:	f003 0320 	and.w	r3, r3, #32
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f47f aecb 	bne.w	8008f64 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091d4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091d8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d049      	beq.n	8009274 <UART_RxISR_16BIT_FIFOEN+0x358>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091e6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d242      	bcs.n	8009274 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3308      	adds	r3, #8
 80091f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	623b      	str	r3, [r7, #32]
   return(result);
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009204:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3308      	adds	r3, #8
 800920e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009212:	633a      	str	r2, [r7, #48]	@ 0x30
 8009214:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800921a:	e841 2300 	strex	r3, r2, [r1]
 800921e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1e3      	bne.n	80091ee <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a15      	ldr	r2, [pc, #84]	@ (8009280 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800922a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	e853 3f00 	ldrex	r3, [r3]
 8009238:	60fb      	str	r3, [r7, #12]
   return(result);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f043 0320 	orr.w	r3, r3, #32
 8009240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	461a      	mov	r2, r3
 800924a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800924e:	61fb      	str	r3, [r7, #28]
 8009250:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009252:	69b9      	ldr	r1, [r7, #24]
 8009254:	69fa      	ldr	r2, [r7, #28]
 8009256:	e841 2300 	strex	r3, r2, [r1]
 800925a:	617b      	str	r3, [r7, #20]
   return(result);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1e4      	bne.n	800922c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009262:	e007      	b.n	8009274 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	699a      	ldr	r2, [r3, #24]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0208 	orr.w	r2, r2, #8
 8009272:	619a      	str	r2, [r3, #24]
}
 8009274:	bf00      	nop
 8009276:	37b8      	adds	r7, #184	@ 0xb8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	40008000 	.word	0x40008000
 8009280:	08008a05 	.word	0x08008a05

08009284 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d101      	bne.n	80092d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80092d2:	2302      	movs	r3, #2
 80092d4:	e027      	b.n	8009326 <HAL_UARTEx_DisableFifoMode+0x66>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2224      	movs	r2, #36	@ 0x24
 80092e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0201 	bic.w	r2, r2, #1
 80092fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009304:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2220      	movs	r2, #32
 8009318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009342:	2b01      	cmp	r3, #1
 8009344:	d101      	bne.n	800934a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009346:	2302      	movs	r3, #2
 8009348:	e02d      	b.n	80093a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2224      	movs	r2, #36	@ 0x24
 8009356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0201 	bic.w	r2, r2, #1
 8009370:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	430a      	orrs	r2, r1
 8009384:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f850 	bl	800942c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2220      	movs	r2, #32
 8009398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b084      	sub	sp, #16
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d101      	bne.n	80093c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093c2:	2302      	movs	r3, #2
 80093c4:	e02d      	b.n	8009422 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2224      	movs	r2, #36	@ 0x24
 80093d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 0201 	bic.w	r2, r2, #1
 80093ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	430a      	orrs	r2, r1
 8009400:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f812 	bl	800942c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2220      	movs	r2, #32
 8009414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009438:	2b00      	cmp	r3, #0
 800943a:	d108      	bne.n	800944e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800944c:	e031      	b.n	80094b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800944e:	2308      	movs	r3, #8
 8009450:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009452:	2308      	movs	r3, #8
 8009454:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	0e5b      	lsrs	r3, r3, #25
 800945e:	b2db      	uxtb	r3, r3
 8009460:	f003 0307 	and.w	r3, r3, #7
 8009464:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	0f5b      	lsrs	r3, r3, #29
 800946e:	b2db      	uxtb	r3, r3
 8009470:	f003 0307 	and.w	r3, r3, #7
 8009474:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009476:	7bbb      	ldrb	r3, [r7, #14]
 8009478:	7b3a      	ldrb	r2, [r7, #12]
 800947a:	4911      	ldr	r1, [pc, #68]	@ (80094c0 <UARTEx_SetNbDataToProcess+0x94>)
 800947c:	5c8a      	ldrb	r2, [r1, r2]
 800947e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009482:	7b3a      	ldrb	r2, [r7, #12]
 8009484:	490f      	ldr	r1, [pc, #60]	@ (80094c4 <UARTEx_SetNbDataToProcess+0x98>)
 8009486:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009488:	fb93 f3f2 	sdiv	r3, r3, r2
 800948c:	b29a      	uxth	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	7b7a      	ldrb	r2, [r7, #13]
 8009498:	4909      	ldr	r1, [pc, #36]	@ (80094c0 <UARTEx_SetNbDataToProcess+0x94>)
 800949a:	5c8a      	ldrb	r2, [r1, r2]
 800949c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094a0:	7b7a      	ldrb	r2, [r7, #13]
 80094a2:	4908      	ldr	r1, [pc, #32]	@ (80094c4 <UARTEx_SetNbDataToProcess+0x98>)
 80094a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80094b2:	bf00      	nop
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	0800f574 	.word	0x0800f574
 80094c4:	0800f57c 	.word	0x0800f57c

080094c8 <__cvt>:
 80094c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094cc:	ec57 6b10 	vmov	r6, r7, d0
 80094d0:	2f00      	cmp	r7, #0
 80094d2:	460c      	mov	r4, r1
 80094d4:	4619      	mov	r1, r3
 80094d6:	463b      	mov	r3, r7
 80094d8:	bfb4      	ite	lt
 80094da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80094de:	2300      	movge	r3, #0
 80094e0:	4691      	mov	r9, r2
 80094e2:	bfbf      	itttt	lt
 80094e4:	4632      	movlt	r2, r6
 80094e6:	461f      	movlt	r7, r3
 80094e8:	232d      	movlt	r3, #45	@ 0x2d
 80094ea:	4616      	movlt	r6, r2
 80094ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80094f0:	700b      	strb	r3, [r1, #0]
 80094f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094f4:	f023 0820 	bic.w	r8, r3, #32
 80094f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80094fc:	d005      	beq.n	800950a <__cvt+0x42>
 80094fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009502:	d100      	bne.n	8009506 <__cvt+0x3e>
 8009504:	3401      	adds	r4, #1
 8009506:	2102      	movs	r1, #2
 8009508:	e000      	b.n	800950c <__cvt+0x44>
 800950a:	2103      	movs	r1, #3
 800950c:	ab03      	add	r3, sp, #12
 800950e:	4622      	mov	r2, r4
 8009510:	9301      	str	r3, [sp, #4]
 8009512:	ab02      	add	r3, sp, #8
 8009514:	ec47 6b10 	vmov	d0, r6, r7
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	4653      	mov	r3, sl
 800951c:	f001 ffb4 	bl	800b488 <_dtoa_r>
 8009520:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009524:	4605      	mov	r5, r0
 8009526:	d119      	bne.n	800955c <__cvt+0x94>
 8009528:	f019 0f01 	tst.w	r9, #1
 800952c:	d00e      	beq.n	800954c <__cvt+0x84>
 800952e:	eb00 0904 	add.w	r9, r0, r4
 8009532:	2200      	movs	r2, #0
 8009534:	2300      	movs	r3, #0
 8009536:	4630      	mov	r0, r6
 8009538:	4639      	mov	r1, r7
 800953a:	f7f7 fab3 	bl	8000aa4 <__aeabi_dcmpeq>
 800953e:	b108      	cbz	r0, 8009544 <__cvt+0x7c>
 8009540:	f8cd 900c 	str.w	r9, [sp, #12]
 8009544:	2230      	movs	r2, #48	@ 0x30
 8009546:	9b03      	ldr	r3, [sp, #12]
 8009548:	454b      	cmp	r3, r9
 800954a:	d31e      	bcc.n	800958a <__cvt+0xc2>
 800954c:	9b03      	ldr	r3, [sp, #12]
 800954e:	4628      	mov	r0, r5
 8009550:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009552:	1b5b      	subs	r3, r3, r5
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	b004      	add	sp, #16
 8009558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009560:	eb00 0904 	add.w	r9, r0, r4
 8009564:	d1e5      	bne.n	8009532 <__cvt+0x6a>
 8009566:	7803      	ldrb	r3, [r0, #0]
 8009568:	2b30      	cmp	r3, #48	@ 0x30
 800956a:	d10a      	bne.n	8009582 <__cvt+0xba>
 800956c:	2200      	movs	r2, #0
 800956e:	2300      	movs	r3, #0
 8009570:	4630      	mov	r0, r6
 8009572:	4639      	mov	r1, r7
 8009574:	f7f7 fa96 	bl	8000aa4 <__aeabi_dcmpeq>
 8009578:	b918      	cbnz	r0, 8009582 <__cvt+0xba>
 800957a:	f1c4 0401 	rsb	r4, r4, #1
 800957e:	f8ca 4000 	str.w	r4, [sl]
 8009582:	f8da 3000 	ldr.w	r3, [sl]
 8009586:	4499      	add	r9, r3
 8009588:	e7d3      	b.n	8009532 <__cvt+0x6a>
 800958a:	1c59      	adds	r1, r3, #1
 800958c:	9103      	str	r1, [sp, #12]
 800958e:	701a      	strb	r2, [r3, #0]
 8009590:	e7d9      	b.n	8009546 <__cvt+0x7e>

08009592 <__exponent>:
 8009592:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009594:	2900      	cmp	r1, #0
 8009596:	7002      	strb	r2, [r0, #0]
 8009598:	bfba      	itte	lt
 800959a:	4249      	neglt	r1, r1
 800959c:	232d      	movlt	r3, #45	@ 0x2d
 800959e:	232b      	movge	r3, #43	@ 0x2b
 80095a0:	2909      	cmp	r1, #9
 80095a2:	7043      	strb	r3, [r0, #1]
 80095a4:	dd28      	ble.n	80095f8 <__exponent+0x66>
 80095a6:	f10d 0307 	add.w	r3, sp, #7
 80095aa:	270a      	movs	r7, #10
 80095ac:	461d      	mov	r5, r3
 80095ae:	461a      	mov	r2, r3
 80095b0:	3b01      	subs	r3, #1
 80095b2:	fbb1 f6f7 	udiv	r6, r1, r7
 80095b6:	fb07 1416 	mls	r4, r7, r6, r1
 80095ba:	3430      	adds	r4, #48	@ 0x30
 80095bc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80095c0:	460c      	mov	r4, r1
 80095c2:	4631      	mov	r1, r6
 80095c4:	2c63      	cmp	r4, #99	@ 0x63
 80095c6:	dcf2      	bgt.n	80095ae <__exponent+0x1c>
 80095c8:	3130      	adds	r1, #48	@ 0x30
 80095ca:	1e94      	subs	r4, r2, #2
 80095cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80095d0:	1c41      	adds	r1, r0, #1
 80095d2:	4623      	mov	r3, r4
 80095d4:	42ab      	cmp	r3, r5
 80095d6:	d30a      	bcc.n	80095ee <__exponent+0x5c>
 80095d8:	f10d 0309 	add.w	r3, sp, #9
 80095dc:	1a9b      	subs	r3, r3, r2
 80095de:	42ac      	cmp	r4, r5
 80095e0:	bf88      	it	hi
 80095e2:	2300      	movhi	r3, #0
 80095e4:	3302      	adds	r3, #2
 80095e6:	4403      	add	r3, r0
 80095e8:	1a18      	subs	r0, r3, r0
 80095ea:	b003      	add	sp, #12
 80095ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ee:	f813 6b01 	ldrb.w	r6, [r3], #1
 80095f2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80095f6:	e7ed      	b.n	80095d4 <__exponent+0x42>
 80095f8:	2330      	movs	r3, #48	@ 0x30
 80095fa:	3130      	adds	r1, #48	@ 0x30
 80095fc:	7083      	strb	r3, [r0, #2]
 80095fe:	1d03      	adds	r3, r0, #4
 8009600:	70c1      	strb	r1, [r0, #3]
 8009602:	e7f1      	b.n	80095e8 <__exponent+0x56>

08009604 <_printf_float>:
 8009604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009608:	b08d      	sub	sp, #52	@ 0x34
 800960a:	460c      	mov	r4, r1
 800960c:	4616      	mov	r6, r2
 800960e:	461f      	mov	r7, r3
 8009610:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009614:	4605      	mov	r5, r0
 8009616:	f001 fdeb 	bl	800b1f0 <_localeconv_r>
 800961a:	6803      	ldr	r3, [r0, #0]
 800961c:	4618      	mov	r0, r3
 800961e:	9304      	str	r3, [sp, #16]
 8009620:	f7f6 fe14 	bl	800024c <strlen>
 8009624:	2300      	movs	r3, #0
 8009626:	9005      	str	r0, [sp, #20]
 8009628:	930a      	str	r3, [sp, #40]	@ 0x28
 800962a:	f8d8 3000 	ldr.w	r3, [r8]
 800962e:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009632:	3307      	adds	r3, #7
 8009634:	f8d4 b000 	ldr.w	fp, [r4]
 8009638:	f023 0307 	bic.w	r3, r3, #7
 800963c:	f103 0208 	add.w	r2, r3, #8
 8009640:	f8c8 2000 	str.w	r2, [r8]
 8009644:	f04f 32ff 	mov.w	r2, #4294967295
 8009648:	e9d3 8900 	ldrd	r8, r9, [r3]
 800964c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009650:	f8cd 8018 	str.w	r8, [sp, #24]
 8009654:	9307      	str	r3, [sp, #28]
 8009656:	4b9d      	ldr	r3, [pc, #628]	@ (80098cc <_printf_float+0x2c8>)
 8009658:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800965c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009660:	f7f7 fa52 	bl	8000b08 <__aeabi_dcmpun>
 8009664:	bb70      	cbnz	r0, 80096c4 <_printf_float+0xc0>
 8009666:	f04f 32ff 	mov.w	r2, #4294967295
 800966a:	4b98      	ldr	r3, [pc, #608]	@ (80098cc <_printf_float+0x2c8>)
 800966c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009670:	f7f7 fa2c 	bl	8000acc <__aeabi_dcmple>
 8009674:	bb30      	cbnz	r0, 80096c4 <_printf_float+0xc0>
 8009676:	2200      	movs	r2, #0
 8009678:	2300      	movs	r3, #0
 800967a:	4640      	mov	r0, r8
 800967c:	4649      	mov	r1, r9
 800967e:	f7f7 fa1b 	bl	8000ab8 <__aeabi_dcmplt>
 8009682:	b110      	cbz	r0, 800968a <_printf_float+0x86>
 8009684:	232d      	movs	r3, #45	@ 0x2d
 8009686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800968a:	4a91      	ldr	r2, [pc, #580]	@ (80098d0 <_printf_float+0x2cc>)
 800968c:	4b91      	ldr	r3, [pc, #580]	@ (80098d4 <_printf_float+0x2d0>)
 800968e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009692:	bf8c      	ite	hi
 8009694:	4690      	movhi	r8, r2
 8009696:	4698      	movls	r8, r3
 8009698:	2303      	movs	r3, #3
 800969a:	f04f 0900 	mov.w	r9, #0
 800969e:	6123      	str	r3, [r4, #16]
 80096a0:	f02b 0304 	bic.w	r3, fp, #4
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	4633      	mov	r3, r6
 80096a8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80096aa:	4621      	mov	r1, r4
 80096ac:	4628      	mov	r0, r5
 80096ae:	9700      	str	r7, [sp, #0]
 80096b0:	f000 f9d2 	bl	8009a58 <_printf_common>
 80096b4:	3001      	adds	r0, #1
 80096b6:	f040 808d 	bne.w	80097d4 <_printf_float+0x1d0>
 80096ba:	f04f 30ff 	mov.w	r0, #4294967295
 80096be:	b00d      	add	sp, #52	@ 0x34
 80096c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c4:	4642      	mov	r2, r8
 80096c6:	464b      	mov	r3, r9
 80096c8:	4640      	mov	r0, r8
 80096ca:	4649      	mov	r1, r9
 80096cc:	f7f7 fa1c 	bl	8000b08 <__aeabi_dcmpun>
 80096d0:	b140      	cbz	r0, 80096e4 <_printf_float+0xe0>
 80096d2:	464b      	mov	r3, r9
 80096d4:	4a80      	ldr	r2, [pc, #512]	@ (80098d8 <_printf_float+0x2d4>)
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	bfbc      	itt	lt
 80096da:	232d      	movlt	r3, #45	@ 0x2d
 80096dc:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80096e0:	4b7e      	ldr	r3, [pc, #504]	@ (80098dc <_printf_float+0x2d8>)
 80096e2:	e7d4      	b.n	800968e <_printf_float+0x8a>
 80096e4:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80096e8:	6863      	ldr	r3, [r4, #4]
 80096ea:	9206      	str	r2, [sp, #24]
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	d13b      	bne.n	8009768 <_printf_float+0x164>
 80096f0:	2306      	movs	r3, #6
 80096f2:	6063      	str	r3, [r4, #4]
 80096f4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80096f8:	2300      	movs	r3, #0
 80096fa:	4628      	mov	r0, r5
 80096fc:	6022      	str	r2, [r4, #0]
 80096fe:	9303      	str	r3, [sp, #12]
 8009700:	ab0a      	add	r3, sp, #40	@ 0x28
 8009702:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009706:	ab09      	add	r3, sp, #36	@ 0x24
 8009708:	ec49 8b10 	vmov	d0, r8, r9
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009712:	6861      	ldr	r1, [r4, #4]
 8009714:	f7ff fed8 	bl	80094c8 <__cvt>
 8009718:	9b06      	ldr	r3, [sp, #24]
 800971a:	4680      	mov	r8, r0
 800971c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800971e:	2b47      	cmp	r3, #71	@ 0x47
 8009720:	d129      	bne.n	8009776 <_printf_float+0x172>
 8009722:	1cc8      	adds	r0, r1, #3
 8009724:	db02      	blt.n	800972c <_printf_float+0x128>
 8009726:	6863      	ldr	r3, [r4, #4]
 8009728:	4299      	cmp	r1, r3
 800972a:	dd41      	ble.n	80097b0 <_printf_float+0x1ac>
 800972c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009730:	fa5f fa8a 	uxtb.w	sl, sl
 8009734:	3901      	subs	r1, #1
 8009736:	4652      	mov	r2, sl
 8009738:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800973c:	9109      	str	r1, [sp, #36]	@ 0x24
 800973e:	f7ff ff28 	bl	8009592 <__exponent>
 8009742:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009744:	4681      	mov	r9, r0
 8009746:	1813      	adds	r3, r2, r0
 8009748:	2a01      	cmp	r2, #1
 800974a:	6123      	str	r3, [r4, #16]
 800974c:	dc02      	bgt.n	8009754 <_printf_float+0x150>
 800974e:	6822      	ldr	r2, [r4, #0]
 8009750:	07d2      	lsls	r2, r2, #31
 8009752:	d501      	bpl.n	8009758 <_printf_float+0x154>
 8009754:	3301      	adds	r3, #1
 8009756:	6123      	str	r3, [r4, #16]
 8009758:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800975c:	2b00      	cmp	r3, #0
 800975e:	d0a2      	beq.n	80096a6 <_printf_float+0xa2>
 8009760:	232d      	movs	r3, #45	@ 0x2d
 8009762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009766:	e79e      	b.n	80096a6 <_printf_float+0xa2>
 8009768:	9a06      	ldr	r2, [sp, #24]
 800976a:	2a47      	cmp	r2, #71	@ 0x47
 800976c:	d1c2      	bne.n	80096f4 <_printf_float+0xf0>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1c0      	bne.n	80096f4 <_printf_float+0xf0>
 8009772:	2301      	movs	r3, #1
 8009774:	e7bd      	b.n	80096f2 <_printf_float+0xee>
 8009776:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800977a:	d9db      	bls.n	8009734 <_printf_float+0x130>
 800977c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009780:	d118      	bne.n	80097b4 <_printf_float+0x1b0>
 8009782:	2900      	cmp	r1, #0
 8009784:	6863      	ldr	r3, [r4, #4]
 8009786:	dd0b      	ble.n	80097a0 <_printf_float+0x19c>
 8009788:	6121      	str	r1, [r4, #16]
 800978a:	b913      	cbnz	r3, 8009792 <_printf_float+0x18e>
 800978c:	6822      	ldr	r2, [r4, #0]
 800978e:	07d0      	lsls	r0, r2, #31
 8009790:	d502      	bpl.n	8009798 <_printf_float+0x194>
 8009792:	3301      	adds	r3, #1
 8009794:	440b      	add	r3, r1
 8009796:	6123      	str	r3, [r4, #16]
 8009798:	f04f 0900 	mov.w	r9, #0
 800979c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800979e:	e7db      	b.n	8009758 <_printf_float+0x154>
 80097a0:	b913      	cbnz	r3, 80097a8 <_printf_float+0x1a4>
 80097a2:	6822      	ldr	r2, [r4, #0]
 80097a4:	07d2      	lsls	r2, r2, #31
 80097a6:	d501      	bpl.n	80097ac <_printf_float+0x1a8>
 80097a8:	3302      	adds	r3, #2
 80097aa:	e7f4      	b.n	8009796 <_printf_float+0x192>
 80097ac:	2301      	movs	r3, #1
 80097ae:	e7f2      	b.n	8009796 <_printf_float+0x192>
 80097b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80097b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097b6:	4299      	cmp	r1, r3
 80097b8:	db05      	blt.n	80097c6 <_printf_float+0x1c2>
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	6121      	str	r1, [r4, #16]
 80097be:	07d8      	lsls	r0, r3, #31
 80097c0:	d5ea      	bpl.n	8009798 <_printf_float+0x194>
 80097c2:	1c4b      	adds	r3, r1, #1
 80097c4:	e7e7      	b.n	8009796 <_printf_float+0x192>
 80097c6:	2900      	cmp	r1, #0
 80097c8:	bfd4      	ite	le
 80097ca:	f1c1 0202 	rsble	r2, r1, #2
 80097ce:	2201      	movgt	r2, #1
 80097d0:	4413      	add	r3, r2
 80097d2:	e7e0      	b.n	8009796 <_printf_float+0x192>
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	055a      	lsls	r2, r3, #21
 80097d8:	d407      	bmi.n	80097ea <_printf_float+0x1e6>
 80097da:	6923      	ldr	r3, [r4, #16]
 80097dc:	4642      	mov	r2, r8
 80097de:	4631      	mov	r1, r6
 80097e0:	4628      	mov	r0, r5
 80097e2:	47b8      	blx	r7
 80097e4:	3001      	adds	r0, #1
 80097e6:	d12b      	bne.n	8009840 <_printf_float+0x23c>
 80097e8:	e767      	b.n	80096ba <_printf_float+0xb6>
 80097ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80097ee:	f240 80dd 	bls.w	80099ac <_printf_float+0x3a8>
 80097f2:	2200      	movs	r2, #0
 80097f4:	2300      	movs	r3, #0
 80097f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80097fa:	f7f7 f953 	bl	8000aa4 <__aeabi_dcmpeq>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d033      	beq.n	800986a <_printf_float+0x266>
 8009802:	2301      	movs	r3, #1
 8009804:	4a36      	ldr	r2, [pc, #216]	@ (80098e0 <_printf_float+0x2dc>)
 8009806:	4631      	mov	r1, r6
 8009808:	4628      	mov	r0, r5
 800980a:	47b8      	blx	r7
 800980c:	3001      	adds	r0, #1
 800980e:	f43f af54 	beq.w	80096ba <_printf_float+0xb6>
 8009812:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009816:	4543      	cmp	r3, r8
 8009818:	db02      	blt.n	8009820 <_printf_float+0x21c>
 800981a:	6823      	ldr	r3, [r4, #0]
 800981c:	07d8      	lsls	r0, r3, #31
 800981e:	d50f      	bpl.n	8009840 <_printf_float+0x23c>
 8009820:	4631      	mov	r1, r6
 8009822:	4628      	mov	r0, r5
 8009824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009828:	47b8      	blx	r7
 800982a:	3001      	adds	r0, #1
 800982c:	f43f af45 	beq.w	80096ba <_printf_float+0xb6>
 8009830:	f04f 0900 	mov.w	r9, #0
 8009834:	f108 38ff 	add.w	r8, r8, #4294967295
 8009838:	f104 0a1a 	add.w	sl, r4, #26
 800983c:	45c8      	cmp	r8, r9
 800983e:	dc09      	bgt.n	8009854 <_printf_float+0x250>
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	079b      	lsls	r3, r3, #30
 8009844:	f100 8103 	bmi.w	8009a4e <_printf_float+0x44a>
 8009848:	68e0      	ldr	r0, [r4, #12]
 800984a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800984c:	4298      	cmp	r0, r3
 800984e:	bfb8      	it	lt
 8009850:	4618      	movlt	r0, r3
 8009852:	e734      	b.n	80096be <_printf_float+0xba>
 8009854:	2301      	movs	r3, #1
 8009856:	4652      	mov	r2, sl
 8009858:	4631      	mov	r1, r6
 800985a:	4628      	mov	r0, r5
 800985c:	47b8      	blx	r7
 800985e:	3001      	adds	r0, #1
 8009860:	f43f af2b 	beq.w	80096ba <_printf_float+0xb6>
 8009864:	f109 0901 	add.w	r9, r9, #1
 8009868:	e7e8      	b.n	800983c <_printf_float+0x238>
 800986a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800986c:	2b00      	cmp	r3, #0
 800986e:	dc39      	bgt.n	80098e4 <_printf_float+0x2e0>
 8009870:	2301      	movs	r3, #1
 8009872:	4a1b      	ldr	r2, [pc, #108]	@ (80098e0 <_printf_float+0x2dc>)
 8009874:	4631      	mov	r1, r6
 8009876:	4628      	mov	r0, r5
 8009878:	47b8      	blx	r7
 800987a:	3001      	adds	r0, #1
 800987c:	f43f af1d 	beq.w	80096ba <_printf_float+0xb6>
 8009880:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009884:	ea59 0303 	orrs.w	r3, r9, r3
 8009888:	d102      	bne.n	8009890 <_printf_float+0x28c>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	07d9      	lsls	r1, r3, #31
 800988e:	d5d7      	bpl.n	8009840 <_printf_float+0x23c>
 8009890:	4631      	mov	r1, r6
 8009892:	4628      	mov	r0, r5
 8009894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009898:	47b8      	blx	r7
 800989a:	3001      	adds	r0, #1
 800989c:	f43f af0d 	beq.w	80096ba <_printf_float+0xb6>
 80098a0:	f04f 0a00 	mov.w	sl, #0
 80098a4:	f104 0b1a 	add.w	fp, r4, #26
 80098a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098aa:	425b      	negs	r3, r3
 80098ac:	4553      	cmp	r3, sl
 80098ae:	dc01      	bgt.n	80098b4 <_printf_float+0x2b0>
 80098b0:	464b      	mov	r3, r9
 80098b2:	e793      	b.n	80097dc <_printf_float+0x1d8>
 80098b4:	2301      	movs	r3, #1
 80098b6:	465a      	mov	r2, fp
 80098b8:	4631      	mov	r1, r6
 80098ba:	4628      	mov	r0, r5
 80098bc:	47b8      	blx	r7
 80098be:	3001      	adds	r0, #1
 80098c0:	f43f aefb 	beq.w	80096ba <_printf_float+0xb6>
 80098c4:	f10a 0a01 	add.w	sl, sl, #1
 80098c8:	e7ee      	b.n	80098a8 <_printf_float+0x2a4>
 80098ca:	bf00      	nop
 80098cc:	7fefffff 	.word	0x7fefffff
 80098d0:	0800f588 	.word	0x0800f588
 80098d4:	0800f584 	.word	0x0800f584
 80098d8:	0800f590 	.word	0x0800f590
 80098dc:	0800f58c 	.word	0x0800f58c
 80098e0:	0800f7ad 	.word	0x0800f7ad
 80098e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80098e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80098ea:	4553      	cmp	r3, sl
 80098ec:	bfa8      	it	ge
 80098ee:	4653      	movge	r3, sl
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	4699      	mov	r9, r3
 80098f4:	dc36      	bgt.n	8009964 <_printf_float+0x360>
 80098f6:	f04f 0b00 	mov.w	fp, #0
 80098fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098fe:	f104 021a 	add.w	r2, r4, #26
 8009902:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009904:	9306      	str	r3, [sp, #24]
 8009906:	eba3 0309 	sub.w	r3, r3, r9
 800990a:	455b      	cmp	r3, fp
 800990c:	dc31      	bgt.n	8009972 <_printf_float+0x36e>
 800990e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009910:	459a      	cmp	sl, r3
 8009912:	dc3a      	bgt.n	800998a <_printf_float+0x386>
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	07da      	lsls	r2, r3, #31
 8009918:	d437      	bmi.n	800998a <_printf_float+0x386>
 800991a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800991c:	ebaa 0903 	sub.w	r9, sl, r3
 8009920:	9b06      	ldr	r3, [sp, #24]
 8009922:	ebaa 0303 	sub.w	r3, sl, r3
 8009926:	4599      	cmp	r9, r3
 8009928:	bfa8      	it	ge
 800992a:	4699      	movge	r9, r3
 800992c:	f1b9 0f00 	cmp.w	r9, #0
 8009930:	dc33      	bgt.n	800999a <_printf_float+0x396>
 8009932:	f04f 0800 	mov.w	r8, #0
 8009936:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800993a:	f104 0b1a 	add.w	fp, r4, #26
 800993e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009940:	ebaa 0303 	sub.w	r3, sl, r3
 8009944:	eba3 0309 	sub.w	r3, r3, r9
 8009948:	4543      	cmp	r3, r8
 800994a:	f77f af79 	ble.w	8009840 <_printf_float+0x23c>
 800994e:	2301      	movs	r3, #1
 8009950:	465a      	mov	r2, fp
 8009952:	4631      	mov	r1, r6
 8009954:	4628      	mov	r0, r5
 8009956:	47b8      	blx	r7
 8009958:	3001      	adds	r0, #1
 800995a:	f43f aeae 	beq.w	80096ba <_printf_float+0xb6>
 800995e:	f108 0801 	add.w	r8, r8, #1
 8009962:	e7ec      	b.n	800993e <_printf_float+0x33a>
 8009964:	4642      	mov	r2, r8
 8009966:	4631      	mov	r1, r6
 8009968:	4628      	mov	r0, r5
 800996a:	47b8      	blx	r7
 800996c:	3001      	adds	r0, #1
 800996e:	d1c2      	bne.n	80098f6 <_printf_float+0x2f2>
 8009970:	e6a3      	b.n	80096ba <_printf_float+0xb6>
 8009972:	2301      	movs	r3, #1
 8009974:	4631      	mov	r1, r6
 8009976:	4628      	mov	r0, r5
 8009978:	9206      	str	r2, [sp, #24]
 800997a:	47b8      	blx	r7
 800997c:	3001      	adds	r0, #1
 800997e:	f43f ae9c 	beq.w	80096ba <_printf_float+0xb6>
 8009982:	f10b 0b01 	add.w	fp, fp, #1
 8009986:	9a06      	ldr	r2, [sp, #24]
 8009988:	e7bb      	b.n	8009902 <_printf_float+0x2fe>
 800998a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800998e:	4631      	mov	r1, r6
 8009990:	4628      	mov	r0, r5
 8009992:	47b8      	blx	r7
 8009994:	3001      	adds	r0, #1
 8009996:	d1c0      	bne.n	800991a <_printf_float+0x316>
 8009998:	e68f      	b.n	80096ba <_printf_float+0xb6>
 800999a:	9a06      	ldr	r2, [sp, #24]
 800999c:	464b      	mov	r3, r9
 800999e:	4631      	mov	r1, r6
 80099a0:	4628      	mov	r0, r5
 80099a2:	4442      	add	r2, r8
 80099a4:	47b8      	blx	r7
 80099a6:	3001      	adds	r0, #1
 80099a8:	d1c3      	bne.n	8009932 <_printf_float+0x32e>
 80099aa:	e686      	b.n	80096ba <_printf_float+0xb6>
 80099ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80099b0:	f1ba 0f01 	cmp.w	sl, #1
 80099b4:	dc01      	bgt.n	80099ba <_printf_float+0x3b6>
 80099b6:	07db      	lsls	r3, r3, #31
 80099b8:	d536      	bpl.n	8009a28 <_printf_float+0x424>
 80099ba:	2301      	movs	r3, #1
 80099bc:	4642      	mov	r2, r8
 80099be:	4631      	mov	r1, r6
 80099c0:	4628      	mov	r0, r5
 80099c2:	47b8      	blx	r7
 80099c4:	3001      	adds	r0, #1
 80099c6:	f43f ae78 	beq.w	80096ba <_printf_float+0xb6>
 80099ca:	4631      	mov	r1, r6
 80099cc:	4628      	mov	r0, r5
 80099ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099d2:	47b8      	blx	r7
 80099d4:	3001      	adds	r0, #1
 80099d6:	f43f ae70 	beq.w	80096ba <_printf_float+0xb6>
 80099da:	2200      	movs	r2, #0
 80099dc:	2300      	movs	r3, #0
 80099de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80099e6:	f7f7 f85d 	bl	8000aa4 <__aeabi_dcmpeq>
 80099ea:	b9c0      	cbnz	r0, 8009a1e <_printf_float+0x41a>
 80099ec:	4653      	mov	r3, sl
 80099ee:	f108 0201 	add.w	r2, r8, #1
 80099f2:	4631      	mov	r1, r6
 80099f4:	4628      	mov	r0, r5
 80099f6:	47b8      	blx	r7
 80099f8:	3001      	adds	r0, #1
 80099fa:	d10c      	bne.n	8009a16 <_printf_float+0x412>
 80099fc:	e65d      	b.n	80096ba <_printf_float+0xb6>
 80099fe:	2301      	movs	r3, #1
 8009a00:	465a      	mov	r2, fp
 8009a02:	4631      	mov	r1, r6
 8009a04:	4628      	mov	r0, r5
 8009a06:	47b8      	blx	r7
 8009a08:	3001      	adds	r0, #1
 8009a0a:	f43f ae56 	beq.w	80096ba <_printf_float+0xb6>
 8009a0e:	f108 0801 	add.w	r8, r8, #1
 8009a12:	45d0      	cmp	r8, sl
 8009a14:	dbf3      	blt.n	80099fe <_printf_float+0x3fa>
 8009a16:	464b      	mov	r3, r9
 8009a18:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009a1c:	e6df      	b.n	80097de <_printf_float+0x1da>
 8009a1e:	f04f 0800 	mov.w	r8, #0
 8009a22:	f104 0b1a 	add.w	fp, r4, #26
 8009a26:	e7f4      	b.n	8009a12 <_printf_float+0x40e>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	4642      	mov	r2, r8
 8009a2c:	e7e1      	b.n	80099f2 <_printf_float+0x3ee>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	464a      	mov	r2, r9
 8009a32:	4631      	mov	r1, r6
 8009a34:	4628      	mov	r0, r5
 8009a36:	47b8      	blx	r7
 8009a38:	3001      	adds	r0, #1
 8009a3a:	f43f ae3e 	beq.w	80096ba <_printf_float+0xb6>
 8009a3e:	f108 0801 	add.w	r8, r8, #1
 8009a42:	68e3      	ldr	r3, [r4, #12]
 8009a44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a46:	1a5b      	subs	r3, r3, r1
 8009a48:	4543      	cmp	r3, r8
 8009a4a:	dcf0      	bgt.n	8009a2e <_printf_float+0x42a>
 8009a4c:	e6fc      	b.n	8009848 <_printf_float+0x244>
 8009a4e:	f04f 0800 	mov.w	r8, #0
 8009a52:	f104 0919 	add.w	r9, r4, #25
 8009a56:	e7f4      	b.n	8009a42 <_printf_float+0x43e>

08009a58 <_printf_common>:
 8009a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a5c:	4616      	mov	r6, r2
 8009a5e:	4698      	mov	r8, r3
 8009a60:	688a      	ldr	r2, [r1, #8]
 8009a62:	4607      	mov	r7, r0
 8009a64:	690b      	ldr	r3, [r1, #16]
 8009a66:	460c      	mov	r4, r1
 8009a68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	bfb8      	it	lt
 8009a70:	4613      	movlt	r3, r2
 8009a72:	6033      	str	r3, [r6, #0]
 8009a74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a78:	b10a      	cbz	r2, 8009a7e <_printf_common+0x26>
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	6033      	str	r3, [r6, #0]
 8009a7e:	6823      	ldr	r3, [r4, #0]
 8009a80:	0699      	lsls	r1, r3, #26
 8009a82:	bf42      	ittt	mi
 8009a84:	6833      	ldrmi	r3, [r6, #0]
 8009a86:	3302      	addmi	r3, #2
 8009a88:	6033      	strmi	r3, [r6, #0]
 8009a8a:	6825      	ldr	r5, [r4, #0]
 8009a8c:	f015 0506 	ands.w	r5, r5, #6
 8009a90:	d106      	bne.n	8009aa0 <_printf_common+0x48>
 8009a92:	f104 0a19 	add.w	sl, r4, #25
 8009a96:	68e3      	ldr	r3, [r4, #12]
 8009a98:	6832      	ldr	r2, [r6, #0]
 8009a9a:	1a9b      	subs	r3, r3, r2
 8009a9c:	42ab      	cmp	r3, r5
 8009a9e:	dc2b      	bgt.n	8009af8 <_printf_common+0xa0>
 8009aa0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009aa4:	6822      	ldr	r2, [r4, #0]
 8009aa6:	3b00      	subs	r3, #0
 8009aa8:	bf18      	it	ne
 8009aaa:	2301      	movne	r3, #1
 8009aac:	0692      	lsls	r2, r2, #26
 8009aae:	d430      	bmi.n	8009b12 <_printf_common+0xba>
 8009ab0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ab4:	4641      	mov	r1, r8
 8009ab6:	4638      	mov	r0, r7
 8009ab8:	47c8      	blx	r9
 8009aba:	3001      	adds	r0, #1
 8009abc:	d023      	beq.n	8009b06 <_printf_common+0xae>
 8009abe:	6823      	ldr	r3, [r4, #0]
 8009ac0:	341a      	adds	r4, #26
 8009ac2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009ac6:	f003 0306 	and.w	r3, r3, #6
 8009aca:	2b04      	cmp	r3, #4
 8009acc:	bf0a      	itet	eq
 8009ace:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009ad2:	2500      	movne	r5, #0
 8009ad4:	6833      	ldreq	r3, [r6, #0]
 8009ad6:	f04f 0600 	mov.w	r6, #0
 8009ada:	bf08      	it	eq
 8009adc:	1aed      	subeq	r5, r5, r3
 8009ade:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009ae2:	bf08      	it	eq
 8009ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	bfc4      	itt	gt
 8009aec:	1a9b      	subgt	r3, r3, r2
 8009aee:	18ed      	addgt	r5, r5, r3
 8009af0:	42b5      	cmp	r5, r6
 8009af2:	d11a      	bne.n	8009b2a <_printf_common+0xd2>
 8009af4:	2000      	movs	r0, #0
 8009af6:	e008      	b.n	8009b0a <_printf_common+0xb2>
 8009af8:	2301      	movs	r3, #1
 8009afa:	4652      	mov	r2, sl
 8009afc:	4641      	mov	r1, r8
 8009afe:	4638      	mov	r0, r7
 8009b00:	47c8      	blx	r9
 8009b02:	3001      	adds	r0, #1
 8009b04:	d103      	bne.n	8009b0e <_printf_common+0xb6>
 8009b06:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b0e:	3501      	adds	r5, #1
 8009b10:	e7c1      	b.n	8009a96 <_printf_common+0x3e>
 8009b12:	18e1      	adds	r1, r4, r3
 8009b14:	1c5a      	adds	r2, r3, #1
 8009b16:	2030      	movs	r0, #48	@ 0x30
 8009b18:	3302      	adds	r3, #2
 8009b1a:	4422      	add	r2, r4
 8009b1c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009b28:	e7c2      	b.n	8009ab0 <_printf_common+0x58>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4622      	mov	r2, r4
 8009b2e:	4641      	mov	r1, r8
 8009b30:	4638      	mov	r0, r7
 8009b32:	47c8      	blx	r9
 8009b34:	3001      	adds	r0, #1
 8009b36:	d0e6      	beq.n	8009b06 <_printf_common+0xae>
 8009b38:	3601      	adds	r6, #1
 8009b3a:	e7d9      	b.n	8009af0 <_printf_common+0x98>

08009b3c <_printf_i>:
 8009b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b40:	7e0f      	ldrb	r7, [r1, #24]
 8009b42:	4691      	mov	r9, r2
 8009b44:	4680      	mov	r8, r0
 8009b46:	460c      	mov	r4, r1
 8009b48:	2f78      	cmp	r7, #120	@ 0x78
 8009b4a:	469a      	mov	sl, r3
 8009b4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009b4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b52:	d807      	bhi.n	8009b64 <_printf_i+0x28>
 8009b54:	2f62      	cmp	r7, #98	@ 0x62
 8009b56:	d80a      	bhi.n	8009b6e <_printf_i+0x32>
 8009b58:	2f00      	cmp	r7, #0
 8009b5a:	f000 80d1 	beq.w	8009d00 <_printf_i+0x1c4>
 8009b5e:	2f58      	cmp	r7, #88	@ 0x58
 8009b60:	f000 80b8 	beq.w	8009cd4 <_printf_i+0x198>
 8009b64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b6c:	e03a      	b.n	8009be4 <_printf_i+0xa8>
 8009b6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b72:	2b15      	cmp	r3, #21
 8009b74:	d8f6      	bhi.n	8009b64 <_printf_i+0x28>
 8009b76:	a101      	add	r1, pc, #4	@ (adr r1, 8009b7c <_printf_i+0x40>)
 8009b78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b7c:	08009bd5 	.word	0x08009bd5
 8009b80:	08009be9 	.word	0x08009be9
 8009b84:	08009b65 	.word	0x08009b65
 8009b88:	08009b65 	.word	0x08009b65
 8009b8c:	08009b65 	.word	0x08009b65
 8009b90:	08009b65 	.word	0x08009b65
 8009b94:	08009be9 	.word	0x08009be9
 8009b98:	08009b65 	.word	0x08009b65
 8009b9c:	08009b65 	.word	0x08009b65
 8009ba0:	08009b65 	.word	0x08009b65
 8009ba4:	08009b65 	.word	0x08009b65
 8009ba8:	08009ce7 	.word	0x08009ce7
 8009bac:	08009c13 	.word	0x08009c13
 8009bb0:	08009ca1 	.word	0x08009ca1
 8009bb4:	08009b65 	.word	0x08009b65
 8009bb8:	08009b65 	.word	0x08009b65
 8009bbc:	08009d09 	.word	0x08009d09
 8009bc0:	08009b65 	.word	0x08009b65
 8009bc4:	08009c13 	.word	0x08009c13
 8009bc8:	08009b65 	.word	0x08009b65
 8009bcc:	08009b65 	.word	0x08009b65
 8009bd0:	08009ca9 	.word	0x08009ca9
 8009bd4:	6833      	ldr	r3, [r6, #0]
 8009bd6:	1d1a      	adds	r2, r3, #4
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6032      	str	r2, [r6, #0]
 8009bdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009be0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009be4:	2301      	movs	r3, #1
 8009be6:	e09c      	b.n	8009d22 <_printf_i+0x1e6>
 8009be8:	6833      	ldr	r3, [r6, #0]
 8009bea:	6820      	ldr	r0, [r4, #0]
 8009bec:	1d19      	adds	r1, r3, #4
 8009bee:	6031      	str	r1, [r6, #0]
 8009bf0:	0606      	lsls	r6, r0, #24
 8009bf2:	d501      	bpl.n	8009bf8 <_printf_i+0xbc>
 8009bf4:	681d      	ldr	r5, [r3, #0]
 8009bf6:	e003      	b.n	8009c00 <_printf_i+0xc4>
 8009bf8:	0645      	lsls	r5, r0, #25
 8009bfa:	d5fb      	bpl.n	8009bf4 <_printf_i+0xb8>
 8009bfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c00:	2d00      	cmp	r5, #0
 8009c02:	da03      	bge.n	8009c0c <_printf_i+0xd0>
 8009c04:	232d      	movs	r3, #45	@ 0x2d
 8009c06:	426d      	negs	r5, r5
 8009c08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c0c:	4858      	ldr	r0, [pc, #352]	@ (8009d70 <_printf_i+0x234>)
 8009c0e:	230a      	movs	r3, #10
 8009c10:	e011      	b.n	8009c36 <_printf_i+0xfa>
 8009c12:	6821      	ldr	r1, [r4, #0]
 8009c14:	6833      	ldr	r3, [r6, #0]
 8009c16:	0608      	lsls	r0, r1, #24
 8009c18:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c1c:	d402      	bmi.n	8009c24 <_printf_i+0xe8>
 8009c1e:	0649      	lsls	r1, r1, #25
 8009c20:	bf48      	it	mi
 8009c22:	b2ad      	uxthmi	r5, r5
 8009c24:	2f6f      	cmp	r7, #111	@ 0x6f
 8009c26:	6033      	str	r3, [r6, #0]
 8009c28:	4851      	ldr	r0, [pc, #324]	@ (8009d70 <_printf_i+0x234>)
 8009c2a:	bf14      	ite	ne
 8009c2c:	230a      	movne	r3, #10
 8009c2e:	2308      	moveq	r3, #8
 8009c30:	2100      	movs	r1, #0
 8009c32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009c36:	6866      	ldr	r6, [r4, #4]
 8009c38:	2e00      	cmp	r6, #0
 8009c3a:	60a6      	str	r6, [r4, #8]
 8009c3c:	db05      	blt.n	8009c4a <_printf_i+0x10e>
 8009c3e:	6821      	ldr	r1, [r4, #0]
 8009c40:	432e      	orrs	r6, r5
 8009c42:	f021 0104 	bic.w	r1, r1, #4
 8009c46:	6021      	str	r1, [r4, #0]
 8009c48:	d04b      	beq.n	8009ce2 <_printf_i+0x1a6>
 8009c4a:	4616      	mov	r6, r2
 8009c4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c50:	fb03 5711 	mls	r7, r3, r1, r5
 8009c54:	5dc7      	ldrb	r7, [r0, r7]
 8009c56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c5a:	462f      	mov	r7, r5
 8009c5c:	460d      	mov	r5, r1
 8009c5e:	42bb      	cmp	r3, r7
 8009c60:	d9f4      	bls.n	8009c4c <_printf_i+0x110>
 8009c62:	2b08      	cmp	r3, #8
 8009c64:	d10b      	bne.n	8009c7e <_printf_i+0x142>
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	07df      	lsls	r7, r3, #31
 8009c6a:	d508      	bpl.n	8009c7e <_printf_i+0x142>
 8009c6c:	6923      	ldr	r3, [r4, #16]
 8009c6e:	6861      	ldr	r1, [r4, #4]
 8009c70:	4299      	cmp	r1, r3
 8009c72:	bfde      	ittt	le
 8009c74:	2330      	movle	r3, #48	@ 0x30
 8009c76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c7e:	1b92      	subs	r2, r2, r6
 8009c80:	6122      	str	r2, [r4, #16]
 8009c82:	464b      	mov	r3, r9
 8009c84:	aa03      	add	r2, sp, #12
 8009c86:	4621      	mov	r1, r4
 8009c88:	4640      	mov	r0, r8
 8009c8a:	f8cd a000 	str.w	sl, [sp]
 8009c8e:	f7ff fee3 	bl	8009a58 <_printf_common>
 8009c92:	3001      	adds	r0, #1
 8009c94:	d14a      	bne.n	8009d2c <_printf_i+0x1f0>
 8009c96:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9a:	b004      	add	sp, #16
 8009c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca0:	6823      	ldr	r3, [r4, #0]
 8009ca2:	f043 0320 	orr.w	r3, r3, #32
 8009ca6:	6023      	str	r3, [r4, #0]
 8009ca8:	2778      	movs	r7, #120	@ 0x78
 8009caa:	4832      	ldr	r0, [pc, #200]	@ (8009d74 <_printf_i+0x238>)
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009cb2:	061f      	lsls	r7, r3, #24
 8009cb4:	6831      	ldr	r1, [r6, #0]
 8009cb6:	f851 5b04 	ldr.w	r5, [r1], #4
 8009cba:	d402      	bmi.n	8009cc2 <_printf_i+0x186>
 8009cbc:	065f      	lsls	r7, r3, #25
 8009cbe:	bf48      	it	mi
 8009cc0:	b2ad      	uxthmi	r5, r5
 8009cc2:	6031      	str	r1, [r6, #0]
 8009cc4:	07d9      	lsls	r1, r3, #31
 8009cc6:	bf44      	itt	mi
 8009cc8:	f043 0320 	orrmi.w	r3, r3, #32
 8009ccc:	6023      	strmi	r3, [r4, #0]
 8009cce:	b11d      	cbz	r5, 8009cd8 <_printf_i+0x19c>
 8009cd0:	2310      	movs	r3, #16
 8009cd2:	e7ad      	b.n	8009c30 <_printf_i+0xf4>
 8009cd4:	4826      	ldr	r0, [pc, #152]	@ (8009d70 <_printf_i+0x234>)
 8009cd6:	e7e9      	b.n	8009cac <_printf_i+0x170>
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	f023 0320 	bic.w	r3, r3, #32
 8009cde:	6023      	str	r3, [r4, #0]
 8009ce0:	e7f6      	b.n	8009cd0 <_printf_i+0x194>
 8009ce2:	4616      	mov	r6, r2
 8009ce4:	e7bd      	b.n	8009c62 <_printf_i+0x126>
 8009ce6:	6833      	ldr	r3, [r6, #0]
 8009ce8:	6825      	ldr	r5, [r4, #0]
 8009cea:	1d18      	adds	r0, r3, #4
 8009cec:	6961      	ldr	r1, [r4, #20]
 8009cee:	6030      	str	r0, [r6, #0]
 8009cf0:	062e      	lsls	r6, r5, #24
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	d501      	bpl.n	8009cfa <_printf_i+0x1be>
 8009cf6:	6019      	str	r1, [r3, #0]
 8009cf8:	e002      	b.n	8009d00 <_printf_i+0x1c4>
 8009cfa:	0668      	lsls	r0, r5, #25
 8009cfc:	d5fb      	bpl.n	8009cf6 <_printf_i+0x1ba>
 8009cfe:	8019      	strh	r1, [r3, #0]
 8009d00:	2300      	movs	r3, #0
 8009d02:	4616      	mov	r6, r2
 8009d04:	6123      	str	r3, [r4, #16]
 8009d06:	e7bc      	b.n	8009c82 <_printf_i+0x146>
 8009d08:	6833      	ldr	r3, [r6, #0]
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	1d1a      	adds	r2, r3, #4
 8009d0e:	6032      	str	r2, [r6, #0]
 8009d10:	681e      	ldr	r6, [r3, #0]
 8009d12:	6862      	ldr	r2, [r4, #4]
 8009d14:	4630      	mov	r0, r6
 8009d16:	f001 faec 	bl	800b2f2 <memchr>
 8009d1a:	b108      	cbz	r0, 8009d20 <_printf_i+0x1e4>
 8009d1c:	1b80      	subs	r0, r0, r6
 8009d1e:	6060      	str	r0, [r4, #4]
 8009d20:	6863      	ldr	r3, [r4, #4]
 8009d22:	6123      	str	r3, [r4, #16]
 8009d24:	2300      	movs	r3, #0
 8009d26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d2a:	e7aa      	b.n	8009c82 <_printf_i+0x146>
 8009d2c:	6923      	ldr	r3, [r4, #16]
 8009d2e:	4632      	mov	r2, r6
 8009d30:	4649      	mov	r1, r9
 8009d32:	4640      	mov	r0, r8
 8009d34:	47d0      	blx	sl
 8009d36:	3001      	adds	r0, #1
 8009d38:	d0ad      	beq.n	8009c96 <_printf_i+0x15a>
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	079b      	lsls	r3, r3, #30
 8009d3e:	d413      	bmi.n	8009d68 <_printf_i+0x22c>
 8009d40:	68e0      	ldr	r0, [r4, #12]
 8009d42:	9b03      	ldr	r3, [sp, #12]
 8009d44:	4298      	cmp	r0, r3
 8009d46:	bfb8      	it	lt
 8009d48:	4618      	movlt	r0, r3
 8009d4a:	e7a6      	b.n	8009c9a <_printf_i+0x15e>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	4632      	mov	r2, r6
 8009d50:	4649      	mov	r1, r9
 8009d52:	4640      	mov	r0, r8
 8009d54:	47d0      	blx	sl
 8009d56:	3001      	adds	r0, #1
 8009d58:	d09d      	beq.n	8009c96 <_printf_i+0x15a>
 8009d5a:	3501      	adds	r5, #1
 8009d5c:	68e3      	ldr	r3, [r4, #12]
 8009d5e:	9903      	ldr	r1, [sp, #12]
 8009d60:	1a5b      	subs	r3, r3, r1
 8009d62:	42ab      	cmp	r3, r5
 8009d64:	dcf2      	bgt.n	8009d4c <_printf_i+0x210>
 8009d66:	e7eb      	b.n	8009d40 <_printf_i+0x204>
 8009d68:	2500      	movs	r5, #0
 8009d6a:	f104 0619 	add.w	r6, r4, #25
 8009d6e:	e7f5      	b.n	8009d5c <_printf_i+0x220>
 8009d70:	0800f594 	.word	0x0800f594
 8009d74:	0800f5a5 	.word	0x0800f5a5

08009d78 <_scanf_float>:
 8009d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7c:	b087      	sub	sp, #28
 8009d7e:	4691      	mov	r9, r2
 8009d80:	4680      	mov	r8, r0
 8009d82:	460c      	mov	r4, r1
 8009d84:	9303      	str	r3, [sp, #12]
 8009d86:	688b      	ldr	r3, [r1, #8]
 8009d88:	1e5a      	subs	r2, r3, #1
 8009d8a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009d8e:	460a      	mov	r2, r1
 8009d90:	bf89      	itett	hi
 8009d92:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009d96:	f04f 0b00 	movls.w	fp, #0
 8009d9a:	eb03 0b05 	addhi.w	fp, r3, r5
 8009d9e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009da2:	f04f 0500 	mov.w	r5, #0
 8009da6:	bf88      	it	hi
 8009da8:	608b      	strhi	r3, [r1, #8]
 8009daa:	680b      	ldr	r3, [r1, #0]
 8009dac:	46aa      	mov	sl, r5
 8009dae:	462f      	mov	r7, r5
 8009db0:	9502      	str	r5, [sp, #8]
 8009db2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009db6:	f842 3b1c 	str.w	r3, [r2], #28
 8009dba:	4616      	mov	r6, r2
 8009dbc:	9201      	str	r2, [sp, #4]
 8009dbe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009dc2:	68a2      	ldr	r2, [r4, #8]
 8009dc4:	b15a      	cbz	r2, 8009dde <_scanf_float+0x66>
 8009dc6:	f8d9 3000 	ldr.w	r3, [r9]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	2b4e      	cmp	r3, #78	@ 0x4e
 8009dce:	d863      	bhi.n	8009e98 <_scanf_float+0x120>
 8009dd0:	2b40      	cmp	r3, #64	@ 0x40
 8009dd2:	d83b      	bhi.n	8009e4c <_scanf_float+0xd4>
 8009dd4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009dd8:	b2c8      	uxtb	r0, r1
 8009dda:	280e      	cmp	r0, #14
 8009ddc:	d939      	bls.n	8009e52 <_scanf_float+0xda>
 8009dde:	b11f      	cbz	r7, 8009de8 <_scanf_float+0x70>
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009de6:	6023      	str	r3, [r4, #0]
 8009de8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dec:	f1ba 0f01 	cmp.w	sl, #1
 8009df0:	f200 8115 	bhi.w	800a01e <_scanf_float+0x2a6>
 8009df4:	9b01      	ldr	r3, [sp, #4]
 8009df6:	429e      	cmp	r6, r3
 8009df8:	f200 8106 	bhi.w	800a008 <_scanf_float+0x290>
 8009dfc:	2001      	movs	r0, #1
 8009dfe:	b007      	add	sp, #28
 8009e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e04:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009e08:	2a0d      	cmp	r2, #13
 8009e0a:	d8e8      	bhi.n	8009dde <_scanf_float+0x66>
 8009e0c:	a101      	add	r1, pc, #4	@ (adr r1, 8009e14 <_scanf_float+0x9c>)
 8009e0e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e12:	bf00      	nop
 8009e14:	08009f5d 	.word	0x08009f5d
 8009e18:	08009ddf 	.word	0x08009ddf
 8009e1c:	08009ddf 	.word	0x08009ddf
 8009e20:	08009ddf 	.word	0x08009ddf
 8009e24:	08009fb9 	.word	0x08009fb9
 8009e28:	08009f93 	.word	0x08009f93
 8009e2c:	08009ddf 	.word	0x08009ddf
 8009e30:	08009ddf 	.word	0x08009ddf
 8009e34:	08009f6b 	.word	0x08009f6b
 8009e38:	08009ddf 	.word	0x08009ddf
 8009e3c:	08009ddf 	.word	0x08009ddf
 8009e40:	08009ddf 	.word	0x08009ddf
 8009e44:	08009ddf 	.word	0x08009ddf
 8009e48:	08009f27 	.word	0x08009f27
 8009e4c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009e50:	e7da      	b.n	8009e08 <_scanf_float+0x90>
 8009e52:	290e      	cmp	r1, #14
 8009e54:	d8c3      	bhi.n	8009dde <_scanf_float+0x66>
 8009e56:	a001      	add	r0, pc, #4	@ (adr r0, 8009e5c <_scanf_float+0xe4>)
 8009e58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009e5c:	08009f17 	.word	0x08009f17
 8009e60:	08009ddf 	.word	0x08009ddf
 8009e64:	08009f17 	.word	0x08009f17
 8009e68:	08009fa7 	.word	0x08009fa7
 8009e6c:	08009ddf 	.word	0x08009ddf
 8009e70:	08009eb9 	.word	0x08009eb9
 8009e74:	08009efd 	.word	0x08009efd
 8009e78:	08009efd 	.word	0x08009efd
 8009e7c:	08009efd 	.word	0x08009efd
 8009e80:	08009efd 	.word	0x08009efd
 8009e84:	08009efd 	.word	0x08009efd
 8009e88:	08009efd 	.word	0x08009efd
 8009e8c:	08009efd 	.word	0x08009efd
 8009e90:	08009efd 	.word	0x08009efd
 8009e94:	08009efd 	.word	0x08009efd
 8009e98:	2b6e      	cmp	r3, #110	@ 0x6e
 8009e9a:	d809      	bhi.n	8009eb0 <_scanf_float+0x138>
 8009e9c:	2b60      	cmp	r3, #96	@ 0x60
 8009e9e:	d8b1      	bhi.n	8009e04 <_scanf_float+0x8c>
 8009ea0:	2b54      	cmp	r3, #84	@ 0x54
 8009ea2:	d07b      	beq.n	8009f9c <_scanf_float+0x224>
 8009ea4:	2b59      	cmp	r3, #89	@ 0x59
 8009ea6:	d19a      	bne.n	8009dde <_scanf_float+0x66>
 8009ea8:	2d07      	cmp	r5, #7
 8009eaa:	d198      	bne.n	8009dde <_scanf_float+0x66>
 8009eac:	2508      	movs	r5, #8
 8009eae:	e02f      	b.n	8009f10 <_scanf_float+0x198>
 8009eb0:	2b74      	cmp	r3, #116	@ 0x74
 8009eb2:	d073      	beq.n	8009f9c <_scanf_float+0x224>
 8009eb4:	2b79      	cmp	r3, #121	@ 0x79
 8009eb6:	e7f6      	b.n	8009ea6 <_scanf_float+0x12e>
 8009eb8:	6821      	ldr	r1, [r4, #0]
 8009eba:	05c8      	lsls	r0, r1, #23
 8009ebc:	d51e      	bpl.n	8009efc <_scanf_float+0x184>
 8009ebe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009ec2:	3701      	adds	r7, #1
 8009ec4:	6021      	str	r1, [r4, #0]
 8009ec6:	f1bb 0f00 	cmp.w	fp, #0
 8009eca:	d003      	beq.n	8009ed4 <_scanf_float+0x15c>
 8009ecc:	3201      	adds	r2, #1
 8009ece:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ed2:	60a2      	str	r2, [r4, #8]
 8009ed4:	68a3      	ldr	r3, [r4, #8]
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	60a3      	str	r3, [r4, #8]
 8009eda:	6923      	ldr	r3, [r4, #16]
 8009edc:	3301      	adds	r3, #1
 8009ede:	6123      	str	r3, [r4, #16]
 8009ee0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f8c9 3004 	str.w	r3, [r9, #4]
 8009eec:	f340 8083 	ble.w	8009ff6 <_scanf_float+0x27e>
 8009ef0:	f8d9 3000 	ldr.w	r3, [r9]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	f8c9 3000 	str.w	r3, [r9]
 8009efa:	e762      	b.n	8009dc2 <_scanf_float+0x4a>
 8009efc:	eb1a 0105 	adds.w	r1, sl, r5
 8009f00:	f47f af6d 	bne.w	8009dde <_scanf_float+0x66>
 8009f04:	6822      	ldr	r2, [r4, #0]
 8009f06:	460d      	mov	r5, r1
 8009f08:	468a      	mov	sl, r1
 8009f0a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009f0e:	6022      	str	r2, [r4, #0]
 8009f10:	f806 3b01 	strb.w	r3, [r6], #1
 8009f14:	e7de      	b.n	8009ed4 <_scanf_float+0x15c>
 8009f16:	6822      	ldr	r2, [r4, #0]
 8009f18:	0610      	lsls	r0, r2, #24
 8009f1a:	f57f af60 	bpl.w	8009dde <_scanf_float+0x66>
 8009f1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f22:	6022      	str	r2, [r4, #0]
 8009f24:	e7f4      	b.n	8009f10 <_scanf_float+0x198>
 8009f26:	f1ba 0f00 	cmp.w	sl, #0
 8009f2a:	d10c      	bne.n	8009f46 <_scanf_float+0x1ce>
 8009f2c:	b977      	cbnz	r7, 8009f4c <_scanf_float+0x1d4>
 8009f2e:	6822      	ldr	r2, [r4, #0]
 8009f30:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009f34:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009f38:	d108      	bne.n	8009f4c <_scanf_float+0x1d4>
 8009f3a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009f3e:	f04f 0a01 	mov.w	sl, #1
 8009f42:	6022      	str	r2, [r4, #0]
 8009f44:	e7e4      	b.n	8009f10 <_scanf_float+0x198>
 8009f46:	f1ba 0f02 	cmp.w	sl, #2
 8009f4a:	d051      	beq.n	8009ff0 <_scanf_float+0x278>
 8009f4c:	2d01      	cmp	r5, #1
 8009f4e:	d002      	beq.n	8009f56 <_scanf_float+0x1de>
 8009f50:	2d04      	cmp	r5, #4
 8009f52:	f47f af44 	bne.w	8009dde <_scanf_float+0x66>
 8009f56:	3501      	adds	r5, #1
 8009f58:	b2ed      	uxtb	r5, r5
 8009f5a:	e7d9      	b.n	8009f10 <_scanf_float+0x198>
 8009f5c:	f1ba 0f01 	cmp.w	sl, #1
 8009f60:	f47f af3d 	bne.w	8009dde <_scanf_float+0x66>
 8009f64:	f04f 0a02 	mov.w	sl, #2
 8009f68:	e7d2      	b.n	8009f10 <_scanf_float+0x198>
 8009f6a:	b975      	cbnz	r5, 8009f8a <_scanf_float+0x212>
 8009f6c:	2f00      	cmp	r7, #0
 8009f6e:	f47f af37 	bne.w	8009de0 <_scanf_float+0x68>
 8009f72:	6822      	ldr	r2, [r4, #0]
 8009f74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009f78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009f7c:	f040 8103 	bne.w	800a186 <_scanf_float+0x40e>
 8009f80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009f84:	2501      	movs	r5, #1
 8009f86:	6022      	str	r2, [r4, #0]
 8009f88:	e7c2      	b.n	8009f10 <_scanf_float+0x198>
 8009f8a:	2d03      	cmp	r5, #3
 8009f8c:	d0e3      	beq.n	8009f56 <_scanf_float+0x1de>
 8009f8e:	2d05      	cmp	r5, #5
 8009f90:	e7df      	b.n	8009f52 <_scanf_float+0x1da>
 8009f92:	2d02      	cmp	r5, #2
 8009f94:	f47f af23 	bne.w	8009dde <_scanf_float+0x66>
 8009f98:	2503      	movs	r5, #3
 8009f9a:	e7b9      	b.n	8009f10 <_scanf_float+0x198>
 8009f9c:	2d06      	cmp	r5, #6
 8009f9e:	f47f af1e 	bne.w	8009dde <_scanf_float+0x66>
 8009fa2:	2507      	movs	r5, #7
 8009fa4:	e7b4      	b.n	8009f10 <_scanf_float+0x198>
 8009fa6:	6822      	ldr	r2, [r4, #0]
 8009fa8:	0591      	lsls	r1, r2, #22
 8009faa:	f57f af18 	bpl.w	8009dde <_scanf_float+0x66>
 8009fae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009fb2:	9702      	str	r7, [sp, #8]
 8009fb4:	6022      	str	r2, [r4, #0]
 8009fb6:	e7ab      	b.n	8009f10 <_scanf_float+0x198>
 8009fb8:	6822      	ldr	r2, [r4, #0]
 8009fba:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009fbe:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009fc2:	d005      	beq.n	8009fd0 <_scanf_float+0x258>
 8009fc4:	0550      	lsls	r0, r2, #21
 8009fc6:	f57f af0a 	bpl.w	8009dde <_scanf_float+0x66>
 8009fca:	2f00      	cmp	r7, #0
 8009fcc:	f000 80db 	beq.w	800a186 <_scanf_float+0x40e>
 8009fd0:	0591      	lsls	r1, r2, #22
 8009fd2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009fd6:	bf58      	it	pl
 8009fd8:	9902      	ldrpl	r1, [sp, #8]
 8009fda:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009fde:	bf58      	it	pl
 8009fe0:	1a79      	subpl	r1, r7, r1
 8009fe2:	6022      	str	r2, [r4, #0]
 8009fe4:	f04f 0700 	mov.w	r7, #0
 8009fe8:	bf58      	it	pl
 8009fea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009fee:	e78f      	b.n	8009f10 <_scanf_float+0x198>
 8009ff0:	f04f 0a03 	mov.w	sl, #3
 8009ff4:	e78c      	b.n	8009f10 <_scanf_float+0x198>
 8009ff6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	4798      	blx	r3
 800a000:	2800      	cmp	r0, #0
 800a002:	f43f aede 	beq.w	8009dc2 <_scanf_float+0x4a>
 800a006:	e6ea      	b.n	8009dde <_scanf_float+0x66>
 800a008:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a00c:	464a      	mov	r2, r9
 800a00e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a012:	4640      	mov	r0, r8
 800a014:	4798      	blx	r3
 800a016:	6923      	ldr	r3, [r4, #16]
 800a018:	3b01      	subs	r3, #1
 800a01a:	6123      	str	r3, [r4, #16]
 800a01c:	e6ea      	b.n	8009df4 <_scanf_float+0x7c>
 800a01e:	1e6b      	subs	r3, r5, #1
 800a020:	2b06      	cmp	r3, #6
 800a022:	d824      	bhi.n	800a06e <_scanf_float+0x2f6>
 800a024:	2d02      	cmp	r5, #2
 800a026:	d836      	bhi.n	800a096 <_scanf_float+0x31e>
 800a028:	9b01      	ldr	r3, [sp, #4]
 800a02a:	429e      	cmp	r6, r3
 800a02c:	f67f aee6 	bls.w	8009dfc <_scanf_float+0x84>
 800a030:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a034:	464a      	mov	r2, r9
 800a036:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a03a:	4640      	mov	r0, r8
 800a03c:	4798      	blx	r3
 800a03e:	6923      	ldr	r3, [r4, #16]
 800a040:	3b01      	subs	r3, #1
 800a042:	6123      	str	r3, [r4, #16]
 800a044:	e7f0      	b.n	800a028 <_scanf_float+0x2b0>
 800a046:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a04a:	464a      	mov	r2, r9
 800a04c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a050:	4640      	mov	r0, r8
 800a052:	4798      	blx	r3
 800a054:	6923      	ldr	r3, [r4, #16]
 800a056:	3b01      	subs	r3, #1
 800a058:	6123      	str	r3, [r4, #16]
 800a05a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a05e:	fa5f fa8a 	uxtb.w	sl, sl
 800a062:	f1ba 0f02 	cmp.w	sl, #2
 800a066:	d1ee      	bne.n	800a046 <_scanf_float+0x2ce>
 800a068:	3d03      	subs	r5, #3
 800a06a:	b2ed      	uxtb	r5, r5
 800a06c:	1b76      	subs	r6, r6, r5
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	05da      	lsls	r2, r3, #23
 800a072:	d52f      	bpl.n	800a0d4 <_scanf_float+0x35c>
 800a074:	055b      	lsls	r3, r3, #21
 800a076:	d511      	bpl.n	800a09c <_scanf_float+0x324>
 800a078:	9b01      	ldr	r3, [sp, #4]
 800a07a:	429e      	cmp	r6, r3
 800a07c:	f67f aebe 	bls.w	8009dfc <_scanf_float+0x84>
 800a080:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a084:	464a      	mov	r2, r9
 800a086:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a08a:	4640      	mov	r0, r8
 800a08c:	4798      	blx	r3
 800a08e:	6923      	ldr	r3, [r4, #16]
 800a090:	3b01      	subs	r3, #1
 800a092:	6123      	str	r3, [r4, #16]
 800a094:	e7f0      	b.n	800a078 <_scanf_float+0x300>
 800a096:	46aa      	mov	sl, r5
 800a098:	46b3      	mov	fp, r6
 800a09a:	e7de      	b.n	800a05a <_scanf_float+0x2e2>
 800a09c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a0a0:	1e75      	subs	r5, r6, #1
 800a0a2:	6923      	ldr	r3, [r4, #16]
 800a0a4:	2965      	cmp	r1, #101	@ 0x65
 800a0a6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a0aa:	6123      	str	r3, [r4, #16]
 800a0ac:	d00c      	beq.n	800a0c8 <_scanf_float+0x350>
 800a0ae:	2945      	cmp	r1, #69	@ 0x45
 800a0b0:	d00a      	beq.n	800a0c8 <_scanf_float+0x350>
 800a0b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0b6:	464a      	mov	r2, r9
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	1eb5      	subs	r5, r6, #2
 800a0bc:	4798      	blx	r3
 800a0be:	6923      	ldr	r3, [r4, #16]
 800a0c0:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	6123      	str	r3, [r4, #16]
 800a0c8:	462e      	mov	r6, r5
 800a0ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0ce:	464a      	mov	r2, r9
 800a0d0:	4640      	mov	r0, r8
 800a0d2:	4798      	blx	r3
 800a0d4:	6822      	ldr	r2, [r4, #0]
 800a0d6:	f012 0210 	ands.w	r2, r2, #16
 800a0da:	d001      	beq.n	800a0e0 <_scanf_float+0x368>
 800a0dc:	2000      	movs	r0, #0
 800a0de:	e68e      	b.n	8009dfe <_scanf_float+0x86>
 800a0e0:	7032      	strb	r2, [r6, #0]
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a0e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0ec:	d125      	bne.n	800a13a <_scanf_float+0x3c2>
 800a0ee:	9b02      	ldr	r3, [sp, #8]
 800a0f0:	429f      	cmp	r7, r3
 800a0f2:	d00a      	beq.n	800a10a <_scanf_float+0x392>
 800a0f4:	1bda      	subs	r2, r3, r7
 800a0f6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a0fa:	4924      	ldr	r1, [pc, #144]	@ (800a18c <_scanf_float+0x414>)
 800a0fc:	429e      	cmp	r6, r3
 800a0fe:	bf28      	it	cs
 800a100:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a104:	4630      	mov	r0, r6
 800a106:	f000 f93d 	bl	800a384 <siprintf>
 800a10a:	2200      	movs	r2, #0
 800a10c:	9901      	ldr	r1, [sp, #4]
 800a10e:	4640      	mov	r0, r8
 800a110:	f003 fb92 	bl	800d838 <_strtod_r>
 800a114:	6821      	ldr	r1, [r4, #0]
 800a116:	9b03      	ldr	r3, [sp, #12]
 800a118:	f011 0f02 	tst.w	r1, #2
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	ec57 6b10 	vmov	r6, r7, d0
 800a122:	f103 0204 	add.w	r2, r3, #4
 800a126:	d015      	beq.n	800a154 <_scanf_float+0x3dc>
 800a128:	9903      	ldr	r1, [sp, #12]
 800a12a:	600a      	str	r2, [r1, #0]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	e9c3 6700 	strd	r6, r7, [r3]
 800a132:	68e3      	ldr	r3, [r4, #12]
 800a134:	3301      	adds	r3, #1
 800a136:	60e3      	str	r3, [r4, #12]
 800a138:	e7d0      	b.n	800a0dc <_scanf_float+0x364>
 800a13a:	9b04      	ldr	r3, [sp, #16]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d0e4      	beq.n	800a10a <_scanf_float+0x392>
 800a140:	9905      	ldr	r1, [sp, #20]
 800a142:	230a      	movs	r3, #10
 800a144:	4640      	mov	r0, r8
 800a146:	3101      	adds	r1, #1
 800a148:	f003 fbf6 	bl	800d938 <_strtol_r>
 800a14c:	9b04      	ldr	r3, [sp, #16]
 800a14e:	9e05      	ldr	r6, [sp, #20]
 800a150:	1ac2      	subs	r2, r0, r3
 800a152:	e7d0      	b.n	800a0f6 <_scanf_float+0x37e>
 800a154:	f011 0f04 	tst.w	r1, #4
 800a158:	9903      	ldr	r1, [sp, #12]
 800a15a:	600a      	str	r2, [r1, #0]
 800a15c:	d1e6      	bne.n	800a12c <_scanf_float+0x3b4>
 800a15e:	681d      	ldr	r5, [r3, #0]
 800a160:	4632      	mov	r2, r6
 800a162:	463b      	mov	r3, r7
 800a164:	4630      	mov	r0, r6
 800a166:	4639      	mov	r1, r7
 800a168:	f7f6 fcce 	bl	8000b08 <__aeabi_dcmpun>
 800a16c:	b128      	cbz	r0, 800a17a <_scanf_float+0x402>
 800a16e:	4808      	ldr	r0, [pc, #32]	@ (800a190 <_scanf_float+0x418>)
 800a170:	f001 f8ce 	bl	800b310 <nanf>
 800a174:	ed85 0a00 	vstr	s0, [r5]
 800a178:	e7db      	b.n	800a132 <_scanf_float+0x3ba>
 800a17a:	4630      	mov	r0, r6
 800a17c:	4639      	mov	r1, r7
 800a17e:	f7f6 fd21 	bl	8000bc4 <__aeabi_d2f>
 800a182:	6028      	str	r0, [r5, #0]
 800a184:	e7d5      	b.n	800a132 <_scanf_float+0x3ba>
 800a186:	2700      	movs	r7, #0
 800a188:	e62e      	b.n	8009de8 <_scanf_float+0x70>
 800a18a:	bf00      	nop
 800a18c:	0800f5b6 	.word	0x0800f5b6
 800a190:	0800f6b4 	.word	0x0800f6b4

0800a194 <std>:
 800a194:	2300      	movs	r3, #0
 800a196:	b510      	push	{r4, lr}
 800a198:	4604      	mov	r4, r0
 800a19a:	6083      	str	r3, [r0, #8]
 800a19c:	8181      	strh	r1, [r0, #12]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6643      	str	r3, [r0, #100]	@ 0x64
 800a1a2:	81c2      	strh	r2, [r0, #14]
 800a1a4:	2208      	movs	r2, #8
 800a1a6:	6183      	str	r3, [r0, #24]
 800a1a8:	e9c0 3300 	strd	r3, r3, [r0]
 800a1ac:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1b0:	305c      	adds	r0, #92	@ 0x5c
 800a1b2:	f000 f97a 	bl	800a4aa <memset>
 800a1b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a1ec <std+0x58>)
 800a1b8:	6224      	str	r4, [r4, #32]
 800a1ba:	6263      	str	r3, [r4, #36]	@ 0x24
 800a1bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a1f0 <std+0x5c>)
 800a1be:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a1c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a1f4 <std+0x60>)
 800a1c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a1c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a1f8 <std+0x64>)
 800a1c6:	6323      	str	r3, [r4, #48]	@ 0x30
 800a1c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a1fc <std+0x68>)
 800a1ca:	429c      	cmp	r4, r3
 800a1cc:	d006      	beq.n	800a1dc <std+0x48>
 800a1ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a1d2:	4294      	cmp	r4, r2
 800a1d4:	d002      	beq.n	800a1dc <std+0x48>
 800a1d6:	33d0      	adds	r3, #208	@ 0xd0
 800a1d8:	429c      	cmp	r4, r3
 800a1da:	d105      	bne.n	800a1e8 <std+0x54>
 800a1dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1e4:	f001 b878 	b.w	800b2d8 <__retarget_lock_init_recursive>
 800a1e8:	bd10      	pop	{r4, pc}
 800a1ea:	bf00      	nop
 800a1ec:	0800a421 	.word	0x0800a421
 800a1f0:	0800a447 	.word	0x0800a447
 800a1f4:	0800a47f 	.word	0x0800a47f
 800a1f8:	0800a4a3 	.word	0x0800a4a3
 800a1fc:	20000490 	.word	0x20000490

0800a200 <stdio_exit_handler>:
 800a200:	4a02      	ldr	r2, [pc, #8]	@ (800a20c <stdio_exit_handler+0xc>)
 800a202:	4903      	ldr	r1, [pc, #12]	@ (800a210 <stdio_exit_handler+0x10>)
 800a204:	4803      	ldr	r0, [pc, #12]	@ (800a214 <stdio_exit_handler+0x14>)
 800a206:	f000 b869 	b.w	800a2dc <_fwalk_sglue>
 800a20a:	bf00      	nop
 800a20c:	2000002c 	.word	0x2000002c
 800a210:	0800e421 	.word	0x0800e421
 800a214:	20000044 	.word	0x20000044

0800a218 <cleanup_stdio>:
 800a218:	6841      	ldr	r1, [r0, #4]
 800a21a:	4b0c      	ldr	r3, [pc, #48]	@ (800a24c <cleanup_stdio+0x34>)
 800a21c:	4299      	cmp	r1, r3
 800a21e:	b510      	push	{r4, lr}
 800a220:	4604      	mov	r4, r0
 800a222:	d001      	beq.n	800a228 <cleanup_stdio+0x10>
 800a224:	f004 f8fc 	bl	800e420 <_fflush_r>
 800a228:	68a1      	ldr	r1, [r4, #8]
 800a22a:	4b09      	ldr	r3, [pc, #36]	@ (800a250 <cleanup_stdio+0x38>)
 800a22c:	4299      	cmp	r1, r3
 800a22e:	d002      	beq.n	800a236 <cleanup_stdio+0x1e>
 800a230:	4620      	mov	r0, r4
 800a232:	f004 f8f5 	bl	800e420 <_fflush_r>
 800a236:	68e1      	ldr	r1, [r4, #12]
 800a238:	4b06      	ldr	r3, [pc, #24]	@ (800a254 <cleanup_stdio+0x3c>)
 800a23a:	4299      	cmp	r1, r3
 800a23c:	d004      	beq.n	800a248 <cleanup_stdio+0x30>
 800a23e:	4620      	mov	r0, r4
 800a240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a244:	f004 b8ec 	b.w	800e420 <_fflush_r>
 800a248:	bd10      	pop	{r4, pc}
 800a24a:	bf00      	nop
 800a24c:	20000490 	.word	0x20000490
 800a250:	200004f8 	.word	0x200004f8
 800a254:	20000560 	.word	0x20000560

0800a258 <global_stdio_init.part.0>:
 800a258:	b510      	push	{r4, lr}
 800a25a:	4b0b      	ldr	r3, [pc, #44]	@ (800a288 <global_stdio_init.part.0+0x30>)
 800a25c:	2104      	movs	r1, #4
 800a25e:	4c0b      	ldr	r4, [pc, #44]	@ (800a28c <global_stdio_init.part.0+0x34>)
 800a260:	4a0b      	ldr	r2, [pc, #44]	@ (800a290 <global_stdio_init.part.0+0x38>)
 800a262:	4620      	mov	r0, r4
 800a264:	601a      	str	r2, [r3, #0]
 800a266:	2200      	movs	r2, #0
 800a268:	f7ff ff94 	bl	800a194 <std>
 800a26c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a270:	2201      	movs	r2, #1
 800a272:	2109      	movs	r1, #9
 800a274:	f7ff ff8e 	bl	800a194 <std>
 800a278:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a27c:	2202      	movs	r2, #2
 800a27e:	2112      	movs	r1, #18
 800a280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a284:	f7ff bf86 	b.w	800a194 <std>
 800a288:	200005c8 	.word	0x200005c8
 800a28c:	20000490 	.word	0x20000490
 800a290:	0800a201 	.word	0x0800a201

0800a294 <__sfp_lock_acquire>:
 800a294:	4801      	ldr	r0, [pc, #4]	@ (800a29c <__sfp_lock_acquire+0x8>)
 800a296:	f001 b821 	b.w	800b2dc <__retarget_lock_acquire_recursive>
 800a29a:	bf00      	nop
 800a29c:	200005f7 	.word	0x200005f7

0800a2a0 <__sfp_lock_release>:
 800a2a0:	4801      	ldr	r0, [pc, #4]	@ (800a2a8 <__sfp_lock_release+0x8>)
 800a2a2:	f001 b81d 	b.w	800b2e0 <__retarget_lock_release_recursive>
 800a2a6:	bf00      	nop
 800a2a8:	200005f7 	.word	0x200005f7

0800a2ac <__sinit>:
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	f7ff fff0 	bl	800a294 <__sfp_lock_acquire>
 800a2b4:	6a23      	ldr	r3, [r4, #32]
 800a2b6:	b11b      	cbz	r3, 800a2c0 <__sinit+0x14>
 800a2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2bc:	f7ff bff0 	b.w	800a2a0 <__sfp_lock_release>
 800a2c0:	4b04      	ldr	r3, [pc, #16]	@ (800a2d4 <__sinit+0x28>)
 800a2c2:	6223      	str	r3, [r4, #32]
 800a2c4:	4b04      	ldr	r3, [pc, #16]	@ (800a2d8 <__sinit+0x2c>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1f5      	bne.n	800a2b8 <__sinit+0xc>
 800a2cc:	f7ff ffc4 	bl	800a258 <global_stdio_init.part.0>
 800a2d0:	e7f2      	b.n	800a2b8 <__sinit+0xc>
 800a2d2:	bf00      	nop
 800a2d4:	0800a219 	.word	0x0800a219
 800a2d8:	200005c8 	.word	0x200005c8

0800a2dc <_fwalk_sglue>:
 800a2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	4688      	mov	r8, r1
 800a2e4:	4614      	mov	r4, r2
 800a2e6:	2600      	movs	r6, #0
 800a2e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2ec:	f1b9 0901 	subs.w	r9, r9, #1
 800a2f0:	d505      	bpl.n	800a2fe <_fwalk_sglue+0x22>
 800a2f2:	6824      	ldr	r4, [r4, #0]
 800a2f4:	2c00      	cmp	r4, #0
 800a2f6:	d1f7      	bne.n	800a2e8 <_fwalk_sglue+0xc>
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2fe:	89ab      	ldrh	r3, [r5, #12]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d907      	bls.n	800a314 <_fwalk_sglue+0x38>
 800a304:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a308:	3301      	adds	r3, #1
 800a30a:	d003      	beq.n	800a314 <_fwalk_sglue+0x38>
 800a30c:	4629      	mov	r1, r5
 800a30e:	4638      	mov	r0, r7
 800a310:	47c0      	blx	r8
 800a312:	4306      	orrs	r6, r0
 800a314:	3568      	adds	r5, #104	@ 0x68
 800a316:	e7e9      	b.n	800a2ec <_fwalk_sglue+0x10>

0800a318 <sniprintf>:
 800a318:	b40c      	push	{r2, r3}
 800a31a:	4b19      	ldr	r3, [pc, #100]	@ (800a380 <sniprintf+0x68>)
 800a31c:	b530      	push	{r4, r5, lr}
 800a31e:	1e0c      	subs	r4, r1, #0
 800a320:	b09d      	sub	sp, #116	@ 0x74
 800a322:	681d      	ldr	r5, [r3, #0]
 800a324:	da08      	bge.n	800a338 <sniprintf+0x20>
 800a326:	238b      	movs	r3, #139	@ 0x8b
 800a328:	f04f 30ff 	mov.w	r0, #4294967295
 800a32c:	602b      	str	r3, [r5, #0]
 800a32e:	b01d      	add	sp, #116	@ 0x74
 800a330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a334:	b002      	add	sp, #8
 800a336:	4770      	bx	lr
 800a338:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a33c:	9002      	str	r0, [sp, #8]
 800a33e:	9006      	str	r0, [sp, #24]
 800a340:	a902      	add	r1, sp, #8
 800a342:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a346:	f04f 0300 	mov.w	r3, #0
 800a34a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a34c:	4628      	mov	r0, r5
 800a34e:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a350:	bf14      	ite	ne
 800a352:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a356:	4623      	moveq	r3, r4
 800a358:	9304      	str	r3, [sp, #16]
 800a35a:	9307      	str	r3, [sp, #28]
 800a35c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a360:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a364:	ab21      	add	r3, sp, #132	@ 0x84
 800a366:	9301      	str	r3, [sp, #4]
 800a368:	f003 fbbe 	bl	800dae8 <_svfiprintf_r>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	bfbc      	itt	lt
 800a370:	238b      	movlt	r3, #139	@ 0x8b
 800a372:	602b      	strlt	r3, [r5, #0]
 800a374:	2c00      	cmp	r4, #0
 800a376:	d0da      	beq.n	800a32e <sniprintf+0x16>
 800a378:	9b02      	ldr	r3, [sp, #8]
 800a37a:	2200      	movs	r2, #0
 800a37c:	701a      	strb	r2, [r3, #0]
 800a37e:	e7d6      	b.n	800a32e <sniprintf+0x16>
 800a380:	20000040 	.word	0x20000040

0800a384 <siprintf>:
 800a384:	b40e      	push	{r1, r2, r3}
 800a386:	b510      	push	{r4, lr}
 800a388:	b09d      	sub	sp, #116	@ 0x74
 800a38a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a38e:	2400      	movs	r4, #0
 800a390:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a392:	9002      	str	r0, [sp, #8]
 800a394:	9006      	str	r0, [sp, #24]
 800a396:	9107      	str	r1, [sp, #28]
 800a398:	9104      	str	r1, [sp, #16]
 800a39a:	4809      	ldr	r0, [pc, #36]	@ (800a3c0 <siprintf+0x3c>)
 800a39c:	4909      	ldr	r1, [pc, #36]	@ (800a3c4 <siprintf+0x40>)
 800a39e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3a2:	9105      	str	r1, [sp, #20]
 800a3a4:	a902      	add	r1, sp, #8
 800a3a6:	6800      	ldr	r0, [r0, #0]
 800a3a8:	9301      	str	r3, [sp, #4]
 800a3aa:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a3ac:	f003 fb9c 	bl	800dae8 <_svfiprintf_r>
 800a3b0:	9b02      	ldr	r3, [sp, #8]
 800a3b2:	701c      	strb	r4, [r3, #0]
 800a3b4:	b01d      	add	sp, #116	@ 0x74
 800a3b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3ba:	b003      	add	sp, #12
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	20000040 	.word	0x20000040
 800a3c4:	ffff0208 	.word	0xffff0208

0800a3c8 <siscanf>:
 800a3c8:	b40e      	push	{r1, r2, r3}
 800a3ca:	b570      	push	{r4, r5, r6, lr}
 800a3cc:	b09d      	sub	sp, #116	@ 0x74
 800a3ce:	2500      	movs	r5, #0
 800a3d0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a3d4:	ac21      	add	r4, sp, #132	@ 0x84
 800a3d6:	951b      	str	r5, [sp, #108]	@ 0x6c
 800a3d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a3dc:	f854 6b04 	ldr.w	r6, [r4], #4
 800a3e0:	9002      	str	r0, [sp, #8]
 800a3e2:	9006      	str	r0, [sp, #24]
 800a3e4:	f7f5 ff32 	bl	800024c <strlen>
 800a3e8:	4b0b      	ldr	r3, [pc, #44]	@ (800a418 <siscanf+0x50>)
 800a3ea:	4632      	mov	r2, r6
 800a3ec:	9003      	str	r0, [sp, #12]
 800a3ee:	a902      	add	r1, sp, #8
 800a3f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a3f6:	9007      	str	r0, [sp, #28]
 800a3f8:	4808      	ldr	r0, [pc, #32]	@ (800a41c <siscanf+0x54>)
 800a3fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a3fe:	4623      	mov	r3, r4
 800a400:	6800      	ldr	r0, [r0, #0]
 800a402:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a404:	9514      	str	r5, [sp, #80]	@ 0x50
 800a406:	9401      	str	r4, [sp, #4]
 800a408:	f003 fcc4 	bl	800dd94 <__ssvfiscanf_r>
 800a40c:	b01d      	add	sp, #116	@ 0x74
 800a40e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a412:	b003      	add	sp, #12
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	0800a443 	.word	0x0800a443
 800a41c:	20000040 	.word	0x20000040

0800a420 <__sread>:
 800a420:	b510      	push	{r4, lr}
 800a422:	460c      	mov	r4, r1
 800a424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a428:	f000 ff08 	bl	800b23c <_read_r>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	bfab      	itete	ge
 800a430:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a432:	89a3      	ldrhlt	r3, [r4, #12]
 800a434:	181b      	addge	r3, r3, r0
 800a436:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a43a:	bfac      	ite	ge
 800a43c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a43e:	81a3      	strhlt	r3, [r4, #12]
 800a440:	bd10      	pop	{r4, pc}

0800a442 <__seofread>:
 800a442:	2000      	movs	r0, #0
 800a444:	4770      	bx	lr

0800a446 <__swrite>:
 800a446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44a:	461f      	mov	r7, r3
 800a44c:	898b      	ldrh	r3, [r1, #12]
 800a44e:	4605      	mov	r5, r0
 800a450:	460c      	mov	r4, r1
 800a452:	05db      	lsls	r3, r3, #23
 800a454:	4616      	mov	r6, r2
 800a456:	d505      	bpl.n	800a464 <__swrite+0x1e>
 800a458:	2302      	movs	r3, #2
 800a45a:	2200      	movs	r2, #0
 800a45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a460:	f000 feda 	bl	800b218 <_lseek_r>
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	4632      	mov	r2, r6
 800a468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a46c:	4628      	mov	r0, r5
 800a46e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a472:	81a3      	strh	r3, [r4, #12]
 800a474:	463b      	mov	r3, r7
 800a476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a47a:	f000 bef1 	b.w	800b260 <_write_r>

0800a47e <__sseek>:
 800a47e:	b510      	push	{r4, lr}
 800a480:	460c      	mov	r4, r1
 800a482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a486:	f000 fec7 	bl	800b218 <_lseek_r>
 800a48a:	1c43      	adds	r3, r0, #1
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	bf15      	itete	ne
 800a490:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a492:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a496:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a49a:	81a3      	strheq	r3, [r4, #12]
 800a49c:	bf18      	it	ne
 800a49e:	81a3      	strhne	r3, [r4, #12]
 800a4a0:	bd10      	pop	{r4, pc}

0800a4a2 <__sclose>:
 800a4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a6:	f000 bea7 	b.w	800b1f8 <_close_r>

0800a4aa <memset>:
 800a4aa:	4402      	add	r2, r0
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d100      	bne.n	800a4b4 <memset+0xa>
 800a4b2:	4770      	bx	lr
 800a4b4:	f803 1b01 	strb.w	r1, [r3], #1
 800a4b8:	e7f9      	b.n	800a4ae <memset+0x4>

0800a4ba <strstr>:
 800a4ba:	780a      	ldrb	r2, [r1, #0]
 800a4bc:	b570      	push	{r4, r5, r6, lr}
 800a4be:	b96a      	cbnz	r2, 800a4dc <strstr+0x22>
 800a4c0:	bd70      	pop	{r4, r5, r6, pc}
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d109      	bne.n	800a4da <strstr+0x20>
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	4605      	mov	r5, r0
 800a4ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d0f6      	beq.n	800a4c0 <strstr+0x6>
 800a4d2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a4d6:	429e      	cmp	r6, r3
 800a4d8:	d0f7      	beq.n	800a4ca <strstr+0x10>
 800a4da:	3001      	adds	r0, #1
 800a4dc:	7803      	ldrb	r3, [r0, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1ef      	bne.n	800a4c2 <strstr+0x8>
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	e7ec      	b.n	800a4c0 <strstr+0x6>
	...

0800a4e8 <localtime>:
 800a4e8:	b538      	push	{r3, r4, r5, lr}
 800a4ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a518 <localtime+0x30>)
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	681d      	ldr	r5, [r3, #0]
 800a4f0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a4f2:	b953      	cbnz	r3, 800a50a <localtime+0x22>
 800a4f4:	2024      	movs	r0, #36	@ 0x24
 800a4f6:	f001 fe27 	bl	800c148 <malloc>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	6368      	str	r0, [r5, #52]	@ 0x34
 800a4fe:	b920      	cbnz	r0, 800a50a <localtime+0x22>
 800a500:	4b06      	ldr	r3, [pc, #24]	@ (800a51c <localtime+0x34>)
 800a502:	2132      	movs	r1, #50	@ 0x32
 800a504:	4806      	ldr	r0, [pc, #24]	@ (800a520 <localtime+0x38>)
 800a506:	f000 ff09 	bl	800b31c <__assert_func>
 800a50a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800a50c:	4620      	mov	r0, r4
 800a50e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a512:	f000 b807 	b.w	800a524 <localtime_r>
 800a516:	bf00      	nop
 800a518:	20000040 	.word	0x20000040
 800a51c:	0800f5bb 	.word	0x0800f5bb
 800a520:	0800f5d2 	.word	0x0800f5d2

0800a524 <localtime_r>:
 800a524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a528:	460c      	mov	r4, r1
 800a52a:	4607      	mov	r7, r0
 800a52c:	f004 f84e 	bl	800e5cc <__gettzinfo>
 800a530:	4605      	mov	r5, r0
 800a532:	4621      	mov	r1, r4
 800a534:	4638      	mov	r0, r7
 800a536:	f004 f84d 	bl	800e5d4 <gmtime_r>
 800a53a:	6943      	ldr	r3, [r0, #20]
 800a53c:	4604      	mov	r4, r0
 800a53e:	0799      	lsls	r1, r3, #30
 800a540:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 800a544:	d106      	bne.n	800a554 <localtime_r+0x30>
 800a546:	2264      	movs	r2, #100	@ 0x64
 800a548:	fb98 f3f2 	sdiv	r3, r8, r2
 800a54c:	fb02 8313 	mls	r3, r2, r3, r8
 800a550:	2b00      	cmp	r3, #0
 800a552:	d171      	bne.n	800a638 <localtime_r+0x114>
 800a554:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a558:	fb98 f3f2 	sdiv	r3, r8, r2
 800a55c:	fb02 8313 	mls	r3, r2, r3, r8
 800a560:	fab3 f383 	clz	r3, r3
 800a564:	095b      	lsrs	r3, r3, #5
 800a566:	425e      	negs	r6, r3
 800a568:	4b64      	ldr	r3, [pc, #400]	@ (800a6fc <localtime_r+0x1d8>)
 800a56a:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 800a56e:	441e      	add	r6, r3
 800a570:	f000 fc08 	bl	800ad84 <__tz_lock>
 800a574:	f000 fc12 	bl	800ad9c <_tzset_unlocked>
 800a578:	4b61      	ldr	r3, [pc, #388]	@ (800a700 <localtime_r+0x1dc>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d06a      	beq.n	800a656 <localtime_r+0x132>
 800a580:	686b      	ldr	r3, [r5, #4]
 800a582:	4543      	cmp	r3, r8
 800a584:	d15a      	bne.n	800a63c <localtime_r+0x118>
 800a586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a58a:	682f      	ldr	r7, [r5, #0]
 800a58c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800a590:	2f00      	cmp	r7, #0
 800a592:	d15b      	bne.n	800a64c <localtime_r+0x128>
 800a594:	4282      	cmp	r2, r0
 800a596:	eb73 0101 	sbcs.w	r1, r3, r1
 800a59a:	db5e      	blt.n	800a65a <localtime_r+0x136>
 800a59c:	2301      	movs	r3, #1
 800a59e:	6223      	str	r3, [r4, #32]
 800a5a0:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a5a2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800a5a6:	6861      	ldr	r1, [r4, #4]
 800a5a8:	fb93 f0f2 	sdiv	r0, r3, r2
 800a5ac:	fb02 3310 	mls	r3, r2, r0, r3
 800a5b0:	223c      	movs	r2, #60	@ 0x3c
 800a5b2:	fb93 f5f2 	sdiv	r5, r3, r2
 800a5b6:	fb02 3215 	mls	r2, r2, r5, r3
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	1b49      	subs	r1, r1, r5
 800a5be:	1a9b      	subs	r3, r3, r2
 800a5c0:	68a2      	ldr	r2, [r4, #8]
 800a5c2:	6061      	str	r1, [r4, #4]
 800a5c4:	1a12      	subs	r2, r2, r0
 800a5c6:	2b3b      	cmp	r3, #59	@ 0x3b
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	60a2      	str	r2, [r4, #8]
 800a5cc:	dd51      	ble.n	800a672 <localtime_r+0x14e>
 800a5ce:	3101      	adds	r1, #1
 800a5d0:	3b3c      	subs	r3, #60	@ 0x3c
 800a5d2:	6061      	str	r1, [r4, #4]
 800a5d4:	6023      	str	r3, [r4, #0]
 800a5d6:	6863      	ldr	r3, [r4, #4]
 800a5d8:	2b3b      	cmp	r3, #59	@ 0x3b
 800a5da:	dd50      	ble.n	800a67e <localtime_r+0x15a>
 800a5dc:	3201      	adds	r2, #1
 800a5de:	3b3c      	subs	r3, #60	@ 0x3c
 800a5e0:	60a2      	str	r2, [r4, #8]
 800a5e2:	6063      	str	r3, [r4, #4]
 800a5e4:	68a3      	ldr	r3, [r4, #8]
 800a5e6:	2b17      	cmp	r3, #23
 800a5e8:	dd4f      	ble.n	800a68a <localtime_r+0x166>
 800a5ea:	69e2      	ldr	r2, [r4, #28]
 800a5ec:	3b18      	subs	r3, #24
 800a5ee:	3201      	adds	r2, #1
 800a5f0:	60a3      	str	r3, [r4, #8]
 800a5f2:	6923      	ldr	r3, [r4, #16]
 800a5f4:	61e2      	str	r2, [r4, #28]
 800a5f6:	69a2      	ldr	r2, [r4, #24]
 800a5f8:	3201      	adds	r2, #1
 800a5fa:	2a07      	cmp	r2, #7
 800a5fc:	bfa8      	it	ge
 800a5fe:	2200      	movge	r2, #0
 800a600:	61a2      	str	r2, [r4, #24]
 800a602:	68e2      	ldr	r2, [r4, #12]
 800a604:	3201      	adds	r2, #1
 800a606:	60e2      	str	r2, [r4, #12]
 800a608:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800a60c:	428a      	cmp	r2, r1
 800a60e:	dd0e      	ble.n	800a62e <localtime_r+0x10a>
 800a610:	2b0b      	cmp	r3, #11
 800a612:	eba2 0201 	sub.w	r2, r2, r1
 800a616:	60e2      	str	r2, [r4, #12]
 800a618:	f103 0201 	add.w	r2, r3, #1
 800a61c:	bf05      	ittet	eq
 800a61e:	6963      	ldreq	r3, [r4, #20]
 800a620:	2200      	moveq	r2, #0
 800a622:	6122      	strne	r2, [r4, #16]
 800a624:	3301      	addeq	r3, #1
 800a626:	bf02      	ittt	eq
 800a628:	6122      	streq	r2, [r4, #16]
 800a62a:	61e2      	streq	r2, [r4, #28]
 800a62c:	6163      	streq	r3, [r4, #20]
 800a62e:	f000 fbaf 	bl	800ad90 <__tz_unlock>
 800a632:	4620      	mov	r0, r4
 800a634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a638:	2301      	movs	r3, #1
 800a63a:	e794      	b.n	800a566 <localtime_r+0x42>
 800a63c:	4640      	mov	r0, r8
 800a63e:	f000 faed 	bl	800ac1c <__tzcalc_limits>
 800a642:	2800      	cmp	r0, #0
 800a644:	d19f      	bne.n	800a586 <localtime_r+0x62>
 800a646:	f04f 33ff 	mov.w	r3, #4294967295
 800a64a:	e004      	b.n	800a656 <localtime_r+0x132>
 800a64c:	4282      	cmp	r2, r0
 800a64e:	eb73 0101 	sbcs.w	r1, r3, r1
 800a652:	da02      	bge.n	800a65a <localtime_r+0x136>
 800a654:	2300      	movs	r3, #0
 800a656:	6223      	str	r3, [r4, #32]
 800a658:	e009      	b.n	800a66e <localtime_r+0x14a>
 800a65a:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 800a65e:	4282      	cmp	r2, r0
 800a660:	418b      	sbcs	r3, r1
 800a662:	bfb4      	ite	lt
 800a664:	2301      	movlt	r3, #1
 800a666:	2300      	movge	r3, #0
 800a668:	6223      	str	r3, [r4, #32]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d198      	bne.n	800a5a0 <localtime_r+0x7c>
 800a66e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800a670:	e797      	b.n	800a5a2 <localtime_r+0x7e>
 800a672:	2b00      	cmp	r3, #0
 800a674:	daaf      	bge.n	800a5d6 <localtime_r+0xb2>
 800a676:	3901      	subs	r1, #1
 800a678:	333c      	adds	r3, #60	@ 0x3c
 800a67a:	6061      	str	r1, [r4, #4]
 800a67c:	e7aa      	b.n	800a5d4 <localtime_r+0xb0>
 800a67e:	2b00      	cmp	r3, #0
 800a680:	dab0      	bge.n	800a5e4 <localtime_r+0xc0>
 800a682:	3a01      	subs	r2, #1
 800a684:	333c      	adds	r3, #60	@ 0x3c
 800a686:	60a2      	str	r2, [r4, #8]
 800a688:	e7ab      	b.n	800a5e2 <localtime_r+0xbe>
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	dacf      	bge.n	800a62e <localtime_r+0x10a>
 800a68e:	69e2      	ldr	r2, [r4, #28]
 800a690:	3318      	adds	r3, #24
 800a692:	3a01      	subs	r2, #1
 800a694:	60a3      	str	r3, [r4, #8]
 800a696:	61e2      	str	r2, [r4, #28]
 800a698:	69a2      	ldr	r2, [r4, #24]
 800a69a:	3a01      	subs	r2, #1
 800a69c:	bf48      	it	mi
 800a69e:	2206      	movmi	r2, #6
 800a6a0:	61a2      	str	r2, [r4, #24]
 800a6a2:	68e2      	ldr	r2, [r4, #12]
 800a6a4:	3a01      	subs	r2, #1
 800a6a6:	60e2      	str	r2, [r4, #12]
 800a6a8:	2a00      	cmp	r2, #0
 800a6aa:	d1c0      	bne.n	800a62e <localtime_r+0x10a>
 800a6ac:	6923      	ldr	r3, [r4, #16]
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	d405      	bmi.n	800a6be <localtime_r+0x19a>
 800a6b2:	6123      	str	r3, [r4, #16]
 800a6b4:	6923      	ldr	r3, [r4, #16]
 800a6b6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a6ba:	60e3      	str	r3, [r4, #12]
 800a6bc:	e7b7      	b.n	800a62e <localtime_r+0x10a>
 800a6be:	230b      	movs	r3, #11
 800a6c0:	6123      	str	r3, [r4, #16]
 800a6c2:	6963      	ldr	r3, [r4, #20]
 800a6c4:	1e5a      	subs	r2, r3, #1
 800a6c6:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800a6ca:	6162      	str	r2, [r4, #20]
 800a6cc:	0792      	lsls	r2, r2, #30
 800a6ce:	d105      	bne.n	800a6dc <localtime_r+0x1b8>
 800a6d0:	2164      	movs	r1, #100	@ 0x64
 800a6d2:	fb93 f2f1 	sdiv	r2, r3, r1
 800a6d6:	fb01 3212 	mls	r2, r1, r2, r3
 800a6da:	b962      	cbnz	r2, 800a6f6 <localtime_r+0x1d2>
 800a6dc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a6e0:	fb93 f1f2 	sdiv	r1, r3, r2
 800a6e4:	fb02 3311 	mls	r3, r2, r1, r3
 800a6e8:	fab3 f383 	clz	r3, r3
 800a6ec:	095b      	lsrs	r3, r3, #5
 800a6ee:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a6f2:	61e3      	str	r3, [r4, #28]
 800a6f4:	e7de      	b.n	800a6b4 <localtime_r+0x190>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e7f9      	b.n	800a6ee <localtime_r+0x1ca>
 800a6fa:	bf00      	nop
 800a6fc:	0800f87c 	.word	0x0800f87c
 800a700:	200005ec 	.word	0x200005ec

0800a704 <validate_structure>:
 800a704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a706:	6801      	ldr	r1, [r0, #0]
 800a708:	4604      	mov	r4, r0
 800a70a:	293b      	cmp	r1, #59	@ 0x3b
 800a70c:	d911      	bls.n	800a732 <validate_structure+0x2e>
 800a70e:	223c      	movs	r2, #60	@ 0x3c
 800a710:	4668      	mov	r0, sp
 800a712:	f000 fe21 	bl	800b358 <div>
 800a716:	9a01      	ldr	r2, [sp, #4]
 800a718:	6863      	ldr	r3, [r4, #4]
 800a71a:	9900      	ldr	r1, [sp, #0]
 800a71c:	2a00      	cmp	r2, #0
 800a71e:	440b      	add	r3, r1
 800a720:	bfb4      	ite	lt
 800a722:	323c      	addlt	r2, #60	@ 0x3c
 800a724:	6022      	strge	r2, [r4, #0]
 800a726:	6063      	str	r3, [r4, #4]
 800a728:	bfbe      	ittt	lt
 800a72a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a72e:	6022      	strlt	r2, [r4, #0]
 800a730:	6063      	strlt	r3, [r4, #4]
 800a732:	6861      	ldr	r1, [r4, #4]
 800a734:	293b      	cmp	r1, #59	@ 0x3b
 800a736:	d911      	bls.n	800a75c <validate_structure+0x58>
 800a738:	223c      	movs	r2, #60	@ 0x3c
 800a73a:	4668      	mov	r0, sp
 800a73c:	f000 fe0c 	bl	800b358 <div>
 800a740:	9a01      	ldr	r2, [sp, #4]
 800a742:	68a3      	ldr	r3, [r4, #8]
 800a744:	9900      	ldr	r1, [sp, #0]
 800a746:	2a00      	cmp	r2, #0
 800a748:	440b      	add	r3, r1
 800a74a:	bfb4      	ite	lt
 800a74c:	323c      	addlt	r2, #60	@ 0x3c
 800a74e:	6062      	strge	r2, [r4, #4]
 800a750:	60a3      	str	r3, [r4, #8]
 800a752:	bfbe      	ittt	lt
 800a754:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a758:	6062      	strlt	r2, [r4, #4]
 800a75a:	60a3      	strlt	r3, [r4, #8]
 800a75c:	68a1      	ldr	r1, [r4, #8]
 800a75e:	2917      	cmp	r1, #23
 800a760:	d911      	bls.n	800a786 <validate_structure+0x82>
 800a762:	2218      	movs	r2, #24
 800a764:	4668      	mov	r0, sp
 800a766:	f000 fdf7 	bl	800b358 <div>
 800a76a:	9a01      	ldr	r2, [sp, #4]
 800a76c:	68e3      	ldr	r3, [r4, #12]
 800a76e:	9900      	ldr	r1, [sp, #0]
 800a770:	2a00      	cmp	r2, #0
 800a772:	440b      	add	r3, r1
 800a774:	bfb4      	ite	lt
 800a776:	3218      	addlt	r2, #24
 800a778:	60a2      	strge	r2, [r4, #8]
 800a77a:	60e3      	str	r3, [r4, #12]
 800a77c:	bfbe      	ittt	lt
 800a77e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a782:	60a2      	strlt	r2, [r4, #8]
 800a784:	60e3      	strlt	r3, [r4, #12]
 800a786:	6921      	ldr	r1, [r4, #16]
 800a788:	290b      	cmp	r1, #11
 800a78a:	d911      	bls.n	800a7b0 <validate_structure+0xac>
 800a78c:	220c      	movs	r2, #12
 800a78e:	4668      	mov	r0, sp
 800a790:	f000 fde2 	bl	800b358 <div>
 800a794:	9a01      	ldr	r2, [sp, #4]
 800a796:	6963      	ldr	r3, [r4, #20]
 800a798:	9900      	ldr	r1, [sp, #0]
 800a79a:	2a00      	cmp	r2, #0
 800a79c:	440b      	add	r3, r1
 800a79e:	bfb4      	ite	lt
 800a7a0:	320c      	addlt	r2, #12
 800a7a2:	6122      	strge	r2, [r4, #16]
 800a7a4:	6163      	str	r3, [r4, #20]
 800a7a6:	bfbe      	ittt	lt
 800a7a8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a7ac:	6122      	strlt	r2, [r4, #16]
 800a7ae:	6163      	strlt	r3, [r4, #20]
 800a7b0:	6963      	ldr	r3, [r4, #20]
 800a7b2:	079a      	lsls	r2, r3, #30
 800a7b4:	d11c      	bne.n	800a7f0 <validate_structure+0xec>
 800a7b6:	2164      	movs	r1, #100	@ 0x64
 800a7b8:	fb93 f2f1 	sdiv	r2, r3, r1
 800a7bc:	fb01 3212 	mls	r2, r1, r2, r3
 800a7c0:	b9c2      	cbnz	r2, 800a7f4 <validate_structure+0xf0>
 800a7c2:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800a7c6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a7ca:	fb93 f1f2 	sdiv	r1, r3, r2
 800a7ce:	fb02 3311 	mls	r3, r2, r1, r3
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	bf0c      	ite	eq
 800a7d6:	231d      	moveq	r3, #29
 800a7d8:	231c      	movne	r3, #28
 800a7da:	68e2      	ldr	r2, [r4, #12]
 800a7dc:	2a00      	cmp	r2, #0
 800a7de:	dc0b      	bgt.n	800a7f8 <validate_structure+0xf4>
 800a7e0:	200b      	movs	r0, #11
 800a7e2:	2164      	movs	r1, #100	@ 0x64
 800a7e4:	4d30      	ldr	r5, [pc, #192]	@ (800a8a8 <validate_structure+0x1a4>)
 800a7e6:	68e6      	ldr	r6, [r4, #12]
 800a7e8:	2e00      	cmp	r6, #0
 800a7ea:	dd30      	ble.n	800a84e <validate_structure+0x14a>
 800a7ec:	b003      	add	sp, #12
 800a7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7f0:	231c      	movs	r3, #28
 800a7f2:	e7f2      	b.n	800a7da <validate_structure+0xd6>
 800a7f4:	231d      	movs	r3, #29
 800a7f6:	e7f0      	b.n	800a7da <validate_structure+0xd6>
 800a7f8:	4d2b      	ldr	r5, [pc, #172]	@ (800a8a8 <validate_structure+0x1a4>)
 800a7fa:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800a7fe:	2a01      	cmp	r2, #1
 800a800:	bf14      	ite	ne
 800a802:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800a806:	4618      	moveq	r0, r3
 800a808:	4281      	cmp	r1, r0
 800a80a:	ddef      	ble.n	800a7ec <validate_structure+0xe8>
 800a80c:	3201      	adds	r2, #1
 800a80e:	1a09      	subs	r1, r1, r0
 800a810:	2a0c      	cmp	r2, #12
 800a812:	60e1      	str	r1, [r4, #12]
 800a814:	6122      	str	r2, [r4, #16]
 800a816:	d1f0      	bne.n	800a7fa <validate_structure+0xf6>
 800a818:	6963      	ldr	r3, [r4, #20]
 800a81a:	2100      	movs	r1, #0
 800a81c:	1c5a      	adds	r2, r3, #1
 800a81e:	6121      	str	r1, [r4, #16]
 800a820:	0791      	lsls	r1, r2, #30
 800a822:	6162      	str	r2, [r4, #20]
 800a824:	d13c      	bne.n	800a8a0 <validate_structure+0x19c>
 800a826:	2164      	movs	r1, #100	@ 0x64
 800a828:	fb92 f0f1 	sdiv	r0, r2, r1
 800a82c:	fb01 2210 	mls	r2, r1, r0, r2
 800a830:	2a00      	cmp	r2, #0
 800a832:	d137      	bne.n	800a8a4 <validate_structure+0x1a0>
 800a834:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800a838:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a83c:	fb93 f1f2 	sdiv	r1, r3, r2
 800a840:	fb02 3311 	mls	r3, r2, r1, r3
 800a844:	2b00      	cmp	r3, #0
 800a846:	bf0c      	ite	eq
 800a848:	231d      	moveq	r3, #29
 800a84a:	231c      	movne	r3, #28
 800a84c:	e7d5      	b.n	800a7fa <validate_structure+0xf6>
 800a84e:	6922      	ldr	r2, [r4, #16]
 800a850:	3a01      	subs	r2, #1
 800a852:	6122      	str	r2, [r4, #16]
 800a854:	3201      	adds	r2, #1
 800a856:	d116      	bne.n	800a886 <validate_structure+0x182>
 800a858:	6963      	ldr	r3, [r4, #20]
 800a85a:	1e5a      	subs	r2, r3, #1
 800a85c:	0797      	lsls	r7, r2, #30
 800a85e:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800a862:	d119      	bne.n	800a898 <validate_structure+0x194>
 800a864:	fb92 f7f1 	sdiv	r7, r2, r1
 800a868:	fb01 2217 	mls	r2, r1, r7, r2
 800a86c:	b9b2      	cbnz	r2, 800a89c <validate_structure+0x198>
 800a86e:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800a872:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a876:	fb93 f7f2 	sdiv	r7, r3, r2
 800a87a:	fb02 3317 	mls	r3, r2, r7, r3
 800a87e:	2b00      	cmp	r3, #0
 800a880:	bf0c      	ite	eq
 800a882:	231d      	moveq	r3, #29
 800a884:	231c      	movne	r3, #28
 800a886:	6922      	ldr	r2, [r4, #16]
 800a888:	2a01      	cmp	r2, #1
 800a88a:	bf14      	ite	ne
 800a88c:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800a890:	461a      	moveq	r2, r3
 800a892:	4432      	add	r2, r6
 800a894:	60e2      	str	r2, [r4, #12]
 800a896:	e7a6      	b.n	800a7e6 <validate_structure+0xe2>
 800a898:	231c      	movs	r3, #28
 800a89a:	e7f4      	b.n	800a886 <validate_structure+0x182>
 800a89c:	231d      	movs	r3, #29
 800a89e:	e7f2      	b.n	800a886 <validate_structure+0x182>
 800a8a0:	231c      	movs	r3, #28
 800a8a2:	e7aa      	b.n	800a7fa <validate_structure+0xf6>
 800a8a4:	231d      	movs	r3, #29
 800a8a6:	e7a8      	b.n	800a7fa <validate_structure+0xf6>
 800a8a8:	0800f84c 	.word	0x0800f84c

0800a8ac <mktime>:
 800a8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b0:	4607      	mov	r7, r0
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	f003 fe8a 	bl	800e5cc <__gettzinfo>
 800a8b8:	4681      	mov	r9, r0
 800a8ba:	4638      	mov	r0, r7
 800a8bc:	f7ff ff22 	bl	800a704 <validate_structure>
 800a8c0:	223c      	movs	r2, #60	@ 0x3c
 800a8c2:	697d      	ldr	r5, [r7, #20]
 800a8c4:	e9d7 4300 	ldrd	r4, r3, [r7]
 800a8c8:	fb02 4403 	mla	r4, r2, r3, r4
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800a8d2:	fb02 4403 	mla	r4, r2, r3, r4
 800a8d6:	4ac4      	ldr	r2, [pc, #784]	@ (800abe8 <mktime+0x33c>)
 800a8d8:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800a8dc:	3e01      	subs	r6, #1
 800a8de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	4416      	add	r6, r2
 800a8e6:	dd11      	ble.n	800a90c <mktime+0x60>
 800a8e8:	07a9      	lsls	r1, r5, #30
 800a8ea:	d10f      	bne.n	800a90c <mktime+0x60>
 800a8ec:	2264      	movs	r2, #100	@ 0x64
 800a8ee:	fb95 f3f2 	sdiv	r3, r5, r2
 800a8f2:	fb02 5313 	mls	r3, r2, r3, r5
 800a8f6:	b943      	cbnz	r3, 800a90a <mktime+0x5e>
 800a8f8:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800a8fc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a900:	fb93 f1f2 	sdiv	r1, r3, r2
 800a904:	fb02 3311 	mls	r3, r2, r1, r3
 800a908:	b903      	cbnz	r3, 800a90c <mktime+0x60>
 800a90a:	3601      	adds	r6, #1
 800a90c:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800a910:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800a914:	61fe      	str	r6, [r7, #28]
 800a916:	3310      	adds	r3, #16
 800a918:	4293      	cmp	r3, r2
 800a91a:	f200 8170 	bhi.w	800abfe <mktime+0x352>
 800a91e:	2d46      	cmp	r5, #70	@ 0x46
 800a920:	f340 80b6 	ble.w	800aa90 <mktime+0x1e4>
 800a924:	2346      	movs	r3, #70	@ 0x46
 800a926:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800a92a:	2164      	movs	r1, #100	@ 0x64
 800a92c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800a930:	079a      	lsls	r2, r3, #30
 800a932:	f040 80a7 	bne.w	800aa84 <mktime+0x1d8>
 800a936:	fb93 f2f1 	sdiv	r2, r3, r1
 800a93a:	fb01 3212 	mls	r2, r1, r2, r3
 800a93e:	2a00      	cmp	r2, #0
 800a940:	f040 80a3 	bne.w	800aa8a <mktime+0x1de>
 800a944:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800a948:	fb92 fef0 	sdiv	lr, r2, r0
 800a94c:	fb00 221e 	mls	r2, r0, lr, r2
 800a950:	2a00      	cmp	r2, #0
 800a952:	bf0c      	ite	eq
 800a954:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800a958:	4662      	movne	r2, ip
 800a95a:	3301      	adds	r3, #1
 800a95c:	4416      	add	r6, r2
 800a95e:	429d      	cmp	r5, r3
 800a960:	d1e6      	bne.n	800a930 <mktime+0x84>
 800a962:	4ba2      	ldr	r3, [pc, #648]	@ (800abec <mktime+0x340>)
 800a964:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800a968:	fbc6 4803 	smlal	r4, r8, r6, r3
 800a96c:	f000 fa0a 	bl	800ad84 <__tz_lock>
 800a970:	f000 fa14 	bl	800ad9c <_tzset_unlocked>
 800a974:	4b9e      	ldr	r3, [pc, #632]	@ (800abf0 <mktime+0x344>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f000 8147 	beq.w	800ac0c <mktime+0x360>
 800a97e:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800a982:	6978      	ldr	r0, [r7, #20]
 800a984:	4653      	mov	r3, sl
 800a986:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	bfa8      	it	ge
 800a98e:	2301      	movge	r3, #1
 800a990:	9301      	str	r3, [sp, #4]
 800a992:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a996:	4283      	cmp	r3, r0
 800a998:	f040 80bd 	bne.w	800ab16 <mktime+0x26a>
 800a99c:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800a9a0:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800a9a4:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800a9a8:	1a13      	subs	r3, r2, r0
 800a9aa:	9303      	str	r3, [sp, #12]
 800a9ac:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800a9b0:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800a9b4:	9302      	str	r3, [sp, #8]
 800a9b6:	9a02      	ldr	r2, [sp, #8]
 800a9b8:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800a9bc:	ebb2 0e03 	subs.w	lr, r2, r3
 800a9c0:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800a9c4:	4574      	cmp	r4, lr
 800a9c6:	eb78 0201 	sbcs.w	r2, r8, r1
 800a9ca:	f280 80c7 	bge.w	800ab5c <mktime+0x2b0>
 800a9ce:	f8d9 2000 	ldr.w	r2, [r9]
 800a9d2:	2a00      	cmp	r2, #0
 800a9d4:	f000 80d0 	beq.w	800ab78 <mktime+0x2cc>
 800a9d8:	9a03      	ldr	r2, [sp, #12]
 800a9da:	4294      	cmp	r4, r2
 800a9dc:	eb78 020b 	sbcs.w	r2, r8, fp
 800a9e0:	f2c0 8111 	blt.w	800ac06 <mktime+0x35a>
 800a9e4:	4574      	cmp	r4, lr
 800a9e6:	eb78 0101 	sbcs.w	r1, r8, r1
 800a9ea:	bfb4      	ite	lt
 800a9ec:	f04f 0b01 	movlt.w	fp, #1
 800a9f0:	f04f 0b00 	movge.w	fp, #0
 800a9f4:	f1ba 0f00 	cmp.w	sl, #0
 800a9f8:	f2c0 8094 	blt.w	800ab24 <mktime+0x278>
 800a9fc:	9a01      	ldr	r2, [sp, #4]
 800a9fe:	ea82 0a0b 	eor.w	sl, r2, fp
 800aa02:	f1ba 0f01 	cmp.w	sl, #1
 800aa06:	f040 808d 	bne.w	800ab24 <mktime+0x278>
 800aa0a:	f1bb 0f00 	cmp.w	fp, #0
 800aa0e:	f000 80c2 	beq.w	800ab96 <mktime+0x2ea>
 800aa12:	1a1b      	subs	r3, r3, r0
 800aa14:	683a      	ldr	r2, [r7, #0]
 800aa16:	191c      	adds	r4, r3, r4
 800aa18:	4638      	mov	r0, r7
 800aa1a:	441a      	add	r2, r3
 800aa1c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800aa20:	603a      	str	r2, [r7, #0]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	9201      	str	r2, [sp, #4]
 800aa26:	f7ff fe6d 	bl	800a704 <validate_structure>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	9a01      	ldr	r2, [sp, #4]
 800aa2e:	1a9b      	subs	r3, r3, r2
 800aa30:	d078      	beq.n	800ab24 <mktime+0x278>
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	f300 80b1 	bgt.w	800ab9a <mktime+0x2ee>
 800aa38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa3c:	bfa8      	it	ge
 800aa3e:	469a      	movge	sl, r3
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	4456      	add	r6, sl
 800aa44:	eb1a 0303 	adds.w	r3, sl, r3
 800aa48:	f140 80b0 	bpl.w	800abac <mktime+0x300>
 800aa4c:	1e6b      	subs	r3, r5, #1
 800aa4e:	0799      	lsls	r1, r3, #30
 800aa50:	f040 80a6 	bne.w	800aba0 <mktime+0x2f4>
 800aa54:	2264      	movs	r2, #100	@ 0x64
 800aa56:	fb93 f1f2 	sdiv	r1, r3, r2
 800aa5a:	fb02 3311 	mls	r3, r2, r1, r3
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f040 80a1 	bne.w	800aba6 <mktime+0x2fa>
 800aa64:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800aa68:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800aa6c:	fb95 f2f3 	sdiv	r2, r5, r3
 800aa70:	fb03 5512 	mls	r5, r3, r2, r5
 800aa74:	f240 136d 	movw	r3, #365	@ 0x16d
 800aa78:	2d00      	cmp	r5, #0
 800aa7a:	bf18      	it	ne
 800aa7c:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800aa80:	61fb      	str	r3, [r7, #28]
 800aa82:	e04f      	b.n	800ab24 <mktime+0x278>
 800aa84:	f240 126d 	movw	r2, #365	@ 0x16d
 800aa88:	e767      	b.n	800a95a <mktime+0xae>
 800aa8a:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800aa8e:	e764      	b.n	800a95a <mktime+0xae>
 800aa90:	f43f af67 	beq.w	800a962 <mktime+0xb6>
 800aa94:	2345      	movs	r3, #69	@ 0x45
 800aa96:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800aa9a:	2164      	movs	r1, #100	@ 0x64
 800aa9c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800aaa0:	e012      	b.n	800aac8 <mktime+0x21c>
 800aaa2:	bb62      	cbnz	r2, 800aafe <mktime+0x252>
 800aaa4:	fb93 f2f1 	sdiv	r2, r3, r1
 800aaa8:	fb01 3212 	mls	r2, r1, r2, r3
 800aaac:	bb52      	cbnz	r2, 800ab04 <mktime+0x258>
 800aaae:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800aab2:	fb92 fef0 	sdiv	lr, r2, r0
 800aab6:	fb00 221e 	mls	r2, r0, lr, r2
 800aaba:	2a00      	cmp	r2, #0
 800aabc:	bf0c      	ite	eq
 800aabe:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800aac2:	4662      	movne	r2, ip
 800aac4:	1ab6      	subs	r6, r6, r2
 800aac6:	3b01      	subs	r3, #1
 800aac8:	429d      	cmp	r5, r3
 800aaca:	f003 0203 	and.w	r2, r3, #3
 800aace:	dbe8      	blt.n	800aaa2 <mktime+0x1f6>
 800aad0:	b9da      	cbnz	r2, 800ab0a <mktime+0x25e>
 800aad2:	2264      	movs	r2, #100	@ 0x64
 800aad4:	fb95 f3f2 	sdiv	r3, r5, r2
 800aad8:	fb02 5313 	mls	r3, r2, r3, r5
 800aadc:	b9c3      	cbnz	r3, 800ab10 <mktime+0x264>
 800aade:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800aae2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800aae6:	fb93 f1f2 	sdiv	r1, r3, r2
 800aaea:	fb02 3311 	mls	r3, r2, r1, r3
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f240 136d 	movw	r3, #365	@ 0x16d
 800aaf4:	bf08      	it	eq
 800aaf6:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800aafa:	1af6      	subs	r6, r6, r3
 800aafc:	e731      	b.n	800a962 <mktime+0xb6>
 800aafe:	f240 126d 	movw	r2, #365	@ 0x16d
 800ab02:	e7df      	b.n	800aac4 <mktime+0x218>
 800ab04:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800ab08:	e7dc      	b.n	800aac4 <mktime+0x218>
 800ab0a:	f240 136d 	movw	r3, #365	@ 0x16d
 800ab0e:	e7f4      	b.n	800aafa <mktime+0x24e>
 800ab10:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800ab14:	e7f1      	b.n	800aafa <mktime+0x24e>
 800ab16:	f000 f881 	bl	800ac1c <__tzcalc_limits>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	f47f af3e 	bne.w	800a99c <mktime+0xf0>
 800ab20:	f8dd b004 	ldr.w	fp, [sp, #4]
 800ab24:	f1bb 0f01 	cmp.w	fp, #1
 800ab28:	d172      	bne.n	800ac10 <mktime+0x364>
 800ab2a:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800ab2e:	f04f 0b01 	mov.w	fp, #1
 800ab32:	191c      	adds	r4, r3, r4
 800ab34:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800ab38:	f000 f92a 	bl	800ad90 <__tz_unlock>
 800ab3c:	3604      	adds	r6, #4
 800ab3e:	2307      	movs	r3, #7
 800ab40:	fb96 f3f3 	sdiv	r3, r6, r3
 800ab44:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ab48:	1af6      	subs	r6, r6, r3
 800ab4a:	d456      	bmi.n	800abfa <mktime+0x34e>
 800ab4c:	f8c7 b020 	str.w	fp, [r7, #32]
 800ab50:	61be      	str	r6, [r7, #24]
 800ab52:	4620      	mov	r0, r4
 800ab54:	4641      	mov	r1, r8
 800ab56:	b005      	add	sp, #20
 800ab58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5c:	9a02      	ldr	r2, [sp, #8]
 800ab5e:	1a12      	subs	r2, r2, r0
 800ab60:	9202      	str	r2, [sp, #8]
 800ab62:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800ab66:	eb6c 0c02 	sbc.w	ip, ip, r2
 800ab6a:	9a02      	ldr	r2, [sp, #8]
 800ab6c:	4294      	cmp	r4, r2
 800ab6e:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800ab72:	f6bf af2c 	bge.w	800a9ce <mktime+0x122>
 800ab76:	e7d3      	b.n	800ab20 <mktime+0x274>
 800ab78:	9a03      	ldr	r2, [sp, #12]
 800ab7a:	4294      	cmp	r4, r2
 800ab7c:	eb78 020b 	sbcs.w	r2, r8, fp
 800ab80:	f6ff af30 	blt.w	800a9e4 <mktime+0x138>
 800ab84:	f1ba 0f00 	cmp.w	sl, #0
 800ab88:	dbcf      	blt.n	800ab2a <mktime+0x27e>
 800ab8a:	f04f 0b01 	mov.w	fp, #1
 800ab8e:	e735      	b.n	800a9fc <mktime+0x150>
 800ab90:	f04f 0b00 	mov.w	fp, #0
 800ab94:	e732      	b.n	800a9fc <mktime+0x150>
 800ab96:	1ac3      	subs	r3, r0, r3
 800ab98:	e73c      	b.n	800aa14 <mktime+0x168>
 800ab9a:	f04f 3aff 	mov.w	sl, #4294967295
 800ab9e:	e74f      	b.n	800aa40 <mktime+0x194>
 800aba0:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800aba4:	e76c      	b.n	800aa80 <mktime+0x1d4>
 800aba6:	f240 136d 	movw	r3, #365	@ 0x16d
 800abaa:	e769      	b.n	800aa80 <mktime+0x1d4>
 800abac:	07aa      	lsls	r2, r5, #30
 800abae:	d117      	bne.n	800abe0 <mktime+0x334>
 800abb0:	2164      	movs	r1, #100	@ 0x64
 800abb2:	fb95 f2f1 	sdiv	r2, r5, r1
 800abb6:	fb01 5212 	mls	r2, r1, r2, r5
 800abba:	b9da      	cbnz	r2, 800abf4 <mktime+0x348>
 800abbc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800abc0:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800abc4:	fb95 f1f2 	sdiv	r1, r5, r2
 800abc8:	fb02 5511 	mls	r5, r2, r1, r5
 800abcc:	f240 126d 	movw	r2, #365	@ 0x16d
 800abd0:	2d00      	cmp	r5, #0
 800abd2:	bf08      	it	eq
 800abd4:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800abd8:	4293      	cmp	r3, r2
 800abda:	bfa8      	it	ge
 800abdc:	1a9b      	subge	r3, r3, r2
 800abde:	e74f      	b.n	800aa80 <mktime+0x1d4>
 800abe0:	f240 126d 	movw	r2, #365	@ 0x16d
 800abe4:	e7f8      	b.n	800abd8 <mktime+0x32c>
 800abe6:	bf00      	nop
 800abe8:	0800f81c 	.word	0x0800f81c
 800abec:	00015180 	.word	0x00015180
 800abf0:	200005ec 	.word	0x200005ec
 800abf4:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800abf8:	e7ee      	b.n	800abd8 <mktime+0x32c>
 800abfa:	3607      	adds	r6, #7
 800abfc:	e7a6      	b.n	800ab4c <mktime+0x2a0>
 800abfe:	f04f 34ff 	mov.w	r4, #4294967295
 800ac02:	46a0      	mov	r8, r4
 800ac04:	e7a5      	b.n	800ab52 <mktime+0x2a6>
 800ac06:	f1ba 0f00 	cmp.w	sl, #0
 800ac0a:	dac1      	bge.n	800ab90 <mktime+0x2e4>
 800ac0c:	f04f 0b00 	mov.w	fp, #0
 800ac10:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800ac14:	191c      	adds	r4, r3, r4
 800ac16:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800ac1a:	e78d      	b.n	800ab38 <mktime+0x28c>

0800ac1c <__tzcalc_limits>:
 800ac1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac20:	4604      	mov	r4, r0
 800ac22:	f003 fcd3 	bl	800e5cc <__gettzinfo>
 800ac26:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800ac2a:	429c      	cmp	r4, r3
 800ac2c:	f340 80a3 	ble.w	800ad76 <__tzcalc_limits+0x15a>
 800ac30:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 800ac34:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800ac38:	f240 126d 	movw	r2, #365	@ 0x16d
 800ac3c:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 800ac40:	1865      	adds	r5, r4, r1
 800ac42:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 800ac46:	4601      	mov	r1, r0
 800ac48:	6044      	str	r4, [r0, #4]
 800ac4a:	10ad      	asrs	r5, r5, #2
 800ac4c:	fb02 5503 	mla	r5, r2, r3, r5
 800ac50:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800ac54:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800ac58:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac5c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ac60:	441d      	add	r5, r3
 800ac62:	19a3      	adds	r3, r4, r6
 800ac64:	4e45      	ldr	r6, [pc, #276]	@ (800ad7c <__tzcalc_limits+0x160>)
 800ac66:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac6a:	441d      	add	r5, r3
 800ac6c:	7a0b      	ldrb	r3, [r1, #8]
 800ac6e:	f8d1 c014 	ldr.w	ip, [r1, #20]
 800ac72:	2b4a      	cmp	r3, #74	@ 0x4a
 800ac74:	d138      	bne.n	800ace8 <__tzcalc_limits+0xcc>
 800ac76:	07a2      	lsls	r2, r4, #30
 800ac78:	eb05 030c 	add.w	r3, r5, ip
 800ac7c:	d106      	bne.n	800ac8c <__tzcalc_limits+0x70>
 800ac7e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800ac82:	fb94 f2fe 	sdiv	r2, r4, lr
 800ac86:	fb0e 4212 	mls	r2, lr, r2, r4
 800ac8a:	b932      	cbnz	r2, 800ac9a <__tzcalc_limits+0x7e>
 800ac8c:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800ac90:	fb94 f2fe 	sdiv	r2, r4, lr
 800ac94:	fb0e 4212 	mls	r2, lr, r2, r4
 800ac98:	bb1a      	cbnz	r2, 800ace2 <__tzcalc_limits+0xc6>
 800ac9a:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 800ac9e:	bfd4      	ite	le
 800aca0:	f04f 0c00 	movle.w	ip, #0
 800aca4:	f04f 0c01 	movgt.w	ip, #1
 800aca8:	4463      	add	r3, ip
 800acaa:	3b01      	subs	r3, #1
 800acac:	698a      	ldr	r2, [r1, #24]
 800acae:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800acb2:	fbc3 2c06 	smlal	r2, ip, r3, r6
 800acb6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800acb8:	18d2      	adds	r2, r2, r3
 800acba:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 800acbe:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800acc2:	3128      	adds	r1, #40	@ 0x28
 800acc4:	428f      	cmp	r7, r1
 800acc6:	d1d1      	bne.n	800ac6c <__tzcalc_limits+0x50>
 800acc8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800accc:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800acd0:	428c      	cmp	r4, r1
 800acd2:	4193      	sbcs	r3, r2
 800acd4:	bfb4      	ite	lt
 800acd6:	2301      	movlt	r3, #1
 800acd8:	2300      	movge	r3, #0
 800acda:	6003      	str	r3, [r0, #0]
 800acdc:	2001      	movs	r0, #1
 800acde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ace2:	f04f 0c00 	mov.w	ip, #0
 800ace6:	e7df      	b.n	800aca8 <__tzcalc_limits+0x8c>
 800ace8:	2b44      	cmp	r3, #68	@ 0x44
 800acea:	d102      	bne.n	800acf2 <__tzcalc_limits+0xd6>
 800acec:	eb05 030c 	add.w	r3, r5, ip
 800acf0:	e7dc      	b.n	800acac <__tzcalc_limits+0x90>
 800acf2:	07a3      	lsls	r3, r4, #30
 800acf4:	d105      	bne.n	800ad02 <__tzcalc_limits+0xe6>
 800acf6:	2264      	movs	r2, #100	@ 0x64
 800acf8:	fb94 f3f2 	sdiv	r3, r4, r2
 800acfc:	fb02 4313 	mls	r3, r2, r3, r4
 800ad00:	bb93      	cbnz	r3, 800ad68 <__tzcalc_limits+0x14c>
 800ad02:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ad06:	fb94 f3f2 	sdiv	r3, r4, r2
 800ad0a:	fb02 4313 	mls	r3, r2, r3, r4
 800ad0e:	fab3 f383 	clz	r3, r3
 800ad12:	095b      	lsrs	r3, r3, #5
 800ad14:	425b      	negs	r3, r3
 800ad16:	f8df e068 	ldr.w	lr, [pc, #104]	@ 800ad80 <__tzcalc_limits+0x164>
 800ad1a:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800ad1e:	462a      	mov	r2, r5
 800ad20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ad24:	f04f 0800 	mov.w	r8, #0
 800ad28:	4473      	add	r3, lr
 800ad2a:	f108 0801 	add.w	r8, r8, #1
 800ad2e:	45c1      	cmp	r9, r8
 800ad30:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 800ad34:	dc1a      	bgt.n	800ad6c <__tzcalc_limits+0x150>
 800ad36:	f102 0804 	add.w	r8, r2, #4
 800ad3a:	2307      	movs	r3, #7
 800ad3c:	fb98 f3f3 	sdiv	r3, r8, r3
 800ad40:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ad44:	eba8 0303 	sub.w	r3, r8, r3
 800ad48:	ebbc 0c03 	subs.w	ip, ip, r3
 800ad4c:	690b      	ldr	r3, [r1, #16]
 800ad4e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad52:	bf48      	it	mi
 800ad54:	f10c 0c07 	addmi.w	ip, ip, #7
 800ad58:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ad5c:	449c      	add	ip, r3
 800ad5e:	45f4      	cmp	ip, lr
 800ad60:	da06      	bge.n	800ad70 <__tzcalc_limits+0x154>
 800ad62:	eb02 030c 	add.w	r3, r2, ip
 800ad66:	e7a1      	b.n	800acac <__tzcalc_limits+0x90>
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e7d3      	b.n	800ad14 <__tzcalc_limits+0xf8>
 800ad6c:	4472      	add	r2, lr
 800ad6e:	e7dc      	b.n	800ad2a <__tzcalc_limits+0x10e>
 800ad70:	f1ac 0c07 	sub.w	ip, ip, #7
 800ad74:	e7f3      	b.n	800ad5e <__tzcalc_limits+0x142>
 800ad76:	2000      	movs	r0, #0
 800ad78:	e7b1      	b.n	800acde <__tzcalc_limits+0xc2>
 800ad7a:	bf00      	nop
 800ad7c:	00015180 	.word	0x00015180
 800ad80:	0800f878 	.word	0x0800f878

0800ad84 <__tz_lock>:
 800ad84:	4801      	ldr	r0, [pc, #4]	@ (800ad8c <__tz_lock+0x8>)
 800ad86:	f000 baa8 	b.w	800b2da <__retarget_lock_acquire>
 800ad8a:	bf00      	nop
 800ad8c:	200005f4 	.word	0x200005f4

0800ad90 <__tz_unlock>:
 800ad90:	4801      	ldr	r0, [pc, #4]	@ (800ad98 <__tz_unlock+0x8>)
 800ad92:	f000 baa4 	b.w	800b2de <__retarget_lock_release>
 800ad96:	bf00      	nop
 800ad98:	200005f4 	.word	0x200005f4

0800ad9c <_tzset_unlocked>:
 800ad9c:	4b01      	ldr	r3, [pc, #4]	@ (800ada4 <_tzset_unlocked+0x8>)
 800ad9e:	6818      	ldr	r0, [r3, #0]
 800ada0:	f000 b802 	b.w	800ada8 <_tzset_unlocked_r>
 800ada4:	20000040 	.word	0x20000040

0800ada8 <_tzset_unlocked_r>:
 800ada8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adac:	4607      	mov	r7, r0
 800adae:	b08d      	sub	sp, #52	@ 0x34
 800adb0:	f003 fc0c 	bl	800e5cc <__gettzinfo>
 800adb4:	49bc      	ldr	r1, [pc, #752]	@ (800b0a8 <_tzset_unlocked_r+0x300>)
 800adb6:	4604      	mov	r4, r0
 800adb8:	4638      	mov	r0, r7
 800adba:	f001 f9bd 	bl	800c138 <_getenv_r>
 800adbe:	4dbb      	ldr	r5, [pc, #748]	@ (800b0ac <_tzset_unlocked_r+0x304>)
 800adc0:	4606      	mov	r6, r0
 800adc2:	bb10      	cbnz	r0, 800ae0a <_tzset_unlocked_r+0x62>
 800adc4:	4bba      	ldr	r3, [pc, #744]	@ (800b0b0 <_tzset_unlocked_r+0x308>)
 800adc6:	214a      	movs	r1, #74	@ 0x4a
 800adc8:	4aba      	ldr	r2, [pc, #744]	@ (800b0b4 <_tzset_unlocked_r+0x30c>)
 800adca:	6018      	str	r0, [r3, #0]
 800adcc:	4bba      	ldr	r3, [pc, #744]	@ (800b0b8 <_tzset_unlocked_r+0x310>)
 800adce:	62a0      	str	r0, [r4, #40]	@ 0x28
 800add0:	6018      	str	r0, [r3, #0]
 800add2:	4bba      	ldr	r3, [pc, #744]	@ (800b0bc <_tzset_unlocked_r+0x314>)
 800add4:	6520      	str	r0, [r4, #80]	@ 0x50
 800add6:	7221      	strb	r1, [r4, #8]
 800add8:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800addc:	e9c3 2200 	strd	r2, r2, [r3]
 800ade0:	2200      	movs	r2, #0
 800ade2:	2300      	movs	r3, #0
 800ade4:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800ade8:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800adec:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800adf0:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800adf4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800adf8:	6828      	ldr	r0, [r5, #0]
 800adfa:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800adfe:	f001 f9ab 	bl	800c158 <free>
 800ae02:	602e      	str	r6, [r5, #0]
 800ae04:	b00d      	add	sp, #52	@ 0x34
 800ae06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae0a:	6829      	ldr	r1, [r5, #0]
 800ae0c:	2900      	cmp	r1, #0
 800ae0e:	f040 808e 	bne.w	800af2e <_tzset_unlocked_r+0x186>
 800ae12:	6828      	ldr	r0, [r5, #0]
 800ae14:	f001 f9a0 	bl	800c158 <free>
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f7f5 fa17 	bl	800024c <strlen>
 800ae1e:	1c41      	adds	r1, r0, #1
 800ae20:	4638      	mov	r0, r7
 800ae22:	f001 f9c3 	bl	800c1ac <_malloc_r>
 800ae26:	6028      	str	r0, [r5, #0]
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	f040 8086 	bne.w	800af3a <_tzset_unlocked_r+0x192>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	4aa1      	ldr	r2, [pc, #644]	@ (800b0b8 <_tzset_unlocked_r+0x310>)
 800ae32:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800b0bc <_tzset_unlocked_r+0x314>
 800ae36:	2000      	movs	r0, #0
 800ae38:	6013      	str	r3, [r2, #0]
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	4aa0      	ldr	r2, [pc, #640]	@ (800b0c0 <_tzset_unlocked_r+0x318>)
 800ae3e:	f8df a270 	ldr.w	sl, [pc, #624]	@ 800b0b0 <_tzset_unlocked_r+0x308>
 800ae42:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae44:	f8ca 3000 	str.w	r3, [sl]
 800ae48:	6523      	str	r3, [r4, #80]	@ 0x50
 800ae4a:	e9c8 2200 	strd	r2, r2, [r8]
 800ae4e:	224a      	movs	r2, #74	@ 0x4a
 800ae50:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800ae54:	7222      	strb	r2, [r4, #8]
 800ae56:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800ae5a:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800ae5e:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800ae62:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800ae66:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800ae6a:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800ae6e:	7833      	ldrb	r3, [r6, #0]
 800ae70:	2b3a      	cmp	r3, #58	@ 0x3a
 800ae72:	bf08      	it	eq
 800ae74:	3601      	addeq	r6, #1
 800ae76:	7833      	ldrb	r3, [r6, #0]
 800ae78:	2b3c      	cmp	r3, #60	@ 0x3c
 800ae7a:	d162      	bne.n	800af42 <_tzset_unlocked_r+0x19a>
 800ae7c:	1c75      	adds	r5, r6, #1
 800ae7e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ae80:	4a90      	ldr	r2, [pc, #576]	@ (800b0c4 <_tzset_unlocked_r+0x31c>)
 800ae82:	4991      	ldr	r1, [pc, #580]	@ (800b0c8 <_tzset_unlocked_r+0x320>)
 800ae84:	4628      	mov	r0, r5
 800ae86:	f7ff fa9f 	bl	800a3c8 <siscanf>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	ddba      	ble.n	800ae04 <_tzset_unlocked_r+0x5c>
 800ae8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae90:	1eda      	subs	r2, r3, #3
 800ae92:	2a07      	cmp	r2, #7
 800ae94:	d8b6      	bhi.n	800ae04 <_tzset_unlocked_r+0x5c>
 800ae96:	5ceb      	ldrb	r3, [r5, r3]
 800ae98:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae9a:	d1b3      	bne.n	800ae04 <_tzset_unlocked_r+0x5c>
 800ae9c:	3602      	adds	r6, #2
 800ae9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aea0:	18f5      	adds	r5, r6, r3
 800aea2:	5cf3      	ldrb	r3, [r6, r3]
 800aea4:	2b2d      	cmp	r3, #45	@ 0x2d
 800aea6:	d15a      	bne.n	800af5e <_tzset_unlocked_r+0x1b6>
 800aea8:	3501      	adds	r5, #1
 800aeaa:	f04f 39ff 	mov.w	r9, #4294967295
 800aeae:	2300      	movs	r3, #0
 800aeb0:	af08      	add	r7, sp, #32
 800aeb2:	aa07      	add	r2, sp, #28
 800aeb4:	4985      	ldr	r1, [pc, #532]	@ (800b0cc <_tzset_unlocked_r+0x324>)
 800aeb6:	f8ad 301e 	strh.w	r3, [sp, #30]
 800aeba:	4628      	mov	r0, r5
 800aebc:	f8ad 3020 	strh.w	r3, [sp, #32]
 800aec0:	ab0a      	add	r3, sp, #40	@ 0x28
 800aec2:	9303      	str	r3, [sp, #12]
 800aec4:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800aec8:	f10d 031e 	add.w	r3, sp, #30
 800aecc:	9300      	str	r3, [sp, #0]
 800aece:	ab0a      	add	r3, sp, #40	@ 0x28
 800aed0:	f7ff fa7a 	bl	800a3c8 <siscanf>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	dd95      	ble.n	800ae04 <_tzset_unlocked_r+0x5c>
 800aed8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800aedc:	223c      	movs	r2, #60	@ 0x3c
 800aede:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800aee2:	fb02 6603 	mla	r6, r2, r3, r6
 800aee6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800aeea:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800aeee:	fb02 6603 	mla	r6, r2, r3, r6
 800aef2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aef4:	fb09 f606 	mul.w	r6, r9, r6
 800aef8:	eb05 0903 	add.w	r9, r5, r3
 800aefc:	5ceb      	ldrb	r3, [r5, r3]
 800aefe:	2b3c      	cmp	r3, #60	@ 0x3c
 800af00:	f040 80ee 	bne.w	800b0e0 <_tzset_unlocked_r+0x338>
 800af04:	f109 0501 	add.w	r5, r9, #1
 800af08:	ab0a      	add	r3, sp, #40	@ 0x28
 800af0a:	4a71      	ldr	r2, [pc, #452]	@ (800b0d0 <_tzset_unlocked_r+0x328>)
 800af0c:	496e      	ldr	r1, [pc, #440]	@ (800b0c8 <_tzset_unlocked_r+0x320>)
 800af0e:	4628      	mov	r0, r5
 800af10:	f7ff fa5a 	bl	800a3c8 <siscanf>
 800af14:	2800      	cmp	r0, #0
 800af16:	dc28      	bgt.n	800af6a <_tzset_unlocked_r+0x1c2>
 800af18:	f899 3001 	ldrb.w	r3, [r9, #1]
 800af1c:	2b3e      	cmp	r3, #62	@ 0x3e
 800af1e:	d124      	bne.n	800af6a <_tzset_unlocked_r+0x1c2>
 800af20:	4b68      	ldr	r3, [pc, #416]	@ (800b0c4 <_tzset_unlocked_r+0x31c>)
 800af22:	62a6      	str	r6, [r4, #40]	@ 0x28
 800af24:	f8ca 6000 	str.w	r6, [sl]
 800af28:	e9c8 3300 	strd	r3, r3, [r8]
 800af2c:	e76a      	b.n	800ae04 <_tzset_unlocked_r+0x5c>
 800af2e:	f7f5 f983 	bl	8000238 <strcmp>
 800af32:	2800      	cmp	r0, #0
 800af34:	f47f af6d 	bne.w	800ae12 <_tzset_unlocked_r+0x6a>
 800af38:	e764      	b.n	800ae04 <_tzset_unlocked_r+0x5c>
 800af3a:	4631      	mov	r1, r6
 800af3c:	f000 f9d1 	bl	800b2e2 <strcpy>
 800af40:	e775      	b.n	800ae2e <_tzset_unlocked_r+0x86>
 800af42:	ab0a      	add	r3, sp, #40	@ 0x28
 800af44:	4a5f      	ldr	r2, [pc, #380]	@ (800b0c4 <_tzset_unlocked_r+0x31c>)
 800af46:	4963      	ldr	r1, [pc, #396]	@ (800b0d4 <_tzset_unlocked_r+0x32c>)
 800af48:	4630      	mov	r0, r6
 800af4a:	f7ff fa3d 	bl	800a3c8 <siscanf>
 800af4e:	2800      	cmp	r0, #0
 800af50:	f77f af58 	ble.w	800ae04 <_tzset_unlocked_r+0x5c>
 800af54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af56:	3b03      	subs	r3, #3
 800af58:	2b07      	cmp	r3, #7
 800af5a:	d9a0      	bls.n	800ae9e <_tzset_unlocked_r+0xf6>
 800af5c:	e752      	b.n	800ae04 <_tzset_unlocked_r+0x5c>
 800af5e:	2b2b      	cmp	r3, #43	@ 0x2b
 800af60:	f04f 0901 	mov.w	r9, #1
 800af64:	bf08      	it	eq
 800af66:	3501      	addeq	r5, #1
 800af68:	e7a1      	b.n	800aeae <_tzset_unlocked_r+0x106>
 800af6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af6c:	1eda      	subs	r2, r3, #3
 800af6e:	2a07      	cmp	r2, #7
 800af70:	f63f af48 	bhi.w	800ae04 <_tzset_unlocked_r+0x5c>
 800af74:	5ceb      	ldrb	r3, [r5, r3]
 800af76:	2b3e      	cmp	r3, #62	@ 0x3e
 800af78:	f47f af44 	bne.w	800ae04 <_tzset_unlocked_r+0x5c>
 800af7c:	f109 0902 	add.w	r9, r9, #2
 800af80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af82:	eb09 0503 	add.w	r5, r9, r3
 800af86:	f819 3003 	ldrb.w	r3, [r9, r3]
 800af8a:	2b2d      	cmp	r3, #45	@ 0x2d
 800af8c:	f040 80b7 	bne.w	800b0fe <_tzset_unlocked_r+0x356>
 800af90:	3501      	adds	r5, #1
 800af92:	f04f 39ff 	mov.w	r9, #4294967295
 800af96:	2300      	movs	r3, #0
 800af98:	aa07      	add	r2, sp, #28
 800af9a:	494c      	ldr	r1, [pc, #304]	@ (800b0cc <_tzset_unlocked_r+0x324>)
 800af9c:	4628      	mov	r0, r5
 800af9e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800afa2:	f8ad 301e 	strh.w	r3, [sp, #30]
 800afa6:	f8ad 3020 	strh.w	r3, [sp, #32]
 800afaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800afac:	ab0a      	add	r3, sp, #40	@ 0x28
 800afae:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800afb2:	9301      	str	r3, [sp, #4]
 800afb4:	f10d 031e 	add.w	r3, sp, #30
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	ab0a      	add	r3, sp, #40	@ 0x28
 800afbc:	f7ff fa04 	bl	800a3c8 <siscanf>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	f300 80a2 	bgt.w	800b10a <_tzset_unlocked_r+0x362>
 800afc6:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800afca:	9304      	str	r3, [sp, #16]
 800afcc:	4627      	mov	r7, r4
 800afce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afd0:	f04f 0b00 	mov.w	fp, #0
 800afd4:	441d      	add	r5, r3
 800afd6:	782b      	ldrb	r3, [r5, #0]
 800afd8:	2b2c      	cmp	r3, #44	@ 0x2c
 800afda:	bf08      	it	eq
 800afdc:	3501      	addeq	r5, #1
 800afde:	f895 9000 	ldrb.w	r9, [r5]
 800afe2:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800afe6:	f040 80a3 	bne.w	800b130 <_tzset_unlocked_r+0x388>
 800afea:	ab0a      	add	r3, sp, #40	@ 0x28
 800afec:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800aff0:	4939      	ldr	r1, [pc, #228]	@ (800b0d8 <_tzset_unlocked_r+0x330>)
 800aff2:	4628      	mov	r0, r5
 800aff4:	9303      	str	r3, [sp, #12]
 800aff6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800affa:	aa09      	add	r2, sp, #36	@ 0x24
 800affc:	9200      	str	r2, [sp, #0]
 800affe:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800b002:	f7ff f9e1 	bl	800a3c8 <siscanf>
 800b006:	2803      	cmp	r0, #3
 800b008:	f47f aefc 	bne.w	800ae04 <_tzset_unlocked_r+0x5c>
 800b00c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800b010:	1e4b      	subs	r3, r1, #1
 800b012:	2b0b      	cmp	r3, #11
 800b014:	f63f aef6 	bhi.w	800ae04 <_tzset_unlocked_r+0x5c>
 800b018:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800b01c:	1e53      	subs	r3, r2, #1
 800b01e:	2b04      	cmp	r3, #4
 800b020:	f63f aef0 	bhi.w	800ae04 <_tzset_unlocked_r+0x5c>
 800b024:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800b028:	2b06      	cmp	r3, #6
 800b02a:	f63f aeeb 	bhi.w	800ae04 <_tzset_unlocked_r+0x5c>
 800b02e:	f887 9008 	strb.w	r9, [r7, #8]
 800b032:	617b      	str	r3, [r7, #20]
 800b034:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800b038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b03a:	eb05 0903 	add.w	r9, r5, r3
 800b03e:	2500      	movs	r5, #0
 800b040:	f04f 0302 	mov.w	r3, #2
 800b044:	f8ad 501e 	strh.w	r5, [sp, #30]
 800b048:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b04c:	f8ad 5020 	strh.w	r5, [sp, #32]
 800b050:	950a      	str	r5, [sp, #40]	@ 0x28
 800b052:	f899 3000 	ldrb.w	r3, [r9]
 800b056:	2b2f      	cmp	r3, #47	@ 0x2f
 800b058:	f040 8097 	bne.w	800b18a <_tzset_unlocked_r+0x3e2>
 800b05c:	ab0a      	add	r3, sp, #40	@ 0x28
 800b05e:	aa08      	add	r2, sp, #32
 800b060:	491e      	ldr	r1, [pc, #120]	@ (800b0dc <_tzset_unlocked_r+0x334>)
 800b062:	4648      	mov	r0, r9
 800b064:	9303      	str	r3, [sp, #12]
 800b066:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b06a:	f10d 021e 	add.w	r2, sp, #30
 800b06e:	9200      	str	r2, [sp, #0]
 800b070:	aa07      	add	r2, sp, #28
 800b072:	f7ff f9a9 	bl	800a3c8 <siscanf>
 800b076:	42a8      	cmp	r0, r5
 800b078:	f300 8087 	bgt.w	800b18a <_tzset_unlocked_r+0x3e2>
 800b07c:	214a      	movs	r1, #74	@ 0x4a
 800b07e:	2200      	movs	r2, #0
 800b080:	2300      	movs	r3, #0
 800b082:	62a5      	str	r5, [r4, #40]	@ 0x28
 800b084:	7221      	strb	r1, [r4, #8]
 800b086:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800b08a:	6525      	str	r5, [r4, #80]	@ 0x50
 800b08c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800b090:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b094:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800b098:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800b09c:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800b0a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800b0a4:	e6ae      	b.n	800ae04 <_tzset_unlocked_r+0x5c>
 800b0a6:	bf00      	nop
 800b0a8:	0800f62b 	.word	0x0800f62b
 800b0ac:	200005cc 	.word	0x200005cc
 800b0b0:	200005e8 	.word	0x200005e8
 800b0b4:	0800f62e 	.word	0x0800f62e
 800b0b8:	200005ec 	.word	0x200005ec
 800b0bc:	20000038 	.word	0x20000038
 800b0c0:	0800f6b4 	.word	0x0800f6b4
 800b0c4:	200005dc 	.word	0x200005dc
 800b0c8:	0800f632 	.word	0x0800f632
 800b0cc:	0800f667 	.word	0x0800f667
 800b0d0:	200005d0 	.word	0x200005d0
 800b0d4:	0800f645 	.word	0x0800f645
 800b0d8:	0800f653 	.word	0x0800f653
 800b0dc:	0800f666 	.word	0x0800f666
 800b0e0:	ab0a      	add	r3, sp, #40	@ 0x28
 800b0e2:	4a3f      	ldr	r2, [pc, #252]	@ (800b1e0 <_tzset_unlocked_r+0x438>)
 800b0e4:	493f      	ldr	r1, [pc, #252]	@ (800b1e4 <_tzset_unlocked_r+0x43c>)
 800b0e6:	4648      	mov	r0, r9
 800b0e8:	f7ff f96e 	bl	800a3c8 <siscanf>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	f77f af17 	ble.w	800af20 <_tzset_unlocked_r+0x178>
 800b0f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0f4:	3b03      	subs	r3, #3
 800b0f6:	2b07      	cmp	r3, #7
 800b0f8:	f67f af42 	bls.w	800af80 <_tzset_unlocked_r+0x1d8>
 800b0fc:	e682      	b.n	800ae04 <_tzset_unlocked_r+0x5c>
 800b0fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800b100:	f04f 0901 	mov.w	r9, #1
 800b104:	bf08      	it	eq
 800b106:	3501      	addeq	r5, #1
 800b108:	e745      	b.n	800af96 <_tzset_unlocked_r+0x1ee>
 800b10a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b10e:	213c      	movs	r1, #60	@ 0x3c
 800b110:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b114:	fb01 3302 	mla	r3, r1, r2, r3
 800b118:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b11c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800b120:	fb01 3302 	mla	r3, r1, r2, r3
 800b124:	fb09 f303 	mul.w	r3, r9, r3
 800b128:	e74f      	b.n	800afca <_tzset_unlocked_r+0x222>
 800b12a:	f04f 0b01 	mov.w	fp, #1
 800b12e:	e752      	b.n	800afd6 <_tzset_unlocked_r+0x22e>
 800b130:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800b134:	f04f 020a 	mov.w	r2, #10
 800b138:	a90b      	add	r1, sp, #44	@ 0x2c
 800b13a:	bf06      	itte	eq
 800b13c:	3501      	addeq	r5, #1
 800b13e:	464b      	moveq	r3, r9
 800b140:	2344      	movne	r3, #68	@ 0x44
 800b142:	4628      	mov	r0, r5
 800b144:	9305      	str	r3, [sp, #20]
 800b146:	f002 fc69 	bl	800da1c <strtoul>
 800b14a:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800b14e:	9b05      	ldr	r3, [sp, #20]
 800b150:	45a9      	cmp	r9, r5
 800b152:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800b156:	d114      	bne.n	800b182 <_tzset_unlocked_r+0x3da>
 800b158:	234d      	movs	r3, #77	@ 0x4d
 800b15a:	f1bb 0f00 	cmp.w	fp, #0
 800b15e:	d107      	bne.n	800b170 <_tzset_unlocked_r+0x3c8>
 800b160:	2103      	movs	r1, #3
 800b162:	7223      	strb	r3, [r4, #8]
 800b164:	2302      	movs	r3, #2
 800b166:	f8c4 b014 	str.w	fp, [r4, #20]
 800b16a:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800b16e:	e766      	b.n	800b03e <_tzset_unlocked_r+0x296>
 800b170:	220b      	movs	r2, #11
 800b172:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800b176:	2301      	movs	r3, #1
 800b178:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800b17c:	2300      	movs	r3, #0
 800b17e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800b180:	e75d      	b.n	800b03e <_tzset_unlocked_r+0x296>
 800b182:	b280      	uxth	r0, r0
 800b184:	723b      	strb	r3, [r7, #8]
 800b186:	6178      	str	r0, [r7, #20]
 800b188:	e759      	b.n	800b03e <_tzset_unlocked_r+0x296>
 800b18a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b18e:	213c      	movs	r1, #60	@ 0x3c
 800b190:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b194:	3728      	adds	r7, #40	@ 0x28
 800b196:	fb01 3302 	mla	r3, r1, r2, r3
 800b19a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b19e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800b1a2:	fb01 3302 	mla	r3, r1, r2, r3
 800b1a6:	f847 3c10 	str.w	r3, [r7, #-16]
 800b1aa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b1ac:	444d      	add	r5, r9
 800b1ae:	f1bb 0f00 	cmp.w	fp, #0
 800b1b2:	d0ba      	beq.n	800b12a <_tzset_unlocked_r+0x382>
 800b1b4:	9b04      	ldr	r3, [sp, #16]
 800b1b6:	6860      	ldr	r0, [r4, #4]
 800b1b8:	6523      	str	r3, [r4, #80]	@ 0x50
 800b1ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b1e8 <_tzset_unlocked_r+0x440>)
 800b1bc:	62a6      	str	r6, [r4, #40]	@ 0x28
 800b1be:	f8c8 3000 	str.w	r3, [r8]
 800b1c2:	4b07      	ldr	r3, [pc, #28]	@ (800b1e0 <_tzset_unlocked_r+0x438>)
 800b1c4:	f8c8 3004 	str.w	r3, [r8, #4]
 800b1c8:	f7ff fd28 	bl	800ac1c <__tzcalc_limits>
 800b1cc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b1ce:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b1d0:	f8ca 2000 	str.w	r2, [sl]
 800b1d4:	1a9b      	subs	r3, r3, r2
 800b1d6:	4a05      	ldr	r2, [pc, #20]	@ (800b1ec <_tzset_unlocked_r+0x444>)
 800b1d8:	bf18      	it	ne
 800b1da:	2301      	movne	r3, #1
 800b1dc:	6013      	str	r3, [r2, #0]
 800b1de:	e611      	b.n	800ae04 <_tzset_unlocked_r+0x5c>
 800b1e0:	200005d0 	.word	0x200005d0
 800b1e4:	0800f645 	.word	0x0800f645
 800b1e8:	200005dc 	.word	0x200005dc
 800b1ec:	200005ec 	.word	0x200005ec

0800b1f0 <_localeconv_r>:
 800b1f0:	4800      	ldr	r0, [pc, #0]	@ (800b1f4 <_localeconv_r+0x4>)
 800b1f2:	4770      	bx	lr
 800b1f4:	200001d8 	.word	0x200001d8

0800b1f8 <_close_r>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	4d05      	ldr	r5, [pc, #20]	@ (800b214 <_close_r+0x1c>)
 800b1fe:	4604      	mov	r4, r0
 800b200:	4608      	mov	r0, r1
 800b202:	602b      	str	r3, [r5, #0]
 800b204:	f7f7 f8ba 	bl	800237c <_close>
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	d102      	bne.n	800b212 <_close_r+0x1a>
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	b103      	cbz	r3, 800b212 <_close_r+0x1a>
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	bd38      	pop	{r3, r4, r5, pc}
 800b214:	200005f0 	.word	0x200005f0

0800b218 <_lseek_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4604      	mov	r4, r0
 800b21c:	4d06      	ldr	r5, [pc, #24]	@ (800b238 <_lseek_r+0x20>)
 800b21e:	4608      	mov	r0, r1
 800b220:	4611      	mov	r1, r2
 800b222:	2200      	movs	r2, #0
 800b224:	602a      	str	r2, [r5, #0]
 800b226:	461a      	mov	r2, r3
 800b228:	f7f7 f8cf 	bl	80023ca <_lseek>
 800b22c:	1c43      	adds	r3, r0, #1
 800b22e:	d102      	bne.n	800b236 <_lseek_r+0x1e>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	b103      	cbz	r3, 800b236 <_lseek_r+0x1e>
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	bd38      	pop	{r3, r4, r5, pc}
 800b238:	200005f0 	.word	0x200005f0

0800b23c <_read_r>:
 800b23c:	b538      	push	{r3, r4, r5, lr}
 800b23e:	4604      	mov	r4, r0
 800b240:	4d06      	ldr	r5, [pc, #24]	@ (800b25c <_read_r+0x20>)
 800b242:	4608      	mov	r0, r1
 800b244:	4611      	mov	r1, r2
 800b246:	2200      	movs	r2, #0
 800b248:	602a      	str	r2, [r5, #0]
 800b24a:	461a      	mov	r2, r3
 800b24c:	f7f7 f85d 	bl	800230a <_read>
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	d102      	bne.n	800b25a <_read_r+0x1e>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	b103      	cbz	r3, 800b25a <_read_r+0x1e>
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	bd38      	pop	{r3, r4, r5, pc}
 800b25c:	200005f0 	.word	0x200005f0

0800b260 <_write_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	4604      	mov	r4, r0
 800b264:	4d06      	ldr	r5, [pc, #24]	@ (800b280 <_write_r+0x20>)
 800b266:	4608      	mov	r0, r1
 800b268:	4611      	mov	r1, r2
 800b26a:	2200      	movs	r2, #0
 800b26c:	602a      	str	r2, [r5, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	f7f7 f868 	bl	8002344 <_write>
 800b274:	1c43      	adds	r3, r0, #1
 800b276:	d102      	bne.n	800b27e <_write_r+0x1e>
 800b278:	682b      	ldr	r3, [r5, #0]
 800b27a:	b103      	cbz	r3, 800b27e <_write_r+0x1e>
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	bd38      	pop	{r3, r4, r5, pc}
 800b280:	200005f0 	.word	0x200005f0

0800b284 <__errno>:
 800b284:	4b01      	ldr	r3, [pc, #4]	@ (800b28c <__errno+0x8>)
 800b286:	6818      	ldr	r0, [r3, #0]
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	20000040 	.word	0x20000040

0800b290 <__libc_init_array>:
 800b290:	b570      	push	{r4, r5, r6, lr}
 800b292:	4d0d      	ldr	r5, [pc, #52]	@ (800b2c8 <__libc_init_array+0x38>)
 800b294:	2600      	movs	r6, #0
 800b296:	4c0d      	ldr	r4, [pc, #52]	@ (800b2cc <__libc_init_array+0x3c>)
 800b298:	1b64      	subs	r4, r4, r5
 800b29a:	10a4      	asrs	r4, r4, #2
 800b29c:	42a6      	cmp	r6, r4
 800b29e:	d109      	bne.n	800b2b4 <__libc_init_array+0x24>
 800b2a0:	4d0b      	ldr	r5, [pc, #44]	@ (800b2d0 <__libc_init_array+0x40>)
 800b2a2:	2600      	movs	r6, #0
 800b2a4:	4c0b      	ldr	r4, [pc, #44]	@ (800b2d4 <__libc_init_array+0x44>)
 800b2a6:	f004 f8af 	bl	800f408 <_init>
 800b2aa:	1b64      	subs	r4, r4, r5
 800b2ac:	10a4      	asrs	r4, r4, #2
 800b2ae:	42a6      	cmp	r6, r4
 800b2b0:	d105      	bne.n	800b2be <__libc_init_array+0x2e>
 800b2b2:	bd70      	pop	{r4, r5, r6, pc}
 800b2b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2b8:	3601      	adds	r6, #1
 800b2ba:	4798      	blx	r3
 800b2bc:	e7ee      	b.n	800b29c <__libc_init_array+0xc>
 800b2be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2c2:	3601      	adds	r6, #1
 800b2c4:	4798      	blx	r3
 800b2c6:	e7f2      	b.n	800b2ae <__libc_init_array+0x1e>
 800b2c8:	0800fb34 	.word	0x0800fb34
 800b2cc:	0800fb34 	.word	0x0800fb34
 800b2d0:	0800fb34 	.word	0x0800fb34
 800b2d4:	0800fb38 	.word	0x0800fb38

0800b2d8 <__retarget_lock_init_recursive>:
 800b2d8:	4770      	bx	lr

0800b2da <__retarget_lock_acquire>:
 800b2da:	4770      	bx	lr

0800b2dc <__retarget_lock_acquire_recursive>:
 800b2dc:	4770      	bx	lr

0800b2de <__retarget_lock_release>:
 800b2de:	4770      	bx	lr

0800b2e0 <__retarget_lock_release_recursive>:
 800b2e0:	4770      	bx	lr

0800b2e2 <strcpy>:
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2e8:	f803 2b01 	strb.w	r2, [r3], #1
 800b2ec:	2a00      	cmp	r2, #0
 800b2ee:	d1f9      	bne.n	800b2e4 <strcpy+0x2>
 800b2f0:	4770      	bx	lr

0800b2f2 <memchr>:
 800b2f2:	b2c9      	uxtb	r1, r1
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	4402      	add	r2, r0
 800b2f8:	b510      	push	{r4, lr}
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	d101      	bne.n	800b304 <memchr+0x12>
 800b300:	2000      	movs	r0, #0
 800b302:	e003      	b.n	800b30c <memchr+0x1a>
 800b304:	7804      	ldrb	r4, [r0, #0]
 800b306:	3301      	adds	r3, #1
 800b308:	428c      	cmp	r4, r1
 800b30a:	d1f6      	bne.n	800b2fa <memchr+0x8>
 800b30c:	bd10      	pop	{r4, pc}
	...

0800b310 <nanf>:
 800b310:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b318 <nanf+0x8>
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	7fc00000 	.word	0x7fc00000

0800b31c <__assert_func>:
 800b31c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b31e:	4614      	mov	r4, r2
 800b320:	461a      	mov	r2, r3
 800b322:	4b09      	ldr	r3, [pc, #36]	@ (800b348 <__assert_func+0x2c>)
 800b324:	4605      	mov	r5, r0
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68d8      	ldr	r0, [r3, #12]
 800b32a:	b14c      	cbz	r4, 800b340 <__assert_func+0x24>
 800b32c:	4b07      	ldr	r3, [pc, #28]	@ (800b34c <__assert_func+0x30>)
 800b32e:	9100      	str	r1, [sp, #0]
 800b330:	4907      	ldr	r1, [pc, #28]	@ (800b350 <__assert_func+0x34>)
 800b332:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b336:	462b      	mov	r3, r5
 800b338:	f003 f89a 	bl	800e470 <fiprintf>
 800b33c:	f003 fa14 	bl	800e768 <abort>
 800b340:	4b04      	ldr	r3, [pc, #16]	@ (800b354 <__assert_func+0x38>)
 800b342:	461c      	mov	r4, r3
 800b344:	e7f3      	b.n	800b32e <__assert_func+0x12>
 800b346:	bf00      	nop
 800b348:	20000040 	.word	0x20000040
 800b34c:	0800f679 	.word	0x0800f679
 800b350:	0800f686 	.word	0x0800f686
 800b354:	0800f6b4 	.word	0x0800f6b4

0800b358 <div>:
 800b358:	b510      	push	{r4, lr}
 800b35a:	fb91 f4f2 	sdiv	r4, r1, r2
 800b35e:	fb02 1114 	mls	r1, r2, r4, r1
 800b362:	6004      	str	r4, [r0, #0]
 800b364:	6041      	str	r1, [r0, #4]
 800b366:	bd10      	pop	{r4, pc}

0800b368 <quorem>:
 800b368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36c:	6903      	ldr	r3, [r0, #16]
 800b36e:	4607      	mov	r7, r0
 800b370:	690c      	ldr	r4, [r1, #16]
 800b372:	42a3      	cmp	r3, r4
 800b374:	f2c0 8083 	blt.w	800b47e <quorem+0x116>
 800b378:	3c01      	subs	r4, #1
 800b37a:	f100 0514 	add.w	r5, r0, #20
 800b37e:	f101 0814 	add.w	r8, r1, #20
 800b382:	00a3      	lsls	r3, r4, #2
 800b384:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b388:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b392:	9301      	str	r3, [sp, #4]
 800b394:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b398:	3301      	adds	r3, #1
 800b39a:	429a      	cmp	r2, r3
 800b39c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3a0:	d331      	bcc.n	800b406 <quorem+0x9e>
 800b3a2:	f04f 0a00 	mov.w	sl, #0
 800b3a6:	46c4      	mov	ip, r8
 800b3a8:	46ae      	mov	lr, r5
 800b3aa:	46d3      	mov	fp, sl
 800b3ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b3b0:	b298      	uxth	r0, r3
 800b3b2:	45e1      	cmp	r9, ip
 800b3b4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b3b8:	fb06 a000 	mla	r0, r6, r0, sl
 800b3bc:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800b3c0:	b280      	uxth	r0, r0
 800b3c2:	fb06 2303 	mla	r3, r6, r3, r2
 800b3c6:	f8de 2000 	ldr.w	r2, [lr]
 800b3ca:	b292      	uxth	r2, r2
 800b3cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3d0:	eba2 0200 	sub.w	r2, r2, r0
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	f8de 0000 	ldr.w	r0, [lr]
 800b3da:	445a      	add	r2, fp
 800b3dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b3e0:	b292      	uxth	r2, r2
 800b3e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b3e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b3ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b3ee:	f84e 2b04 	str.w	r2, [lr], #4
 800b3f2:	d2db      	bcs.n	800b3ac <quorem+0x44>
 800b3f4:	9b00      	ldr	r3, [sp, #0]
 800b3f6:	58eb      	ldr	r3, [r5, r3]
 800b3f8:	b92b      	cbnz	r3, 800b406 <quorem+0x9e>
 800b3fa:	9b01      	ldr	r3, [sp, #4]
 800b3fc:	3b04      	subs	r3, #4
 800b3fe:	429d      	cmp	r5, r3
 800b400:	461a      	mov	r2, r3
 800b402:	d330      	bcc.n	800b466 <quorem+0xfe>
 800b404:	613c      	str	r4, [r7, #16]
 800b406:	4638      	mov	r0, r7
 800b408:	f001 fa1c 	bl	800c844 <__mcmp>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	db26      	blt.n	800b45e <quorem+0xf6>
 800b410:	4629      	mov	r1, r5
 800b412:	2000      	movs	r0, #0
 800b414:	f858 2b04 	ldr.w	r2, [r8], #4
 800b418:	f8d1 c000 	ldr.w	ip, [r1]
 800b41c:	fa1f fe82 	uxth.w	lr, r2
 800b420:	45c1      	cmp	r9, r8
 800b422:	fa1f f38c 	uxth.w	r3, ip
 800b426:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b42a:	eba3 030e 	sub.w	r3, r3, lr
 800b42e:	4403      	add	r3, r0
 800b430:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b434:	b29b      	uxth	r3, r3
 800b436:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b43a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b43e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b442:	f841 3b04 	str.w	r3, [r1], #4
 800b446:	d2e5      	bcs.n	800b414 <quorem+0xac>
 800b448:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b44c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b450:	b922      	cbnz	r2, 800b45c <quorem+0xf4>
 800b452:	3b04      	subs	r3, #4
 800b454:	429d      	cmp	r5, r3
 800b456:	461a      	mov	r2, r3
 800b458:	d30b      	bcc.n	800b472 <quorem+0x10a>
 800b45a:	613c      	str	r4, [r7, #16]
 800b45c:	3601      	adds	r6, #1
 800b45e:	4630      	mov	r0, r6
 800b460:	b003      	add	sp, #12
 800b462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b466:	6812      	ldr	r2, [r2, #0]
 800b468:	3b04      	subs	r3, #4
 800b46a:	2a00      	cmp	r2, #0
 800b46c:	d1ca      	bne.n	800b404 <quorem+0x9c>
 800b46e:	3c01      	subs	r4, #1
 800b470:	e7c5      	b.n	800b3fe <quorem+0x96>
 800b472:	6812      	ldr	r2, [r2, #0]
 800b474:	3b04      	subs	r3, #4
 800b476:	2a00      	cmp	r2, #0
 800b478:	d1ef      	bne.n	800b45a <quorem+0xf2>
 800b47a:	3c01      	subs	r4, #1
 800b47c:	e7ea      	b.n	800b454 <quorem+0xec>
 800b47e:	2000      	movs	r0, #0
 800b480:	e7ee      	b.n	800b460 <quorem+0xf8>
 800b482:	0000      	movs	r0, r0
 800b484:	0000      	movs	r0, r0
	...

0800b488 <_dtoa_r>:
 800b488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48c:	69c7      	ldr	r7, [r0, #28]
 800b48e:	b097      	sub	sp, #92	@ 0x5c
 800b490:	4681      	mov	r9, r0
 800b492:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b494:	9107      	str	r1, [sp, #28]
 800b496:	920c      	str	r2, [sp, #48]	@ 0x30
 800b498:	9311      	str	r3, [sp, #68]	@ 0x44
 800b49a:	ec55 4b10 	vmov	r4, r5, d0
 800b49e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b4a2:	b97f      	cbnz	r7, 800b4c4 <_dtoa_r+0x3c>
 800b4a4:	2010      	movs	r0, #16
 800b4a6:	f000 fe4f 	bl	800c148 <malloc>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	f8c9 001c 	str.w	r0, [r9, #28]
 800b4b0:	b920      	cbnz	r0, 800b4bc <_dtoa_r+0x34>
 800b4b2:	4ba9      	ldr	r3, [pc, #676]	@ (800b758 <_dtoa_r+0x2d0>)
 800b4b4:	21ef      	movs	r1, #239	@ 0xef
 800b4b6:	48a9      	ldr	r0, [pc, #676]	@ (800b75c <_dtoa_r+0x2d4>)
 800b4b8:	f7ff ff30 	bl	800b31c <__assert_func>
 800b4bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b4c0:	6007      	str	r7, [r0, #0]
 800b4c2:	60c7      	str	r7, [r0, #12]
 800b4c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b4c8:	6819      	ldr	r1, [r3, #0]
 800b4ca:	b159      	cbz	r1, 800b4e4 <_dtoa_r+0x5c>
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	4648      	mov	r0, r9
 800b4d2:	4093      	lsls	r3, r2
 800b4d4:	604a      	str	r2, [r1, #4]
 800b4d6:	608b      	str	r3, [r1, #8]
 800b4d8:	f000 ff34 	bl	800c344 <_Bfree>
 800b4dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	1e2b      	subs	r3, r5, #0
 800b4e6:	bfb7      	itett	lt
 800b4e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b4ec:	2300      	movge	r3, #0
 800b4ee:	2201      	movlt	r2, #1
 800b4f0:	9305      	strlt	r3, [sp, #20]
 800b4f2:	bfa8      	it	ge
 800b4f4:	6033      	strge	r3, [r6, #0]
 800b4f6:	9f05      	ldr	r7, [sp, #20]
 800b4f8:	4b99      	ldr	r3, [pc, #612]	@ (800b760 <_dtoa_r+0x2d8>)
 800b4fa:	bfb8      	it	lt
 800b4fc:	6032      	strlt	r2, [r6, #0]
 800b4fe:	43bb      	bics	r3, r7
 800b500:	d112      	bne.n	800b528 <_dtoa_r+0xa0>
 800b502:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b506:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b508:	6013      	str	r3, [r2, #0]
 800b50a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b50e:	4323      	orrs	r3, r4
 800b510:	f000 855a 	beq.w	800bfc8 <_dtoa_r+0xb40>
 800b514:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b516:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b774 <_dtoa_r+0x2ec>
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f000 855c 	beq.w	800bfd8 <_dtoa_r+0xb50>
 800b520:	f10a 0303 	add.w	r3, sl, #3
 800b524:	f000 bd56 	b.w	800bfd4 <_dtoa_r+0xb4c>
 800b528:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b52c:	2200      	movs	r2, #0
 800b52e:	2300      	movs	r3, #0
 800b530:	ec51 0b17 	vmov	r0, r1, d7
 800b534:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b538:	f7f5 fab4 	bl	8000aa4 <__aeabi_dcmpeq>
 800b53c:	4680      	mov	r8, r0
 800b53e:	b158      	cbz	r0, 800b558 <_dtoa_r+0xd0>
 800b540:	2301      	movs	r3, #1
 800b542:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b544:	6013      	str	r3, [r2, #0]
 800b546:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b548:	b113      	cbz	r3, 800b550 <_dtoa_r+0xc8>
 800b54a:	4b86      	ldr	r3, [pc, #536]	@ (800b764 <_dtoa_r+0x2dc>)
 800b54c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b54e:	6013      	str	r3, [r2, #0]
 800b550:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800b778 <_dtoa_r+0x2f0>
 800b554:	f000 bd40 	b.w	800bfd8 <_dtoa_r+0xb50>
 800b558:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b55c:	aa14      	add	r2, sp, #80	@ 0x50
 800b55e:	a915      	add	r1, sp, #84	@ 0x54
 800b560:	4648      	mov	r0, r9
 800b562:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b566:	f001 fa95 	bl	800ca94 <__d2b>
 800b56a:	9002      	str	r0, [sp, #8]
 800b56c:	2e00      	cmp	r6, #0
 800b56e:	d076      	beq.n	800b65e <_dtoa_r+0x1d6>
 800b570:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b572:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b576:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b57a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b57e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b582:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b586:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b58a:	4619      	mov	r1, r3
 800b58c:	2200      	movs	r2, #0
 800b58e:	4b76      	ldr	r3, [pc, #472]	@ (800b768 <_dtoa_r+0x2e0>)
 800b590:	f7f4 fe68 	bl	8000264 <__aeabi_dsub>
 800b594:	a36a      	add	r3, pc, #424	@ (adr r3, 800b740 <_dtoa_r+0x2b8>)
 800b596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59a:	f7f5 f81b 	bl	80005d4 <__aeabi_dmul>
 800b59e:	a36a      	add	r3, pc, #424	@ (adr r3, 800b748 <_dtoa_r+0x2c0>)
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	f7f4 fe60 	bl	8000268 <__adddf3>
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	460d      	mov	r5, r1
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	f7f4 ffa7 	bl	8000500 <__aeabi_i2d>
 800b5b2:	a367      	add	r3, pc, #412	@ (adr r3, 800b750 <_dtoa_r+0x2c8>)
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	f7f5 f80c 	bl	80005d4 <__aeabi_dmul>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	f7f4 fe50 	bl	8000268 <__adddf3>
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	460d      	mov	r5, r1
 800b5cc:	f7f5 fab2 	bl	8000b34 <__aeabi_d2iz>
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	4607      	mov	r7, r0
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	4629      	mov	r1, r5
 800b5da:	f7f5 fa6d 	bl	8000ab8 <__aeabi_dcmplt>
 800b5de:	b140      	cbz	r0, 800b5f2 <_dtoa_r+0x16a>
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f7f4 ff8d 	bl	8000500 <__aeabi_i2d>
 800b5e6:	4622      	mov	r2, r4
 800b5e8:	462b      	mov	r3, r5
 800b5ea:	f7f5 fa5b 	bl	8000aa4 <__aeabi_dcmpeq>
 800b5ee:	b900      	cbnz	r0, 800b5f2 <_dtoa_r+0x16a>
 800b5f0:	3f01      	subs	r7, #1
 800b5f2:	2f16      	cmp	r7, #22
 800b5f4:	d852      	bhi.n	800b69c <_dtoa_r+0x214>
 800b5f6:	4b5d      	ldr	r3, [pc, #372]	@ (800b76c <_dtoa_r+0x2e4>)
 800b5f8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b5fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	f7f5 fa58 	bl	8000ab8 <__aeabi_dcmplt>
 800b608:	2800      	cmp	r0, #0
 800b60a:	d049      	beq.n	800b6a0 <_dtoa_r+0x218>
 800b60c:	3f01      	subs	r7, #1
 800b60e:	2300      	movs	r3, #0
 800b610:	9310      	str	r3, [sp, #64]	@ 0x40
 800b612:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b614:	1b9b      	subs	r3, r3, r6
 800b616:	1e5a      	subs	r2, r3, #1
 800b618:	bf4c      	ite	mi
 800b61a:	f1c3 0301 	rsbmi	r3, r3, #1
 800b61e:	2300      	movpl	r3, #0
 800b620:	9206      	str	r2, [sp, #24]
 800b622:	bf45      	ittet	mi
 800b624:	9300      	strmi	r3, [sp, #0]
 800b626:	2300      	movmi	r3, #0
 800b628:	9300      	strpl	r3, [sp, #0]
 800b62a:	9306      	strmi	r3, [sp, #24]
 800b62c:	2f00      	cmp	r7, #0
 800b62e:	db39      	blt.n	800b6a4 <_dtoa_r+0x21c>
 800b630:	9b06      	ldr	r3, [sp, #24]
 800b632:	970d      	str	r7, [sp, #52]	@ 0x34
 800b634:	443b      	add	r3, r7
 800b636:	9306      	str	r3, [sp, #24]
 800b638:	2300      	movs	r3, #0
 800b63a:	9308      	str	r3, [sp, #32]
 800b63c:	9b07      	ldr	r3, [sp, #28]
 800b63e:	2b09      	cmp	r3, #9
 800b640:	d863      	bhi.n	800b70a <_dtoa_r+0x282>
 800b642:	2b05      	cmp	r3, #5
 800b644:	bfc5      	ittet	gt
 800b646:	3b04      	subgt	r3, #4
 800b648:	2400      	movgt	r4, #0
 800b64a:	2401      	movle	r4, #1
 800b64c:	9307      	strgt	r3, [sp, #28]
 800b64e:	9b07      	ldr	r3, [sp, #28]
 800b650:	3b02      	subs	r3, #2
 800b652:	2b03      	cmp	r3, #3
 800b654:	d865      	bhi.n	800b722 <_dtoa_r+0x29a>
 800b656:	e8df f003 	tbb	[pc, r3]
 800b65a:	5654      	.short	0x5654
 800b65c:	2d39      	.short	0x2d39
 800b65e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b662:	441e      	add	r6, r3
 800b664:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b668:	2b20      	cmp	r3, #32
 800b66a:	bfc9      	itett	gt
 800b66c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b670:	f1c3 0320 	rsble	r3, r3, #32
 800b674:	409f      	lslgt	r7, r3
 800b676:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b67a:	bfd8      	it	le
 800b67c:	fa04 f003 	lslle.w	r0, r4, r3
 800b680:	f106 36ff 	add.w	r6, r6, #4294967295
 800b684:	bfc4      	itt	gt
 800b686:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b68a:	ea47 0003 	orrgt.w	r0, r7, r3
 800b68e:	f7f4 ff27 	bl	80004e0 <__aeabi_ui2d>
 800b692:	2201      	movs	r2, #1
 800b694:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b698:	9212      	str	r2, [sp, #72]	@ 0x48
 800b69a:	e776      	b.n	800b58a <_dtoa_r+0x102>
 800b69c:	2301      	movs	r3, #1
 800b69e:	e7b7      	b.n	800b610 <_dtoa_r+0x188>
 800b6a0:	9010      	str	r0, [sp, #64]	@ 0x40
 800b6a2:	e7b6      	b.n	800b612 <_dtoa_r+0x18a>
 800b6a4:	9b00      	ldr	r3, [sp, #0]
 800b6a6:	1bdb      	subs	r3, r3, r7
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	427b      	negs	r3, r7
 800b6ac:	9308      	str	r3, [sp, #32]
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	930d      	str	r3, [sp, #52]	@ 0x34
 800b6b2:	e7c3      	b.n	800b63c <_dtoa_r+0x1b4>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b6ba:	eb07 0b03 	add.w	fp, r7, r3
 800b6be:	f10b 0301 	add.w	r3, fp, #1
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	9303      	str	r3, [sp, #12]
 800b6c6:	bfb8      	it	lt
 800b6c8:	2301      	movlt	r3, #1
 800b6ca:	e006      	b.n	800b6da <_dtoa_r+0x252>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	dd28      	ble.n	800b728 <_dtoa_r+0x2a0>
 800b6d6:	469b      	mov	fp, r3
 800b6d8:	9303      	str	r3, [sp, #12]
 800b6da:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b6de:	2100      	movs	r1, #0
 800b6e0:	2204      	movs	r2, #4
 800b6e2:	f102 0514 	add.w	r5, r2, #20
 800b6e6:	429d      	cmp	r5, r3
 800b6e8:	d926      	bls.n	800b738 <_dtoa_r+0x2b0>
 800b6ea:	6041      	str	r1, [r0, #4]
 800b6ec:	4648      	mov	r0, r9
 800b6ee:	f000 fde9 	bl	800c2c4 <_Balloc>
 800b6f2:	4682      	mov	sl, r0
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d141      	bne.n	800b77c <_dtoa_r+0x2f4>
 800b6f8:	4b1d      	ldr	r3, [pc, #116]	@ (800b770 <_dtoa_r+0x2e8>)
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	f240 11af 	movw	r1, #431	@ 0x1af
 800b700:	e6d9      	b.n	800b4b6 <_dtoa_r+0x2e>
 800b702:	2300      	movs	r3, #0
 800b704:	e7e3      	b.n	800b6ce <_dtoa_r+0x246>
 800b706:	2300      	movs	r3, #0
 800b708:	e7d5      	b.n	800b6b6 <_dtoa_r+0x22e>
 800b70a:	2401      	movs	r4, #1
 800b70c:	2300      	movs	r3, #0
 800b70e:	9409      	str	r4, [sp, #36]	@ 0x24
 800b710:	9307      	str	r3, [sp, #28]
 800b712:	f04f 3bff 	mov.w	fp, #4294967295
 800b716:	2200      	movs	r2, #0
 800b718:	2312      	movs	r3, #18
 800b71a:	f8cd b00c 	str.w	fp, [sp, #12]
 800b71e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b720:	e7db      	b.n	800b6da <_dtoa_r+0x252>
 800b722:	2301      	movs	r3, #1
 800b724:	9309      	str	r3, [sp, #36]	@ 0x24
 800b726:	e7f4      	b.n	800b712 <_dtoa_r+0x28a>
 800b728:	f04f 0b01 	mov.w	fp, #1
 800b72c:	465b      	mov	r3, fp
 800b72e:	f8cd b00c 	str.w	fp, [sp, #12]
 800b732:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b736:	e7d0      	b.n	800b6da <_dtoa_r+0x252>
 800b738:	3101      	adds	r1, #1
 800b73a:	0052      	lsls	r2, r2, #1
 800b73c:	e7d1      	b.n	800b6e2 <_dtoa_r+0x25a>
 800b73e:	bf00      	nop
 800b740:	636f4361 	.word	0x636f4361
 800b744:	3fd287a7 	.word	0x3fd287a7
 800b748:	8b60c8b3 	.word	0x8b60c8b3
 800b74c:	3fc68a28 	.word	0x3fc68a28
 800b750:	509f79fb 	.word	0x509f79fb
 800b754:	3fd34413 	.word	0x3fd34413
 800b758:	0800f5bb 	.word	0x0800f5bb
 800b75c:	0800f6c2 	.word	0x0800f6c2
 800b760:	7ff00000 	.word	0x7ff00000
 800b764:	0800f7ae 	.word	0x0800f7ae
 800b768:	3ff80000 	.word	0x3ff80000
 800b76c:	0800f910 	.word	0x0800f910
 800b770:	0800f71a 	.word	0x0800f71a
 800b774:	0800f6be 	.word	0x0800f6be
 800b778:	0800f7ad 	.word	0x0800f7ad
 800b77c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b780:	6018      	str	r0, [r3, #0]
 800b782:	9b03      	ldr	r3, [sp, #12]
 800b784:	2b0e      	cmp	r3, #14
 800b786:	f200 80a1 	bhi.w	800b8cc <_dtoa_r+0x444>
 800b78a:	2c00      	cmp	r4, #0
 800b78c:	f000 809e 	beq.w	800b8cc <_dtoa_r+0x444>
 800b790:	2f00      	cmp	r7, #0
 800b792:	dd33      	ble.n	800b7fc <_dtoa_r+0x374>
 800b794:	f007 020f 	and.w	r2, r7, #15
 800b798:	4b9b      	ldr	r3, [pc, #620]	@ (800ba08 <_dtoa_r+0x580>)
 800b79a:	05f8      	lsls	r0, r7, #23
 800b79c:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b7a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7a4:	ed93 7b00 	vldr	d7, [r3]
 800b7a8:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b7ac:	d516      	bpl.n	800b7dc <_dtoa_r+0x354>
 800b7ae:	4b97      	ldr	r3, [pc, #604]	@ (800ba0c <_dtoa_r+0x584>)
 800b7b0:	f004 040f 	and.w	r4, r4, #15
 800b7b4:	2603      	movs	r6, #3
 800b7b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b7ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b7be:	f7f5 f833 	bl	8000828 <__aeabi_ddiv>
 800b7c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7c6:	4d91      	ldr	r5, [pc, #580]	@ (800ba0c <_dtoa_r+0x584>)
 800b7c8:	b954      	cbnz	r4, 800b7e0 <_dtoa_r+0x358>
 800b7ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b7ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7d2:	f7f5 f829 	bl	8000828 <__aeabi_ddiv>
 800b7d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7da:	e028      	b.n	800b82e <_dtoa_r+0x3a6>
 800b7dc:	2602      	movs	r6, #2
 800b7de:	e7f2      	b.n	800b7c6 <_dtoa_r+0x33e>
 800b7e0:	07e1      	lsls	r1, r4, #31
 800b7e2:	d508      	bpl.n	800b7f6 <_dtoa_r+0x36e>
 800b7e4:	3601      	adds	r6, #1
 800b7e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b7ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7ee:	f7f4 fef1 	bl	80005d4 <__aeabi_dmul>
 800b7f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b7f6:	1064      	asrs	r4, r4, #1
 800b7f8:	3508      	adds	r5, #8
 800b7fa:	e7e5      	b.n	800b7c8 <_dtoa_r+0x340>
 800b7fc:	f000 80af 	beq.w	800b95e <_dtoa_r+0x4d6>
 800b800:	427c      	negs	r4, r7
 800b802:	4b81      	ldr	r3, [pc, #516]	@ (800ba08 <_dtoa_r+0x580>)
 800b804:	4d81      	ldr	r5, [pc, #516]	@ (800ba0c <_dtoa_r+0x584>)
 800b806:	2602      	movs	r6, #2
 800b808:	f004 020f 	and.w	r2, r4, #15
 800b80c:	1124      	asrs	r4, r4, #4
 800b80e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b812:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81a:	f7f4 fedb 	bl	80005d4 <__aeabi_dmul>
 800b81e:	2300      	movs	r3, #0
 800b820:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b824:	2c00      	cmp	r4, #0
 800b826:	f040 808f 	bne.w	800b948 <_dtoa_r+0x4c0>
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1d3      	bne.n	800b7d6 <_dtoa_r+0x34e>
 800b82e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b830:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	f000 8094 	beq.w	800b962 <_dtoa_r+0x4da>
 800b83a:	2200      	movs	r2, #0
 800b83c:	4b74      	ldr	r3, [pc, #464]	@ (800ba10 <_dtoa_r+0x588>)
 800b83e:	4620      	mov	r0, r4
 800b840:	4629      	mov	r1, r5
 800b842:	f7f5 f939 	bl	8000ab8 <__aeabi_dcmplt>
 800b846:	2800      	cmp	r0, #0
 800b848:	f000 808b 	beq.w	800b962 <_dtoa_r+0x4da>
 800b84c:	9b03      	ldr	r3, [sp, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f000 8087 	beq.w	800b962 <_dtoa_r+0x4da>
 800b854:	f1bb 0f00 	cmp.w	fp, #0
 800b858:	dd34      	ble.n	800b8c4 <_dtoa_r+0x43c>
 800b85a:	4620      	mov	r0, r4
 800b85c:	f107 38ff 	add.w	r8, r7, #4294967295
 800b860:	3601      	adds	r6, #1
 800b862:	465c      	mov	r4, fp
 800b864:	2200      	movs	r2, #0
 800b866:	4b6b      	ldr	r3, [pc, #428]	@ (800ba14 <_dtoa_r+0x58c>)
 800b868:	4629      	mov	r1, r5
 800b86a:	f7f4 feb3 	bl	80005d4 <__aeabi_dmul>
 800b86e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b872:	4630      	mov	r0, r6
 800b874:	f7f4 fe44 	bl	8000500 <__aeabi_i2d>
 800b878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b87c:	f7f4 feaa 	bl	80005d4 <__aeabi_dmul>
 800b880:	2200      	movs	r2, #0
 800b882:	4b65      	ldr	r3, [pc, #404]	@ (800ba18 <_dtoa_r+0x590>)
 800b884:	f7f4 fcf0 	bl	8000268 <__adddf3>
 800b888:	4605      	mov	r5, r0
 800b88a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b88e:	2c00      	cmp	r4, #0
 800b890:	d16a      	bne.n	800b968 <_dtoa_r+0x4e0>
 800b892:	2200      	movs	r2, #0
 800b894:	4b61      	ldr	r3, [pc, #388]	@ (800ba1c <_dtoa_r+0x594>)
 800b896:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b89a:	f7f4 fce3 	bl	8000264 <__aeabi_dsub>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b8a6:	462a      	mov	r2, r5
 800b8a8:	4633      	mov	r3, r6
 800b8aa:	f7f5 f923 	bl	8000af4 <__aeabi_dcmpgt>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	f040 8298 	bne.w	800bde4 <_dtoa_r+0x95c>
 800b8b4:	462a      	mov	r2, r5
 800b8b6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b8ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8be:	f7f5 f8fb 	bl	8000ab8 <__aeabi_dcmplt>
 800b8c2:	bb38      	cbnz	r0, 800b914 <_dtoa_r+0x48c>
 800b8c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b8c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b8cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f2c0 8157 	blt.w	800bb82 <_dtoa_r+0x6fa>
 800b8d4:	2f0e      	cmp	r7, #14
 800b8d6:	f300 8154 	bgt.w	800bb82 <_dtoa_r+0x6fa>
 800b8da:	4b4b      	ldr	r3, [pc, #300]	@ (800ba08 <_dtoa_r+0x580>)
 800b8dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b8e0:	ed93 7b00 	vldr	d7, [r3]
 800b8e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	ed8d 7b00 	vstr	d7, [sp]
 800b8ec:	f280 80e5 	bge.w	800baba <_dtoa_r+0x632>
 800b8f0:	9b03      	ldr	r3, [sp, #12]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f300 80e1 	bgt.w	800baba <_dtoa_r+0x632>
 800b8f8:	d10c      	bne.n	800b914 <_dtoa_r+0x48c>
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	4b47      	ldr	r3, [pc, #284]	@ (800ba1c <_dtoa_r+0x594>)
 800b8fe:	ec51 0b17 	vmov	r0, r1, d7
 800b902:	f7f4 fe67 	bl	80005d4 <__aeabi_dmul>
 800b906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b90a:	f7f5 f8e9 	bl	8000ae0 <__aeabi_dcmpge>
 800b90e:	2800      	cmp	r0, #0
 800b910:	f000 8266 	beq.w	800bde0 <_dtoa_r+0x958>
 800b914:	2400      	movs	r4, #0
 800b916:	4625      	mov	r5, r4
 800b918:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b91a:	4656      	mov	r6, sl
 800b91c:	ea6f 0803 	mvn.w	r8, r3
 800b920:	2700      	movs	r7, #0
 800b922:	4621      	mov	r1, r4
 800b924:	4648      	mov	r0, r9
 800b926:	f000 fd0d 	bl	800c344 <_Bfree>
 800b92a:	2d00      	cmp	r5, #0
 800b92c:	f000 80bd 	beq.w	800baaa <_dtoa_r+0x622>
 800b930:	b12f      	cbz	r7, 800b93e <_dtoa_r+0x4b6>
 800b932:	42af      	cmp	r7, r5
 800b934:	d003      	beq.n	800b93e <_dtoa_r+0x4b6>
 800b936:	4639      	mov	r1, r7
 800b938:	4648      	mov	r0, r9
 800b93a:	f000 fd03 	bl	800c344 <_Bfree>
 800b93e:	4629      	mov	r1, r5
 800b940:	4648      	mov	r0, r9
 800b942:	f000 fcff 	bl	800c344 <_Bfree>
 800b946:	e0b0      	b.n	800baaa <_dtoa_r+0x622>
 800b948:	07e2      	lsls	r2, r4, #31
 800b94a:	d505      	bpl.n	800b958 <_dtoa_r+0x4d0>
 800b94c:	3601      	adds	r6, #1
 800b94e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b952:	f7f4 fe3f 	bl	80005d4 <__aeabi_dmul>
 800b956:	2301      	movs	r3, #1
 800b958:	1064      	asrs	r4, r4, #1
 800b95a:	3508      	adds	r5, #8
 800b95c:	e762      	b.n	800b824 <_dtoa_r+0x39c>
 800b95e:	2602      	movs	r6, #2
 800b960:	e765      	b.n	800b82e <_dtoa_r+0x3a6>
 800b962:	46b8      	mov	r8, r7
 800b964:	9c03      	ldr	r4, [sp, #12]
 800b966:	e784      	b.n	800b872 <_dtoa_r+0x3ea>
 800b968:	4b27      	ldr	r3, [pc, #156]	@ (800ba08 <_dtoa_r+0x580>)
 800b96a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b96c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b970:	4454      	add	r4, sl
 800b972:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b976:	2900      	cmp	r1, #0
 800b978:	d054      	beq.n	800ba24 <_dtoa_r+0x59c>
 800b97a:	2000      	movs	r0, #0
 800b97c:	4928      	ldr	r1, [pc, #160]	@ (800ba20 <_dtoa_r+0x598>)
 800b97e:	f7f4 ff53 	bl	8000828 <__aeabi_ddiv>
 800b982:	4633      	mov	r3, r6
 800b984:	4656      	mov	r6, sl
 800b986:	462a      	mov	r2, r5
 800b988:	f7f4 fc6c 	bl	8000264 <__aeabi_dsub>
 800b98c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b990:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b994:	f7f5 f8ce 	bl	8000b34 <__aeabi_d2iz>
 800b998:	4605      	mov	r5, r0
 800b99a:	f7f4 fdb1 	bl	8000500 <__aeabi_i2d>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	3530      	adds	r5, #48	@ 0x30
 800b9a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9a8:	f7f4 fc5c 	bl	8000264 <__aeabi_dsub>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	f806 5b01 	strb.w	r5, [r6], #1
 800b9b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b9b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b9bc:	f7f5 f87c 	bl	8000ab8 <__aeabi_dcmplt>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d172      	bne.n	800baaa <_dtoa_r+0x622>
 800b9c4:	2000      	movs	r0, #0
 800b9c6:	4912      	ldr	r1, [pc, #72]	@ (800ba10 <_dtoa_r+0x588>)
 800b9c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9cc:	f7f4 fc4a 	bl	8000264 <__aeabi_dsub>
 800b9d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b9d4:	f7f5 f870 	bl	8000ab8 <__aeabi_dcmplt>
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	f040 80b4 	bne.w	800bb46 <_dtoa_r+0x6be>
 800b9de:	42a6      	cmp	r6, r4
 800b9e0:	f43f af70 	beq.w	800b8c4 <_dtoa_r+0x43c>
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	4b0b      	ldr	r3, [pc, #44]	@ (800ba14 <_dtoa_r+0x58c>)
 800b9e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b9ec:	f7f4 fdf2 	bl	80005d4 <__aeabi_dmul>
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	4b08      	ldr	r3, [pc, #32]	@ (800ba14 <_dtoa_r+0x58c>)
 800b9f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b9f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9fc:	f7f4 fdea 	bl	80005d4 <__aeabi_dmul>
 800ba00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba04:	e7c4      	b.n	800b990 <_dtoa_r+0x508>
 800ba06:	bf00      	nop
 800ba08:	0800f910 	.word	0x0800f910
 800ba0c:	0800f8e8 	.word	0x0800f8e8
 800ba10:	3ff00000 	.word	0x3ff00000
 800ba14:	40240000 	.word	0x40240000
 800ba18:	401c0000 	.word	0x401c0000
 800ba1c:	40140000 	.word	0x40140000
 800ba20:	3fe00000 	.word	0x3fe00000
 800ba24:	4631      	mov	r1, r6
 800ba26:	4656      	mov	r6, sl
 800ba28:	4628      	mov	r0, r5
 800ba2a:	f7f4 fdd3 	bl	80005d4 <__aeabi_dmul>
 800ba2e:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ba30:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ba34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba38:	f7f5 f87c 	bl	8000b34 <__aeabi_d2iz>
 800ba3c:	4605      	mov	r5, r0
 800ba3e:	f7f4 fd5f 	bl	8000500 <__aeabi_i2d>
 800ba42:	4602      	mov	r2, r0
 800ba44:	3530      	adds	r5, #48	@ 0x30
 800ba46:	460b      	mov	r3, r1
 800ba48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba4c:	f7f4 fc0a 	bl	8000264 <__aeabi_dsub>
 800ba50:	f806 5b01 	strb.w	r5, [r6], #1
 800ba54:	4602      	mov	r2, r0
 800ba56:	460b      	mov	r3, r1
 800ba58:	42a6      	cmp	r6, r4
 800ba5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba5e:	f04f 0200 	mov.w	r2, #0
 800ba62:	d124      	bne.n	800baae <_dtoa_r+0x626>
 800ba64:	4baf      	ldr	r3, [pc, #700]	@ (800bd24 <_dtoa_r+0x89c>)
 800ba66:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ba6a:	f7f4 fbfd 	bl	8000268 <__adddf3>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	460b      	mov	r3, r1
 800ba72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba76:	f7f5 f83d 	bl	8000af4 <__aeabi_dcmpgt>
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	d163      	bne.n	800bb46 <_dtoa_r+0x6be>
 800ba7e:	2000      	movs	r0, #0
 800ba80:	49a8      	ldr	r1, [pc, #672]	@ (800bd24 <_dtoa_r+0x89c>)
 800ba82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ba86:	f7f4 fbed 	bl	8000264 <__aeabi_dsub>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba92:	f7f5 f811 	bl	8000ab8 <__aeabi_dcmplt>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	f43f af14 	beq.w	800b8c4 <_dtoa_r+0x43c>
 800ba9c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ba9e:	1e73      	subs	r3, r6, #1
 800baa0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800baa2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800baa6:	2b30      	cmp	r3, #48	@ 0x30
 800baa8:	d0f8      	beq.n	800ba9c <_dtoa_r+0x614>
 800baaa:	4647      	mov	r7, r8
 800baac:	e03b      	b.n	800bb26 <_dtoa_r+0x69e>
 800baae:	4b9e      	ldr	r3, [pc, #632]	@ (800bd28 <_dtoa_r+0x8a0>)
 800bab0:	f7f4 fd90 	bl	80005d4 <__aeabi_dmul>
 800bab4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bab8:	e7bc      	b.n	800ba34 <_dtoa_r+0x5ac>
 800baba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800babe:	4656      	mov	r6, sl
 800bac0:	4620      	mov	r0, r4
 800bac2:	4629      	mov	r1, r5
 800bac4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bac8:	f7f4 feae 	bl	8000828 <__aeabi_ddiv>
 800bacc:	f7f5 f832 	bl	8000b34 <__aeabi_d2iz>
 800bad0:	4680      	mov	r8, r0
 800bad2:	f7f4 fd15 	bl	8000500 <__aeabi_i2d>
 800bad6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bada:	f7f4 fd7b 	bl	80005d4 <__aeabi_dmul>
 800bade:	4602      	mov	r2, r0
 800bae0:	4620      	mov	r0, r4
 800bae2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bae6:	460b      	mov	r3, r1
 800bae8:	4629      	mov	r1, r5
 800baea:	f7f4 fbbb 	bl	8000264 <__aeabi_dsub>
 800baee:	9d03      	ldr	r5, [sp, #12]
 800baf0:	f806 4b01 	strb.w	r4, [r6], #1
 800baf4:	eba6 040a 	sub.w	r4, r6, sl
 800baf8:	4602      	mov	r2, r0
 800bafa:	460b      	mov	r3, r1
 800bafc:	42a5      	cmp	r5, r4
 800bafe:	d133      	bne.n	800bb68 <_dtoa_r+0x6e0>
 800bb00:	f7f4 fbb2 	bl	8000268 <__adddf3>
 800bb04:	4604      	mov	r4, r0
 800bb06:	460d      	mov	r5, r1
 800bb08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb0c:	f7f4 fff2 	bl	8000af4 <__aeabi_dcmpgt>
 800bb10:	b9c0      	cbnz	r0, 800bb44 <_dtoa_r+0x6bc>
 800bb12:	4620      	mov	r0, r4
 800bb14:	4629      	mov	r1, r5
 800bb16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb1a:	f7f4 ffc3 	bl	8000aa4 <__aeabi_dcmpeq>
 800bb1e:	b110      	cbz	r0, 800bb26 <_dtoa_r+0x69e>
 800bb20:	f018 0f01 	tst.w	r8, #1
 800bb24:	d10e      	bne.n	800bb44 <_dtoa_r+0x6bc>
 800bb26:	9902      	ldr	r1, [sp, #8]
 800bb28:	4648      	mov	r0, r9
 800bb2a:	f000 fc0b 	bl	800c344 <_Bfree>
 800bb2e:	2300      	movs	r3, #0
 800bb30:	3701      	adds	r7, #1
 800bb32:	7033      	strb	r3, [r6, #0]
 800bb34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bb36:	601f      	str	r7, [r3, #0]
 800bb38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f000 824c 	beq.w	800bfd8 <_dtoa_r+0xb50>
 800bb40:	601e      	str	r6, [r3, #0]
 800bb42:	e249      	b.n	800bfd8 <_dtoa_r+0xb50>
 800bb44:	46b8      	mov	r8, r7
 800bb46:	4633      	mov	r3, r6
 800bb48:	461e      	mov	r6, r3
 800bb4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb4e:	2a39      	cmp	r2, #57	@ 0x39
 800bb50:	d106      	bne.n	800bb60 <_dtoa_r+0x6d8>
 800bb52:	459a      	cmp	sl, r3
 800bb54:	d1f8      	bne.n	800bb48 <_dtoa_r+0x6c0>
 800bb56:	2230      	movs	r2, #48	@ 0x30
 800bb58:	f108 0801 	add.w	r8, r8, #1
 800bb5c:	f88a 2000 	strb.w	r2, [sl]
 800bb60:	781a      	ldrb	r2, [r3, #0]
 800bb62:	3201      	adds	r2, #1
 800bb64:	701a      	strb	r2, [r3, #0]
 800bb66:	e7a0      	b.n	800baaa <_dtoa_r+0x622>
 800bb68:	2200      	movs	r2, #0
 800bb6a:	4b6f      	ldr	r3, [pc, #444]	@ (800bd28 <_dtoa_r+0x8a0>)
 800bb6c:	f7f4 fd32 	bl	80005d4 <__aeabi_dmul>
 800bb70:	2200      	movs	r2, #0
 800bb72:	2300      	movs	r3, #0
 800bb74:	4604      	mov	r4, r0
 800bb76:	460d      	mov	r5, r1
 800bb78:	f7f4 ff94 	bl	8000aa4 <__aeabi_dcmpeq>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	d09f      	beq.n	800bac0 <_dtoa_r+0x638>
 800bb80:	e7d1      	b.n	800bb26 <_dtoa_r+0x69e>
 800bb82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb84:	2a00      	cmp	r2, #0
 800bb86:	f000 80ea 	beq.w	800bd5e <_dtoa_r+0x8d6>
 800bb8a:	9a07      	ldr	r2, [sp, #28]
 800bb8c:	2a01      	cmp	r2, #1
 800bb8e:	f300 80cd 	bgt.w	800bd2c <_dtoa_r+0x8a4>
 800bb92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bb94:	2a00      	cmp	r2, #0
 800bb96:	f000 80c1 	beq.w	800bd1c <_dtoa_r+0x894>
 800bb9a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bb9e:	9c08      	ldr	r4, [sp, #32]
 800bba0:	9e00      	ldr	r6, [sp, #0]
 800bba2:	9a00      	ldr	r2, [sp, #0]
 800bba4:	2101      	movs	r1, #1
 800bba6:	4648      	mov	r0, r9
 800bba8:	441a      	add	r2, r3
 800bbaa:	9200      	str	r2, [sp, #0]
 800bbac:	9a06      	ldr	r2, [sp, #24]
 800bbae:	441a      	add	r2, r3
 800bbb0:	9206      	str	r2, [sp, #24]
 800bbb2:	f000 fcc7 	bl	800c544 <__i2b>
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	b166      	cbz	r6, 800bbd4 <_dtoa_r+0x74c>
 800bbba:	9b06      	ldr	r3, [sp, #24]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	dd09      	ble.n	800bbd4 <_dtoa_r+0x74c>
 800bbc0:	42b3      	cmp	r3, r6
 800bbc2:	9a00      	ldr	r2, [sp, #0]
 800bbc4:	bfa8      	it	ge
 800bbc6:	4633      	movge	r3, r6
 800bbc8:	1ad2      	subs	r2, r2, r3
 800bbca:	1af6      	subs	r6, r6, r3
 800bbcc:	9200      	str	r2, [sp, #0]
 800bbce:	9a06      	ldr	r2, [sp, #24]
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	9306      	str	r3, [sp, #24]
 800bbd4:	9b08      	ldr	r3, [sp, #32]
 800bbd6:	b30b      	cbz	r3, 800bc1c <_dtoa_r+0x794>
 800bbd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f000 80c6 	beq.w	800bd6c <_dtoa_r+0x8e4>
 800bbe0:	2c00      	cmp	r4, #0
 800bbe2:	f000 80c0 	beq.w	800bd66 <_dtoa_r+0x8de>
 800bbe6:	4629      	mov	r1, r5
 800bbe8:	4622      	mov	r2, r4
 800bbea:	4648      	mov	r0, r9
 800bbec:	f000 fd64 	bl	800c6b8 <__pow5mult>
 800bbf0:	9a02      	ldr	r2, [sp, #8]
 800bbf2:	4601      	mov	r1, r0
 800bbf4:	4605      	mov	r5, r0
 800bbf6:	4648      	mov	r0, r9
 800bbf8:	f000 fcba 	bl	800c570 <__multiply>
 800bbfc:	9902      	ldr	r1, [sp, #8]
 800bbfe:	4680      	mov	r8, r0
 800bc00:	4648      	mov	r0, r9
 800bc02:	f000 fb9f 	bl	800c344 <_Bfree>
 800bc06:	9b08      	ldr	r3, [sp, #32]
 800bc08:	1b1b      	subs	r3, r3, r4
 800bc0a:	9308      	str	r3, [sp, #32]
 800bc0c:	f000 80b1 	beq.w	800bd72 <_dtoa_r+0x8ea>
 800bc10:	9a08      	ldr	r2, [sp, #32]
 800bc12:	4641      	mov	r1, r8
 800bc14:	4648      	mov	r0, r9
 800bc16:	f000 fd4f 	bl	800c6b8 <__pow5mult>
 800bc1a:	9002      	str	r0, [sp, #8]
 800bc1c:	2101      	movs	r1, #1
 800bc1e:	4648      	mov	r0, r9
 800bc20:	f000 fc90 	bl	800c544 <__i2b>
 800bc24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc26:	4604      	mov	r4, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 81d9 	beq.w	800bfe0 <_dtoa_r+0xb58>
 800bc2e:	461a      	mov	r2, r3
 800bc30:	4601      	mov	r1, r0
 800bc32:	4648      	mov	r0, r9
 800bc34:	f000 fd40 	bl	800c6b8 <__pow5mult>
 800bc38:	9b07      	ldr	r3, [sp, #28]
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	f300 809f 	bgt.w	800bd80 <_dtoa_r+0x8f8>
 800bc42:	9b04      	ldr	r3, [sp, #16]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f040 8097 	bne.w	800bd78 <_dtoa_r+0x8f0>
 800bc4a:	9b05      	ldr	r3, [sp, #20]
 800bc4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f040 8093 	bne.w	800bd7c <_dtoa_r+0x8f4>
 800bc56:	9b05      	ldr	r3, [sp, #20]
 800bc58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc5c:	0d1b      	lsrs	r3, r3, #20
 800bc5e:	051b      	lsls	r3, r3, #20
 800bc60:	b133      	cbz	r3, 800bc70 <_dtoa_r+0x7e8>
 800bc62:	9b00      	ldr	r3, [sp, #0]
 800bc64:	3301      	adds	r3, #1
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	9b06      	ldr	r3, [sp, #24]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	9306      	str	r3, [sp, #24]
 800bc6e:	2301      	movs	r3, #1
 800bc70:	9308      	str	r3, [sp, #32]
 800bc72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f000 81b9 	beq.w	800bfec <_dtoa_r+0xb64>
 800bc7a:	6923      	ldr	r3, [r4, #16]
 800bc7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc80:	6918      	ldr	r0, [r3, #16]
 800bc82:	f000 fc13 	bl	800c4ac <__hi0bits>
 800bc86:	f1c0 0020 	rsb	r0, r0, #32
 800bc8a:	9b06      	ldr	r3, [sp, #24]
 800bc8c:	4418      	add	r0, r3
 800bc8e:	f010 001f 	ands.w	r0, r0, #31
 800bc92:	f000 8082 	beq.w	800bd9a <_dtoa_r+0x912>
 800bc96:	f1c0 0320 	rsb	r3, r0, #32
 800bc9a:	2b04      	cmp	r3, #4
 800bc9c:	dd73      	ble.n	800bd86 <_dtoa_r+0x8fe>
 800bc9e:	f1c0 001c 	rsb	r0, r0, #28
 800bca2:	9b00      	ldr	r3, [sp, #0]
 800bca4:	4403      	add	r3, r0
 800bca6:	4406      	add	r6, r0
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	9b06      	ldr	r3, [sp, #24]
 800bcac:	4403      	add	r3, r0
 800bcae:	9306      	str	r3, [sp, #24]
 800bcb0:	9b00      	ldr	r3, [sp, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	dd05      	ble.n	800bcc2 <_dtoa_r+0x83a>
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	9902      	ldr	r1, [sp, #8]
 800bcba:	4648      	mov	r0, r9
 800bcbc:	f000 fd56 	bl	800c76c <__lshift>
 800bcc0:	9002      	str	r0, [sp, #8]
 800bcc2:	9b06      	ldr	r3, [sp, #24]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	dd05      	ble.n	800bcd4 <_dtoa_r+0x84c>
 800bcc8:	4621      	mov	r1, r4
 800bcca:	461a      	mov	r2, r3
 800bccc:	4648      	mov	r0, r9
 800bcce:	f000 fd4d 	bl	800c76c <__lshift>
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d061      	beq.n	800bd9e <_dtoa_r+0x916>
 800bcda:	4621      	mov	r1, r4
 800bcdc:	9802      	ldr	r0, [sp, #8]
 800bcde:	f000 fdb1 	bl	800c844 <__mcmp>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	da5b      	bge.n	800bd9e <_dtoa_r+0x916>
 800bce6:	2300      	movs	r3, #0
 800bce8:	220a      	movs	r2, #10
 800bcea:	9902      	ldr	r1, [sp, #8]
 800bcec:	4648      	mov	r0, r9
 800bcee:	f000 fb4b 	bl	800c388 <__multadd>
 800bcf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf4:	f107 38ff 	add.w	r8, r7, #4294967295
 800bcf8:	9002      	str	r0, [sp, #8]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f000 8178 	beq.w	800bff0 <_dtoa_r+0xb68>
 800bd00:	4629      	mov	r1, r5
 800bd02:	2300      	movs	r3, #0
 800bd04:	220a      	movs	r2, #10
 800bd06:	4648      	mov	r0, r9
 800bd08:	f000 fb3e 	bl	800c388 <__multadd>
 800bd0c:	f1bb 0f00 	cmp.w	fp, #0
 800bd10:	4605      	mov	r5, r0
 800bd12:	dc6f      	bgt.n	800bdf4 <_dtoa_r+0x96c>
 800bd14:	9b07      	ldr	r3, [sp, #28]
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	dc49      	bgt.n	800bdae <_dtoa_r+0x926>
 800bd1a:	e06b      	b.n	800bdf4 <_dtoa_r+0x96c>
 800bd1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bd1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bd22:	e73c      	b.n	800bb9e <_dtoa_r+0x716>
 800bd24:	3fe00000 	.word	0x3fe00000
 800bd28:	40240000 	.word	0x40240000
 800bd2c:	9b03      	ldr	r3, [sp, #12]
 800bd2e:	1e5c      	subs	r4, r3, #1
 800bd30:	9b08      	ldr	r3, [sp, #32]
 800bd32:	42a3      	cmp	r3, r4
 800bd34:	db09      	blt.n	800bd4a <_dtoa_r+0x8c2>
 800bd36:	1b1c      	subs	r4, r3, r4
 800bd38:	9b03      	ldr	r3, [sp, #12]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f6bf af30 	bge.w	800bba0 <_dtoa_r+0x718>
 800bd40:	9b00      	ldr	r3, [sp, #0]
 800bd42:	9a03      	ldr	r2, [sp, #12]
 800bd44:	1a9e      	subs	r6, r3, r2
 800bd46:	2300      	movs	r3, #0
 800bd48:	e72b      	b.n	800bba2 <_dtoa_r+0x71a>
 800bd4a:	9b08      	ldr	r3, [sp, #32]
 800bd4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bd4e:	1ae3      	subs	r3, r4, r3
 800bd50:	9408      	str	r4, [sp, #32]
 800bd52:	9e00      	ldr	r6, [sp, #0]
 800bd54:	2400      	movs	r4, #0
 800bd56:	441a      	add	r2, r3
 800bd58:	9b03      	ldr	r3, [sp, #12]
 800bd5a:	920d      	str	r2, [sp, #52]	@ 0x34
 800bd5c:	e721      	b.n	800bba2 <_dtoa_r+0x71a>
 800bd5e:	9c08      	ldr	r4, [sp, #32]
 800bd60:	9e00      	ldr	r6, [sp, #0]
 800bd62:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bd64:	e728      	b.n	800bbb8 <_dtoa_r+0x730>
 800bd66:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bd6a:	e751      	b.n	800bc10 <_dtoa_r+0x788>
 800bd6c:	9a08      	ldr	r2, [sp, #32]
 800bd6e:	9902      	ldr	r1, [sp, #8]
 800bd70:	e750      	b.n	800bc14 <_dtoa_r+0x78c>
 800bd72:	f8cd 8008 	str.w	r8, [sp, #8]
 800bd76:	e751      	b.n	800bc1c <_dtoa_r+0x794>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	e779      	b.n	800bc70 <_dtoa_r+0x7e8>
 800bd7c:	9b04      	ldr	r3, [sp, #16]
 800bd7e:	e777      	b.n	800bc70 <_dtoa_r+0x7e8>
 800bd80:	2300      	movs	r3, #0
 800bd82:	9308      	str	r3, [sp, #32]
 800bd84:	e779      	b.n	800bc7a <_dtoa_r+0x7f2>
 800bd86:	d093      	beq.n	800bcb0 <_dtoa_r+0x828>
 800bd88:	331c      	adds	r3, #28
 800bd8a:	9a00      	ldr	r2, [sp, #0]
 800bd8c:	441a      	add	r2, r3
 800bd8e:	441e      	add	r6, r3
 800bd90:	9200      	str	r2, [sp, #0]
 800bd92:	9a06      	ldr	r2, [sp, #24]
 800bd94:	441a      	add	r2, r3
 800bd96:	9206      	str	r2, [sp, #24]
 800bd98:	e78a      	b.n	800bcb0 <_dtoa_r+0x828>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	e7f4      	b.n	800bd88 <_dtoa_r+0x900>
 800bd9e:	9b03      	ldr	r3, [sp, #12]
 800bda0:	46b8      	mov	r8, r7
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	dc20      	bgt.n	800bde8 <_dtoa_r+0x960>
 800bda6:	469b      	mov	fp, r3
 800bda8:	9b07      	ldr	r3, [sp, #28]
 800bdaa:	2b02      	cmp	r3, #2
 800bdac:	dd1e      	ble.n	800bdec <_dtoa_r+0x964>
 800bdae:	f1bb 0f00 	cmp.w	fp, #0
 800bdb2:	f47f adb1 	bne.w	800b918 <_dtoa_r+0x490>
 800bdb6:	4621      	mov	r1, r4
 800bdb8:	465b      	mov	r3, fp
 800bdba:	2205      	movs	r2, #5
 800bdbc:	4648      	mov	r0, r9
 800bdbe:	f000 fae3 	bl	800c388 <__multadd>
 800bdc2:	4601      	mov	r1, r0
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	9802      	ldr	r0, [sp, #8]
 800bdc8:	f000 fd3c 	bl	800c844 <__mcmp>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	f77f ada3 	ble.w	800b918 <_dtoa_r+0x490>
 800bdd2:	4656      	mov	r6, sl
 800bdd4:	2331      	movs	r3, #49	@ 0x31
 800bdd6:	f108 0801 	add.w	r8, r8, #1
 800bdda:	f806 3b01 	strb.w	r3, [r6], #1
 800bdde:	e59f      	b.n	800b920 <_dtoa_r+0x498>
 800bde0:	46b8      	mov	r8, r7
 800bde2:	9c03      	ldr	r4, [sp, #12]
 800bde4:	4625      	mov	r5, r4
 800bde6:	e7f4      	b.n	800bdd2 <_dtoa_r+0x94a>
 800bde8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bdec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f000 8102 	beq.w	800bff8 <_dtoa_r+0xb70>
 800bdf4:	2e00      	cmp	r6, #0
 800bdf6:	dd05      	ble.n	800be04 <_dtoa_r+0x97c>
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	4632      	mov	r2, r6
 800bdfc:	4648      	mov	r0, r9
 800bdfe:	f000 fcb5 	bl	800c76c <__lshift>
 800be02:	4605      	mov	r5, r0
 800be04:	9b08      	ldr	r3, [sp, #32]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d05c      	beq.n	800bec4 <_dtoa_r+0xa3c>
 800be0a:	6869      	ldr	r1, [r5, #4]
 800be0c:	4648      	mov	r0, r9
 800be0e:	f000 fa59 	bl	800c2c4 <_Balloc>
 800be12:	4606      	mov	r6, r0
 800be14:	b928      	cbnz	r0, 800be22 <_dtoa_r+0x99a>
 800be16:	4b83      	ldr	r3, [pc, #524]	@ (800c024 <_dtoa_r+0xb9c>)
 800be18:	4602      	mov	r2, r0
 800be1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800be1e:	f7ff bb4a 	b.w	800b4b6 <_dtoa_r+0x2e>
 800be22:	692a      	ldr	r2, [r5, #16]
 800be24:	f105 010c 	add.w	r1, r5, #12
 800be28:	300c      	adds	r0, #12
 800be2a:	3202      	adds	r2, #2
 800be2c:	0092      	lsls	r2, r2, #2
 800be2e:	f002 fc85 	bl	800e73c <memcpy>
 800be32:	2201      	movs	r2, #1
 800be34:	4631      	mov	r1, r6
 800be36:	4648      	mov	r0, r9
 800be38:	f000 fc98 	bl	800c76c <__lshift>
 800be3c:	f10a 0301 	add.w	r3, sl, #1
 800be40:	462f      	mov	r7, r5
 800be42:	4605      	mov	r5, r0
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	eb0a 030b 	add.w	r3, sl, fp
 800be4a:	9308      	str	r3, [sp, #32]
 800be4c:	9b04      	ldr	r3, [sp, #16]
 800be4e:	f003 0301 	and.w	r3, r3, #1
 800be52:	9306      	str	r3, [sp, #24]
 800be54:	9b00      	ldr	r3, [sp, #0]
 800be56:	4621      	mov	r1, r4
 800be58:	9802      	ldr	r0, [sp, #8]
 800be5a:	f103 3bff 	add.w	fp, r3, #4294967295
 800be5e:	f7ff fa83 	bl	800b368 <quorem>
 800be62:	4603      	mov	r3, r0
 800be64:	4639      	mov	r1, r7
 800be66:	9003      	str	r0, [sp, #12]
 800be68:	3330      	adds	r3, #48	@ 0x30
 800be6a:	9802      	ldr	r0, [sp, #8]
 800be6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be6e:	f000 fce9 	bl	800c844 <__mcmp>
 800be72:	462a      	mov	r2, r5
 800be74:	9004      	str	r0, [sp, #16]
 800be76:	4621      	mov	r1, r4
 800be78:	4648      	mov	r0, r9
 800be7a:	f000 fcff 	bl	800c87c <__mdiff>
 800be7e:	68c2      	ldr	r2, [r0, #12]
 800be80:	4606      	mov	r6, r0
 800be82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be84:	bb02      	cbnz	r2, 800bec8 <_dtoa_r+0xa40>
 800be86:	4601      	mov	r1, r0
 800be88:	9802      	ldr	r0, [sp, #8]
 800be8a:	f000 fcdb 	bl	800c844 <__mcmp>
 800be8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be90:	4602      	mov	r2, r0
 800be92:	4631      	mov	r1, r6
 800be94:	4648      	mov	r0, r9
 800be96:	920c      	str	r2, [sp, #48]	@ 0x30
 800be98:	9309      	str	r3, [sp, #36]	@ 0x24
 800be9a:	f000 fa53 	bl	800c344 <_Bfree>
 800be9e:	9b07      	ldr	r3, [sp, #28]
 800bea0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bea2:	9e00      	ldr	r6, [sp, #0]
 800bea4:	ea42 0103 	orr.w	r1, r2, r3
 800bea8:	9b06      	ldr	r3, [sp, #24]
 800beaa:	4319      	orrs	r1, r3
 800beac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beae:	d10d      	bne.n	800becc <_dtoa_r+0xa44>
 800beb0:	2b39      	cmp	r3, #57	@ 0x39
 800beb2:	d027      	beq.n	800bf04 <_dtoa_r+0xa7c>
 800beb4:	9a04      	ldr	r2, [sp, #16]
 800beb6:	2a00      	cmp	r2, #0
 800beb8:	dd01      	ble.n	800bebe <_dtoa_r+0xa36>
 800beba:	9b03      	ldr	r3, [sp, #12]
 800bebc:	3331      	adds	r3, #49	@ 0x31
 800bebe:	f88b 3000 	strb.w	r3, [fp]
 800bec2:	e52e      	b.n	800b922 <_dtoa_r+0x49a>
 800bec4:	4628      	mov	r0, r5
 800bec6:	e7b9      	b.n	800be3c <_dtoa_r+0x9b4>
 800bec8:	2201      	movs	r2, #1
 800beca:	e7e2      	b.n	800be92 <_dtoa_r+0xa0a>
 800becc:	9904      	ldr	r1, [sp, #16]
 800bece:	2900      	cmp	r1, #0
 800bed0:	db04      	blt.n	800bedc <_dtoa_r+0xa54>
 800bed2:	9807      	ldr	r0, [sp, #28]
 800bed4:	4301      	orrs	r1, r0
 800bed6:	9806      	ldr	r0, [sp, #24]
 800bed8:	4301      	orrs	r1, r0
 800beda:	d120      	bne.n	800bf1e <_dtoa_r+0xa96>
 800bedc:	2a00      	cmp	r2, #0
 800bede:	ddee      	ble.n	800bebe <_dtoa_r+0xa36>
 800bee0:	2201      	movs	r2, #1
 800bee2:	9902      	ldr	r1, [sp, #8]
 800bee4:	4648      	mov	r0, r9
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	f000 fc40 	bl	800c76c <__lshift>
 800beec:	4621      	mov	r1, r4
 800beee:	9002      	str	r0, [sp, #8]
 800bef0:	f000 fca8 	bl	800c844 <__mcmp>
 800bef4:	2800      	cmp	r0, #0
 800bef6:	9b00      	ldr	r3, [sp, #0]
 800bef8:	dc02      	bgt.n	800bf00 <_dtoa_r+0xa78>
 800befa:	d1e0      	bne.n	800bebe <_dtoa_r+0xa36>
 800befc:	07da      	lsls	r2, r3, #31
 800befe:	d5de      	bpl.n	800bebe <_dtoa_r+0xa36>
 800bf00:	2b39      	cmp	r3, #57	@ 0x39
 800bf02:	d1da      	bne.n	800beba <_dtoa_r+0xa32>
 800bf04:	2339      	movs	r3, #57	@ 0x39
 800bf06:	f88b 3000 	strb.w	r3, [fp]
 800bf0a:	4633      	mov	r3, r6
 800bf0c:	461e      	mov	r6, r3
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bf14:	2a39      	cmp	r2, #57	@ 0x39
 800bf16:	d04f      	beq.n	800bfb8 <_dtoa_r+0xb30>
 800bf18:	3201      	adds	r2, #1
 800bf1a:	701a      	strb	r2, [r3, #0]
 800bf1c:	e501      	b.n	800b922 <_dtoa_r+0x49a>
 800bf1e:	2a00      	cmp	r2, #0
 800bf20:	dd03      	ble.n	800bf2a <_dtoa_r+0xaa2>
 800bf22:	2b39      	cmp	r3, #57	@ 0x39
 800bf24:	d0ee      	beq.n	800bf04 <_dtoa_r+0xa7c>
 800bf26:	3301      	adds	r3, #1
 800bf28:	e7c9      	b.n	800bebe <_dtoa_r+0xa36>
 800bf2a:	9a00      	ldr	r2, [sp, #0]
 800bf2c:	9908      	ldr	r1, [sp, #32]
 800bf2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bf32:	428a      	cmp	r2, r1
 800bf34:	d029      	beq.n	800bf8a <_dtoa_r+0xb02>
 800bf36:	2300      	movs	r3, #0
 800bf38:	220a      	movs	r2, #10
 800bf3a:	9902      	ldr	r1, [sp, #8]
 800bf3c:	4648      	mov	r0, r9
 800bf3e:	f000 fa23 	bl	800c388 <__multadd>
 800bf42:	42af      	cmp	r7, r5
 800bf44:	9002      	str	r0, [sp, #8]
 800bf46:	f04f 0300 	mov.w	r3, #0
 800bf4a:	f04f 020a 	mov.w	r2, #10
 800bf4e:	4639      	mov	r1, r7
 800bf50:	4648      	mov	r0, r9
 800bf52:	d107      	bne.n	800bf64 <_dtoa_r+0xadc>
 800bf54:	f000 fa18 	bl	800c388 <__multadd>
 800bf58:	4607      	mov	r7, r0
 800bf5a:	4605      	mov	r5, r0
 800bf5c:	9b00      	ldr	r3, [sp, #0]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	9300      	str	r3, [sp, #0]
 800bf62:	e777      	b.n	800be54 <_dtoa_r+0x9cc>
 800bf64:	f000 fa10 	bl	800c388 <__multadd>
 800bf68:	4629      	mov	r1, r5
 800bf6a:	4607      	mov	r7, r0
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	220a      	movs	r2, #10
 800bf70:	4648      	mov	r0, r9
 800bf72:	f000 fa09 	bl	800c388 <__multadd>
 800bf76:	4605      	mov	r5, r0
 800bf78:	e7f0      	b.n	800bf5c <_dtoa_r+0xad4>
 800bf7a:	f1bb 0f00 	cmp.w	fp, #0
 800bf7e:	f04f 0700 	mov.w	r7, #0
 800bf82:	bfcc      	ite	gt
 800bf84:	465e      	movgt	r6, fp
 800bf86:	2601      	movle	r6, #1
 800bf88:	4456      	add	r6, sl
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	9902      	ldr	r1, [sp, #8]
 800bf8e:	4648      	mov	r0, r9
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	f000 fbeb 	bl	800c76c <__lshift>
 800bf96:	4621      	mov	r1, r4
 800bf98:	9002      	str	r0, [sp, #8]
 800bf9a:	f000 fc53 	bl	800c844 <__mcmp>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	dcb3      	bgt.n	800bf0a <_dtoa_r+0xa82>
 800bfa2:	d102      	bne.n	800bfaa <_dtoa_r+0xb22>
 800bfa4:	9b00      	ldr	r3, [sp, #0]
 800bfa6:	07db      	lsls	r3, r3, #31
 800bfa8:	d4af      	bmi.n	800bf0a <_dtoa_r+0xa82>
 800bfaa:	4633      	mov	r3, r6
 800bfac:	461e      	mov	r6, r3
 800bfae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfb2:	2a30      	cmp	r2, #48	@ 0x30
 800bfb4:	d0fa      	beq.n	800bfac <_dtoa_r+0xb24>
 800bfb6:	e4b4      	b.n	800b922 <_dtoa_r+0x49a>
 800bfb8:	459a      	cmp	sl, r3
 800bfba:	d1a7      	bne.n	800bf0c <_dtoa_r+0xa84>
 800bfbc:	2331      	movs	r3, #49	@ 0x31
 800bfbe:	f108 0801 	add.w	r8, r8, #1
 800bfc2:	f88a 3000 	strb.w	r3, [sl]
 800bfc6:	e4ac      	b.n	800b922 <_dtoa_r+0x49a>
 800bfc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bfca:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c028 <_dtoa_r+0xba0>
 800bfce:	b11b      	cbz	r3, 800bfd8 <_dtoa_r+0xb50>
 800bfd0:	f10a 0308 	add.w	r3, sl, #8
 800bfd4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bfd6:	6013      	str	r3, [r2, #0]
 800bfd8:	4650      	mov	r0, sl
 800bfda:	b017      	add	sp, #92	@ 0x5c
 800bfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe0:	9b07      	ldr	r3, [sp, #28]
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	f77f ae2d 	ble.w	800bc42 <_dtoa_r+0x7ba>
 800bfe8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bfea:	9308      	str	r3, [sp, #32]
 800bfec:	2001      	movs	r0, #1
 800bfee:	e64c      	b.n	800bc8a <_dtoa_r+0x802>
 800bff0:	f1bb 0f00 	cmp.w	fp, #0
 800bff4:	f77f aed8 	ble.w	800bda8 <_dtoa_r+0x920>
 800bff8:	4656      	mov	r6, sl
 800bffa:	4621      	mov	r1, r4
 800bffc:	9802      	ldr	r0, [sp, #8]
 800bffe:	f7ff f9b3 	bl	800b368 <quorem>
 800c002:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c006:	f806 3b01 	strb.w	r3, [r6], #1
 800c00a:	eba6 020a 	sub.w	r2, r6, sl
 800c00e:	4593      	cmp	fp, r2
 800c010:	ddb3      	ble.n	800bf7a <_dtoa_r+0xaf2>
 800c012:	2300      	movs	r3, #0
 800c014:	220a      	movs	r2, #10
 800c016:	9902      	ldr	r1, [sp, #8]
 800c018:	4648      	mov	r0, r9
 800c01a:	f000 f9b5 	bl	800c388 <__multadd>
 800c01e:	9002      	str	r0, [sp, #8]
 800c020:	e7eb      	b.n	800bffa <_dtoa_r+0xb72>
 800c022:	bf00      	nop
 800c024:	0800f71a 	.word	0x0800f71a
 800c028:	0800f6b5 	.word	0x0800f6b5

0800c02c <_free_r>:
 800c02c:	b538      	push	{r3, r4, r5, lr}
 800c02e:	4605      	mov	r5, r0
 800c030:	2900      	cmp	r1, #0
 800c032:	d041      	beq.n	800c0b8 <_free_r+0x8c>
 800c034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c038:	1f0c      	subs	r4, r1, #4
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	bfb8      	it	lt
 800c03e:	18e4      	addlt	r4, r4, r3
 800c040:	f000 f934 	bl	800c2ac <__malloc_lock>
 800c044:	4a1d      	ldr	r2, [pc, #116]	@ (800c0bc <_free_r+0x90>)
 800c046:	6813      	ldr	r3, [r2, #0]
 800c048:	b933      	cbnz	r3, 800c058 <_free_r+0x2c>
 800c04a:	6063      	str	r3, [r4, #4]
 800c04c:	6014      	str	r4, [r2, #0]
 800c04e:	4628      	mov	r0, r5
 800c050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c054:	f000 b930 	b.w	800c2b8 <__malloc_unlock>
 800c058:	42a3      	cmp	r3, r4
 800c05a:	d908      	bls.n	800c06e <_free_r+0x42>
 800c05c:	6820      	ldr	r0, [r4, #0]
 800c05e:	1821      	adds	r1, r4, r0
 800c060:	428b      	cmp	r3, r1
 800c062:	bf01      	itttt	eq
 800c064:	6819      	ldreq	r1, [r3, #0]
 800c066:	685b      	ldreq	r3, [r3, #4]
 800c068:	1809      	addeq	r1, r1, r0
 800c06a:	6021      	streq	r1, [r4, #0]
 800c06c:	e7ed      	b.n	800c04a <_free_r+0x1e>
 800c06e:	461a      	mov	r2, r3
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	b10b      	cbz	r3, 800c078 <_free_r+0x4c>
 800c074:	42a3      	cmp	r3, r4
 800c076:	d9fa      	bls.n	800c06e <_free_r+0x42>
 800c078:	6811      	ldr	r1, [r2, #0]
 800c07a:	1850      	adds	r0, r2, r1
 800c07c:	42a0      	cmp	r0, r4
 800c07e:	d10b      	bne.n	800c098 <_free_r+0x6c>
 800c080:	6820      	ldr	r0, [r4, #0]
 800c082:	4401      	add	r1, r0
 800c084:	1850      	adds	r0, r2, r1
 800c086:	6011      	str	r1, [r2, #0]
 800c088:	4283      	cmp	r3, r0
 800c08a:	d1e0      	bne.n	800c04e <_free_r+0x22>
 800c08c:	6818      	ldr	r0, [r3, #0]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	4408      	add	r0, r1
 800c092:	6053      	str	r3, [r2, #4]
 800c094:	6010      	str	r0, [r2, #0]
 800c096:	e7da      	b.n	800c04e <_free_r+0x22>
 800c098:	d902      	bls.n	800c0a0 <_free_r+0x74>
 800c09a:	230c      	movs	r3, #12
 800c09c:	602b      	str	r3, [r5, #0]
 800c09e:	e7d6      	b.n	800c04e <_free_r+0x22>
 800c0a0:	6820      	ldr	r0, [r4, #0]
 800c0a2:	1821      	adds	r1, r4, r0
 800c0a4:	428b      	cmp	r3, r1
 800c0a6:	bf02      	ittt	eq
 800c0a8:	6819      	ldreq	r1, [r3, #0]
 800c0aa:	685b      	ldreq	r3, [r3, #4]
 800c0ac:	1809      	addeq	r1, r1, r0
 800c0ae:	6063      	str	r3, [r4, #4]
 800c0b0:	bf08      	it	eq
 800c0b2:	6021      	streq	r1, [r4, #0]
 800c0b4:	6054      	str	r4, [r2, #4]
 800c0b6:	e7ca      	b.n	800c04e <_free_r+0x22>
 800c0b8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ba:	bf00      	nop
 800c0bc:	200005fc 	.word	0x200005fc

0800c0c0 <_findenv_r>:
 800c0c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800c134 <_findenv_r+0x74>
 800c0c8:	4606      	mov	r6, r0
 800c0ca:	4689      	mov	r9, r1
 800c0cc:	4617      	mov	r7, r2
 800c0ce:	f002 fb67 	bl	800e7a0 <__env_lock>
 800c0d2:	f8da 4000 	ldr.w	r4, [sl]
 800c0d6:	b134      	cbz	r4, 800c0e6 <_findenv_r+0x26>
 800c0d8:	464b      	mov	r3, r9
 800c0da:	4698      	mov	r8, r3
 800c0dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0e0:	b13a      	cbz	r2, 800c0f2 <_findenv_r+0x32>
 800c0e2:	2a3d      	cmp	r2, #61	@ 0x3d
 800c0e4:	d1f9      	bne.n	800c0da <_findenv_r+0x1a>
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	f002 fb60 	bl	800e7ac <__env_unlock>
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f2:	eba8 0809 	sub.w	r8, r8, r9
 800c0f6:	46a3      	mov	fp, r4
 800c0f8:	f854 0b04 	ldr.w	r0, [r4], #4
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d0f2      	beq.n	800c0e6 <_findenv_r+0x26>
 800c100:	4642      	mov	r2, r8
 800c102:	4649      	mov	r1, r9
 800c104:	f002 fa50 	bl	800e5a8 <strncmp>
 800c108:	2800      	cmp	r0, #0
 800c10a:	d1f4      	bne.n	800c0f6 <_findenv_r+0x36>
 800c10c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c110:	eb03 0508 	add.w	r5, r3, r8
 800c114:	f813 3008 	ldrb.w	r3, [r3, r8]
 800c118:	2b3d      	cmp	r3, #61	@ 0x3d
 800c11a:	d1ec      	bne.n	800c0f6 <_findenv_r+0x36>
 800c11c:	f8da 3000 	ldr.w	r3, [sl]
 800c120:	4630      	mov	r0, r6
 800c122:	ebab 0303 	sub.w	r3, fp, r3
 800c126:	109b      	asrs	r3, r3, #2
 800c128:	603b      	str	r3, [r7, #0]
 800c12a:	f002 fb3f 	bl	800e7ac <__env_unlock>
 800c12e:	1c68      	adds	r0, r5, #1
 800c130:	e7dd      	b.n	800c0ee <_findenv_r+0x2e>
 800c132:	bf00      	nop
 800c134:	20000000 	.word	0x20000000

0800c138 <_getenv_r>:
 800c138:	b507      	push	{r0, r1, r2, lr}
 800c13a:	aa01      	add	r2, sp, #4
 800c13c:	f7ff ffc0 	bl	800c0c0 <_findenv_r>
 800c140:	b003      	add	sp, #12
 800c142:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c148 <malloc>:
 800c148:	4b02      	ldr	r3, [pc, #8]	@ (800c154 <malloc+0xc>)
 800c14a:	4601      	mov	r1, r0
 800c14c:	6818      	ldr	r0, [r3, #0]
 800c14e:	f000 b82d 	b.w	800c1ac <_malloc_r>
 800c152:	bf00      	nop
 800c154:	20000040 	.word	0x20000040

0800c158 <free>:
 800c158:	4b02      	ldr	r3, [pc, #8]	@ (800c164 <free+0xc>)
 800c15a:	4601      	mov	r1, r0
 800c15c:	6818      	ldr	r0, [r3, #0]
 800c15e:	f7ff bf65 	b.w	800c02c <_free_r>
 800c162:	bf00      	nop
 800c164:	20000040 	.word	0x20000040

0800c168 <sbrk_aligned>:
 800c168:	b570      	push	{r4, r5, r6, lr}
 800c16a:	4e0f      	ldr	r6, [pc, #60]	@ (800c1a8 <sbrk_aligned+0x40>)
 800c16c:	460c      	mov	r4, r1
 800c16e:	4605      	mov	r5, r0
 800c170:	6831      	ldr	r1, [r6, #0]
 800c172:	b911      	cbnz	r1, 800c17a <sbrk_aligned+0x12>
 800c174:	f002 fad2 	bl	800e71c <_sbrk_r>
 800c178:	6030      	str	r0, [r6, #0]
 800c17a:	4621      	mov	r1, r4
 800c17c:	4628      	mov	r0, r5
 800c17e:	f002 facd 	bl	800e71c <_sbrk_r>
 800c182:	1c43      	adds	r3, r0, #1
 800c184:	d103      	bne.n	800c18e <sbrk_aligned+0x26>
 800c186:	f04f 34ff 	mov.w	r4, #4294967295
 800c18a:	4620      	mov	r0, r4
 800c18c:	bd70      	pop	{r4, r5, r6, pc}
 800c18e:	1cc4      	adds	r4, r0, #3
 800c190:	f024 0403 	bic.w	r4, r4, #3
 800c194:	42a0      	cmp	r0, r4
 800c196:	d0f8      	beq.n	800c18a <sbrk_aligned+0x22>
 800c198:	1a21      	subs	r1, r4, r0
 800c19a:	4628      	mov	r0, r5
 800c19c:	f002 fabe 	bl	800e71c <_sbrk_r>
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	d1f2      	bne.n	800c18a <sbrk_aligned+0x22>
 800c1a4:	e7ef      	b.n	800c186 <sbrk_aligned+0x1e>
 800c1a6:	bf00      	nop
 800c1a8:	200005f8 	.word	0x200005f8

0800c1ac <_malloc_r>:
 800c1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1b0:	1ccd      	adds	r5, r1, #3
 800c1b2:	4606      	mov	r6, r0
 800c1b4:	f025 0503 	bic.w	r5, r5, #3
 800c1b8:	3508      	adds	r5, #8
 800c1ba:	2d0c      	cmp	r5, #12
 800c1bc:	bf38      	it	cc
 800c1be:	250c      	movcc	r5, #12
 800c1c0:	2d00      	cmp	r5, #0
 800c1c2:	db01      	blt.n	800c1c8 <_malloc_r+0x1c>
 800c1c4:	42a9      	cmp	r1, r5
 800c1c6:	d904      	bls.n	800c1d2 <_malloc_r+0x26>
 800c1c8:	230c      	movs	r3, #12
 800c1ca:	6033      	str	r3, [r6, #0]
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c2a8 <_malloc_r+0xfc>
 800c1d6:	f000 f869 	bl	800c2ac <__malloc_lock>
 800c1da:	f8d8 3000 	ldr.w	r3, [r8]
 800c1de:	461c      	mov	r4, r3
 800c1e0:	bb44      	cbnz	r4, 800c234 <_malloc_r+0x88>
 800c1e2:	4629      	mov	r1, r5
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	f7ff ffbf 	bl	800c168 <sbrk_aligned>
 800c1ea:	1c43      	adds	r3, r0, #1
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	d158      	bne.n	800c2a2 <_malloc_r+0xf6>
 800c1f0:	f8d8 4000 	ldr.w	r4, [r8]
 800c1f4:	4627      	mov	r7, r4
 800c1f6:	2f00      	cmp	r7, #0
 800c1f8:	d143      	bne.n	800c282 <_malloc_r+0xd6>
 800c1fa:	2c00      	cmp	r4, #0
 800c1fc:	d04b      	beq.n	800c296 <_malloc_r+0xea>
 800c1fe:	6823      	ldr	r3, [r4, #0]
 800c200:	4639      	mov	r1, r7
 800c202:	4630      	mov	r0, r6
 800c204:	eb04 0903 	add.w	r9, r4, r3
 800c208:	f002 fa88 	bl	800e71c <_sbrk_r>
 800c20c:	4581      	cmp	r9, r0
 800c20e:	d142      	bne.n	800c296 <_malloc_r+0xea>
 800c210:	6821      	ldr	r1, [r4, #0]
 800c212:	4630      	mov	r0, r6
 800c214:	1a6d      	subs	r5, r5, r1
 800c216:	4629      	mov	r1, r5
 800c218:	f7ff ffa6 	bl	800c168 <sbrk_aligned>
 800c21c:	3001      	adds	r0, #1
 800c21e:	d03a      	beq.n	800c296 <_malloc_r+0xea>
 800c220:	6823      	ldr	r3, [r4, #0]
 800c222:	442b      	add	r3, r5
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	f8d8 3000 	ldr.w	r3, [r8]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	bb62      	cbnz	r2, 800c288 <_malloc_r+0xdc>
 800c22e:	f8c8 7000 	str.w	r7, [r8]
 800c232:	e00f      	b.n	800c254 <_malloc_r+0xa8>
 800c234:	6822      	ldr	r2, [r4, #0]
 800c236:	1b52      	subs	r2, r2, r5
 800c238:	d420      	bmi.n	800c27c <_malloc_r+0xd0>
 800c23a:	2a0b      	cmp	r2, #11
 800c23c:	d917      	bls.n	800c26e <_malloc_r+0xc2>
 800c23e:	1961      	adds	r1, r4, r5
 800c240:	42a3      	cmp	r3, r4
 800c242:	6025      	str	r5, [r4, #0]
 800c244:	bf18      	it	ne
 800c246:	6059      	strne	r1, [r3, #4]
 800c248:	6863      	ldr	r3, [r4, #4]
 800c24a:	bf08      	it	eq
 800c24c:	f8c8 1000 	streq.w	r1, [r8]
 800c250:	5162      	str	r2, [r4, r5]
 800c252:	604b      	str	r3, [r1, #4]
 800c254:	4630      	mov	r0, r6
 800c256:	f000 f82f 	bl	800c2b8 <__malloc_unlock>
 800c25a:	f104 000b 	add.w	r0, r4, #11
 800c25e:	1d23      	adds	r3, r4, #4
 800c260:	f020 0007 	bic.w	r0, r0, #7
 800c264:	1ac2      	subs	r2, r0, r3
 800c266:	bf1c      	itt	ne
 800c268:	1a1b      	subne	r3, r3, r0
 800c26a:	50a3      	strne	r3, [r4, r2]
 800c26c:	e7af      	b.n	800c1ce <_malloc_r+0x22>
 800c26e:	6862      	ldr	r2, [r4, #4]
 800c270:	42a3      	cmp	r3, r4
 800c272:	bf0c      	ite	eq
 800c274:	f8c8 2000 	streq.w	r2, [r8]
 800c278:	605a      	strne	r2, [r3, #4]
 800c27a:	e7eb      	b.n	800c254 <_malloc_r+0xa8>
 800c27c:	4623      	mov	r3, r4
 800c27e:	6864      	ldr	r4, [r4, #4]
 800c280:	e7ae      	b.n	800c1e0 <_malloc_r+0x34>
 800c282:	463c      	mov	r4, r7
 800c284:	687f      	ldr	r7, [r7, #4]
 800c286:	e7b6      	b.n	800c1f6 <_malloc_r+0x4a>
 800c288:	461a      	mov	r2, r3
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	42a3      	cmp	r3, r4
 800c28e:	d1fb      	bne.n	800c288 <_malloc_r+0xdc>
 800c290:	2300      	movs	r3, #0
 800c292:	6053      	str	r3, [r2, #4]
 800c294:	e7de      	b.n	800c254 <_malloc_r+0xa8>
 800c296:	230c      	movs	r3, #12
 800c298:	4630      	mov	r0, r6
 800c29a:	6033      	str	r3, [r6, #0]
 800c29c:	f000 f80c 	bl	800c2b8 <__malloc_unlock>
 800c2a0:	e794      	b.n	800c1cc <_malloc_r+0x20>
 800c2a2:	6005      	str	r5, [r0, #0]
 800c2a4:	e7d6      	b.n	800c254 <_malloc_r+0xa8>
 800c2a6:	bf00      	nop
 800c2a8:	200005fc 	.word	0x200005fc

0800c2ac <__malloc_lock>:
 800c2ac:	4801      	ldr	r0, [pc, #4]	@ (800c2b4 <__malloc_lock+0x8>)
 800c2ae:	f7ff b815 	b.w	800b2dc <__retarget_lock_acquire_recursive>
 800c2b2:	bf00      	nop
 800c2b4:	200005f6 	.word	0x200005f6

0800c2b8 <__malloc_unlock>:
 800c2b8:	4801      	ldr	r0, [pc, #4]	@ (800c2c0 <__malloc_unlock+0x8>)
 800c2ba:	f7ff b811 	b.w	800b2e0 <__retarget_lock_release_recursive>
 800c2be:	bf00      	nop
 800c2c0:	200005f6 	.word	0x200005f6

0800c2c4 <_Balloc>:
 800c2c4:	b570      	push	{r4, r5, r6, lr}
 800c2c6:	69c6      	ldr	r6, [r0, #28]
 800c2c8:	4604      	mov	r4, r0
 800c2ca:	460d      	mov	r5, r1
 800c2cc:	b976      	cbnz	r6, 800c2ec <_Balloc+0x28>
 800c2ce:	2010      	movs	r0, #16
 800c2d0:	f7ff ff3a 	bl	800c148 <malloc>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	61e0      	str	r0, [r4, #28]
 800c2d8:	b920      	cbnz	r0, 800c2e4 <_Balloc+0x20>
 800c2da:	4b18      	ldr	r3, [pc, #96]	@ (800c33c <_Balloc+0x78>)
 800c2dc:	216b      	movs	r1, #107	@ 0x6b
 800c2de:	4818      	ldr	r0, [pc, #96]	@ (800c340 <_Balloc+0x7c>)
 800c2e0:	f7ff f81c 	bl	800b31c <__assert_func>
 800c2e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2e8:	6006      	str	r6, [r0, #0]
 800c2ea:	60c6      	str	r6, [r0, #12]
 800c2ec:	69e6      	ldr	r6, [r4, #28]
 800c2ee:	68f3      	ldr	r3, [r6, #12]
 800c2f0:	b183      	cbz	r3, 800c314 <_Balloc+0x50>
 800c2f2:	69e3      	ldr	r3, [r4, #28]
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2fa:	b9b8      	cbnz	r0, 800c32c <_Balloc+0x68>
 800c2fc:	2101      	movs	r1, #1
 800c2fe:	4620      	mov	r0, r4
 800c300:	fa01 f605 	lsl.w	r6, r1, r5
 800c304:	1d72      	adds	r2, r6, #5
 800c306:	0092      	lsls	r2, r2, #2
 800c308:	f002 fa35 	bl	800e776 <_calloc_r>
 800c30c:	b160      	cbz	r0, 800c328 <_Balloc+0x64>
 800c30e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c312:	e00e      	b.n	800c332 <_Balloc+0x6e>
 800c314:	2221      	movs	r2, #33	@ 0x21
 800c316:	2104      	movs	r1, #4
 800c318:	4620      	mov	r0, r4
 800c31a:	f002 fa2c 	bl	800e776 <_calloc_r>
 800c31e:	69e3      	ldr	r3, [r4, #28]
 800c320:	60f0      	str	r0, [r6, #12]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d1e4      	bne.n	800c2f2 <_Balloc+0x2e>
 800c328:	2000      	movs	r0, #0
 800c32a:	bd70      	pop	{r4, r5, r6, pc}
 800c32c:	6802      	ldr	r2, [r0, #0]
 800c32e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c332:	2300      	movs	r3, #0
 800c334:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c338:	e7f7      	b.n	800c32a <_Balloc+0x66>
 800c33a:	bf00      	nop
 800c33c:	0800f5bb 	.word	0x0800f5bb
 800c340:	0800f72b 	.word	0x0800f72b

0800c344 <_Bfree>:
 800c344:	b570      	push	{r4, r5, r6, lr}
 800c346:	69c6      	ldr	r6, [r0, #28]
 800c348:	4605      	mov	r5, r0
 800c34a:	460c      	mov	r4, r1
 800c34c:	b976      	cbnz	r6, 800c36c <_Bfree+0x28>
 800c34e:	2010      	movs	r0, #16
 800c350:	f7ff fefa 	bl	800c148 <malloc>
 800c354:	4602      	mov	r2, r0
 800c356:	61e8      	str	r0, [r5, #28]
 800c358:	b920      	cbnz	r0, 800c364 <_Bfree+0x20>
 800c35a:	4b09      	ldr	r3, [pc, #36]	@ (800c380 <_Bfree+0x3c>)
 800c35c:	218f      	movs	r1, #143	@ 0x8f
 800c35e:	4809      	ldr	r0, [pc, #36]	@ (800c384 <_Bfree+0x40>)
 800c360:	f7fe ffdc 	bl	800b31c <__assert_func>
 800c364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c368:	6006      	str	r6, [r0, #0]
 800c36a:	60c6      	str	r6, [r0, #12]
 800c36c:	b13c      	cbz	r4, 800c37e <_Bfree+0x3a>
 800c36e:	69eb      	ldr	r3, [r5, #28]
 800c370:	6862      	ldr	r2, [r4, #4]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c378:	6021      	str	r1, [r4, #0]
 800c37a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c37e:	bd70      	pop	{r4, r5, r6, pc}
 800c380:	0800f5bb 	.word	0x0800f5bb
 800c384:	0800f72b 	.word	0x0800f72b

0800c388 <__multadd>:
 800c388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c38c:	f101 0c14 	add.w	ip, r1, #20
 800c390:	4607      	mov	r7, r0
 800c392:	460c      	mov	r4, r1
 800c394:	461e      	mov	r6, r3
 800c396:	690d      	ldr	r5, [r1, #16]
 800c398:	2000      	movs	r0, #0
 800c39a:	f8dc 3000 	ldr.w	r3, [ip]
 800c39e:	3001      	adds	r0, #1
 800c3a0:	b299      	uxth	r1, r3
 800c3a2:	4285      	cmp	r5, r0
 800c3a4:	fb02 6101 	mla	r1, r2, r1, r6
 800c3a8:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c3ac:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800c3b0:	b289      	uxth	r1, r1
 800c3b2:	fb02 3306 	mla	r3, r2, r6, r3
 800c3b6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c3ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c3be:	f84c 1b04 	str.w	r1, [ip], #4
 800c3c2:	dcea      	bgt.n	800c39a <__multadd+0x12>
 800c3c4:	b30e      	cbz	r6, 800c40a <__multadd+0x82>
 800c3c6:	68a3      	ldr	r3, [r4, #8]
 800c3c8:	42ab      	cmp	r3, r5
 800c3ca:	dc19      	bgt.n	800c400 <__multadd+0x78>
 800c3cc:	6861      	ldr	r1, [r4, #4]
 800c3ce:	4638      	mov	r0, r7
 800c3d0:	3101      	adds	r1, #1
 800c3d2:	f7ff ff77 	bl	800c2c4 <_Balloc>
 800c3d6:	4680      	mov	r8, r0
 800c3d8:	b928      	cbnz	r0, 800c3e6 <__multadd+0x5e>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	4b0c      	ldr	r3, [pc, #48]	@ (800c410 <__multadd+0x88>)
 800c3de:	21ba      	movs	r1, #186	@ 0xba
 800c3e0:	480c      	ldr	r0, [pc, #48]	@ (800c414 <__multadd+0x8c>)
 800c3e2:	f7fe ff9b 	bl	800b31c <__assert_func>
 800c3e6:	6922      	ldr	r2, [r4, #16]
 800c3e8:	f104 010c 	add.w	r1, r4, #12
 800c3ec:	300c      	adds	r0, #12
 800c3ee:	3202      	adds	r2, #2
 800c3f0:	0092      	lsls	r2, r2, #2
 800c3f2:	f002 f9a3 	bl	800e73c <memcpy>
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	4644      	mov	r4, r8
 800c3fa:	4638      	mov	r0, r7
 800c3fc:	f7ff ffa2 	bl	800c344 <_Bfree>
 800c400:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c404:	3501      	adds	r5, #1
 800c406:	615e      	str	r6, [r3, #20]
 800c408:	6125      	str	r5, [r4, #16]
 800c40a:	4620      	mov	r0, r4
 800c40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c410:	0800f71a 	.word	0x0800f71a
 800c414:	0800f72b 	.word	0x0800f72b

0800c418 <__s2b>:
 800c418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c41c:	4615      	mov	r5, r2
 800c41e:	461f      	mov	r7, r3
 800c420:	2209      	movs	r2, #9
 800c422:	3308      	adds	r3, #8
 800c424:	460c      	mov	r4, r1
 800c426:	4606      	mov	r6, r0
 800c428:	2100      	movs	r1, #0
 800c42a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c42e:	2201      	movs	r2, #1
 800c430:	429a      	cmp	r2, r3
 800c432:	db09      	blt.n	800c448 <__s2b+0x30>
 800c434:	4630      	mov	r0, r6
 800c436:	f7ff ff45 	bl	800c2c4 <_Balloc>
 800c43a:	b940      	cbnz	r0, 800c44e <__s2b+0x36>
 800c43c:	4602      	mov	r2, r0
 800c43e:	4b19      	ldr	r3, [pc, #100]	@ (800c4a4 <__s2b+0x8c>)
 800c440:	21d3      	movs	r1, #211	@ 0xd3
 800c442:	4819      	ldr	r0, [pc, #100]	@ (800c4a8 <__s2b+0x90>)
 800c444:	f7fe ff6a 	bl	800b31c <__assert_func>
 800c448:	0052      	lsls	r2, r2, #1
 800c44a:	3101      	adds	r1, #1
 800c44c:	e7f0      	b.n	800c430 <__s2b+0x18>
 800c44e:	9b08      	ldr	r3, [sp, #32]
 800c450:	2d09      	cmp	r5, #9
 800c452:	6143      	str	r3, [r0, #20]
 800c454:	f04f 0301 	mov.w	r3, #1
 800c458:	6103      	str	r3, [r0, #16]
 800c45a:	dd16      	ble.n	800c48a <__s2b+0x72>
 800c45c:	f104 0909 	add.w	r9, r4, #9
 800c460:	442c      	add	r4, r5
 800c462:	46c8      	mov	r8, r9
 800c464:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c468:	4601      	mov	r1, r0
 800c46a:	220a      	movs	r2, #10
 800c46c:	4630      	mov	r0, r6
 800c46e:	3b30      	subs	r3, #48	@ 0x30
 800c470:	f7ff ff8a 	bl	800c388 <__multadd>
 800c474:	45a0      	cmp	r8, r4
 800c476:	d1f5      	bne.n	800c464 <__s2b+0x4c>
 800c478:	f1a5 0408 	sub.w	r4, r5, #8
 800c47c:	444c      	add	r4, r9
 800c47e:	1b2d      	subs	r5, r5, r4
 800c480:	1963      	adds	r3, r4, r5
 800c482:	42bb      	cmp	r3, r7
 800c484:	db04      	blt.n	800c490 <__s2b+0x78>
 800c486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c48a:	340a      	adds	r4, #10
 800c48c:	2509      	movs	r5, #9
 800c48e:	e7f6      	b.n	800c47e <__s2b+0x66>
 800c490:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c494:	4601      	mov	r1, r0
 800c496:	220a      	movs	r2, #10
 800c498:	4630      	mov	r0, r6
 800c49a:	3b30      	subs	r3, #48	@ 0x30
 800c49c:	f7ff ff74 	bl	800c388 <__multadd>
 800c4a0:	e7ee      	b.n	800c480 <__s2b+0x68>
 800c4a2:	bf00      	nop
 800c4a4:	0800f71a 	.word	0x0800f71a
 800c4a8:	0800f72b 	.word	0x0800f72b

0800c4ac <__hi0bits>:
 800c4ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	bf36      	itet	cc
 800c4b4:	0403      	lslcc	r3, r0, #16
 800c4b6:	2000      	movcs	r0, #0
 800c4b8:	2010      	movcc	r0, #16
 800c4ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c4be:	bf3c      	itt	cc
 800c4c0:	021b      	lslcc	r3, r3, #8
 800c4c2:	3008      	addcc	r0, #8
 800c4c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4c8:	bf3c      	itt	cc
 800c4ca:	011b      	lslcc	r3, r3, #4
 800c4cc:	3004      	addcc	r0, #4
 800c4ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4d2:	bf3c      	itt	cc
 800c4d4:	009b      	lslcc	r3, r3, #2
 800c4d6:	3002      	addcc	r0, #2
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	db05      	blt.n	800c4e8 <__hi0bits+0x3c>
 800c4dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c4e0:	f100 0001 	add.w	r0, r0, #1
 800c4e4:	bf08      	it	eq
 800c4e6:	2020      	moveq	r0, #32
 800c4e8:	4770      	bx	lr

0800c4ea <__lo0bits>:
 800c4ea:	6803      	ldr	r3, [r0, #0]
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	f013 0007 	ands.w	r0, r3, #7
 800c4f2:	d00b      	beq.n	800c50c <__lo0bits+0x22>
 800c4f4:	07d9      	lsls	r1, r3, #31
 800c4f6:	d421      	bmi.n	800c53c <__lo0bits+0x52>
 800c4f8:	0798      	lsls	r0, r3, #30
 800c4fa:	bf47      	ittee	mi
 800c4fc:	085b      	lsrmi	r3, r3, #1
 800c4fe:	2001      	movmi	r0, #1
 800c500:	089b      	lsrpl	r3, r3, #2
 800c502:	2002      	movpl	r0, #2
 800c504:	bf4c      	ite	mi
 800c506:	6013      	strmi	r3, [r2, #0]
 800c508:	6013      	strpl	r3, [r2, #0]
 800c50a:	4770      	bx	lr
 800c50c:	b299      	uxth	r1, r3
 800c50e:	b909      	cbnz	r1, 800c514 <__lo0bits+0x2a>
 800c510:	0c1b      	lsrs	r3, r3, #16
 800c512:	2010      	movs	r0, #16
 800c514:	b2d9      	uxtb	r1, r3
 800c516:	b909      	cbnz	r1, 800c51c <__lo0bits+0x32>
 800c518:	3008      	adds	r0, #8
 800c51a:	0a1b      	lsrs	r3, r3, #8
 800c51c:	0719      	lsls	r1, r3, #28
 800c51e:	bf04      	itt	eq
 800c520:	091b      	lsreq	r3, r3, #4
 800c522:	3004      	addeq	r0, #4
 800c524:	0799      	lsls	r1, r3, #30
 800c526:	bf04      	itt	eq
 800c528:	089b      	lsreq	r3, r3, #2
 800c52a:	3002      	addeq	r0, #2
 800c52c:	07d9      	lsls	r1, r3, #31
 800c52e:	d403      	bmi.n	800c538 <__lo0bits+0x4e>
 800c530:	085b      	lsrs	r3, r3, #1
 800c532:	f100 0001 	add.w	r0, r0, #1
 800c536:	d003      	beq.n	800c540 <__lo0bits+0x56>
 800c538:	6013      	str	r3, [r2, #0]
 800c53a:	4770      	bx	lr
 800c53c:	2000      	movs	r0, #0
 800c53e:	4770      	bx	lr
 800c540:	2020      	movs	r0, #32
 800c542:	4770      	bx	lr

0800c544 <__i2b>:
 800c544:	b510      	push	{r4, lr}
 800c546:	460c      	mov	r4, r1
 800c548:	2101      	movs	r1, #1
 800c54a:	f7ff febb 	bl	800c2c4 <_Balloc>
 800c54e:	4602      	mov	r2, r0
 800c550:	b928      	cbnz	r0, 800c55e <__i2b+0x1a>
 800c552:	4b05      	ldr	r3, [pc, #20]	@ (800c568 <__i2b+0x24>)
 800c554:	f240 1145 	movw	r1, #325	@ 0x145
 800c558:	4804      	ldr	r0, [pc, #16]	@ (800c56c <__i2b+0x28>)
 800c55a:	f7fe fedf 	bl	800b31c <__assert_func>
 800c55e:	2301      	movs	r3, #1
 800c560:	6144      	str	r4, [r0, #20]
 800c562:	6103      	str	r3, [r0, #16]
 800c564:	bd10      	pop	{r4, pc}
 800c566:	bf00      	nop
 800c568:	0800f71a 	.word	0x0800f71a
 800c56c:	0800f72b 	.word	0x0800f72b

0800c570 <__multiply>:
 800c570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c574:	4617      	mov	r7, r2
 800c576:	690a      	ldr	r2, [r1, #16]
 800c578:	4689      	mov	r9, r1
 800c57a:	b085      	sub	sp, #20
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	429a      	cmp	r2, r3
 800c580:	bfa2      	ittt	ge
 800c582:	463b      	movge	r3, r7
 800c584:	460f      	movge	r7, r1
 800c586:	4699      	movge	r9, r3
 800c588:	693d      	ldr	r5, [r7, #16]
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c590:	6879      	ldr	r1, [r7, #4]
 800c592:	eb05 060a 	add.w	r6, r5, sl
 800c596:	42b3      	cmp	r3, r6
 800c598:	bfb8      	it	lt
 800c59a:	3101      	addlt	r1, #1
 800c59c:	f7ff fe92 	bl	800c2c4 <_Balloc>
 800c5a0:	b930      	cbnz	r0, 800c5b0 <__multiply+0x40>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	4b42      	ldr	r3, [pc, #264]	@ (800c6b0 <__multiply+0x140>)
 800c5a6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c5aa:	4842      	ldr	r0, [pc, #264]	@ (800c6b4 <__multiply+0x144>)
 800c5ac:	f7fe feb6 	bl	800b31c <__assert_func>
 800c5b0:	f100 0414 	add.w	r4, r0, #20
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c5ba:	4623      	mov	r3, r4
 800c5bc:	4573      	cmp	r3, lr
 800c5be:	d320      	bcc.n	800c602 <__multiply+0x92>
 800c5c0:	f107 0814 	add.w	r8, r7, #20
 800c5c4:	f109 0114 	add.w	r1, r9, #20
 800c5c8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c5cc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c5d0:	9302      	str	r3, [sp, #8]
 800c5d2:	1beb      	subs	r3, r5, r7
 800c5d4:	3715      	adds	r7, #21
 800c5d6:	3b15      	subs	r3, #21
 800c5d8:	f023 0303 	bic.w	r3, r3, #3
 800c5dc:	3304      	adds	r3, #4
 800c5de:	42bd      	cmp	r5, r7
 800c5e0:	bf38      	it	cc
 800c5e2:	2304      	movcc	r3, #4
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	9b02      	ldr	r3, [sp, #8]
 800c5e8:	9103      	str	r1, [sp, #12]
 800c5ea:	428b      	cmp	r3, r1
 800c5ec:	d80c      	bhi.n	800c608 <__multiply+0x98>
 800c5ee:	2e00      	cmp	r6, #0
 800c5f0:	dd03      	ble.n	800c5fa <__multiply+0x8a>
 800c5f2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d057      	beq.n	800c6aa <__multiply+0x13a>
 800c5fa:	6106      	str	r6, [r0, #16]
 800c5fc:	b005      	add	sp, #20
 800c5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c602:	f843 2b04 	str.w	r2, [r3], #4
 800c606:	e7d9      	b.n	800c5bc <__multiply+0x4c>
 800c608:	f8b1 a000 	ldrh.w	sl, [r1]
 800c60c:	f1ba 0f00 	cmp.w	sl, #0
 800c610:	d021      	beq.n	800c656 <__multiply+0xe6>
 800c612:	46c4      	mov	ip, r8
 800c614:	46a1      	mov	r9, r4
 800c616:	2700      	movs	r7, #0
 800c618:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c61c:	f8d9 3000 	ldr.w	r3, [r9]
 800c620:	fa1f fb82 	uxth.w	fp, r2
 800c624:	4565      	cmp	r5, ip
 800c626:	b29b      	uxth	r3, r3
 800c628:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800c62c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c630:	443b      	add	r3, r7
 800c632:	f8d9 7000 	ldr.w	r7, [r9]
 800c636:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800c63a:	fb0a 7202 	mla	r2, sl, r2, r7
 800c63e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c642:	b29b      	uxth	r3, r3
 800c644:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c648:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c64c:	f849 3b04 	str.w	r3, [r9], #4
 800c650:	d8e2      	bhi.n	800c618 <__multiply+0xa8>
 800c652:	9b01      	ldr	r3, [sp, #4]
 800c654:	50e7      	str	r7, [r4, r3]
 800c656:	9b03      	ldr	r3, [sp, #12]
 800c658:	3104      	adds	r1, #4
 800c65a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c65e:	f1b9 0f00 	cmp.w	r9, #0
 800c662:	d020      	beq.n	800c6a6 <__multiply+0x136>
 800c664:	6823      	ldr	r3, [r4, #0]
 800c666:	4647      	mov	r7, r8
 800c668:	46a4      	mov	ip, r4
 800c66a:	f04f 0a00 	mov.w	sl, #0
 800c66e:	f8b7 b000 	ldrh.w	fp, [r7]
 800c672:	b29b      	uxth	r3, r3
 800c674:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c678:	fb09 220b 	mla	r2, r9, fp, r2
 800c67c:	4452      	add	r2, sl
 800c67e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c682:	f84c 3b04 	str.w	r3, [ip], #4
 800c686:	f857 3b04 	ldr.w	r3, [r7], #4
 800c68a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c68e:	f8bc 3000 	ldrh.w	r3, [ip]
 800c692:	42bd      	cmp	r5, r7
 800c694:	fb09 330a 	mla	r3, r9, sl, r3
 800c698:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c69c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6a0:	d8e5      	bhi.n	800c66e <__multiply+0xfe>
 800c6a2:	9a01      	ldr	r2, [sp, #4]
 800c6a4:	50a3      	str	r3, [r4, r2]
 800c6a6:	3404      	adds	r4, #4
 800c6a8:	e79d      	b.n	800c5e6 <__multiply+0x76>
 800c6aa:	3e01      	subs	r6, #1
 800c6ac:	e79f      	b.n	800c5ee <__multiply+0x7e>
 800c6ae:	bf00      	nop
 800c6b0:	0800f71a 	.word	0x0800f71a
 800c6b4:	0800f72b 	.word	0x0800f72b

0800c6b8 <__pow5mult>:
 800c6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6bc:	4615      	mov	r5, r2
 800c6be:	f012 0203 	ands.w	r2, r2, #3
 800c6c2:	4607      	mov	r7, r0
 800c6c4:	460e      	mov	r6, r1
 800c6c6:	d007      	beq.n	800c6d8 <__pow5mult+0x20>
 800c6c8:	3a01      	subs	r2, #1
 800c6ca:	4c25      	ldr	r4, [pc, #148]	@ (800c760 <__pow5mult+0xa8>)
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6d2:	f7ff fe59 	bl	800c388 <__multadd>
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	10ad      	asrs	r5, r5, #2
 800c6da:	d03d      	beq.n	800c758 <__pow5mult+0xa0>
 800c6dc:	69fc      	ldr	r4, [r7, #28]
 800c6de:	b97c      	cbnz	r4, 800c700 <__pow5mult+0x48>
 800c6e0:	2010      	movs	r0, #16
 800c6e2:	f7ff fd31 	bl	800c148 <malloc>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	61f8      	str	r0, [r7, #28]
 800c6ea:	b928      	cbnz	r0, 800c6f8 <__pow5mult+0x40>
 800c6ec:	4b1d      	ldr	r3, [pc, #116]	@ (800c764 <__pow5mult+0xac>)
 800c6ee:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c6f2:	481d      	ldr	r0, [pc, #116]	@ (800c768 <__pow5mult+0xb0>)
 800c6f4:	f7fe fe12 	bl	800b31c <__assert_func>
 800c6f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6fc:	6004      	str	r4, [r0, #0]
 800c6fe:	60c4      	str	r4, [r0, #12]
 800c700:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c704:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c708:	b94c      	cbnz	r4, 800c71e <__pow5mult+0x66>
 800c70a:	f240 2171 	movw	r1, #625	@ 0x271
 800c70e:	4638      	mov	r0, r7
 800c710:	f7ff ff18 	bl	800c544 <__i2b>
 800c714:	2300      	movs	r3, #0
 800c716:	4604      	mov	r4, r0
 800c718:	f8c8 0008 	str.w	r0, [r8, #8]
 800c71c:	6003      	str	r3, [r0, #0]
 800c71e:	f04f 0900 	mov.w	r9, #0
 800c722:	07eb      	lsls	r3, r5, #31
 800c724:	d50a      	bpl.n	800c73c <__pow5mult+0x84>
 800c726:	4631      	mov	r1, r6
 800c728:	4622      	mov	r2, r4
 800c72a:	4638      	mov	r0, r7
 800c72c:	f7ff ff20 	bl	800c570 <__multiply>
 800c730:	4680      	mov	r8, r0
 800c732:	4631      	mov	r1, r6
 800c734:	4638      	mov	r0, r7
 800c736:	4646      	mov	r6, r8
 800c738:	f7ff fe04 	bl	800c344 <_Bfree>
 800c73c:	106d      	asrs	r5, r5, #1
 800c73e:	d00b      	beq.n	800c758 <__pow5mult+0xa0>
 800c740:	6820      	ldr	r0, [r4, #0]
 800c742:	b938      	cbnz	r0, 800c754 <__pow5mult+0x9c>
 800c744:	4622      	mov	r2, r4
 800c746:	4621      	mov	r1, r4
 800c748:	4638      	mov	r0, r7
 800c74a:	f7ff ff11 	bl	800c570 <__multiply>
 800c74e:	6020      	str	r0, [r4, #0]
 800c750:	f8c0 9000 	str.w	r9, [r0]
 800c754:	4604      	mov	r4, r0
 800c756:	e7e4      	b.n	800c722 <__pow5mult+0x6a>
 800c758:	4630      	mov	r0, r6
 800c75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c75e:	bf00      	nop
 800c760:	0800f8dc 	.word	0x0800f8dc
 800c764:	0800f5bb 	.word	0x0800f5bb
 800c768:	0800f72b 	.word	0x0800f72b

0800c76c <__lshift>:
 800c76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c770:	460c      	mov	r4, r1
 800c772:	4607      	mov	r7, r0
 800c774:	4691      	mov	r9, r2
 800c776:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c77a:	6923      	ldr	r3, [r4, #16]
 800c77c:	6849      	ldr	r1, [r1, #4]
 800c77e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c782:	68a3      	ldr	r3, [r4, #8]
 800c784:	f108 0601 	add.w	r6, r8, #1
 800c788:	42b3      	cmp	r3, r6
 800c78a:	db0b      	blt.n	800c7a4 <__lshift+0x38>
 800c78c:	4638      	mov	r0, r7
 800c78e:	f7ff fd99 	bl	800c2c4 <_Balloc>
 800c792:	4605      	mov	r5, r0
 800c794:	b948      	cbnz	r0, 800c7aa <__lshift+0x3e>
 800c796:	4602      	mov	r2, r0
 800c798:	4b28      	ldr	r3, [pc, #160]	@ (800c83c <__lshift+0xd0>)
 800c79a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c79e:	4828      	ldr	r0, [pc, #160]	@ (800c840 <__lshift+0xd4>)
 800c7a0:	f7fe fdbc 	bl	800b31c <__assert_func>
 800c7a4:	3101      	adds	r1, #1
 800c7a6:	005b      	lsls	r3, r3, #1
 800c7a8:	e7ee      	b.n	800c788 <__lshift+0x1c>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	f100 0114 	add.w	r1, r0, #20
 800c7b0:	f100 0210 	add.w	r2, r0, #16
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	4553      	cmp	r3, sl
 800c7b8:	db33      	blt.n	800c822 <__lshift+0xb6>
 800c7ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7be:	f104 0314 	add.w	r3, r4, #20
 800c7c2:	6920      	ldr	r0, [r4, #16]
 800c7c4:	f019 091f 	ands.w	r9, r9, #31
 800c7c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c7d0:	d02b      	beq.n	800c82a <__lshift+0xbe>
 800c7d2:	f1c9 0e20 	rsb	lr, r9, #32
 800c7d6:	468a      	mov	sl, r1
 800c7d8:	2200      	movs	r2, #0
 800c7da:	6818      	ldr	r0, [r3, #0]
 800c7dc:	fa00 f009 	lsl.w	r0, r0, r9
 800c7e0:	4310      	orrs	r0, r2
 800c7e2:	f84a 0b04 	str.w	r0, [sl], #4
 800c7e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7ea:	459c      	cmp	ip, r3
 800c7ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800c7f0:	d8f3      	bhi.n	800c7da <__lshift+0x6e>
 800c7f2:	ebac 0304 	sub.w	r3, ip, r4
 800c7f6:	f104 0015 	add.w	r0, r4, #21
 800c7fa:	3b15      	subs	r3, #21
 800c7fc:	f023 0303 	bic.w	r3, r3, #3
 800c800:	3304      	adds	r3, #4
 800c802:	4560      	cmp	r0, ip
 800c804:	bf88      	it	hi
 800c806:	2304      	movhi	r3, #4
 800c808:	50ca      	str	r2, [r1, r3]
 800c80a:	b10a      	cbz	r2, 800c810 <__lshift+0xa4>
 800c80c:	f108 0602 	add.w	r6, r8, #2
 800c810:	3e01      	subs	r6, #1
 800c812:	4638      	mov	r0, r7
 800c814:	4621      	mov	r1, r4
 800c816:	612e      	str	r6, [r5, #16]
 800c818:	f7ff fd94 	bl	800c344 <_Bfree>
 800c81c:	4628      	mov	r0, r5
 800c81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c822:	3301      	adds	r3, #1
 800c824:	f842 0f04 	str.w	r0, [r2, #4]!
 800c828:	e7c5      	b.n	800c7b6 <__lshift+0x4a>
 800c82a:	3904      	subs	r1, #4
 800c82c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c830:	459c      	cmp	ip, r3
 800c832:	f841 2f04 	str.w	r2, [r1, #4]!
 800c836:	d8f9      	bhi.n	800c82c <__lshift+0xc0>
 800c838:	e7ea      	b.n	800c810 <__lshift+0xa4>
 800c83a:	bf00      	nop
 800c83c:	0800f71a 	.word	0x0800f71a
 800c840:	0800f72b 	.word	0x0800f72b

0800c844 <__mcmp>:
 800c844:	4603      	mov	r3, r0
 800c846:	690a      	ldr	r2, [r1, #16]
 800c848:	6900      	ldr	r0, [r0, #16]
 800c84a:	1a80      	subs	r0, r0, r2
 800c84c:	b530      	push	{r4, r5, lr}
 800c84e:	d10e      	bne.n	800c86e <__mcmp+0x2a>
 800c850:	3314      	adds	r3, #20
 800c852:	3114      	adds	r1, #20
 800c854:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c858:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c85c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c860:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c864:	4295      	cmp	r5, r2
 800c866:	d003      	beq.n	800c870 <__mcmp+0x2c>
 800c868:	d205      	bcs.n	800c876 <__mcmp+0x32>
 800c86a:	f04f 30ff 	mov.w	r0, #4294967295
 800c86e:	bd30      	pop	{r4, r5, pc}
 800c870:	42a3      	cmp	r3, r4
 800c872:	d3f3      	bcc.n	800c85c <__mcmp+0x18>
 800c874:	e7fb      	b.n	800c86e <__mcmp+0x2a>
 800c876:	2001      	movs	r0, #1
 800c878:	e7f9      	b.n	800c86e <__mcmp+0x2a>
	...

0800c87c <__mdiff>:
 800c87c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c880:	4689      	mov	r9, r1
 800c882:	4606      	mov	r6, r0
 800c884:	4611      	mov	r1, r2
 800c886:	4614      	mov	r4, r2
 800c888:	4648      	mov	r0, r9
 800c88a:	f7ff ffdb 	bl	800c844 <__mcmp>
 800c88e:	1e05      	subs	r5, r0, #0
 800c890:	d112      	bne.n	800c8b8 <__mdiff+0x3c>
 800c892:	4629      	mov	r1, r5
 800c894:	4630      	mov	r0, r6
 800c896:	f7ff fd15 	bl	800c2c4 <_Balloc>
 800c89a:	4602      	mov	r2, r0
 800c89c:	b928      	cbnz	r0, 800c8aa <__mdiff+0x2e>
 800c89e:	4b41      	ldr	r3, [pc, #260]	@ (800c9a4 <__mdiff+0x128>)
 800c8a0:	f240 2137 	movw	r1, #567	@ 0x237
 800c8a4:	4840      	ldr	r0, [pc, #256]	@ (800c9a8 <__mdiff+0x12c>)
 800c8a6:	f7fe fd39 	bl	800b31c <__assert_func>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	b003      	add	sp, #12
 800c8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b8:	bfbc      	itt	lt
 800c8ba:	464b      	movlt	r3, r9
 800c8bc:	46a1      	movlt	r9, r4
 800c8be:	4630      	mov	r0, r6
 800c8c0:	bfb8      	it	lt
 800c8c2:	2501      	movlt	r5, #1
 800c8c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c8c8:	bfb4      	ite	lt
 800c8ca:	461c      	movlt	r4, r3
 800c8cc:	2500      	movge	r5, #0
 800c8ce:	f7ff fcf9 	bl	800c2c4 <_Balloc>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	b918      	cbnz	r0, 800c8de <__mdiff+0x62>
 800c8d6:	4b33      	ldr	r3, [pc, #204]	@ (800c9a4 <__mdiff+0x128>)
 800c8d8:	f240 2145 	movw	r1, #581	@ 0x245
 800c8dc:	e7e2      	b.n	800c8a4 <__mdiff+0x28>
 800c8de:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c8e2:	f104 0e14 	add.w	lr, r4, #20
 800c8e6:	6926      	ldr	r6, [r4, #16]
 800c8e8:	f100 0b14 	add.w	fp, r0, #20
 800c8ec:	60c5      	str	r5, [r0, #12]
 800c8ee:	f109 0514 	add.w	r5, r9, #20
 800c8f2:	f109 0310 	add.w	r3, r9, #16
 800c8f6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c8fa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c8fe:	46d9      	mov	r9, fp
 800c900:	f04f 0c00 	mov.w	ip, #0
 800c904:	9301      	str	r3, [sp, #4]
 800c906:	9b01      	ldr	r3, [sp, #4]
 800c908:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c90c:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c910:	4576      	cmp	r6, lr
 800c912:	9301      	str	r3, [sp, #4]
 800c914:	fa1f f38a 	uxth.w	r3, sl
 800c918:	4619      	mov	r1, r3
 800c91a:	b283      	uxth	r3, r0
 800c91c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800c920:	eba1 0303 	sub.w	r3, r1, r3
 800c924:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c928:	4463      	add	r3, ip
 800c92a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c92e:	b29b      	uxth	r3, r3
 800c930:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c934:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c938:	f849 3b04 	str.w	r3, [r9], #4
 800c93c:	d8e3      	bhi.n	800c906 <__mdiff+0x8a>
 800c93e:	1b33      	subs	r3, r6, r4
 800c940:	3415      	adds	r4, #21
 800c942:	3b15      	subs	r3, #21
 800c944:	f023 0303 	bic.w	r3, r3, #3
 800c948:	3304      	adds	r3, #4
 800c94a:	42a6      	cmp	r6, r4
 800c94c:	bf38      	it	cc
 800c94e:	2304      	movcc	r3, #4
 800c950:	441d      	add	r5, r3
 800c952:	445b      	add	r3, fp
 800c954:	462c      	mov	r4, r5
 800c956:	461e      	mov	r6, r3
 800c958:	4544      	cmp	r4, r8
 800c95a:	d30e      	bcc.n	800c97a <__mdiff+0xfe>
 800c95c:	f108 0103 	add.w	r1, r8, #3
 800c960:	1b49      	subs	r1, r1, r5
 800c962:	3d03      	subs	r5, #3
 800c964:	f021 0103 	bic.w	r1, r1, #3
 800c968:	45a8      	cmp	r8, r5
 800c96a:	bf38      	it	cc
 800c96c:	2100      	movcc	r1, #0
 800c96e:	440b      	add	r3, r1
 800c970:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c974:	b199      	cbz	r1, 800c99e <__mdiff+0x122>
 800c976:	6117      	str	r7, [r2, #16]
 800c978:	e79a      	b.n	800c8b0 <__mdiff+0x34>
 800c97a:	f854 1b04 	ldr.w	r1, [r4], #4
 800c97e:	46e6      	mov	lr, ip
 800c980:	fa1f fc81 	uxth.w	ip, r1
 800c984:	0c08      	lsrs	r0, r1, #16
 800c986:	4471      	add	r1, lr
 800c988:	44f4      	add	ip, lr
 800c98a:	b289      	uxth	r1, r1
 800c98c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c990:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c994:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c998:	f846 1b04 	str.w	r1, [r6], #4
 800c99c:	e7dc      	b.n	800c958 <__mdiff+0xdc>
 800c99e:	3f01      	subs	r7, #1
 800c9a0:	e7e6      	b.n	800c970 <__mdiff+0xf4>
 800c9a2:	bf00      	nop
 800c9a4:	0800f71a 	.word	0x0800f71a
 800c9a8:	0800f72b 	.word	0x0800f72b

0800c9ac <__ulp>:
 800c9ac:	b082      	sub	sp, #8
 800c9ae:	4b11      	ldr	r3, [pc, #68]	@ (800c9f4 <__ulp+0x48>)
 800c9b0:	ed8d 0b00 	vstr	d0, [sp]
 800c9b4:	9a01      	ldr	r2, [sp, #4]
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	dc08      	bgt.n	800c9d2 <__ulp+0x26>
 800c9c0:	425b      	negs	r3, r3
 800c9c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c9c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c9ca:	da04      	bge.n	800c9d6 <__ulp+0x2a>
 800c9cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c9d0:	4113      	asrs	r3, r2
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	e008      	b.n	800c9e8 <__ulp+0x3c>
 800c9d6:	f1a2 0314 	sub.w	r3, r2, #20
 800c9da:	2b1e      	cmp	r3, #30
 800c9dc:	bfd6      	itet	le
 800c9de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c9e2:	2201      	movgt	r2, #1
 800c9e4:	40da      	lsrle	r2, r3
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	4610      	mov	r0, r2
 800c9ec:	ec41 0b10 	vmov	d0, r0, r1
 800c9f0:	b002      	add	sp, #8
 800c9f2:	4770      	bx	lr
 800c9f4:	7ff00000 	.word	0x7ff00000

0800c9f8 <__b2d>:
 800c9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9fc:	6906      	ldr	r6, [r0, #16]
 800c9fe:	f100 0814 	add.w	r8, r0, #20
 800ca02:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ca06:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ca0a:	1f37      	subs	r7, r6, #4
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	f7ff fd4d 	bl	800c4ac <__hi0bits>
 800ca12:	f1c0 0320 	rsb	r3, r0, #32
 800ca16:	280a      	cmp	r0, #10
 800ca18:	600b      	str	r3, [r1, #0]
 800ca1a:	491d      	ldr	r1, [pc, #116]	@ (800ca90 <__b2d+0x98>)
 800ca1c:	dc16      	bgt.n	800ca4c <__b2d+0x54>
 800ca1e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ca22:	45b8      	cmp	r8, r7
 800ca24:	f100 0015 	add.w	r0, r0, #21
 800ca28:	fa22 f30c 	lsr.w	r3, r2, ip
 800ca2c:	fa02 f000 	lsl.w	r0, r2, r0
 800ca30:	ea43 0501 	orr.w	r5, r3, r1
 800ca34:	bf34      	ite	cc
 800ca36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ca3a:	2300      	movcs	r3, #0
 800ca3c:	fa23 f30c 	lsr.w	r3, r3, ip
 800ca40:	4303      	orrs	r3, r0
 800ca42:	461c      	mov	r4, r3
 800ca44:	ec45 4b10 	vmov	d0, r4, r5
 800ca48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca4c:	45b8      	cmp	r8, r7
 800ca4e:	bf3a      	itte	cc
 800ca50:	f1a6 0708 	subcc.w	r7, r6, #8
 800ca54:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ca58:	2300      	movcs	r3, #0
 800ca5a:	380b      	subs	r0, #11
 800ca5c:	d014      	beq.n	800ca88 <__b2d+0x90>
 800ca5e:	f1c0 0120 	rsb	r1, r0, #32
 800ca62:	4082      	lsls	r2, r0
 800ca64:	4547      	cmp	r7, r8
 800ca66:	fa23 f401 	lsr.w	r4, r3, r1
 800ca6a:	fa03 f300 	lsl.w	r3, r3, r0
 800ca6e:	ea42 0204 	orr.w	r2, r2, r4
 800ca72:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ca76:	bf8c      	ite	hi
 800ca78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ca7c:	2200      	movls	r2, #0
 800ca7e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ca82:	40ca      	lsrs	r2, r1
 800ca84:	4313      	orrs	r3, r2
 800ca86:	e7dc      	b.n	800ca42 <__b2d+0x4a>
 800ca88:	ea42 0501 	orr.w	r5, r2, r1
 800ca8c:	e7d9      	b.n	800ca42 <__b2d+0x4a>
 800ca8e:	bf00      	nop
 800ca90:	3ff00000 	.word	0x3ff00000

0800ca94 <__d2b>:
 800ca94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca98:	460f      	mov	r7, r1
 800ca9a:	2101      	movs	r1, #1
 800ca9c:	4616      	mov	r6, r2
 800ca9e:	ec59 8b10 	vmov	r8, r9, d0
 800caa2:	f7ff fc0f 	bl	800c2c4 <_Balloc>
 800caa6:	4604      	mov	r4, r0
 800caa8:	b930      	cbnz	r0, 800cab8 <__d2b+0x24>
 800caaa:	4602      	mov	r2, r0
 800caac:	4b23      	ldr	r3, [pc, #140]	@ (800cb3c <__d2b+0xa8>)
 800caae:	f240 310f 	movw	r1, #783	@ 0x30f
 800cab2:	4823      	ldr	r0, [pc, #140]	@ (800cb40 <__d2b+0xac>)
 800cab4:	f7fe fc32 	bl	800b31c <__assert_func>
 800cab8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cabc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cac0:	b10d      	cbz	r5, 800cac6 <__d2b+0x32>
 800cac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cac6:	9301      	str	r3, [sp, #4]
 800cac8:	f1b8 0300 	subs.w	r3, r8, #0
 800cacc:	d023      	beq.n	800cb16 <__d2b+0x82>
 800cace:	4668      	mov	r0, sp
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	f7ff fd0a 	bl	800c4ea <__lo0bits>
 800cad6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cada:	b1d0      	cbz	r0, 800cb12 <__d2b+0x7e>
 800cadc:	f1c0 0320 	rsb	r3, r0, #32
 800cae0:	fa02 f303 	lsl.w	r3, r2, r3
 800cae4:	40c2      	lsrs	r2, r0
 800cae6:	430b      	orrs	r3, r1
 800cae8:	9201      	str	r2, [sp, #4]
 800caea:	6163      	str	r3, [r4, #20]
 800caec:	9b01      	ldr	r3, [sp, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	61a3      	str	r3, [r4, #24]
 800caf2:	bf0c      	ite	eq
 800caf4:	2201      	moveq	r2, #1
 800caf6:	2202      	movne	r2, #2
 800caf8:	6122      	str	r2, [r4, #16]
 800cafa:	b1a5      	cbz	r5, 800cb26 <__d2b+0x92>
 800cafc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cb00:	4405      	add	r5, r0
 800cb02:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cb06:	603d      	str	r5, [r7, #0]
 800cb08:	6030      	str	r0, [r6, #0]
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	b003      	add	sp, #12
 800cb0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb12:	6161      	str	r1, [r4, #20]
 800cb14:	e7ea      	b.n	800caec <__d2b+0x58>
 800cb16:	a801      	add	r0, sp, #4
 800cb18:	f7ff fce7 	bl	800c4ea <__lo0bits>
 800cb1c:	9b01      	ldr	r3, [sp, #4]
 800cb1e:	3020      	adds	r0, #32
 800cb20:	2201      	movs	r2, #1
 800cb22:	6163      	str	r3, [r4, #20]
 800cb24:	e7e8      	b.n	800caf8 <__d2b+0x64>
 800cb26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cb2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb2e:	6038      	str	r0, [r7, #0]
 800cb30:	6918      	ldr	r0, [r3, #16]
 800cb32:	f7ff fcbb 	bl	800c4ac <__hi0bits>
 800cb36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb3a:	e7e5      	b.n	800cb08 <__d2b+0x74>
 800cb3c:	0800f71a 	.word	0x0800f71a
 800cb40:	0800f72b 	.word	0x0800f72b

0800cb44 <__ratio>:
 800cb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb48:	b085      	sub	sp, #20
 800cb4a:	e9cd 1000 	strd	r1, r0, [sp]
 800cb4e:	a902      	add	r1, sp, #8
 800cb50:	f7ff ff52 	bl	800c9f8 <__b2d>
 800cb54:	a903      	add	r1, sp, #12
 800cb56:	9800      	ldr	r0, [sp, #0]
 800cb58:	ec55 4b10 	vmov	r4, r5, d0
 800cb5c:	f7ff ff4c 	bl	800c9f8 <__b2d>
 800cb60:	9b01      	ldr	r3, [sp, #4]
 800cb62:	462f      	mov	r7, r5
 800cb64:	4620      	mov	r0, r4
 800cb66:	6919      	ldr	r1, [r3, #16]
 800cb68:	9b00      	ldr	r3, [sp, #0]
 800cb6a:	691b      	ldr	r3, [r3, #16]
 800cb6c:	1ac9      	subs	r1, r1, r3
 800cb6e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cb72:	ec5b ab10 	vmov	sl, fp, d0
 800cb76:	1a9b      	subs	r3, r3, r2
 800cb78:	46d9      	mov	r9, fp
 800cb7a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	bfcd      	iteet	gt
 800cb82:	462a      	movgt	r2, r5
 800cb84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cb88:	465a      	movle	r2, fp
 800cb8a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cb8e:	bfd8      	it	le
 800cb90:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cb94:	4652      	mov	r2, sl
 800cb96:	4639      	mov	r1, r7
 800cb98:	464b      	mov	r3, r9
 800cb9a:	f7f3 fe45 	bl	8000828 <__aeabi_ddiv>
 800cb9e:	ec41 0b10 	vmov	d0, r0, r1
 800cba2:	b005      	add	sp, #20
 800cba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cba8 <__copybits>:
 800cba8:	3901      	subs	r1, #1
 800cbaa:	f102 0314 	add.w	r3, r2, #20
 800cbae:	1149      	asrs	r1, r1, #5
 800cbb0:	b570      	push	{r4, r5, r6, lr}
 800cbb2:	3101      	adds	r1, #1
 800cbb4:	6914      	ldr	r4, [r2, #16]
 800cbb6:	1f05      	subs	r5, r0, #4
 800cbb8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cbbc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cbc0:	42a3      	cmp	r3, r4
 800cbc2:	d30c      	bcc.n	800cbde <__copybits+0x36>
 800cbc4:	1aa3      	subs	r3, r4, r2
 800cbc6:	3211      	adds	r2, #17
 800cbc8:	3b11      	subs	r3, #17
 800cbca:	f023 0303 	bic.w	r3, r3, #3
 800cbce:	42a2      	cmp	r2, r4
 800cbd0:	bf88      	it	hi
 800cbd2:	2300      	movhi	r3, #0
 800cbd4:	4418      	add	r0, r3
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	4288      	cmp	r0, r1
 800cbda:	d305      	bcc.n	800cbe8 <__copybits+0x40>
 800cbdc:	bd70      	pop	{r4, r5, r6, pc}
 800cbde:	f853 6b04 	ldr.w	r6, [r3], #4
 800cbe2:	f845 6f04 	str.w	r6, [r5, #4]!
 800cbe6:	e7eb      	b.n	800cbc0 <__copybits+0x18>
 800cbe8:	f840 3b04 	str.w	r3, [r0], #4
 800cbec:	e7f4      	b.n	800cbd8 <__copybits+0x30>

0800cbee <__any_on>:
 800cbee:	f100 0214 	add.w	r2, r0, #20
 800cbf2:	114b      	asrs	r3, r1, #5
 800cbf4:	6900      	ldr	r0, [r0, #16]
 800cbf6:	4298      	cmp	r0, r3
 800cbf8:	b510      	push	{r4, lr}
 800cbfa:	db11      	blt.n	800cc20 <__any_on+0x32>
 800cbfc:	dd0a      	ble.n	800cc14 <__any_on+0x26>
 800cbfe:	f011 011f 	ands.w	r1, r1, #31
 800cc02:	d007      	beq.n	800cc14 <__any_on+0x26>
 800cc04:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cc08:	fa24 f001 	lsr.w	r0, r4, r1
 800cc0c:	fa00 f101 	lsl.w	r1, r0, r1
 800cc10:	428c      	cmp	r4, r1
 800cc12:	d10b      	bne.n	800cc2c <__any_on+0x3e>
 800cc14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d803      	bhi.n	800cc24 <__any_on+0x36>
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	bd10      	pop	{r4, pc}
 800cc20:	4603      	mov	r3, r0
 800cc22:	e7f7      	b.n	800cc14 <__any_on+0x26>
 800cc24:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc28:	2900      	cmp	r1, #0
 800cc2a:	d0f5      	beq.n	800cc18 <__any_on+0x2a>
 800cc2c:	2001      	movs	r0, #1
 800cc2e:	e7f6      	b.n	800cc1e <__any_on+0x30>

0800cc30 <sulp>:
 800cc30:	b570      	push	{r4, r5, r6, lr}
 800cc32:	4604      	mov	r4, r0
 800cc34:	460d      	mov	r5, r1
 800cc36:	4616      	mov	r6, r2
 800cc38:	ec45 4b10 	vmov	d0, r4, r5
 800cc3c:	f7ff feb6 	bl	800c9ac <__ulp>
 800cc40:	ec51 0b10 	vmov	r0, r1, d0
 800cc44:	b17e      	cbz	r6, 800cc66 <sulp+0x36>
 800cc46:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cc4a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	dd09      	ble.n	800cc66 <sulp+0x36>
 800cc52:	051b      	lsls	r3, r3, #20
 800cc54:	2400      	movs	r4, #0
 800cc56:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cc5a:	4622      	mov	r2, r4
 800cc5c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cc60:	462b      	mov	r3, r5
 800cc62:	f7f3 fcb7 	bl	80005d4 <__aeabi_dmul>
 800cc66:	ec41 0b10 	vmov	d0, r0, r1
 800cc6a:	bd70      	pop	{r4, r5, r6, pc}
 800cc6c:	0000      	movs	r0, r0
	...

0800cc70 <_strtod_l>:
 800cc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc74:	b09f      	sub	sp, #124	@ 0x7c
 800cc76:	460c      	mov	r4, r1
 800cc78:	f04f 0a00 	mov.w	sl, #0
 800cc7c:	f04f 0b00 	mov.w	fp, #0
 800cc80:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cc82:	2200      	movs	r2, #0
 800cc84:	9005      	str	r0, [sp, #20]
 800cc86:	921a      	str	r2, [sp, #104]	@ 0x68
 800cc88:	460a      	mov	r2, r1
 800cc8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc8c:	7811      	ldrb	r1, [r2, #0]
 800cc8e:	292b      	cmp	r1, #43	@ 0x2b
 800cc90:	d04a      	beq.n	800cd28 <_strtod_l+0xb8>
 800cc92:	d838      	bhi.n	800cd06 <_strtod_l+0x96>
 800cc94:	290d      	cmp	r1, #13
 800cc96:	d832      	bhi.n	800ccfe <_strtod_l+0x8e>
 800cc98:	2908      	cmp	r1, #8
 800cc9a:	d832      	bhi.n	800cd02 <_strtod_l+0x92>
 800cc9c:	2900      	cmp	r1, #0
 800cc9e:	d03b      	beq.n	800cd18 <_strtod_l+0xa8>
 800cca0:	2200      	movs	r2, #0
 800cca2:	920e      	str	r2, [sp, #56]	@ 0x38
 800cca4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cca6:	782a      	ldrb	r2, [r5, #0]
 800cca8:	2a30      	cmp	r2, #48	@ 0x30
 800ccaa:	f040 80b2 	bne.w	800ce12 <_strtod_l+0x1a2>
 800ccae:	786a      	ldrb	r2, [r5, #1]
 800ccb0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ccb4:	2a58      	cmp	r2, #88	@ 0x58
 800ccb6:	d16e      	bne.n	800cd96 <_strtod_l+0x126>
 800ccb8:	9302      	str	r3, [sp, #8]
 800ccba:	a919      	add	r1, sp, #100	@ 0x64
 800ccbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccbe:	4a90      	ldr	r2, [pc, #576]	@ (800cf00 <_strtod_l+0x290>)
 800ccc0:	9301      	str	r3, [sp, #4]
 800ccc2:	ab1a      	add	r3, sp, #104	@ 0x68
 800ccc4:	9805      	ldr	r0, [sp, #20]
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ccca:	f001 fddb 	bl	800e884 <__gethex>
 800ccce:	f010 060f 	ands.w	r6, r0, #15
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	d005      	beq.n	800cce2 <_strtod_l+0x72>
 800ccd6:	2e06      	cmp	r6, #6
 800ccd8:	d128      	bne.n	800cd2c <_strtod_l+0xbc>
 800ccda:	3501      	adds	r5, #1
 800ccdc:	2300      	movs	r3, #0
 800ccde:	9519      	str	r5, [sp, #100]	@ 0x64
 800cce0:	930e      	str	r3, [sp, #56]	@ 0x38
 800cce2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f040 858e 	bne.w	800d806 <_strtod_l+0xb96>
 800ccea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccec:	b1cb      	cbz	r3, 800cd22 <_strtod_l+0xb2>
 800ccee:	4652      	mov	r2, sl
 800ccf0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ccf4:	ec43 2b10 	vmov	d0, r2, r3
 800ccf8:	b01f      	add	sp, #124	@ 0x7c
 800ccfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfe:	2920      	cmp	r1, #32
 800cd00:	d1ce      	bne.n	800cca0 <_strtod_l+0x30>
 800cd02:	3201      	adds	r2, #1
 800cd04:	e7c1      	b.n	800cc8a <_strtod_l+0x1a>
 800cd06:	292d      	cmp	r1, #45	@ 0x2d
 800cd08:	d1ca      	bne.n	800cca0 <_strtod_l+0x30>
 800cd0a:	2101      	movs	r1, #1
 800cd0c:	910e      	str	r1, [sp, #56]	@ 0x38
 800cd0e:	1c51      	adds	r1, r2, #1
 800cd10:	9119      	str	r1, [sp, #100]	@ 0x64
 800cd12:	7852      	ldrb	r2, [r2, #1]
 800cd14:	2a00      	cmp	r2, #0
 800cd16:	d1c5      	bne.n	800cca4 <_strtod_l+0x34>
 800cd18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cd1a:	9419      	str	r4, [sp, #100]	@ 0x64
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f040 8570 	bne.w	800d802 <_strtod_l+0xb92>
 800cd22:	4652      	mov	r2, sl
 800cd24:	465b      	mov	r3, fp
 800cd26:	e7e5      	b.n	800ccf4 <_strtod_l+0x84>
 800cd28:	2100      	movs	r1, #0
 800cd2a:	e7ef      	b.n	800cd0c <_strtod_l+0x9c>
 800cd2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cd2e:	b13a      	cbz	r2, 800cd40 <_strtod_l+0xd0>
 800cd30:	2135      	movs	r1, #53	@ 0x35
 800cd32:	a81c      	add	r0, sp, #112	@ 0x70
 800cd34:	f7ff ff38 	bl	800cba8 <__copybits>
 800cd38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd3a:	9805      	ldr	r0, [sp, #20]
 800cd3c:	f7ff fb02 	bl	800c344 <_Bfree>
 800cd40:	3e01      	subs	r6, #1
 800cd42:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cd44:	2e04      	cmp	r6, #4
 800cd46:	d806      	bhi.n	800cd56 <_strtod_l+0xe6>
 800cd48:	e8df f006 	tbb	[pc, r6]
 800cd4c:	201d0314 	.word	0x201d0314
 800cd50:	14          	.byte	0x14
 800cd51:	00          	.byte	0x00
 800cd52:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cd56:	05e1      	lsls	r1, r4, #23
 800cd58:	bf48      	it	mi
 800cd5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cd5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd62:	0d1b      	lsrs	r3, r3, #20
 800cd64:	051b      	lsls	r3, r3, #20
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d1bb      	bne.n	800cce2 <_strtod_l+0x72>
 800cd6a:	f7fe fa8b 	bl	800b284 <__errno>
 800cd6e:	2322      	movs	r3, #34	@ 0x22
 800cd70:	6003      	str	r3, [r0, #0]
 800cd72:	e7b6      	b.n	800cce2 <_strtod_l+0x72>
 800cd74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cd78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cd7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cd80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cd84:	e7e7      	b.n	800cd56 <_strtod_l+0xe6>
 800cd86:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800cf08 <_strtod_l+0x298>
 800cd8a:	e7e4      	b.n	800cd56 <_strtod_l+0xe6>
 800cd8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cd90:	f04f 3aff 	mov.w	sl, #4294967295
 800cd94:	e7df      	b.n	800cd56 <_strtod_l+0xe6>
 800cd96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd98:	1c5a      	adds	r2, r3, #1
 800cd9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd9c:	785b      	ldrb	r3, [r3, #1]
 800cd9e:	2b30      	cmp	r3, #48	@ 0x30
 800cda0:	d0f9      	beq.n	800cd96 <_strtod_l+0x126>
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d09d      	beq.n	800cce2 <_strtod_l+0x72>
 800cda6:	2301      	movs	r3, #1
 800cda8:	2700      	movs	r7, #0
 800cdaa:	9308      	str	r3, [sp, #32]
 800cdac:	220a      	movs	r2, #10
 800cdae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdb0:	46b9      	mov	r9, r7
 800cdb2:	970b      	str	r7, [sp, #44]	@ 0x2c
 800cdb4:	930c      	str	r3, [sp, #48]	@ 0x30
 800cdb6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cdb8:	7805      	ldrb	r5, [r0, #0]
 800cdba:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cdbe:	b2d9      	uxtb	r1, r3
 800cdc0:	2909      	cmp	r1, #9
 800cdc2:	d928      	bls.n	800ce16 <_strtod_l+0x1a6>
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	494f      	ldr	r1, [pc, #316]	@ (800cf04 <_strtod_l+0x294>)
 800cdc8:	f001 fbee 	bl	800e5a8 <strncmp>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d032      	beq.n	800ce36 <_strtod_l+0x1c6>
 800cdd0:	2000      	movs	r0, #0
 800cdd2:	462a      	mov	r2, r5
 800cdd4:	464d      	mov	r5, r9
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	900a      	str	r0, [sp, #40]	@ 0x28
 800cdda:	2a65      	cmp	r2, #101	@ 0x65
 800cddc:	d001      	beq.n	800cde2 <_strtod_l+0x172>
 800cdde:	2a45      	cmp	r2, #69	@ 0x45
 800cde0:	d114      	bne.n	800ce0c <_strtod_l+0x19c>
 800cde2:	b91d      	cbnz	r5, 800cdec <_strtod_l+0x17c>
 800cde4:	9a08      	ldr	r2, [sp, #32]
 800cde6:	4302      	orrs	r2, r0
 800cde8:	d096      	beq.n	800cd18 <_strtod_l+0xa8>
 800cdea:	2500      	movs	r5, #0
 800cdec:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cdee:	1c62      	adds	r2, r4, #1
 800cdf0:	9219      	str	r2, [sp, #100]	@ 0x64
 800cdf2:	7862      	ldrb	r2, [r4, #1]
 800cdf4:	2a2b      	cmp	r2, #43	@ 0x2b
 800cdf6:	d079      	beq.n	800ceec <_strtod_l+0x27c>
 800cdf8:	2a2d      	cmp	r2, #45	@ 0x2d
 800cdfa:	d07d      	beq.n	800cef8 <_strtod_l+0x288>
 800cdfc:	f04f 0c00 	mov.w	ip, #0
 800ce00:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ce04:	2909      	cmp	r1, #9
 800ce06:	f240 8085 	bls.w	800cf14 <_strtod_l+0x2a4>
 800ce0a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ce0c:	f04f 0800 	mov.w	r8, #0
 800ce10:	e0a5      	b.n	800cf5e <_strtod_l+0x2ee>
 800ce12:	2300      	movs	r3, #0
 800ce14:	e7c8      	b.n	800cda8 <_strtod_l+0x138>
 800ce16:	f1b9 0f08 	cmp.w	r9, #8
 800ce1a:	f100 0001 	add.w	r0, r0, #1
 800ce1e:	f109 0901 	add.w	r9, r9, #1
 800ce22:	bfd4      	ite	le
 800ce24:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ce26:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ce2a:	9019      	str	r0, [sp, #100]	@ 0x64
 800ce2c:	bfdc      	itt	le
 800ce2e:	fb02 3301 	mlale	r3, r2, r1, r3
 800ce32:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ce34:	e7bf      	b.n	800cdb6 <_strtod_l+0x146>
 800ce36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce38:	1c5a      	adds	r2, r3, #1
 800ce3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce3c:	785a      	ldrb	r2, [r3, #1]
 800ce3e:	f1b9 0f00 	cmp.w	r9, #0
 800ce42:	d03a      	beq.n	800ceba <_strtod_l+0x24a>
 800ce44:	464d      	mov	r5, r9
 800ce46:	900a      	str	r0, [sp, #40]	@ 0x28
 800ce48:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ce4c:	2b09      	cmp	r3, #9
 800ce4e:	d912      	bls.n	800ce76 <_strtod_l+0x206>
 800ce50:	2301      	movs	r3, #1
 800ce52:	e7c2      	b.n	800cdda <_strtod_l+0x16a>
 800ce54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce56:	3001      	adds	r0, #1
 800ce58:	1c5a      	adds	r2, r3, #1
 800ce5a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce5c:	785a      	ldrb	r2, [r3, #1]
 800ce5e:	2a30      	cmp	r2, #48	@ 0x30
 800ce60:	d0f8      	beq.n	800ce54 <_strtod_l+0x1e4>
 800ce62:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ce66:	2b08      	cmp	r3, #8
 800ce68:	f200 84d2 	bhi.w	800d810 <_strtod_l+0xba0>
 800ce6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ce6e:	2000      	movs	r0, #0
 800ce70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce72:	4605      	mov	r5, r0
 800ce74:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce76:	3a30      	subs	r2, #48	@ 0x30
 800ce78:	f100 0301 	add.w	r3, r0, #1
 800ce7c:	d017      	beq.n	800ceae <_strtod_l+0x23e>
 800ce7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce80:	462e      	mov	r6, r5
 800ce82:	f04f 0e0a 	mov.w	lr, #10
 800ce86:	4419      	add	r1, r3
 800ce88:	910a      	str	r1, [sp, #40]	@ 0x28
 800ce8a:	1c71      	adds	r1, r6, #1
 800ce8c:	eba1 0c05 	sub.w	ip, r1, r5
 800ce90:	4563      	cmp	r3, ip
 800ce92:	dc14      	bgt.n	800cebe <_strtod_l+0x24e>
 800ce94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ce98:	182b      	adds	r3, r5, r0
 800ce9a:	3501      	adds	r5, #1
 800ce9c:	2b08      	cmp	r3, #8
 800ce9e:	4405      	add	r5, r0
 800cea0:	dc1a      	bgt.n	800ced8 <_strtod_l+0x268>
 800cea2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cea4:	230a      	movs	r3, #10
 800cea6:	fb03 2301 	mla	r3, r3, r1, r2
 800ceaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ceac:	2300      	movs	r3, #0
 800ceae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	1c51      	adds	r1, r2, #1
 800ceb4:	9119      	str	r1, [sp, #100]	@ 0x64
 800ceb6:	7852      	ldrb	r2, [r2, #1]
 800ceb8:	e7c6      	b.n	800ce48 <_strtod_l+0x1d8>
 800ceba:	4648      	mov	r0, r9
 800cebc:	e7cf      	b.n	800ce5e <_strtod_l+0x1ee>
 800cebe:	2e08      	cmp	r6, #8
 800cec0:	dc05      	bgt.n	800cece <_strtod_l+0x25e>
 800cec2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800cec4:	fb0e f606 	mul.w	r6, lr, r6
 800cec8:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ceca:	460e      	mov	r6, r1
 800cecc:	e7dd      	b.n	800ce8a <_strtod_l+0x21a>
 800cece:	2910      	cmp	r1, #16
 800ced0:	bfd8      	it	le
 800ced2:	fb0e f707 	mulle.w	r7, lr, r7
 800ced6:	e7f8      	b.n	800ceca <_strtod_l+0x25a>
 800ced8:	2b0f      	cmp	r3, #15
 800ceda:	bfdc      	itt	le
 800cedc:	230a      	movle	r3, #10
 800cede:	fb03 2707 	mlale	r7, r3, r7, r2
 800cee2:	e7e3      	b.n	800ceac <_strtod_l+0x23c>
 800cee4:	2300      	movs	r3, #0
 800cee6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cee8:	2301      	movs	r3, #1
 800ceea:	e77b      	b.n	800cde4 <_strtod_l+0x174>
 800ceec:	f04f 0c00 	mov.w	ip, #0
 800cef0:	1ca2      	adds	r2, r4, #2
 800cef2:	9219      	str	r2, [sp, #100]	@ 0x64
 800cef4:	78a2      	ldrb	r2, [r4, #2]
 800cef6:	e783      	b.n	800ce00 <_strtod_l+0x190>
 800cef8:	f04f 0c01 	mov.w	ip, #1
 800cefc:	e7f8      	b.n	800cef0 <_strtod_l+0x280>
 800cefe:	bf00      	nop
 800cf00:	0800f9ec 	.word	0x0800f9ec
 800cf04:	0800f784 	.word	0x0800f784
 800cf08:	7ff00000 	.word	0x7ff00000
 800cf0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf0e:	1c51      	adds	r1, r2, #1
 800cf10:	9119      	str	r1, [sp, #100]	@ 0x64
 800cf12:	7852      	ldrb	r2, [r2, #1]
 800cf14:	2a30      	cmp	r2, #48	@ 0x30
 800cf16:	d0f9      	beq.n	800cf0c <_strtod_l+0x29c>
 800cf18:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cf1c:	2908      	cmp	r1, #8
 800cf1e:	f63f af75 	bhi.w	800ce0c <_strtod_l+0x19c>
 800cf22:	3a30      	subs	r2, #48	@ 0x30
 800cf24:	f04f 080a 	mov.w	r8, #10
 800cf28:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cf2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf30:	1c56      	adds	r6, r2, #1
 800cf32:	9619      	str	r6, [sp, #100]	@ 0x64
 800cf34:	7852      	ldrb	r2, [r2, #1]
 800cf36:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cf3a:	f1be 0f09 	cmp.w	lr, #9
 800cf3e:	d939      	bls.n	800cfb4 <_strtod_l+0x344>
 800cf40:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cf42:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cf46:	1a76      	subs	r6, r6, r1
 800cf48:	2e08      	cmp	r6, #8
 800cf4a:	dc03      	bgt.n	800cf54 <_strtod_l+0x2e4>
 800cf4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf4e:	4588      	cmp	r8, r1
 800cf50:	bfa8      	it	ge
 800cf52:	4688      	movge	r8, r1
 800cf54:	f1bc 0f00 	cmp.w	ip, #0
 800cf58:	d001      	beq.n	800cf5e <_strtod_l+0x2ee>
 800cf5a:	f1c8 0800 	rsb	r8, r8, #0
 800cf5e:	2d00      	cmp	r5, #0
 800cf60:	d14e      	bne.n	800d000 <_strtod_l+0x390>
 800cf62:	9908      	ldr	r1, [sp, #32]
 800cf64:	4308      	orrs	r0, r1
 800cf66:	f47f aebc 	bne.w	800cce2 <_strtod_l+0x72>
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f47f aed4 	bne.w	800cd18 <_strtod_l+0xa8>
 800cf70:	2a69      	cmp	r2, #105	@ 0x69
 800cf72:	d028      	beq.n	800cfc6 <_strtod_l+0x356>
 800cf74:	dc25      	bgt.n	800cfc2 <_strtod_l+0x352>
 800cf76:	2a49      	cmp	r2, #73	@ 0x49
 800cf78:	d025      	beq.n	800cfc6 <_strtod_l+0x356>
 800cf7a:	2a4e      	cmp	r2, #78	@ 0x4e
 800cf7c:	f47f aecc 	bne.w	800cd18 <_strtod_l+0xa8>
 800cf80:	499a      	ldr	r1, [pc, #616]	@ (800d1ec <_strtod_l+0x57c>)
 800cf82:	a819      	add	r0, sp, #100	@ 0x64
 800cf84:	f001 fe9e 	bl	800ecc4 <__match>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	f43f aec5 	beq.w	800cd18 <_strtod_l+0xa8>
 800cf8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	2b28      	cmp	r3, #40	@ 0x28
 800cf94:	d12e      	bne.n	800cff4 <_strtod_l+0x384>
 800cf96:	aa1c      	add	r2, sp, #112	@ 0x70
 800cf98:	4995      	ldr	r1, [pc, #596]	@ (800d1f0 <_strtod_l+0x580>)
 800cf9a:	a819      	add	r0, sp, #100	@ 0x64
 800cf9c:	f001 fea6 	bl	800ecec <__hexnan>
 800cfa0:	2805      	cmp	r0, #5
 800cfa2:	d127      	bne.n	800cff4 <_strtod_l+0x384>
 800cfa4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cfa6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cfaa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cfae:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cfb2:	e696      	b.n	800cce2 <_strtod_l+0x72>
 800cfb4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cfb6:	fb08 2101 	mla	r1, r8, r1, r2
 800cfba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cfbe:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfc0:	e7b5      	b.n	800cf2e <_strtod_l+0x2be>
 800cfc2:	2a6e      	cmp	r2, #110	@ 0x6e
 800cfc4:	e7da      	b.n	800cf7c <_strtod_l+0x30c>
 800cfc6:	498b      	ldr	r1, [pc, #556]	@ (800d1f4 <_strtod_l+0x584>)
 800cfc8:	a819      	add	r0, sp, #100	@ 0x64
 800cfca:	f001 fe7b 	bl	800ecc4 <__match>
 800cfce:	2800      	cmp	r0, #0
 800cfd0:	f43f aea2 	beq.w	800cd18 <_strtod_l+0xa8>
 800cfd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfd6:	a819      	add	r0, sp, #100	@ 0x64
 800cfd8:	4987      	ldr	r1, [pc, #540]	@ (800d1f8 <_strtod_l+0x588>)
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	9319      	str	r3, [sp, #100]	@ 0x64
 800cfde:	f001 fe71 	bl	800ecc4 <__match>
 800cfe2:	b910      	cbnz	r0, 800cfea <_strtod_l+0x37a>
 800cfe4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	9319      	str	r3, [sp, #100]	@ 0x64
 800cfea:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d208 <_strtod_l+0x598>
 800cfee:	f04f 0a00 	mov.w	sl, #0
 800cff2:	e676      	b.n	800cce2 <_strtod_l+0x72>
 800cff4:	4881      	ldr	r0, [pc, #516]	@ (800d1fc <_strtod_l+0x58c>)
 800cff6:	f001 fbaf 	bl	800e758 <nan>
 800cffa:	ec5b ab10 	vmov	sl, fp, d0
 800cffe:	e670      	b.n	800cce2 <_strtod_l+0x72>
 800d000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d002:	f1b9 0f00 	cmp.w	r9, #0
 800d006:	bf08      	it	eq
 800d008:	46a9      	moveq	r9, r5
 800d00a:	2d10      	cmp	r5, #16
 800d00c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d00e:	eba8 0303 	sub.w	r3, r8, r3
 800d012:	462c      	mov	r4, r5
 800d014:	bfa8      	it	ge
 800d016:	2410      	movge	r4, #16
 800d018:	9309      	str	r3, [sp, #36]	@ 0x24
 800d01a:	f7f3 fa61 	bl	80004e0 <__aeabi_ui2d>
 800d01e:	2d09      	cmp	r5, #9
 800d020:	4682      	mov	sl, r0
 800d022:	468b      	mov	fp, r1
 800d024:	dc13      	bgt.n	800d04e <_strtod_l+0x3de>
 800d026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f43f ae5a 	beq.w	800cce2 <_strtod_l+0x72>
 800d02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d030:	dd78      	ble.n	800d124 <_strtod_l+0x4b4>
 800d032:	2b16      	cmp	r3, #22
 800d034:	dc5f      	bgt.n	800d0f6 <_strtod_l+0x486>
 800d036:	4972      	ldr	r1, [pc, #456]	@ (800d200 <_strtod_l+0x590>)
 800d038:	4652      	mov	r2, sl
 800d03a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d03e:	465b      	mov	r3, fp
 800d040:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d044:	f7f3 fac6 	bl	80005d4 <__aeabi_dmul>
 800d048:	4682      	mov	sl, r0
 800d04a:	468b      	mov	fp, r1
 800d04c:	e649      	b.n	800cce2 <_strtod_l+0x72>
 800d04e:	4b6c      	ldr	r3, [pc, #432]	@ (800d200 <_strtod_l+0x590>)
 800d050:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d054:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d058:	f7f3 fabc 	bl	80005d4 <__aeabi_dmul>
 800d05c:	4682      	mov	sl, r0
 800d05e:	468b      	mov	fp, r1
 800d060:	4638      	mov	r0, r7
 800d062:	f7f3 fa3d 	bl	80004e0 <__aeabi_ui2d>
 800d066:	4602      	mov	r2, r0
 800d068:	460b      	mov	r3, r1
 800d06a:	4650      	mov	r0, sl
 800d06c:	4659      	mov	r1, fp
 800d06e:	f7f3 f8fb 	bl	8000268 <__adddf3>
 800d072:	2d0f      	cmp	r5, #15
 800d074:	4682      	mov	sl, r0
 800d076:	468b      	mov	fp, r1
 800d078:	ddd5      	ble.n	800d026 <_strtod_l+0x3b6>
 800d07a:	1b2c      	subs	r4, r5, r4
 800d07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d07e:	441c      	add	r4, r3
 800d080:	2c00      	cmp	r4, #0
 800d082:	f340 8093 	ble.w	800d1ac <_strtod_l+0x53c>
 800d086:	f014 030f 	ands.w	r3, r4, #15
 800d08a:	d00a      	beq.n	800d0a2 <_strtod_l+0x432>
 800d08c:	495c      	ldr	r1, [pc, #368]	@ (800d200 <_strtod_l+0x590>)
 800d08e:	4652      	mov	r2, sl
 800d090:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d094:	465b      	mov	r3, fp
 800d096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d09a:	f7f3 fa9b 	bl	80005d4 <__aeabi_dmul>
 800d09e:	4682      	mov	sl, r0
 800d0a0:	468b      	mov	fp, r1
 800d0a2:	f034 040f 	bics.w	r4, r4, #15
 800d0a6:	d073      	beq.n	800d190 <_strtod_l+0x520>
 800d0a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d0ac:	dd49      	ble.n	800d142 <_strtod_l+0x4d2>
 800d0ae:	2400      	movs	r4, #0
 800d0b0:	46a0      	mov	r8, r4
 800d0b2:	46a1      	mov	r9, r4
 800d0b4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d0b6:	2322      	movs	r3, #34	@ 0x22
 800d0b8:	9a05      	ldr	r2, [sp, #20]
 800d0ba:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d208 <_strtod_l+0x598>
 800d0be:	f04f 0a00 	mov.w	sl, #0
 800d0c2:	6013      	str	r3, [r2, #0]
 800d0c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f43f ae0b 	beq.w	800cce2 <_strtod_l+0x72>
 800d0cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0ce:	9805      	ldr	r0, [sp, #20]
 800d0d0:	f7ff f938 	bl	800c344 <_Bfree>
 800d0d4:	4649      	mov	r1, r9
 800d0d6:	9805      	ldr	r0, [sp, #20]
 800d0d8:	f7ff f934 	bl	800c344 <_Bfree>
 800d0dc:	4641      	mov	r1, r8
 800d0de:	9805      	ldr	r0, [sp, #20]
 800d0e0:	f7ff f930 	bl	800c344 <_Bfree>
 800d0e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d0e6:	9805      	ldr	r0, [sp, #20]
 800d0e8:	f7ff f92c 	bl	800c344 <_Bfree>
 800d0ec:	4621      	mov	r1, r4
 800d0ee:	9805      	ldr	r0, [sp, #20]
 800d0f0:	f7ff f928 	bl	800c344 <_Bfree>
 800d0f4:	e5f5      	b.n	800cce2 <_strtod_l+0x72>
 800d0f6:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d0fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	dbbc      	blt.n	800d07a <_strtod_l+0x40a>
 800d100:	f1c5 050f 	rsb	r5, r5, #15
 800d104:	4c3e      	ldr	r4, [pc, #248]	@ (800d200 <_strtod_l+0x590>)
 800d106:	4652      	mov	r2, sl
 800d108:	465b      	mov	r3, fp
 800d10a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d10e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d112:	f7f3 fa5f 	bl	80005d4 <__aeabi_dmul>
 800d116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d118:	1b5d      	subs	r5, r3, r5
 800d11a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d11e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d122:	e78f      	b.n	800d044 <_strtod_l+0x3d4>
 800d124:	3316      	adds	r3, #22
 800d126:	dba8      	blt.n	800d07a <_strtod_l+0x40a>
 800d128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d12a:	4650      	mov	r0, sl
 800d12c:	4659      	mov	r1, fp
 800d12e:	eba3 0808 	sub.w	r8, r3, r8
 800d132:	4b33      	ldr	r3, [pc, #204]	@ (800d200 <_strtod_l+0x590>)
 800d134:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d138:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d13c:	f7f3 fb74 	bl	8000828 <__aeabi_ddiv>
 800d140:	e782      	b.n	800d048 <_strtod_l+0x3d8>
 800d142:	2300      	movs	r3, #0
 800d144:	1124      	asrs	r4, r4, #4
 800d146:	4650      	mov	r0, sl
 800d148:	4659      	mov	r1, fp
 800d14a:	4f2e      	ldr	r7, [pc, #184]	@ (800d204 <_strtod_l+0x594>)
 800d14c:	461e      	mov	r6, r3
 800d14e:	2c01      	cmp	r4, #1
 800d150:	dc21      	bgt.n	800d196 <_strtod_l+0x526>
 800d152:	b10b      	cbz	r3, 800d158 <_strtod_l+0x4e8>
 800d154:	4682      	mov	sl, r0
 800d156:	468b      	mov	fp, r1
 800d158:	492a      	ldr	r1, [pc, #168]	@ (800d204 <_strtod_l+0x594>)
 800d15a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d15e:	4652      	mov	r2, sl
 800d160:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d164:	465b      	mov	r3, fp
 800d166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d16a:	f7f3 fa33 	bl	80005d4 <__aeabi_dmul>
 800d16e:	4b26      	ldr	r3, [pc, #152]	@ (800d208 <_strtod_l+0x598>)
 800d170:	460a      	mov	r2, r1
 800d172:	4682      	mov	sl, r0
 800d174:	400b      	ands	r3, r1
 800d176:	4925      	ldr	r1, [pc, #148]	@ (800d20c <_strtod_l+0x59c>)
 800d178:	428b      	cmp	r3, r1
 800d17a:	d898      	bhi.n	800d0ae <_strtod_l+0x43e>
 800d17c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d180:	428b      	cmp	r3, r1
 800d182:	bf86      	itte	hi
 800d184:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d210 <_strtod_l+0x5a0>
 800d188:	f04f 3aff 	movhi.w	sl, #4294967295
 800d18c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d190:	2300      	movs	r3, #0
 800d192:	9308      	str	r3, [sp, #32]
 800d194:	e076      	b.n	800d284 <_strtod_l+0x614>
 800d196:	07e2      	lsls	r2, r4, #31
 800d198:	d504      	bpl.n	800d1a4 <_strtod_l+0x534>
 800d19a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d19e:	f7f3 fa19 	bl	80005d4 <__aeabi_dmul>
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	3601      	adds	r6, #1
 800d1a6:	1064      	asrs	r4, r4, #1
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	e7d0      	b.n	800d14e <_strtod_l+0x4de>
 800d1ac:	d0f0      	beq.n	800d190 <_strtod_l+0x520>
 800d1ae:	4264      	negs	r4, r4
 800d1b0:	f014 020f 	ands.w	r2, r4, #15
 800d1b4:	d00a      	beq.n	800d1cc <_strtod_l+0x55c>
 800d1b6:	4b12      	ldr	r3, [pc, #72]	@ (800d200 <_strtod_l+0x590>)
 800d1b8:	4650      	mov	r0, sl
 800d1ba:	4659      	mov	r1, fp
 800d1bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c4:	f7f3 fb30 	bl	8000828 <__aeabi_ddiv>
 800d1c8:	4682      	mov	sl, r0
 800d1ca:	468b      	mov	fp, r1
 800d1cc:	1124      	asrs	r4, r4, #4
 800d1ce:	d0df      	beq.n	800d190 <_strtod_l+0x520>
 800d1d0:	2c1f      	cmp	r4, #31
 800d1d2:	dd1f      	ble.n	800d214 <_strtod_l+0x5a4>
 800d1d4:	2400      	movs	r4, #0
 800d1d6:	46a0      	mov	r8, r4
 800d1d8:	46a1      	mov	r9, r4
 800d1da:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d1dc:	2322      	movs	r3, #34	@ 0x22
 800d1de:	9a05      	ldr	r2, [sp, #20]
 800d1e0:	f04f 0a00 	mov.w	sl, #0
 800d1e4:	f04f 0b00 	mov.w	fp, #0
 800d1e8:	6013      	str	r3, [r2, #0]
 800d1ea:	e76b      	b.n	800d0c4 <_strtod_l+0x454>
 800d1ec:	0800f591 	.word	0x0800f591
 800d1f0:	0800f9d8 	.word	0x0800f9d8
 800d1f4:	0800f589 	.word	0x0800f589
 800d1f8:	0800f6b8 	.word	0x0800f6b8
 800d1fc:	0800f6b4 	.word	0x0800f6b4
 800d200:	0800f910 	.word	0x0800f910
 800d204:	0800f8e8 	.word	0x0800f8e8
 800d208:	7ff00000 	.word	0x7ff00000
 800d20c:	7ca00000 	.word	0x7ca00000
 800d210:	7fefffff 	.word	0x7fefffff
 800d214:	f014 0310 	ands.w	r3, r4, #16
 800d218:	4650      	mov	r0, sl
 800d21a:	4659      	mov	r1, fp
 800d21c:	4ea9      	ldr	r6, [pc, #676]	@ (800d4c4 <_strtod_l+0x854>)
 800d21e:	bf18      	it	ne
 800d220:	236a      	movne	r3, #106	@ 0x6a
 800d222:	9308      	str	r3, [sp, #32]
 800d224:	2300      	movs	r3, #0
 800d226:	07e7      	lsls	r7, r4, #31
 800d228:	d504      	bpl.n	800d234 <_strtod_l+0x5c4>
 800d22a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d22e:	f7f3 f9d1 	bl	80005d4 <__aeabi_dmul>
 800d232:	2301      	movs	r3, #1
 800d234:	1064      	asrs	r4, r4, #1
 800d236:	f106 0608 	add.w	r6, r6, #8
 800d23a:	d1f4      	bne.n	800d226 <_strtod_l+0x5b6>
 800d23c:	b10b      	cbz	r3, 800d242 <_strtod_l+0x5d2>
 800d23e:	4682      	mov	sl, r0
 800d240:	468b      	mov	fp, r1
 800d242:	9b08      	ldr	r3, [sp, #32]
 800d244:	b1b3      	cbz	r3, 800d274 <_strtod_l+0x604>
 800d246:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d24a:	4659      	mov	r1, fp
 800d24c:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d250:	2b00      	cmp	r3, #0
 800d252:	dd0f      	ble.n	800d274 <_strtod_l+0x604>
 800d254:	2b1f      	cmp	r3, #31
 800d256:	dd56      	ble.n	800d306 <_strtod_l+0x696>
 800d258:	2b34      	cmp	r3, #52	@ 0x34
 800d25a:	f04f 0a00 	mov.w	sl, #0
 800d25e:	bfdb      	ittet	le
 800d260:	f04f 33ff 	movle.w	r3, #4294967295
 800d264:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d268:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d26c:	4093      	lslle	r3, r2
 800d26e:	bfd8      	it	le
 800d270:	ea03 0b01 	andle.w	fp, r3, r1
 800d274:	2200      	movs	r2, #0
 800d276:	2300      	movs	r3, #0
 800d278:	4650      	mov	r0, sl
 800d27a:	4659      	mov	r1, fp
 800d27c:	f7f3 fc12 	bl	8000aa4 <__aeabi_dcmpeq>
 800d280:	2800      	cmp	r0, #0
 800d282:	d1a7      	bne.n	800d1d4 <_strtod_l+0x564>
 800d284:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d286:	464a      	mov	r2, r9
 800d288:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d28a:	9300      	str	r3, [sp, #0]
 800d28c:	462b      	mov	r3, r5
 800d28e:	9805      	ldr	r0, [sp, #20]
 800d290:	f7ff f8c2 	bl	800c418 <__s2b>
 800d294:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d296:	2800      	cmp	r0, #0
 800d298:	f43f af09 	beq.w	800d0ae <_strtod_l+0x43e>
 800d29c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d29e:	2400      	movs	r4, #0
 800d2a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2a2:	2a00      	cmp	r2, #0
 800d2a4:	eba3 0308 	sub.w	r3, r3, r8
 800d2a8:	46a0      	mov	r8, r4
 800d2aa:	bfa8      	it	ge
 800d2ac:	2300      	movge	r3, #0
 800d2ae:	9312      	str	r3, [sp, #72]	@ 0x48
 800d2b0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d2b4:	9316      	str	r3, [sp, #88]	@ 0x58
 800d2b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2b8:	9805      	ldr	r0, [sp, #20]
 800d2ba:	6859      	ldr	r1, [r3, #4]
 800d2bc:	f7ff f802 	bl	800c2c4 <_Balloc>
 800d2c0:	4681      	mov	r9, r0
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	f43f aef7 	beq.w	800d0b6 <_strtod_l+0x446>
 800d2c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2ca:	300c      	adds	r0, #12
 800d2cc:	691a      	ldr	r2, [r3, #16]
 800d2ce:	f103 010c 	add.w	r1, r3, #12
 800d2d2:	3202      	adds	r2, #2
 800d2d4:	0092      	lsls	r2, r2, #2
 800d2d6:	f001 fa31 	bl	800e73c <memcpy>
 800d2da:	aa1c      	add	r2, sp, #112	@ 0x70
 800d2dc:	a91b      	add	r1, sp, #108	@ 0x6c
 800d2de:	9805      	ldr	r0, [sp, #20]
 800d2e0:	ec4b ab10 	vmov	d0, sl, fp
 800d2e4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d2e8:	f7ff fbd4 	bl	800ca94 <__d2b>
 800d2ec:	901a      	str	r0, [sp, #104]	@ 0x68
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	f43f aee1 	beq.w	800d0b6 <_strtod_l+0x446>
 800d2f4:	2101      	movs	r1, #1
 800d2f6:	9805      	ldr	r0, [sp, #20]
 800d2f8:	f7ff f924 	bl	800c544 <__i2b>
 800d2fc:	4680      	mov	r8, r0
 800d2fe:	b948      	cbnz	r0, 800d314 <_strtod_l+0x6a4>
 800d300:	f04f 0800 	mov.w	r8, #0
 800d304:	e6d7      	b.n	800d0b6 <_strtod_l+0x446>
 800d306:	f04f 32ff 	mov.w	r2, #4294967295
 800d30a:	fa02 f303 	lsl.w	r3, r2, r3
 800d30e:	ea03 0a0a 	and.w	sl, r3, sl
 800d312:	e7af      	b.n	800d274 <_strtod_l+0x604>
 800d314:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d316:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d318:	2d00      	cmp	r5, #0
 800d31a:	bfa9      	itett	ge
 800d31c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d31e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d320:	18ef      	addge	r7, r5, r3
 800d322:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d324:	bfb8      	it	lt
 800d326:	1b5e      	sublt	r6, r3, r5
 800d328:	9b08      	ldr	r3, [sp, #32]
 800d32a:	bfb8      	it	lt
 800d32c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d32e:	1aed      	subs	r5, r5, r3
 800d330:	4b65      	ldr	r3, [pc, #404]	@ (800d4c8 <_strtod_l+0x858>)
 800d332:	4415      	add	r5, r2
 800d334:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d338:	3d01      	subs	r5, #1
 800d33a:	429d      	cmp	r5, r3
 800d33c:	da4f      	bge.n	800d3de <_strtod_l+0x76e>
 800d33e:	1b5b      	subs	r3, r3, r5
 800d340:	2101      	movs	r1, #1
 800d342:	2b1f      	cmp	r3, #31
 800d344:	eba2 0203 	sub.w	r2, r2, r3
 800d348:	dc3d      	bgt.n	800d3c6 <_strtod_l+0x756>
 800d34a:	fa01 f303 	lsl.w	r3, r1, r3
 800d34e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d350:	2300      	movs	r3, #0
 800d352:	9310      	str	r3, [sp, #64]	@ 0x40
 800d354:	18bd      	adds	r5, r7, r2
 800d356:	9b08      	ldr	r3, [sp, #32]
 800d358:	4416      	add	r6, r2
 800d35a:	42af      	cmp	r7, r5
 800d35c:	441e      	add	r6, r3
 800d35e:	463b      	mov	r3, r7
 800d360:	bfa8      	it	ge
 800d362:	462b      	movge	r3, r5
 800d364:	42b3      	cmp	r3, r6
 800d366:	bfa8      	it	ge
 800d368:	4633      	movge	r3, r6
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	bfc2      	ittt	gt
 800d36e:	1aed      	subgt	r5, r5, r3
 800d370:	1af6      	subgt	r6, r6, r3
 800d372:	1aff      	subgt	r7, r7, r3
 800d374:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d376:	2b00      	cmp	r3, #0
 800d378:	dd16      	ble.n	800d3a8 <_strtod_l+0x738>
 800d37a:	4641      	mov	r1, r8
 800d37c:	461a      	mov	r2, r3
 800d37e:	9805      	ldr	r0, [sp, #20]
 800d380:	f7ff f99a 	bl	800c6b8 <__pow5mult>
 800d384:	4680      	mov	r8, r0
 800d386:	2800      	cmp	r0, #0
 800d388:	d0ba      	beq.n	800d300 <_strtod_l+0x690>
 800d38a:	4601      	mov	r1, r0
 800d38c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d38e:	9805      	ldr	r0, [sp, #20]
 800d390:	f7ff f8ee 	bl	800c570 <__multiply>
 800d394:	900a      	str	r0, [sp, #40]	@ 0x28
 800d396:	2800      	cmp	r0, #0
 800d398:	f43f ae8d 	beq.w	800d0b6 <_strtod_l+0x446>
 800d39c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d39e:	9805      	ldr	r0, [sp, #20]
 800d3a0:	f7fe ffd0 	bl	800c344 <_Bfree>
 800d3a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3a8:	2d00      	cmp	r5, #0
 800d3aa:	dc1d      	bgt.n	800d3e8 <_strtod_l+0x778>
 800d3ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	dd23      	ble.n	800d3fa <_strtod_l+0x78a>
 800d3b2:	4649      	mov	r1, r9
 800d3b4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d3b6:	9805      	ldr	r0, [sp, #20]
 800d3b8:	f7ff f97e 	bl	800c6b8 <__pow5mult>
 800d3bc:	4681      	mov	r9, r0
 800d3be:	b9e0      	cbnz	r0, 800d3fa <_strtod_l+0x78a>
 800d3c0:	f04f 0900 	mov.w	r9, #0
 800d3c4:	e677      	b.n	800d0b6 <_strtod_l+0x446>
 800d3c6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d3ca:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d3cc:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d3d0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d3d4:	35e2      	adds	r5, #226	@ 0xe2
 800d3d6:	fa01 f305 	lsl.w	r3, r1, r5
 800d3da:	9310      	str	r3, [sp, #64]	@ 0x40
 800d3dc:	e7ba      	b.n	800d354 <_strtod_l+0x6e4>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d3e6:	e7b5      	b.n	800d354 <_strtod_l+0x6e4>
 800d3e8:	462a      	mov	r2, r5
 800d3ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d3ec:	9805      	ldr	r0, [sp, #20]
 800d3ee:	f7ff f9bd 	bl	800c76c <__lshift>
 800d3f2:	901a      	str	r0, [sp, #104]	@ 0x68
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d1d9      	bne.n	800d3ac <_strtod_l+0x73c>
 800d3f8:	e65d      	b.n	800d0b6 <_strtod_l+0x446>
 800d3fa:	2e00      	cmp	r6, #0
 800d3fc:	dd07      	ble.n	800d40e <_strtod_l+0x79e>
 800d3fe:	4649      	mov	r1, r9
 800d400:	4632      	mov	r2, r6
 800d402:	9805      	ldr	r0, [sp, #20]
 800d404:	f7ff f9b2 	bl	800c76c <__lshift>
 800d408:	4681      	mov	r9, r0
 800d40a:	2800      	cmp	r0, #0
 800d40c:	d0d8      	beq.n	800d3c0 <_strtod_l+0x750>
 800d40e:	2f00      	cmp	r7, #0
 800d410:	dd08      	ble.n	800d424 <_strtod_l+0x7b4>
 800d412:	4641      	mov	r1, r8
 800d414:	463a      	mov	r2, r7
 800d416:	9805      	ldr	r0, [sp, #20]
 800d418:	f7ff f9a8 	bl	800c76c <__lshift>
 800d41c:	4680      	mov	r8, r0
 800d41e:	2800      	cmp	r0, #0
 800d420:	f43f ae49 	beq.w	800d0b6 <_strtod_l+0x446>
 800d424:	464a      	mov	r2, r9
 800d426:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d428:	9805      	ldr	r0, [sp, #20]
 800d42a:	f7ff fa27 	bl	800c87c <__mdiff>
 800d42e:	4604      	mov	r4, r0
 800d430:	2800      	cmp	r0, #0
 800d432:	f43f ae40 	beq.w	800d0b6 <_strtod_l+0x446>
 800d436:	68c3      	ldr	r3, [r0, #12]
 800d438:	4641      	mov	r1, r8
 800d43a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d43c:	2300      	movs	r3, #0
 800d43e:	60c3      	str	r3, [r0, #12]
 800d440:	f7ff fa00 	bl	800c844 <__mcmp>
 800d444:	2800      	cmp	r0, #0
 800d446:	da45      	bge.n	800d4d4 <_strtod_l+0x864>
 800d448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d44a:	ea53 030a 	orrs.w	r3, r3, sl
 800d44e:	d16b      	bne.n	800d528 <_strtod_l+0x8b8>
 800d450:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d454:	2b00      	cmp	r3, #0
 800d456:	d167      	bne.n	800d528 <_strtod_l+0x8b8>
 800d458:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d45c:	0d1b      	lsrs	r3, r3, #20
 800d45e:	051b      	lsls	r3, r3, #20
 800d460:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d464:	d960      	bls.n	800d528 <_strtod_l+0x8b8>
 800d466:	6963      	ldr	r3, [r4, #20]
 800d468:	b913      	cbnz	r3, 800d470 <_strtod_l+0x800>
 800d46a:	6923      	ldr	r3, [r4, #16]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	dd5b      	ble.n	800d528 <_strtod_l+0x8b8>
 800d470:	4621      	mov	r1, r4
 800d472:	2201      	movs	r2, #1
 800d474:	9805      	ldr	r0, [sp, #20]
 800d476:	f7ff f979 	bl	800c76c <__lshift>
 800d47a:	4641      	mov	r1, r8
 800d47c:	4604      	mov	r4, r0
 800d47e:	f7ff f9e1 	bl	800c844 <__mcmp>
 800d482:	2800      	cmp	r0, #0
 800d484:	dd50      	ble.n	800d528 <_strtod_l+0x8b8>
 800d486:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d48a:	9a08      	ldr	r2, [sp, #32]
 800d48c:	0d1b      	lsrs	r3, r3, #20
 800d48e:	051b      	lsls	r3, r3, #20
 800d490:	2a00      	cmp	r2, #0
 800d492:	d06a      	beq.n	800d56a <_strtod_l+0x8fa>
 800d494:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d498:	d867      	bhi.n	800d56a <_strtod_l+0x8fa>
 800d49a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d49e:	f67f ae9d 	bls.w	800d1dc <_strtod_l+0x56c>
 800d4a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d4cc <_strtod_l+0x85c>)
 800d4a4:	4650      	mov	r0, sl
 800d4a6:	4659      	mov	r1, fp
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f7f3 f893 	bl	80005d4 <__aeabi_dmul>
 800d4ae:	4b08      	ldr	r3, [pc, #32]	@ (800d4d0 <_strtod_l+0x860>)
 800d4b0:	4682      	mov	sl, r0
 800d4b2:	468b      	mov	fp, r1
 800d4b4:	400b      	ands	r3, r1
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	f47f ae08 	bne.w	800d0cc <_strtod_l+0x45c>
 800d4bc:	2322      	movs	r3, #34	@ 0x22
 800d4be:	9a05      	ldr	r2, [sp, #20]
 800d4c0:	6013      	str	r3, [r2, #0]
 800d4c2:	e603      	b.n	800d0cc <_strtod_l+0x45c>
 800d4c4:	0800fa00 	.word	0x0800fa00
 800d4c8:	fffffc02 	.word	0xfffffc02
 800d4cc:	39500000 	.word	0x39500000
 800d4d0:	7ff00000 	.word	0x7ff00000
 800d4d4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d4d8:	d165      	bne.n	800d5a6 <_strtod_l+0x936>
 800d4da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d4dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4e0:	b35a      	cbz	r2, 800d53a <_strtod_l+0x8ca>
 800d4e2:	4a9f      	ldr	r2, [pc, #636]	@ (800d760 <_strtod_l+0xaf0>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d12b      	bne.n	800d540 <_strtod_l+0x8d0>
 800d4e8:	9b08      	ldr	r3, [sp, #32]
 800d4ea:	4651      	mov	r1, sl
 800d4ec:	b303      	cbz	r3, 800d530 <_strtod_l+0x8c0>
 800d4ee:	465a      	mov	r2, fp
 800d4f0:	4b9c      	ldr	r3, [pc, #624]	@ (800d764 <_strtod_l+0xaf4>)
 800d4f2:	4013      	ands	r3, r2
 800d4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4f8:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d4fc:	d81b      	bhi.n	800d536 <_strtod_l+0x8c6>
 800d4fe:	0d1b      	lsrs	r3, r3, #20
 800d500:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d504:	fa02 f303 	lsl.w	r3, r2, r3
 800d508:	4299      	cmp	r1, r3
 800d50a:	d119      	bne.n	800d540 <_strtod_l+0x8d0>
 800d50c:	4b96      	ldr	r3, [pc, #600]	@ (800d768 <_strtod_l+0xaf8>)
 800d50e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d510:	429a      	cmp	r2, r3
 800d512:	d102      	bne.n	800d51a <_strtod_l+0x8aa>
 800d514:	3101      	adds	r1, #1
 800d516:	f43f adce 	beq.w	800d0b6 <_strtod_l+0x446>
 800d51a:	4b92      	ldr	r3, [pc, #584]	@ (800d764 <_strtod_l+0xaf4>)
 800d51c:	f04f 0a00 	mov.w	sl, #0
 800d520:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d522:	401a      	ands	r2, r3
 800d524:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d528:	9b08      	ldr	r3, [sp, #32]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1b9      	bne.n	800d4a2 <_strtod_l+0x832>
 800d52e:	e5cd      	b.n	800d0cc <_strtod_l+0x45c>
 800d530:	f04f 33ff 	mov.w	r3, #4294967295
 800d534:	e7e8      	b.n	800d508 <_strtod_l+0x898>
 800d536:	4613      	mov	r3, r2
 800d538:	e7e6      	b.n	800d508 <_strtod_l+0x898>
 800d53a:	ea53 030a 	orrs.w	r3, r3, sl
 800d53e:	d0a2      	beq.n	800d486 <_strtod_l+0x816>
 800d540:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d542:	b1db      	cbz	r3, 800d57c <_strtod_l+0x90c>
 800d544:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d546:	4213      	tst	r3, r2
 800d548:	d0ee      	beq.n	800d528 <_strtod_l+0x8b8>
 800d54a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d54c:	4650      	mov	r0, sl
 800d54e:	9a08      	ldr	r2, [sp, #32]
 800d550:	4659      	mov	r1, fp
 800d552:	b1bb      	cbz	r3, 800d584 <_strtod_l+0x914>
 800d554:	f7ff fb6c 	bl	800cc30 <sulp>
 800d558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d55c:	ec53 2b10 	vmov	r2, r3, d0
 800d560:	f7f2 fe82 	bl	8000268 <__adddf3>
 800d564:	4682      	mov	sl, r0
 800d566:	468b      	mov	fp, r1
 800d568:	e7de      	b.n	800d528 <_strtod_l+0x8b8>
 800d56a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d56e:	f04f 3aff 	mov.w	sl, #4294967295
 800d572:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d576:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d57a:	e7d5      	b.n	800d528 <_strtod_l+0x8b8>
 800d57c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d57e:	ea13 0f0a 	tst.w	r3, sl
 800d582:	e7e1      	b.n	800d548 <_strtod_l+0x8d8>
 800d584:	f7ff fb54 	bl	800cc30 <sulp>
 800d588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d58c:	ec53 2b10 	vmov	r2, r3, d0
 800d590:	f7f2 fe68 	bl	8000264 <__aeabi_dsub>
 800d594:	2200      	movs	r2, #0
 800d596:	2300      	movs	r3, #0
 800d598:	4682      	mov	sl, r0
 800d59a:	468b      	mov	fp, r1
 800d59c:	f7f3 fa82 	bl	8000aa4 <__aeabi_dcmpeq>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d0c1      	beq.n	800d528 <_strtod_l+0x8b8>
 800d5a4:	e61a      	b.n	800d1dc <_strtod_l+0x56c>
 800d5a6:	4641      	mov	r1, r8
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	f7ff facb 	bl	800cb44 <__ratio>
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d5b4:	ec57 6b10 	vmov	r6, r7, d0
 800d5b8:	4630      	mov	r0, r6
 800d5ba:	4639      	mov	r1, r7
 800d5bc:	f7f3 fa86 	bl	8000acc <__aeabi_dcmple>
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	d06f      	beq.n	800d6a4 <_strtod_l+0xa34>
 800d5c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d17a      	bne.n	800d6c0 <_strtod_l+0xa50>
 800d5ca:	f1ba 0f00 	cmp.w	sl, #0
 800d5ce:	d158      	bne.n	800d682 <_strtod_l+0xa12>
 800d5d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d15a      	bne.n	800d690 <_strtod_l+0xa20>
 800d5da:	2200      	movs	r2, #0
 800d5dc:	4b63      	ldr	r3, [pc, #396]	@ (800d76c <_strtod_l+0xafc>)
 800d5de:	4630      	mov	r0, r6
 800d5e0:	4639      	mov	r1, r7
 800d5e2:	f7f3 fa69 	bl	8000ab8 <__aeabi_dcmplt>
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d159      	bne.n	800d69e <_strtod_l+0xa2e>
 800d5ea:	4630      	mov	r0, r6
 800d5ec:	4639      	mov	r1, r7
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	4b5f      	ldr	r3, [pc, #380]	@ (800d770 <_strtod_l+0xb00>)
 800d5f2:	f7f2 ffef 	bl	80005d4 <__aeabi_dmul>
 800d5f6:	4606      	mov	r6, r0
 800d5f8:	460f      	mov	r7, r1
 800d5fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d5fe:	9606      	str	r6, [sp, #24]
 800d600:	9307      	str	r3, [sp, #28]
 800d602:	4d58      	ldr	r5, [pc, #352]	@ (800d764 <_strtod_l+0xaf4>)
 800d604:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d608:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d60c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d60e:	401d      	ands	r5, r3
 800d610:	4b58      	ldr	r3, [pc, #352]	@ (800d774 <_strtod_l+0xb04>)
 800d612:	429d      	cmp	r5, r3
 800d614:	f040 80b2 	bne.w	800d77c <_strtod_l+0xb0c>
 800d618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d61a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d61e:	ec4b ab10 	vmov	d0, sl, fp
 800d622:	f7ff f9c3 	bl	800c9ac <__ulp>
 800d626:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d62a:	ec51 0b10 	vmov	r0, r1, d0
 800d62e:	f7f2 ffd1 	bl	80005d4 <__aeabi_dmul>
 800d632:	4652      	mov	r2, sl
 800d634:	465b      	mov	r3, fp
 800d636:	f7f2 fe17 	bl	8000268 <__adddf3>
 800d63a:	460b      	mov	r3, r1
 800d63c:	4949      	ldr	r1, [pc, #292]	@ (800d764 <_strtod_l+0xaf4>)
 800d63e:	4682      	mov	sl, r0
 800d640:	4a4d      	ldr	r2, [pc, #308]	@ (800d778 <_strtod_l+0xb08>)
 800d642:	4019      	ands	r1, r3
 800d644:	4291      	cmp	r1, r2
 800d646:	d942      	bls.n	800d6ce <_strtod_l+0xa5e>
 800d648:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d64a:	4b47      	ldr	r3, [pc, #284]	@ (800d768 <_strtod_l+0xaf8>)
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d103      	bne.n	800d658 <_strtod_l+0x9e8>
 800d650:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d652:	3301      	adds	r3, #1
 800d654:	f43f ad2f 	beq.w	800d0b6 <_strtod_l+0x446>
 800d658:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d768 <_strtod_l+0xaf8>
 800d65c:	f04f 3aff 	mov.w	sl, #4294967295
 800d660:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d662:	9805      	ldr	r0, [sp, #20]
 800d664:	f7fe fe6e 	bl	800c344 <_Bfree>
 800d668:	4649      	mov	r1, r9
 800d66a:	9805      	ldr	r0, [sp, #20]
 800d66c:	f7fe fe6a 	bl	800c344 <_Bfree>
 800d670:	4641      	mov	r1, r8
 800d672:	9805      	ldr	r0, [sp, #20]
 800d674:	f7fe fe66 	bl	800c344 <_Bfree>
 800d678:	4621      	mov	r1, r4
 800d67a:	9805      	ldr	r0, [sp, #20]
 800d67c:	f7fe fe62 	bl	800c344 <_Bfree>
 800d680:	e619      	b.n	800d2b6 <_strtod_l+0x646>
 800d682:	f1ba 0f01 	cmp.w	sl, #1
 800d686:	d103      	bne.n	800d690 <_strtod_l+0xa20>
 800d688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	f43f ada6 	beq.w	800d1dc <_strtod_l+0x56c>
 800d690:	2600      	movs	r6, #0
 800d692:	4f36      	ldr	r7, [pc, #216]	@ (800d76c <_strtod_l+0xafc>)
 800d694:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800d740 <_strtod_l+0xad0>
 800d698:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d69c:	e7b1      	b.n	800d602 <_strtod_l+0x992>
 800d69e:	2600      	movs	r6, #0
 800d6a0:	4f33      	ldr	r7, [pc, #204]	@ (800d770 <_strtod_l+0xb00>)
 800d6a2:	e7aa      	b.n	800d5fa <_strtod_l+0x98a>
 800d6a4:	4b32      	ldr	r3, [pc, #200]	@ (800d770 <_strtod_l+0xb00>)
 800d6a6:	4630      	mov	r0, r6
 800d6a8:	4639      	mov	r1, r7
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	f7f2 ff92 	bl	80005d4 <__aeabi_dmul>
 800d6b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6b2:	4606      	mov	r6, r0
 800d6b4:	460f      	mov	r7, r1
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d09f      	beq.n	800d5fa <_strtod_l+0x98a>
 800d6ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d6be:	e7a0      	b.n	800d602 <_strtod_l+0x992>
 800d6c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d748 <_strtod_l+0xad8>
 800d6c4:	ec57 6b17 	vmov	r6, r7, d7
 800d6c8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d6cc:	e799      	b.n	800d602 <_strtod_l+0x992>
 800d6ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d6d2:	9b08      	ldr	r3, [sp, #32]
 800d6d4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d1c1      	bne.n	800d660 <_strtod_l+0x9f0>
 800d6dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d6e0:	0d1b      	lsrs	r3, r3, #20
 800d6e2:	051b      	lsls	r3, r3, #20
 800d6e4:	429d      	cmp	r5, r3
 800d6e6:	d1bb      	bne.n	800d660 <_strtod_l+0x9f0>
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	4639      	mov	r1, r7
 800d6ec:	f7f3 fb22 	bl	8000d34 <__aeabi_d2lz>
 800d6f0:	f7f2 ff42 	bl	8000578 <__aeabi_l2d>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	460b      	mov	r3, r1
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	4639      	mov	r1, r7
 800d6fc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d700:	f7f2 fdb0 	bl	8000264 <__aeabi_dsub>
 800d704:	460b      	mov	r3, r1
 800d706:	4602      	mov	r2, r0
 800d708:	ea46 060a 	orr.w	r6, r6, sl
 800d70c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d710:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d712:	431e      	orrs	r6, r3
 800d714:	d06f      	beq.n	800d7f6 <_strtod_l+0xb86>
 800d716:	a30e      	add	r3, pc, #56	@ (adr r3, 800d750 <_strtod_l+0xae0>)
 800d718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71c:	f7f3 f9cc 	bl	8000ab8 <__aeabi_dcmplt>
 800d720:	2800      	cmp	r0, #0
 800d722:	f47f acd3 	bne.w	800d0cc <_strtod_l+0x45c>
 800d726:	a30c      	add	r3, pc, #48	@ (adr r3, 800d758 <_strtod_l+0xae8>)
 800d728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d730:	f7f3 f9e0 	bl	8000af4 <__aeabi_dcmpgt>
 800d734:	2800      	cmp	r0, #0
 800d736:	d093      	beq.n	800d660 <_strtod_l+0x9f0>
 800d738:	e4c8      	b.n	800d0cc <_strtod_l+0x45c>
 800d73a:	bf00      	nop
 800d73c:	f3af 8000 	nop.w
 800d740:	00000000 	.word	0x00000000
 800d744:	bff00000 	.word	0xbff00000
 800d748:	00000000 	.word	0x00000000
 800d74c:	3ff00000 	.word	0x3ff00000
 800d750:	94a03595 	.word	0x94a03595
 800d754:	3fdfffff 	.word	0x3fdfffff
 800d758:	35afe535 	.word	0x35afe535
 800d75c:	3fe00000 	.word	0x3fe00000
 800d760:	000fffff 	.word	0x000fffff
 800d764:	7ff00000 	.word	0x7ff00000
 800d768:	7fefffff 	.word	0x7fefffff
 800d76c:	3ff00000 	.word	0x3ff00000
 800d770:	3fe00000 	.word	0x3fe00000
 800d774:	7fe00000 	.word	0x7fe00000
 800d778:	7c9fffff 	.word	0x7c9fffff
 800d77c:	9b08      	ldr	r3, [sp, #32]
 800d77e:	b323      	cbz	r3, 800d7ca <_strtod_l+0xb5a>
 800d780:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d784:	d821      	bhi.n	800d7ca <_strtod_l+0xb5a>
 800d786:	4630      	mov	r0, r6
 800d788:	4639      	mov	r1, r7
 800d78a:	a327      	add	r3, pc, #156	@ (adr r3, 800d828 <_strtod_l+0xbb8>)
 800d78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d790:	f7f3 f99c 	bl	8000acc <__aeabi_dcmple>
 800d794:	b1a0      	cbz	r0, 800d7c0 <_strtod_l+0xb50>
 800d796:	4639      	mov	r1, r7
 800d798:	4630      	mov	r0, r6
 800d79a:	f7f3 f9f3 	bl	8000b84 <__aeabi_d2uiz>
 800d79e:	2801      	cmp	r0, #1
 800d7a0:	bf38      	it	cc
 800d7a2:	2001      	movcc	r0, #1
 800d7a4:	f7f2 fe9c 	bl	80004e0 <__aeabi_ui2d>
 800d7a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7aa:	4606      	mov	r6, r0
 800d7ac:	460f      	mov	r7, r1
 800d7ae:	b9fb      	cbnz	r3, 800d7f0 <_strtod_l+0xb80>
 800d7b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d7b4:	9014      	str	r0, [sp, #80]	@ 0x50
 800d7b6:	9315      	str	r3, [sp, #84]	@ 0x54
 800d7b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d7bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d7c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d7c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d7c6:	1b5b      	subs	r3, r3, r5
 800d7c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d7ca:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d7ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d7d2:	f7ff f8eb 	bl	800c9ac <__ulp>
 800d7d6:	4650      	mov	r0, sl
 800d7d8:	4659      	mov	r1, fp
 800d7da:	ec53 2b10 	vmov	r2, r3, d0
 800d7de:	f7f2 fef9 	bl	80005d4 <__aeabi_dmul>
 800d7e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d7e6:	f7f2 fd3f 	bl	8000268 <__adddf3>
 800d7ea:	4682      	mov	sl, r0
 800d7ec:	468b      	mov	fp, r1
 800d7ee:	e770      	b.n	800d6d2 <_strtod_l+0xa62>
 800d7f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d7f4:	e7e0      	b.n	800d7b8 <_strtod_l+0xb48>
 800d7f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d830 <_strtod_l+0xbc0>)
 800d7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fc:	f7f3 f95c 	bl	8000ab8 <__aeabi_dcmplt>
 800d800:	e798      	b.n	800d734 <_strtod_l+0xac4>
 800d802:	2300      	movs	r3, #0
 800d804:	930e      	str	r3, [sp, #56]	@ 0x38
 800d806:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d808:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	f7ff ba6d 	b.w	800ccea <_strtod_l+0x7a>
 800d810:	2a65      	cmp	r2, #101	@ 0x65
 800d812:	f43f ab67 	beq.w	800cee4 <_strtod_l+0x274>
 800d816:	2a45      	cmp	r2, #69	@ 0x45
 800d818:	f43f ab64 	beq.w	800cee4 <_strtod_l+0x274>
 800d81c:	2301      	movs	r3, #1
 800d81e:	f7ff bba0 	b.w	800cf62 <_strtod_l+0x2f2>
 800d822:	bf00      	nop
 800d824:	f3af 8000 	nop.w
 800d828:	ffc00000 	.word	0xffc00000
 800d82c:	41dfffff 	.word	0x41dfffff
 800d830:	94a03595 	.word	0x94a03595
 800d834:	3fcfffff 	.word	0x3fcfffff

0800d838 <_strtod_r>:
 800d838:	4b01      	ldr	r3, [pc, #4]	@ (800d840 <_strtod_r+0x8>)
 800d83a:	f7ff ba19 	b.w	800cc70 <_strtod_l>
 800d83e:	bf00      	nop
 800d840:	200000e8 	.word	0x200000e8

0800d844 <_strtol_l.isra.0>:
 800d844:	2b24      	cmp	r3, #36	@ 0x24
 800d846:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d84a:	4686      	mov	lr, r0
 800d84c:	4690      	mov	r8, r2
 800d84e:	d801      	bhi.n	800d854 <_strtol_l.isra.0+0x10>
 800d850:	2b01      	cmp	r3, #1
 800d852:	d106      	bne.n	800d862 <_strtol_l.isra.0+0x1e>
 800d854:	f7fd fd16 	bl	800b284 <__errno>
 800d858:	2316      	movs	r3, #22
 800d85a:	6003      	str	r3, [r0, #0]
 800d85c:	2000      	movs	r0, #0
 800d85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d862:	460d      	mov	r5, r1
 800d864:	4833      	ldr	r0, [pc, #204]	@ (800d934 <_strtol_l.isra.0+0xf0>)
 800d866:	462a      	mov	r2, r5
 800d868:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d86c:	5d06      	ldrb	r6, [r0, r4]
 800d86e:	f016 0608 	ands.w	r6, r6, #8
 800d872:	d1f8      	bne.n	800d866 <_strtol_l.isra.0+0x22>
 800d874:	2c2d      	cmp	r4, #45	@ 0x2d
 800d876:	d110      	bne.n	800d89a <_strtol_l.isra.0+0x56>
 800d878:	782c      	ldrb	r4, [r5, #0]
 800d87a:	2601      	movs	r6, #1
 800d87c:	1c95      	adds	r5, r2, #2
 800d87e:	f033 0210 	bics.w	r2, r3, #16
 800d882:	d115      	bne.n	800d8b0 <_strtol_l.isra.0+0x6c>
 800d884:	2c30      	cmp	r4, #48	@ 0x30
 800d886:	d10d      	bne.n	800d8a4 <_strtol_l.isra.0+0x60>
 800d888:	782a      	ldrb	r2, [r5, #0]
 800d88a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d88e:	2a58      	cmp	r2, #88	@ 0x58
 800d890:	d108      	bne.n	800d8a4 <_strtol_l.isra.0+0x60>
 800d892:	786c      	ldrb	r4, [r5, #1]
 800d894:	3502      	adds	r5, #2
 800d896:	2310      	movs	r3, #16
 800d898:	e00a      	b.n	800d8b0 <_strtol_l.isra.0+0x6c>
 800d89a:	2c2b      	cmp	r4, #43	@ 0x2b
 800d89c:	bf04      	itt	eq
 800d89e:	782c      	ldrbeq	r4, [r5, #0]
 800d8a0:	1c95      	addeq	r5, r2, #2
 800d8a2:	e7ec      	b.n	800d87e <_strtol_l.isra.0+0x3a>
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d1f6      	bne.n	800d896 <_strtol_l.isra.0+0x52>
 800d8a8:	2c30      	cmp	r4, #48	@ 0x30
 800d8aa:	bf14      	ite	ne
 800d8ac:	230a      	movne	r3, #10
 800d8ae:	2308      	moveq	r3, #8
 800d8b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d8ba:	4610      	mov	r0, r2
 800d8bc:	fbbc f9f3 	udiv	r9, ip, r3
 800d8c0:	fb03 ca19 	mls	sl, r3, r9, ip
 800d8c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d8c8:	2f09      	cmp	r7, #9
 800d8ca:	d80f      	bhi.n	800d8ec <_strtol_l.isra.0+0xa8>
 800d8cc:	463c      	mov	r4, r7
 800d8ce:	42a3      	cmp	r3, r4
 800d8d0:	dd1b      	ble.n	800d90a <_strtol_l.isra.0+0xc6>
 800d8d2:	1c57      	adds	r7, r2, #1
 800d8d4:	d007      	beq.n	800d8e6 <_strtol_l.isra.0+0xa2>
 800d8d6:	4581      	cmp	r9, r0
 800d8d8:	d314      	bcc.n	800d904 <_strtol_l.isra.0+0xc0>
 800d8da:	d101      	bne.n	800d8e0 <_strtol_l.isra.0+0x9c>
 800d8dc:	45a2      	cmp	sl, r4
 800d8de:	db11      	blt.n	800d904 <_strtol_l.isra.0+0xc0>
 800d8e0:	fb00 4003 	mla	r0, r0, r3, r4
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8ea:	e7eb      	b.n	800d8c4 <_strtol_l.isra.0+0x80>
 800d8ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d8f0:	2f19      	cmp	r7, #25
 800d8f2:	d801      	bhi.n	800d8f8 <_strtol_l.isra.0+0xb4>
 800d8f4:	3c37      	subs	r4, #55	@ 0x37
 800d8f6:	e7ea      	b.n	800d8ce <_strtol_l.isra.0+0x8a>
 800d8f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d8fc:	2f19      	cmp	r7, #25
 800d8fe:	d804      	bhi.n	800d90a <_strtol_l.isra.0+0xc6>
 800d900:	3c57      	subs	r4, #87	@ 0x57
 800d902:	e7e4      	b.n	800d8ce <_strtol_l.isra.0+0x8a>
 800d904:	f04f 32ff 	mov.w	r2, #4294967295
 800d908:	e7ed      	b.n	800d8e6 <_strtol_l.isra.0+0xa2>
 800d90a:	1c53      	adds	r3, r2, #1
 800d90c:	d108      	bne.n	800d920 <_strtol_l.isra.0+0xdc>
 800d90e:	2322      	movs	r3, #34	@ 0x22
 800d910:	4660      	mov	r0, ip
 800d912:	f8ce 3000 	str.w	r3, [lr]
 800d916:	f1b8 0f00 	cmp.w	r8, #0
 800d91a:	d0a0      	beq.n	800d85e <_strtol_l.isra.0+0x1a>
 800d91c:	1e69      	subs	r1, r5, #1
 800d91e:	e006      	b.n	800d92e <_strtol_l.isra.0+0xea>
 800d920:	b106      	cbz	r6, 800d924 <_strtol_l.isra.0+0xe0>
 800d922:	4240      	negs	r0, r0
 800d924:	f1b8 0f00 	cmp.w	r8, #0
 800d928:	d099      	beq.n	800d85e <_strtol_l.isra.0+0x1a>
 800d92a:	2a00      	cmp	r2, #0
 800d92c:	d1f6      	bne.n	800d91c <_strtol_l.isra.0+0xd8>
 800d92e:	f8c8 1000 	str.w	r1, [r8]
 800d932:	e794      	b.n	800d85e <_strtol_l.isra.0+0x1a>
 800d934:	0800fa29 	.word	0x0800fa29

0800d938 <_strtol_r>:
 800d938:	f7ff bf84 	b.w	800d844 <_strtol_l.isra.0>

0800d93c <_strtoul_l.isra.0>:
 800d93c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d940:	4686      	mov	lr, r0
 800d942:	460d      	mov	r5, r1
 800d944:	4e33      	ldr	r6, [pc, #204]	@ (800da14 <_strtoul_l.isra.0+0xd8>)
 800d946:	4628      	mov	r0, r5
 800d948:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d94c:	5d37      	ldrb	r7, [r6, r4]
 800d94e:	f017 0708 	ands.w	r7, r7, #8
 800d952:	d1f8      	bne.n	800d946 <_strtoul_l.isra.0+0xa>
 800d954:	2c2d      	cmp	r4, #45	@ 0x2d
 800d956:	d110      	bne.n	800d97a <_strtoul_l.isra.0+0x3e>
 800d958:	782c      	ldrb	r4, [r5, #0]
 800d95a:	2701      	movs	r7, #1
 800d95c:	1c85      	adds	r5, r0, #2
 800d95e:	f033 0010 	bics.w	r0, r3, #16
 800d962:	d115      	bne.n	800d990 <_strtoul_l.isra.0+0x54>
 800d964:	2c30      	cmp	r4, #48	@ 0x30
 800d966:	d10d      	bne.n	800d984 <_strtoul_l.isra.0+0x48>
 800d968:	7828      	ldrb	r0, [r5, #0]
 800d96a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d96e:	2858      	cmp	r0, #88	@ 0x58
 800d970:	d108      	bne.n	800d984 <_strtoul_l.isra.0+0x48>
 800d972:	786c      	ldrb	r4, [r5, #1]
 800d974:	3502      	adds	r5, #2
 800d976:	2310      	movs	r3, #16
 800d978:	e00a      	b.n	800d990 <_strtoul_l.isra.0+0x54>
 800d97a:	2c2b      	cmp	r4, #43	@ 0x2b
 800d97c:	bf04      	itt	eq
 800d97e:	782c      	ldrbeq	r4, [r5, #0]
 800d980:	1c85      	addeq	r5, r0, #2
 800d982:	e7ec      	b.n	800d95e <_strtoul_l.isra.0+0x22>
 800d984:	2b00      	cmp	r3, #0
 800d986:	d1f6      	bne.n	800d976 <_strtoul_l.isra.0+0x3a>
 800d988:	2c30      	cmp	r4, #48	@ 0x30
 800d98a:	bf14      	ite	ne
 800d98c:	230a      	movne	r3, #10
 800d98e:	2308      	moveq	r3, #8
 800d990:	f04f 38ff 	mov.w	r8, #4294967295
 800d994:	2600      	movs	r6, #0
 800d996:	fbb8 f8f3 	udiv	r8, r8, r3
 800d99a:	fb03 f908 	mul.w	r9, r3, r8
 800d99e:	4630      	mov	r0, r6
 800d9a0:	ea6f 0909 	mvn.w	r9, r9
 800d9a4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d9a8:	f1bc 0f09 	cmp.w	ip, #9
 800d9ac:	d810      	bhi.n	800d9d0 <_strtoul_l.isra.0+0x94>
 800d9ae:	4664      	mov	r4, ip
 800d9b0:	42a3      	cmp	r3, r4
 800d9b2:	dd1e      	ble.n	800d9f2 <_strtoul_l.isra.0+0xb6>
 800d9b4:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d9b8:	d007      	beq.n	800d9ca <_strtoul_l.isra.0+0x8e>
 800d9ba:	4580      	cmp	r8, r0
 800d9bc:	d316      	bcc.n	800d9ec <_strtoul_l.isra.0+0xb0>
 800d9be:	d101      	bne.n	800d9c4 <_strtoul_l.isra.0+0x88>
 800d9c0:	45a1      	cmp	r9, r4
 800d9c2:	db13      	blt.n	800d9ec <_strtoul_l.isra.0+0xb0>
 800d9c4:	fb00 4003 	mla	r0, r0, r3, r4
 800d9c8:	2601      	movs	r6, #1
 800d9ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d9ce:	e7e9      	b.n	800d9a4 <_strtoul_l.isra.0+0x68>
 800d9d0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d9d4:	f1bc 0f19 	cmp.w	ip, #25
 800d9d8:	d801      	bhi.n	800d9de <_strtoul_l.isra.0+0xa2>
 800d9da:	3c37      	subs	r4, #55	@ 0x37
 800d9dc:	e7e8      	b.n	800d9b0 <_strtoul_l.isra.0+0x74>
 800d9de:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d9e2:	f1bc 0f19 	cmp.w	ip, #25
 800d9e6:	d804      	bhi.n	800d9f2 <_strtoul_l.isra.0+0xb6>
 800d9e8:	3c57      	subs	r4, #87	@ 0x57
 800d9ea:	e7e1      	b.n	800d9b0 <_strtoul_l.isra.0+0x74>
 800d9ec:	f04f 36ff 	mov.w	r6, #4294967295
 800d9f0:	e7eb      	b.n	800d9ca <_strtoul_l.isra.0+0x8e>
 800d9f2:	1c73      	adds	r3, r6, #1
 800d9f4:	d106      	bne.n	800da04 <_strtoul_l.isra.0+0xc8>
 800d9f6:	2322      	movs	r3, #34	@ 0x22
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	f8ce 3000 	str.w	r3, [lr]
 800d9fe:	b932      	cbnz	r2, 800da0e <_strtoul_l.isra.0+0xd2>
 800da00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da04:	b107      	cbz	r7, 800da08 <_strtoul_l.isra.0+0xcc>
 800da06:	4240      	negs	r0, r0
 800da08:	2a00      	cmp	r2, #0
 800da0a:	d0f9      	beq.n	800da00 <_strtoul_l.isra.0+0xc4>
 800da0c:	b106      	cbz	r6, 800da10 <_strtoul_l.isra.0+0xd4>
 800da0e:	1e69      	subs	r1, r5, #1
 800da10:	6011      	str	r1, [r2, #0]
 800da12:	e7f5      	b.n	800da00 <_strtoul_l.isra.0+0xc4>
 800da14:	0800fa29 	.word	0x0800fa29

0800da18 <_strtoul_r>:
 800da18:	f7ff bf90 	b.w	800d93c <_strtoul_l.isra.0>

0800da1c <strtoul>:
 800da1c:	4613      	mov	r3, r2
 800da1e:	460a      	mov	r2, r1
 800da20:	4601      	mov	r1, r0
 800da22:	4802      	ldr	r0, [pc, #8]	@ (800da2c <strtoul+0x10>)
 800da24:	6800      	ldr	r0, [r0, #0]
 800da26:	f7ff bf89 	b.w	800d93c <_strtoul_l.isra.0>
 800da2a:	bf00      	nop
 800da2c:	20000040 	.word	0x20000040

0800da30 <__ssputs_r>:
 800da30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da34:	461f      	mov	r7, r3
 800da36:	688e      	ldr	r6, [r1, #8]
 800da38:	4682      	mov	sl, r0
 800da3a:	460c      	mov	r4, r1
 800da3c:	42be      	cmp	r6, r7
 800da3e:	4690      	mov	r8, r2
 800da40:	680b      	ldr	r3, [r1, #0]
 800da42:	d82d      	bhi.n	800daa0 <__ssputs_r+0x70>
 800da44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da4c:	d026      	beq.n	800da9c <__ssputs_r+0x6c>
 800da4e:	6965      	ldr	r5, [r4, #20]
 800da50:	6909      	ldr	r1, [r1, #16]
 800da52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da56:	eba3 0901 	sub.w	r9, r3, r1
 800da5a:	1c7b      	adds	r3, r7, #1
 800da5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da60:	444b      	add	r3, r9
 800da62:	106d      	asrs	r5, r5, #1
 800da64:	429d      	cmp	r5, r3
 800da66:	bf38      	it	cc
 800da68:	461d      	movcc	r5, r3
 800da6a:	0553      	lsls	r3, r2, #21
 800da6c:	d527      	bpl.n	800dabe <__ssputs_r+0x8e>
 800da6e:	4629      	mov	r1, r5
 800da70:	f7fe fb9c 	bl	800c1ac <_malloc_r>
 800da74:	4606      	mov	r6, r0
 800da76:	b360      	cbz	r0, 800dad2 <__ssputs_r+0xa2>
 800da78:	464a      	mov	r2, r9
 800da7a:	6921      	ldr	r1, [r4, #16]
 800da7c:	f000 fe5e 	bl	800e73c <memcpy>
 800da80:	89a3      	ldrh	r3, [r4, #12]
 800da82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da8a:	81a3      	strh	r3, [r4, #12]
 800da8c:	6126      	str	r6, [r4, #16]
 800da8e:	444e      	add	r6, r9
 800da90:	6165      	str	r5, [r4, #20]
 800da92:	eba5 0509 	sub.w	r5, r5, r9
 800da96:	6026      	str	r6, [r4, #0]
 800da98:	463e      	mov	r6, r7
 800da9a:	60a5      	str	r5, [r4, #8]
 800da9c:	42be      	cmp	r6, r7
 800da9e:	d900      	bls.n	800daa2 <__ssputs_r+0x72>
 800daa0:	463e      	mov	r6, r7
 800daa2:	4632      	mov	r2, r6
 800daa4:	4641      	mov	r1, r8
 800daa6:	6820      	ldr	r0, [r4, #0]
 800daa8:	f000 fd64 	bl	800e574 <memmove>
 800daac:	68a3      	ldr	r3, [r4, #8]
 800daae:	2000      	movs	r0, #0
 800dab0:	1b9b      	subs	r3, r3, r6
 800dab2:	60a3      	str	r3, [r4, #8]
 800dab4:	6823      	ldr	r3, [r4, #0]
 800dab6:	4433      	add	r3, r6
 800dab8:	6023      	str	r3, [r4, #0]
 800daba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dabe:	462a      	mov	r2, r5
 800dac0:	f001 f9c1 	bl	800ee46 <_realloc_r>
 800dac4:	4606      	mov	r6, r0
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d1e0      	bne.n	800da8c <__ssputs_r+0x5c>
 800daca:	6921      	ldr	r1, [r4, #16]
 800dacc:	4650      	mov	r0, sl
 800dace:	f7fe faad 	bl	800c02c <_free_r>
 800dad2:	230c      	movs	r3, #12
 800dad4:	f04f 30ff 	mov.w	r0, #4294967295
 800dad8:	f8ca 3000 	str.w	r3, [sl]
 800dadc:	89a3      	ldrh	r3, [r4, #12]
 800dade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dae2:	81a3      	strh	r3, [r4, #12]
 800dae4:	e7e9      	b.n	800daba <__ssputs_r+0x8a>
	...

0800dae8 <_svfiprintf_r>:
 800dae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daec:	4698      	mov	r8, r3
 800daee:	898b      	ldrh	r3, [r1, #12]
 800daf0:	b09d      	sub	sp, #116	@ 0x74
 800daf2:	4607      	mov	r7, r0
 800daf4:	061b      	lsls	r3, r3, #24
 800daf6:	460d      	mov	r5, r1
 800daf8:	4614      	mov	r4, r2
 800dafa:	d510      	bpl.n	800db1e <_svfiprintf_r+0x36>
 800dafc:	690b      	ldr	r3, [r1, #16]
 800dafe:	b973      	cbnz	r3, 800db1e <_svfiprintf_r+0x36>
 800db00:	2140      	movs	r1, #64	@ 0x40
 800db02:	f7fe fb53 	bl	800c1ac <_malloc_r>
 800db06:	6028      	str	r0, [r5, #0]
 800db08:	6128      	str	r0, [r5, #16]
 800db0a:	b930      	cbnz	r0, 800db1a <_svfiprintf_r+0x32>
 800db0c:	230c      	movs	r3, #12
 800db0e:	603b      	str	r3, [r7, #0]
 800db10:	f04f 30ff 	mov.w	r0, #4294967295
 800db14:	b01d      	add	sp, #116	@ 0x74
 800db16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db1a:	2340      	movs	r3, #64	@ 0x40
 800db1c:	616b      	str	r3, [r5, #20]
 800db1e:	2300      	movs	r3, #0
 800db20:	f8cd 800c 	str.w	r8, [sp, #12]
 800db24:	f04f 0901 	mov.w	r9, #1
 800db28:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800dccc <_svfiprintf_r+0x1e4>
 800db2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800db2e:	2320      	movs	r3, #32
 800db30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db34:	2330      	movs	r3, #48	@ 0x30
 800db36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db3a:	4623      	mov	r3, r4
 800db3c:	469a      	mov	sl, r3
 800db3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db42:	b10a      	cbz	r2, 800db48 <_svfiprintf_r+0x60>
 800db44:	2a25      	cmp	r2, #37	@ 0x25
 800db46:	d1f9      	bne.n	800db3c <_svfiprintf_r+0x54>
 800db48:	ebba 0b04 	subs.w	fp, sl, r4
 800db4c:	d00b      	beq.n	800db66 <_svfiprintf_r+0x7e>
 800db4e:	465b      	mov	r3, fp
 800db50:	4622      	mov	r2, r4
 800db52:	4629      	mov	r1, r5
 800db54:	4638      	mov	r0, r7
 800db56:	f7ff ff6b 	bl	800da30 <__ssputs_r>
 800db5a:	3001      	adds	r0, #1
 800db5c:	f000 80a7 	beq.w	800dcae <_svfiprintf_r+0x1c6>
 800db60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db62:	445a      	add	r2, fp
 800db64:	9209      	str	r2, [sp, #36]	@ 0x24
 800db66:	f89a 3000 	ldrb.w	r3, [sl]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	f000 809f 	beq.w	800dcae <_svfiprintf_r+0x1c6>
 800db70:	2300      	movs	r3, #0
 800db72:	f04f 32ff 	mov.w	r2, #4294967295
 800db76:	f10a 0a01 	add.w	sl, sl, #1
 800db7a:	9304      	str	r3, [sp, #16]
 800db7c:	9307      	str	r3, [sp, #28]
 800db7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db82:	931a      	str	r3, [sp, #104]	@ 0x68
 800db84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db88:	4654      	mov	r4, sl
 800db8a:	2205      	movs	r2, #5
 800db8c:	484f      	ldr	r0, [pc, #316]	@ (800dccc <_svfiprintf_r+0x1e4>)
 800db8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db92:	f7fd fbae 	bl	800b2f2 <memchr>
 800db96:	9a04      	ldr	r2, [sp, #16]
 800db98:	b9d8      	cbnz	r0, 800dbd2 <_svfiprintf_r+0xea>
 800db9a:	06d0      	lsls	r0, r2, #27
 800db9c:	bf44      	itt	mi
 800db9e:	2320      	movmi	r3, #32
 800dba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dba4:	0711      	lsls	r1, r2, #28
 800dba6:	bf44      	itt	mi
 800dba8:	232b      	movmi	r3, #43	@ 0x2b
 800dbaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbae:	f89a 3000 	ldrb.w	r3, [sl]
 800dbb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbb4:	d015      	beq.n	800dbe2 <_svfiprintf_r+0xfa>
 800dbb6:	9a07      	ldr	r2, [sp, #28]
 800dbb8:	4654      	mov	r4, sl
 800dbba:	2000      	movs	r0, #0
 800dbbc:	f04f 0c0a 	mov.w	ip, #10
 800dbc0:	4621      	mov	r1, r4
 800dbc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbc6:	3b30      	subs	r3, #48	@ 0x30
 800dbc8:	2b09      	cmp	r3, #9
 800dbca:	d94b      	bls.n	800dc64 <_svfiprintf_r+0x17c>
 800dbcc:	b1b0      	cbz	r0, 800dbfc <_svfiprintf_r+0x114>
 800dbce:	9207      	str	r2, [sp, #28]
 800dbd0:	e014      	b.n	800dbfc <_svfiprintf_r+0x114>
 800dbd2:	eba0 0308 	sub.w	r3, r0, r8
 800dbd6:	46a2      	mov	sl, r4
 800dbd8:	fa09 f303 	lsl.w	r3, r9, r3
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	9304      	str	r3, [sp, #16]
 800dbe0:	e7d2      	b.n	800db88 <_svfiprintf_r+0xa0>
 800dbe2:	9b03      	ldr	r3, [sp, #12]
 800dbe4:	1d19      	adds	r1, r3, #4
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	9103      	str	r1, [sp, #12]
 800dbec:	bfbb      	ittet	lt
 800dbee:	425b      	neglt	r3, r3
 800dbf0:	f042 0202 	orrlt.w	r2, r2, #2
 800dbf4:	9307      	strge	r3, [sp, #28]
 800dbf6:	9307      	strlt	r3, [sp, #28]
 800dbf8:	bfb8      	it	lt
 800dbfa:	9204      	strlt	r2, [sp, #16]
 800dbfc:	7823      	ldrb	r3, [r4, #0]
 800dbfe:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc00:	d10a      	bne.n	800dc18 <_svfiprintf_r+0x130>
 800dc02:	7863      	ldrb	r3, [r4, #1]
 800dc04:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc06:	d132      	bne.n	800dc6e <_svfiprintf_r+0x186>
 800dc08:	9b03      	ldr	r3, [sp, #12]
 800dc0a:	3402      	adds	r4, #2
 800dc0c:	1d1a      	adds	r2, r3, #4
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc14:	9203      	str	r2, [sp, #12]
 800dc16:	9305      	str	r3, [sp, #20]
 800dc18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dcdc <_svfiprintf_r+0x1f4>
 800dc1c:	2203      	movs	r2, #3
 800dc1e:	7821      	ldrb	r1, [r4, #0]
 800dc20:	4650      	mov	r0, sl
 800dc22:	f7fd fb66 	bl	800b2f2 <memchr>
 800dc26:	b138      	cbz	r0, 800dc38 <_svfiprintf_r+0x150>
 800dc28:	eba0 000a 	sub.w	r0, r0, sl
 800dc2c:	2240      	movs	r2, #64	@ 0x40
 800dc2e:	9b04      	ldr	r3, [sp, #16]
 800dc30:	3401      	adds	r4, #1
 800dc32:	4082      	lsls	r2, r0
 800dc34:	4313      	orrs	r3, r2
 800dc36:	9304      	str	r3, [sp, #16]
 800dc38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc3c:	2206      	movs	r2, #6
 800dc3e:	4824      	ldr	r0, [pc, #144]	@ (800dcd0 <_svfiprintf_r+0x1e8>)
 800dc40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc44:	f7fd fb55 	bl	800b2f2 <memchr>
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	d036      	beq.n	800dcba <_svfiprintf_r+0x1d2>
 800dc4c:	4b21      	ldr	r3, [pc, #132]	@ (800dcd4 <_svfiprintf_r+0x1ec>)
 800dc4e:	bb1b      	cbnz	r3, 800dc98 <_svfiprintf_r+0x1b0>
 800dc50:	9b03      	ldr	r3, [sp, #12]
 800dc52:	3307      	adds	r3, #7
 800dc54:	f023 0307 	bic.w	r3, r3, #7
 800dc58:	3308      	adds	r3, #8
 800dc5a:	9303      	str	r3, [sp, #12]
 800dc5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc5e:	4433      	add	r3, r6
 800dc60:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc62:	e76a      	b.n	800db3a <_svfiprintf_r+0x52>
 800dc64:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc68:	460c      	mov	r4, r1
 800dc6a:	2001      	movs	r0, #1
 800dc6c:	e7a8      	b.n	800dbc0 <_svfiprintf_r+0xd8>
 800dc6e:	2300      	movs	r3, #0
 800dc70:	3401      	adds	r4, #1
 800dc72:	f04f 0c0a 	mov.w	ip, #10
 800dc76:	4619      	mov	r1, r3
 800dc78:	9305      	str	r3, [sp, #20]
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc80:	3a30      	subs	r2, #48	@ 0x30
 800dc82:	2a09      	cmp	r2, #9
 800dc84:	d903      	bls.n	800dc8e <_svfiprintf_r+0x1a6>
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d0c6      	beq.n	800dc18 <_svfiprintf_r+0x130>
 800dc8a:	9105      	str	r1, [sp, #20]
 800dc8c:	e7c4      	b.n	800dc18 <_svfiprintf_r+0x130>
 800dc8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc92:	4604      	mov	r4, r0
 800dc94:	2301      	movs	r3, #1
 800dc96:	e7f0      	b.n	800dc7a <_svfiprintf_r+0x192>
 800dc98:	ab03      	add	r3, sp, #12
 800dc9a:	462a      	mov	r2, r5
 800dc9c:	a904      	add	r1, sp, #16
 800dc9e:	4638      	mov	r0, r7
 800dca0:	9300      	str	r3, [sp, #0]
 800dca2:	4b0d      	ldr	r3, [pc, #52]	@ (800dcd8 <_svfiprintf_r+0x1f0>)
 800dca4:	f7fb fcae 	bl	8009604 <_printf_float>
 800dca8:	1c42      	adds	r2, r0, #1
 800dcaa:	4606      	mov	r6, r0
 800dcac:	d1d6      	bne.n	800dc5c <_svfiprintf_r+0x174>
 800dcae:	89ab      	ldrh	r3, [r5, #12]
 800dcb0:	065b      	lsls	r3, r3, #25
 800dcb2:	f53f af2d 	bmi.w	800db10 <_svfiprintf_r+0x28>
 800dcb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcb8:	e72c      	b.n	800db14 <_svfiprintf_r+0x2c>
 800dcba:	ab03      	add	r3, sp, #12
 800dcbc:	462a      	mov	r2, r5
 800dcbe:	a904      	add	r1, sp, #16
 800dcc0:	4638      	mov	r0, r7
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	4b04      	ldr	r3, [pc, #16]	@ (800dcd8 <_svfiprintf_r+0x1f0>)
 800dcc6:	f7fb ff39 	bl	8009b3c <_printf_i>
 800dcca:	e7ed      	b.n	800dca8 <_svfiprintf_r+0x1c0>
 800dccc:	0800f786 	.word	0x0800f786
 800dcd0:	0800f790 	.word	0x0800f790
 800dcd4:	08009605 	.word	0x08009605
 800dcd8:	0800da31 	.word	0x0800da31
 800dcdc:	0800f78c 	.word	0x0800f78c

0800dce0 <_sungetc_r>:
 800dce0:	b538      	push	{r3, r4, r5, lr}
 800dce2:	1c4b      	adds	r3, r1, #1
 800dce4:	4614      	mov	r4, r2
 800dce6:	d103      	bne.n	800dcf0 <_sungetc_r+0x10>
 800dce8:	f04f 35ff 	mov.w	r5, #4294967295
 800dcec:	4628      	mov	r0, r5
 800dcee:	bd38      	pop	{r3, r4, r5, pc}
 800dcf0:	8993      	ldrh	r3, [r2, #12]
 800dcf2:	b2cd      	uxtb	r5, r1
 800dcf4:	f023 0320 	bic.w	r3, r3, #32
 800dcf8:	8193      	strh	r3, [r2, #12]
 800dcfa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dcfc:	6852      	ldr	r2, [r2, #4]
 800dcfe:	b18b      	cbz	r3, 800dd24 <_sungetc_r+0x44>
 800dd00:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800dd02:	4293      	cmp	r3, r2
 800dd04:	dd08      	ble.n	800dd18 <_sungetc_r+0x38>
 800dd06:	6823      	ldr	r3, [r4, #0]
 800dd08:	1e5a      	subs	r2, r3, #1
 800dd0a:	6022      	str	r2, [r4, #0]
 800dd0c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800dd10:	6863      	ldr	r3, [r4, #4]
 800dd12:	3301      	adds	r3, #1
 800dd14:	6063      	str	r3, [r4, #4]
 800dd16:	e7e9      	b.n	800dcec <_sungetc_r+0xc>
 800dd18:	4621      	mov	r1, r4
 800dd1a:	f000 fbf4 	bl	800e506 <__submore>
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	d0f1      	beq.n	800dd06 <_sungetc_r+0x26>
 800dd22:	e7e1      	b.n	800dce8 <_sungetc_r+0x8>
 800dd24:	6921      	ldr	r1, [r4, #16]
 800dd26:	6823      	ldr	r3, [r4, #0]
 800dd28:	b151      	cbz	r1, 800dd40 <_sungetc_r+0x60>
 800dd2a:	4299      	cmp	r1, r3
 800dd2c:	d208      	bcs.n	800dd40 <_sungetc_r+0x60>
 800dd2e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800dd32:	42a9      	cmp	r1, r5
 800dd34:	d104      	bne.n	800dd40 <_sungetc_r+0x60>
 800dd36:	3b01      	subs	r3, #1
 800dd38:	3201      	adds	r2, #1
 800dd3a:	6023      	str	r3, [r4, #0]
 800dd3c:	6062      	str	r2, [r4, #4]
 800dd3e:	e7d5      	b.n	800dcec <_sungetc_r+0xc>
 800dd40:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800dd44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd48:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd4a:	2303      	movs	r3, #3
 800dd4c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800dd4e:	4623      	mov	r3, r4
 800dd50:	f803 5f46 	strb.w	r5, [r3, #70]!
 800dd54:	6023      	str	r3, [r4, #0]
 800dd56:	2301      	movs	r3, #1
 800dd58:	e7dc      	b.n	800dd14 <_sungetc_r+0x34>

0800dd5a <__ssrefill_r>:
 800dd5a:	b510      	push	{r4, lr}
 800dd5c:	460c      	mov	r4, r1
 800dd5e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800dd60:	b169      	cbz	r1, 800dd7e <__ssrefill_r+0x24>
 800dd62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd66:	4299      	cmp	r1, r3
 800dd68:	d001      	beq.n	800dd6e <__ssrefill_r+0x14>
 800dd6a:	f7fe f95f 	bl	800c02c <_free_r>
 800dd6e:	2000      	movs	r0, #0
 800dd70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dd72:	6360      	str	r0, [r4, #52]	@ 0x34
 800dd74:	6063      	str	r3, [r4, #4]
 800dd76:	b113      	cbz	r3, 800dd7e <__ssrefill_r+0x24>
 800dd78:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dd7a:	6023      	str	r3, [r4, #0]
 800dd7c:	bd10      	pop	{r4, pc}
 800dd7e:	6923      	ldr	r3, [r4, #16]
 800dd80:	f04f 30ff 	mov.w	r0, #4294967295
 800dd84:	6023      	str	r3, [r4, #0]
 800dd86:	2300      	movs	r3, #0
 800dd88:	6063      	str	r3, [r4, #4]
 800dd8a:	89a3      	ldrh	r3, [r4, #12]
 800dd8c:	f043 0320 	orr.w	r3, r3, #32
 800dd90:	81a3      	strh	r3, [r4, #12]
 800dd92:	e7f3      	b.n	800dd7c <__ssrefill_r+0x22>

0800dd94 <__ssvfiscanf_r>:
 800dd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd98:	460c      	mov	r4, r1
 800dd9a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800dd9e:	2100      	movs	r1, #0
 800dda0:	4606      	mov	r6, r0
 800dda2:	f10d 0804 	add.w	r8, sp, #4
 800dda6:	4fa6      	ldr	r7, [pc, #664]	@ (800e040 <__ssvfiscanf_r+0x2ac>)
 800dda8:	9300      	str	r3, [sp, #0]
 800ddaa:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ddae:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800ddb2:	49a4      	ldr	r1, [pc, #656]	@ (800e044 <__ssvfiscanf_r+0x2b0>)
 800ddb4:	91a0      	str	r1, [sp, #640]	@ 0x280
 800ddb6:	49a4      	ldr	r1, [pc, #656]	@ (800e048 <__ssvfiscanf_r+0x2b4>)
 800ddb8:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ddba:	f892 9000 	ldrb.w	r9, [r2]
 800ddbe:	f1b9 0f00 	cmp.w	r9, #0
 800ddc2:	f000 8158 	beq.w	800e076 <__ssvfiscanf_r+0x2e2>
 800ddc6:	f817 3009 	ldrb.w	r3, [r7, r9]
 800ddca:	1c55      	adds	r5, r2, #1
 800ddcc:	f013 0308 	ands.w	r3, r3, #8
 800ddd0:	d019      	beq.n	800de06 <__ssvfiscanf_r+0x72>
 800ddd2:	6863      	ldr	r3, [r4, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	dd0f      	ble.n	800ddf8 <__ssvfiscanf_r+0x64>
 800ddd8:	6823      	ldr	r3, [r4, #0]
 800ddda:	781a      	ldrb	r2, [r3, #0]
 800dddc:	5cba      	ldrb	r2, [r7, r2]
 800ddde:	0712      	lsls	r2, r2, #28
 800dde0:	d401      	bmi.n	800dde6 <__ssvfiscanf_r+0x52>
 800dde2:	462a      	mov	r2, r5
 800dde4:	e7e9      	b.n	800ddba <__ssvfiscanf_r+0x26>
 800dde6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dde8:	3301      	adds	r3, #1
 800ddea:	3201      	adds	r2, #1
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	9245      	str	r2, [sp, #276]	@ 0x114
 800ddf0:	6862      	ldr	r2, [r4, #4]
 800ddf2:	3a01      	subs	r2, #1
 800ddf4:	6062      	str	r2, [r4, #4]
 800ddf6:	e7ec      	b.n	800ddd2 <__ssvfiscanf_r+0x3e>
 800ddf8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	4630      	mov	r0, r6
 800ddfe:	4798      	blx	r3
 800de00:	2800      	cmp	r0, #0
 800de02:	d0e9      	beq.n	800ddd8 <__ssvfiscanf_r+0x44>
 800de04:	e7ed      	b.n	800dde2 <__ssvfiscanf_r+0x4e>
 800de06:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800de0a:	f040 8086 	bne.w	800df1a <__ssvfiscanf_r+0x186>
 800de0e:	9341      	str	r3, [sp, #260]	@ 0x104
 800de10:	9343      	str	r3, [sp, #268]	@ 0x10c
 800de12:	7853      	ldrb	r3, [r2, #1]
 800de14:	2b2a      	cmp	r3, #42	@ 0x2a
 800de16:	bf04      	itt	eq
 800de18:	2310      	moveq	r3, #16
 800de1a:	1c95      	addeq	r5, r2, #2
 800de1c:	f04f 020a 	mov.w	r2, #10
 800de20:	bf08      	it	eq
 800de22:	9341      	streq	r3, [sp, #260]	@ 0x104
 800de24:	46aa      	mov	sl, r5
 800de26:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800de2a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800de2e:	2b09      	cmp	r3, #9
 800de30:	d91e      	bls.n	800de70 <__ssvfiscanf_r+0xdc>
 800de32:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800e04c <__ssvfiscanf_r+0x2b8>
 800de36:	2203      	movs	r2, #3
 800de38:	4658      	mov	r0, fp
 800de3a:	f7fd fa5a 	bl	800b2f2 <memchr>
 800de3e:	b138      	cbz	r0, 800de50 <__ssvfiscanf_r+0xbc>
 800de40:	eba0 000b 	sub.w	r0, r0, fp
 800de44:	2301      	movs	r3, #1
 800de46:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800de48:	4655      	mov	r5, sl
 800de4a:	4083      	lsls	r3, r0
 800de4c:	4313      	orrs	r3, r2
 800de4e:	9341      	str	r3, [sp, #260]	@ 0x104
 800de50:	f815 3b01 	ldrb.w	r3, [r5], #1
 800de54:	2b78      	cmp	r3, #120	@ 0x78
 800de56:	d806      	bhi.n	800de66 <__ssvfiscanf_r+0xd2>
 800de58:	2b57      	cmp	r3, #87	@ 0x57
 800de5a:	d810      	bhi.n	800de7e <__ssvfiscanf_r+0xea>
 800de5c:	2b25      	cmp	r3, #37	@ 0x25
 800de5e:	d05c      	beq.n	800df1a <__ssvfiscanf_r+0x186>
 800de60:	d856      	bhi.n	800df10 <__ssvfiscanf_r+0x17c>
 800de62:	2b00      	cmp	r3, #0
 800de64:	d074      	beq.n	800df50 <__ssvfiscanf_r+0x1bc>
 800de66:	2303      	movs	r3, #3
 800de68:	9347      	str	r3, [sp, #284]	@ 0x11c
 800de6a:	230a      	movs	r3, #10
 800de6c:	9342      	str	r3, [sp, #264]	@ 0x108
 800de6e:	e087      	b.n	800df80 <__ssvfiscanf_r+0x1ec>
 800de70:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800de72:	4655      	mov	r5, sl
 800de74:	fb02 1103 	mla	r1, r2, r3, r1
 800de78:	3930      	subs	r1, #48	@ 0x30
 800de7a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800de7c:	e7d2      	b.n	800de24 <__ssvfiscanf_r+0x90>
 800de7e:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800de82:	2a20      	cmp	r2, #32
 800de84:	d8ef      	bhi.n	800de66 <__ssvfiscanf_r+0xd2>
 800de86:	a101      	add	r1, pc, #4	@ (adr r1, 800de8c <__ssvfiscanf_r+0xf8>)
 800de88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800de8c:	0800df5f 	.word	0x0800df5f
 800de90:	0800de67 	.word	0x0800de67
 800de94:	0800de67 	.word	0x0800de67
 800de98:	0800dfb9 	.word	0x0800dfb9
 800de9c:	0800de67 	.word	0x0800de67
 800dea0:	0800de67 	.word	0x0800de67
 800dea4:	0800de67 	.word	0x0800de67
 800dea8:	0800de67 	.word	0x0800de67
 800deac:	0800de67 	.word	0x0800de67
 800deb0:	0800de67 	.word	0x0800de67
 800deb4:	0800de67 	.word	0x0800de67
 800deb8:	0800dfcf 	.word	0x0800dfcf
 800debc:	0800dfb5 	.word	0x0800dfb5
 800dec0:	0800df17 	.word	0x0800df17
 800dec4:	0800df17 	.word	0x0800df17
 800dec8:	0800df17 	.word	0x0800df17
 800decc:	0800de67 	.word	0x0800de67
 800ded0:	0800df71 	.word	0x0800df71
 800ded4:	0800de67 	.word	0x0800de67
 800ded8:	0800de67 	.word	0x0800de67
 800dedc:	0800de67 	.word	0x0800de67
 800dee0:	0800de67 	.word	0x0800de67
 800dee4:	0800dfdf 	.word	0x0800dfdf
 800dee8:	0800df79 	.word	0x0800df79
 800deec:	0800df57 	.word	0x0800df57
 800def0:	0800de67 	.word	0x0800de67
 800def4:	0800de67 	.word	0x0800de67
 800def8:	0800dfdb 	.word	0x0800dfdb
 800defc:	0800de67 	.word	0x0800de67
 800df00:	0800dfb5 	.word	0x0800dfb5
 800df04:	0800de67 	.word	0x0800de67
 800df08:	0800de67 	.word	0x0800de67
 800df0c:	0800df5f 	.word	0x0800df5f
 800df10:	3b45      	subs	r3, #69	@ 0x45
 800df12:	2b02      	cmp	r3, #2
 800df14:	d8a7      	bhi.n	800de66 <__ssvfiscanf_r+0xd2>
 800df16:	2305      	movs	r3, #5
 800df18:	e031      	b.n	800df7e <__ssvfiscanf_r+0x1ea>
 800df1a:	6863      	ldr	r3, [r4, #4]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	dd0d      	ble.n	800df3c <__ssvfiscanf_r+0x1a8>
 800df20:	6823      	ldr	r3, [r4, #0]
 800df22:	781a      	ldrb	r2, [r3, #0]
 800df24:	454a      	cmp	r2, r9
 800df26:	f040 80a6 	bne.w	800e076 <__ssvfiscanf_r+0x2e2>
 800df2a:	3301      	adds	r3, #1
 800df2c:	6862      	ldr	r2, [r4, #4]
 800df2e:	6023      	str	r3, [r4, #0]
 800df30:	3a01      	subs	r2, #1
 800df32:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800df34:	6062      	str	r2, [r4, #4]
 800df36:	3301      	adds	r3, #1
 800df38:	9345      	str	r3, [sp, #276]	@ 0x114
 800df3a:	e752      	b.n	800dde2 <__ssvfiscanf_r+0x4e>
 800df3c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800df3e:	4621      	mov	r1, r4
 800df40:	4630      	mov	r0, r6
 800df42:	4798      	blx	r3
 800df44:	2800      	cmp	r0, #0
 800df46:	d0eb      	beq.n	800df20 <__ssvfiscanf_r+0x18c>
 800df48:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800df4a:	2800      	cmp	r0, #0
 800df4c:	f040 808b 	bne.w	800e066 <__ssvfiscanf_r+0x2d2>
 800df50:	f04f 30ff 	mov.w	r0, #4294967295
 800df54:	e08b      	b.n	800e06e <__ssvfiscanf_r+0x2da>
 800df56:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800df58:	f042 0220 	orr.w	r2, r2, #32
 800df5c:	9241      	str	r2, [sp, #260]	@ 0x104
 800df5e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800df60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800df64:	9241      	str	r2, [sp, #260]	@ 0x104
 800df66:	2210      	movs	r2, #16
 800df68:	2b6e      	cmp	r3, #110	@ 0x6e
 800df6a:	9242      	str	r2, [sp, #264]	@ 0x108
 800df6c:	d902      	bls.n	800df74 <__ssvfiscanf_r+0x1e0>
 800df6e:	e005      	b.n	800df7c <__ssvfiscanf_r+0x1e8>
 800df70:	2300      	movs	r3, #0
 800df72:	9342      	str	r3, [sp, #264]	@ 0x108
 800df74:	2303      	movs	r3, #3
 800df76:	e002      	b.n	800df7e <__ssvfiscanf_r+0x1ea>
 800df78:	2308      	movs	r3, #8
 800df7a:	9342      	str	r3, [sp, #264]	@ 0x108
 800df7c:	2304      	movs	r3, #4
 800df7e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800df80:	6863      	ldr	r3, [r4, #4]
 800df82:	2b00      	cmp	r3, #0
 800df84:	dd3a      	ble.n	800dffc <__ssvfiscanf_r+0x268>
 800df86:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800df88:	0659      	lsls	r1, r3, #25
 800df8a:	d404      	bmi.n	800df96 <__ssvfiscanf_r+0x202>
 800df8c:	6823      	ldr	r3, [r4, #0]
 800df8e:	781a      	ldrb	r2, [r3, #0]
 800df90:	5cba      	ldrb	r2, [r7, r2]
 800df92:	0712      	lsls	r2, r2, #28
 800df94:	d439      	bmi.n	800e00a <__ssvfiscanf_r+0x276>
 800df96:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800df98:	2b02      	cmp	r3, #2
 800df9a:	dc48      	bgt.n	800e02e <__ssvfiscanf_r+0x29a>
 800df9c:	466b      	mov	r3, sp
 800df9e:	4622      	mov	r2, r4
 800dfa0:	a941      	add	r1, sp, #260	@ 0x104
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	f000 f86c 	bl	800e080 <_scanf_chars>
 800dfa8:	2801      	cmp	r0, #1
 800dfaa:	d064      	beq.n	800e076 <__ssvfiscanf_r+0x2e2>
 800dfac:	2802      	cmp	r0, #2
 800dfae:	f47f af18 	bne.w	800dde2 <__ssvfiscanf_r+0x4e>
 800dfb2:	e7c9      	b.n	800df48 <__ssvfiscanf_r+0x1b4>
 800dfb4:	220a      	movs	r2, #10
 800dfb6:	e7d7      	b.n	800df68 <__ssvfiscanf_r+0x1d4>
 800dfb8:	4629      	mov	r1, r5
 800dfba:	4640      	mov	r0, r8
 800dfbc:	f000 fa6a 	bl	800e494 <__sccl>
 800dfc0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dfc2:	4605      	mov	r5, r0
 800dfc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfc8:	9341      	str	r3, [sp, #260]	@ 0x104
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e7d7      	b.n	800df7e <__ssvfiscanf_r+0x1ea>
 800dfce:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dfd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfd4:	9341      	str	r3, [sp, #260]	@ 0x104
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	e7d1      	b.n	800df7e <__ssvfiscanf_r+0x1ea>
 800dfda:	2302      	movs	r3, #2
 800dfdc:	e7cf      	b.n	800df7e <__ssvfiscanf_r+0x1ea>
 800dfde:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800dfe0:	06c3      	lsls	r3, r0, #27
 800dfe2:	f53f aefe 	bmi.w	800dde2 <__ssvfiscanf_r+0x4e>
 800dfe6:	9b00      	ldr	r3, [sp, #0]
 800dfe8:	07c0      	lsls	r0, r0, #31
 800dfea:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dfec:	f103 0104 	add.w	r1, r3, #4
 800dff0:	9100      	str	r1, [sp, #0]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	bf4c      	ite	mi
 800dff6:	801a      	strhmi	r2, [r3, #0]
 800dff8:	601a      	strpl	r2, [r3, #0]
 800dffa:	e6f2      	b.n	800dde2 <__ssvfiscanf_r+0x4e>
 800dffc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dffe:	4621      	mov	r1, r4
 800e000:	4630      	mov	r0, r6
 800e002:	4798      	blx	r3
 800e004:	2800      	cmp	r0, #0
 800e006:	d0be      	beq.n	800df86 <__ssvfiscanf_r+0x1f2>
 800e008:	e79e      	b.n	800df48 <__ssvfiscanf_r+0x1b4>
 800e00a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e00c:	3201      	adds	r2, #1
 800e00e:	9245      	str	r2, [sp, #276]	@ 0x114
 800e010:	6862      	ldr	r2, [r4, #4]
 800e012:	3a01      	subs	r2, #1
 800e014:	2a00      	cmp	r2, #0
 800e016:	6062      	str	r2, [r4, #4]
 800e018:	dd02      	ble.n	800e020 <__ssvfiscanf_r+0x28c>
 800e01a:	3301      	adds	r3, #1
 800e01c:	6023      	str	r3, [r4, #0]
 800e01e:	e7b5      	b.n	800df8c <__ssvfiscanf_r+0x1f8>
 800e020:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e022:	4621      	mov	r1, r4
 800e024:	4630      	mov	r0, r6
 800e026:	4798      	blx	r3
 800e028:	2800      	cmp	r0, #0
 800e02a:	d0af      	beq.n	800df8c <__ssvfiscanf_r+0x1f8>
 800e02c:	e78c      	b.n	800df48 <__ssvfiscanf_r+0x1b4>
 800e02e:	2b04      	cmp	r3, #4
 800e030:	dc0e      	bgt.n	800e050 <__ssvfiscanf_r+0x2bc>
 800e032:	466b      	mov	r3, sp
 800e034:	4622      	mov	r2, r4
 800e036:	a941      	add	r1, sp, #260	@ 0x104
 800e038:	4630      	mov	r0, r6
 800e03a:	f000 f87b 	bl	800e134 <_scanf_i>
 800e03e:	e7b3      	b.n	800dfa8 <__ssvfiscanf_r+0x214>
 800e040:	0800fa29 	.word	0x0800fa29
 800e044:	0800dce1 	.word	0x0800dce1
 800e048:	0800dd5b 	.word	0x0800dd5b
 800e04c:	0800f78c 	.word	0x0800f78c
 800e050:	4b0a      	ldr	r3, [pc, #40]	@ (800e07c <__ssvfiscanf_r+0x2e8>)
 800e052:	2b00      	cmp	r3, #0
 800e054:	f43f aec5 	beq.w	800dde2 <__ssvfiscanf_r+0x4e>
 800e058:	466b      	mov	r3, sp
 800e05a:	4622      	mov	r2, r4
 800e05c:	a941      	add	r1, sp, #260	@ 0x104
 800e05e:	4630      	mov	r0, r6
 800e060:	f7fb fe8a 	bl	8009d78 <_scanf_float>
 800e064:	e7a0      	b.n	800dfa8 <__ssvfiscanf_r+0x214>
 800e066:	89a3      	ldrh	r3, [r4, #12]
 800e068:	065b      	lsls	r3, r3, #25
 800e06a:	f53f af71 	bmi.w	800df50 <__ssvfiscanf_r+0x1bc>
 800e06e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800e072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e076:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e078:	e7f9      	b.n	800e06e <__ssvfiscanf_r+0x2da>
 800e07a:	bf00      	nop
 800e07c:	08009d79 	.word	0x08009d79

0800e080 <_scanf_chars>:
 800e080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e084:	4615      	mov	r5, r2
 800e086:	688a      	ldr	r2, [r1, #8]
 800e088:	4680      	mov	r8, r0
 800e08a:	460c      	mov	r4, r1
 800e08c:	b932      	cbnz	r2, 800e09c <_scanf_chars+0x1c>
 800e08e:	698a      	ldr	r2, [r1, #24]
 800e090:	2a00      	cmp	r2, #0
 800e092:	bf14      	ite	ne
 800e094:	f04f 32ff 	movne.w	r2, #4294967295
 800e098:	2201      	moveq	r2, #1
 800e09a:	608a      	str	r2, [r1, #8]
 800e09c:	6822      	ldr	r2, [r4, #0]
 800e09e:	2700      	movs	r7, #0
 800e0a0:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800e130 <_scanf_chars+0xb0>
 800e0a4:	06d1      	lsls	r1, r2, #27
 800e0a6:	bf5f      	itttt	pl
 800e0a8:	681a      	ldrpl	r2, [r3, #0]
 800e0aa:	1d11      	addpl	r1, r2, #4
 800e0ac:	6019      	strpl	r1, [r3, #0]
 800e0ae:	6816      	ldrpl	r6, [r2, #0]
 800e0b0:	69a0      	ldr	r0, [r4, #24]
 800e0b2:	b188      	cbz	r0, 800e0d8 <_scanf_chars+0x58>
 800e0b4:	2801      	cmp	r0, #1
 800e0b6:	d107      	bne.n	800e0c8 <_scanf_chars+0x48>
 800e0b8:	682b      	ldr	r3, [r5, #0]
 800e0ba:	781a      	ldrb	r2, [r3, #0]
 800e0bc:	6963      	ldr	r3, [r4, #20]
 800e0be:	5c9b      	ldrb	r3, [r3, r2]
 800e0c0:	b953      	cbnz	r3, 800e0d8 <_scanf_chars+0x58>
 800e0c2:	2f00      	cmp	r7, #0
 800e0c4:	d031      	beq.n	800e12a <_scanf_chars+0xaa>
 800e0c6:	e022      	b.n	800e10e <_scanf_chars+0x8e>
 800e0c8:	2802      	cmp	r0, #2
 800e0ca:	d120      	bne.n	800e10e <_scanf_chars+0x8e>
 800e0cc:	682b      	ldr	r3, [r5, #0]
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e0d4:	071b      	lsls	r3, r3, #28
 800e0d6:	d41a      	bmi.n	800e10e <_scanf_chars+0x8e>
 800e0d8:	6823      	ldr	r3, [r4, #0]
 800e0da:	3701      	adds	r7, #1
 800e0dc:	06da      	lsls	r2, r3, #27
 800e0de:	bf5e      	ittt	pl
 800e0e0:	682b      	ldrpl	r3, [r5, #0]
 800e0e2:	781b      	ldrbpl	r3, [r3, #0]
 800e0e4:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e0e8:	682a      	ldr	r2, [r5, #0]
 800e0ea:	686b      	ldr	r3, [r5, #4]
 800e0ec:	3201      	adds	r2, #1
 800e0ee:	3b01      	subs	r3, #1
 800e0f0:	602a      	str	r2, [r5, #0]
 800e0f2:	68a2      	ldr	r2, [r4, #8]
 800e0f4:	606b      	str	r3, [r5, #4]
 800e0f6:	3a01      	subs	r2, #1
 800e0f8:	60a2      	str	r2, [r4, #8]
 800e0fa:	b142      	cbz	r2, 800e10e <_scanf_chars+0x8e>
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	dcd7      	bgt.n	800e0b0 <_scanf_chars+0x30>
 800e100:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e104:	4629      	mov	r1, r5
 800e106:	4640      	mov	r0, r8
 800e108:	4798      	blx	r3
 800e10a:	2800      	cmp	r0, #0
 800e10c:	d0d0      	beq.n	800e0b0 <_scanf_chars+0x30>
 800e10e:	6823      	ldr	r3, [r4, #0]
 800e110:	f013 0310 	ands.w	r3, r3, #16
 800e114:	d105      	bne.n	800e122 <_scanf_chars+0xa2>
 800e116:	68e2      	ldr	r2, [r4, #12]
 800e118:	3201      	adds	r2, #1
 800e11a:	60e2      	str	r2, [r4, #12]
 800e11c:	69a2      	ldr	r2, [r4, #24]
 800e11e:	b102      	cbz	r2, 800e122 <_scanf_chars+0xa2>
 800e120:	7033      	strb	r3, [r6, #0]
 800e122:	6923      	ldr	r3, [r4, #16]
 800e124:	2000      	movs	r0, #0
 800e126:	443b      	add	r3, r7
 800e128:	6123      	str	r3, [r4, #16]
 800e12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e12e:	bf00      	nop
 800e130:	0800fa29 	.word	0x0800fa29

0800e134 <_scanf_i>:
 800e134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e138:	4698      	mov	r8, r3
 800e13a:	b087      	sub	sp, #28
 800e13c:	4b72      	ldr	r3, [pc, #456]	@ (800e308 <_scanf_i+0x1d4>)
 800e13e:	460c      	mov	r4, r1
 800e140:	4682      	mov	sl, r0
 800e142:	4616      	mov	r6, r2
 800e144:	4627      	mov	r7, r4
 800e146:	f04f 0b00 	mov.w	fp, #0
 800e14a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e14e:	ab03      	add	r3, sp, #12
 800e150:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e154:	4b6d      	ldr	r3, [pc, #436]	@ (800e30c <_scanf_i+0x1d8>)
 800e156:	69a1      	ldr	r1, [r4, #24]
 800e158:	4a6d      	ldr	r2, [pc, #436]	@ (800e310 <_scanf_i+0x1dc>)
 800e15a:	2903      	cmp	r1, #3
 800e15c:	bf08      	it	eq
 800e15e:	461a      	moveq	r2, r3
 800e160:	68a3      	ldr	r3, [r4, #8]
 800e162:	9201      	str	r2, [sp, #4]
 800e164:	1e5a      	subs	r2, r3, #1
 800e166:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e16a:	bf89      	itett	hi
 800e16c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e170:	f04f 0900 	movls.w	r9, #0
 800e174:	eb03 0905 	addhi.w	r9, r3, r5
 800e178:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e17c:	bf88      	it	hi
 800e17e:	60a3      	strhi	r3, [r4, #8]
 800e180:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e184:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e188:	463d      	mov	r5, r7
 800e18a:	6023      	str	r3, [r4, #0]
 800e18c:	6831      	ldr	r1, [r6, #0]
 800e18e:	ab03      	add	r3, sp, #12
 800e190:	2202      	movs	r2, #2
 800e192:	7809      	ldrb	r1, [r1, #0]
 800e194:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e198:	f7fd f8ab 	bl	800b2f2 <memchr>
 800e19c:	b328      	cbz	r0, 800e1ea <_scanf_i+0xb6>
 800e19e:	f1bb 0f01 	cmp.w	fp, #1
 800e1a2:	d159      	bne.n	800e258 <_scanf_i+0x124>
 800e1a4:	6862      	ldr	r2, [r4, #4]
 800e1a6:	b92a      	cbnz	r2, 800e1b4 <_scanf_i+0x80>
 800e1a8:	6822      	ldr	r2, [r4, #0]
 800e1aa:	2108      	movs	r1, #8
 800e1ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e1b0:	6061      	str	r1, [r4, #4]
 800e1b2:	6022      	str	r2, [r4, #0]
 800e1b4:	6822      	ldr	r2, [r4, #0]
 800e1b6:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e1ba:	6022      	str	r2, [r4, #0]
 800e1bc:	68a2      	ldr	r2, [r4, #8]
 800e1be:	1e51      	subs	r1, r2, #1
 800e1c0:	60a1      	str	r1, [r4, #8]
 800e1c2:	b192      	cbz	r2, 800e1ea <_scanf_i+0xb6>
 800e1c4:	6832      	ldr	r2, [r6, #0]
 800e1c6:	1c51      	adds	r1, r2, #1
 800e1c8:	6031      	str	r1, [r6, #0]
 800e1ca:	7812      	ldrb	r2, [r2, #0]
 800e1cc:	f805 2b01 	strb.w	r2, [r5], #1
 800e1d0:	6872      	ldr	r2, [r6, #4]
 800e1d2:	3a01      	subs	r2, #1
 800e1d4:	2a00      	cmp	r2, #0
 800e1d6:	6072      	str	r2, [r6, #4]
 800e1d8:	dc07      	bgt.n	800e1ea <_scanf_i+0xb6>
 800e1da:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e1de:	4631      	mov	r1, r6
 800e1e0:	4650      	mov	r0, sl
 800e1e2:	4790      	blx	r2
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	f040 8085 	bne.w	800e2f4 <_scanf_i+0x1c0>
 800e1ea:	f10b 0b01 	add.w	fp, fp, #1
 800e1ee:	f1bb 0f03 	cmp.w	fp, #3
 800e1f2:	d1cb      	bne.n	800e18c <_scanf_i+0x58>
 800e1f4:	6863      	ldr	r3, [r4, #4]
 800e1f6:	b90b      	cbnz	r3, 800e1fc <_scanf_i+0xc8>
 800e1f8:	230a      	movs	r3, #10
 800e1fa:	6063      	str	r3, [r4, #4]
 800e1fc:	6863      	ldr	r3, [r4, #4]
 800e1fe:	f04f 0b00 	mov.w	fp, #0
 800e202:	4944      	ldr	r1, [pc, #272]	@ (800e314 <_scanf_i+0x1e0>)
 800e204:	6960      	ldr	r0, [r4, #20]
 800e206:	1ac9      	subs	r1, r1, r3
 800e208:	f000 f944 	bl	800e494 <__sccl>
 800e20c:	68a3      	ldr	r3, [r4, #8]
 800e20e:	6822      	ldr	r2, [r4, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d03d      	beq.n	800e290 <_scanf_i+0x15c>
 800e214:	6831      	ldr	r1, [r6, #0]
 800e216:	6960      	ldr	r0, [r4, #20]
 800e218:	f891 c000 	ldrb.w	ip, [r1]
 800e21c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e220:	2800      	cmp	r0, #0
 800e222:	d035      	beq.n	800e290 <_scanf_i+0x15c>
 800e224:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e228:	d124      	bne.n	800e274 <_scanf_i+0x140>
 800e22a:	0510      	lsls	r0, r2, #20
 800e22c:	d522      	bpl.n	800e274 <_scanf_i+0x140>
 800e22e:	f10b 0b01 	add.w	fp, fp, #1
 800e232:	f1b9 0f00 	cmp.w	r9, #0
 800e236:	d003      	beq.n	800e240 <_scanf_i+0x10c>
 800e238:	3301      	adds	r3, #1
 800e23a:	f109 39ff 	add.w	r9, r9, #4294967295
 800e23e:	60a3      	str	r3, [r4, #8]
 800e240:	6873      	ldr	r3, [r6, #4]
 800e242:	3b01      	subs	r3, #1
 800e244:	2b00      	cmp	r3, #0
 800e246:	6073      	str	r3, [r6, #4]
 800e248:	dd1b      	ble.n	800e282 <_scanf_i+0x14e>
 800e24a:	6833      	ldr	r3, [r6, #0]
 800e24c:	3301      	adds	r3, #1
 800e24e:	6033      	str	r3, [r6, #0]
 800e250:	68a3      	ldr	r3, [r4, #8]
 800e252:	3b01      	subs	r3, #1
 800e254:	60a3      	str	r3, [r4, #8]
 800e256:	e7d9      	b.n	800e20c <_scanf_i+0xd8>
 800e258:	f1bb 0f02 	cmp.w	fp, #2
 800e25c:	d1ae      	bne.n	800e1bc <_scanf_i+0x88>
 800e25e:	6822      	ldr	r2, [r4, #0]
 800e260:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e264:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e268:	d1c4      	bne.n	800e1f4 <_scanf_i+0xc0>
 800e26a:	2110      	movs	r1, #16
 800e26c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e270:	6061      	str	r1, [r4, #4]
 800e272:	e7a2      	b.n	800e1ba <_scanf_i+0x86>
 800e274:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e278:	6022      	str	r2, [r4, #0]
 800e27a:	780b      	ldrb	r3, [r1, #0]
 800e27c:	f805 3b01 	strb.w	r3, [r5], #1
 800e280:	e7de      	b.n	800e240 <_scanf_i+0x10c>
 800e282:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e286:	4631      	mov	r1, r6
 800e288:	4650      	mov	r0, sl
 800e28a:	4798      	blx	r3
 800e28c:	2800      	cmp	r0, #0
 800e28e:	d0df      	beq.n	800e250 <_scanf_i+0x11c>
 800e290:	6823      	ldr	r3, [r4, #0]
 800e292:	05d9      	lsls	r1, r3, #23
 800e294:	d50d      	bpl.n	800e2b2 <_scanf_i+0x17e>
 800e296:	42bd      	cmp	r5, r7
 800e298:	d909      	bls.n	800e2ae <_scanf_i+0x17a>
 800e29a:	f105 39ff 	add.w	r9, r5, #4294967295
 800e29e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e2a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e2a6:	4632      	mov	r2, r6
 800e2a8:	464d      	mov	r5, r9
 800e2aa:	4650      	mov	r0, sl
 800e2ac:	4798      	blx	r3
 800e2ae:	42bd      	cmp	r5, r7
 800e2b0:	d028      	beq.n	800e304 <_scanf_i+0x1d0>
 800e2b2:	6822      	ldr	r2, [r4, #0]
 800e2b4:	f012 0210 	ands.w	r2, r2, #16
 800e2b8:	d113      	bne.n	800e2e2 <_scanf_i+0x1ae>
 800e2ba:	702a      	strb	r2, [r5, #0]
 800e2bc:	4639      	mov	r1, r7
 800e2be:	6863      	ldr	r3, [r4, #4]
 800e2c0:	4650      	mov	r0, sl
 800e2c2:	9e01      	ldr	r6, [sp, #4]
 800e2c4:	47b0      	blx	r6
 800e2c6:	f8d8 3000 	ldr.w	r3, [r8]
 800e2ca:	6821      	ldr	r1, [r4, #0]
 800e2cc:	1d1a      	adds	r2, r3, #4
 800e2ce:	f011 0f20 	tst.w	r1, #32
 800e2d2:	f8c8 2000 	str.w	r2, [r8]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	d00f      	beq.n	800e2fa <_scanf_i+0x1c6>
 800e2da:	6018      	str	r0, [r3, #0]
 800e2dc:	68e3      	ldr	r3, [r4, #12]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	60e3      	str	r3, [r4, #12]
 800e2e2:	1bed      	subs	r5, r5, r7
 800e2e4:	6923      	ldr	r3, [r4, #16]
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	445d      	add	r5, fp
 800e2ea:	442b      	add	r3, r5
 800e2ec:	6123      	str	r3, [r4, #16]
 800e2ee:	b007      	add	sp, #28
 800e2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f4:	f04f 0b00 	mov.w	fp, #0
 800e2f8:	e7ca      	b.n	800e290 <_scanf_i+0x15c>
 800e2fa:	07ca      	lsls	r2, r1, #31
 800e2fc:	bf4c      	ite	mi
 800e2fe:	8018      	strhmi	r0, [r3, #0]
 800e300:	6018      	strpl	r0, [r3, #0]
 800e302:	e7eb      	b.n	800e2dc <_scanf_i+0x1a8>
 800e304:	2001      	movs	r0, #1
 800e306:	e7f2      	b.n	800e2ee <_scanf_i+0x1ba>
 800e308:	0800f4f8 	.word	0x0800f4f8
 800e30c:	0800d939 	.word	0x0800d939
 800e310:	0800da19 	.word	0x0800da19
 800e314:	0800f7a7 	.word	0x0800f7a7

0800e318 <__sflush_r>:
 800e318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e320:	0716      	lsls	r6, r2, #28
 800e322:	4605      	mov	r5, r0
 800e324:	460c      	mov	r4, r1
 800e326:	d454      	bmi.n	800e3d2 <__sflush_r+0xba>
 800e328:	684b      	ldr	r3, [r1, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	dc02      	bgt.n	800e334 <__sflush_r+0x1c>
 800e32e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e330:	2b00      	cmp	r3, #0
 800e332:	dd48      	ble.n	800e3c6 <__sflush_r+0xae>
 800e334:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e336:	2e00      	cmp	r6, #0
 800e338:	d045      	beq.n	800e3c6 <__sflush_r+0xae>
 800e33a:	2300      	movs	r3, #0
 800e33c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e340:	682f      	ldr	r7, [r5, #0]
 800e342:	6a21      	ldr	r1, [r4, #32]
 800e344:	602b      	str	r3, [r5, #0]
 800e346:	d030      	beq.n	800e3aa <__sflush_r+0x92>
 800e348:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e34a:	89a3      	ldrh	r3, [r4, #12]
 800e34c:	0759      	lsls	r1, r3, #29
 800e34e:	d505      	bpl.n	800e35c <__sflush_r+0x44>
 800e350:	6863      	ldr	r3, [r4, #4]
 800e352:	1ad2      	subs	r2, r2, r3
 800e354:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e356:	b10b      	cbz	r3, 800e35c <__sflush_r+0x44>
 800e358:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e35a:	1ad2      	subs	r2, r2, r3
 800e35c:	2300      	movs	r3, #0
 800e35e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e360:	6a21      	ldr	r1, [r4, #32]
 800e362:	4628      	mov	r0, r5
 800e364:	47b0      	blx	r6
 800e366:	1c43      	adds	r3, r0, #1
 800e368:	89a3      	ldrh	r3, [r4, #12]
 800e36a:	d106      	bne.n	800e37a <__sflush_r+0x62>
 800e36c:	6829      	ldr	r1, [r5, #0]
 800e36e:	291d      	cmp	r1, #29
 800e370:	d82b      	bhi.n	800e3ca <__sflush_r+0xb2>
 800e372:	4a2a      	ldr	r2, [pc, #168]	@ (800e41c <__sflush_r+0x104>)
 800e374:	40ca      	lsrs	r2, r1
 800e376:	07d6      	lsls	r6, r2, #31
 800e378:	d527      	bpl.n	800e3ca <__sflush_r+0xb2>
 800e37a:	2200      	movs	r2, #0
 800e37c:	04d9      	lsls	r1, r3, #19
 800e37e:	6062      	str	r2, [r4, #4]
 800e380:	6922      	ldr	r2, [r4, #16]
 800e382:	6022      	str	r2, [r4, #0]
 800e384:	d504      	bpl.n	800e390 <__sflush_r+0x78>
 800e386:	1c42      	adds	r2, r0, #1
 800e388:	d101      	bne.n	800e38e <__sflush_r+0x76>
 800e38a:	682b      	ldr	r3, [r5, #0]
 800e38c:	b903      	cbnz	r3, 800e390 <__sflush_r+0x78>
 800e38e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e390:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e392:	602f      	str	r7, [r5, #0]
 800e394:	b1b9      	cbz	r1, 800e3c6 <__sflush_r+0xae>
 800e396:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e39a:	4299      	cmp	r1, r3
 800e39c:	d002      	beq.n	800e3a4 <__sflush_r+0x8c>
 800e39e:	4628      	mov	r0, r5
 800e3a0:	f7fd fe44 	bl	800c02c <_free_r>
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3a8:	e00d      	b.n	800e3c6 <__sflush_r+0xae>
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	47b0      	blx	r6
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	1c50      	adds	r0, r2, #1
 800e3b4:	d1c9      	bne.n	800e34a <__sflush_r+0x32>
 800e3b6:	682b      	ldr	r3, [r5, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d0c6      	beq.n	800e34a <__sflush_r+0x32>
 800e3bc:	2b1d      	cmp	r3, #29
 800e3be:	d001      	beq.n	800e3c4 <__sflush_r+0xac>
 800e3c0:	2b16      	cmp	r3, #22
 800e3c2:	d11d      	bne.n	800e400 <__sflush_r+0xe8>
 800e3c4:	602f      	str	r7, [r5, #0]
 800e3c6:	2000      	movs	r0, #0
 800e3c8:	e021      	b.n	800e40e <__sflush_r+0xf6>
 800e3ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3ce:	b21b      	sxth	r3, r3
 800e3d0:	e01a      	b.n	800e408 <__sflush_r+0xf0>
 800e3d2:	690f      	ldr	r7, [r1, #16]
 800e3d4:	2f00      	cmp	r7, #0
 800e3d6:	d0f6      	beq.n	800e3c6 <__sflush_r+0xae>
 800e3d8:	0793      	lsls	r3, r2, #30
 800e3da:	680e      	ldr	r6, [r1, #0]
 800e3dc:	600f      	str	r7, [r1, #0]
 800e3de:	bf0c      	ite	eq
 800e3e0:	694b      	ldreq	r3, [r1, #20]
 800e3e2:	2300      	movne	r3, #0
 800e3e4:	eba6 0807 	sub.w	r8, r6, r7
 800e3e8:	608b      	str	r3, [r1, #8]
 800e3ea:	f1b8 0f00 	cmp.w	r8, #0
 800e3ee:	ddea      	ble.n	800e3c6 <__sflush_r+0xae>
 800e3f0:	4643      	mov	r3, r8
 800e3f2:	463a      	mov	r2, r7
 800e3f4:	6a21      	ldr	r1, [r4, #32]
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e3fa:	47b0      	blx	r6
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	dc08      	bgt.n	800e412 <__sflush_r+0xfa>
 800e400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e408:	f04f 30ff 	mov.w	r0, #4294967295
 800e40c:	81a3      	strh	r3, [r4, #12]
 800e40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e412:	4407      	add	r7, r0
 800e414:	eba8 0800 	sub.w	r8, r8, r0
 800e418:	e7e7      	b.n	800e3ea <__sflush_r+0xd2>
 800e41a:	bf00      	nop
 800e41c:	20400001 	.word	0x20400001

0800e420 <_fflush_r>:
 800e420:	b538      	push	{r3, r4, r5, lr}
 800e422:	690b      	ldr	r3, [r1, #16]
 800e424:	4605      	mov	r5, r0
 800e426:	460c      	mov	r4, r1
 800e428:	b913      	cbnz	r3, 800e430 <_fflush_r+0x10>
 800e42a:	2500      	movs	r5, #0
 800e42c:	4628      	mov	r0, r5
 800e42e:	bd38      	pop	{r3, r4, r5, pc}
 800e430:	b118      	cbz	r0, 800e43a <_fflush_r+0x1a>
 800e432:	6a03      	ldr	r3, [r0, #32]
 800e434:	b90b      	cbnz	r3, 800e43a <_fflush_r+0x1a>
 800e436:	f7fb ff39 	bl	800a2ac <__sinit>
 800e43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d0f3      	beq.n	800e42a <_fflush_r+0xa>
 800e442:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e444:	07d0      	lsls	r0, r2, #31
 800e446:	d404      	bmi.n	800e452 <_fflush_r+0x32>
 800e448:	0599      	lsls	r1, r3, #22
 800e44a:	d402      	bmi.n	800e452 <_fflush_r+0x32>
 800e44c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e44e:	f7fc ff45 	bl	800b2dc <__retarget_lock_acquire_recursive>
 800e452:	4628      	mov	r0, r5
 800e454:	4621      	mov	r1, r4
 800e456:	f7ff ff5f 	bl	800e318 <__sflush_r>
 800e45a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e45c:	4605      	mov	r5, r0
 800e45e:	07da      	lsls	r2, r3, #31
 800e460:	d4e4      	bmi.n	800e42c <_fflush_r+0xc>
 800e462:	89a3      	ldrh	r3, [r4, #12]
 800e464:	059b      	lsls	r3, r3, #22
 800e466:	d4e1      	bmi.n	800e42c <_fflush_r+0xc>
 800e468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e46a:	f7fc ff39 	bl	800b2e0 <__retarget_lock_release_recursive>
 800e46e:	e7dd      	b.n	800e42c <_fflush_r+0xc>

0800e470 <fiprintf>:
 800e470:	b40e      	push	{r1, r2, r3}
 800e472:	b503      	push	{r0, r1, lr}
 800e474:	ab03      	add	r3, sp, #12
 800e476:	4601      	mov	r1, r0
 800e478:	4805      	ldr	r0, [pc, #20]	@ (800e490 <fiprintf+0x20>)
 800e47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e47e:	6800      	ldr	r0, [r0, #0]
 800e480:	9301      	str	r3, [sp, #4]
 800e482:	f000 fd45 	bl	800ef10 <_vfiprintf_r>
 800e486:	b002      	add	sp, #8
 800e488:	f85d eb04 	ldr.w	lr, [sp], #4
 800e48c:	b003      	add	sp, #12
 800e48e:	4770      	bx	lr
 800e490:	20000040 	.word	0x20000040

0800e494 <__sccl>:
 800e494:	b570      	push	{r4, r5, r6, lr}
 800e496:	780b      	ldrb	r3, [r1, #0]
 800e498:	4604      	mov	r4, r0
 800e49a:	3801      	subs	r0, #1
 800e49c:	2b5e      	cmp	r3, #94	@ 0x5e
 800e49e:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e4a2:	bf13      	iteet	ne
 800e4a4:	1c4a      	addne	r2, r1, #1
 800e4a6:	1c8a      	addeq	r2, r1, #2
 800e4a8:	784b      	ldrbeq	r3, [r1, #1]
 800e4aa:	2100      	movne	r1, #0
 800e4ac:	bf08      	it	eq
 800e4ae:	2101      	moveq	r1, #1
 800e4b0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e4b4:	42a8      	cmp	r0, r5
 800e4b6:	d1fb      	bne.n	800e4b0 <__sccl+0x1c>
 800e4b8:	b90b      	cbnz	r3, 800e4be <__sccl+0x2a>
 800e4ba:	1e50      	subs	r0, r2, #1
 800e4bc:	bd70      	pop	{r4, r5, r6, pc}
 800e4be:	f081 0101 	eor.w	r1, r1, #1
 800e4c2:	4610      	mov	r0, r2
 800e4c4:	54e1      	strb	r1, [r4, r3]
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e4cc:	2d2d      	cmp	r5, #45	@ 0x2d
 800e4ce:	d005      	beq.n	800e4dc <__sccl+0x48>
 800e4d0:	2d5d      	cmp	r5, #93	@ 0x5d
 800e4d2:	d016      	beq.n	800e502 <__sccl+0x6e>
 800e4d4:	2d00      	cmp	r5, #0
 800e4d6:	d0f1      	beq.n	800e4bc <__sccl+0x28>
 800e4d8:	462b      	mov	r3, r5
 800e4da:	e7f2      	b.n	800e4c2 <__sccl+0x2e>
 800e4dc:	7846      	ldrb	r6, [r0, #1]
 800e4de:	2e5d      	cmp	r6, #93	@ 0x5d
 800e4e0:	d0fa      	beq.n	800e4d8 <__sccl+0x44>
 800e4e2:	42b3      	cmp	r3, r6
 800e4e4:	dcf8      	bgt.n	800e4d8 <__sccl+0x44>
 800e4e6:	3002      	adds	r0, #2
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	3201      	adds	r2, #1
 800e4ec:	4296      	cmp	r6, r2
 800e4ee:	54a1      	strb	r1, [r4, r2]
 800e4f0:	dcfb      	bgt.n	800e4ea <__sccl+0x56>
 800e4f2:	1af2      	subs	r2, r6, r3
 800e4f4:	1c5d      	adds	r5, r3, #1
 800e4f6:	3a01      	subs	r2, #1
 800e4f8:	42b3      	cmp	r3, r6
 800e4fa:	bfa8      	it	ge
 800e4fc:	2200      	movge	r2, #0
 800e4fe:	18ab      	adds	r3, r5, r2
 800e500:	e7e1      	b.n	800e4c6 <__sccl+0x32>
 800e502:	4610      	mov	r0, r2
 800e504:	e7da      	b.n	800e4bc <__sccl+0x28>

0800e506 <__submore>:
 800e506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e50a:	460c      	mov	r4, r1
 800e50c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e50e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e512:	4299      	cmp	r1, r3
 800e514:	d11a      	bne.n	800e54c <__submore+0x46>
 800e516:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e51a:	f7fd fe47 	bl	800c1ac <_malloc_r>
 800e51e:	b918      	cbnz	r0, 800e528 <__submore+0x22>
 800e520:	f04f 30ff 	mov.w	r0, #4294967295
 800e524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e528:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e52c:	6360      	str	r0, [r4, #52]	@ 0x34
 800e52e:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e532:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e534:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e538:	7083      	strb	r3, [r0, #2]
 800e53a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e53e:	7043      	strb	r3, [r0, #1]
 800e540:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e544:	7003      	strb	r3, [r0, #0]
 800e546:	6020      	str	r0, [r4, #0]
 800e548:	2000      	movs	r0, #0
 800e54a:	e7eb      	b.n	800e524 <__submore+0x1e>
 800e54c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e54e:	0077      	lsls	r7, r6, #1
 800e550:	463a      	mov	r2, r7
 800e552:	f000 fc78 	bl	800ee46 <_realloc_r>
 800e556:	4605      	mov	r5, r0
 800e558:	2800      	cmp	r0, #0
 800e55a:	d0e1      	beq.n	800e520 <__submore+0x1a>
 800e55c:	eb00 0806 	add.w	r8, r0, r6
 800e560:	4601      	mov	r1, r0
 800e562:	4632      	mov	r2, r6
 800e564:	4640      	mov	r0, r8
 800e566:	f000 f8e9 	bl	800e73c <memcpy>
 800e56a:	f8c4 8000 	str.w	r8, [r4]
 800e56e:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e572:	e7e9      	b.n	800e548 <__submore+0x42>

0800e574 <memmove>:
 800e574:	4288      	cmp	r0, r1
 800e576:	b510      	push	{r4, lr}
 800e578:	eb01 0402 	add.w	r4, r1, r2
 800e57c:	d902      	bls.n	800e584 <memmove+0x10>
 800e57e:	4284      	cmp	r4, r0
 800e580:	4623      	mov	r3, r4
 800e582:	d807      	bhi.n	800e594 <memmove+0x20>
 800e584:	1e43      	subs	r3, r0, #1
 800e586:	42a1      	cmp	r1, r4
 800e588:	d008      	beq.n	800e59c <memmove+0x28>
 800e58a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e58e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e592:	e7f8      	b.n	800e586 <memmove+0x12>
 800e594:	4402      	add	r2, r0
 800e596:	4601      	mov	r1, r0
 800e598:	428a      	cmp	r2, r1
 800e59a:	d100      	bne.n	800e59e <memmove+0x2a>
 800e59c:	bd10      	pop	{r4, pc}
 800e59e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5a6:	e7f7      	b.n	800e598 <memmove+0x24>

0800e5a8 <strncmp>:
 800e5a8:	b510      	push	{r4, lr}
 800e5aa:	b16a      	cbz	r2, 800e5c8 <strncmp+0x20>
 800e5ac:	3901      	subs	r1, #1
 800e5ae:	1884      	adds	r4, r0, r2
 800e5b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d103      	bne.n	800e5c4 <strncmp+0x1c>
 800e5bc:	42a0      	cmp	r0, r4
 800e5be:	d001      	beq.n	800e5c4 <strncmp+0x1c>
 800e5c0:	2a00      	cmp	r2, #0
 800e5c2:	d1f5      	bne.n	800e5b0 <strncmp+0x8>
 800e5c4:	1ad0      	subs	r0, r2, r3
 800e5c6:	bd10      	pop	{r4, pc}
 800e5c8:	4610      	mov	r0, r2
 800e5ca:	e7fc      	b.n	800e5c6 <strncmp+0x1e>

0800e5cc <__gettzinfo>:
 800e5cc:	4800      	ldr	r0, [pc, #0]	@ (800e5d0 <__gettzinfo+0x4>)
 800e5ce:	4770      	bx	lr
 800e5d0:	20000090 	.word	0x20000090

0800e5d4 <gmtime_r>:
 800e5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d8:	4a4c      	ldr	r2, [pc, #304]	@ (800e70c <gmtime_r+0x138>)
 800e5da:	460c      	mov	r4, r1
 800e5dc:	2300      	movs	r3, #0
 800e5de:	e9d0 0100 	ldrd	r0, r1, [r0]
 800e5e2:	f7f2 fb3f 	bl	8000c64 <__aeabi_ldivmod>
 800e5e6:	2a00      	cmp	r2, #0
 800e5e8:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800e5ec:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 800e5f0:	bfb7      	itett	lt
 800e5f2:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 800e5f6:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 800e5fa:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 800e5fe:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 800e602:	fbb2 f3f1 	udiv	r3, r2, r1
 800e606:	fb01 2213 	mls	r2, r1, r3, r2
 800e60a:	213c      	movs	r1, #60	@ 0x3c
 800e60c:	60a3      	str	r3, [r4, #8]
 800e60e:	fbb2 f3f1 	udiv	r3, r2, r1
 800e612:	fb01 2213 	mls	r2, r1, r3, r2
 800e616:	493e      	ldr	r1, [pc, #248]	@ (800e710 <gmtime_r+0x13c>)
 800e618:	6063      	str	r3, [r4, #4]
 800e61a:	1cc3      	adds	r3, r0, #3
 800e61c:	6022      	str	r2, [r4, #0]
 800e61e:	2207      	movs	r2, #7
 800e620:	fb93 f2f2 	sdiv	r2, r3, r2
 800e624:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e628:	1a9b      	subs	r3, r3, r2
 800e62a:	d555      	bpl.n	800e6d8 <gmtime_r+0x104>
 800e62c:	3307      	adds	r3, #7
 800e62e:	61a3      	str	r3, [r4, #24]
 800e630:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 800e634:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 800e638:	fb93 f1f1 	sdiv	r1, r3, r1
 800e63c:	4b35      	ldr	r3, [pc, #212]	@ (800e714 <gmtime_r+0x140>)
 800e63e:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 800e642:	f240 176d 	movw	r7, #365	@ 0x16d
 800e646:	2664      	movs	r6, #100	@ 0x64
 800e648:	fb03 0001 	mla	r0, r3, r1, r0
 800e64c:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 800e650:	f04f 0805 	mov.w	r8, #5
 800e654:	fbb0 f3f3 	udiv	r3, r0, r3
 800e658:	fbb0 f2fc 	udiv	r2, r0, ip
 800e65c:	4403      	add	r3, r0
 800e65e:	1a9b      	subs	r3, r3, r2
 800e660:	4a2d      	ldr	r2, [pc, #180]	@ (800e718 <gmtime_r+0x144>)
 800e662:	fbb0 f2f2 	udiv	r2, r0, r2
 800e666:	1a9b      	subs	r3, r3, r2
 800e668:	fbb3 f2f7 	udiv	r2, r3, r7
 800e66c:	fbb3 f3fc 	udiv	r3, r3, ip
 800e670:	fbb2 f5f6 	udiv	r5, r2, r6
 800e674:	1aeb      	subs	r3, r5, r3
 800e676:	4403      	add	r3, r0
 800e678:	2099      	movs	r0, #153	@ 0x99
 800e67a:	fb07 3312 	mls	r3, r7, r2, r3
 800e67e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800e682:	f103 0e01 	add.w	lr, r3, #1
 800e686:	3702      	adds	r7, #2
 800e688:	fbb7 fcf0 	udiv	ip, r7, r0
 800e68c:	fb00 f00c 	mul.w	r0, r0, ip
 800e690:	3002      	adds	r0, #2
 800e692:	fbb0 f0f8 	udiv	r0, r0, r8
 800e696:	ebae 0000 	sub.w	r0, lr, r0
 800e69a:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 800e69e:	4577      	cmp	r7, lr
 800e6a0:	bf8c      	ite	hi
 800e6a2:	f06f 0709 	mvnhi.w	r7, #9
 800e6a6:	2702      	movls	r7, #2
 800e6a8:	4467      	add	r7, ip
 800e6aa:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 800e6ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6b2:	2f01      	cmp	r7, #1
 800e6b4:	bf98      	it	ls
 800e6b6:	3101      	addls	r1, #1
 800e6b8:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 800e6bc:	d312      	bcc.n	800e6e4 <gmtime_r+0x110>
 800e6be:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800e6c2:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 800e6c6:	61e3      	str	r3, [r4, #28]
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	60e0      	str	r0, [r4, #12]
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	6223      	str	r3, [r4, #32]
 800e6d0:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800e6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	61a3      	str	r3, [r4, #24]
 800e6dc:	dba8      	blt.n	800e630 <gmtime_r+0x5c>
 800e6de:	fb90 f1f1 	sdiv	r1, r0, r1
 800e6e2:	e7ab      	b.n	800e63c <gmtime_r+0x68>
 800e6e4:	f012 0f03 	tst.w	r2, #3
 800e6e8:	d102      	bne.n	800e6f0 <gmtime_r+0x11c>
 800e6ea:	fb06 2515 	mls	r5, r6, r5, r2
 800e6ee:	b95d      	cbnz	r5, 800e708 <gmtime_r+0x134>
 800e6f0:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800e6f4:	fbb2 f6f5 	udiv	r6, r2, r5
 800e6f8:	fb05 2216 	mls	r2, r5, r6, r2
 800e6fc:	fab2 f282 	clz	r2, r2
 800e700:	0952      	lsrs	r2, r2, #5
 800e702:	333b      	adds	r3, #59	@ 0x3b
 800e704:	4413      	add	r3, r2
 800e706:	e7dc      	b.n	800e6c2 <gmtime_r+0xee>
 800e708:	2201      	movs	r2, #1
 800e70a:	e7fa      	b.n	800e702 <gmtime_r+0x12e>
 800e70c:	00015180 	.word	0x00015180
 800e710:	00023ab1 	.word	0x00023ab1
 800e714:	fffdc54f 	.word	0xfffdc54f
 800e718:	00023ab0 	.word	0x00023ab0

0800e71c <_sbrk_r>:
 800e71c:	b538      	push	{r3, r4, r5, lr}
 800e71e:	2300      	movs	r3, #0
 800e720:	4d05      	ldr	r5, [pc, #20]	@ (800e738 <_sbrk_r+0x1c>)
 800e722:	4604      	mov	r4, r0
 800e724:	4608      	mov	r0, r1
 800e726:	602b      	str	r3, [r5, #0]
 800e728:	f7f3 fe5c 	bl	80023e4 <_sbrk>
 800e72c:	1c43      	adds	r3, r0, #1
 800e72e:	d102      	bne.n	800e736 <_sbrk_r+0x1a>
 800e730:	682b      	ldr	r3, [r5, #0]
 800e732:	b103      	cbz	r3, 800e736 <_sbrk_r+0x1a>
 800e734:	6023      	str	r3, [r4, #0]
 800e736:	bd38      	pop	{r3, r4, r5, pc}
 800e738:	200005f0 	.word	0x200005f0

0800e73c <memcpy>:
 800e73c:	440a      	add	r2, r1
 800e73e:	1e43      	subs	r3, r0, #1
 800e740:	4291      	cmp	r1, r2
 800e742:	d100      	bne.n	800e746 <memcpy+0xa>
 800e744:	4770      	bx	lr
 800e746:	b510      	push	{r4, lr}
 800e748:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e74c:	4291      	cmp	r1, r2
 800e74e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e752:	d1f9      	bne.n	800e748 <memcpy+0xc>
 800e754:	bd10      	pop	{r4, pc}
	...

0800e758 <nan>:
 800e758:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e760 <nan+0x8>
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop
 800e760:	00000000 	.word	0x00000000
 800e764:	7ff80000 	.word	0x7ff80000

0800e768 <abort>:
 800e768:	2006      	movs	r0, #6
 800e76a:	b508      	push	{r3, lr}
 800e76c:	f000 fda4 	bl	800f2b8 <raise>
 800e770:	2001      	movs	r0, #1
 800e772:	f7f3 fdbf 	bl	80022f4 <_exit>

0800e776 <_calloc_r>:
 800e776:	b570      	push	{r4, r5, r6, lr}
 800e778:	fba1 5402 	umull	r5, r4, r1, r2
 800e77c:	b934      	cbnz	r4, 800e78c <_calloc_r+0x16>
 800e77e:	4629      	mov	r1, r5
 800e780:	f7fd fd14 	bl	800c1ac <_malloc_r>
 800e784:	4606      	mov	r6, r0
 800e786:	b928      	cbnz	r0, 800e794 <_calloc_r+0x1e>
 800e788:	4630      	mov	r0, r6
 800e78a:	bd70      	pop	{r4, r5, r6, pc}
 800e78c:	220c      	movs	r2, #12
 800e78e:	2600      	movs	r6, #0
 800e790:	6002      	str	r2, [r0, #0]
 800e792:	e7f9      	b.n	800e788 <_calloc_r+0x12>
 800e794:	462a      	mov	r2, r5
 800e796:	4621      	mov	r1, r4
 800e798:	f7fb fe87 	bl	800a4aa <memset>
 800e79c:	e7f4      	b.n	800e788 <_calloc_r+0x12>
	...

0800e7a0 <__env_lock>:
 800e7a0:	4801      	ldr	r0, [pc, #4]	@ (800e7a8 <__env_lock+0x8>)
 800e7a2:	f7fc bd9b 	b.w	800b2dc <__retarget_lock_acquire_recursive>
 800e7a6:	bf00      	nop
 800e7a8:	200005f5 	.word	0x200005f5

0800e7ac <__env_unlock>:
 800e7ac:	4801      	ldr	r0, [pc, #4]	@ (800e7b4 <__env_unlock+0x8>)
 800e7ae:	f7fc bd97 	b.w	800b2e0 <__retarget_lock_release_recursive>
 800e7b2:	bf00      	nop
 800e7b4:	200005f5 	.word	0x200005f5

0800e7b8 <rshift>:
 800e7b8:	6903      	ldr	r3, [r0, #16]
 800e7ba:	114a      	asrs	r2, r1, #5
 800e7bc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e7c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7c4:	f100 0414 	add.w	r4, r0, #20
 800e7c8:	dd45      	ble.n	800e856 <rshift+0x9e>
 800e7ca:	f011 011f 	ands.w	r1, r1, #31
 800e7ce:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e7d2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e7d6:	d10c      	bne.n	800e7f2 <rshift+0x3a>
 800e7d8:	f100 0710 	add.w	r7, r0, #16
 800e7dc:	4629      	mov	r1, r5
 800e7de:	42b1      	cmp	r1, r6
 800e7e0:	d334      	bcc.n	800e84c <rshift+0x94>
 800e7e2:	1a9b      	subs	r3, r3, r2
 800e7e4:	1eea      	subs	r2, r5, #3
 800e7e6:	009b      	lsls	r3, r3, #2
 800e7e8:	4296      	cmp	r6, r2
 800e7ea:	bf38      	it	cc
 800e7ec:	2300      	movcc	r3, #0
 800e7ee:	4423      	add	r3, r4
 800e7f0:	e015      	b.n	800e81e <rshift+0x66>
 800e7f2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e7f6:	f1c1 0820 	rsb	r8, r1, #32
 800e7fa:	f105 0e04 	add.w	lr, r5, #4
 800e7fe:	46a1      	mov	r9, r4
 800e800:	40cf      	lsrs	r7, r1
 800e802:	4576      	cmp	r6, lr
 800e804:	46f4      	mov	ip, lr
 800e806:	d815      	bhi.n	800e834 <rshift+0x7c>
 800e808:	1a9a      	subs	r2, r3, r2
 800e80a:	3501      	adds	r5, #1
 800e80c:	0092      	lsls	r2, r2, #2
 800e80e:	3a04      	subs	r2, #4
 800e810:	42ae      	cmp	r6, r5
 800e812:	bf38      	it	cc
 800e814:	2200      	movcc	r2, #0
 800e816:	18a3      	adds	r3, r4, r2
 800e818:	50a7      	str	r7, [r4, r2]
 800e81a:	b107      	cbz	r7, 800e81e <rshift+0x66>
 800e81c:	3304      	adds	r3, #4
 800e81e:	1b1a      	subs	r2, r3, r4
 800e820:	42a3      	cmp	r3, r4
 800e822:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e826:	bf08      	it	eq
 800e828:	2300      	moveq	r3, #0
 800e82a:	6102      	str	r2, [r0, #16]
 800e82c:	bf08      	it	eq
 800e82e:	6143      	streq	r3, [r0, #20]
 800e830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e834:	f8dc c000 	ldr.w	ip, [ip]
 800e838:	fa0c fc08 	lsl.w	ip, ip, r8
 800e83c:	ea4c 0707 	orr.w	r7, ip, r7
 800e840:	f849 7b04 	str.w	r7, [r9], #4
 800e844:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e848:	40cf      	lsrs	r7, r1
 800e84a:	e7da      	b.n	800e802 <rshift+0x4a>
 800e84c:	f851 cb04 	ldr.w	ip, [r1], #4
 800e850:	f847 cf04 	str.w	ip, [r7, #4]!
 800e854:	e7c3      	b.n	800e7de <rshift+0x26>
 800e856:	4623      	mov	r3, r4
 800e858:	e7e1      	b.n	800e81e <rshift+0x66>

0800e85a <__hexdig_fun>:
 800e85a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e85e:	2b09      	cmp	r3, #9
 800e860:	d802      	bhi.n	800e868 <__hexdig_fun+0xe>
 800e862:	3820      	subs	r0, #32
 800e864:	b2c0      	uxtb	r0, r0
 800e866:	4770      	bx	lr
 800e868:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e86c:	2b05      	cmp	r3, #5
 800e86e:	d801      	bhi.n	800e874 <__hexdig_fun+0x1a>
 800e870:	3847      	subs	r0, #71	@ 0x47
 800e872:	e7f7      	b.n	800e864 <__hexdig_fun+0xa>
 800e874:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e878:	2b05      	cmp	r3, #5
 800e87a:	d801      	bhi.n	800e880 <__hexdig_fun+0x26>
 800e87c:	3827      	subs	r0, #39	@ 0x27
 800e87e:	e7f1      	b.n	800e864 <__hexdig_fun+0xa>
 800e880:	2000      	movs	r0, #0
 800e882:	4770      	bx	lr

0800e884 <__gethex>:
 800e884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e888:	b085      	sub	sp, #20
 800e88a:	468a      	mov	sl, r1
 800e88c:	4690      	mov	r8, r2
 800e88e:	9302      	str	r3, [sp, #8]
 800e890:	680b      	ldr	r3, [r1, #0]
 800e892:	9001      	str	r0, [sp, #4]
 800e894:	1c9c      	adds	r4, r3, #2
 800e896:	46a1      	mov	r9, r4
 800e898:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e89c:	2830      	cmp	r0, #48	@ 0x30
 800e89e:	d0fa      	beq.n	800e896 <__gethex+0x12>
 800e8a0:	eba9 0303 	sub.w	r3, r9, r3
 800e8a4:	f1a3 0b02 	sub.w	fp, r3, #2
 800e8a8:	f7ff ffd7 	bl	800e85a <__hexdig_fun>
 800e8ac:	4605      	mov	r5, r0
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	d166      	bne.n	800e980 <__gethex+0xfc>
 800e8b2:	2201      	movs	r2, #1
 800e8b4:	499e      	ldr	r1, [pc, #632]	@ (800eb30 <__gethex+0x2ac>)
 800e8b6:	4648      	mov	r0, r9
 800e8b8:	f7ff fe76 	bl	800e5a8 <strncmp>
 800e8bc:	4607      	mov	r7, r0
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	d165      	bne.n	800e98e <__gethex+0x10a>
 800e8c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e8c6:	4626      	mov	r6, r4
 800e8c8:	f7ff ffc7 	bl	800e85a <__hexdig_fun>
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	d060      	beq.n	800e992 <__gethex+0x10e>
 800e8d0:	4623      	mov	r3, r4
 800e8d2:	7818      	ldrb	r0, [r3, #0]
 800e8d4:	4699      	mov	r9, r3
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	2830      	cmp	r0, #48	@ 0x30
 800e8da:	d0fa      	beq.n	800e8d2 <__gethex+0x4e>
 800e8dc:	f7ff ffbd 	bl	800e85a <__hexdig_fun>
 800e8e0:	fab0 f580 	clz	r5, r0
 800e8e4:	f04f 0b01 	mov.w	fp, #1
 800e8e8:	096d      	lsrs	r5, r5, #5
 800e8ea:	464a      	mov	r2, r9
 800e8ec:	4616      	mov	r6, r2
 800e8ee:	3201      	adds	r2, #1
 800e8f0:	7830      	ldrb	r0, [r6, #0]
 800e8f2:	f7ff ffb2 	bl	800e85a <__hexdig_fun>
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	d1f8      	bne.n	800e8ec <__gethex+0x68>
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	498c      	ldr	r1, [pc, #560]	@ (800eb30 <__gethex+0x2ac>)
 800e8fe:	4630      	mov	r0, r6
 800e900:	f7ff fe52 	bl	800e5a8 <strncmp>
 800e904:	2800      	cmp	r0, #0
 800e906:	d13e      	bne.n	800e986 <__gethex+0x102>
 800e908:	b944      	cbnz	r4, 800e91c <__gethex+0x98>
 800e90a:	1c74      	adds	r4, r6, #1
 800e90c:	4622      	mov	r2, r4
 800e90e:	4616      	mov	r6, r2
 800e910:	3201      	adds	r2, #1
 800e912:	7830      	ldrb	r0, [r6, #0]
 800e914:	f7ff ffa1 	bl	800e85a <__hexdig_fun>
 800e918:	2800      	cmp	r0, #0
 800e91a:	d1f8      	bne.n	800e90e <__gethex+0x8a>
 800e91c:	1ba4      	subs	r4, r4, r6
 800e91e:	00a7      	lsls	r7, r4, #2
 800e920:	7833      	ldrb	r3, [r6, #0]
 800e922:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e926:	2b50      	cmp	r3, #80	@ 0x50
 800e928:	d13d      	bne.n	800e9a6 <__gethex+0x122>
 800e92a:	7873      	ldrb	r3, [r6, #1]
 800e92c:	2b2b      	cmp	r3, #43	@ 0x2b
 800e92e:	d032      	beq.n	800e996 <__gethex+0x112>
 800e930:	2b2d      	cmp	r3, #45	@ 0x2d
 800e932:	d033      	beq.n	800e99c <__gethex+0x118>
 800e934:	1c71      	adds	r1, r6, #1
 800e936:	2400      	movs	r4, #0
 800e938:	7808      	ldrb	r0, [r1, #0]
 800e93a:	f7ff ff8e 	bl	800e85a <__hexdig_fun>
 800e93e:	1e43      	subs	r3, r0, #1
 800e940:	b2db      	uxtb	r3, r3
 800e942:	2b18      	cmp	r3, #24
 800e944:	d82f      	bhi.n	800e9a6 <__gethex+0x122>
 800e946:	f1a0 0210 	sub.w	r2, r0, #16
 800e94a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e94e:	f7ff ff84 	bl	800e85a <__hexdig_fun>
 800e952:	f100 3cff 	add.w	ip, r0, #4294967295
 800e956:	230a      	movs	r3, #10
 800e958:	fa5f fc8c 	uxtb.w	ip, ip
 800e95c:	f1bc 0f18 	cmp.w	ip, #24
 800e960:	d91e      	bls.n	800e9a0 <__gethex+0x11c>
 800e962:	b104      	cbz	r4, 800e966 <__gethex+0xe2>
 800e964:	4252      	negs	r2, r2
 800e966:	4417      	add	r7, r2
 800e968:	f8ca 1000 	str.w	r1, [sl]
 800e96c:	b1ed      	cbz	r5, 800e9aa <__gethex+0x126>
 800e96e:	f1bb 0f00 	cmp.w	fp, #0
 800e972:	bf0c      	ite	eq
 800e974:	2506      	moveq	r5, #6
 800e976:	2500      	movne	r5, #0
 800e978:	4628      	mov	r0, r5
 800e97a:	b005      	add	sp, #20
 800e97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e980:	2500      	movs	r5, #0
 800e982:	462c      	mov	r4, r5
 800e984:	e7b1      	b.n	800e8ea <__gethex+0x66>
 800e986:	2c00      	cmp	r4, #0
 800e988:	d1c8      	bne.n	800e91c <__gethex+0x98>
 800e98a:	4627      	mov	r7, r4
 800e98c:	e7c8      	b.n	800e920 <__gethex+0x9c>
 800e98e:	464e      	mov	r6, r9
 800e990:	462f      	mov	r7, r5
 800e992:	2501      	movs	r5, #1
 800e994:	e7c4      	b.n	800e920 <__gethex+0x9c>
 800e996:	2400      	movs	r4, #0
 800e998:	1cb1      	adds	r1, r6, #2
 800e99a:	e7cd      	b.n	800e938 <__gethex+0xb4>
 800e99c:	2401      	movs	r4, #1
 800e99e:	e7fb      	b.n	800e998 <__gethex+0x114>
 800e9a0:	fb03 0002 	mla	r0, r3, r2, r0
 800e9a4:	e7cf      	b.n	800e946 <__gethex+0xc2>
 800e9a6:	4631      	mov	r1, r6
 800e9a8:	e7de      	b.n	800e968 <__gethex+0xe4>
 800e9aa:	eba6 0309 	sub.w	r3, r6, r9
 800e9ae:	4629      	mov	r1, r5
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	2b07      	cmp	r3, #7
 800e9b4:	dc0a      	bgt.n	800e9cc <__gethex+0x148>
 800e9b6:	9801      	ldr	r0, [sp, #4]
 800e9b8:	f7fd fc84 	bl	800c2c4 <_Balloc>
 800e9bc:	4604      	mov	r4, r0
 800e9be:	b940      	cbnz	r0, 800e9d2 <__gethex+0x14e>
 800e9c0:	4b5c      	ldr	r3, [pc, #368]	@ (800eb34 <__gethex+0x2b0>)
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	21e4      	movs	r1, #228	@ 0xe4
 800e9c6:	485c      	ldr	r0, [pc, #368]	@ (800eb38 <__gethex+0x2b4>)
 800e9c8:	f7fc fca8 	bl	800b31c <__assert_func>
 800e9cc:	3101      	adds	r1, #1
 800e9ce:	105b      	asrs	r3, r3, #1
 800e9d0:	e7ef      	b.n	800e9b2 <__gethex+0x12e>
 800e9d2:	f100 0a14 	add.w	sl, r0, #20
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	4655      	mov	r5, sl
 800e9da:	469b      	mov	fp, r3
 800e9dc:	45b1      	cmp	r9, r6
 800e9de:	d337      	bcc.n	800ea50 <__gethex+0x1cc>
 800e9e0:	f845 bb04 	str.w	fp, [r5], #4
 800e9e4:	eba5 050a 	sub.w	r5, r5, sl
 800e9e8:	4658      	mov	r0, fp
 800e9ea:	10ad      	asrs	r5, r5, #2
 800e9ec:	6125      	str	r5, [r4, #16]
 800e9ee:	016d      	lsls	r5, r5, #5
 800e9f0:	f7fd fd5c 	bl	800c4ac <__hi0bits>
 800e9f4:	f8d8 6000 	ldr.w	r6, [r8]
 800e9f8:	1a2d      	subs	r5, r5, r0
 800e9fa:	42b5      	cmp	r5, r6
 800e9fc:	dd54      	ble.n	800eaa8 <__gethex+0x224>
 800e9fe:	1bad      	subs	r5, r5, r6
 800ea00:	4620      	mov	r0, r4
 800ea02:	4629      	mov	r1, r5
 800ea04:	f7fe f8f3 	bl	800cbee <__any_on>
 800ea08:	4681      	mov	r9, r0
 800ea0a:	b178      	cbz	r0, 800ea2c <__gethex+0x1a8>
 800ea0c:	1e6b      	subs	r3, r5, #1
 800ea0e:	f04f 0901 	mov.w	r9, #1
 800ea12:	1159      	asrs	r1, r3, #5
 800ea14:	f003 021f 	and.w	r2, r3, #31
 800ea18:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ea1c:	fa09 f202 	lsl.w	r2, r9, r2
 800ea20:	420a      	tst	r2, r1
 800ea22:	d003      	beq.n	800ea2c <__gethex+0x1a8>
 800ea24:	454b      	cmp	r3, r9
 800ea26:	dc36      	bgt.n	800ea96 <__gethex+0x212>
 800ea28:	f04f 0902 	mov.w	r9, #2
 800ea2c:	442f      	add	r7, r5
 800ea2e:	4629      	mov	r1, r5
 800ea30:	4620      	mov	r0, r4
 800ea32:	f7ff fec1 	bl	800e7b8 <rshift>
 800ea36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea3a:	42bb      	cmp	r3, r7
 800ea3c:	da42      	bge.n	800eac4 <__gethex+0x240>
 800ea3e:	4621      	mov	r1, r4
 800ea40:	9801      	ldr	r0, [sp, #4]
 800ea42:	f7fd fc7f 	bl	800c344 <_Bfree>
 800ea46:	2300      	movs	r3, #0
 800ea48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea4a:	25a3      	movs	r5, #163	@ 0xa3
 800ea4c:	6013      	str	r3, [r2, #0]
 800ea4e:	e793      	b.n	800e978 <__gethex+0xf4>
 800ea50:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ea54:	2a2e      	cmp	r2, #46	@ 0x2e
 800ea56:	d012      	beq.n	800ea7e <__gethex+0x1fa>
 800ea58:	2b20      	cmp	r3, #32
 800ea5a:	d104      	bne.n	800ea66 <__gethex+0x1e2>
 800ea5c:	f845 bb04 	str.w	fp, [r5], #4
 800ea60:	f04f 0b00 	mov.w	fp, #0
 800ea64:	465b      	mov	r3, fp
 800ea66:	7830      	ldrb	r0, [r6, #0]
 800ea68:	9303      	str	r3, [sp, #12]
 800ea6a:	f7ff fef6 	bl	800e85a <__hexdig_fun>
 800ea6e:	9b03      	ldr	r3, [sp, #12]
 800ea70:	f000 000f 	and.w	r0, r0, #15
 800ea74:	4098      	lsls	r0, r3
 800ea76:	3304      	adds	r3, #4
 800ea78:	ea4b 0b00 	orr.w	fp, fp, r0
 800ea7c:	e7ae      	b.n	800e9dc <__gethex+0x158>
 800ea7e:	45b1      	cmp	r9, r6
 800ea80:	d8ea      	bhi.n	800ea58 <__gethex+0x1d4>
 800ea82:	2201      	movs	r2, #1
 800ea84:	492a      	ldr	r1, [pc, #168]	@ (800eb30 <__gethex+0x2ac>)
 800ea86:	4630      	mov	r0, r6
 800ea88:	9303      	str	r3, [sp, #12]
 800ea8a:	f7ff fd8d 	bl	800e5a8 <strncmp>
 800ea8e:	9b03      	ldr	r3, [sp, #12]
 800ea90:	2800      	cmp	r0, #0
 800ea92:	d1e1      	bne.n	800ea58 <__gethex+0x1d4>
 800ea94:	e7a2      	b.n	800e9dc <__gethex+0x158>
 800ea96:	1ea9      	subs	r1, r5, #2
 800ea98:	4620      	mov	r0, r4
 800ea9a:	f7fe f8a8 	bl	800cbee <__any_on>
 800ea9e:	2800      	cmp	r0, #0
 800eaa0:	d0c2      	beq.n	800ea28 <__gethex+0x1a4>
 800eaa2:	f04f 0903 	mov.w	r9, #3
 800eaa6:	e7c1      	b.n	800ea2c <__gethex+0x1a8>
 800eaa8:	da09      	bge.n	800eabe <__gethex+0x23a>
 800eaaa:	1b75      	subs	r5, r6, r5
 800eaac:	4621      	mov	r1, r4
 800eaae:	9801      	ldr	r0, [sp, #4]
 800eab0:	462a      	mov	r2, r5
 800eab2:	1b7f      	subs	r7, r7, r5
 800eab4:	f7fd fe5a 	bl	800c76c <__lshift>
 800eab8:	4604      	mov	r4, r0
 800eaba:	f100 0a14 	add.w	sl, r0, #20
 800eabe:	f04f 0900 	mov.w	r9, #0
 800eac2:	e7b8      	b.n	800ea36 <__gethex+0x1b2>
 800eac4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eac8:	42bd      	cmp	r5, r7
 800eaca:	dd6f      	ble.n	800ebac <__gethex+0x328>
 800eacc:	1bed      	subs	r5, r5, r7
 800eace:	42ae      	cmp	r6, r5
 800ead0:	dc34      	bgt.n	800eb3c <__gethex+0x2b8>
 800ead2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ead6:	2b02      	cmp	r3, #2
 800ead8:	d022      	beq.n	800eb20 <__gethex+0x29c>
 800eada:	2b03      	cmp	r3, #3
 800eadc:	d024      	beq.n	800eb28 <__gethex+0x2a4>
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d115      	bne.n	800eb0e <__gethex+0x28a>
 800eae2:	42ae      	cmp	r6, r5
 800eae4:	d113      	bne.n	800eb0e <__gethex+0x28a>
 800eae6:	2e01      	cmp	r6, #1
 800eae8:	d10b      	bne.n	800eb02 <__gethex+0x27e>
 800eaea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eaee:	2562      	movs	r5, #98	@ 0x62
 800eaf0:	9a02      	ldr	r2, [sp, #8]
 800eaf2:	6013      	str	r3, [r2, #0]
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	6123      	str	r3, [r4, #16]
 800eaf8:	f8ca 3000 	str.w	r3, [sl]
 800eafc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eafe:	601c      	str	r4, [r3, #0]
 800eb00:	e73a      	b.n	800e978 <__gethex+0xf4>
 800eb02:	1e71      	subs	r1, r6, #1
 800eb04:	4620      	mov	r0, r4
 800eb06:	f7fe f872 	bl	800cbee <__any_on>
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	d1ed      	bne.n	800eaea <__gethex+0x266>
 800eb0e:	4621      	mov	r1, r4
 800eb10:	9801      	ldr	r0, [sp, #4]
 800eb12:	f7fd fc17 	bl	800c344 <_Bfree>
 800eb16:	2300      	movs	r3, #0
 800eb18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb1a:	2550      	movs	r5, #80	@ 0x50
 800eb1c:	6013      	str	r3, [r2, #0]
 800eb1e:	e72b      	b.n	800e978 <__gethex+0xf4>
 800eb20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d1f3      	bne.n	800eb0e <__gethex+0x28a>
 800eb26:	e7e0      	b.n	800eaea <__gethex+0x266>
 800eb28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1dd      	bne.n	800eaea <__gethex+0x266>
 800eb2e:	e7ee      	b.n	800eb0e <__gethex+0x28a>
 800eb30:	0800f784 	.word	0x0800f784
 800eb34:	0800f71a 	.word	0x0800f71a
 800eb38:	0800f7ba 	.word	0x0800f7ba
 800eb3c:	1e6f      	subs	r7, r5, #1
 800eb3e:	f1b9 0f00 	cmp.w	r9, #0
 800eb42:	d130      	bne.n	800eba6 <__gethex+0x322>
 800eb44:	b127      	cbz	r7, 800eb50 <__gethex+0x2cc>
 800eb46:	4639      	mov	r1, r7
 800eb48:	4620      	mov	r0, r4
 800eb4a:	f7fe f850 	bl	800cbee <__any_on>
 800eb4e:	4681      	mov	r9, r0
 800eb50:	117a      	asrs	r2, r7, #5
 800eb52:	2301      	movs	r3, #1
 800eb54:	f007 071f 	and.w	r7, r7, #31
 800eb58:	4629      	mov	r1, r5
 800eb5a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800eb5e:	4620      	mov	r0, r4
 800eb60:	40bb      	lsls	r3, r7
 800eb62:	1b76      	subs	r6, r6, r5
 800eb64:	2502      	movs	r5, #2
 800eb66:	4213      	tst	r3, r2
 800eb68:	bf18      	it	ne
 800eb6a:	f049 0902 	orrne.w	r9, r9, #2
 800eb6e:	f7ff fe23 	bl	800e7b8 <rshift>
 800eb72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800eb76:	f1b9 0f00 	cmp.w	r9, #0
 800eb7a:	d047      	beq.n	800ec0c <__gethex+0x388>
 800eb7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb80:	2b02      	cmp	r3, #2
 800eb82:	d015      	beq.n	800ebb0 <__gethex+0x32c>
 800eb84:	2b03      	cmp	r3, #3
 800eb86:	d017      	beq.n	800ebb8 <__gethex+0x334>
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d109      	bne.n	800eba0 <__gethex+0x31c>
 800eb8c:	f019 0f02 	tst.w	r9, #2
 800eb90:	d006      	beq.n	800eba0 <__gethex+0x31c>
 800eb92:	f8da 3000 	ldr.w	r3, [sl]
 800eb96:	ea49 0903 	orr.w	r9, r9, r3
 800eb9a:	f019 0f01 	tst.w	r9, #1
 800eb9e:	d10e      	bne.n	800ebbe <__gethex+0x33a>
 800eba0:	f045 0510 	orr.w	r5, r5, #16
 800eba4:	e032      	b.n	800ec0c <__gethex+0x388>
 800eba6:	f04f 0901 	mov.w	r9, #1
 800ebaa:	e7d1      	b.n	800eb50 <__gethex+0x2cc>
 800ebac:	2501      	movs	r5, #1
 800ebae:	e7e2      	b.n	800eb76 <__gethex+0x2f2>
 800ebb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebb2:	f1c3 0301 	rsb	r3, r3, #1
 800ebb6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ebb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d0f0      	beq.n	800eba0 <__gethex+0x31c>
 800ebbe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ebc2:	f104 0314 	add.w	r3, r4, #20
 800ebc6:	f04f 0c00 	mov.w	ip, #0
 800ebca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ebce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebd8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ebdc:	d01b      	beq.n	800ec16 <__gethex+0x392>
 800ebde:	3201      	adds	r2, #1
 800ebe0:	6002      	str	r2, [r0, #0]
 800ebe2:	2d02      	cmp	r5, #2
 800ebe4:	f104 0314 	add.w	r3, r4, #20
 800ebe8:	d13c      	bne.n	800ec64 <__gethex+0x3e0>
 800ebea:	f8d8 2000 	ldr.w	r2, [r8]
 800ebee:	3a01      	subs	r2, #1
 800ebf0:	42b2      	cmp	r2, r6
 800ebf2:	d109      	bne.n	800ec08 <__gethex+0x384>
 800ebf4:	1171      	asrs	r1, r6, #5
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	f006 061f 	and.w	r6, r6, #31
 800ebfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ec00:	fa02 f606 	lsl.w	r6, r2, r6
 800ec04:	421e      	tst	r6, r3
 800ec06:	d13a      	bne.n	800ec7e <__gethex+0x3fa>
 800ec08:	f045 0520 	orr.w	r5, r5, #32
 800ec0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec0e:	601c      	str	r4, [r3, #0]
 800ec10:	9b02      	ldr	r3, [sp, #8]
 800ec12:	601f      	str	r7, [r3, #0]
 800ec14:	e6b0      	b.n	800e978 <__gethex+0xf4>
 800ec16:	4299      	cmp	r1, r3
 800ec18:	f843 cc04 	str.w	ip, [r3, #-4]
 800ec1c:	d8d9      	bhi.n	800ebd2 <__gethex+0x34e>
 800ec1e:	68a3      	ldr	r3, [r4, #8]
 800ec20:	459b      	cmp	fp, r3
 800ec22:	db17      	blt.n	800ec54 <__gethex+0x3d0>
 800ec24:	6861      	ldr	r1, [r4, #4]
 800ec26:	9801      	ldr	r0, [sp, #4]
 800ec28:	3101      	adds	r1, #1
 800ec2a:	f7fd fb4b 	bl	800c2c4 <_Balloc>
 800ec2e:	4681      	mov	r9, r0
 800ec30:	b918      	cbnz	r0, 800ec3a <__gethex+0x3b6>
 800ec32:	4b1a      	ldr	r3, [pc, #104]	@ (800ec9c <__gethex+0x418>)
 800ec34:	4602      	mov	r2, r0
 800ec36:	2184      	movs	r1, #132	@ 0x84
 800ec38:	e6c5      	b.n	800e9c6 <__gethex+0x142>
 800ec3a:	6922      	ldr	r2, [r4, #16]
 800ec3c:	f104 010c 	add.w	r1, r4, #12
 800ec40:	300c      	adds	r0, #12
 800ec42:	3202      	adds	r2, #2
 800ec44:	0092      	lsls	r2, r2, #2
 800ec46:	f7ff fd79 	bl	800e73c <memcpy>
 800ec4a:	4621      	mov	r1, r4
 800ec4c:	464c      	mov	r4, r9
 800ec4e:	9801      	ldr	r0, [sp, #4]
 800ec50:	f7fd fb78 	bl	800c344 <_Bfree>
 800ec54:	6923      	ldr	r3, [r4, #16]
 800ec56:	1c5a      	adds	r2, r3, #1
 800ec58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ec5c:	6122      	str	r2, [r4, #16]
 800ec5e:	2201      	movs	r2, #1
 800ec60:	615a      	str	r2, [r3, #20]
 800ec62:	e7be      	b.n	800ebe2 <__gethex+0x35e>
 800ec64:	6922      	ldr	r2, [r4, #16]
 800ec66:	455a      	cmp	r2, fp
 800ec68:	dd0b      	ble.n	800ec82 <__gethex+0x3fe>
 800ec6a:	2101      	movs	r1, #1
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f7ff fda3 	bl	800e7b8 <rshift>
 800ec72:	3701      	adds	r7, #1
 800ec74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec78:	42bb      	cmp	r3, r7
 800ec7a:	f6ff aee0 	blt.w	800ea3e <__gethex+0x1ba>
 800ec7e:	2501      	movs	r5, #1
 800ec80:	e7c2      	b.n	800ec08 <__gethex+0x384>
 800ec82:	f016 061f 	ands.w	r6, r6, #31
 800ec86:	d0fa      	beq.n	800ec7e <__gethex+0x3fa>
 800ec88:	4453      	add	r3, sl
 800ec8a:	f1c6 0620 	rsb	r6, r6, #32
 800ec8e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ec92:	f7fd fc0b 	bl	800c4ac <__hi0bits>
 800ec96:	42b0      	cmp	r0, r6
 800ec98:	dbe7      	blt.n	800ec6a <__gethex+0x3e6>
 800ec9a:	e7f0      	b.n	800ec7e <__gethex+0x3fa>
 800ec9c:	0800f71a 	.word	0x0800f71a

0800eca0 <L_shift>:
 800eca0:	f1c2 0208 	rsb	r2, r2, #8
 800eca4:	0092      	lsls	r2, r2, #2
 800eca6:	b570      	push	{r4, r5, r6, lr}
 800eca8:	f1c2 0620 	rsb	r6, r2, #32
 800ecac:	6843      	ldr	r3, [r0, #4]
 800ecae:	6804      	ldr	r4, [r0, #0]
 800ecb0:	fa03 f506 	lsl.w	r5, r3, r6
 800ecb4:	40d3      	lsrs	r3, r2
 800ecb6:	432c      	orrs	r4, r5
 800ecb8:	6004      	str	r4, [r0, #0]
 800ecba:	f840 3f04 	str.w	r3, [r0, #4]!
 800ecbe:	4288      	cmp	r0, r1
 800ecc0:	d3f4      	bcc.n	800ecac <L_shift+0xc>
 800ecc2:	bd70      	pop	{r4, r5, r6, pc}

0800ecc4 <__match>:
 800ecc4:	6803      	ldr	r3, [r0, #0]
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	b530      	push	{r4, r5, lr}
 800ecca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecce:	b914      	cbnz	r4, 800ecd6 <__match+0x12>
 800ecd0:	6003      	str	r3, [r0, #0]
 800ecd2:	2001      	movs	r0, #1
 800ecd4:	bd30      	pop	{r4, r5, pc}
 800ecd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecda:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ecde:	2d19      	cmp	r5, #25
 800ece0:	bf98      	it	ls
 800ece2:	3220      	addls	r2, #32
 800ece4:	42a2      	cmp	r2, r4
 800ece6:	d0f0      	beq.n	800ecca <__match+0x6>
 800ece8:	2000      	movs	r0, #0
 800ecea:	e7f3      	b.n	800ecd4 <__match+0x10>

0800ecec <__hexnan>:
 800ecec:	680b      	ldr	r3, [r1, #0]
 800ecee:	6801      	ldr	r1, [r0, #0]
 800ecf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf4:	115e      	asrs	r6, r3, #5
 800ecf6:	f013 031f 	ands.w	r3, r3, #31
 800ecfa:	f04f 0500 	mov.w	r5, #0
 800ecfe:	b087      	sub	sp, #28
 800ed00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ed04:	4682      	mov	sl, r0
 800ed06:	4690      	mov	r8, r2
 800ed08:	46ab      	mov	fp, r5
 800ed0a:	bf18      	it	ne
 800ed0c:	3604      	addne	r6, #4
 800ed0e:	9301      	str	r3, [sp, #4]
 800ed10:	9502      	str	r5, [sp, #8]
 800ed12:	1f37      	subs	r7, r6, #4
 800ed14:	f846 5c04 	str.w	r5, [r6, #-4]
 800ed18:	46b9      	mov	r9, r7
 800ed1a:	463c      	mov	r4, r7
 800ed1c:	1c4b      	adds	r3, r1, #1
 800ed1e:	784a      	ldrb	r2, [r1, #1]
 800ed20:	9303      	str	r3, [sp, #12]
 800ed22:	b342      	cbz	r2, 800ed76 <__hexnan+0x8a>
 800ed24:	4610      	mov	r0, r2
 800ed26:	9105      	str	r1, [sp, #20]
 800ed28:	9204      	str	r2, [sp, #16]
 800ed2a:	f7ff fd96 	bl	800e85a <__hexdig_fun>
 800ed2e:	2800      	cmp	r0, #0
 800ed30:	d151      	bne.n	800edd6 <__hexnan+0xea>
 800ed32:	9a04      	ldr	r2, [sp, #16]
 800ed34:	9905      	ldr	r1, [sp, #20]
 800ed36:	2a20      	cmp	r2, #32
 800ed38:	d818      	bhi.n	800ed6c <__hexnan+0x80>
 800ed3a:	9b02      	ldr	r3, [sp, #8]
 800ed3c:	459b      	cmp	fp, r3
 800ed3e:	dd13      	ble.n	800ed68 <__hexnan+0x7c>
 800ed40:	454c      	cmp	r4, r9
 800ed42:	d206      	bcs.n	800ed52 <__hexnan+0x66>
 800ed44:	2d07      	cmp	r5, #7
 800ed46:	dc04      	bgt.n	800ed52 <__hexnan+0x66>
 800ed48:	462a      	mov	r2, r5
 800ed4a:	4649      	mov	r1, r9
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	f7ff ffa7 	bl	800eca0 <L_shift>
 800ed52:	4544      	cmp	r4, r8
 800ed54:	d951      	bls.n	800edfa <__hexnan+0x10e>
 800ed56:	2300      	movs	r3, #0
 800ed58:	f1a4 0904 	sub.w	r9, r4, #4
 800ed5c:	f8cd b008 	str.w	fp, [sp, #8]
 800ed60:	f844 3c04 	str.w	r3, [r4, #-4]
 800ed64:	461d      	mov	r5, r3
 800ed66:	464c      	mov	r4, r9
 800ed68:	9903      	ldr	r1, [sp, #12]
 800ed6a:	e7d7      	b.n	800ed1c <__hexnan+0x30>
 800ed6c:	2a29      	cmp	r2, #41	@ 0x29
 800ed6e:	d156      	bne.n	800ee1e <__hexnan+0x132>
 800ed70:	3102      	adds	r1, #2
 800ed72:	f8ca 1000 	str.w	r1, [sl]
 800ed76:	f1bb 0f00 	cmp.w	fp, #0
 800ed7a:	d050      	beq.n	800ee1e <__hexnan+0x132>
 800ed7c:	454c      	cmp	r4, r9
 800ed7e:	d206      	bcs.n	800ed8e <__hexnan+0xa2>
 800ed80:	2d07      	cmp	r5, #7
 800ed82:	dc04      	bgt.n	800ed8e <__hexnan+0xa2>
 800ed84:	462a      	mov	r2, r5
 800ed86:	4649      	mov	r1, r9
 800ed88:	4620      	mov	r0, r4
 800ed8a:	f7ff ff89 	bl	800eca0 <L_shift>
 800ed8e:	4544      	cmp	r4, r8
 800ed90:	d935      	bls.n	800edfe <__hexnan+0x112>
 800ed92:	f1a8 0204 	sub.w	r2, r8, #4
 800ed96:	4623      	mov	r3, r4
 800ed98:	f853 1b04 	ldr.w	r1, [r3], #4
 800ed9c:	429f      	cmp	r7, r3
 800ed9e:	f842 1f04 	str.w	r1, [r2, #4]!
 800eda2:	d2f9      	bcs.n	800ed98 <__hexnan+0xac>
 800eda4:	1b3b      	subs	r3, r7, r4
 800eda6:	3e03      	subs	r6, #3
 800eda8:	3401      	adds	r4, #1
 800edaa:	2200      	movs	r2, #0
 800edac:	f023 0303 	bic.w	r3, r3, #3
 800edb0:	3304      	adds	r3, #4
 800edb2:	42b4      	cmp	r4, r6
 800edb4:	bf88      	it	hi
 800edb6:	2304      	movhi	r3, #4
 800edb8:	4443      	add	r3, r8
 800edba:	f843 2b04 	str.w	r2, [r3], #4
 800edbe:	429f      	cmp	r7, r3
 800edc0:	d2fb      	bcs.n	800edba <__hexnan+0xce>
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	b91b      	cbnz	r3, 800edce <__hexnan+0xe2>
 800edc6:	4547      	cmp	r7, r8
 800edc8:	d127      	bne.n	800ee1a <__hexnan+0x12e>
 800edca:	2301      	movs	r3, #1
 800edcc:	603b      	str	r3, [r7, #0]
 800edce:	2005      	movs	r0, #5
 800edd0:	b007      	add	sp, #28
 800edd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edd6:	3501      	adds	r5, #1
 800edd8:	f10b 0b01 	add.w	fp, fp, #1
 800eddc:	2d08      	cmp	r5, #8
 800edde:	dd05      	ble.n	800edec <__hexnan+0x100>
 800ede0:	4544      	cmp	r4, r8
 800ede2:	d9c1      	bls.n	800ed68 <__hexnan+0x7c>
 800ede4:	2300      	movs	r3, #0
 800ede6:	3c04      	subs	r4, #4
 800ede8:	2501      	movs	r5, #1
 800edea:	6023      	str	r3, [r4, #0]
 800edec:	6822      	ldr	r2, [r4, #0]
 800edee:	f000 000f 	and.w	r0, r0, #15
 800edf2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800edf6:	6020      	str	r0, [r4, #0]
 800edf8:	e7b6      	b.n	800ed68 <__hexnan+0x7c>
 800edfa:	2508      	movs	r5, #8
 800edfc:	e7b4      	b.n	800ed68 <__hexnan+0x7c>
 800edfe:	9b01      	ldr	r3, [sp, #4]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d0de      	beq.n	800edc2 <__hexnan+0xd6>
 800ee04:	f1c3 0320 	rsb	r3, r3, #32
 800ee08:	f04f 32ff 	mov.w	r2, #4294967295
 800ee0c:	40da      	lsrs	r2, r3
 800ee0e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ee12:	4013      	ands	r3, r2
 800ee14:	f846 3c04 	str.w	r3, [r6, #-4]
 800ee18:	e7d3      	b.n	800edc2 <__hexnan+0xd6>
 800ee1a:	3f04      	subs	r7, #4
 800ee1c:	e7d1      	b.n	800edc2 <__hexnan+0xd6>
 800ee1e:	2004      	movs	r0, #4
 800ee20:	e7d6      	b.n	800edd0 <__hexnan+0xe4>

0800ee22 <__ascii_mbtowc>:
 800ee22:	b082      	sub	sp, #8
 800ee24:	b901      	cbnz	r1, 800ee28 <__ascii_mbtowc+0x6>
 800ee26:	a901      	add	r1, sp, #4
 800ee28:	b142      	cbz	r2, 800ee3c <__ascii_mbtowc+0x1a>
 800ee2a:	b14b      	cbz	r3, 800ee40 <__ascii_mbtowc+0x1e>
 800ee2c:	7813      	ldrb	r3, [r2, #0]
 800ee2e:	600b      	str	r3, [r1, #0]
 800ee30:	7812      	ldrb	r2, [r2, #0]
 800ee32:	1e10      	subs	r0, r2, #0
 800ee34:	bf18      	it	ne
 800ee36:	2001      	movne	r0, #1
 800ee38:	b002      	add	sp, #8
 800ee3a:	4770      	bx	lr
 800ee3c:	4610      	mov	r0, r2
 800ee3e:	e7fb      	b.n	800ee38 <__ascii_mbtowc+0x16>
 800ee40:	f06f 0001 	mvn.w	r0, #1
 800ee44:	e7f8      	b.n	800ee38 <__ascii_mbtowc+0x16>

0800ee46 <_realloc_r>:
 800ee46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4a:	4607      	mov	r7, r0
 800ee4c:	4614      	mov	r4, r2
 800ee4e:	460d      	mov	r5, r1
 800ee50:	b921      	cbnz	r1, 800ee5c <_realloc_r+0x16>
 800ee52:	4611      	mov	r1, r2
 800ee54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee58:	f7fd b9a8 	b.w	800c1ac <_malloc_r>
 800ee5c:	b92a      	cbnz	r2, 800ee6a <_realloc_r+0x24>
 800ee5e:	4625      	mov	r5, r4
 800ee60:	f7fd f8e4 	bl	800c02c <_free_r>
 800ee64:	4628      	mov	r0, r5
 800ee66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee6a:	f000 fa41 	bl	800f2f0 <_malloc_usable_size_r>
 800ee6e:	4284      	cmp	r4, r0
 800ee70:	4606      	mov	r6, r0
 800ee72:	d802      	bhi.n	800ee7a <_realloc_r+0x34>
 800ee74:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ee78:	d8f4      	bhi.n	800ee64 <_realloc_r+0x1e>
 800ee7a:	4621      	mov	r1, r4
 800ee7c:	4638      	mov	r0, r7
 800ee7e:	f7fd f995 	bl	800c1ac <_malloc_r>
 800ee82:	4680      	mov	r8, r0
 800ee84:	b908      	cbnz	r0, 800ee8a <_realloc_r+0x44>
 800ee86:	4645      	mov	r5, r8
 800ee88:	e7ec      	b.n	800ee64 <_realloc_r+0x1e>
 800ee8a:	42b4      	cmp	r4, r6
 800ee8c:	4622      	mov	r2, r4
 800ee8e:	4629      	mov	r1, r5
 800ee90:	bf28      	it	cs
 800ee92:	4632      	movcs	r2, r6
 800ee94:	f7ff fc52 	bl	800e73c <memcpy>
 800ee98:	4629      	mov	r1, r5
 800ee9a:	4638      	mov	r0, r7
 800ee9c:	f7fd f8c6 	bl	800c02c <_free_r>
 800eea0:	e7f1      	b.n	800ee86 <_realloc_r+0x40>

0800eea2 <__ascii_wctomb>:
 800eea2:	4603      	mov	r3, r0
 800eea4:	4608      	mov	r0, r1
 800eea6:	b141      	cbz	r1, 800eeba <__ascii_wctomb+0x18>
 800eea8:	2aff      	cmp	r2, #255	@ 0xff
 800eeaa:	d904      	bls.n	800eeb6 <__ascii_wctomb+0x14>
 800eeac:	228a      	movs	r2, #138	@ 0x8a
 800eeae:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb2:	601a      	str	r2, [r3, #0]
 800eeb4:	4770      	bx	lr
 800eeb6:	2001      	movs	r0, #1
 800eeb8:	700a      	strb	r2, [r1, #0]
 800eeba:	4770      	bx	lr

0800eebc <__sfputc_r>:
 800eebc:	6893      	ldr	r3, [r2, #8]
 800eebe:	3b01      	subs	r3, #1
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	b410      	push	{r4}
 800eec4:	6093      	str	r3, [r2, #8]
 800eec6:	da08      	bge.n	800eeda <__sfputc_r+0x1e>
 800eec8:	6994      	ldr	r4, [r2, #24]
 800eeca:	42a3      	cmp	r3, r4
 800eecc:	db01      	blt.n	800eed2 <__sfputc_r+0x16>
 800eece:	290a      	cmp	r1, #10
 800eed0:	d103      	bne.n	800eeda <__sfputc_r+0x1e>
 800eed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eed6:	f000 b933 	b.w	800f140 <__swbuf_r>
 800eeda:	6813      	ldr	r3, [r2, #0]
 800eedc:	1c58      	adds	r0, r3, #1
 800eede:	6010      	str	r0, [r2, #0]
 800eee0:	4608      	mov	r0, r1
 800eee2:	7019      	strb	r1, [r3, #0]
 800eee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eee8:	4770      	bx	lr

0800eeea <__sfputs_r>:
 800eeea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeec:	4606      	mov	r6, r0
 800eeee:	460f      	mov	r7, r1
 800eef0:	4614      	mov	r4, r2
 800eef2:	18d5      	adds	r5, r2, r3
 800eef4:	42ac      	cmp	r4, r5
 800eef6:	d101      	bne.n	800eefc <__sfputs_r+0x12>
 800eef8:	2000      	movs	r0, #0
 800eefa:	e007      	b.n	800ef0c <__sfputs_r+0x22>
 800eefc:	463a      	mov	r2, r7
 800eefe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef02:	4630      	mov	r0, r6
 800ef04:	f7ff ffda 	bl	800eebc <__sfputc_r>
 800ef08:	1c43      	adds	r3, r0, #1
 800ef0a:	d1f3      	bne.n	800eef4 <__sfputs_r+0xa>
 800ef0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ef10 <_vfiprintf_r>:
 800ef10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef14:	460d      	mov	r5, r1
 800ef16:	b09d      	sub	sp, #116	@ 0x74
 800ef18:	4614      	mov	r4, r2
 800ef1a:	4698      	mov	r8, r3
 800ef1c:	4606      	mov	r6, r0
 800ef1e:	b118      	cbz	r0, 800ef28 <_vfiprintf_r+0x18>
 800ef20:	6a03      	ldr	r3, [r0, #32]
 800ef22:	b90b      	cbnz	r3, 800ef28 <_vfiprintf_r+0x18>
 800ef24:	f7fb f9c2 	bl	800a2ac <__sinit>
 800ef28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef2a:	07d9      	lsls	r1, r3, #31
 800ef2c:	d405      	bmi.n	800ef3a <_vfiprintf_r+0x2a>
 800ef2e:	89ab      	ldrh	r3, [r5, #12]
 800ef30:	059a      	lsls	r2, r3, #22
 800ef32:	d402      	bmi.n	800ef3a <_vfiprintf_r+0x2a>
 800ef34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef36:	f7fc f9d1 	bl	800b2dc <__retarget_lock_acquire_recursive>
 800ef3a:	89ab      	ldrh	r3, [r5, #12]
 800ef3c:	071b      	lsls	r3, r3, #28
 800ef3e:	d501      	bpl.n	800ef44 <_vfiprintf_r+0x34>
 800ef40:	692b      	ldr	r3, [r5, #16]
 800ef42:	b99b      	cbnz	r3, 800ef6c <_vfiprintf_r+0x5c>
 800ef44:	4629      	mov	r1, r5
 800ef46:	4630      	mov	r0, r6
 800ef48:	f000 f938 	bl	800f1bc <__swsetup_r>
 800ef4c:	b170      	cbz	r0, 800ef6c <_vfiprintf_r+0x5c>
 800ef4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef50:	07dc      	lsls	r4, r3, #31
 800ef52:	d504      	bpl.n	800ef5e <_vfiprintf_r+0x4e>
 800ef54:	f04f 30ff 	mov.w	r0, #4294967295
 800ef58:	b01d      	add	sp, #116	@ 0x74
 800ef5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef5e:	89ab      	ldrh	r3, [r5, #12]
 800ef60:	0598      	lsls	r0, r3, #22
 800ef62:	d4f7      	bmi.n	800ef54 <_vfiprintf_r+0x44>
 800ef64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef66:	f7fc f9bb 	bl	800b2e0 <__retarget_lock_release_recursive>
 800ef6a:	e7f3      	b.n	800ef54 <_vfiprintf_r+0x44>
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef72:	f04f 0901 	mov.w	r9, #1
 800ef76:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800f12c <_vfiprintf_r+0x21c>
 800ef7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef7c:	2320      	movs	r3, #32
 800ef7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef82:	2330      	movs	r3, #48	@ 0x30
 800ef84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef88:	4623      	mov	r3, r4
 800ef8a:	469a      	mov	sl, r3
 800ef8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef90:	b10a      	cbz	r2, 800ef96 <_vfiprintf_r+0x86>
 800ef92:	2a25      	cmp	r2, #37	@ 0x25
 800ef94:	d1f9      	bne.n	800ef8a <_vfiprintf_r+0x7a>
 800ef96:	ebba 0b04 	subs.w	fp, sl, r4
 800ef9a:	d00b      	beq.n	800efb4 <_vfiprintf_r+0xa4>
 800ef9c:	465b      	mov	r3, fp
 800ef9e:	4622      	mov	r2, r4
 800efa0:	4629      	mov	r1, r5
 800efa2:	4630      	mov	r0, r6
 800efa4:	f7ff ffa1 	bl	800eeea <__sfputs_r>
 800efa8:	3001      	adds	r0, #1
 800efaa:	f000 80a7 	beq.w	800f0fc <_vfiprintf_r+0x1ec>
 800efae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efb0:	445a      	add	r2, fp
 800efb2:	9209      	str	r2, [sp, #36]	@ 0x24
 800efb4:	f89a 3000 	ldrb.w	r3, [sl]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	f000 809f 	beq.w	800f0fc <_vfiprintf_r+0x1ec>
 800efbe:	2300      	movs	r3, #0
 800efc0:	f04f 32ff 	mov.w	r2, #4294967295
 800efc4:	f10a 0a01 	add.w	sl, sl, #1
 800efc8:	9304      	str	r3, [sp, #16]
 800efca:	9307      	str	r3, [sp, #28]
 800efcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800efd0:	931a      	str	r3, [sp, #104]	@ 0x68
 800efd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efd6:	4654      	mov	r4, sl
 800efd8:	2205      	movs	r2, #5
 800efda:	4854      	ldr	r0, [pc, #336]	@ (800f12c <_vfiprintf_r+0x21c>)
 800efdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efe0:	f7fc f987 	bl	800b2f2 <memchr>
 800efe4:	9a04      	ldr	r2, [sp, #16]
 800efe6:	b9d8      	cbnz	r0, 800f020 <_vfiprintf_r+0x110>
 800efe8:	06d1      	lsls	r1, r2, #27
 800efea:	bf44      	itt	mi
 800efec:	2320      	movmi	r3, #32
 800efee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eff2:	0713      	lsls	r3, r2, #28
 800eff4:	bf44      	itt	mi
 800eff6:	232b      	movmi	r3, #43	@ 0x2b
 800eff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800effc:	f89a 3000 	ldrb.w	r3, [sl]
 800f000:	2b2a      	cmp	r3, #42	@ 0x2a
 800f002:	d015      	beq.n	800f030 <_vfiprintf_r+0x120>
 800f004:	9a07      	ldr	r2, [sp, #28]
 800f006:	4654      	mov	r4, sl
 800f008:	2000      	movs	r0, #0
 800f00a:	f04f 0c0a 	mov.w	ip, #10
 800f00e:	4621      	mov	r1, r4
 800f010:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f014:	3b30      	subs	r3, #48	@ 0x30
 800f016:	2b09      	cmp	r3, #9
 800f018:	d94b      	bls.n	800f0b2 <_vfiprintf_r+0x1a2>
 800f01a:	b1b0      	cbz	r0, 800f04a <_vfiprintf_r+0x13a>
 800f01c:	9207      	str	r2, [sp, #28]
 800f01e:	e014      	b.n	800f04a <_vfiprintf_r+0x13a>
 800f020:	eba0 0308 	sub.w	r3, r0, r8
 800f024:	46a2      	mov	sl, r4
 800f026:	fa09 f303 	lsl.w	r3, r9, r3
 800f02a:	4313      	orrs	r3, r2
 800f02c:	9304      	str	r3, [sp, #16]
 800f02e:	e7d2      	b.n	800efd6 <_vfiprintf_r+0xc6>
 800f030:	9b03      	ldr	r3, [sp, #12]
 800f032:	1d19      	adds	r1, r3, #4
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	9103      	str	r1, [sp, #12]
 800f03a:	bfbb      	ittet	lt
 800f03c:	425b      	neglt	r3, r3
 800f03e:	f042 0202 	orrlt.w	r2, r2, #2
 800f042:	9307      	strge	r3, [sp, #28]
 800f044:	9307      	strlt	r3, [sp, #28]
 800f046:	bfb8      	it	lt
 800f048:	9204      	strlt	r2, [sp, #16]
 800f04a:	7823      	ldrb	r3, [r4, #0]
 800f04c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f04e:	d10a      	bne.n	800f066 <_vfiprintf_r+0x156>
 800f050:	7863      	ldrb	r3, [r4, #1]
 800f052:	2b2a      	cmp	r3, #42	@ 0x2a
 800f054:	d132      	bne.n	800f0bc <_vfiprintf_r+0x1ac>
 800f056:	9b03      	ldr	r3, [sp, #12]
 800f058:	3402      	adds	r4, #2
 800f05a:	1d1a      	adds	r2, r3, #4
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f062:	9203      	str	r2, [sp, #12]
 800f064:	9305      	str	r3, [sp, #20]
 800f066:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f13c <_vfiprintf_r+0x22c>
 800f06a:	2203      	movs	r2, #3
 800f06c:	7821      	ldrb	r1, [r4, #0]
 800f06e:	4650      	mov	r0, sl
 800f070:	f7fc f93f 	bl	800b2f2 <memchr>
 800f074:	b138      	cbz	r0, 800f086 <_vfiprintf_r+0x176>
 800f076:	eba0 000a 	sub.w	r0, r0, sl
 800f07a:	2240      	movs	r2, #64	@ 0x40
 800f07c:	9b04      	ldr	r3, [sp, #16]
 800f07e:	3401      	adds	r4, #1
 800f080:	4082      	lsls	r2, r0
 800f082:	4313      	orrs	r3, r2
 800f084:	9304      	str	r3, [sp, #16]
 800f086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f08a:	2206      	movs	r2, #6
 800f08c:	4828      	ldr	r0, [pc, #160]	@ (800f130 <_vfiprintf_r+0x220>)
 800f08e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f092:	f7fc f92e 	bl	800b2f2 <memchr>
 800f096:	2800      	cmp	r0, #0
 800f098:	d03f      	beq.n	800f11a <_vfiprintf_r+0x20a>
 800f09a:	4b26      	ldr	r3, [pc, #152]	@ (800f134 <_vfiprintf_r+0x224>)
 800f09c:	bb1b      	cbnz	r3, 800f0e6 <_vfiprintf_r+0x1d6>
 800f09e:	9b03      	ldr	r3, [sp, #12]
 800f0a0:	3307      	adds	r3, #7
 800f0a2:	f023 0307 	bic.w	r3, r3, #7
 800f0a6:	3308      	adds	r3, #8
 800f0a8:	9303      	str	r3, [sp, #12]
 800f0aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0ac:	443b      	add	r3, r7
 800f0ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0b0:	e76a      	b.n	800ef88 <_vfiprintf_r+0x78>
 800f0b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0b6:	460c      	mov	r4, r1
 800f0b8:	2001      	movs	r0, #1
 800f0ba:	e7a8      	b.n	800f00e <_vfiprintf_r+0xfe>
 800f0bc:	2300      	movs	r3, #0
 800f0be:	3401      	adds	r4, #1
 800f0c0:	f04f 0c0a 	mov.w	ip, #10
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	9305      	str	r3, [sp, #20]
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0ce:	3a30      	subs	r2, #48	@ 0x30
 800f0d0:	2a09      	cmp	r2, #9
 800f0d2:	d903      	bls.n	800f0dc <_vfiprintf_r+0x1cc>
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d0c6      	beq.n	800f066 <_vfiprintf_r+0x156>
 800f0d8:	9105      	str	r1, [sp, #20]
 800f0da:	e7c4      	b.n	800f066 <_vfiprintf_r+0x156>
 800f0dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0e0:	4604      	mov	r4, r0
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	e7f0      	b.n	800f0c8 <_vfiprintf_r+0x1b8>
 800f0e6:	ab03      	add	r3, sp, #12
 800f0e8:	462a      	mov	r2, r5
 800f0ea:	a904      	add	r1, sp, #16
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	9300      	str	r3, [sp, #0]
 800f0f0:	4b11      	ldr	r3, [pc, #68]	@ (800f138 <_vfiprintf_r+0x228>)
 800f0f2:	f7fa fa87 	bl	8009604 <_printf_float>
 800f0f6:	4607      	mov	r7, r0
 800f0f8:	1c78      	adds	r0, r7, #1
 800f0fa:	d1d6      	bne.n	800f0aa <_vfiprintf_r+0x19a>
 800f0fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0fe:	07d9      	lsls	r1, r3, #31
 800f100:	d405      	bmi.n	800f10e <_vfiprintf_r+0x1fe>
 800f102:	89ab      	ldrh	r3, [r5, #12]
 800f104:	059a      	lsls	r2, r3, #22
 800f106:	d402      	bmi.n	800f10e <_vfiprintf_r+0x1fe>
 800f108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f10a:	f7fc f8e9 	bl	800b2e0 <__retarget_lock_release_recursive>
 800f10e:	89ab      	ldrh	r3, [r5, #12]
 800f110:	065b      	lsls	r3, r3, #25
 800f112:	f53f af1f 	bmi.w	800ef54 <_vfiprintf_r+0x44>
 800f116:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f118:	e71e      	b.n	800ef58 <_vfiprintf_r+0x48>
 800f11a:	ab03      	add	r3, sp, #12
 800f11c:	462a      	mov	r2, r5
 800f11e:	a904      	add	r1, sp, #16
 800f120:	4630      	mov	r0, r6
 800f122:	9300      	str	r3, [sp, #0]
 800f124:	4b04      	ldr	r3, [pc, #16]	@ (800f138 <_vfiprintf_r+0x228>)
 800f126:	f7fa fd09 	bl	8009b3c <_printf_i>
 800f12a:	e7e4      	b.n	800f0f6 <_vfiprintf_r+0x1e6>
 800f12c:	0800f786 	.word	0x0800f786
 800f130:	0800f790 	.word	0x0800f790
 800f134:	08009605 	.word	0x08009605
 800f138:	0800eeeb 	.word	0x0800eeeb
 800f13c:	0800f78c 	.word	0x0800f78c

0800f140 <__swbuf_r>:
 800f140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f142:	460e      	mov	r6, r1
 800f144:	4614      	mov	r4, r2
 800f146:	4605      	mov	r5, r0
 800f148:	b118      	cbz	r0, 800f152 <__swbuf_r+0x12>
 800f14a:	6a03      	ldr	r3, [r0, #32]
 800f14c:	b90b      	cbnz	r3, 800f152 <__swbuf_r+0x12>
 800f14e:	f7fb f8ad 	bl	800a2ac <__sinit>
 800f152:	69a3      	ldr	r3, [r4, #24]
 800f154:	60a3      	str	r3, [r4, #8]
 800f156:	89a3      	ldrh	r3, [r4, #12]
 800f158:	071a      	lsls	r2, r3, #28
 800f15a:	d501      	bpl.n	800f160 <__swbuf_r+0x20>
 800f15c:	6923      	ldr	r3, [r4, #16]
 800f15e:	b943      	cbnz	r3, 800f172 <__swbuf_r+0x32>
 800f160:	4621      	mov	r1, r4
 800f162:	4628      	mov	r0, r5
 800f164:	f000 f82a 	bl	800f1bc <__swsetup_r>
 800f168:	b118      	cbz	r0, 800f172 <__swbuf_r+0x32>
 800f16a:	f04f 37ff 	mov.w	r7, #4294967295
 800f16e:	4638      	mov	r0, r7
 800f170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f172:	6823      	ldr	r3, [r4, #0]
 800f174:	b2f6      	uxtb	r6, r6
 800f176:	6922      	ldr	r2, [r4, #16]
 800f178:	4637      	mov	r7, r6
 800f17a:	1a98      	subs	r0, r3, r2
 800f17c:	6963      	ldr	r3, [r4, #20]
 800f17e:	4283      	cmp	r3, r0
 800f180:	dc05      	bgt.n	800f18e <__swbuf_r+0x4e>
 800f182:	4621      	mov	r1, r4
 800f184:	4628      	mov	r0, r5
 800f186:	f7ff f94b 	bl	800e420 <_fflush_r>
 800f18a:	2800      	cmp	r0, #0
 800f18c:	d1ed      	bne.n	800f16a <__swbuf_r+0x2a>
 800f18e:	68a3      	ldr	r3, [r4, #8]
 800f190:	3b01      	subs	r3, #1
 800f192:	60a3      	str	r3, [r4, #8]
 800f194:	6823      	ldr	r3, [r4, #0]
 800f196:	1c5a      	adds	r2, r3, #1
 800f198:	6022      	str	r2, [r4, #0]
 800f19a:	701e      	strb	r6, [r3, #0]
 800f19c:	1c43      	adds	r3, r0, #1
 800f19e:	6962      	ldr	r2, [r4, #20]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d004      	beq.n	800f1ae <__swbuf_r+0x6e>
 800f1a4:	89a3      	ldrh	r3, [r4, #12]
 800f1a6:	07db      	lsls	r3, r3, #31
 800f1a8:	d5e1      	bpl.n	800f16e <__swbuf_r+0x2e>
 800f1aa:	2e0a      	cmp	r6, #10
 800f1ac:	d1df      	bne.n	800f16e <__swbuf_r+0x2e>
 800f1ae:	4621      	mov	r1, r4
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	f7ff f935 	bl	800e420 <_fflush_r>
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	d0d9      	beq.n	800f16e <__swbuf_r+0x2e>
 800f1ba:	e7d6      	b.n	800f16a <__swbuf_r+0x2a>

0800f1bc <__swsetup_r>:
 800f1bc:	b538      	push	{r3, r4, r5, lr}
 800f1be:	4b29      	ldr	r3, [pc, #164]	@ (800f264 <__swsetup_r+0xa8>)
 800f1c0:	4605      	mov	r5, r0
 800f1c2:	460c      	mov	r4, r1
 800f1c4:	6818      	ldr	r0, [r3, #0]
 800f1c6:	b118      	cbz	r0, 800f1d0 <__swsetup_r+0x14>
 800f1c8:	6a03      	ldr	r3, [r0, #32]
 800f1ca:	b90b      	cbnz	r3, 800f1d0 <__swsetup_r+0x14>
 800f1cc:	f7fb f86e 	bl	800a2ac <__sinit>
 800f1d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1d4:	0719      	lsls	r1, r3, #28
 800f1d6:	d422      	bmi.n	800f21e <__swsetup_r+0x62>
 800f1d8:	06da      	lsls	r2, r3, #27
 800f1da:	d407      	bmi.n	800f1ec <__swsetup_r+0x30>
 800f1dc:	2209      	movs	r2, #9
 800f1de:	602a      	str	r2, [r5, #0]
 800f1e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e8:	81a3      	strh	r3, [r4, #12]
 800f1ea:	e033      	b.n	800f254 <__swsetup_r+0x98>
 800f1ec:	0758      	lsls	r0, r3, #29
 800f1ee:	d512      	bpl.n	800f216 <__swsetup_r+0x5a>
 800f1f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1f2:	b141      	cbz	r1, 800f206 <__swsetup_r+0x4a>
 800f1f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1f8:	4299      	cmp	r1, r3
 800f1fa:	d002      	beq.n	800f202 <__swsetup_r+0x46>
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	f7fc ff15 	bl	800c02c <_free_r>
 800f202:	2300      	movs	r3, #0
 800f204:	6363      	str	r3, [r4, #52]	@ 0x34
 800f206:	89a3      	ldrh	r3, [r4, #12]
 800f208:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f20c:	81a3      	strh	r3, [r4, #12]
 800f20e:	2300      	movs	r3, #0
 800f210:	6063      	str	r3, [r4, #4]
 800f212:	6923      	ldr	r3, [r4, #16]
 800f214:	6023      	str	r3, [r4, #0]
 800f216:	89a3      	ldrh	r3, [r4, #12]
 800f218:	f043 0308 	orr.w	r3, r3, #8
 800f21c:	81a3      	strh	r3, [r4, #12]
 800f21e:	6923      	ldr	r3, [r4, #16]
 800f220:	b94b      	cbnz	r3, 800f236 <__swsetup_r+0x7a>
 800f222:	89a3      	ldrh	r3, [r4, #12]
 800f224:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f22c:	d003      	beq.n	800f236 <__swsetup_r+0x7a>
 800f22e:	4621      	mov	r1, r4
 800f230:	4628      	mov	r0, r5
 800f232:	f000 f88a 	bl	800f34a <__smakebuf_r>
 800f236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f23a:	f013 0201 	ands.w	r2, r3, #1
 800f23e:	d00a      	beq.n	800f256 <__swsetup_r+0x9a>
 800f240:	2200      	movs	r2, #0
 800f242:	60a2      	str	r2, [r4, #8]
 800f244:	6962      	ldr	r2, [r4, #20]
 800f246:	4252      	negs	r2, r2
 800f248:	61a2      	str	r2, [r4, #24]
 800f24a:	6922      	ldr	r2, [r4, #16]
 800f24c:	b942      	cbnz	r2, 800f260 <__swsetup_r+0xa4>
 800f24e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f252:	d1c5      	bne.n	800f1e0 <__swsetup_r+0x24>
 800f254:	bd38      	pop	{r3, r4, r5, pc}
 800f256:	0799      	lsls	r1, r3, #30
 800f258:	bf58      	it	pl
 800f25a:	6962      	ldrpl	r2, [r4, #20]
 800f25c:	60a2      	str	r2, [r4, #8]
 800f25e:	e7f4      	b.n	800f24a <__swsetup_r+0x8e>
 800f260:	2000      	movs	r0, #0
 800f262:	e7f7      	b.n	800f254 <__swsetup_r+0x98>
 800f264:	20000040 	.word	0x20000040

0800f268 <_raise_r>:
 800f268:	291f      	cmp	r1, #31
 800f26a:	b538      	push	{r3, r4, r5, lr}
 800f26c:	4605      	mov	r5, r0
 800f26e:	460c      	mov	r4, r1
 800f270:	d904      	bls.n	800f27c <_raise_r+0x14>
 800f272:	2316      	movs	r3, #22
 800f274:	6003      	str	r3, [r0, #0]
 800f276:	f04f 30ff 	mov.w	r0, #4294967295
 800f27a:	bd38      	pop	{r3, r4, r5, pc}
 800f27c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f27e:	b112      	cbz	r2, 800f286 <_raise_r+0x1e>
 800f280:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f284:	b94b      	cbnz	r3, 800f29a <_raise_r+0x32>
 800f286:	4628      	mov	r0, r5
 800f288:	f000 f830 	bl	800f2ec <_getpid_r>
 800f28c:	4622      	mov	r2, r4
 800f28e:	4601      	mov	r1, r0
 800f290:	4628      	mov	r0, r5
 800f292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f296:	f000 b817 	b.w	800f2c8 <_kill_r>
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d00a      	beq.n	800f2b4 <_raise_r+0x4c>
 800f29e:	1c59      	adds	r1, r3, #1
 800f2a0:	d103      	bne.n	800f2aa <_raise_r+0x42>
 800f2a2:	2316      	movs	r3, #22
 800f2a4:	6003      	str	r3, [r0, #0]
 800f2a6:	2001      	movs	r0, #1
 800f2a8:	e7e7      	b.n	800f27a <_raise_r+0x12>
 800f2aa:	2100      	movs	r1, #0
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f2b2:	4798      	blx	r3
 800f2b4:	2000      	movs	r0, #0
 800f2b6:	e7e0      	b.n	800f27a <_raise_r+0x12>

0800f2b8 <raise>:
 800f2b8:	4b02      	ldr	r3, [pc, #8]	@ (800f2c4 <raise+0xc>)
 800f2ba:	4601      	mov	r1, r0
 800f2bc:	6818      	ldr	r0, [r3, #0]
 800f2be:	f7ff bfd3 	b.w	800f268 <_raise_r>
 800f2c2:	bf00      	nop
 800f2c4:	20000040 	.word	0x20000040

0800f2c8 <_kill_r>:
 800f2c8:	b538      	push	{r3, r4, r5, lr}
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	4d06      	ldr	r5, [pc, #24]	@ (800f2e8 <_kill_r+0x20>)
 800f2ce:	4604      	mov	r4, r0
 800f2d0:	4608      	mov	r0, r1
 800f2d2:	4611      	mov	r1, r2
 800f2d4:	602b      	str	r3, [r5, #0]
 800f2d6:	f7f2 fffd 	bl	80022d4 <_kill>
 800f2da:	1c43      	adds	r3, r0, #1
 800f2dc:	d102      	bne.n	800f2e4 <_kill_r+0x1c>
 800f2de:	682b      	ldr	r3, [r5, #0]
 800f2e0:	b103      	cbz	r3, 800f2e4 <_kill_r+0x1c>
 800f2e2:	6023      	str	r3, [r4, #0]
 800f2e4:	bd38      	pop	{r3, r4, r5, pc}
 800f2e6:	bf00      	nop
 800f2e8:	200005f0 	.word	0x200005f0

0800f2ec <_getpid_r>:
 800f2ec:	f7f2 bfea 	b.w	80022c4 <_getpid>

0800f2f0 <_malloc_usable_size_r>:
 800f2f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2f4:	1f18      	subs	r0, r3, #4
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	bfbc      	itt	lt
 800f2fa:	580b      	ldrlt	r3, [r1, r0]
 800f2fc:	18c0      	addlt	r0, r0, r3
 800f2fe:	4770      	bx	lr

0800f300 <__swhatbuf_r>:
 800f300:	b570      	push	{r4, r5, r6, lr}
 800f302:	460c      	mov	r4, r1
 800f304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f308:	b096      	sub	sp, #88	@ 0x58
 800f30a:	4615      	mov	r5, r2
 800f30c:	2900      	cmp	r1, #0
 800f30e:	461e      	mov	r6, r3
 800f310:	da0c      	bge.n	800f32c <__swhatbuf_r+0x2c>
 800f312:	89a3      	ldrh	r3, [r4, #12]
 800f314:	2100      	movs	r1, #0
 800f316:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f31a:	bf14      	ite	ne
 800f31c:	2340      	movne	r3, #64	@ 0x40
 800f31e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f322:	2000      	movs	r0, #0
 800f324:	6031      	str	r1, [r6, #0]
 800f326:	602b      	str	r3, [r5, #0]
 800f328:	b016      	add	sp, #88	@ 0x58
 800f32a:	bd70      	pop	{r4, r5, r6, pc}
 800f32c:	466a      	mov	r2, sp
 800f32e:	f000 f849 	bl	800f3c4 <_fstat_r>
 800f332:	2800      	cmp	r0, #0
 800f334:	dbed      	blt.n	800f312 <__swhatbuf_r+0x12>
 800f336:	9901      	ldr	r1, [sp, #4]
 800f338:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f33c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f340:	4259      	negs	r1, r3
 800f342:	4159      	adcs	r1, r3
 800f344:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f348:	e7eb      	b.n	800f322 <__swhatbuf_r+0x22>

0800f34a <__smakebuf_r>:
 800f34a:	898b      	ldrh	r3, [r1, #12]
 800f34c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f34e:	079d      	lsls	r5, r3, #30
 800f350:	4606      	mov	r6, r0
 800f352:	460c      	mov	r4, r1
 800f354:	d507      	bpl.n	800f366 <__smakebuf_r+0x1c>
 800f356:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f35a:	6023      	str	r3, [r4, #0]
 800f35c:	6123      	str	r3, [r4, #16]
 800f35e:	2301      	movs	r3, #1
 800f360:	6163      	str	r3, [r4, #20]
 800f362:	b003      	add	sp, #12
 800f364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f366:	ab01      	add	r3, sp, #4
 800f368:	466a      	mov	r2, sp
 800f36a:	f7ff ffc9 	bl	800f300 <__swhatbuf_r>
 800f36e:	9f00      	ldr	r7, [sp, #0]
 800f370:	4605      	mov	r5, r0
 800f372:	4630      	mov	r0, r6
 800f374:	4639      	mov	r1, r7
 800f376:	f7fc ff19 	bl	800c1ac <_malloc_r>
 800f37a:	b948      	cbnz	r0, 800f390 <__smakebuf_r+0x46>
 800f37c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f380:	059a      	lsls	r2, r3, #22
 800f382:	d4ee      	bmi.n	800f362 <__smakebuf_r+0x18>
 800f384:	f023 0303 	bic.w	r3, r3, #3
 800f388:	f043 0302 	orr.w	r3, r3, #2
 800f38c:	81a3      	strh	r3, [r4, #12]
 800f38e:	e7e2      	b.n	800f356 <__smakebuf_r+0xc>
 800f390:	89a3      	ldrh	r3, [r4, #12]
 800f392:	6020      	str	r0, [r4, #0]
 800f394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f398:	81a3      	strh	r3, [r4, #12]
 800f39a:	9b01      	ldr	r3, [sp, #4]
 800f39c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f3a0:	b15b      	cbz	r3, 800f3ba <__smakebuf_r+0x70>
 800f3a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3a6:	4630      	mov	r0, r6
 800f3a8:	f000 f81e 	bl	800f3e8 <_isatty_r>
 800f3ac:	b128      	cbz	r0, 800f3ba <__smakebuf_r+0x70>
 800f3ae:	89a3      	ldrh	r3, [r4, #12]
 800f3b0:	f023 0303 	bic.w	r3, r3, #3
 800f3b4:	f043 0301 	orr.w	r3, r3, #1
 800f3b8:	81a3      	strh	r3, [r4, #12]
 800f3ba:	89a3      	ldrh	r3, [r4, #12]
 800f3bc:	431d      	orrs	r5, r3
 800f3be:	81a5      	strh	r5, [r4, #12]
 800f3c0:	e7cf      	b.n	800f362 <__smakebuf_r+0x18>
	...

0800f3c4 <_fstat_r>:
 800f3c4:	b538      	push	{r3, r4, r5, lr}
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	4d06      	ldr	r5, [pc, #24]	@ (800f3e4 <_fstat_r+0x20>)
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	4608      	mov	r0, r1
 800f3ce:	4611      	mov	r1, r2
 800f3d0:	602b      	str	r3, [r5, #0]
 800f3d2:	f7f2 ffdf 	bl	8002394 <_fstat>
 800f3d6:	1c43      	adds	r3, r0, #1
 800f3d8:	d102      	bne.n	800f3e0 <_fstat_r+0x1c>
 800f3da:	682b      	ldr	r3, [r5, #0]
 800f3dc:	b103      	cbz	r3, 800f3e0 <_fstat_r+0x1c>
 800f3de:	6023      	str	r3, [r4, #0]
 800f3e0:	bd38      	pop	{r3, r4, r5, pc}
 800f3e2:	bf00      	nop
 800f3e4:	200005f0 	.word	0x200005f0

0800f3e8 <_isatty_r>:
 800f3e8:	b538      	push	{r3, r4, r5, lr}
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	4d05      	ldr	r5, [pc, #20]	@ (800f404 <_isatty_r+0x1c>)
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	4608      	mov	r0, r1
 800f3f2:	602b      	str	r3, [r5, #0]
 800f3f4:	f7f2 ffde 	bl	80023b4 <_isatty>
 800f3f8:	1c43      	adds	r3, r0, #1
 800f3fa:	d102      	bne.n	800f402 <_isatty_r+0x1a>
 800f3fc:	682b      	ldr	r3, [r5, #0]
 800f3fe:	b103      	cbz	r3, 800f402 <_isatty_r+0x1a>
 800f400:	6023      	str	r3, [r4, #0]
 800f402:	bd38      	pop	{r3, r4, r5, pc}
 800f404:	200005f0 	.word	0x200005f0

0800f408 <_init>:
 800f408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f40a:	bf00      	nop
 800f40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f40e:	bc08      	pop	{r3}
 800f410:	469e      	mov	lr, r3
 800f412:	4770      	bx	lr

0800f414 <_fini>:
 800f414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f416:	bf00      	nop
 800f418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f41a:	bc08      	pop	{r3}
 800f41c:	469e      	mov	lr, r3
 800f41e:	4770      	bx	lr
