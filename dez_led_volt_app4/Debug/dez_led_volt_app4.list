
dez_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b874  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800ba70  0800ba70  0000ca70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf5c  0800bf5c  0000d1f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bf5c  0800bf5c  0000cf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf64  0800bf64  0000d1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf64  0800bf64  0000cf64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf68  0800bf68  0000cf68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800bf6c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200001f0  0800c15c  0000d1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  0800c15c  0000d494  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ef4  00000000  00000000  0000d226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003883  00000000  00000000  0002611a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  000299a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fba  00000000  00000000  0002ae38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c6dc  00000000  00000000  0002bdf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b0c  00000000  00000000  000584ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119c8a  00000000  00000000  00070fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018ac64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c34  00000000  00000000  0018aca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001918dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001f0 	.word	0x200001f0
 8000214:	00000000 	.word	0x00000000
 8000218:	0800ba54 	.word	0x0800ba54

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001f4 	.word	0x200001f4
 8000234:	0800ba54 	.word	0x0800ba54

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	@ 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2iz>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b28:	d215      	bcs.n	8000b56 <__aeabi_d2iz+0x36>
 8000b2a:	d511      	bpl.n	8000b50 <__aeabi_d2iz+0x30>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d912      	bls.n	8000b5c <__aeabi_d2iz+0x3c>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d105      	bne.n	8000b68 <__aeabi_d2iz+0x48>
 8000b5c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	bf08      	it	eq
 8000b62:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_d2uiz>:
 8000b70:	004a      	lsls	r2, r1, #1
 8000b72:	d211      	bcs.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b78:	d211      	bcs.n	8000b9e <__aeabi_d2uiz+0x2e>
 8000b7a:	d50d      	bpl.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d40e      	bmi.n	8000ba4 <__aeabi_d2uiz+0x34>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_d2uiz+0x3a>
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b9e6 	b.w	8001034 <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f83c 	bl	8000cec <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_d2lz>:
 8000c80:	b538      	push	{r3, r4, r5, lr}
 8000c82:	2200      	movs	r2, #0
 8000c84:	2300      	movs	r3, #0
 8000c86:	4604      	mov	r4, r0
 8000c88:	460d      	mov	r5, r1
 8000c8a:	f7ff ff0b 	bl	8000aa4 <__aeabi_dcmplt>
 8000c8e:	b928      	cbnz	r0, 8000c9c <__aeabi_d2lz+0x1c>
 8000c90:	4620      	mov	r0, r4
 8000c92:	4629      	mov	r1, r5
 8000c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c98:	f000 b80a 	b.w	8000cb0 <__aeabi_d2ulz>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ca2:	f000 f805 	bl	8000cb0 <__aeabi_d2ulz>
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	bd38      	pop	{r3, r4, r5, pc}
 8000cae:	bf00      	nop

08000cb0 <__aeabi_d2ulz>:
 8000cb0:	b5d0      	push	{r4, r6, r7, lr}
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <__aeabi_d2ulz+0x34>)
 8000cb6:	4606      	mov	r6, r0
 8000cb8:	460f      	mov	r7, r1
 8000cba:	f7ff fc81 	bl	80005c0 <__aeabi_dmul>
 8000cbe:	f7ff ff57 	bl	8000b70 <__aeabi_d2uiz>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	f7ff fc02 	bl	80004cc <__aeabi_ui2d>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <__aeabi_d2ulz+0x38>)
 8000ccc:	f7ff fc78 	bl	80005c0 <__aeabi_dmul>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	4639      	mov	r1, r7
 8000cd8:	f7ff faba 	bl	8000250 <__aeabi_dsub>
 8000cdc:	f7ff ff48 	bl	8000b70 <__aeabi_d2uiz>
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce4:	3df00000 	.word	0x3df00000
 8000ce8:	41f00000 	.word	0x41f00000

08000cec <__udivmoddi4>:
 8000cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cf0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000cf2:	4688      	mov	r8, r1
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	468e      	mov	lr, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d14a      	bne.n	8000d92 <__udivmoddi4+0xa6>
 8000cfc:	428a      	cmp	r2, r1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	d95f      	bls.n	8000dc2 <__udivmoddi4+0xd6>
 8000d02:	fab2 f682 	clz	r6, r2
 8000d06:	b14e      	cbz	r6, 8000d1c <__udivmoddi4+0x30>
 8000d08:	f1c6 0320 	rsb	r3, r6, #32
 8000d0c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d10:	40b7      	lsls	r7, r6
 8000d12:	40b4      	lsls	r4, r6
 8000d14:	fa20 f303 	lsr.w	r3, r0, r3
 8000d18:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d1c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d20:	fa1f fc87 	uxth.w	ip, r7
 8000d24:	0c23      	lsrs	r3, r4, #16
 8000d26:	fbbe f1f8 	udiv	r1, lr, r8
 8000d2a:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d32:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x5e>
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d40:	d202      	bcs.n	8000d48 <__udivmoddi4+0x5c>
 8000d42:	429a      	cmp	r2, r3
 8000d44:	f200 8154 	bhi.w	8000ff0 <__udivmoddi4+0x304>
 8000d48:	4601      	mov	r1, r0
 8000d4a:	1a9b      	subs	r3, r3, r2
 8000d4c:	b2a2      	uxth	r2, r4
 8000d4e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d52:	fb08 3310 	mls	r3, r8, r0, r3
 8000d56:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000d5e:	4594      	cmp	ip, r2
 8000d60:	d90b      	bls.n	8000d7a <__udivmoddi4+0x8e>
 8000d62:	18ba      	adds	r2, r7, r2
 8000d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d68:	bf2c      	ite	cs
 8000d6a:	2401      	movcs	r4, #1
 8000d6c:	2400      	movcc	r4, #0
 8000d6e:	4594      	cmp	ip, r2
 8000d70:	d902      	bls.n	8000d78 <__udivmoddi4+0x8c>
 8000d72:	2c00      	cmp	r4, #0
 8000d74:	f000 813f 	beq.w	8000ff6 <__udivmoddi4+0x30a>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7e:	eba2 020c 	sub.w	r2, r2, ip
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa2>
 8000d86:	40f2      	lsrs	r2, r6
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e9c5 2300 	strd	r2, r3, [r5]
 8000d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xb6>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb0>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d14e      	bne.n	8000e48 <__udivmoddi4+0x15c>
 8000daa:	4543      	cmp	r3, r8
 8000dac:	f0c0 8112 	bcc.w	8000fd4 <__udivmoddi4+0x2e8>
 8000db0:	4282      	cmp	r2, r0
 8000db2:	f240 810f 	bls.w	8000fd4 <__udivmoddi4+0x2e8>
 8000db6:	4608      	mov	r0, r1
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d0e8      	beq.n	8000d8e <__udivmoddi4+0xa2>
 8000dbc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dc0:	e7e5      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	f000 80ac 	beq.w	8000f20 <__udivmoddi4+0x234>
 8000dc8:	fab2 f682 	clz	r6, r2
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	f040 80bb 	bne.w	8000f48 <__udivmoddi4+0x25c>
 8000dd2:	1a8b      	subs	r3, r1, r2
 8000dd4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000dd8:	b2bc      	uxth	r4, r7
 8000dda:	2101      	movs	r1, #1
 8000ddc:	0c02      	lsrs	r2, r0, #16
 8000dde:	b280      	uxth	r0, r0
 8000de0:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000de8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000dec:	fb04 f20c 	mul.w	r2, r4, ip
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d90e      	bls.n	8000e12 <__udivmoddi4+0x126>
 8000df4:	18fb      	adds	r3, r7, r3
 8000df6:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dfa:	bf2c      	ite	cs
 8000dfc:	f04f 0901 	movcs.w	r9, #1
 8000e00:	f04f 0900 	movcc.w	r9, #0
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d903      	bls.n	8000e10 <__udivmoddi4+0x124>
 8000e08:	f1b9 0f00 	cmp.w	r9, #0
 8000e0c:	f000 80ec 	beq.w	8000fe8 <__udivmoddi4+0x2fc>
 8000e10:	46c4      	mov	ip, r8
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e1c:	fb04 f408 	mul.w	r4, r4, r8
 8000e20:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e24:	4294      	cmp	r4, r2
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x154>
 8000e28:	18ba      	adds	r2, r7, r2
 8000e2a:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e2e:	bf2c      	ite	cs
 8000e30:	2001      	movcs	r0, #1
 8000e32:	2000      	movcc	r0, #0
 8000e34:	4294      	cmp	r4, r2
 8000e36:	d902      	bls.n	8000e3e <__udivmoddi4+0x152>
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	f000 80d1 	beq.w	8000fe0 <__udivmoddi4+0x2f4>
 8000e3e:	4698      	mov	r8, r3
 8000e40:	1b12      	subs	r2, r2, r4
 8000e42:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e46:	e79d      	b.n	8000d84 <__udivmoddi4+0x98>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa08 f401 	lsl.w	r4, r8, r1
 8000e52:	fa00 f901 	lsl.w	r9, r0, r1
 8000e56:	fa22 f706 	lsr.w	r7, r2, r6
 8000e5a:	fa28 f806 	lsr.w	r8, r8, r6
 8000e5e:	408a      	lsls	r2, r1
 8000e60:	431f      	orrs	r7, r3
 8000e62:	fa20 f306 	lsr.w	r3, r0, r6
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	4323      	orrs	r3, r4
 8000e6a:	fa1f fc87 	uxth.w	ip, r7
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fbb8 fef0 	udiv	lr, r8, r0
 8000e74:	fb00 881e 	mls	r8, r0, lr, r8
 8000e78:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000e7c:	fb0e f80c 	mul.w	r8, lr, ip
 8000e80:	45a0      	cmp	r8, r4
 8000e82:	d90e      	bls.n	8000ea2 <__udivmoddi4+0x1b6>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8a:	bf2c      	ite	cs
 8000e8c:	f04f 0b01 	movcs.w	fp, #1
 8000e90:	f04f 0b00 	movcc.w	fp, #0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d903      	bls.n	8000ea0 <__udivmoddi4+0x1b4>
 8000e98:	f1bb 0f00 	cmp.w	fp, #0
 8000e9c:	f000 80b8 	beq.w	8001010 <__udivmoddi4+0x324>
 8000ea0:	46d6      	mov	lr, sl
 8000ea2:	eba4 0408 	sub.w	r4, r4, r8
 8000ea6:	fa1f f883 	uxth.w	r8, r3
 8000eaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eae:	fb00 4413 	mls	r4, r0, r3, r4
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000eba:	45a4      	cmp	ip, r4
 8000ebc:	d90e      	bls.n	8000edc <__udivmoddi4+0x1f0>
 8000ebe:	193c      	adds	r4, r7, r4
 8000ec0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec4:	bf2c      	ite	cs
 8000ec6:	f04f 0801 	movcs.w	r8, #1
 8000eca:	f04f 0800 	movcc.w	r8, #0
 8000ece:	45a4      	cmp	ip, r4
 8000ed0:	d903      	bls.n	8000eda <__udivmoddi4+0x1ee>
 8000ed2:	f1b8 0f00 	cmp.w	r8, #0
 8000ed6:	f000 809f 	beq.w	8001018 <__udivmoddi4+0x32c>
 8000eda:	4603      	mov	r3, r0
 8000edc:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ee0:	eba4 040c 	sub.w	r4, r4, ip
 8000ee4:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ee8:	4564      	cmp	r4, ip
 8000eea:	4673      	mov	r3, lr
 8000eec:	46e0      	mov	r8, ip
 8000eee:	d302      	bcc.n	8000ef6 <__udivmoddi4+0x20a>
 8000ef0:	d107      	bne.n	8000f02 <__udivmoddi4+0x216>
 8000ef2:	45f1      	cmp	r9, lr
 8000ef4:	d205      	bcs.n	8000f02 <__udivmoddi4+0x216>
 8000ef6:	ebbe 0302 	subs.w	r3, lr, r2
 8000efa:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000efe:	3801      	subs	r0, #1
 8000f00:	46e0      	mov	r8, ip
 8000f02:	b15d      	cbz	r5, 8000f1c <__udivmoddi4+0x230>
 8000f04:	ebb9 0203 	subs.w	r2, r9, r3
 8000f08:	eb64 0408 	sbc.w	r4, r4, r8
 8000f0c:	fa04 f606 	lsl.w	r6, r4, r6
 8000f10:	fa22 f301 	lsr.w	r3, r2, r1
 8000f14:	40cc      	lsrs	r4, r1
 8000f16:	431e      	orrs	r6, r3
 8000f18:	e9c5 6400 	strd	r6, r4, [r5]
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	e736      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000f20:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f24:	0c01      	lsrs	r1, r0, #16
 8000f26:	4614      	mov	r4, r2
 8000f28:	b280      	uxth	r0, r0
 8000f2a:	4696      	mov	lr, r2
 8000f2c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f30:	2620      	movs	r6, #32
 8000f32:	4690      	mov	r8, r2
 8000f34:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f38:	4610      	mov	r0, r2
 8000f3a:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f3e:	eba3 0308 	sub.w	r3, r3, r8
 8000f42:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f46:	e74b      	b.n	8000de0 <__udivmoddi4+0xf4>
 8000f48:	40b7      	lsls	r7, r6
 8000f4a:	f1c6 0320 	rsb	r3, r6, #32
 8000f4e:	fa01 f206 	lsl.w	r2, r1, r6
 8000f52:	fa21 f803 	lsr.w	r8, r1, r3
 8000f56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f5a:	fa20 f303 	lsr.w	r3, r0, r3
 8000f5e:	b2bc      	uxth	r4, r7
 8000f60:	40b0      	lsls	r0, r6
 8000f62:	4313      	orrs	r3, r2
 8000f64:	0c02      	lsrs	r2, r0, #16
 8000f66:	0c19      	lsrs	r1, r3, #16
 8000f68:	b280      	uxth	r0, r0
 8000f6a:	fbb8 f9fe 	udiv	r9, r8, lr
 8000f6e:	fb0e 8819 	mls	r8, lr, r9, r8
 8000f72:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	4588      	cmp	r8, r1
 8000f7c:	d951      	bls.n	8001022 <__udivmoddi4+0x336>
 8000f7e:	1879      	adds	r1, r7, r1
 8000f80:	f109 3cff 	add.w	ip, r9, #4294967295
 8000f84:	bf2c      	ite	cs
 8000f86:	f04f 0a01 	movcs.w	sl, #1
 8000f8a:	f04f 0a00 	movcc.w	sl, #0
 8000f8e:	4588      	cmp	r8, r1
 8000f90:	d902      	bls.n	8000f98 <__udivmoddi4+0x2ac>
 8000f92:	f1ba 0f00 	cmp.w	sl, #0
 8000f96:	d031      	beq.n	8000ffc <__udivmoddi4+0x310>
 8000f98:	eba1 0108 	sub.w	r1, r1, r8
 8000f9c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa0:	fb09 f804 	mul.w	r8, r9, r4
 8000fa4:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fae:	4543      	cmp	r3, r8
 8000fb0:	d235      	bcs.n	800101e <__udivmoddi4+0x332>
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fb8:	bf2c      	ite	cs
 8000fba:	f04f 0a01 	movcs.w	sl, #1
 8000fbe:	f04f 0a00 	movcc.w	sl, #0
 8000fc2:	4543      	cmp	r3, r8
 8000fc4:	d2bb      	bcs.n	8000f3e <__udivmoddi4+0x252>
 8000fc6:	f1ba 0f00 	cmp.w	sl, #0
 8000fca:	d1b8      	bne.n	8000f3e <__udivmoddi4+0x252>
 8000fcc:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd0:	443b      	add	r3, r7
 8000fd2:	e7b4      	b.n	8000f3e <__udivmoddi4+0x252>
 8000fd4:	1a84      	subs	r4, r0, r2
 8000fd6:	eb68 0203 	sbc.w	r2, r8, r3
 8000fda:	2001      	movs	r0, #1
 8000fdc:	4696      	mov	lr, r2
 8000fde:	e6eb      	b.n	8000db8 <__udivmoddi4+0xcc>
 8000fe0:	443a      	add	r2, r7
 8000fe2:	f1a8 0802 	sub.w	r8, r8, #2
 8000fe6:	e72b      	b.n	8000e40 <__udivmoddi4+0x154>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	443b      	add	r3, r7
 8000fee:	e710      	b.n	8000e12 <__udivmoddi4+0x126>
 8000ff0:	3902      	subs	r1, #2
 8000ff2:	443b      	add	r3, r7
 8000ff4:	e6a9      	b.n	8000d4a <__udivmoddi4+0x5e>
 8000ff6:	443a      	add	r2, r7
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e6be      	b.n	8000d7a <__udivmoddi4+0x8e>
 8000ffc:	eba7 0808 	sub.w	r8, r7, r8
 8001000:	f1a9 0c02 	sub.w	ip, r9, #2
 8001004:	4441      	add	r1, r8
 8001006:	fbb1 f9fe 	udiv	r9, r1, lr
 800100a:	fb09 f804 	mul.w	r8, r9, r4
 800100e:	e7c9      	b.n	8000fa4 <__udivmoddi4+0x2b8>
 8001010:	f1ae 0e02 	sub.w	lr, lr, #2
 8001014:	443c      	add	r4, r7
 8001016:	e744      	b.n	8000ea2 <__udivmoddi4+0x1b6>
 8001018:	3b02      	subs	r3, #2
 800101a:	443c      	add	r4, r7
 800101c:	e75e      	b.n	8000edc <__udivmoddi4+0x1f0>
 800101e:	4649      	mov	r1, r9
 8001020:	e78d      	b.n	8000f3e <__udivmoddi4+0x252>
 8001022:	eba1 0108 	sub.w	r1, r1, r8
 8001026:	46cc      	mov	ip, r9
 8001028:	fbb1 f9fe 	udiv	r9, r1, lr
 800102c:	fb09 f804 	mul.w	r8, r9, r4
 8001030:	e7b8      	b.n	8000fa4 <__udivmoddi4+0x2b8>
 8001032:	bf00      	nop

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800105a:	4b45      	ldr	r3, [pc, #276]	@ (8001170 <MX_ADC1_Init+0x138>)
 800105c:	4a45      	ldr	r2, [pc, #276]	@ (8001174 <MX_ADC1_Init+0x13c>)
 800105e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001060:	4b43      	ldr	r3, [pc, #268]	@ (8001170 <MX_ADC1_Init+0x138>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001066:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <MX_ADC1_Init+0x138>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106c:	4b40      	ldr	r3, [pc, #256]	@ (8001170 <MX_ADC1_Init+0x138>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001072:	4b3f      	ldr	r3, [pc, #252]	@ (8001170 <MX_ADC1_Init+0x138>)
 8001074:	2201      	movs	r2, #1
 8001076:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001078:	4b3d      	ldr	r3, [pc, #244]	@ (8001170 <MX_ADC1_Init+0x138>)
 800107a:	2204      	movs	r2, #4
 800107c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800107e:	4b3c      	ldr	r3, [pc, #240]	@ (8001170 <MX_ADC1_Init+0x138>)
 8001080:	2200      	movs	r2, #0
 8001082:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001084:	4b3a      	ldr	r3, [pc, #232]	@ (8001170 <MX_ADC1_Init+0x138>)
 8001086:	2200      	movs	r2, #0
 8001088:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800108a:	4b39      	ldr	r3, [pc, #228]	@ (8001170 <MX_ADC1_Init+0x138>)
 800108c:	2204      	movs	r2, #4
 800108e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001090:	4b37      	ldr	r3, [pc, #220]	@ (8001170 <MX_ADC1_Init+0x138>)
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001098:	4b35      	ldr	r3, [pc, #212]	@ (8001170 <MX_ADC1_Init+0x138>)
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109e:	4b34      	ldr	r3, [pc, #208]	@ (8001170 <MX_ADC1_Init+0x138>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a4:	4b32      	ldr	r3, [pc, #200]	@ (8001170 <MX_ADC1_Init+0x138>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ac:	4b30      	ldr	r3, [pc, #192]	@ (8001170 <MX_ADC1_Init+0x138>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <MX_ADC1_Init+0x138>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ba:	482d      	ldr	r0, [pc, #180]	@ (8001170 <MX_ADC1_Init+0x138>)
 80010bc:	f001 fa46 	bl	800254c <HAL_ADC_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010c6:	f000 fc89 	bl	80019dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4826      	ldr	r0, [pc, #152]	@ (8001170 <MX_ADC1_Init+0x138>)
 80010d6:	f001 ff95 	bl	8003004 <HAL_ADCEx_MultiModeConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010e0:	f000 fc7c 	bl	80019dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010e4:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <MX_ADC1_Init+0x140>)
 80010e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e8:	2306      	movs	r3, #6
 80010ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f0:	237f      	movs	r3, #127	@ 0x7f
 80010f2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f4:	2304      	movs	r3, #4
 80010f6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	481b      	ldr	r0, [pc, #108]	@ (8001170 <MX_ADC1_Init+0x138>)
 8001102:	f001 fb6f 	bl	80027e4 <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800110c:	f000 fc66 	bl	80019dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001110:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <MX_ADC1_Init+0x144>)
 8001112:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001114:	230c      	movs	r3, #12
 8001116:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001118:	2307      	movs	r3, #7
 800111a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	4813      	ldr	r0, [pc, #76]	@ (8001170 <MX_ADC1_Init+0x138>)
 8001122:	f001 fb5f 	bl	80027e4 <HAL_ADC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 800112c:	f000 fc56 	bl	80019dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <MX_ADC1_Init+0x148>)
 8001132:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001134:	2312      	movs	r3, #18
 8001136:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4619      	mov	r1, r3
 800113c:	480c      	ldr	r0, [pc, #48]	@ (8001170 <MX_ADC1_Init+0x138>)
 800113e:	f001 fb51 	bl	80027e4 <HAL_ADC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8001148:	f000 fc48 	bl	80019dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800114c:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <MX_ADC1_Init+0x14c>)
 800114e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001150:	2318      	movs	r3, #24
 8001152:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	@ (8001170 <MX_ADC1_Init+0x138>)
 800115a:	f001 fb43 	bl	80027e4 <HAL_ADC_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8001164:	f000 fc3a 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	3728      	adds	r7, #40	@ 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000020c 	.word	0x2000020c
 8001174:	42028000 	.word	0x42028000
 8001178:	14f00020 	.word	0x14f00020
 800117c:	c7520000 	.word	0xc7520000
 8001180:	80000001 	.word	0x80000001
 8001184:	cb840000 	.word	0xcb840000

08001188 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0ae      	sub	sp, #184	@ 0xb8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2294      	movs	r2, #148	@ 0x94
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f007 f858 	bl	800825e <memset>
  if(adcHandle->Instance==ADC1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a27      	ldr	r2, [pc, #156]	@ (8001250 <HAL_ADC_MspInit+0xc8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d146      	bne.n	8001246 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80011c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 80011c6:	2301      	movs	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80011ce:	2310      	movs	r3, #16
 80011d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011d2:	2307      	movs	r3, #7
 80011d4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011da:	2302      	movs	r3, #2
 80011dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 fd51 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80011f4:	f000 fbf2 	bl	80019dc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011f8:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <HAL_ADC_MspInit+0xcc>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fc:	4a15      	ldr	r2, [pc, #84]	@ (8001254 <HAL_ADC_MspInit+0xcc>)
 80011fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001202:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001204:	4b13      	ldr	r3, [pc, #76]	@ (8001254 <HAL_ADC_MspInit+0xcc>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001208:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <HAL_ADC_MspInit+0xcc>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001214:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <HAL_ADC_MspInit+0xcc>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121c:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <HAL_ADC_MspInit+0xcc>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001228:	2301      	movs	r3, #1
 800122a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122e:	2303      	movs	r3, #3
 8001230:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	@ (8001258 <HAL_ADC_MspInit+0xd0>)
 8001242:	f002 fb39 	bl	80038b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001246:	bf00      	nop
 8001248:	37b8      	adds	r7, #184	@ 0xb8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	42028000 	.word	0x42028000
 8001254:	40021000 	.word	0x40021000
 8001258:	42020000 	.word	0x42020000

0800125c <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	@ 0x28
 8001260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	4b34      	ldr	r3, [pc, #208]	@ (8001344 <MX_GPIO_Init+0xe8>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a33      	ldr	r2, [pc, #204]	@ (8001344 <MX_GPIO_Init+0xe8>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b31      	ldr	r3, [pc, #196]	@ (8001344 <MX_GPIO_Init+0xe8>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128a:	4b2e      	ldr	r3, [pc, #184]	@ (8001344 <MX_GPIO_Init+0xe8>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	4a2d      	ldr	r2, [pc, #180]	@ (8001344 <MX_GPIO_Init+0xe8>)
 8001290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001296:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <MX_GPIO_Init+0xe8>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <MX_GPIO_Init+0xe8>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	4a27      	ldr	r2, [pc, #156]	@ (8001344 <MX_GPIO_Init+0xe8>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ae:	4b25      	ldr	r3, [pc, #148]	@ (8001344 <MX_GPIO_Init+0xe8>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <MX_GPIO_Init+0xe8>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	4a21      	ldr	r2, [pc, #132]	@ (8001344 <MX_GPIO_Init+0xe8>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <MX_GPIO_Init+0xe8>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012d8:	481b      	ldr	r0, [pc, #108]	@ (8001348 <MX_GPIO_Init+0xec>)
 80012da:	f002 fc6d 	bl	8003bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2101      	movs	r1, #1
 80012e2:	481a      	ldr	r0, [pc, #104]	@ (800134c <MX_GPIO_Init+0xf0>)
 80012e4:	f002 fc68 	bl	8003bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	4811      	ldr	r0, [pc, #68]	@ (8001348 <MX_GPIO_Init+0xec>)
 8001302:	f002 fad9 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Bat23_Pin */
  GPIO_InitStruct.Pin = Bat23_Pin;
 8001306:	2302      	movs	r3, #2
 8001308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Bat23_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	480d      	ldr	r0, [pc, #52]	@ (8001350 <MX_GPIO_Init+0xf4>)
 800131a:	f002 facd 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800131e:	2301      	movs	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	@ (800134c <MX_GPIO_Init+0xf0>)
 8001336:	f002 fabf 	bl	80038b8 <HAL_GPIO_Init>

}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	@ 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	42020800 	.word	0x42020800
 800134c:	42020400 	.word	0x42020400
 8001350:	42020000 	.word	0x42020000

08001354 <convert_to_timestamp>:
/* USER CODE BEGIN 0 */
/**
  * @brief  Converts RTC date and time to timestamp (seconds since 2000-01-01)
  */
static uint32_t convert_to_timestamp(RTC_DateTypeDef date, RTC_TimeTypeDef time)
{
 8001354:	b084      	sub	sp, #16
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	f107 0014 	add.w	r0, r7, #20
 8001362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    return (date.Year * 365 * 24 * 3600) +
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	461a      	mov	r2, r3
 800136a:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <convert_to_timestamp+0x64>)
 800136c:	fb03 f202 	mul.w	r2, r3, r2
           ((date.Month-1) * 30 * 24 * 3600) +
 8001370:	797b      	ldrb	r3, [r7, #5]
 8001372:	3b01      	subs	r3, #1
 8001374:	4911      	ldr	r1, [pc, #68]	@ (80013bc <convert_to_timestamp+0x68>)
 8001376:	fb01 f303 	mul.w	r3, r1, r3
    return (date.Year * 365 * 24 * 3600) +
 800137a:	441a      	add	r2, r3
           ((date.Date-1) * 24 * 3600) +
 800137c:	79bb      	ldrb	r3, [r7, #6]
 800137e:	3b01      	subs	r3, #1
 8001380:	490f      	ldr	r1, [pc, #60]	@ (80013c0 <convert_to_timestamp+0x6c>)
 8001382:	fb01 f303 	mul.w	r3, r1, r3
           ((date.Month-1) * 30 * 24 * 3600) +
 8001386:	441a      	add	r2, r3
           (time.Hours * 3600) +
 8001388:	7d3b      	ldrb	r3, [r7, #20]
 800138a:	4619      	mov	r1, r3
 800138c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8001390:	fb01 f303 	mul.w	r3, r1, r3
           ((date.Date-1) * 24 * 3600) +
 8001394:	441a      	add	r2, r3
           (time.Minutes * 60) +
 8001396:	7d7b      	ldrb	r3, [r7, #21]
 8001398:	4619      	mov	r1, r3
 800139a:	460b      	mov	r3, r1
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	1a5b      	subs	r3, r3, r1
 80013a0:	009b      	lsls	r3, r3, #2
           (time.Hours * 3600) +
 80013a2:	4413      	add	r3, r2
           time.Seconds;
 80013a4:	7dba      	ldrb	r2, [r7, #22]
           (time.Minutes * 60) +
 80013a6:	4413      	add	r3, r2
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	b004      	add	sp, #16
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	01e13380 	.word	0x01e13380
 80013bc:	00278d00 	.word	0x00278d00
 80013c0:	00015180 	.word	0x00015180

080013c4 <convert_from_timestamp>:

/**
  * @brief  Converts timestamp to RTC date and time
  */
static void convert_from_timestamp(uint32_t timestamp, RTC_DateTypeDef* date, RTC_TimeTypeDef* time)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
    time->Seconds = timestamp % 60;
 80013d0:	68f9      	ldr	r1, [r7, #12]
 80013d2:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <convert_from_timestamp+0xec>)
 80013d4:	fba3 2301 	umull	r2, r3, r3, r1
 80013d8:	095a      	lsrs	r2, r3, #5
 80013da:	4613      	mov	r3, r2
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	1aca      	subs	r2, r1, r3
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	709a      	strb	r2, [r3, #2]
    timestamp /= 60;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4a30      	ldr	r2, [pc, #192]	@ (80014b0 <convert_from_timestamp+0xec>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	60fb      	str	r3, [r7, #12]
    time->Minutes = timestamp % 60;
 80013f6:	68f9      	ldr	r1, [r7, #12]
 80013f8:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <convert_from_timestamp+0xec>)
 80013fa:	fba3 2301 	umull	r2, r3, r3, r1
 80013fe:	095a      	lsrs	r2, r3, #5
 8001400:	4613      	mov	r3, r2
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	1a9b      	subs	r3, r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	1aca      	subs	r2, r1, r3
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	705a      	strb	r2, [r3, #1]
    timestamp /= 60;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4a27      	ldr	r2, [pc, #156]	@ (80014b0 <convert_from_timestamp+0xec>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	095b      	lsrs	r3, r3, #5
 800141a:	60fb      	str	r3, [r7, #12]
    time->Hours = timestamp % 24;
 800141c:	68f9      	ldr	r1, [r7, #12]
 800141e:	4b25      	ldr	r3, [pc, #148]	@ (80014b4 <convert_from_timestamp+0xf0>)
 8001420:	fba3 2301 	umull	r2, r3, r3, r1
 8001424:	091a      	lsrs	r2, r3, #4
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	1aca      	subs	r2, r1, r3
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	701a      	strb	r2, [r3, #0]
    timestamp /= 24;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4a1e      	ldr	r2, [pc, #120]	@ (80014b4 <convert_from_timestamp+0xf0>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	60fb      	str	r3, [r7, #12]

    date->Date = (timestamp % 30) + 1;
 8001442:	68f9      	ldr	r1, [r7, #12]
 8001444:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <convert_from_timestamp+0xec>)
 8001446:	fba3 2301 	umull	r2, r3, r3, r1
 800144a:	091a      	lsrs	r2, r3, #4
 800144c:	4613      	mov	r3, r2
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	1aca      	subs	r2, r1, r3
 8001456:	b2d3      	uxtb	r3, r2
 8001458:	3301      	adds	r3, #1
 800145a:	b2da      	uxtb	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	709a      	strb	r2, [r3, #2]
    timestamp /= 30;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <convert_from_timestamp+0xec>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	60fb      	str	r3, [r7, #12]
    date->Month = (timestamp % 12) + 1;
 800146c:	68f9      	ldr	r1, [r7, #12]
 800146e:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <convert_from_timestamp+0xf0>)
 8001470:	fba3 2301 	umull	r2, r3, r3, r1
 8001474:	08da      	lsrs	r2, r3, #3
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	1aca      	subs	r2, r1, r3
 8001480:	b2d3      	uxtb	r3, r2
 8001482:	3301      	adds	r3, #1
 8001484:	b2da      	uxtb	r2, r3
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	705a      	strb	r2, [r3, #1]
    timestamp /= 12;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4a09      	ldr	r2, [pc, #36]	@ (80014b4 <convert_from_timestamp+0xf0>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	08db      	lsrs	r3, r3, #3
 8001494:	60fb      	str	r3, [r7, #12]
    date->Year = timestamp;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	70da      	strb	r2, [r3, #3]
    date->WeekDay = 1; // Monday
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	88888889 	.word	0x88888889
 80014b4:	aaaaaaab 	.word	0xaaaaaaab

080014b8 <save_to_flash>:

/**
  * @brief  Saves calendar data to flash memory
  */
static void save_to_flash(FlashCalendarData data)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08e      	sub	sp, #56	@ 0x38
 80014bc:	af00      	add	r7, sp, #0
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    HAL_FLASH_Unlock();
 80014c4:	f002 f84e 	bl	8003564 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase_init = {
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
        .TypeErase = FLASH_TYPEERASE_PAGES,
        .Page = (FLASH_USER_START_ADDR - FLASH_BASE) / FLASH_PAGE_SIZE,
 80014da:	4b2e      	ldr	r3, [pc, #184]	@ (8001594 <save_to_flash+0xdc>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00e      	beq.n	8001504 <save_to_flash+0x4c>
 80014e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001594 <save_to_flash+0xdc>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d008      	beq.n	8001500 <save_to_flash+0x48>
 80014ee:	4b29      	ldr	r3, [pc, #164]	@ (8001594 <save_to_flash+0xdc>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	029a      	lsls	r2, r3, #10
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <save_to_flash+0xe0>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80014fc:	0adb      	lsrs	r3, r3, #11
 80014fe:	e002      	b.n	8001506 <save_to_flash+0x4e>
 8001500:	23ff      	movs	r3, #255	@ 0xff
 8001502:	e000      	b.n	8001506 <save_to_flash+0x4e>
 8001504:	23ff      	movs	r3, #255	@ 0xff
    FLASH_EraseInitTypeDef erase_init = {
 8001506:	623b      	str	r3, [r7, #32]
 8001508:	2301      	movs	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
        .NbPages = 1
    };

    uint32_t page_error;
    HAL_FLASHEx_Erase(&erase_init, &page_error);
 800150c:	f107 0214 	add.w	r2, r7, #20
 8001510:	f107 0318 	add.w	r3, r7, #24
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f002 f8de 	bl	80036d8 <HAL_FLASHEx_Erase>

    uint64_t *data_ptr = (uint64_t*)&data;
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t address = FLASH_USER_START_ADDR;
 8001520:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <save_to_flash+0xdc>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001528:	4293      	cmp	r3, r2
 800152a:	d00f      	beq.n	800154c <save_to_flash+0x94>
 800152c:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <save_to_flash+0xdc>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d009      	beq.n	8001548 <save_to_flash+0x90>
 8001534:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <save_to_flash+0xdc>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	029a      	lsls	r2, r3, #10
 800153a:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <save_to_flash+0xe0>)
 800153c:	4013      	ands	r3, r2
 800153e:	f103 63ff 	add.w	r3, r3, #133693440	@ 0x7f80000
 8001542:	f503 23ff 	add.w	r3, r3, #522240	@ 0x7f800
 8001546:	e002      	b.n	800154e <save_to_flash+0x96>
 8001548:	4b14      	ldr	r3, [pc, #80]	@ (800159c <save_to_flash+0xe4>)
 800154a:	e000      	b.n	800154e <save_to_flash+0x96>
 800154c:	4b13      	ldr	r3, [pc, #76]	@ (800159c <save_to_flash+0xe4>)
 800154e:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t words_to_write = (sizeof(FlashCalendarData) + 7) / 8; // Round up to 8-byte words
 8001550:	2302      	movs	r3, #2
 8001552:	62bb      	str	r3, [r7, #40]	@ 0x28

    for(uint32_t i = 0; i < words_to_write; i++) {
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001558:	e00f      	b.n	800157a <save_to_flash+0xc2>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, *data_ptr);
 800155a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001562:	2001      	movs	r0, #1
 8001564:	f001 ffbc 	bl	80034e0 <HAL_FLASH_Program>
        address += 8;
 8001568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800156a:	3308      	adds	r3, #8
 800156c:	633b      	str	r3, [r7, #48]	@ 0x30
        data_ptr++;
 800156e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001570:	3308      	adds	r3, #8
 8001572:	637b      	str	r3, [r7, #52]	@ 0x34
    for(uint32_t i = 0; i < words_to_write; i++) {
 8001574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001576:	3301      	adds	r3, #1
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800157a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800157c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800157e:	429a      	cmp	r2, r3
 8001580:	d3eb      	bcc.n	800155a <save_to_flash+0xa2>
    }

    HAL_FLASH_Lock();
 8001582:	f002 f811 	bl	80035a8 <HAL_FLASH_Lock>
    blink_led(); // Мигаем после записи
 8001586:	f000 f84f 	bl	8001628 <blink_led>
}
 800158a:	bf00      	nop
 800158c:	3738      	adds	r7, #56	@ 0x38
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	0bfa05e0 	.word	0x0bfa05e0
 8001598:	003ffc00 	.word	0x003ffc00
 800159c:	0807f800 	.word	0x0807f800

080015a0 <read_from_flash>:

/**
  * @brief  Reads calendar data from flash memory
  */
static FlashCalendarData read_from_flash(void)
{
 80015a0:	b490      	push	{r4, r7}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
    FlashCalendarData* data = (FlashCalendarData*)FLASH_USER_START_ADDR;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <read_from_flash+0x74>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d00f      	beq.n	80015d4 <read_from_flash+0x34>
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <read_from_flash+0x74>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d009      	beq.n	80015d0 <read_from_flash+0x30>
 80015bc:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <read_from_flash+0x74>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	029a      	lsls	r2, r3, #10
 80015c2:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <read_from_flash+0x78>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	f103 63ff 	add.w	r3, r3, #133693440	@ 0x7f80000
 80015ca:	f503 23ff 	add.w	r3, r3, #522240	@ 0x7f800
 80015ce:	e002      	b.n	80015d6 <read_from_flash+0x36>
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <read_from_flash+0x7c>)
 80015d2:	e000      	b.n	80015d6 <read_from_flash+0x36>
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <read_from_flash+0x7c>)
 80015d6:	617b      	str	r3, [r7, #20]
    if(data->magic != FLASH_DATA_MAGIC) {
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a10      	ldr	r2, [pc, #64]	@ (8001620 <read_from_flash+0x80>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d00e      	beq.n	8001600 <read_from_flash+0x60>
        FlashCalendarData default_data = {
 80015e2:	4a10      	ldr	r2, [pc, #64]	@ (8001624 <read_from_flash+0x84>)
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80015ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            .magic = FLASH_DATA_MAGIC,
            .timestamp = 0,
            .period_sec = 5
        };
        return default_data;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	461c      	mov	r4, r3
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
    return *data;
}
 80015fe:	e004      	b.n	800160a <read_from_flash+0x6a>
    return *data;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	ca07      	ldmia	r2, {r0, r1, r2}
 8001606:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bc90      	pop	{r4, r7}
 8001612:	4770      	bx	lr
 8001614:	0bfa05e0 	.word	0x0bfa05e0
 8001618:	003ffc00 	.word	0x003ffc00
 800161c:	0807f800 	.word	0x0807f800
 8001620:	abcd1234 	.word	0xabcd1234
 8001624:	0800ba70 	.word	0x0800ba70

08001628 <blink_led>:

/**
  * @brief  Blinks LED several times
  */
static void blink_led(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
    for(int i = 0; i < LED_BLINK_COUNT; i++) {
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	e012      	b.n	800165a <blink_led+0x32>
        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	2101      	movs	r1, #1
 8001638:	480c      	ldr	r0, [pc, #48]	@ (800166c <blink_led+0x44>)
 800163a:	f002 fabd 	bl	8003bb8 <HAL_GPIO_WritePin>
        HAL_Delay(LED_BLINK_DELAY_MS);
 800163e:	20c8      	movs	r0, #200	@ 0xc8
 8001640:	f000 fdc0 	bl	80021c4 <HAL_Delay>
        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2101      	movs	r1, #1
 8001648:	4808      	ldr	r0, [pc, #32]	@ (800166c <blink_led+0x44>)
 800164a:	f002 fab5 	bl	8003bb8 <HAL_GPIO_WritePin>
        HAL_Delay(LED_BLINK_DELAY_MS);
 800164e:	20c8      	movs	r0, #200	@ 0xc8
 8001650:	f000 fdb8 	bl	80021c4 <HAL_Delay>
    for(int i = 0; i < LED_BLINK_COUNT; i++) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3301      	adds	r3, #1
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b02      	cmp	r3, #2
 800165e:	dde9      	ble.n	8001634 <blink_led+0xc>
    }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	42020400 	.word	0x42020400

08001670 <is_rtc_initialized>:

/**
  * @brief  Checks if RTC is initialized
  */
static bool is_rtc_initialized(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
    return (HAL_RTCEx_BKUPRead(&hrtc, RTC_INIT_FLAG) == RTC_INIT_VALUE);
 8001674:	2100      	movs	r1, #0
 8001676:	4806      	ldr	r0, [pc, #24]	@ (8001690 <is_rtc_initialized+0x20>)
 8001678:	f004 fb48 	bl	8005d0c <HAL_RTCEx_BKUPRead>
 800167c:	4603      	mov	r3, r0
 800167e:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8001682:	4293      	cmp	r3, r2
 8001684:	bf0c      	ite	eq
 8001686:	2301      	moveq	r3, #1
 8001688:	2300      	movne	r3, #0
 800168a:	b2db      	uxtb	r3, r3
}
 800168c:	4618      	mov	r0, r3
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000284 	.word	0x20000284

08001694 <initialize_rtc>:

/**
  * @brief  Initializes RTC with default values
  */
static void initialize_rtc(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80016a8:	2300      	movs	r3, #0
 80016aa:	603b      	str	r3, [r7, #0]

    sTime.Hours = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	71bb      	strb	r3, [r7, #6]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	4619      	mov	r1, r3
 80016be:	480c      	ldr	r0, [pc, #48]	@ (80016f0 <initialize_rtc+0x5c>)
 80016c0:	f004 f874 	bl	80057ac <HAL_RTC_SetTime>

    sDate.Year = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	70fb      	strb	r3, [r7, #3]
    sDate.Month = 1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	707b      	strb	r3, [r7, #1]
    sDate.Date = 1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	70bb      	strb	r3, [r7, #2]
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80016d0:	463b      	mov	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	4619      	mov	r1, r3
 80016d6:	4806      	ldr	r0, [pc, #24]	@ (80016f0 <initialize_rtc+0x5c>)
 80016d8:	f004 f95a 	bl	8005990 <HAL_RTC_SetDate>

    HAL_RTCEx_BKUPWrite(&hrtc, RTC_INIT_FLAG, RTC_INIT_VALUE);
 80016dc:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 80016e0:	2100      	movs	r1, #0
 80016e2:	4803      	ldr	r0, [pc, #12]	@ (80016f0 <initialize_rtc+0x5c>)
 80016e4:	f004 fafa 	bl	8005cdc <HAL_RTCEx_BKUPWrite>
}
 80016e8:	bf00      	nop
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000284 	.word	0x20000284

080016f4 <main>:

/**
  * @brief  The application entry point.
  */
int main(void)
{
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f6:	b0c5      	sub	sp, #276	@ 0x114
 80016f8:	af06      	add	r7, sp, #24
  HAL_Init();
 80016fa:	f000 fcec 	bl	80020d6 <HAL_Init>
  SystemClock_Config();
 80016fe:	f000 f923 	bl	8001948 <SystemClock_Config>
  MX_GPIO_Init();
 8001702:	f7ff fdab 	bl	800125c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001706:	f7ff fc97 	bl	8001038 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 800170a:	f000 fc09 	bl	8001f20 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 800170e:	f000 f96b 	bl	80019e8 <MX_RTC_Init>

  /* USER CODE BEGIN 2 */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	4b85      	ldr	r3, [pc, #532]	@ (8001928 <main+0x234>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	4a84      	ldr	r2, [pc, #528]	@ (8001928 <main+0x234>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171e:	4b82      	ldr	r3, [pc, #520]	@ (8001928 <main+0x234>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800172a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = LED_PIN;
 800173e:	2301      	movs	r3, #1
 8001740:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 8001756:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800175a:	4619      	mov	r1, r3
 800175c:	4873      	ldr	r0, [pc, #460]	@ (800192c <main+0x238>)
 800175e:	f002 f8ab 	bl	80038b8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	2101      	movs	r1, #1
 8001766:	4871      	ldr	r0, [pc, #452]	@ (800192c <main+0x238>)
 8001768:	f002 fa26 	bl	8003bb8 <HAL_GPIO_WritePin>

  if(!is_rtc_initialized()) {
 800176c:	f7ff ff80 	bl	8001670 <is_rtc_initialized>
 8001770:	4603      	mov	r3, r0
 8001772:	f083 0301 	eor.w	r3, r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <main+0x8c>
      initialize_rtc();
 800177c:	f7ff ff8a 	bl	8001694 <initialize_rtc>
  }

  calendar_data = read_from_flash();
 8001780:	4c6b      	ldr	r4, [pc, #428]	@ (8001930 <main+0x23c>)
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff0a 	bl	80015a0 <read_from_flash>
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001794:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  if(calendar_data.timestamp == 0) {
 8001798:	4b65      	ldr	r3, [pc, #404]	@ (8001930 <main+0x23c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d135      	bne.n	800180c <main+0x118>
      RTC_TimeTypeDef sTime = {0};
 80017a0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
      RTC_DateTypeDef sDate = {0};
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80017b6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80017ba:	2200      	movs	r2, #0
 80017bc:	4619      	mov	r1, r3
 80017be:	485d      	ldr	r0, [pc, #372]	@ (8001934 <main+0x240>)
 80017c0:	f004 f88a 	bl	80058d8 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80017c4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80017c8:	2200      	movs	r2, #0
 80017ca:	4619      	mov	r1, r3
 80017cc:	4859      	ldr	r0, [pc, #356]	@ (8001934 <main+0x240>)
 80017ce:	f004 f965 	bl	8005a9c <HAL_RTC_GetDate>

      calendar_data.timestamp = convert_to_timestamp(sDate, sTime);
 80017d2:	466a      	mov	r2, sp
 80017d4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80017d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017dc:	e882 0003 	stmia.w	r2, {r0, r1}
 80017e0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80017e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e6:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80017ea:	f7ff fdb3 	bl	8001354 <convert_to_timestamp>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001930 <main+0x23c>)
 80017f2:	6053      	str	r3, [r2, #4]
      calendar_data.period_sec = 5;
 80017f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001930 <main+0x23c>)
 80017f6:	2205      	movs	r2, #5
 80017f8:	609a      	str	r2, [r3, #8]
      calendar_data.magic = FLASH_DATA_MAGIC;
 80017fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001930 <main+0x23c>)
 80017fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001938 <main+0x244>)
 80017fe:	601a      	str	r2, [r3, #0]

      save_to_flash(calendar_data);
 8001800:	4b4b      	ldr	r3, [pc, #300]	@ (8001930 <main+0x23c>)
 8001802:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001806:	f7ff fe57 	bl	80014b8 <save_to_flash>
 800180a:	e020      	b.n	800184e <main+0x15a>
  } else {
      RTC_TimeTypeDef sTime = {0};
 800180c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
      RTC_DateTypeDef sDate = {0};
 800181c:	2300      	movs	r3, #0
 800181e:	673b      	str	r3, [r7, #112]	@ 0x70

      convert_from_timestamp(calendar_data.timestamp, &sDate, &sTime);
 8001820:	4b43      	ldr	r3, [pc, #268]	@ (8001930 <main+0x23c>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001828:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fdc9 	bl	80013c4 <convert_from_timestamp>
      HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001832:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001836:	2200      	movs	r2, #0
 8001838:	4619      	mov	r1, r3
 800183a:	483e      	ldr	r0, [pc, #248]	@ (8001934 <main+0x240>)
 800183c:	f003 ffb6 	bl	80057ac <HAL_RTC_SetTime>
      HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001840:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001844:	2200      	movs	r2, #0
 8001846:	4619      	mov	r1, r3
 8001848:	483a      	ldr	r0, [pc, #232]	@ (8001934 <main+0x240>)
 800184a:	f004 f8a1 	bl	8005990 <HAL_RTC_SetDate>
  }

  last_update_tick = HAL_GetTick();
 800184e:	f000 fcad 	bl	80021ac <HAL_GetTick>
 8001852:	4603      	mov	r3, r0
 8001854:	4a39      	ldr	r2, [pc, #228]	@ (800193c <main+0x248>)
 8001856:	6013      	str	r3, [r2, #0]
  char uart_buffer[64];
  /* USER CODE END 2 */

  while (1)
  {
	    if((HAL_GetTick() - last_update_tick) >= (calendar_data.period_sec * 1000)) {
 8001858:	f000 fca8 	bl	80021ac <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	4b37      	ldr	r3, [pc, #220]	@ (800193c <main+0x248>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	1ad2      	subs	r2, r2, r3
 8001864:	4b32      	ldr	r3, [pc, #200]	@ (8001930 <main+0x23c>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	429a      	cmp	r2, r3
 8001872:	d3f1      	bcc.n	8001858 <main+0x164>
	        last_update_tick = HAL_GetTick();
 8001874:	f000 fc9a 	bl	80021ac <HAL_GetTick>
 8001878:	4603      	mov	r3, r0
 800187a:	4a30      	ldr	r2, [pc, #192]	@ (800193c <main+0x248>)
 800187c:	6013      	str	r3, [r2, #0]

	        // Получаем текущие дату и время
	        RTC_DateTypeDef date;
	        RTC_TimeTypeDef time;
	        HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800187e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001882:	2200      	movs	r2, #0
 8001884:	4619      	mov	r1, r3
 8001886:	482b      	ldr	r0, [pc, #172]	@ (8001934 <main+0x240>)
 8001888:	f004 f826 	bl	80058d8 <HAL_RTC_GetTime>
	        HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800188c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001890:	2200      	movs	r2, #0
 8001892:	4619      	mov	r1, r3
 8001894:	4827      	ldr	r0, [pc, #156]	@ (8001934 <main+0x240>)
 8001896:	f004 f901 	bl	8005a9c <HAL_RTC_GetDate>

	        // Обновляем данные в памяти
	        calendar_data.timestamp = convert_to_timestamp(date, time);
 800189a:	466a      	mov	r2, sp
 800189c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018a4:	e882 0003 	stmia.w	r2, {r0, r1}
 80018a8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80018ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80018b0:	f7ff fd50 	bl	8001354 <convert_to_timestamp>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001930 <main+0x23c>)
 80018b8:	6053      	str	r3, [r2, #4]
	        save_to_flash(calendar_data);  // Это вызовет мигание светодиода
 80018ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <main+0x23c>)
 80018bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018c0:	f7ff fdfa 	bl	80014b8 <save_to_flash>

	        // Формируем строку для отправки
	        char uart_msg[64];
	        snprintf(uart_msg, sizeof(uart_msg),
	               "DATE:%04d-%02d-%02d;TIME:%02d:%02d:%02d;PERIOD:%lu\r\n",
	               date.Year + 2000, date.Month, date.Date,
 80018c4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
	        snprintf(uart_msg, sizeof(uart_msg),
 80018c8:	f503 62fa 	add.w	r2, r3, #2000	@ 0x7d0
	               date.Year + 2000, date.Month, date.Date,
 80018cc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
	        snprintf(uart_msg, sizeof(uart_msg),
 80018d0:	4619      	mov	r1, r3
	               date.Year + 2000, date.Month, date.Date,
 80018d2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
	        snprintf(uart_msg, sizeof(uart_msg),
 80018d6:	461c      	mov	r4, r3
	               time.Hours, time.Minutes, time.Seconds,
 80018d8:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
	        snprintf(uart_msg, sizeof(uart_msg),
 80018dc:	461d      	mov	r5, r3
	               time.Hours, time.Minutes, time.Seconds,
 80018de:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
	        snprintf(uart_msg, sizeof(uart_msg),
 80018e2:	461e      	mov	r6, r3
	               time.Hours, time.Minutes, time.Seconds,
 80018e4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
	        snprintf(uart_msg, sizeof(uart_msg),
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <main+0x23c>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f107 0018 	add.w	r0, r7, #24
 80018f2:	9305      	str	r3, [sp, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	9304      	str	r3, [sp, #16]
 80018f8:	9603      	str	r6, [sp, #12]
 80018fa:	9502      	str	r5, [sp, #8]
 80018fc:	9401      	str	r4, [sp, #4]
 80018fe:	9100      	str	r1, [sp, #0]
 8001900:	4613      	mov	r3, r2
 8001902:	4a0f      	ldr	r2, [pc, #60]	@ (8001940 <main+0x24c>)
 8001904:	2140      	movs	r1, #64	@ 0x40
 8001906:	f006 fc0f 	bl	8008128 <sniprintf>
	               calendar_data.period_sec);
	        // Отправляем по UART
	        HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_msg, strlen(uart_msg), 100);
 800190a:	f107 0318 	add.w	r3, r7, #24
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fc92 	bl	8000238 <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	b29a      	uxth	r2, r3
 8001918:	f107 0118 	add.w	r1, r7, #24
 800191c:	2364      	movs	r3, #100	@ 0x64
 800191e:	4809      	ldr	r0, [pc, #36]	@ (8001944 <main+0x250>)
 8001920:	f004 fa86 	bl	8005e30 <HAL_UART_Transmit>
	    if((HAL_GetTick() - last_update_tick) >= (calendar_data.period_sec * 1000)) {
 8001924:	e798      	b.n	8001858 <main+0x164>
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	42020400 	.word	0x42020400
 8001930:	20000274 	.word	0x20000274
 8001934:	20000284 	.word	0x20000284
 8001938:	abcd1234 	.word	0xabcd1234
 800193c:	20000280 	.word	0x20000280
 8001940:	0800ba7c 	.word	0x0800ba7c
 8001944:	200002b0 	.word	0x200002b0

08001948 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  */
void SystemClock_Config(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b098      	sub	sp, #96	@ 0x60
 800194c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194e:	f107 0318 	add.w	r3, r7, #24
 8001952:	2248      	movs	r2, #72	@ 0x48
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f006 fc81 	bl	800825e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK) {
 800196a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800196e:	f002 f949 	bl	8003c04 <HAL_PWREx_ControlVoltageScaling>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <SystemClock_Config+0x34>
    Error_Handler();
 8001978:	f000 f830 	bl	80019dc <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800197c:	2318      	movs	r3, #24
 800197e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001984:	2301      	movs	r3, #1
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001988:	2301      	movs	r3, #1
 800198a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800198c:	2300      	movs	r3, #0
 800198e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001990:	2360      	movs	r3, #96	@ 0x60
 8001992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001994:	2300      	movs	r3, #0
 8001996:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001998:	f107 0318 	add.w	r3, r7, #24
 800199c:	4618      	mov	r0, r3
 800199e:	f002 f9c1 	bl	8003d24 <HAL_RCC_OscConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0x64>
    Error_Handler();
 80019a8:	f000 f818 	bl	80019dc <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ac:	230f      	movs	r3, #15
 80019ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fe83 	bl	80046d0 <HAL_RCC_ClockConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0x8c>
    Error_Handler();
 80019d0:	f000 f804 	bl	80019dc <Error_Handler>
  }
}
 80019d4:	bf00      	nop
 80019d6:	3760      	adds	r7, #96	@ 0x60
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <Error_Handler>:

void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  __disable_irq();
  while (1) {}
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <Error_Handler+0x8>

080019e8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	@ 0x30
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80019ee:	f107 0318 	add.w	r3, r7, #24
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]
 80019fe:	615a      	str	r2, [r3, #20]
  RTC_TimeTypeDef sTime = {0};
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a0e:	2300      	movs	r3, #0
 8001a10:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a12:	4b31      	ldr	r3, [pc, #196]	@ (8001ad8 <MX_RTC_Init+0xf0>)
 8001a14:	4a31      	ldr	r2, [pc, #196]	@ (8001adc <MX_RTC_Init+0xf4>)
 8001a16:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a18:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad8 <MX_RTC_Init+0xf0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad8 <MX_RTC_Init+0xf0>)
 8001a20:	227f      	movs	r2, #127	@ 0x7f
 8001a22:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a24:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad8 <MX_RTC_Init+0xf0>)
 8001a26:	22ff      	movs	r2, #255	@ 0xff
 8001a28:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad8 <MX_RTC_Init+0xf0>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a30:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <MX_RTC_Init+0xf0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a36:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <MX_RTC_Init+0xf0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a3c:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <MX_RTC_Init+0xf0>)
 8001a3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a42:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a44:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <MX_RTC_Init+0xf0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a4a:	4823      	ldr	r0, [pc, #140]	@ (8001ad8 <MX_RTC_Init+0xf0>)
 8001a4c:	f003 fe36 	bl	80056bc <HAL_RTC_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_RTC_Init+0x72>
  {
    Error_Handler();
 8001a56:	f7ff ffc1 	bl	80019dc <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001a6a:	f107 0318 	add.w	r3, r7, #24
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4819      	ldr	r0, [pc, #100]	@ (8001ad8 <MX_RTC_Init+0xf0>)
 8001a72:	f004 f961 	bl	8005d38 <HAL_RTCEx_PrivilegeModeSet>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001a7c:	f7ff ffae 	bl	80019dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2201      	movs	r2, #1
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480f      	ldr	r0, [pc, #60]	@ (8001ad8 <MX_RTC_Init+0xf0>)
 8001a9c:	f003 fe86 	bl	80057ac <HAL_RTC_SetTime>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001aa6:	f7ff ff99 	bl	80019dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	2201      	movs	r2, #1
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <MX_RTC_Init+0xf0>)
 8001ac2:	f003 ff65 	bl	8005990 <HAL_RTC_SetDate>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_RTC_Init+0xe8>
  {
    Error_Handler();
 8001acc:	f7ff ff86 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	3730      	adds	r7, #48	@ 0x30
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000284 	.word	0x20000284
 8001adc:	40002800 	.word	0x40002800

08001ae0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b0a8      	sub	sp, #160	@ 0xa0
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2294      	movs	r2, #148	@ 0x94
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f006 fbb4 	bl	800825e <memset>
  if(rtcHandle->Instance==RTC)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a16      	ldr	r2, [pc, #88]	@ (8001b54 <HAL_RTC_MspInit+0x74>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d124      	bne.n	8001b4a <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b04:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0e:	f107 030c 	add.w	r3, r7, #12
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 f8bc 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001b1e:	f7ff ff5d 	bl	80019dc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b22:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <HAL_RTC_MspInit+0x78>)
 8001b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b28:	4a0b      	ldr	r2, [pc, #44]	@ (8001b58 <HAL_RTC_MspInit+0x78>)
 8001b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b32:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <HAL_RTC_MspInit+0x78>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b36:	4a08      	ldr	r2, [pc, #32]	@ (8001b58 <HAL_RTC_MspInit+0x78>)
 8001b38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b3e:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <HAL_RTC_MspInit+0x78>)
 8001b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	37a0      	adds	r7, #160	@ 0xa0
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40002800 	.word	0x40002800
 8001b58:	40021000 	.word	0x40021000

08001b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <HAL_MspInit+0x44>)
 8001b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b66:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba0 <HAL_MspInit+0x44>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <HAL_MspInit+0x44>)
 8001b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <HAL_MspInit+0x44>)
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ba0 <HAL_MspInit+0x44>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_MspInit+0x44>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b92:	f002 f893 	bl	8003cbc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <NMI_Handler+0x4>

08001bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <HardFault_Handler+0x4>

08001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <MemManage_Handler+0x4>

08001bbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfa:	f000 fac3 	bl	8002184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 31.
  */
void LPUART1_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <LPUART1_IRQHandler+0x10>)
 8001c0a:	f004 f99f 	bl	8005f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200002b0 	.word	0x200002b0

08001c18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return 1;
 8001c1c:	2301      	movs	r3, #1
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_kill>:

int _kill(int pid, int sig)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c32:	f006 fb67 	bl	8008304 <__errno>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2216      	movs	r2, #22
 8001c3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_exit>:

void _exit (int status)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ffe7 	bl	8001c28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c5a:	bf00      	nop
 8001c5c:	e7fd      	b.n	8001c5a <_exit+0x12>

08001c5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e00a      	b.n	8001c86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c70:	f3af 8000 	nop.w
 8001c74:	4601      	mov	r1, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	60ba      	str	r2, [r7, #8]
 8001c7c:	b2ca      	uxtb	r2, r1
 8001c7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	dbf0      	blt.n	8001c70 <_read+0x12>
  }

  return len;
 8001c8e:	687b      	ldr	r3, [r7, #4]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	e009      	b.n	8001cbe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	60ba      	str	r2, [r7, #8]
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dbf1      	blt.n	8001caa <_write+0x12>
  }
  return len;
 8001cc6:	687b      	ldr	r3, [r7, #4]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_close>:

int _close(int file)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf8:	605a      	str	r2, [r3, #4]
  return 0;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_isatty>:

int _isatty(int file)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d10:	2301      	movs	r3, #1
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d40:	4a14      	ldr	r2, [pc, #80]	@ (8001d94 <_sbrk+0x5c>)
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <_sbrk+0x60>)
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d4c:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <_sbrk+0x64>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	@ (8001da0 <_sbrk+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d207      	bcs.n	8001d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d68:	f006 facc 	bl	8008304 <__errno>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	220c      	movs	r2, #12
 8001d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
 8001d76:	e009      	b.n	8001d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <_sbrk+0x64>)
 8001d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20030000 	.word	0x20030000
 8001d98:	00000400 	.word	0x00000400
 8001d9c:	200002ac 	.word	0x200002ac
 8001da0:	20000498 	.word	0x20000498

08001da4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <SystemInit+0x20>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dae:	4a05      	ldr	r2, [pc, #20]	@ (8001dc4 <SystemInit+0x20>)
 8001db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001dce:	4b4f      	ldr	r3, [pc, #316]	@ (8001f0c <SystemCoreClockUpdate+0x144>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d107      	bne.n	8001dea <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001dda:	4b4c      	ldr	r3, [pc, #304]	@ (8001f0c <SystemCoreClockUpdate+0x144>)
 8001ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	e005      	b.n	8001df6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001dea:	4b48      	ldr	r3, [pc, #288]	@ (8001f0c <SystemCoreClockUpdate+0x144>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001df6:	4a46      	ldr	r2, [pc, #280]	@ (8001f10 <SystemCoreClockUpdate+0x148>)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfe:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e00:	4b42      	ldr	r3, [pc, #264]	@ (8001f0c <SystemCoreClockUpdate+0x144>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	d866      	bhi.n	8001eda <SystemCoreClockUpdate+0x112>
 8001e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e14 <SystemCoreClockUpdate+0x4c>)
 8001e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e12:	bf00      	nop
 8001e14:	08001e49 	.word	0x08001e49
 8001e18:	08001edb 	.word	0x08001edb
 8001e1c:	08001edb 	.word	0x08001edb
 8001e20:	08001edb 	.word	0x08001edb
 8001e24:	08001e51 	.word	0x08001e51
 8001e28:	08001edb 	.word	0x08001edb
 8001e2c:	08001edb 	.word	0x08001edb
 8001e30:	08001edb 	.word	0x08001edb
 8001e34:	08001e59 	.word	0x08001e59
 8001e38:	08001edb 	.word	0x08001edb
 8001e3c:	08001edb 	.word	0x08001edb
 8001e40:	08001edb 	.word	0x08001edb
 8001e44:	08001e61 	.word	0x08001e61
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001e48:	4a32      	ldr	r2, [pc, #200]	@ (8001f14 <SystemCoreClockUpdate+0x14c>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	6013      	str	r3, [r2, #0]
      break;
 8001e4e:	e048      	b.n	8001ee2 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001e50:	4b30      	ldr	r3, [pc, #192]	@ (8001f14 <SystemCoreClockUpdate+0x14c>)
 8001e52:	4a31      	ldr	r2, [pc, #196]	@ (8001f18 <SystemCoreClockUpdate+0x150>)
 8001e54:	601a      	str	r2, [r3, #0]
      break;
 8001e56:	e044      	b.n	8001ee2 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001e58:	4b2e      	ldr	r3, [pc, #184]	@ (8001f14 <SystemCoreClockUpdate+0x14c>)
 8001e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8001f18 <SystemCoreClockUpdate+0x150>)
 8001e5c:	601a      	str	r2, [r3, #0]
      break;
 8001e5e:	e040      	b.n	8001ee2 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e60:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <SystemCoreClockUpdate+0x144>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001e6a:	4b28      	ldr	r3, [pc, #160]	@ (8001f0c <SystemCoreClockUpdate+0x144>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	3301      	adds	r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d003      	beq.n	8001e86 <SystemCoreClockUpdate+0xbe>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d006      	beq.n	8001e92 <SystemCoreClockUpdate+0xca>
 8001e84:	e00b      	b.n	8001e9e <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001e86:	4a24      	ldr	r2, [pc, #144]	@ (8001f18 <SystemCoreClockUpdate+0x150>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	613b      	str	r3, [r7, #16]
          break;
 8001e90:	e00b      	b.n	8001eaa <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001e92:	4a21      	ldr	r2, [pc, #132]	@ (8001f18 <SystemCoreClockUpdate+0x150>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	613b      	str	r3, [r7, #16]
          break;
 8001e9c:	e005      	b.n	8001eaa <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea6:	613b      	str	r3, [r7, #16]
          break;
 8001ea8:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001eaa:	4b18      	ldr	r3, [pc, #96]	@ (8001f0c <SystemCoreClockUpdate+0x144>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	fb02 f303 	mul.w	r3, r2, r3
 8001eba:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001ebc:	4b13      	ldr	r3, [pc, #76]	@ (8001f0c <SystemCoreClockUpdate+0x144>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	0e5b      	lsrs	r3, r3, #25
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8001f14 <SystemCoreClockUpdate+0x14c>)
 8001ed6:	6013      	str	r3, [r2, #0]
      break;
 8001ed8:	e003      	b.n	8001ee2 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001eda:	4a0e      	ldr	r2, [pc, #56]	@ (8001f14 <SystemCoreClockUpdate+0x14c>)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	6013      	str	r3, [r2, #0]
      break;
 8001ee0:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <SystemCoreClockUpdate+0x144>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	4a0b      	ldr	r2, [pc, #44]	@ (8001f1c <SystemCoreClockUpdate+0x154>)
 8001eee:	5cd3      	ldrb	r3, [r2, r3]
 8001ef0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <SystemCoreClockUpdate+0x14c>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8001efc:	4a05      	ldr	r2, [pc, #20]	@ (8001f14 <SystemCoreClockUpdate+0x14c>)
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	371c      	adds	r7, #28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	0800bacc 	.word	0x0800bacc
 8001f14:	20000000 	.word	0x20000000
 8001f18:	00f42400 	.word	0x00f42400
 8001f1c:	0800bab4 	.word	0x0800bab4

08001f20 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001f24:	4b22      	ldr	r3, [pc, #136]	@ (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f26:	4a23      	ldr	r2, [pc, #140]	@ (8001fb4 <MX_LPUART1_UART_Init+0x94>)
 8001f28:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001f2a:	4b21      	ldr	r3, [pc, #132]	@ (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f2c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f30:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f32:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001f38:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001f44:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4a:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f50:	4b17      	ldr	r3, [pc, #92]	@ (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f56:	4b16      	ldr	r3, [pc, #88]	@ (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f5c:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001f62:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001f68:	4811      	ldr	r0, [pc, #68]	@ (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f6a:	f003 ff11 	bl	8005d90 <HAL_UART_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001f74:	f7ff fd32 	bl	80019dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f78:	2100      	movs	r1, #0
 8001f7a:	480d      	ldr	r0, [pc, #52]	@ (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f7c:	f005 f8e1 	bl	8007142 <HAL_UARTEx_SetTxFifoThreshold>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f86:	f7ff fd29 	bl	80019dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4808      	ldr	r0, [pc, #32]	@ (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f8e:	f005 f916 	bl	80071be <HAL_UARTEx_SetRxFifoThreshold>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f98:	f7ff fd20 	bl	80019dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001f9c:	4804      	ldr	r0, [pc, #16]	@ (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f9e:	f005 f897 	bl	80070d0 <HAL_UARTEx_DisableFifoMode>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001fa8:	f7ff fd18 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200002b0 	.word	0x200002b0
 8001fb4:	40008000 	.word	0x40008000

08001fb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0ae      	sub	sp, #184	@ 0xb8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd0:	f107 0310 	add.w	r3, r7, #16
 8001fd4:	2294      	movs	r2, #148	@ 0x94
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f006 f940 	bl	800825e <memset>
  if(uartHandle->Instance==LPUART1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a25      	ldr	r2, [pc, #148]	@ (8002078 <HAL_UART_MspInit+0xc0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d143      	bne.n	8002070 <HAL_UART_MspInit+0xb8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001fec:	2300      	movs	r3, #0
 8001fee:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff0:	f107 0310 	add.w	r3, r7, #16
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 fe4b 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002000:	f7ff fcec 	bl	80019dc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002004:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <HAL_UART_MspInit+0xc4>)
 8002006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002008:	4a1c      	ldr	r2, [pc, #112]	@ (800207c <HAL_UART_MspInit+0xc4>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002010:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <HAL_UART_MspInit+0xc4>)
 8002012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201c:	4b17      	ldr	r3, [pc, #92]	@ (800207c <HAL_UART_MspInit+0xc4>)
 800201e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002020:	4a16      	ldr	r2, [pc, #88]	@ (800207c <HAL_UART_MspInit+0xc4>)
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002028:	4b14      	ldr	r3, [pc, #80]	@ (800207c <HAL_UART_MspInit+0xc4>)
 800202a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002034:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002038:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800204e:	2308      	movs	r3, #8
 8002050:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002058:	4619      	mov	r1, r3
 800205a:	4809      	ldr	r0, [pc, #36]	@ (8002080 <HAL_UART_MspInit+0xc8>)
 800205c:	f001 fc2c 	bl	80038b8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2100      	movs	r1, #0
 8002064:	2042      	movs	r0, #66	@ 0x42
 8002066:	f001 f94c 	bl	8003302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800206a:	2042      	movs	r0, #66	@ 0x42
 800206c:	f001 f963 	bl	8003336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002070:	bf00      	nop
 8002072:	37b8      	adds	r7, #184	@ 0xb8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40008000 	.word	0x40008000
 800207c:	40021000 	.word	0x40021000
 8002080:	42020400 	.word	0x42020400

08002084 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002084:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002088:	f7ff fe8c 	bl	8001da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800208c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800208e:	e003      	b.n	8002098 <LoopCopyDataInit>

08002090 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002090:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002092:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002094:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002096:	3104      	adds	r1, #4

08002098 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002098:	480a      	ldr	r0, [pc, #40]	@ (80020c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800209a:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800209c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800209e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020a0:	d3f6      	bcc.n	8002090 <CopyDataInit>
	ldr	r2, =_sbss
 80020a2:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80020a4:	e002      	b.n	80020ac <LoopFillZerobss>

080020a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020a8:	f842 3b04 	str.w	r3, [r2], #4

080020ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <LoopForever+0x16>)
	cmp	r2, r3
 80020ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020b0:	d3f9      	bcc.n	80020a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020b2:	f006 f92d 	bl	8008310 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020b6:	f7ff fb1d 	bl	80016f4 <main>

080020ba <LoopForever>:

LoopForever:
    b LoopForever
 80020ba:	e7fe      	b.n	80020ba <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80020bc:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80020c0:	0800bf6c 	.word	0x0800bf6c
	ldr	r0, =_sdata
 80020c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020c8:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 80020cc:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 80020d0:	20000494 	.word	0x20000494

080020d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020d4:	e7fe      	b.n	80020d4 <ADC1_2_IRQHandler>

080020d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80020e0:	2004      	movs	r0, #4
 80020e2:	f001 f903 	bl	80032ec <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80020e6:	f7ff fe6f 	bl	8001dc8 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ea:	2007      	movs	r0, #7
 80020ec:	f000 f80e 	bl	800210c <HAL_InitTick>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	71fb      	strb	r3, [r7, #7]
 80020fa:	e001      	b.n	8002100 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020fc:	f7ff fd2e 	bl	8001b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002100:	79fb      	ldrb	r3, [r7, #7]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002118:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <HAL_InitTick+0x6c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d023      	beq.n	8002168 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002120:	4b16      	ldr	r3, [pc, #88]	@ (800217c <HAL_InitTick+0x70>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b14      	ldr	r3, [pc, #80]	@ (8002178 <HAL_InitTick+0x6c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f001 f90b 	bl	8003352 <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10f      	bne.n	8002162 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b07      	cmp	r3, #7
 8002146:	d809      	bhi.n	800215c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002148:	2200      	movs	r2, #0
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f001 f8d7 	bl	8003302 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002154:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <HAL_InitTick+0x74>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e007      	b.n	800216c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	e004      	b.n	800216c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
 8002166:	e001      	b.n	800216c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800216c:	7bfb      	ldrb	r3, [r7, #15]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000008 	.word	0x20000008
 800217c:	20000000 	.word	0x20000000
 8002180:	20000004 	.word	0x20000004

08002184 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002188:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_IncTick+0x20>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_IncTick+0x24>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4413      	add	r3, r2
 8002194:	4a04      	ldr	r2, [pc, #16]	@ (80021a8 <HAL_IncTick+0x24>)
 8002196:	6013      	str	r3, [r2, #0]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000008 	.word	0x20000008
 80021a8:	20000344 	.word	0x20000344

080021ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return uwTick;
 80021b0:	4b03      	ldr	r3, [pc, #12]	@ (80021c0 <HAL_GetTick+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000344 	.word	0x20000344

080021c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021cc:	f7ff ffee 	bl	80021ac <HAL_GetTick>
 80021d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d005      	beq.n	80021ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021de:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <HAL_Delay+0x44>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4413      	add	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ea:	bf00      	nop
 80021ec:	f7ff ffde 	bl	80021ac <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d8f7      	bhi.n	80021ec <HAL_Delay+0x28>
  {
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000008 	.word	0x20000008

0800220c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	609a      	str	r2, [r3, #8]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3360      	adds	r3, #96	@ 0x60
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <LL_ADC_SetOffset+0x44>)
 8002296:	4013      	ands	r3, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022ac:	bf00      	nop
 80022ae:	371c      	adds	r7, #28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	03fff000 	.word	0x03fff000

080022bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3360      	adds	r3, #96	@ 0x60
 80022ca:	461a      	mov	r2, r3
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3360      	adds	r3, #96	@ 0x60
 80022f8:	461a      	mov	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	431a      	orrs	r2, r3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002312:	bf00      	nop
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	615a      	str	r2, [r3, #20]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3330      	adds	r3, #48	@ 0x30
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	4413      	add	r3, r2
 8002362:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	211f      	movs	r1, #31
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	401a      	ands	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	0e9b      	lsrs	r3, r3, #26
 800237c:	f003 011f 	and.w	r1, r3, #31
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	431a      	orrs	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002390:	bf00      	nop
 8002392:	371c      	adds	r7, #28
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3314      	adds	r3, #20
 80023ac:	461a      	mov	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	0e5b      	lsrs	r3, r3, #25
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	4413      	add	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	0d1b      	lsrs	r3, r3, #20
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	2107      	movs	r1, #7
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	401a      	ands	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	0d1b      	lsrs	r3, r3, #20
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	431a      	orrs	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023e6:	bf00      	nop
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240c:	43db      	mvns	r3, r3
 800240e:	401a      	ands	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f003 0318 	and.w	r3, r3, #24
 8002416:	4908      	ldr	r1, [pc, #32]	@ (8002438 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002418:	40d9      	lsrs	r1, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	400b      	ands	r3, r1
 800241e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002422:	431a      	orrs	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	0007ffff 	.word	0x0007ffff

0800243c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800244c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6093      	str	r3, [r2, #8]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002474:	d101      	bne.n	800247a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002498:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800249c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024c4:	d101      	bne.n	80024ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <LL_ADC_IsEnabled+0x18>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <LL_ADC_IsEnabled+0x1a>
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b04      	cmp	r3, #4
 8002510:	d101      	bne.n	8002516 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b08      	cmp	r3, #8
 8002536:	d101      	bne.n	800253c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b089      	sub	sp, #36	@ 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e12e      	b.n	80027c4 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7fe fe07 	bl	8001188 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff67 	bl	8002460 <LL_ADC_IsDeepPowerDownEnabled>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d004      	beq.n	80025a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff4d 	bl	800243c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ff82 	bl	80024b0 <LL_ADC_IsInternalRegulatorEnabled>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d115      	bne.n	80025de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ff66 	bl	8002488 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025bc:	4b83      	ldr	r3, [pc, #524]	@ (80027cc <HAL_ADC_Init+0x280>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	4a83      	ldr	r2, [pc, #524]	@ (80027d0 <HAL_ADC_Init+0x284>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	099b      	lsrs	r3, r3, #6
 80025ca:	3301      	adds	r3, #1
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025d0:	e002      	b.n	80025d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f9      	bne.n	80025d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff64 	bl	80024b0 <LL_ADC_IsInternalRegulatorEnabled>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10d      	bne.n	800260a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f2:	f043 0210 	orr.w	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff75 	bl	80024fe <LL_ADC_REG_IsConversionOngoing>
 8002614:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 80c7 	bne.w	80027b2 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 80c3 	bne.w	80027b2 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002630:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002634:	f043 0202 	orr.w	r2, r3, #2
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff49 	bl	80024d8 <LL_ADC_IsEnabled>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d110      	bne.n	800266e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800264c:	4861      	ldr	r0, [pc, #388]	@ (80027d4 <HAL_ADC_Init+0x288>)
 800264e:	f7ff ff43 	bl	80024d8 <LL_ADC_IsEnabled>
 8002652:	4604      	mov	r4, r0
 8002654:	4860      	ldr	r0, [pc, #384]	@ (80027d8 <HAL_ADC_Init+0x28c>)
 8002656:	f7ff ff3f 	bl	80024d8 <LL_ADC_IsEnabled>
 800265a:	4603      	mov	r3, r0
 800265c:	4323      	orrs	r3, r4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4619      	mov	r1, r3
 8002668:	485c      	ldr	r0, [pc, #368]	@ (80027dc <HAL_ADC_Init+0x290>)
 800266a:	f7ff fdcf 	bl	800220c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7e5b      	ldrb	r3, [r3, #25]
 8002672:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002678:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800267e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002684:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800268c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d106      	bne.n	80026aa <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a0:	3b01      	subs	r3, #1
 80026a2:	045b      	lsls	r3, r3, #17
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b6:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026be:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	4b44      	ldr	r3, [pc, #272]	@ (80027e0 <HAL_ADC_Init+0x294>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	69b9      	ldr	r1, [r7, #24]
 80026d6:	430b      	orrs	r3, r1
 80026d8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ff20 	bl	8002524 <LL_ADC_INJ_IsConversionOngoing>
 80026e4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d140      	bne.n	800276e <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d13d      	bne.n	800276e <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7e1b      	ldrb	r3, [r3, #24]
 80026fa:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026fc:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002704:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002714:	f023 0306 	bic.w	r3, r3, #6
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	69b9      	ldr	r1, [r7, #24]
 800271e:	430b      	orrs	r3, r1
 8002720:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002728:	2b01      	cmp	r3, #1
 800272a:	d118      	bne.n	800275e <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002736:	f023 0304 	bic.w	r3, r3, #4
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002742:	4311      	orrs	r1, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002748:	4311      	orrs	r1, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800274e:	430a      	orrs	r2, r1
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	611a      	str	r2, [r3, #16]
 800275c:	e007      	b.n	800276e <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0201 	bic.w	r2, r2, #1
 800276c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d10c      	bne.n	8002790 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277c:	f023 010f 	bic.w	r1, r3, #15
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	1e5a      	subs	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	631a      	str	r2, [r3, #48]	@ 0x30
 800278e:	e007      	b.n	80027a0 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 020f 	bic.w	r2, r2, #15
 800279e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a4:	f023 0303 	bic.w	r3, r3, #3
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80027b0:	e007      	b.n	80027c2 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b6:	f043 0210 	orr.w	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3724      	adds	r7, #36	@ 0x24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd90      	pop	{r4, r7, pc}
 80027cc:	20000000 	.word	0x20000000
 80027d0:	053e2d63 	.word	0x053e2d63
 80027d4:	42028000 	.word	0x42028000
 80027d8:	42028100 	.word	0x42028100
 80027dc:	42028300 	.word	0x42028300
 80027e0:	fff0c007 	.word	0xfff0c007

080027e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b0b7      	sub	sp, #220	@ 0xdc
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x22>
 8002802:	2302      	movs	r3, #2
 8002804:	e3c1      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x7a6>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fe73 	bl	80024fe <LL_ADC_REG_IsConversionOngoing>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 83a6 	bne.w	8002f6c <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	f7ff fd89 	bl	8002344 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fe61 	bl	80024fe <LL_ADC_REG_IsConversionOngoing>
 800283c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fe6d 	bl	8002524 <LL_ADC_INJ_IsConversionOngoing>
 800284a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800284e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002852:	2b00      	cmp	r3, #0
 8002854:	f040 81c1 	bne.w	8002bda <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800285c:	2b00      	cmp	r3, #0
 800285e:	f040 81bc 	bne.w	8002bda <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800286a:	d10f      	bne.n	800288c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2200      	movs	r2, #0
 8002876:	4619      	mov	r1, r3
 8002878:	f7ff fd90 	bl	800239c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fd4a 	bl	800231e <LL_ADC_SetSamplingTimeCommonConfig>
 800288a:	e00e      	b.n	80028aa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6819      	ldr	r1, [r3, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	461a      	mov	r2, r3
 800289a:	f7ff fd7f 	bl	800239c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fd3a 	bl	800231e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d00a      	beq.n	80028e2 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6919      	ldr	r1, [r3, #16]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028dc:	f7ff fcca 	bl	8002274 <LL_ADC_SetOffset>
 80028e0:	e17b      	b.n	8002bda <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fce7 	bl	80022bc <LL_ADC_GetOffsetChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <HAL_ADC_ConfigChannel+0x12a>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fcdc 	bl	80022bc <LL_ADC_GetOffsetChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	0e9b      	lsrs	r3, r3, #26
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	e01e      	b.n	800294c <HAL_ADC_ConfigChannel+0x168>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fcd1 	bl	80022bc <LL_ADC_GetOffsetChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800292c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002934:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 800293c:	2320      	movs	r3, #32
 800293e:	e004      	b.n	800294a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8002940:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x180>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0e9b      	lsrs	r3, r3, #26
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	e018      	b.n	8002996 <HAL_ADC_ConfigChannel+0x1b2>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800297c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002980:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002988:	2320      	movs	r3, #32
 800298a:	e004      	b.n	8002996 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 800298c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002996:	429a      	cmp	r2, r3
 8002998:	d106      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fca0 	bl	80022e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2101      	movs	r1, #1
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fc84 	bl	80022bc <LL_ADC_GetOffsetChannel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x1f0>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2101      	movs	r1, #1
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fc79 	bl	80022bc <LL_ADC_GetOffsetChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	0e9b      	lsrs	r3, r3, #26
 80029ce:	f003 021f 	and.w	r2, r3, #31
 80029d2:	e01e      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x22e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fc6e 	bl	80022bc <LL_ADC_GetOffsetChannel>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80029f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80029fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8002a02:	2320      	movs	r3, #32
 8002a04:	e004      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8002a06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d105      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x246>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	0e9b      	lsrs	r3, r3, #26
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	e018      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x278>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002a3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002a46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8002a4e:	2320      	movs	r3, #32
 8002a50:	e004      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8002a52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d106      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2200      	movs	r2, #0
 8002a66:	2101      	movs	r1, #1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fc3d 	bl	80022e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2102      	movs	r1, #2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fc21 	bl	80022bc <LL_ADC_GetOffsetChannel>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10a      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x2b6>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2102      	movs	r1, #2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fc16 	bl	80022bc <LL_ADC_GetOffsetChannel>
 8002a90:	4603      	mov	r3, r0
 8002a92:	0e9b      	lsrs	r3, r3, #26
 8002a94:	f003 021f 	and.w	r2, r3, #31
 8002a98:	e01e      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x2f4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2102      	movs	r1, #2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fc0b 	bl	80022bc <LL_ADC_GetOffsetChannel>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002abc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002ac8:	2320      	movs	r3, #32
 8002aca:	e004      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002acc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ad0:	fab3 f383 	clz	r3, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x30c>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0e9b      	lsrs	r3, r3, #26
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	e016      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x33a>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002b02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002b08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002b10:	2320      	movs	r3, #32
 8002b12:	e004      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8002b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d106      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2200      	movs	r2, #0
 8002b28:	2102      	movs	r1, #2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fbdc 	bl	80022e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2103      	movs	r1, #3
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fbc0 	bl	80022bc <LL_ADC_GetOffsetChannel>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10a      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x378>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2103      	movs	r1, #3
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fbb5 	bl	80022bc <LL_ADC_GetOffsetChannel>
 8002b52:	4603      	mov	r3, r0
 8002b54:	0e9b      	lsrs	r3, r3, #26
 8002b56:	f003 021f 	and.w	r2, r3, #31
 8002b5a:	e017      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x3a8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2103      	movs	r1, #3
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fbaa 	bl	80022bc <LL_ADC_GetOffsetChannel>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002b74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b76:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002b78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002b7e:	2320      	movs	r3, #32
 8002b80:	e003      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8002b82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x3c0>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	0e9b      	lsrs	r3, r3, #26
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	e011      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x3e4>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002bb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	e003      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d106      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2103      	movs	r1, #3
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fb87 	bl	80022e8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fc7a 	bl	80024d8 <LL_ADC_IsEnabled>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 81c9 	bne.w	8002f7e <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6819      	ldr	r1, [r3, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f7ff fbfb 	bl	80023f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	4a8f      	ldr	r2, [pc, #572]	@ (8002e40 <HAL_ADC_ConfigChannel+0x65c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	f040 8131 	bne.w	8002e6c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10b      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x44e>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	0e9b      	lsrs	r3, r3, #26
 8002c20:	3301      	adds	r3, #1
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	2b09      	cmp	r3, #9
 8002c28:	bf94      	ite	ls
 8002c2a:	2301      	movls	r3, #1
 8002c2c:	2300      	movhi	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	e019      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x482>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002c40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c42:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002c44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	e003      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002c4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3301      	adds	r3, #1
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	2b09      	cmp	r3, #9
 8002c5e:	bf94      	ite	ls
 8002c60:	2301      	movls	r3, #1
 8002c62:	2300      	movhi	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d079      	beq.n	8002d5e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d107      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x4a2>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	0e9b      	lsrs	r3, r3, #26
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	069b      	lsls	r3, r3, #26
 8002c80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c84:	e015      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x4ce>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c96:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	e003      	b.n	8002caa <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	3301      	adds	r3, #1
 8002cac:	069b      	lsls	r3, r3, #26
 8002cae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x4ee>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	0e9b      	lsrs	r3, r3, #26
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	2101      	movs	r1, #1
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	e017      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x51e>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002ce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002cea:	2320      	movs	r3, #32
 8002cec:	e003      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cf0:	fab3 f383 	clz	r3, r3
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	ea42 0103 	orr.w	r1, r2, r3
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10a      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x544>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	0e9b      	lsrs	r3, r3, #26
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f003 021f 	and.w	r2, r3, #31
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	051b      	lsls	r3, r3, #20
 8002d26:	e018      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x576>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002d40:	2320      	movs	r3, #32
 8002d42:	e003      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	f003 021f 	and.w	r2, r3, #31
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	e081      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d107      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x596>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	0e9b      	lsrs	r3, r3, #26
 8002d70:	3301      	adds	r3, #1
 8002d72:	069b      	lsls	r3, r3, #26
 8002d74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d78:	e015      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x5c2>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8002d92:	2320      	movs	r3, #32
 8002d94:	e003      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d98:	fab3 f383 	clz	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	069b      	lsls	r3, r3, #26
 8002da2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x5e2>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	0e9b      	lsrs	r3, r3, #26
 8002db8:	3301      	adds	r3, #1
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	e017      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x612>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	61fb      	str	r3, [r7, #28]
  return result;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002dde:	2320      	movs	r3, #32
 8002de0:	e003      	b.n	8002dea <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	3301      	adds	r3, #1
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2101      	movs	r1, #1
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	ea42 0103 	orr.w	r1, r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10d      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x63e>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	0e9b      	lsrs	r3, r3, #26
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f003 021f 	and.w	r2, r3, #31
 8002e12:	4613      	mov	r3, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	4413      	add	r3, r2
 8002e18:	3b1e      	subs	r3, #30
 8002e1a:	051b      	lsls	r3, r3, #20
 8002e1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e20:	e01e      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x67c>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	613b      	str	r3, [r7, #16]
  return result;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d104      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	e006      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x668>
 8002e3e:	bf00      	nop
 8002e40:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	f003 021f 	and.w	r2, r3, #31
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	3b1e      	subs	r3, #30
 8002e5a:	051b      	lsls	r3, r3, #20
 8002e5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e60:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e66:	4619      	mov	r1, r3
 8002e68:	f7ff fa98 	bl	800239c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4b48      	ldr	r3, [pc, #288]	@ (8002f94 <HAL_ADC_ConfigChannel+0x7b0>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8082 	beq.w	8002f7e <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e7a:	4847      	ldr	r0, [pc, #284]	@ (8002f98 <HAL_ADC_ConfigChannel+0x7b4>)
 8002e7c:	f7ff f9ec 	bl	8002258 <LL_ADC_GetCommonPathInternalCh>
 8002e80:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e84:	4845      	ldr	r0, [pc, #276]	@ (8002f9c <HAL_ADC_ConfigChannel+0x7b8>)
 8002e86:	f7ff fb27 	bl	80024d8 <LL_ADC_IsEnabled>
 8002e8a:	4604      	mov	r4, r0
 8002e8c:	4844      	ldr	r0, [pc, #272]	@ (8002fa0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e8e:	f7ff fb23 	bl	80024d8 <LL_ADC_IsEnabled>
 8002e92:	4603      	mov	r3, r0
 8002e94:	4323      	orrs	r3, r4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d15e      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a41      	ldr	r2, [pc, #260]	@ (8002fa4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d127      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ea4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ea8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d121      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a39      	ldr	r2, [pc, #228]	@ (8002f9c <HAL_ADC_ConfigChannel+0x7b8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d161      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ebe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4834      	ldr	r0, [pc, #208]	@ (8002f98 <HAL_ADC_ConfigChannel+0x7b4>)
 8002ec6:	f7ff f9b4 	bl	8002232 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eca:	4b37      	ldr	r3, [pc, #220]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	4a36      	ldr	r2, [pc, #216]	@ (8002fac <HAL_ADC_ConfigChannel+0x7c8>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	099b      	lsrs	r3, r3, #6
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002ee2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002ee4:	e002      	b.n	8002eec <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f9      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ef2:	e044      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d113      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002efe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10d      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a23      	ldr	r2, [pc, #140]	@ (8002f9c <HAL_ADC_ConfigChannel+0x7b8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d134      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	481e      	ldr	r0, [pc, #120]	@ (8002f98 <HAL_ADC_ConfigChannel+0x7b4>)
 8002f20:	f7ff f987 	bl	8002232 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f24:	e02b      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a22      	ldr	r2, [pc, #136]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d126      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d120      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a16      	ldr	r2, [pc, #88]	@ (8002f9c <HAL_ADC_ConfigChannel+0x7b8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d11b      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4811      	ldr	r0, [pc, #68]	@ (8002f98 <HAL_ADC_ConfigChannel+0x7b4>)
 8002f52:	f7ff f96e 	bl	8002232 <LL_ADC_SetCommonPathInternalCh>
 8002f56:	e012      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002f6a:	e008      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002f86:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	37dc      	adds	r7, #220	@ 0xdc
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd90      	pop	{r4, r7, pc}
 8002f92:	bf00      	nop
 8002f94:	80080000 	.word	0x80080000
 8002f98:	42028300 	.word	0x42028300
 8002f9c:	42028000 	.word	0x42028000
 8002fa0:	42028100 	.word	0x42028100
 8002fa4:	c7520000 	.word	0xc7520000
 8002fa8:	20000000 	.word	0x20000000
 8002fac:	053e2d63 	.word	0x053e2d63
 8002fb0:	cb840000 	.word	0xcb840000
 8002fb4:	80000001 	.word	0x80000001

08002fb8 <LL_ADC_IsEnabled>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <LL_ADC_IsEnabled+0x18>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <LL_ADC_IsEnabled+0x1a>
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_ADC_REG_IsConversionOngoing>:
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d101      	bne.n	8002ff6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b0a1      	sub	sp, #132	@ 0x84
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800301e:	2302      	movs	r3, #2
 8003020:	e089      	b.n	8003136 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800302a:	2300      	movs	r3, #0
 800302c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800302e:	2300      	movs	r3, #0
 8003030:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a42      	ldr	r2, [pc, #264]	@ (8003140 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d102      	bne.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800303c:	4b41      	ldr	r3, [pc, #260]	@ (8003144 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e001      	b.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10b      	bne.n	8003064 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e068      	b.n	8003136 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ffb9 	bl	8002fde <LL_ADC_REG_IsConversionOngoing>
 800306c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff ffb3 	bl	8002fde <LL_ADC_REG_IsConversionOngoing>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d14a      	bne.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800307e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003080:	2b00      	cmp	r3, #0
 8003082:	d147      	bne.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003084:	4b30      	ldr	r3, [pc, #192]	@ (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003086:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d027      	beq.n	80030e0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003090:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030a2:	035b      	lsls	r3, r3, #13
 80030a4:	430b      	orrs	r3, r1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ac:	4824      	ldr	r0, [pc, #144]	@ (8003140 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80030ae:	f7ff ff83 	bl	8002fb8 <LL_ADC_IsEnabled>
 80030b2:	4604      	mov	r4, r0
 80030b4:	4823      	ldr	r0, [pc, #140]	@ (8003144 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030b6:	f7ff ff7f 	bl	8002fb8 <LL_ADC_IsEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4323      	orrs	r3, r4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d132      	bne.n	8003128 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030ca:	f023 030f 	bic.w	r3, r3, #15
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	6811      	ldr	r1, [r2, #0]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	6892      	ldr	r2, [r2, #8]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	431a      	orrs	r2, r3
 80030da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030dc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030de:	e023      	b.n	8003128 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ec:	4814      	ldr	r0, [pc, #80]	@ (8003140 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80030ee:	f7ff ff63 	bl	8002fb8 <LL_ADC_IsEnabled>
 80030f2:	4604      	mov	r4, r0
 80030f4:	4813      	ldr	r0, [pc, #76]	@ (8003144 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030f6:	f7ff ff5f 	bl	8002fb8 <LL_ADC_IsEnabled>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4323      	orrs	r3, r4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d112      	bne.n	8003128 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003102:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800310a:	f023 030f 	bic.w	r3, r3, #15
 800310e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003110:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003112:	e009      	b.n	8003128 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003118:	f043 0220 	orr.w	r2, r3, #32
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003126:	e000      	b.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003128:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003132:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003136:	4618      	mov	r0, r3
 8003138:	3784      	adds	r7, #132	@ 0x84
 800313a:	46bd      	mov	sp, r7
 800313c:	bd90      	pop	{r4, r7, pc}
 800313e:	bf00      	nop
 8003140:	42028000 	.word	0x42028000
 8003144:	42028100 	.word	0x42028100
 8003148:	42028300 	.word	0x42028300

0800314c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800315c:	4b0c      	ldr	r3, [pc, #48]	@ (8003190 <__NVIC_SetPriorityGrouping+0x44>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003168:	4013      	ands	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003174:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800317c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800317e:	4a04      	ldr	r2, [pc, #16]	@ (8003190 <__NVIC_SetPriorityGrouping+0x44>)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	60d3      	str	r3, [r2, #12]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003198:	4b04      	ldr	r3, [pc, #16]	@ (80031ac <__NVIC_GetPriorityGrouping+0x18>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	f003 0307 	and.w	r3, r3, #7
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	db0b      	blt.n	80031da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	f003 021f 	and.w	r2, r3, #31
 80031c8:	4907      	ldr	r1, [pc, #28]	@ (80031e8 <__NVIC_EnableIRQ+0x38>)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	2001      	movs	r0, #1
 80031d2:	fa00 f202 	lsl.w	r2, r0, r2
 80031d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	e000e100 	.word	0xe000e100

080031ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	6039      	str	r1, [r7, #0]
 80031f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	db0a      	blt.n	8003216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	b2da      	uxtb	r2, r3
 8003204:	490c      	ldr	r1, [pc, #48]	@ (8003238 <__NVIC_SetPriority+0x4c>)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	0152      	lsls	r2, r2, #5
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	440b      	add	r3, r1
 8003210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003214:	e00a      	b.n	800322c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	b2da      	uxtb	r2, r3
 800321a:	4908      	ldr	r1, [pc, #32]	@ (800323c <__NVIC_SetPriority+0x50>)
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	3b04      	subs	r3, #4
 8003224:	0152      	lsls	r2, r2, #5
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	440b      	add	r3, r1
 800322a:	761a      	strb	r2, [r3, #24]
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	e000e100 	.word	0xe000e100
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	@ 0x24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f1c3 0307 	rsb	r3, r3, #7
 800325a:	2b03      	cmp	r3, #3
 800325c:	bf28      	it	cs
 800325e:	2303      	movcs	r3, #3
 8003260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3303      	adds	r3, #3
 8003266:	2b06      	cmp	r3, #6
 8003268:	d902      	bls.n	8003270 <NVIC_EncodePriority+0x30>
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3b04      	subs	r3, #4
 800326e:	e000      	b.n	8003272 <NVIC_EncodePriority+0x32>
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003274:	f04f 32ff 	mov.w	r2, #4294967295
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43da      	mvns	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	401a      	ands	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003288:	f04f 31ff 	mov.w	r1, #4294967295
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	fa01 f303 	lsl.w	r3, r1, r3
 8003292:	43d9      	mvns	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003298:	4313      	orrs	r3, r2
         );
}
 800329a:	4618      	mov	r0, r3
 800329c:	3724      	adds	r7, #36	@ 0x24
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032b8:	d301      	bcc.n	80032be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00f      	b.n	80032de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032be:	4a0a      	ldr	r2, [pc, #40]	@ (80032e8 <SysTick_Config+0x40>)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032c6:	2107      	movs	r1, #7
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	f7ff ff8e 	bl	80031ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032d0:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <SysTick_Config+0x40>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032d6:	4b04      	ldr	r3, [pc, #16]	@ (80032e8 <SysTick_Config+0x40>)
 80032d8:	2207      	movs	r2, #7
 80032da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	e000e010 	.word	0xe000e010

080032ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ff29 	bl	800314c <__NVIC_SetPriorityGrouping>
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b086      	sub	sp, #24
 8003306:	af00      	add	r7, sp, #0
 8003308:	4603      	mov	r3, r0
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003310:	f7ff ff40 	bl	8003194 <__NVIC_GetPriorityGrouping>
 8003314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	6978      	ldr	r0, [r7, #20]
 800331c:	f7ff ff90 	bl	8003240 <NVIC_EncodePriority>
 8003320:	4602      	mov	r2, r0
 8003322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff5f 	bl	80031ec <__NVIC_SetPriority>
}
 800332e:	bf00      	nop
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	4603      	mov	r3, r0
 800333e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff33 	bl	80031b0 <__NVIC_EnableIRQ>
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ffa4 	bl	80032a8 <SysTick_Config>
 8003360:	4603      	mov	r3, r0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800336a:	b480      	push	{r7}
 800336c:	b085      	sub	sp, #20
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d008      	beq.n	8003394 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2204      	movs	r2, #4
 8003386:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e040      	b.n	8003416 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 020e 	bic.w	r2, r2, #14
 80033a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c8:	f003 021c 	and.w	r2, r3, #28
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d0:	2101      	movs	r1, #1
 80033d2:	fa01 f202 	lsl.w	r2, r1, r2
 80033d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80033e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00c      	beq.n	8003404 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003402:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003414:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d005      	beq.n	8003446 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2204      	movs	r2, #4
 800343e:	645a      	str	r2, [r3, #68]	@ 0x44

    status = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
 8003444:	e047      	b.n	80034d6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 020e 	bic.w	r2, r2, #14
 8003454:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0201 	bic.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003470:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003474:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800347a:	f003 021c 	and.w	r2, r3, #28
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003482:	2101      	movs	r1, #1
 8003484:	fa01 f202 	lsl.w	r2, r1, r2
 8003488:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003492:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00c      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80034b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	4798      	blx	r3
    }
  }
  return status;
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_FLASH_Program>:
  *                This parameter is the data for the double word program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	e9c7 2300 	strd	r2, r3, [r7]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80034ee:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <HAL_FLASH_Program+0x7c>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_FLASH_Program+0x1a>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e02c      	b.n	8003554 <HAL_FLASH_Program+0x74>
 80034fa:	4b18      	ldr	r3, [pc, #96]	@ (800355c <HAL_FLASH_Program+0x7c>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003500:	4b16      	ldr	r3, [pc, #88]	@ (800355c <HAL_FLASH_Program+0x7c>)
 8003502:	2200      	movs	r2, #0
 8003504:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003506:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800350a:	f000 f867 	bl	80035dc <FLASH_WaitForLastOperation>
 800350e:	4603      	mov	r3, r0
 8003510:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003512:	7dfb      	ldrb	r3, [r7, #23]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d119      	bne.n	800354c <HAL_FLASH_Program+0x6c>
  {
    pFlash.ProcedureOnGoing = TypeProgram;
 8003518:	4a10      	ldr	r2, [pc, #64]	@ (800355c <HAL_FLASH_Program+0x7c>)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6093      	str	r3, [r2, #8]
    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800351e:	4b10      	ldr	r3, [pc, #64]	@ (8003560 <HAL_FLASH_Program+0x80>)
 8003520:	613b      	str	r3, [r7, #16]

    /* Program double-word (64-bit) at a specified address */
    FLASH_Program_DoubleWord(Address, Data);
 8003522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003526:	68b8      	ldr	r0, [r7, #8]
 8003528:	f000 f8a0 	bl	800366c <FLASH_Program_DoubleWord>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800352c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003530:	f000 f854 	bl	80035dc <FLASH_WaitForLastOperation>
 8003534:	4603      	mov	r3, r0
 8003536:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	4b07      	ldr	r3, [pc, #28]	@ (800355c <HAL_FLASH_Program+0x7c>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003544:	43db      	mvns	r3, r3
 8003546:	401a      	ands	r2, r3
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800354c:	4b03      	ldr	r3, [pc, #12]	@ (800355c <HAL_FLASH_Program+0x7c>)
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]

  return status;
 8003552:	7dfb      	ldrb	r3, [r7, #23]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	2000000c 	.word	0x2000000c
 8003560:	40022028 	.word	0x40022028

08003564 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 800356e:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <HAL_FLASH_Unlock+0x38>)
 8003570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003572:	2b00      	cmp	r3, #0
 8003574:	da0b      	bge.n	800358e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8003576:	4b09      	ldr	r3, [pc, #36]	@ (800359c <HAL_FLASH_Unlock+0x38>)
 8003578:	4a09      	ldr	r2, [pc, #36]	@ (80035a0 <HAL_FLASH_Unlock+0x3c>)
 800357a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 800357c:	4b07      	ldr	r3, [pc, #28]	@ (800359c <HAL_FLASH_Unlock+0x38>)
 800357e:	4a09      	ldr	r2, [pc, #36]	@ (80035a4 <HAL_FLASH_Unlock+0x40>)
 8003580:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 8003582:	4b06      	ldr	r3, [pc, #24]	@ (800359c <HAL_FLASH_Unlock+0x38>)
 8003584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003586:	2b00      	cmp	r3, #0
 8003588:	da01      	bge.n	800358e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif

  return status;
 800358e:	79fb      	ldrb	r3, [r7, #7]
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	40022000 	.word	0x40022000
 80035a0:	45670123 	.word	0x45670123
 80035a4:	cdef89ab 	.word	0xcdef89ab

080035a8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK);
 80035b2:	4b09      	ldr	r3, [pc, #36]	@ (80035d8 <HAL_FLASH_Lock+0x30>)
 80035b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b6:	4a08      	ldr	r2, [pc, #32]	@ (80035d8 <HAL_FLASH_Lock+0x30>)
 80035b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035bc:	6293      	str	r3, [r2, #40]	@ 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 80035be:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <HAL_FLASH_Lock+0x30>)
 80035c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	da01      	bge.n	80035ca <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif

  return status;
 80035ca:	79fb      	ldrb	r3, [r7, #7]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	40022000 	.word	0x40022000

080035dc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 80035e4:	f7fe fde2 	bl	80021ac <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4413      	add	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
  uint32_t error;
  __IO uint32_t *reg_sr;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80035f0:	e00b      	b.n	800360a <FLASH_WaitForLastOperation+0x2e>
  {
    if(Timeout != HAL_MAX_DELAY)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d007      	beq.n	800360a <FLASH_WaitForLastOperation+0x2e>
    {
      if(HAL_GetTick() >= timeout)
 80035fa:	f7fe fdd7 	bl	80021ac <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	4293      	cmp	r3, r2
 8003604:	d801      	bhi.n	800360a <FLASH_WaitForLastOperation+0x2e>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e025      	b.n	8003656 <FLASH_WaitForLastOperation+0x7a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800360a:	4b15      	ldr	r3, [pc, #84]	@ (8003660 <FLASH_WaitForLastOperation+0x84>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1ed      	bne.n	80035f2 <FLASH_WaitForLastOperation+0x16>
      }
    }
  }
  
  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8003616:	4b13      	ldr	r3, [pc, #76]	@ (8003664 <FLASH_WaitForLastOperation+0x88>)
 8003618:	613b      	str	r3, [r7, #16]

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	f242 03fa 	movw	r3, #8442	@ 0x20fa
 8003622:	4013      	ands	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */ 

  if(error != 0u)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <FLASH_WaitForLastOperation+0x66>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800362c:	4b0e      	ldr	r3, [pc, #56]	@ (8003668 <FLASH_WaitForLastOperation+0x8c>)
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	4a0c      	ldr	r2, [pc, #48]	@ (8003668 <FLASH_WaitForLastOperation+0x8c>)
 8003636:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    (*reg_sr) = error;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e009      	b.n	8003656 <FLASH_WaitForLastOperation+0x7a>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <FLASH_WaitForLastOperation+0x78>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	2201      	movs	r2, #1
 8003652:	601a      	str	r2, [r3, #0]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40022000 	.word	0x40022000
 8003664:	40022020 	.word	0x40022020
 8003668:	2000000c 	.word	0x2000000c

0800366c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800366c:	b480      	push	{r7}
 800366e:	b089      	sub	sp, #36	@ 0x24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	e9c7 2300 	strd	r2, r3, [r7]
  __IO uint32_t *reg;
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8003678:	4b16      	ldr	r3, [pc, #88]	@ (80036d4 <FLASH_Program_DoubleWord+0x68>)
 800367a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800367c:	f3ef 8310 	mrs	r3, PRIMASK
 8003680:	613b      	str	r3, [r7, #16]
  return(result);
 8003682:	693b      	ldr	r3, [r7, #16]

  /* Disable interrupts to avoid any interruption during the double word programming */
  primask_bit = __get_PRIMASK();
 8003684:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8003686:	b672      	cpsid	i
}
 8003688:	bf00      	nop
  __disable_irq();

  /* Set PG bit */
  SET_BIT((*reg), FLASH_NSCR_NSPG);
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f043 0201 	orr.w	r2, r3, #1
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	601a      	str	r2, [r3, #0]

  /* Program first word */
  *(uint32_t*)Address = (uint32_t)Data;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800369c:	f3bf 8f6f 	isb	sy
}
 80036a0:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t*)(Address+4U) = (uint32_t)(Data >> 32U);
 80036a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	000a      	movs	r2, r1
 80036b0:	2300      	movs	r3, #0
 80036b2:	68f9      	ldr	r1, [r7, #12]
 80036b4:	3104      	adds	r1, #4
 80036b6:	4613      	mov	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f383 8810 	msr	PRIMASK, r3
}
 80036c4:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80036c6:	bf00      	nop
 80036c8:	3724      	adds	r7, #36	@ 0x24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40022028 	.word	0x40022028

080036d8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80036e2:	4b33      	ldr	r3, [pc, #204]	@ (80037b0 <HAL_FLASHEx_Erase+0xd8>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_FLASHEx_Erase+0x16>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e05c      	b.n	80037a8 <HAL_FLASHEx_Erase+0xd0>
 80036ee:	4b30      	ldr	r3, [pc, #192]	@ (80037b0 <HAL_FLASHEx_Erase+0xd8>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036f4:	4b2e      	ldr	r3, [pc, #184]	@ (80037b0 <HAL_FLASHEx_Erase+0xd8>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80036fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80036fe:	f7ff ff6d 	bl	80035dc <FLASH_WaitForLastOperation>
 8003702:	4603      	mov	r3, r0
 8003704:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003706:	7dfb      	ldrb	r3, [r7, #23]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d149      	bne.n	80037a0 <HAL_FLASHEx_Erase+0xc8>
  {
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a27      	ldr	r2, [pc, #156]	@ (80037b0 <HAL_FLASHEx_Erase+0xd8>)
 8003712:	6093      	str	r3, [r2, #8]

    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8003714:	4b27      	ldr	r3, [pc, #156]	@ (80037b4 <HAL_FLASHEx_Erase+0xdc>)
 8003716:	60fb      	str	r3, [r7, #12]

    if ((pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8003718:	4b25      	ldr	r3, [pc, #148]	@ (80037b0 <HAL_FLASHEx_Erase+0xd8>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003720:	f248 0204 	movw	r2, #32772	@ 0x8004
 8003724:	4293      	cmp	r3, r2
 8003726:	d10b      	bne.n	8003740 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f843 	bl	80037b8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003732:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003736:	f7ff ff51 	bl	80035dc <FLASH_WaitForLastOperation>
 800373a:	4603      	mov	r3, r0
 800373c:	75fb      	strb	r3, [r7, #23]
 800373e:	e025      	b.n	800378c <HAL_FLASHEx_Erase+0xb4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	f04f 32ff 	mov.w	r2, #4294967295
 8003746:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	e015      	b.n	800377c <HAL_FLASHEx_Erase+0xa4>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4619      	mov	r1, r3
 8003756:	6938      	ldr	r0, [r7, #16]
 8003758:	f000 f86a 	bl	8003830 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800375c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003760:	f7ff ff3c 	bl	80035dc <FLASH_WaitForLastOperation>
 8003764:	4603      	mov	r3, r0
 8003766:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8003768:	7dfb      	ldrb	r3, [r7, #23]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_FLASHEx_Erase+0x9e>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	601a      	str	r2, [r3, #0]
          break;
 8003774:	e00a      	b.n	800378c <HAL_FLASHEx_Erase+0xb4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	3301      	adds	r3, #1
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4413      	add	r3, r2
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	429a      	cmp	r2, r3
 800378a:	d3e1      	bcc.n	8003750 <HAL_FLASHEx_Erase+0x78>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4b07      	ldr	r3, [pc, #28]	@ (80037b0 <HAL_FLASHEx_Erase+0xd8>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003798:	43db      	mvns	r3, r3
 800379a:	401a      	ands	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037a0:	4b03      	ldr	r3, [pc, #12]	@ (80037b0 <HAL_FLASHEx_Erase+0xd8>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]

  return status;
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	2000000c 	.word	0x2000000c
 80037b4:	40022028 	.word	0x40022028

080037b8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  primask_bit = __get_PRIMASK();
  __disable_irq();
#endif
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80037c0:	4b19      	ldr	r3, [pc, #100]	@ (8003828 <FLASH_MassErase+0x70>)
 80037c2:	60fb      	str	r3, [r7, #12]

  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 80037c4:	4b19      	ldr	r3, [pc, #100]	@ (800382c <FLASH_MassErase+0x74>)
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d016      	beq.n	80037fe <FLASH_MassErase+0x46>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <FLASH_MassErase+0x2e>
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER1);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f043 0204 	orr.w	r2, r3, #4
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	601a      	str	r2, [r3, #0]
    }

    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00e      	beq.n	800380e <FLASH_MassErase+0x56>
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER2);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	e007      	b.n	800380e <FLASH_MassErase+0x56>
    }
  }
  else
  {
    SET_BIT((*reg), (FLASH_NSCR_NSMER1 | FLASH_NSCR_NSMER2));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003806:	f043 0304 	orr.w	r3, r3, #4
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	6013      	str	r3, [r2, #0]
  }

  /* Proceed to erase all sectors */
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40022028 	.word	0x40022028
 800382c:	40022000 	.word	0x40022000

08003830 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  primask_bit = __get_PRIMASK();
  __disable_irq();
#endif

  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800383a:	4b1d      	ldr	r3, [pc, #116]	@ (80038b0 <FLASH_PageErase+0x80>)
 800383c:	60fb      	str	r3, [r7, #12]

  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800383e:	4b1d      	ldr	r3, [pc, #116]	@ (80038b4 <FLASH_PageErase+0x84>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <FLASH_PageErase+0x28>
  {
    CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e011      	b.n	800387c <FLASH_PageErase+0x4c>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d006      	beq.n	8003870 <FLASH_PageErase+0x40>
    {
      CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e005      	b.n	800387c <FLASH_PageErase+0x4c>
    }
    else
    {
      SET_BIT((*reg), FLASH_NSCR_NSBKER);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg), (FLASH_NSCR_NSPNB | FLASH_NSCR_NSPER), ((Page << FLASH_NSCR_NSPNB_Pos) | FLASH_NSCR_NSPER));
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8003884:	f023 0302 	bic.w	r3, r3, #2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	00d2      	lsls	r2, r2, #3
 800388c:	4313      	orrs	r3, r2
 800388e:	f043 0202 	orr.w	r2, r3, #2
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	601a      	str	r2, [r3, #0]
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 80038a2:	bf00      	nop
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40022028 	.word	0x40022028
 80038b4:	40022000 	.word	0x40022000

080038b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038c6:	e158      	b.n	8003b7a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	4013      	ands	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 814a 	beq.w	8003b74 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d005      	beq.n	80038f8 <HAL_GPIO_Init+0x40>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d130      	bne.n	800395a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	2203      	movs	r2, #3
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4013      	ands	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800392e:	2201      	movs	r2, #1
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	f003 0201 	and.w	r2, r3, #1
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b03      	cmp	r3, #3
 8003964:	d017      	beq.n	8003996 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	2203      	movs	r2, #3
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d123      	bne.n	80039ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	08da      	lsrs	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3208      	adds	r2, #8
 80039aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	220f      	movs	r2, #15
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	08da      	lsrs	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3208      	adds	r2, #8
 80039e4:	6939      	ldr	r1, [r7, #16]
 80039e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2203      	movs	r2, #3
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 0203 	and.w	r2, r3, #3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80a4 	beq.w	8003b74 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003a2c:	4a5a      	ldr	r2, [pc, #360]	@ (8003b98 <HAL_GPIO_Init+0x2e0>)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	089b      	lsrs	r3, r3, #2
 8003a32:	3318      	adds	r3, #24
 8003a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a38:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	220f      	movs	r2, #15
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a52      	ldr	r2, [pc, #328]	@ (8003b9c <HAL_GPIO_Init+0x2e4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d025      	beq.n	8003aa4 <HAL_GPIO_Init+0x1ec>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a51      	ldr	r2, [pc, #324]	@ (8003ba0 <HAL_GPIO_Init+0x2e8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d01f      	beq.n	8003aa0 <HAL_GPIO_Init+0x1e8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a50      	ldr	r2, [pc, #320]	@ (8003ba4 <HAL_GPIO_Init+0x2ec>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d019      	beq.n	8003a9c <HAL_GPIO_Init+0x1e4>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a4f      	ldr	r2, [pc, #316]	@ (8003ba8 <HAL_GPIO_Init+0x2f0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d013      	beq.n	8003a98 <HAL_GPIO_Init+0x1e0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a4e      	ldr	r2, [pc, #312]	@ (8003bac <HAL_GPIO_Init+0x2f4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00d      	beq.n	8003a94 <HAL_GPIO_Init+0x1dc>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a4d      	ldr	r2, [pc, #308]	@ (8003bb0 <HAL_GPIO_Init+0x2f8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d007      	beq.n	8003a90 <HAL_GPIO_Init+0x1d8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a4c      	ldr	r2, [pc, #304]	@ (8003bb4 <HAL_GPIO_Init+0x2fc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d101      	bne.n	8003a8c <HAL_GPIO_Init+0x1d4>
 8003a88:	2306      	movs	r3, #6
 8003a8a:	e00c      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003a8c:	2307      	movs	r3, #7
 8003a8e:	e00a      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003a90:	2305      	movs	r3, #5
 8003a92:	e008      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003a94:	2304      	movs	r3, #4
 8003a96:	e006      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e004      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e002      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	f002 0203 	and.w	r2, r2, #3
 8003aac:	00d2      	lsls	r2, r2, #3
 8003aae:	4093      	lsls	r3, r2
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003ab6:	4938      	ldr	r1, [pc, #224]	@ (8003b98 <HAL_GPIO_Init+0x2e0>)
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	089b      	lsrs	r3, r3, #2
 8003abc:	3318      	adds	r3, #24
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ac4:	4b34      	ldr	r3, [pc, #208]	@ (8003b98 <HAL_GPIO_Init+0x2e0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	43db      	mvns	r3, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8003b98 <HAL_GPIO_Init+0x2e0>)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003aee:	4b2a      	ldr	r3, [pc, #168]	@ (8003b98 <HAL_GPIO_Init+0x2e0>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	43db      	mvns	r3, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b12:	4a21      	ldr	r2, [pc, #132]	@ (8003b98 <HAL_GPIO_Init+0x2e0>)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b18:	4b1f      	ldr	r3, [pc, #124]	@ (8003b98 <HAL_GPIO_Init+0x2e0>)
 8003b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	43db      	mvns	r3, r3
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4013      	ands	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b3e:	4a16      	ldr	r2, [pc, #88]	@ (8003b98 <HAL_GPIO_Init+0x2e0>)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8003b46:	4b14      	ldr	r3, [pc, #80]	@ (8003b98 <HAL_GPIO_Init+0x2e0>)
 8003b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4013      	ands	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b98 <HAL_GPIO_Init+0x2e0>)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	3301      	adds	r3, #1
 8003b78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f47f ae9f 	bne.w	80038c8 <HAL_GPIO_Init+0x10>
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	4002f400 	.word	0x4002f400
 8003b9c:	42020000 	.word	0x42020000
 8003ba0:	42020400 	.word	0x42020400
 8003ba4:	42020800 	.word	0x42020800
 8003ba8:	42020c00 	.word	0x42020c00
 8003bac:	42021000 	.word	0x42021000
 8003bb0:	42021400 	.word	0x42021400
 8003bb4:	42021800 	.word	0x42021800

08003bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	807b      	strh	r3, [r7, #2]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bc8:	787b      	ldrb	r3, [r7, #1]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bce:	887a      	ldrh	r2, [r7, #2]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bd4:	e002      	b.n	8003bdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003bec:	4b04      	ldr	r3, [pc, #16]	@ (8003c00 <HAL_PWREx_GetVoltageRange+0x18>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40007000 	.word	0x40007000

08003c04 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003c0c:	4b27      	ldr	r3, [pc, #156]	@ (8003cac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c14:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003c16:	f000 f861 	bl	8003cdc <HAL_PWREx_SMPS_GetEffectiveMode>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c20:	d101      	bne.n	8003c26 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e03e      	b.n	8003ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003c26:	4b21      	ldr	r3, [pc, #132]	@ (8003cac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c32:	d101      	bne.n	8003c38 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e035      	b.n	8003ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d101      	bne.n	8003c44 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e02f      	b.n	8003ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003c44:	4b19      	ldr	r3, [pc, #100]	@ (8003cac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003c4c:	4917      	ldr	r1, [pc, #92]	@ (8003cac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003c54:	4b16      	ldr	r3, [pc, #88]	@ (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	4a16      	ldr	r2, [pc, #88]	@ (8003cb4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	09db      	lsrs	r3, r3, #7
 8003c62:	2232      	movs	r2, #50	@ 0x32
 8003c64:	fb02 f303 	mul.w	r3, r2, r3
 8003c68:	4a13      	ldr	r2, [pc, #76]	@ (8003cb8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	08db      	lsrs	r3, r3, #3
 8003c70:	3301      	adds	r3, #1
 8003c72:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c74:	e002      	b.n	8003c7c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c88:	d102      	bne.n	8003c90 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f2      	bne.n	8003c76 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c90:	4b06      	ldr	r3, [pc, #24]	@ (8003cac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9c:	d101      	bne.n	8003ca2 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e000      	b.n	8003ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40007000 	.word	0x40007000
 8003cb0:	20000000 	.word	0x20000000
 8003cb4:	0a7c5ac5 	.word	0x0a7c5ac5
 8003cb8:	cccccccd 	.word	0xcccccccd

08003cbc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003cc0:	4b05      	ldr	r3, [pc, #20]	@ (8003cd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	4a04      	ldr	r2, [pc, #16]	@ (8003cd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003cc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cca:	6093      	str	r3, [r2, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40007000 	.word	0x40007000

08003cdc <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d20 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003cf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cf6:	607b      	str	r3, [r7, #4]
 8003cf8:	e00a      	b.n	8003d10 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d103      	bne.n	8003d0c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003d04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	e001      	b.n	8003d10 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003d10:	687b      	ldr	r3, [r7, #4]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40007000 	.word	0x40007000

08003d24 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f000 bcc2 	b.w	80046bc <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d38:	4b99      	ldr	r3, [pc, #612]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d42:	4b97      	ldr	r3, [pc, #604]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80e9 	beq.w	8003f2c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d006      	beq.n	8003d6e <HAL_RCC_OscConfig+0x4a>
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	f040 8083 	bne.w	8003e6e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d17f      	bne.n	8003e6e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d6e:	4b8c      	ldr	r3, [pc, #560]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d006      	beq.n	8003d88 <HAL_RCC_OscConfig+0x64>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d102      	bne.n	8003d88 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f000 bc9a 	b.w	80046bc <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d8c:	4b84      	ldr	r3, [pc, #528]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d004      	beq.n	8003da2 <HAL_RCC_OscConfig+0x7e>
 8003d98:	4b81      	ldr	r3, [pc, #516]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003da0:	e005      	b.n	8003dae <HAL_RCC_OscConfig+0x8a>
 8003da2:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d224      	bcs.n	8003dfc <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fe9a 	bl	8004af0 <RCC_SetFlashLatencyFromMSIRange>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f000 bc7a 	b.w	80046bc <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dc8:	4b75      	ldr	r3, [pc, #468]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a74      	ldr	r2, [pc, #464]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dce:	f043 0308 	orr.w	r3, r3, #8
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	4b72      	ldr	r3, [pc, #456]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de0:	496f      	ldr	r1, [pc, #444]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de6:	4b6e      	ldr	r3, [pc, #440]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	496a      	ldr	r1, [pc, #424]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
 8003dfa:	e026      	b.n	8003e4a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dfc:	4b68      	ldr	r3, [pc, #416]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a67      	ldr	r2, [pc, #412]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e02:	f043 0308 	orr.w	r3, r3, #8
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4b65      	ldr	r3, [pc, #404]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	4962      	ldr	r1, [pc, #392]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e1a:	4b61      	ldr	r3, [pc, #388]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	495d      	ldr	r1, [pc, #372]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fe59 	bl	8004af0 <RCC_SetFlashLatencyFromMSIRange>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	f000 bc39 	b.w	80046bc <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003e4a:	f000 fe15 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4a54      	ldr	r2, [pc, #336]	@ (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003e52:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e54:	4b54      	ldr	r3, [pc, #336]	@ (8003fa8 <HAL_RCC_OscConfig+0x284>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe f957 	bl	800210c <HAL_InitTick>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d060      	beq.n	8003f2a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	f000 bc27 	b.w	80046bc <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d039      	beq.n	8003eea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e76:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a49      	ldr	r2, [pc, #292]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e82:	f7fe f993 	bl	80021ac <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e88:	e00f      	b.n	8003eaa <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e8a:	f7fe f98f 	bl	80021ac <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d908      	bls.n	8003eaa <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e98:	4b41      	ldr	r3, [pc, #260]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	f000 bc09 	b.w	80046bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0e9      	beq.n	8003e8a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eb6:	4b3a      	ldr	r3, [pc, #232]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a39      	ldr	r2, [pc, #228]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003ebc:	f043 0308 	orr.w	r3, r3, #8
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	4b37      	ldr	r3, [pc, #220]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ece:	4934      	ldr	r1, [pc, #208]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ed4:	4b32      	ldr	r3, [pc, #200]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	492f      	ldr	r1, [pc, #188]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]
 8003ee8:	e020      	b.n	8003f2c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003eea:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ef6:	f7fe f959 	bl	80021ac <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003efc:	e00e      	b.n	8003f1c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003efe:	f7fe f955 	bl	80021ac <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d907      	bls.n	8003f1c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f0c:	4b24      	ldr	r3, [pc, #144]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e3cf      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f1c:	4b20      	ldr	r3, [pc, #128]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ea      	bne.n	8003efe <HAL_RCC_OscConfig+0x1da>
 8003f28:	e000      	b.n	8003f2c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d07e      	beq.n	8004036 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d005      	beq.n	8003f4a <HAL_RCC_OscConfig+0x226>
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b0c      	cmp	r3, #12
 8003f42:	d10e      	bne.n	8003f62 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d10b      	bne.n	8003f62 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4a:	4b15      	ldr	r3, [pc, #84]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d06e      	beq.n	8004034 <HAL_RCC_OscConfig+0x310>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d16a      	bne.n	8004034 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e3ac      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f6a:	d106      	bne.n	8003f7a <HAL_RCC_OscConfig+0x256>
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a0b      	ldr	r2, [pc, #44]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	e024      	b.n	8003fc4 <HAL_RCC_OscConfig+0x2a0>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f82:	d113      	bne.n	8003fac <HAL_RCC_OscConfig+0x288>
 8003f84:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a05      	ldr	r2, [pc, #20]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	4b03      	ldr	r3, [pc, #12]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a02      	ldr	r2, [pc, #8]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	e012      	b.n	8003fc4 <HAL_RCC_OscConfig+0x2a0>
 8003f9e:	bf00      	nop
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	20000000 	.word	0x20000000
 8003fa8:	20000004 	.word	0x20000004
 8003fac:	4b8b      	ldr	r3, [pc, #556]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a8a      	ldr	r2, [pc, #552]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b88      	ldr	r3, [pc, #544]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a87      	ldr	r2, [pc, #540]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d019      	beq.n	8004000 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fe f8ee 	bl	80021ac <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fd2:	e00e      	b.n	8003ff2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd4:	f7fe f8ea 	bl	80021ac <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	@ 0x64
 8003fe0:	d907      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe2:	4b7e      	ldr	r3, [pc, #504]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e364      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff2:	4b7a      	ldr	r3, [pc, #488]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0ea      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x2b0>
 8003ffe:	e01a      	b.n	8004036 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fe f8d4 	bl	80021ac <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004006:	e00e      	b.n	8004026 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004008:	f7fe f8d0 	bl	80021ac <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	@ 0x64
 8004014:	d907      	bls.n	8004026 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004016:	4b71      	ldr	r3, [pc, #452]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e34a      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004026:	4b6d      	ldr	r3, [pc, #436]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1ea      	bne.n	8004008 <HAL_RCC_OscConfig+0x2e4>
 8004032:	e000      	b.n	8004036 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d06c      	beq.n	800411c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b04      	cmp	r3, #4
 8004046:	d005      	beq.n	8004054 <HAL_RCC_OscConfig+0x330>
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b0c      	cmp	r3, #12
 800404c:	d119      	bne.n	8004082 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d116      	bne.n	8004082 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004054:	4b61      	ldr	r3, [pc, #388]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_OscConfig+0x348>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e327      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406c:	4b5b      	ldr	r3, [pc, #364]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	061b      	lsls	r3, r3, #24
 800407a:	4958      	ldr	r1, [pc, #352]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800407c:	4313      	orrs	r3, r2
 800407e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004080:	e04c      	b.n	800411c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d029      	beq.n	80040de <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800408a:	4b54      	ldr	r3, [pc, #336]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a53      	ldr	r2, [pc, #332]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004096:	f7fe f889 	bl	80021ac <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800409c:	e00e      	b.n	80040bc <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800409e:	f7fe f885 	bl	80021ac <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d907      	bls.n	80040bc <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ac:	4b4b      	ldr	r3, [pc, #300]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e2ff      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040bc:	4b47      	ldr	r3, [pc, #284]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0ea      	beq.n	800409e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c8:	4b44      	ldr	r3, [pc, #272]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	061b      	lsls	r3, r3, #24
 80040d6:	4941      	ldr	r1, [pc, #260]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]
 80040dc:	e01e      	b.n	800411c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040de:	4b3f      	ldr	r3, [pc, #252]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a3e      	ldr	r2, [pc, #248]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80040e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fe f85f 	bl	80021ac <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040f0:	e00e      	b.n	8004110 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f2:	f7fe f85b 	bl	80021ac <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d907      	bls.n	8004110 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004100:	4b36      	ldr	r3, [pc, #216]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e2d5      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004110:	4b32      	ldr	r3, [pc, #200]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1ea      	bne.n	80040f2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d062      	beq.n	80041ee <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d038      	beq.n	80041a2 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d108      	bne.n	800414a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004138:	4b28      	ldr	r3, [pc, #160]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800413a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800413e:	4a27      	ldr	r2, [pc, #156]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004140:	f023 0310 	bic.w	r3, r3, #16
 8004144:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004148:	e007      	b.n	800415a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800414a:	4b24      	ldr	r3, [pc, #144]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800414c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004150:	4a22      	ldr	r2, [pc, #136]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004152:	f043 0310 	orr.w	r3, r3, #16
 8004156:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415a:	4b20      	ldr	r3, [pc, #128]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800415c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004160:	4a1e      	ldr	r2, [pc, #120]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416a:	f7fe f81f 	bl	80021ac <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004170:	e00f      	b.n	8004192 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004172:	f7fe f81b 	bl	80021ac <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b07      	cmp	r3, #7
 800417e:	d908      	bls.n	8004192 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004180:	4b16      	ldr	r3, [pc, #88]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e294      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004192:	4b12      	ldr	r3, [pc, #72]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0e8      	beq.n	8004172 <HAL_RCC_OscConfig+0x44e>
 80041a0:	e025      	b.n	80041ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a2:	4b0e      	ldr	r3, [pc, #56]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80041a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a8:	4a0c      	ldr	r2, [pc, #48]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80041aa:	f023 0301 	bic.w	r3, r3, #1
 80041ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b2:	f7fd fffb 	bl	80021ac <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041b8:	e012      	b.n	80041e0 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ba:	f7fd fff7 	bl	80021ac <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b07      	cmp	r3, #7
 80041c6:	d90b      	bls.n	80041e0 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041c8:	4b04      	ldr	r3, [pc, #16]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80041ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d004      	beq.n	80041e0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e270      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
 80041da:	bf00      	nop
 80041dc:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041e0:	4ba8      	ldr	r3, [pc, #672]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 80041e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e5      	bne.n	80041ba <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 812d 	beq.w	8004456 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041fc:	2300      	movs	r3, #0
 80041fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004200:	4ba0      	ldr	r3, [pc, #640]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10d      	bne.n	8004228 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420c:	4b9d      	ldr	r3, [pc, #628]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 800420e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004210:	4a9c      	ldr	r2, [pc, #624]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004216:	6593      	str	r3, [r2, #88]	@ 0x58
 8004218:	4b9a      	ldr	r3, [pc, #616]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 800421a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004224:	2301      	movs	r3, #1
 8004226:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004228:	4b97      	ldr	r3, [pc, #604]	@ (8004488 <HAL_RCC_OscConfig+0x764>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d11e      	bne.n	8004272 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004234:	4b94      	ldr	r3, [pc, #592]	@ (8004488 <HAL_RCC_OscConfig+0x764>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a93      	ldr	r2, [pc, #588]	@ (8004488 <HAL_RCC_OscConfig+0x764>)
 800423a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800423e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004240:	f7fd ffb4 	bl	80021ac <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004246:	e00e      	b.n	8004266 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004248:	f7fd ffb0 	bl	80021ac <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d907      	bls.n	8004266 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004256:	4b8c      	ldr	r3, [pc, #560]	@ (8004488 <HAL_RCC_OscConfig+0x764>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e22a      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004266:	4b88      	ldr	r3, [pc, #544]	@ (8004488 <HAL_RCC_OscConfig+0x764>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0ea      	beq.n	8004248 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01f      	beq.n	80042be <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d010      	beq.n	80042ac <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800428a:	4b7e      	ldr	r3, [pc, #504]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 800428c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004290:	4a7c      	ldr	r2, [pc, #496]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004292:	f043 0304 	orr.w	r3, r3, #4
 8004296:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800429a:	4b7a      	ldr	r3, [pc, #488]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a0:	4a78      	ldr	r2, [pc, #480]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042aa:	e018      	b.n	80042de <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042ac:	4b75      	ldr	r3, [pc, #468]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b2:	4a74      	ldr	r2, [pc, #464]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042bc:	e00f      	b.n	80042de <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042be:	4b71      	ldr	r3, [pc, #452]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c4:	4a6f      	ldr	r2, [pc, #444]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80042ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d4:	4a6b      	ldr	r2, [pc, #428]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 80042d6:	f023 0304 	bic.w	r3, r3, #4
 80042da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d068      	beq.n	80043b8 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e6:	f7fd ff61 	bl	80021ac <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ec:	e011      	b.n	8004312 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ee:	f7fd ff5d 	bl	80021ac <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d908      	bls.n	8004312 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004300:	4b60      	ldr	r3, [pc, #384]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e1d4      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004312:	4b5c      	ldr	r3, [pc, #368]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0e6      	beq.n	80042ee <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004328:	2b00      	cmp	r3, #0
 800432a:	d022      	beq.n	8004372 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800432c:	4b55      	ldr	r3, [pc, #340]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004332:	4a54      	ldr	r2, [pc, #336]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004338:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800433c:	e011      	b.n	8004362 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433e:	f7fd ff35 	bl	80021ac <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800434c:	4293      	cmp	r3, r2
 800434e:	d908      	bls.n	8004362 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004350:	4b4c      	ldr	r3, [pc, #304]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e1ac      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004362:	4b48      	ldr	r3, [pc, #288]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004368:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0e6      	beq.n	800433e <HAL_RCC_OscConfig+0x61a>
 8004370:	e068      	b.n	8004444 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004372:	4b44      	ldr	r3, [pc, #272]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004378:	4a42      	ldr	r2, [pc, #264]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 800437a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800437e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004382:	e011      	b.n	80043a8 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004384:	f7fd ff12 	bl	80021ac <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004392:	4293      	cmp	r3, r2
 8004394:	d908      	bls.n	80043a8 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004396:	4b3b      	ldr	r3, [pc, #236]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e189      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80043a8:	4b36      	ldr	r3, [pc, #216]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e6      	bne.n	8004384 <HAL_RCC_OscConfig+0x660>
 80043b6:	e045      	b.n	8004444 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fd fef8 	bl	80021ac <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043be:	e011      	b.n	80043e4 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c0:	f7fd fef4 	bl	80021ac <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d908      	bls.n	80043e4 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e16b      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043e4:	4b27      	ldr	r3, [pc, #156]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e6      	bne.n	80043c0 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80043f2:	4b24      	ldr	r3, [pc, #144]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d021      	beq.n	8004444 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004400:	4b20      	ldr	r3, [pc, #128]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004406:	4a1f      	ldr	r2, [pc, #124]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004408:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800440c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004410:	e011      	b.n	8004436 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004412:	f7fd fecb 	bl	80021ac <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004420:	4293      	cmp	r3, r2
 8004422:	d908      	bls.n	8004436 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004424:	4b17      	ldr	r3, [pc, #92]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e142      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004436:	4b13      	ldr	r3, [pc, #76]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e6      	bne.n	8004412 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004444:	7ffb      	ldrb	r3, [r7, #31]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d105      	bne.n	8004456 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800444a:	4b0e      	ldr	r3, [pc, #56]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 800444c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444e:	4a0d      	ldr	r2, [pc, #52]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004454:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d04f      	beq.n	8004502 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004466:	2b00      	cmp	r3, #0
 8004468:	d028      	beq.n	80044bc <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800446a:	4b06      	ldr	r3, [pc, #24]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 800446c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004470:	4a04      	ldr	r2, [pc, #16]	@ (8004484 <HAL_RCC_OscConfig+0x760>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447a:	f7fd fe97 	bl	80021ac <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004480:	e014      	b.n	80044ac <HAL_RCC_OscConfig+0x788>
 8004482:	bf00      	nop
 8004484:	40021000 	.word	0x40021000
 8004488:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800448c:	f7fd fe8e 	bl	80021ac <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d908      	bls.n	80044ac <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800449a:	4b8a      	ldr	r3, [pc, #552]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 800449c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e107      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044ac:	4b85      	ldr	r3, [pc, #532]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 80044ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0e8      	beq.n	800448c <HAL_RCC_OscConfig+0x768>
 80044ba:	e022      	b.n	8004502 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044bc:	4b81      	ldr	r3, [pc, #516]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 80044be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044c2:	4a80      	ldr	r2, [pc, #512]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fd fe6e 	bl	80021ac <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044d2:	e00f      	b.n	80044f4 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044d4:	f7fd fe6a 	bl	80021ac <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d908      	bls.n	80044f4 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044e2:	4b78      	ldr	r3, [pc, #480]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 80044e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e0e3      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044f4:	4b73      	ldr	r3, [pc, #460]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 80044f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e8      	bne.n	80044d4 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 80d7 	beq.w	80046ba <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800450c:	4b6d      	ldr	r3, [pc, #436]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b0c      	cmp	r3, #12
 8004516:	f000 8091 	beq.w	800463c <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451e:	2b02      	cmp	r3, #2
 8004520:	d166      	bne.n	80045f0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004522:	4b68      	ldr	r3, [pc, #416]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a67      	ldr	r2, [pc, #412]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 8004528:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800452c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452e:	f7fd fe3d 	bl	80021ac <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004534:	e00e      	b.n	8004554 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004536:	f7fd fe39 	bl	80021ac <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d907      	bls.n	8004554 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004544:	4b5f      	ldr	r3, [pc, #380]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0b3      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004554:	4b5b      	ldr	r3, [pc, #364]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ea      	bne.n	8004536 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004560:	4b58      	ldr	r3, [pc, #352]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	4b58      	ldr	r3, [pc, #352]	@ (80046c8 <HAL_RCC_OscConfig+0x9a4>)
 8004566:	4013      	ands	r3, r2
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004570:	3a01      	subs	r2, #1
 8004572:	0112      	lsls	r2, r2, #4
 8004574:	4311      	orrs	r1, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800457a:	0212      	lsls	r2, r2, #8
 800457c:	4311      	orrs	r1, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004582:	0852      	lsrs	r2, r2, #1
 8004584:	3a01      	subs	r2, #1
 8004586:	0552      	lsls	r2, r2, #21
 8004588:	4311      	orrs	r1, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800458e:	0852      	lsrs	r2, r2, #1
 8004590:	3a01      	subs	r2, #1
 8004592:	0652      	lsls	r2, r2, #25
 8004594:	4311      	orrs	r1, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800459a:	06d2      	lsls	r2, r2, #27
 800459c:	430a      	orrs	r2, r1
 800459e:	4949      	ldr	r1, [pc, #292]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a4:	4b47      	ldr	r3, [pc, #284]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a46      	ldr	r2, [pc, #280]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 80045aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045b0:	4b44      	ldr	r3, [pc, #272]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4a43      	ldr	r2, [pc, #268]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 80045b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fd fdf6 	bl	80021ac <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c2:	e00e      	b.n	80045e2 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c4:	f7fd fdf2 	bl	80021ac <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d907      	bls.n	80045e2 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045d2:	4b3c      	ldr	r3, [pc, #240]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e06c      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e2:	4b38      	ldr	r3, [pc, #224]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0ea      	beq.n	80045c4 <HAL_RCC_OscConfig+0x8a0>
 80045ee:	e064      	b.n	80046ba <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f0:	4b34      	ldr	r3, [pc, #208]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a33      	ldr	r2, [pc, #204]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 80045f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7fd fdd6 	bl	80021ac <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004602:	e00e      	b.n	8004622 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004604:	f7fd fdd2 	bl	80021ac <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d907      	bls.n	8004622 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004612:	4b2c      	ldr	r3, [pc, #176]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e04c      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004622:	4b28      	ldr	r3, [pc, #160]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1ea      	bne.n	8004604 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800462e:	4b25      	ldr	r3, [pc, #148]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	4924      	ldr	r1, [pc, #144]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 8004634:	4b25      	ldr	r3, [pc, #148]	@ (80046cc <HAL_RCC_OscConfig+0x9a8>)
 8004636:	4013      	ands	r3, r2
 8004638:	60cb      	str	r3, [r1, #12]
 800463a:	e03e      	b.n	80046ba <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e039      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004648:	4b1e      	ldr	r3, [pc, #120]	@ (80046c4 <HAL_RCC_OscConfig+0x9a0>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f003 0203 	and.w	r2, r3, #3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004658:	429a      	cmp	r2, r3
 800465a:	d12c      	bne.n	80046b6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004666:	3b01      	subs	r3, #1
 8004668:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800466a:	429a      	cmp	r2, r3
 800466c:	d123      	bne.n	80046b6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004678:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d11b      	bne.n	80046b6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004688:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d113      	bne.n	80046b6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	3b01      	subs	r3, #1
 800469c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800469e:	429a      	cmp	r2, r3
 80046a0:	d109      	bne.n	80046b6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ac:	085b      	lsrs	r3, r3, #1
 80046ae:	3b01      	subs	r3, #1
 80046b0:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d001      	beq.n	80046ba <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3720      	adds	r7, #32
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40021000 	.word	0x40021000
 80046c8:	019f800c 	.word	0x019f800c
 80046cc:	feeefffc 	.word	0xfeeefffc

080046d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e11c      	b.n	8004922 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046e8:	4b90      	ldr	r3, [pc, #576]	@ (800492c <HAL_RCC_ClockConfig+0x25c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d910      	bls.n	8004718 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b8d      	ldr	r3, [pc, #564]	@ (800492c <HAL_RCC_ClockConfig+0x25c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 020f 	bic.w	r2, r3, #15
 80046fe:	498b      	ldr	r1, [pc, #556]	@ (800492c <HAL_RCC_ClockConfig+0x25c>)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	4313      	orrs	r3, r2
 8004704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	4b89      	ldr	r3, [pc, #548]	@ (800492c <HAL_RCC_ClockConfig+0x25c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e104      	b.n	8004922 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d010      	beq.n	8004746 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	4b81      	ldr	r3, [pc, #516]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004730:	429a      	cmp	r2, r3
 8004732:	d908      	bls.n	8004746 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004734:	4b7e      	ldr	r3, [pc, #504]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	497b      	ldr	r1, [pc, #492]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 8085 	beq.w	800485e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d11f      	bne.n	800479c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800475c:	4b74      	ldr	r3, [pc, #464]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0da      	b.n	8004922 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800476c:	f000 fa24 	bl	8004bb8 <RCC_GetSysClockFreqFromPLLSource>
 8004770:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4a6f      	ldr	r2, [pc, #444]	@ (8004934 <HAL_RCC_ClockConfig+0x264>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d947      	bls.n	800480a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800477a:	4b6d      	ldr	r3, [pc, #436]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d141      	bne.n	800480a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004786:	4b6a      	ldr	r3, [pc, #424]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800478e:	4a68      	ldr	r2, [pc, #416]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 8004790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004794:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004796:	2380      	movs	r3, #128	@ 0x80
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	e036      	b.n	800480a <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d107      	bne.n	80047b4 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047a4:	4b62      	ldr	r3, [pc, #392]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d115      	bne.n	80047dc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0b6      	b.n	8004922 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d107      	bne.n	80047cc <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047bc:	4b5c      	ldr	r3, [pc, #368]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0aa      	b.n	8004922 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047cc:	4b58      	ldr	r3, [pc, #352]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0a2      	b.n	8004922 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80047dc:	f000 f8b0 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	4a53      	ldr	r2, [pc, #332]	@ (8004934 <HAL_RCC_ClockConfig+0x264>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d90f      	bls.n	800480a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80047ea:	4b51      	ldr	r3, [pc, #324]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d109      	bne.n	800480a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047f6:	4b4e      	ldr	r3, [pc, #312]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047fe:	4a4c      	ldr	r2, [pc, #304]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 8004800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004804:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004806:	2380      	movs	r3, #128	@ 0x80
 8004808:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800480a:	4b49      	ldr	r3, [pc, #292]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f023 0203 	bic.w	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	4946      	ldr	r1, [pc, #280]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 8004818:	4313      	orrs	r3, r2
 800481a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481c:	f7fd fcc6 	bl	80021ac <HAL_GetTick>
 8004820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004822:	e013      	b.n	800484c <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004824:	f7fd fcc2 	bl	80021ac <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d90a      	bls.n	800484c <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004836:	4b3e      	ldr	r3, [pc, #248]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 020c 	and.w	r2, r3, #12
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e06a      	b.n	8004922 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484c:	4b38      	ldr	r3, [pc, #224]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 020c 	and.w	r2, r3, #12
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	429a      	cmp	r2, r3
 800485c:	d1e2      	bne.n	8004824 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b80      	cmp	r3, #128	@ 0x80
 8004862:	d105      	bne.n	8004870 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004864:	4b32      	ldr	r3, [pc, #200]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4a31      	ldr	r2, [pc, #196]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 800486a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800486e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d010      	beq.n	800489e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	4b2b      	ldr	r3, [pc, #172]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004888:	429a      	cmp	r2, r3
 800488a:	d208      	bcs.n	800489e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800488c:	4b28      	ldr	r3, [pc, #160]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4925      	ldr	r1, [pc, #148]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800489e:	4b23      	ldr	r3, [pc, #140]	@ (800492c <HAL_RCC_ClockConfig+0x25c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d210      	bcs.n	80048ce <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ac:	4b1f      	ldr	r3, [pc, #124]	@ (800492c <HAL_RCC_ClockConfig+0x25c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f023 020f 	bic.w	r2, r3, #15
 80048b4:	491d      	ldr	r1, [pc, #116]	@ (800492c <HAL_RCC_ClockConfig+0x25c>)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048bc:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <HAL_RCC_ClockConfig+0x25c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d001      	beq.n	80048ce <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e029      	b.n	8004922 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048da:	4b15      	ldr	r3, [pc, #84]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	4912      	ldr	r1, [pc, #72]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d009      	beq.n	800490c <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	490a      	ldr	r1, [pc, #40]	@ (8004930 <HAL_RCC_ClockConfig+0x260>)
 8004908:	4313      	orrs	r3, r2
 800490a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800490c:	f000 f8b4 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004910:	4603      	mov	r3, r0
 8004912:	4a09      	ldr	r2, [pc, #36]	@ (8004938 <HAL_RCC_ClockConfig+0x268>)
 8004914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004916:	4b09      	ldr	r3, [pc, #36]	@ (800493c <HAL_RCC_ClockConfig+0x26c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fd fbf6 	bl	800210c <HAL_InitTick>
 8004920:	4603      	mov	r3, r0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40022000 	.word	0x40022000
 8004930:	40021000 	.word	0x40021000
 8004934:	04c4b400 	.word	0x04c4b400
 8004938:	20000000 	.word	0x20000000
 800493c:	20000004 	.word	0x20000004

08004940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004940:	b480      	push	{r7}
 8004942:	b089      	sub	sp, #36	@ 0x24
 8004944:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	2300      	movs	r3, #0
 800494c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800494e:	4b47      	ldr	r3, [pc, #284]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004958:	4b44      	ldr	r3, [pc, #272]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_GetSysClockFreq+0x34>
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d121      	bne.n	80049b2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d11e      	bne.n	80049b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004974:	4b3d      	ldr	r3, [pc, #244]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d107      	bne.n	8004990 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004980:	4b3a      	ldr	r3, [pc, #232]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004986:	0a1b      	lsrs	r3, r3, #8
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	61fb      	str	r3, [r7, #28]
 800498e:	e005      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004990:	4b36      	ldr	r3, [pc, #216]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800499c:	4a34      	ldr	r2, [pc, #208]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x130>)
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10d      	bne.n	80049c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d102      	bne.n	80049be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x134>)
 80049ba:	61bb      	str	r3, [r7, #24]
 80049bc:	e004      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d101      	bne.n	80049c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x134>)
 80049c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	2b0c      	cmp	r3, #12
 80049cc:	d146      	bne.n	8004a5c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80049ce:	4b27      	ldr	r3, [pc, #156]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049d8:	4b24      	ldr	r3, [pc, #144]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	3301      	adds	r3, #1
 80049e4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d003      	beq.n	80049f4 <HAL_RCC_GetSysClockFreq+0xb4>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d00d      	beq.n	8004a0e <HAL_RCC_GetSysClockFreq+0xce>
 80049f2:	e019      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x134>)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fc:	4a1b      	ldr	r2, [pc, #108]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 80049fe:	68d2      	ldr	r2, [r2, #12]
 8004a00:	0a12      	lsrs	r2, r2, #8
 8004a02:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a06:	fb02 f303 	mul.w	r3, r2, r3
 8004a0a:	617b      	str	r3, [r7, #20]
        break;
 8004a0c:	e019      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a0e:	4a19      	ldr	r2, [pc, #100]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a16:	4a15      	ldr	r2, [pc, #84]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a18:	68d2      	ldr	r2, [r2, #12]
 8004a1a:	0a12      	lsrs	r2, r2, #8
 8004a1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a20:	fb02 f303 	mul.w	r3, r2, r3
 8004a24:	617b      	str	r3, [r7, #20]
        break;
 8004a26:	e00c      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a30:	4a0e      	ldr	r2, [pc, #56]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a32:	68d2      	ldr	r2, [r2, #12]
 8004a34:	0a12      	lsrs	r2, r2, #8
 8004a36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a3a:	fb02 f303 	mul.w	r3, r2, r3
 8004a3e:	617b      	str	r3, [r7, #20]
        break;
 8004a40:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004a42:	4b0a      	ldr	r3, [pc, #40]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	0e5b      	lsrs	r3, r3, #25
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3724      	adds	r7, #36	@ 0x24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	0800bacc 	.word	0x0800bacc
 8004a74:	00f42400 	.word	0x00f42400

08004a78 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004a7c:	f7ff ff60 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 8004a80:	4602      	mov	r2, r0
 8004a82:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <HAL_RCC_GetHCLKFreq+0x20>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	091b      	lsrs	r3, r3, #4
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	4903      	ldr	r1, [pc, #12]	@ (8004a9c <HAL_RCC_GetHCLKFreq+0x24>)
 8004a8e:	5ccb      	ldrb	r3, [r1, r3]
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	0800bab4 	.word	0x0800bab4

08004aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004aa4:	f7ff ffe8 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b05      	ldr	r3, [pc, #20]	@ (8004ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0a1b      	lsrs	r3, r3, #8
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4903      	ldr	r1, [pc, #12]	@ (8004ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	0800bac4 	.word	0x0800bac4

08004ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004acc:	f7ff ffd4 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0adb      	lsrs	r3, r3, #11
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4903      	ldr	r1, [pc, #12]	@ (8004aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	0800bac4 	.word	0x0800bac4

08004af0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004afc:	4b2c      	ldr	r3, [pc, #176]	@ (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b08:	f7ff f86e 	bl	8003be8 <HAL_PWREx_GetVoltageRange>
 8004b0c:	6138      	str	r0, [r7, #16]
 8004b0e:	e014      	b.n	8004b3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b10:	4b27      	ldr	r3, [pc, #156]	@ (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b14:	4a26      	ldr	r2, [pc, #152]	@ (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b1c:	4b24      	ldr	r3, [pc, #144]	@ (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b28:	f7ff f85e 	bl	8003be8 <HAL_PWREx_GetVoltageRange>
 8004b2c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b2e:	4b20      	ldr	r3, [pc, #128]	@ (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b32:	4a1f      	ldr	r2, [pc, #124]	@ (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004b34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b38:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b46:	d10b      	bne.n	8004b60 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b80      	cmp	r3, #128	@ 0x80
 8004b4c:	d919      	bls.n	8004b82 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b52:	d902      	bls.n	8004b5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b54:	2302      	movs	r3, #2
 8004b56:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004b58:	e013      	b.n	8004b82 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004b5e:	e010      	b.n	8004b82 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b80      	cmp	r3, #128	@ 0x80
 8004b64:	d902      	bls.n	8004b6c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b66:	2303      	movs	r3, #3
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	e00a      	b.n	8004b82 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b80      	cmp	r3, #128	@ 0x80
 8004b70:	d102      	bne.n	8004b78 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b72:	2302      	movs	r3, #2
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	e004      	b.n	8004b82 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b70      	cmp	r3, #112	@ 0x70
 8004b7c:	d101      	bne.n	8004b82 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b7e:	2301      	movs	r3, #1
 8004b80:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b82:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f023 020f 	bic.w	r2, r3, #15
 8004b8a:	490a      	ldr	r1, [pc, #40]	@ (8004bb4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004b92:	4b08      	ldr	r3, [pc, #32]	@ (8004bb4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40022000 	.word	0x40022000

08004bb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bbe:	4b31      	ldr	r3, [pc, #196]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d015      	beq.n	8004c08 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d839      	bhi.n	8004c56 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d01c      	beq.n	8004c22 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d133      	bne.n	8004c56 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bee:	4a26      	ldr	r2, [pc, #152]	@ (8004c88 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf6:	4a23      	ldr	r2, [pc, #140]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004bf8:	68d2      	ldr	r2, [r2, #12]
 8004bfa:	0a12      	lsrs	r2, r2, #8
 8004bfc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c00:	fb02 f303 	mul.w	r3, r2, r3
 8004c04:	613b      	str	r3, [r7, #16]
      break;
 8004c06:	e029      	b.n	8004c5c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c08:	4a1f      	ldr	r2, [pc, #124]	@ (8004c88 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c10:	4a1c      	ldr	r2, [pc, #112]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004c12:	68d2      	ldr	r2, [r2, #12]
 8004c14:	0a12      	lsrs	r2, r2, #8
 8004c16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	613b      	str	r3, [r7, #16]
      break;
 8004c20:	e01c      	b.n	8004c5c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c22:	4b18      	ldr	r3, [pc, #96]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d107      	bne.n	8004c3e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c2e:	4b15      	ldr	r3, [pc, #84]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c34:	0a1b      	lsrs	r3, r3, #8
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	e005      	b.n	8004c4a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c3e:	4b11      	ldr	r3, [pc, #68]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004c4a:	4a10      	ldr	r2, [pc, #64]	@ (8004c8c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c52:	613b      	str	r3, [r7, #16]
        break;
 8004c54:	e002      	b.n	8004c5c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8004c56:	2300      	movs	r3, #0
 8004c58:	613b      	str	r3, [r7, #16]
      break;
 8004c5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004c5c:	4b09      	ldr	r3, [pc, #36]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	0e5b      	lsrs	r3, r3, #25
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	3301      	adds	r3, #1
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004c76:	683b      	ldr	r3, [r7, #0]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	40021000 	.word	0x40021000
 8004c88:	00f42400 	.word	0x00f42400
 8004c8c:	0800bacc 	.word	0x0800bacc

08004c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c98:	2300      	movs	r3, #0
 8004c9a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d040      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cb0:	2b80      	cmp	r3, #128	@ 0x80
 8004cb2:	d02a      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004cb4:	2b80      	cmp	r3, #128	@ 0x80
 8004cb6:	d825      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004cb8:	2b60      	cmp	r3, #96	@ 0x60
 8004cba:	d026      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004cbc:	2b60      	cmp	r3, #96	@ 0x60
 8004cbe:	d821      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004cc0:	2b40      	cmp	r3, #64	@ 0x40
 8004cc2:	d006      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004cc4:	2b40      	cmp	r3, #64	@ 0x40
 8004cc6:	d81d      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d009      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d010      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004cd0:	e018      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cd2:	4b8f      	ldr	r3, [pc, #572]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	4a8e      	ldr	r2, [pc, #568]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cdc:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004cde:	e015      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fb56 	bl	8005398 <RCCEx_PLLSAI1_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004cf0:	e00c      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3320      	adds	r3, #32
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fc33 	bl	8005564 <RCCEx_PLLSAI2_Config>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d02:	e003      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	77fb      	strb	r3, [r7, #31]
        break;
 8004d08:	e000      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d0c:	7ffb      	ldrb	r3, [r7, #31]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d12:	4b7f      	ldr	r3, [pc, #508]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d18:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d20:	497b      	ldr	r1, [pc, #492]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004d28:	e001      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2a:	7ffb      	ldrb	r3, [r7, #31]
 8004d2c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d047      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d42:	d030      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d48:	d82a      	bhi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d4e:	d02a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d54:	d824      	bhi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d5a:	d008      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004d5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d60:	d81e      	bhi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004d66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d6a:	d010      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d6c:	e018      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d6e:	4b68      	ldr	r3, [pc, #416]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	4a67      	ldr	r2, [pc, #412]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d78:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004d7a:	e015      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	2100      	movs	r1, #0
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fb08 	bl	8005398 <RCCEx_PLLSAI1_Config>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004d8c:	e00c      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3320      	adds	r3, #32
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fbe5 	bl	8005564 <RCCEx_PLLSAI2_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004d9e:	e003      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	77fb      	strb	r3, [r7, #31]
        break;
 8004da4:	e000      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da8:	7ffb      	ldrb	r3, [r7, #31]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10b      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dae:	4b58      	ldr	r3, [pc, #352]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004db0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004db4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbc:	4954      	ldr	r1, [pc, #336]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004dc4:	e001      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc6:	7ffb      	ldrb	r3, [r7, #31]
 8004dc8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 80ab 	beq.w	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10d      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de8:	4b49      	ldr	r3, [pc, #292]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dec:	4a48      	ldr	r2, [pc, #288]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004df2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004df4:	4b46      	ldr	r3, [pc, #280]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e00:	2301      	movs	r3, #1
 8004e02:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e04:	4b43      	ldr	r3, [pc, #268]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a42      	ldr	r2, [pc, #264]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e10:	f7fd f9cc 	bl	80021ac <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e16:	e00f      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e18:	f7fd f9c8 	bl	80021ac <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d908      	bls.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e26:	4b3b      	ldr	r3, [pc, #236]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d109      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004e36:	e006      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e38:	4b36      	ldr	r3, [pc, #216]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0e9      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004e44:	e000      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004e46:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004e48:	7ffb      	ldrb	r3, [r7, #31]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d164      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e4e:	4b30      	ldr	r3, [pc, #192]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e58:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01f      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d019      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e6c:	4b28      	ldr	r3, [pc, #160]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e76:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e78:	4b25      	ldr	r3, [pc, #148]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7e:	4a24      	ldr	r2, [pc, #144]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e88:	4b21      	ldr	r3, [pc, #132]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8e:	4a20      	ldr	r2, [pc, #128]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e98:	4a1d      	ldr	r2, [pc, #116]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01f      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eaa:	f7fd f97f 	bl	80021ac <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb0:	e012      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fd f97b 	bl	80021ac <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d909      	bls.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ec4:	4b12      	ldr	r3, [pc, #72]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8004ed6:	e007      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0e5      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004ee6:	e000      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8004ee8:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8004eea:	7ffb      	ldrb	r3, [r7, #31]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10c      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ef0:	4b07      	ldr	r3, [pc, #28]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f00:	4903      	ldr	r1, [pc, #12]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f08:	e008      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f0a:	7ffb      	ldrb	r3, [r7, #31]
 8004f0c:	77bb      	strb	r3, [r7, #30]
 8004f0e:	e005      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004f10:	40021000 	.word	0x40021000
 8004f14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f18:	7ffb      	ldrb	r3, [r7, #31]
 8004f1a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d105      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f22:	4b9c      	ldr	r3, [pc, #624]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f26:	4a9b      	ldr	r2, [pc, #620]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f3a:	4b96      	ldr	r3, [pc, #600]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f40:	f023 0203 	bic.w	r2, r3, #3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f48:	4992      	ldr	r1, [pc, #584]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f5c:	4b8d      	ldr	r3, [pc, #564]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f62:	f023 020c 	bic.w	r2, r3, #12
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6a:	498a      	ldr	r1, [pc, #552]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f7e:	4b85      	ldr	r3, [pc, #532]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8c:	4981      	ldr	r1, [pc, #516]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fa0:	4b7c      	ldr	r3, [pc, #496]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	4979      	ldr	r1, [pc, #484]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fc2:	4b74      	ldr	r3, [pc, #464]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd0:	4970      	ldr	r1, [pc, #448]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fe4:	4b6b      	ldr	r3, [pc, #428]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff2:	4968      	ldr	r1, [pc, #416]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005006:	4b63      	ldr	r3, [pc, #396]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005014:	495f      	ldr	r1, [pc, #380]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005028:	4b5a      	ldr	r3, [pc, #360]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005036:	4957      	ldr	r1, [pc, #348]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800504a:	4b52      	ldr	r3, [pc, #328]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800504c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005050:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005058:	494e      	ldr	r1, [pc, #312]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d031      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005070:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005074:	d00e      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005076:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800507a:	d814      	bhi.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800507c:	2b00      	cmp	r3, #0
 800507e:	d015      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005084:	d10f      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005086:	4b43      	ldr	r3, [pc, #268]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	4a42      	ldr	r2, [pc, #264]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800508c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005090:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005092:	e00c      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3304      	adds	r3, #4
 8005098:	2100      	movs	r1, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f97c 	bl	8005398 <RCCEx_PLLSAI1_Config>
 80050a0:	4603      	mov	r3, r0
 80050a2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80050a4:	e003      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	77fb      	strb	r3, [r7, #31]
        break;
 80050aa:	e000      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80050ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ae:	7ffb      	ldrb	r3, [r7, #31]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050b4:	4b37      	ldr	r3, [pc, #220]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050c2:	4934      	ldr	r1, [pc, #208]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80050ca:	e001      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050cc:	7ffb      	ldrb	r3, [r7, #31]
 80050ce:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ea:	492a      	ldr	r1, [pc, #168]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050fe:	4b25      	ldr	r3, [pc, #148]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005104:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800510c:	4921      	ldr	r1, [pc, #132]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800510e:	4313      	orrs	r3, r2
 8005110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005120:	4b1c      	ldr	r3, [pc, #112]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005126:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800512e:	4919      	ldr	r1, [pc, #100]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005142:	4b14      	ldr	r3, [pc, #80]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005144:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005148:	f023 0203 	bic.w	r2, r3, #3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005150:	4910      	ldr	r1, [pc, #64]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d02b      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005164:	4b0b      	ldr	r3, [pc, #44]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005172:	4908      	ldr	r1, [pc, #32]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800517e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005182:	d109      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005184:	4b03      	ldr	r3, [pc, #12]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	4a02      	ldr	r2, [pc, #8]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800518a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800518e:	60d3      	str	r3, [r2, #12]
 8005190:	e014      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005192:	bf00      	nop
 8005194:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800519c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051a0:	d10c      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3304      	adds	r3, #4
 80051a6:	2101      	movs	r1, #1
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 f8f5 	bl	8005398 <RCCEx_PLLSAI1_Config>
 80051ae:	4603      	mov	r3, r0
 80051b0:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80051b2:	7ffb      	ldrb	r3, [r7, #31]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80051b8:	7ffb      	ldrb	r3, [r7, #31]
 80051ba:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d04a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051d0:	d108      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80051d2:	4b70      	ldr	r3, [pc, #448]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80051d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051d8:	4a6e      	ldr	r2, [pc, #440]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80051da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051de:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80051e2:	e012      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80051e4:	4b6b      	ldr	r3, [pc, #428]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051f2:	4968      	ldr	r1, [pc, #416]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80051fa:	4b66      	ldr	r3, [pc, #408]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80051fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005200:	4a64      	ldr	r2, [pc, #400]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005202:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005206:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800520e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005212:	d10d      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	2101      	movs	r1, #1
 800521a:	4618      	mov	r0, r3
 800521c:	f000 f8bc 	bl	8005398 <RCCEx_PLLSAI1_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005224:	7ffb      	ldrb	r3, [r7, #31]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d019      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800522a:	7ffb      	ldrb	r3, [r7, #31]
 800522c:	77bb      	strb	r3, [r7, #30]
 800522e:	e016      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005234:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005238:	d106      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800523a:	4b56      	ldr	r3, [pc, #344]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	4a55      	ldr	r2, [pc, #340]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005240:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005244:	60d3      	str	r3, [r2, #12]
 8005246:	e00a      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800524c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005250:	d105      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005252:	4b50      	ldr	r3, [pc, #320]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	4a4f      	ldr	r2, [pc, #316]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800525c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d028      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800526a:	4b4a      	ldr	r3, [pc, #296]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005270:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005278:	4946      	ldr	r1, [pc, #280]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005284:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005288:	d106      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800528a:	4b42      	ldr	r3, [pc, #264]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	4a41      	ldr	r2, [pc, #260]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005290:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005294:	60d3      	str	r3, [r2, #12]
 8005296:	e011      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800529c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052a0:	d10c      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3304      	adds	r3, #4
 80052a6:	2101      	movs	r1, #1
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 f875 	bl	8005398 <RCCEx_PLLSAI1_Config>
 80052ae:	4603      	mov	r3, r0
 80052b0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80052b2:	7ffb      	ldrb	r3, [r7, #31]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80052b8:	7ffb      	ldrb	r3, [r7, #31]
 80052ba:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01e      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052c8:	4b32      	ldr	r3, [pc, #200]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052d8:	492e      	ldr	r1, [pc, #184]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052ea:	d10c      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	2102      	movs	r1, #2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 f850 	bl	8005398 <RCCEx_PLLSAI1_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80052fc:	7ffb      	ldrb	r3, [r7, #31]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8005302:	7ffb      	ldrb	r3, [r7, #31]
 8005304:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00b      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005312:	4b20      	ldr	r3, [pc, #128]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005314:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005318:	f023 0204 	bic.w	r2, r3, #4
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005322:	491c      	ldr	r1, [pc, #112]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00b      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005336:	4b17      	ldr	r3, [pc, #92]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005338:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800533c:	f023 0218 	bic.w	r2, r3, #24
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005346:	4913      	ldr	r1, [pc, #76]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d017      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800535a:	4b0e      	ldr	r3, [pc, #56]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800535c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005360:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800536a:	490a      	ldr	r1, [pc, #40]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005378:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800537c:	d105      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800537e:	4b05      	ldr	r3, [pc, #20]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	4a04      	ldr	r2, [pc, #16]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005384:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005388:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800538a:	7fbb      	ldrb	r3, [r7, #30]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3720      	adds	r7, #32
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40021000 	.word	0x40021000

08005398 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d018      	beq.n	80053e0 <RCCEx_PLLSAI1_Config+0x48>
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d81f      	bhi.n	80053f2 <RCCEx_PLLSAI1_Config+0x5a>
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d002      	beq.n	80053bc <RCCEx_PLLSAI1_Config+0x24>
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d009      	beq.n	80053ce <RCCEx_PLLSAI1_Config+0x36>
 80053ba:	e01a      	b.n	80053f2 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053bc:	4b65      	ldr	r3, [pc, #404]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d117      	bne.n	80053f8 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053cc:	e014      	b.n	80053f8 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053ce:	4b61      	ldr	r3, [pc, #388]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d110      	bne.n	80053fc <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053de:	e00d      	b.n	80053fc <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80053e0:	4b5c      	ldr	r3, [pc, #368]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d109      	bne.n	8005400 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053f0:	e006      	b.n	8005400 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	73fb      	strb	r3, [r7, #15]
      break;
 80053f6:	e004      	b.n	8005402 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80053f8:	bf00      	nop
 80053fa:	e002      	b.n	8005402 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80053fc:	bf00      	nop
 80053fe:	e000      	b.n	8005402 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005400:	bf00      	nop
  }

  if (status == HAL_OK)
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	2b00      	cmp	r3, #0
 8005406:	f040 809f 	bne.w	8005548 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800540a:	4b52      	ldr	r3, [pc, #328]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a51      	ldr	r2, [pc, #324]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005410:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005416:	f7fc fec9 	bl	80021ac <HAL_GetTick>
 800541a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800541c:	e00f      	b.n	800543e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800541e:	f7fc fec5 	bl	80021ac <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d908      	bls.n	800543e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800542c:	4b49      	ldr	r3, [pc, #292]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d009      	beq.n	800544c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800543c:	e006      	b.n	800544c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800543e:	4b45      	ldr	r3, [pc, #276]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e9      	bne.n	800541e <RCCEx_PLLSAI1_Config+0x86>
 800544a:	e000      	b.n	800544e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 800544c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d179      	bne.n	8005548 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d116      	bne.n	8005488 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800545a:	4b3e      	ldr	r3, [pc, #248]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	4b3e      	ldr	r3, [pc, #248]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1c0>)
 8005460:	4013      	ands	r3, r2
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6892      	ldr	r2, [r2, #8]
 8005466:	0211      	lsls	r1, r2, #8
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	68d2      	ldr	r2, [r2, #12]
 800546c:	06d2      	lsls	r2, r2, #27
 800546e:	4311      	orrs	r1, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6852      	ldr	r2, [r2, #4]
 8005474:	3a01      	subs	r2, #1
 8005476:	0112      	lsls	r2, r2, #4
 8005478:	4311      	orrs	r1, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	4934      	ldr	r1, [pc, #208]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005482:	4313      	orrs	r3, r2
 8005484:	610b      	str	r3, [r1, #16]
 8005486:	e033      	b.n	80054f0 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d118      	bne.n	80054c0 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800548e:	4b31      	ldr	r3, [pc, #196]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	4b32      	ldr	r3, [pc, #200]	@ (800555c <RCCEx_PLLSAI1_Config+0x1c4>)
 8005494:	4013      	ands	r3, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6892      	ldr	r2, [r2, #8]
 800549a:	0211      	lsls	r1, r2, #8
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6912      	ldr	r2, [r2, #16]
 80054a0:	0852      	lsrs	r2, r2, #1
 80054a2:	3a01      	subs	r2, #1
 80054a4:	0552      	lsls	r2, r2, #21
 80054a6:	4311      	orrs	r1, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6852      	ldr	r2, [r2, #4]
 80054ac:	3a01      	subs	r2, #1
 80054ae:	0112      	lsls	r2, r2, #4
 80054b0:	4311      	orrs	r1, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6812      	ldr	r2, [r2, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	4926      	ldr	r1, [pc, #152]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	610b      	str	r3, [r1, #16]
 80054be:	e017      	b.n	80054f0 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054c0:	4b24      	ldr	r3, [pc, #144]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	4b26      	ldr	r3, [pc, #152]	@ (8005560 <RCCEx_PLLSAI1_Config+0x1c8>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6892      	ldr	r2, [r2, #8]
 80054cc:	0211      	lsls	r1, r2, #8
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6952      	ldr	r2, [r2, #20]
 80054d2:	0852      	lsrs	r2, r2, #1
 80054d4:	3a01      	subs	r2, #1
 80054d6:	0652      	lsls	r2, r2, #25
 80054d8:	4311      	orrs	r1, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6852      	ldr	r2, [r2, #4]
 80054de:	3a01      	subs	r2, #1
 80054e0:	0112      	lsls	r2, r2, #4
 80054e2:	4311      	orrs	r1, r2
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	491a      	ldr	r1, [pc, #104]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054f0:	4b18      	ldr	r3, [pc, #96]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a17      	ldr	r2, [pc, #92]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 80054f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fc:	f7fc fe56 	bl	80021ac <HAL_GetTick>
 8005500:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005502:	e00f      	b.n	8005524 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005504:	f7fc fe52 	bl	80021ac <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d908      	bls.n	8005524 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005512:	4b10      	ldr	r3, [pc, #64]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005522:	e006      	b.n	8005532 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005524:	4b0b      	ldr	r3, [pc, #44]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0e9      	beq.n	8005504 <RCCEx_PLLSAI1_Config+0x16c>
 8005530:	e000      	b.n	8005534 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8005532:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800553a:	4b06      	ldr	r3, [pc, #24]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 800553c:	691a      	ldr	r2, [r3, #16]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	4904      	ldr	r1, [pc, #16]	@ (8005554 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005544:	4313      	orrs	r3, r2
 8005546:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005548:	7bfb      	ldrb	r3, [r7, #15]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40021000 	.word	0x40021000
 8005558:	07ff800c 	.word	0x07ff800c
 800555c:	ff9f800c 	.word	0xff9f800c
 8005560:	f9ff800c 	.word	0xf9ff800c

08005564 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b03      	cmp	r3, #3
 8005578:	d018      	beq.n	80055ac <RCCEx_PLLSAI2_Config+0x48>
 800557a:	2b03      	cmp	r3, #3
 800557c:	d81f      	bhi.n	80055be <RCCEx_PLLSAI2_Config+0x5a>
 800557e:	2b01      	cmp	r3, #1
 8005580:	d002      	beq.n	8005588 <RCCEx_PLLSAI2_Config+0x24>
 8005582:	2b02      	cmp	r3, #2
 8005584:	d009      	beq.n	800559a <RCCEx_PLLSAI2_Config+0x36>
 8005586:	e01a      	b.n	80055be <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005588:	4b4a      	ldr	r3, [pc, #296]	@ (80056b4 <RCCEx_PLLSAI2_Config+0x150>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d117      	bne.n	80055c4 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005598:	e014      	b.n	80055c4 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800559a:	4b46      	ldr	r3, [pc, #280]	@ (80056b4 <RCCEx_PLLSAI2_Config+0x150>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d110      	bne.n	80055c8 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055aa:	e00d      	b.n	80055c8 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80055ac:	4b41      	ldr	r3, [pc, #260]	@ (80056b4 <RCCEx_PLLSAI2_Config+0x150>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d109      	bne.n	80055cc <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055bc:	e006      	b.n	80055cc <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	73fb      	strb	r3, [r7, #15]
      break;
 80055c2:	e004      	b.n	80055ce <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80055c4:	bf00      	nop
 80055c6:	e002      	b.n	80055ce <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80055c8:	bf00      	nop
 80055ca:	e000      	b.n	80055ce <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80055cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d169      	bne.n	80056a8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055d4:	4b37      	ldr	r3, [pc, #220]	@ (80056b4 <RCCEx_PLLSAI2_Config+0x150>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a36      	ldr	r2, [pc, #216]	@ (80056b4 <RCCEx_PLLSAI2_Config+0x150>)
 80055da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e0:	f7fc fde4 	bl	80021ac <HAL_GetTick>
 80055e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055e6:	e00f      	b.n	8005608 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055e8:	f7fc fde0 	bl	80021ac <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d908      	bls.n	8005608 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055f6:	4b2f      	ldr	r3, [pc, #188]	@ (80056b4 <RCCEx_PLLSAI2_Config+0x150>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005606:	e006      	b.n	8005616 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005608:	4b2a      	ldr	r3, [pc, #168]	@ (80056b4 <RCCEx_PLLSAI2_Config+0x150>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e9      	bne.n	80055e8 <RCCEx_PLLSAI2_Config+0x84>
 8005614:	e000      	b.n	8005618 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005616:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d144      	bne.n	80056a8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d115      	bne.n	8005650 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005624:	4b23      	ldr	r3, [pc, #140]	@ (80056b4 <RCCEx_PLLSAI2_Config+0x150>)
 8005626:	695a      	ldr	r2, [r3, #20]
 8005628:	4b23      	ldr	r3, [pc, #140]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x154>)
 800562a:	4013      	ands	r3, r2
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6892      	ldr	r2, [r2, #8]
 8005630:	0211      	lsls	r1, r2, #8
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	68d2      	ldr	r2, [r2, #12]
 8005636:	06d2      	lsls	r2, r2, #27
 8005638:	4311      	orrs	r1, r2
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6852      	ldr	r2, [r2, #4]
 800563e:	3a01      	subs	r2, #1
 8005640:	0112      	lsls	r2, r2, #4
 8005642:	4311      	orrs	r1, r2
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	491a      	ldr	r1, [pc, #104]	@ (80056b4 <RCCEx_PLLSAI2_Config+0x150>)
 800564c:	4313      	orrs	r3, r2
 800564e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005650:	4b18      	ldr	r3, [pc, #96]	@ (80056b4 <RCCEx_PLLSAI2_Config+0x150>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a17      	ldr	r2, [pc, #92]	@ (80056b4 <RCCEx_PLLSAI2_Config+0x150>)
 8005656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800565a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565c:	f7fc fda6 	bl	80021ac <HAL_GetTick>
 8005660:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005662:	e00f      	b.n	8005684 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005664:	f7fc fda2 	bl	80021ac <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d908      	bls.n	8005684 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005672:	4b10      	ldr	r3, [pc, #64]	@ (80056b4 <RCCEx_PLLSAI2_Config+0x150>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d109      	bne.n	8005692 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005682:	e006      	b.n	8005692 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005684:	4b0b      	ldr	r3, [pc, #44]	@ (80056b4 <RCCEx_PLLSAI2_Config+0x150>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0e9      	beq.n	8005664 <RCCEx_PLLSAI2_Config+0x100>
 8005690:	e000      	b.n	8005694 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005692:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800569a:	4b06      	ldr	r3, [pc, #24]	@ (80056b4 <RCCEx_PLLSAI2_Config+0x150>)
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	4904      	ldr	r1, [pc, #16]	@ (80056b4 <RCCEx_PLLSAI2_Config+0x150>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40021000 	.word	0x40021000
 80056b8:	07ff800c 	.word	0x07ff800c

080056bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d066      	beq.n	800579c <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fc f9fc 	bl	8001ae0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f003 0310 	and.w	r3, r3, #16
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d045      	beq.n	800578a <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056fe:	4b2a      	ldr	r3, [pc, #168]	@ (80057a8 <HAL_RTC_Init+0xec>)
 8005700:	22ca      	movs	r2, #202	@ 0xca
 8005702:	625a      	str	r2, [r3, #36]	@ 0x24
 8005704:	4b28      	ldr	r3, [pc, #160]	@ (80057a8 <HAL_RTC_Init+0xec>)
 8005706:	2253      	movs	r2, #83	@ 0x53
 8005708:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fa38 	bl	8005b80 <RTC_EnterInitMode>
 8005710:	4603      	mov	r3, r0
 8005712:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d121      	bne.n	800575e <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800571a:	4b23      	ldr	r3, [pc, #140]	@ (80057a8 <HAL_RTC_Init+0xec>)
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	4a22      	ldr	r2, [pc, #136]	@ (80057a8 <HAL_RTC_Init+0xec>)
 8005720:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8005724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005728:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800572a:	4b1f      	ldr	r3, [pc, #124]	@ (80057a8 <HAL_RTC_Init+0xec>)
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6859      	ldr	r1, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	4319      	orrs	r1, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	430b      	orrs	r3, r1
 800573e:	491a      	ldr	r1, [pc, #104]	@ (80057a8 <HAL_RTC_Init+0xec>)
 8005740:	4313      	orrs	r3, r2
 8005742:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	041b      	lsls	r3, r3, #16
 800574e:	4916      	ldr	r1, [pc, #88]	@ (80057a8 <HAL_RTC_Init+0xec>)
 8005750:	4313      	orrs	r3, r2
 8005752:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fa47 	bl	8005be8 <RTC_ExitInitMode>
 800575a:	4603      	mov	r3, r0
 800575c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10e      	bne.n	8005782 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8005764:	4b10      	ldr	r3, [pc, #64]	@ (80057a8 <HAL_RTC_Init+0xec>)
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a19      	ldr	r1, [r3, #32]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	4319      	orrs	r1, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	430b      	orrs	r3, r1
 800577c:	490a      	ldr	r1, [pc, #40]	@ (80057a8 <HAL_RTC_Init+0xec>)
 800577e:	4313      	orrs	r3, r2
 8005780:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005782:	4b09      	ldr	r3, [pc, #36]	@ (80057a8 <HAL_RTC_Init+0xec>)
 8005784:	22ff      	movs	r2, #255	@ 0xff
 8005786:	625a      	str	r2, [r3, #36]	@ 0x24
 8005788:	e001      	b.n	800578e <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d103      	bne.n	800579c <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 800579c:	7bfb      	ldrb	r3, [r7, #15]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40002800 	.word	0x40002800

080057ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057ac:	b590      	push	{r4, r7, lr}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_RTC_SetTime+0x1a>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e081      	b.n	80058ca <HAL_RTC_SetTime+0x11e>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2202      	movs	r2, #2
 80057d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057d6:	4b3f      	ldr	r3, [pc, #252]	@ (80058d4 <HAL_RTC_SetTime+0x128>)
 80057d8:	22ca      	movs	r2, #202	@ 0xca
 80057da:	625a      	str	r2, [r3, #36]	@ 0x24
 80057dc:	4b3d      	ldr	r3, [pc, #244]	@ (80058d4 <HAL_RTC_SetTime+0x128>)
 80057de:	2253      	movs	r2, #83	@ 0x53
 80057e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 f9cc 	bl	8005b80 <RTC_EnterInitMode>
 80057e8:	4603      	mov	r3, r0
 80057ea:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80057ec:	7cfb      	ldrb	r3, [r7, #19]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d15c      	bne.n	80058ac <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d125      	bne.n	8005844 <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80057f8:	4b36      	ldr	r3, [pc, #216]	@ (80058d4 <HAL_RTC_SetTime+0x128>)
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2200      	movs	r2, #0
 8005808:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fa28 	bl	8005c64 <RTC_ByteToBcd2>
 8005814:	4603      	mov	r3, r0
 8005816:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fa21 	bl	8005c64 <RTC_ByteToBcd2>
 8005822:	4603      	mov	r3, r0
 8005824:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005826:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	789b      	ldrb	r3, [r3, #2]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fa19 	bl	8005c64 <RTC_ByteToBcd2>
 8005832:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005834:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	78db      	ldrb	r3, [r3, #3]
 800583c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	e017      	b.n	8005874 <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005844:	4b23      	ldr	r3, [pc, #140]	@ (80058d4 <HAL_RTC_SetTime+0x128>)
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2200      	movs	r2, #0
 8005854:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005862:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005868:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	78db      	ldrb	r3, [r3, #3]
 800586e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8005874:	4a17      	ldr	r2, [pc, #92]	@ (80058d4 <HAL_RTC_SetTime+0x128>)
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800587c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005880:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8005882:	4b14      	ldr	r3, [pc, #80]	@ (80058d4 <HAL_RTC_SetTime+0x128>)
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	4a13      	ldr	r2, [pc, #76]	@ (80058d4 <HAL_RTC_SetTime+0x128>)
 8005888:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800588c:	6193      	str	r3, [r2, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800588e:	4b11      	ldr	r3, [pc, #68]	@ (80058d4 <HAL_RTC_SetTime+0x128>)
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	68d9      	ldr	r1, [r3, #12]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	430b      	orrs	r3, r1
 800589c:	490d      	ldr	r1, [pc, #52]	@ (80058d4 <HAL_RTC_SetTime+0x128>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f9a0 	bl	8005be8 <RTC_ExitInitMode>
 80058a8:	4603      	mov	r3, r0
 80058aa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058ac:	4b09      	ldr	r3, [pc, #36]	@ (80058d4 <HAL_RTC_SetTime+0x128>)
 80058ae:	22ff      	movs	r2, #255	@ 0xff
 80058b0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80058b2:	7cfb      	ldrb	r3, [r7, #19]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d103      	bne.n	80058c0 <HAL_RTC_SetTime+0x114>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd90      	pop	{r4, r7, pc}
 80058d2:	bf00      	nop
 80058d4:	40002800 	.word	0x40002800

080058d8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80058e4:	4b29      	ldr	r3, [pc, #164]	@ (800598c <HAL_RTC_GetTime+0xb4>)
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80058ec:	4b27      	ldr	r3, [pc, #156]	@ (800598c <HAL_RTC_GetTime+0xb4>)
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80058f8:	4b24      	ldr	r3, [pc, #144]	@ (800598c <HAL_RTC_GetTime+0xb4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005900:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005904:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	0c1b      	lsrs	r3, r3, #16
 800590a:	b2db      	uxtb	r3, r3
 800590c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005910:	b2da      	uxtb	r2, r3
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	0a1b      	lsrs	r3, r3, #8
 800591a:	b2db      	uxtb	r3, r3
 800591c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005920:	b2da      	uxtb	r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800592e:	b2da      	uxtb	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	0d9b      	lsrs	r3, r3, #22
 8005938:	b2db      	uxtb	r3, r3
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	b2da      	uxtb	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d11a      	bne.n	8005980 <HAL_RTC_GetTime+0xa8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f9a8 	bl	8005ca4 <RTC_Bcd2ToByte>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	785b      	ldrb	r3, [r3, #1]
 8005960:	4618      	mov	r0, r3
 8005962:	f000 f99f 	bl	8005ca4 <RTC_Bcd2ToByte>
 8005966:	4603      	mov	r3, r0
 8005968:	461a      	mov	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	789b      	ldrb	r3, [r3, #2]
 8005972:	4618      	mov	r0, r3
 8005974:	f000 f996 	bl	8005ca4 <RTC_Bcd2ToByte>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	40002800 	.word	0x40002800

08005990 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_RTC_SetDate+0x1a>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e071      	b.n	8005a8e <HAL_RTC_SetDate+0xfe>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2202      	movs	r2, #2
 80059b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10e      	bne.n	80059de <HAL_RTC_SetDate+0x4e>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	785b      	ldrb	r3, [r3, #1]
 80059d0:	f023 0310 	bic.w	r3, r3, #16
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	330a      	adds	r3, #10
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d11c      	bne.n	8005a1e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	78db      	ldrb	r3, [r3, #3]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 f93b 	bl	8005c64 <RTC_ByteToBcd2>
 80059ee:	4603      	mov	r3, r0
 80059f0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	785b      	ldrb	r3, [r3, #1]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 f934 	bl	8005c64 <RTC_ByteToBcd2>
 80059fc:	4603      	mov	r3, r0
 80059fe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005a00:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	789b      	ldrb	r3, [r3, #2]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f92c 	bl	8005c64 <RTC_ByteToBcd2>
 8005a0c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a0e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	e00e      	b.n	8005a3c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	78db      	ldrb	r3, [r3, #3]
 8005a22:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	785b      	ldrb	r3, [r3, #1]
 8005a28:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a2a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a30:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a3c:	4b16      	ldr	r3, [pc, #88]	@ (8005a98 <HAL_RTC_SetDate+0x108>)
 8005a3e:	22ca      	movs	r2, #202	@ 0xca
 8005a40:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a42:	4b15      	ldr	r3, [pc, #84]	@ (8005a98 <HAL_RTC_SetDate+0x108>)
 8005a44:	2253      	movs	r2, #83	@ 0x53
 8005a46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f899 	bl	8005b80 <RTC_EnterInitMode>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005a52:	7cfb      	ldrb	r3, [r7, #19]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10b      	bne.n	8005a70 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8005a58:	4a0f      	ldr	r2, [pc, #60]	@ (8005a98 <HAL_RTC_SetDate+0x108>)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005a60:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005a64:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f8be 	bl	8005be8 <RTC_ExitInitMode>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a70:	4b09      	ldr	r3, [pc, #36]	@ (8005a98 <HAL_RTC_SetDate+0x108>)
 8005a72:	22ff      	movs	r2, #255	@ 0xff
 8005a74:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005a76:	7cfb      	ldrb	r3, [r7, #19]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d103      	bne.n	8005a84 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005a8c:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd90      	pop	{r4, r7, pc}
 8005a96:	bf00      	nop
 8005a98:	40002800 	.word	0x40002800

08005a9c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8005aa8:	4b22      	ldr	r3, [pc, #136]	@ (8005b34 <HAL_RTC_GetDate+0x98>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005ab0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ab4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	0c1b      	lsrs	r3, r3, #16
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	0a1b      	lsrs	r3, r3, #8
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	f003 031f 	and.w	r3, r3, #31
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	0b5b      	lsrs	r3, r3, #13
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d11a      	bne.n	8005b2a <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	78db      	ldrb	r3, [r3, #3]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 f8d3 	bl	8005ca4 <RTC_Bcd2ToByte>
 8005afe:	4603      	mov	r3, r0
 8005b00:	461a      	mov	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	785b      	ldrb	r3, [r3, #1]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 f8ca 	bl	8005ca4 <RTC_Bcd2ToByte>
 8005b10:	4603      	mov	r3, r0
 8005b12:	461a      	mov	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	789b      	ldrb	r3, [r3, #2]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 f8c1 	bl	8005ca4 <RTC_Bcd2ToByte>
 8005b22:	4603      	mov	r3, r0
 8005b24:	461a      	mov	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40002800 	.word	0x40002800

08005b38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8005b40:	4b0d      	ldr	r3, [pc, #52]	@ (8005b78 <HAL_RTC_WaitForSynchro+0x40>)
 8005b42:	4a0e      	ldr	r2, [pc, #56]	@ (8005b7c <HAL_RTC_WaitForSynchro+0x44>)
 8005b44:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005b46:	f7fc fb31 	bl	80021ac <HAL_GetTick>
 8005b4a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005b4c:	e009      	b.n	8005b62 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b4e:	f7fc fb2d 	bl	80021ac <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b5c:	d901      	bls.n	8005b62 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e006      	b.n	8005b70 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005b62:	4b05      	ldr	r3, [pc, #20]	@ (8005b78 <HAL_RTC_WaitForSynchro+0x40>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0ef      	beq.n	8005b4e <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40002800 	.word	0x40002800
 8005b7c:	0001005c 	.word	0x0001005c

08005b80 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005b8c:	4b15      	ldr	r3, [pc, #84]	@ (8005be4 <RTC_EnterInitMode+0x64>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d120      	bne.n	8005bda <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005b98:	4b12      	ldr	r3, [pc, #72]	@ (8005be4 <RTC_EnterInitMode+0x64>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4a11      	ldr	r2, [pc, #68]	@ (8005be4 <RTC_EnterInitMode+0x64>)
 8005b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ba2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005ba4:	f7fc fb02 	bl	80021ac <HAL_GetTick>
 8005ba8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005baa:	e00d      	b.n	8005bc8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005bac:	f7fc fafe 	bl	80021ac <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bba:	d905      	bls.n	8005bc8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2203      	movs	r2, #3
 8005bc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005bc8:	4b06      	ldr	r3, [pc, #24]	@ (8005be4 <RTC_EnterInitMode+0x64>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d102      	bne.n	8005bda <RTC_EnterInitMode+0x5a>
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d1e8      	bne.n	8005bac <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40002800 	.word	0x40002800

08005be8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c60 <RTC_ExitInitMode+0x78>)
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	4a19      	ldr	r2, [pc, #100]	@ (8005c60 <RTC_ExitInitMode+0x78>)
 8005bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bfe:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005c00:	4b17      	ldr	r3, [pc, #92]	@ (8005c60 <RTC_ExitInitMode+0x78>)
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10c      	bne.n	8005c26 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff ff93 	bl	8005b38 <HAL_RTC_WaitForSynchro>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01e      	beq.n	8005c56 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2203      	movs	r2, #3
 8005c1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	73fb      	strb	r3, [r7, #15]
 8005c24:	e017      	b.n	8005c56 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c26:	4b0e      	ldr	r3, [pc, #56]	@ (8005c60 <RTC_ExitInitMode+0x78>)
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8005c60 <RTC_ExitInitMode+0x78>)
 8005c2c:	f023 0320 	bic.w	r3, r3, #32
 8005c30:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff ff80 	bl	8005b38 <HAL_RTC_WaitForSynchro>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d005      	beq.n	8005c4a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2203      	movs	r2, #3
 8005c42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c4a:	4b05      	ldr	r3, [pc, #20]	@ (8005c60 <RTC_ExitInitMode+0x78>)
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	4a04      	ldr	r2, [pc, #16]	@ (8005c60 <RTC_ExitInitMode+0x78>)
 8005c50:	f043 0320 	orr.w	r3, r3, #32
 8005c54:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40002800 	.word	0x40002800

08005c64 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8005c76:	e005      	b.n	8005c84 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	3b0a      	subs	r3, #10
 8005c82:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8005c84:	7afb      	ldrb	r3, [r7, #11]
 8005c86:	2b09      	cmp	r3, #9
 8005c88:	d8f6      	bhi.n	8005c78 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	7afb      	ldrb	r3, [r7, #11]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	b2db      	uxtb	r3, r3
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	79fb      	ldrb	r3, [r7, #7]
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	4413      	add	r3, r2
 8005cce:	b2db      	uxtb	r3, r3
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8005ce8:	4b07      	ldr	r3, [pc, #28]	@ (8005d08 <HAL_RTCEx_BKUPWrite+0x2c>)
 8005cea:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	601a      	str	r2, [r3, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	40003500 	.word	0x40003500

08005d0c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8005d16:	4b07      	ldr	r3, [pc, #28]	@ (8005d34 <HAL_RTCEx_BKUPRead+0x28>)
 8005d18:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	4413      	add	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	40003500 	.word	0x40003500

08005d38 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	490f      	ldr	r1, [pc, #60]	@ (8005d88 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	490c      	ldr	r1, [pc, #48]	@ (8005d8c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d8c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6919      	ldr	r1, [r3, #16]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	041b      	lsls	r3, r3, #16
 8005d70:	430b      	orrs	r3, r1
 8005d72:	4906      	ldr	r1, [pc, #24]	@ (8005d8c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40002800 	.word	0x40002800
 8005d8c:	40003400 	.word	0x40003400

08005d90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e042      	b.n	8005e28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d106      	bne.n	8005dba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7fc f8ff 	bl	8001fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2224      	movs	r2, #36	@ 0x24
 8005dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0201 	bic.w	r2, r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fefa 	bl	8006bd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fbf7 	bl	80065d4 <UART_SetConfig>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e01b      	b.n	8005e28 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005dfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0201 	orr.w	r2, r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 ff79 	bl	8006d18 <UART_CheckIdleState>
 8005e26:	4603      	mov	r3, r0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	@ 0x28
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d17b      	bne.n	8005f42 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <HAL_UART_Transmit+0x26>
 8005e50:	88fb      	ldrh	r3, [r7, #6]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e074      	b.n	8005f44 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2221      	movs	r2, #33	@ 0x21
 8005e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e6a:	f7fc f99f 	bl	80021ac <HAL_GetTick>
 8005e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	88fa      	ldrh	r2, [r7, #6]
 8005e74:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	88fa      	ldrh	r2, [r7, #6]
 8005e7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e88:	d108      	bne.n	8005e9c <HAL_UART_Transmit+0x6c>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	e003      	b.n	8005ea4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ea4:	e030      	b.n	8005f08 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2200      	movs	r2, #0
 8005eae:	2180      	movs	r1, #128	@ 0x80
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 ffdb 	bl	8006e6c <UART_WaitOnFlagUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e03d      	b.n	8005f44 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10b      	bne.n	8005ee6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005edc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	e007      	b.n	8005ef6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	781a      	ldrb	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1c8      	bne.n	8005ea6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2140      	movs	r1, #64	@ 0x40
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 ffa4 	bl	8006e6c <UART_WaitOnFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e006      	b.n	8005f44 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e000      	b.n	8005f44 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
  }
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b0ba      	sub	sp, #232	@ 0xe8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005f76:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005f80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d11b      	bne.n	8005fc0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d015      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d105      	bne.n	8005fac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d009      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 82e3 	beq.w	800657c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	4798      	blx	r3
      }
      return;
 8005fbe:	e2dd      	b.n	800657c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005fc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 8123 	beq.w	8006210 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005fca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005fce:	4b8d      	ldr	r3, [pc, #564]	@ (8006204 <HAL_UART_IRQHandler+0x2b8>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d106      	bne.n	8005fe4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005fd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005fda:	4b8b      	ldr	r3, [pc, #556]	@ (8006208 <HAL_UART_IRQHandler+0x2bc>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 8116 	beq.w	8006210 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d011      	beq.n	8006014 <HAL_UART_IRQHandler+0xc8>
 8005ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00b      	beq.n	8006014 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2201      	movs	r2, #1
 8006002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800600a:	f043 0201 	orr.w	r2, r3, #1
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d011      	beq.n	8006044 <HAL_UART_IRQHandler+0xf8>
 8006020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00b      	beq.n	8006044 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2202      	movs	r2, #2
 8006032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800603a:	f043 0204 	orr.w	r2, r3, #4
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d011      	beq.n	8006074 <HAL_UART_IRQHandler+0x128>
 8006050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2204      	movs	r2, #4
 8006062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800606a:	f043 0202 	orr.w	r2, r3, #2
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b00      	cmp	r3, #0
 800607e:	d017      	beq.n	80060b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d105      	bne.n	8006098 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800608c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006090:	4b5c      	ldr	r3, [pc, #368]	@ (8006204 <HAL_UART_IRQHandler+0x2b8>)
 8006092:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00b      	beq.n	80060b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2208      	movs	r2, #8
 800609e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a6:	f043 0208 	orr.w	r2, r3, #8
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80060b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d012      	beq.n	80060e2 <HAL_UART_IRQHandler+0x196>
 80060bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00c      	beq.n	80060e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d8:	f043 0220 	orr.w	r2, r3, #32
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8249 	beq.w	8006580 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80060ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d013      	beq.n	8006122 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80060fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b00      	cmp	r3, #0
 8006104:	d105      	bne.n	8006112 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800610a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d007      	beq.n	8006122 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006128:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006136:	2b40      	cmp	r3, #64	@ 0x40
 8006138:	d005      	beq.n	8006146 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800613a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800613e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006142:	2b00      	cmp	r3, #0
 8006144:	d054      	beq.n	80061f0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fefd 	bl	8006f46 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006156:	2b40      	cmp	r3, #64	@ 0x40
 8006158:	d146      	bne.n	80061e8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3308      	adds	r3, #8
 8006160:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006164:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006170:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006178:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3308      	adds	r3, #8
 8006182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006186:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800618a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800619e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1d9      	bne.n	800615a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d017      	beq.n	80061e0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061b6:	4a15      	ldr	r2, [pc, #84]	@ (800620c <HAL_UART_IRQHandler+0x2c0>)
 80061b8:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fd f92e 	bl	8003422 <HAL_DMA_Abort_IT>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d019      	beq.n	8006200 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80061da:	4610      	mov	r0, r2
 80061dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061de:	e00f      	b.n	8006200 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f9e1 	bl	80065a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e6:	e00b      	b.n	8006200 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f9dd 	bl	80065a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ee:	e007      	b.n	8006200 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f9d9 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80061fe:	e1bf      	b.n	8006580 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006200:	bf00      	nop
    return;
 8006202:	e1bd      	b.n	8006580 <HAL_UART_IRQHandler+0x634>
 8006204:	10000001 	.word	0x10000001
 8006208:	04000120 	.word	0x04000120
 800620c:	08007013 	.word	0x08007013

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006214:	2b01      	cmp	r3, #1
 8006216:	f040 8153 	bne.w	80064c0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800621a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800621e:	f003 0310 	and.w	r3, r3, #16
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 814c 	beq.w	80064c0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8145 	beq.w	80064c0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2210      	movs	r2, #16
 800623c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006248:	2b40      	cmp	r3, #64	@ 0x40
 800624a:	f040 80bb 	bne.w	80063c4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800625c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 818f 	beq.w	8006584 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800626c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006270:	429a      	cmp	r2, r3
 8006272:	f080 8187 	bcs.w	8006584 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800627c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b00      	cmp	r3, #0
 8006290:	f040 8087 	bne.w	80063a2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80062a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80062c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80062ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80062d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1da      	bne.n	8006294 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3308      	adds	r3, #8
 80062e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80062ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062f0:	f023 0301 	bic.w	r3, r3, #1
 80062f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3308      	adds	r3, #8
 80062fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006302:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006306:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006308:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800630a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006314:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e1      	bne.n	80062de <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3308      	adds	r3, #8
 8006320:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800632a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800632c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006330:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3308      	adds	r3, #8
 800633a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800633e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006340:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006344:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800634c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e3      	bne.n	800631a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800636e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006370:	f023 0310 	bic.w	r3, r3, #16
 8006374:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006382:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006384:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006388:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e4      	bne.n	8006360 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800639c:	4618      	mov	r0, r3
 800639e:	f7fc ffe4 	bl	800336a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2202      	movs	r2, #2
 80063a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	4619      	mov	r1, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f8fd 	bl	80065bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063c2:	e0df      	b.n	8006584 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80d1 	beq.w	8006588 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80063e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 80cc 	beq.w	8006588 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006400:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006404:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006412:	647b      	str	r3, [r7, #68]	@ 0x44
 8006414:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006418:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e4      	bne.n	80063f0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3308      	adds	r3, #8
 800642c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	623b      	str	r3, [r7, #32]
   return(result);
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800643c:	f023 0301 	bic.w	r3, r3, #1
 8006440:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3308      	adds	r3, #8
 800644a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800644e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006450:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800645c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e1      	bne.n	8006426 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	60fb      	str	r3, [r7, #12]
   return(result);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0310 	bic.w	r3, r3, #16
 800648a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006498:	61fb      	str	r3, [r7, #28]
 800649a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	69b9      	ldr	r1, [r7, #24]
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	e841 2300 	strex	r3, r2, [r1]
 80064a4:	617b      	str	r3, [r7, #20]
   return(result);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e4      	bne.n	8006476 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f87f 	bl	80065bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064be:	e063      	b.n	8006588 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00e      	beq.n	80064ea <HAL_UART_IRQHandler+0x59e>
 80064cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d008      	beq.n	80064ea <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80064e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fdd6 	bl	8007094 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064e8:	e051      	b.n	800658e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80064ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d014      	beq.n	8006520 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80064f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d105      	bne.n	800650e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006506:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d008      	beq.n	8006520 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006512:	2b00      	cmp	r3, #0
 8006514:	d03a      	beq.n	800658c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	4798      	blx	r3
    }
    return;
 800651e:	e035      	b.n	800658c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	d009      	beq.n	8006540 <HAL_UART_IRQHandler+0x5f4>
 800652c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fd80 	bl	800703e <UART_EndTransmit_IT>
    return;
 800653e:	e026      	b.n	800658e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006544:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d009      	beq.n	8006560 <HAL_UART_IRQHandler+0x614>
 800654c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006550:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fdaf 	bl	80070bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800655e:	e016      	b.n	800658e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006564:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d010      	beq.n	800658e <HAL_UART_IRQHandler+0x642>
 800656c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006570:	2b00      	cmp	r3, #0
 8006572:	da0c      	bge.n	800658e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fd97 	bl	80070a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800657a:	e008      	b.n	800658e <HAL_UART_IRQHandler+0x642>
      return;
 800657c:	bf00      	nop
 800657e:	e006      	b.n	800658e <HAL_UART_IRQHandler+0x642>
    return;
 8006580:	bf00      	nop
 8006582:	e004      	b.n	800658e <HAL_UART_IRQHandler+0x642>
      return;
 8006584:	bf00      	nop
 8006586:	e002      	b.n	800658e <HAL_UART_IRQHandler+0x642>
      return;
 8006588:	bf00      	nop
 800658a:	e000      	b.n	800658e <HAL_UART_IRQHandler+0x642>
    return;
 800658c:	bf00      	nop
  }
}
 800658e:	37e8      	adds	r7, #232	@ 0xe8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065d8:	b08c      	sub	sp, #48	@ 0x30
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	431a      	orrs	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	4baa      	ldr	r3, [pc, #680]	@ (80068ac <UART_SetConfig+0x2d8>)
 8006604:	4013      	ands	r3, r2
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	6812      	ldr	r2, [r2, #0]
 800660a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800660c:	430b      	orrs	r3, r1
 800660e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a9f      	ldr	r2, [pc, #636]	@ (80068b0 <UART_SetConfig+0x2dc>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d004      	beq.n	8006640 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800663c:	4313      	orrs	r3, r2
 800663e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800664a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	6812      	ldr	r2, [r2, #0]
 8006652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006654:	430b      	orrs	r3, r1
 8006656:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665e:	f023 010f 	bic.w	r1, r3, #15
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a90      	ldr	r2, [pc, #576]	@ (80068b4 <UART_SetConfig+0x2e0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d125      	bne.n	80066c4 <UART_SetConfig+0xf0>
 8006678:	4b8f      	ldr	r3, [pc, #572]	@ (80068b8 <UART_SetConfig+0x2e4>)
 800667a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	2b03      	cmp	r3, #3
 8006684:	d81a      	bhi.n	80066bc <UART_SetConfig+0xe8>
 8006686:	a201      	add	r2, pc, #4	@ (adr r2, 800668c <UART_SetConfig+0xb8>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	0800669d 	.word	0x0800669d
 8006690:	080066ad 	.word	0x080066ad
 8006694:	080066a5 	.word	0x080066a5
 8006698:	080066b5 	.word	0x080066b5
 800669c:	2301      	movs	r3, #1
 800669e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066a2:	e116      	b.n	80068d2 <UART_SetConfig+0x2fe>
 80066a4:	2302      	movs	r3, #2
 80066a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066aa:	e112      	b.n	80068d2 <UART_SetConfig+0x2fe>
 80066ac:	2304      	movs	r3, #4
 80066ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b2:	e10e      	b.n	80068d2 <UART_SetConfig+0x2fe>
 80066b4:	2308      	movs	r3, #8
 80066b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ba:	e10a      	b.n	80068d2 <UART_SetConfig+0x2fe>
 80066bc:	2310      	movs	r3, #16
 80066be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c2:	e106      	b.n	80068d2 <UART_SetConfig+0x2fe>
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a7c      	ldr	r2, [pc, #496]	@ (80068bc <UART_SetConfig+0x2e8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d138      	bne.n	8006740 <UART_SetConfig+0x16c>
 80066ce:	4b7a      	ldr	r3, [pc, #488]	@ (80068b8 <UART_SetConfig+0x2e4>)
 80066d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d4:	f003 030c 	and.w	r3, r3, #12
 80066d8:	2b0c      	cmp	r3, #12
 80066da:	d82d      	bhi.n	8006738 <UART_SetConfig+0x164>
 80066dc:	a201      	add	r2, pc, #4	@ (adr r2, 80066e4 <UART_SetConfig+0x110>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	08006719 	.word	0x08006719
 80066e8:	08006739 	.word	0x08006739
 80066ec:	08006739 	.word	0x08006739
 80066f0:	08006739 	.word	0x08006739
 80066f4:	08006729 	.word	0x08006729
 80066f8:	08006739 	.word	0x08006739
 80066fc:	08006739 	.word	0x08006739
 8006700:	08006739 	.word	0x08006739
 8006704:	08006721 	.word	0x08006721
 8006708:	08006739 	.word	0x08006739
 800670c:	08006739 	.word	0x08006739
 8006710:	08006739 	.word	0x08006739
 8006714:	08006731 	.word	0x08006731
 8006718:	2300      	movs	r3, #0
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800671e:	e0d8      	b.n	80068d2 <UART_SetConfig+0x2fe>
 8006720:	2302      	movs	r3, #2
 8006722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006726:	e0d4      	b.n	80068d2 <UART_SetConfig+0x2fe>
 8006728:	2304      	movs	r3, #4
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800672e:	e0d0      	b.n	80068d2 <UART_SetConfig+0x2fe>
 8006730:	2308      	movs	r3, #8
 8006732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006736:	e0cc      	b.n	80068d2 <UART_SetConfig+0x2fe>
 8006738:	2310      	movs	r3, #16
 800673a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800673e:	e0c8      	b.n	80068d2 <UART_SetConfig+0x2fe>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a5e      	ldr	r2, [pc, #376]	@ (80068c0 <UART_SetConfig+0x2ec>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d125      	bne.n	8006796 <UART_SetConfig+0x1c2>
 800674a:	4b5b      	ldr	r3, [pc, #364]	@ (80068b8 <UART_SetConfig+0x2e4>)
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006750:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006754:	2b30      	cmp	r3, #48	@ 0x30
 8006756:	d016      	beq.n	8006786 <UART_SetConfig+0x1b2>
 8006758:	2b30      	cmp	r3, #48	@ 0x30
 800675a:	d818      	bhi.n	800678e <UART_SetConfig+0x1ba>
 800675c:	2b20      	cmp	r3, #32
 800675e:	d00a      	beq.n	8006776 <UART_SetConfig+0x1a2>
 8006760:	2b20      	cmp	r3, #32
 8006762:	d814      	bhi.n	800678e <UART_SetConfig+0x1ba>
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <UART_SetConfig+0x19a>
 8006768:	2b10      	cmp	r3, #16
 800676a:	d008      	beq.n	800677e <UART_SetConfig+0x1aa>
 800676c:	e00f      	b.n	800678e <UART_SetConfig+0x1ba>
 800676e:	2300      	movs	r3, #0
 8006770:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006774:	e0ad      	b.n	80068d2 <UART_SetConfig+0x2fe>
 8006776:	2302      	movs	r3, #2
 8006778:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800677c:	e0a9      	b.n	80068d2 <UART_SetConfig+0x2fe>
 800677e:	2304      	movs	r3, #4
 8006780:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006784:	e0a5      	b.n	80068d2 <UART_SetConfig+0x2fe>
 8006786:	2308      	movs	r3, #8
 8006788:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800678c:	e0a1      	b.n	80068d2 <UART_SetConfig+0x2fe>
 800678e:	2310      	movs	r3, #16
 8006790:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006794:	e09d      	b.n	80068d2 <UART_SetConfig+0x2fe>
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a4a      	ldr	r2, [pc, #296]	@ (80068c4 <UART_SetConfig+0x2f0>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d125      	bne.n	80067ec <UART_SetConfig+0x218>
 80067a0:	4b45      	ldr	r3, [pc, #276]	@ (80068b8 <UART_SetConfig+0x2e4>)
 80067a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80067aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80067ac:	d016      	beq.n	80067dc <UART_SetConfig+0x208>
 80067ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80067b0:	d818      	bhi.n	80067e4 <UART_SetConfig+0x210>
 80067b2:	2b80      	cmp	r3, #128	@ 0x80
 80067b4:	d00a      	beq.n	80067cc <UART_SetConfig+0x1f8>
 80067b6:	2b80      	cmp	r3, #128	@ 0x80
 80067b8:	d814      	bhi.n	80067e4 <UART_SetConfig+0x210>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <UART_SetConfig+0x1f0>
 80067be:	2b40      	cmp	r3, #64	@ 0x40
 80067c0:	d008      	beq.n	80067d4 <UART_SetConfig+0x200>
 80067c2:	e00f      	b.n	80067e4 <UART_SetConfig+0x210>
 80067c4:	2300      	movs	r3, #0
 80067c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ca:	e082      	b.n	80068d2 <UART_SetConfig+0x2fe>
 80067cc:	2302      	movs	r3, #2
 80067ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d2:	e07e      	b.n	80068d2 <UART_SetConfig+0x2fe>
 80067d4:	2304      	movs	r3, #4
 80067d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067da:	e07a      	b.n	80068d2 <UART_SetConfig+0x2fe>
 80067dc:	2308      	movs	r3, #8
 80067de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067e2:	e076      	b.n	80068d2 <UART_SetConfig+0x2fe>
 80067e4:	2310      	movs	r3, #16
 80067e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ea:	e072      	b.n	80068d2 <UART_SetConfig+0x2fe>
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a35      	ldr	r2, [pc, #212]	@ (80068c8 <UART_SetConfig+0x2f4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d12a      	bne.n	800684c <UART_SetConfig+0x278>
 80067f6:	4b30      	ldr	r3, [pc, #192]	@ (80068b8 <UART_SetConfig+0x2e4>)
 80067f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006800:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006804:	d01a      	beq.n	800683c <UART_SetConfig+0x268>
 8006806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800680a:	d81b      	bhi.n	8006844 <UART_SetConfig+0x270>
 800680c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006810:	d00c      	beq.n	800682c <UART_SetConfig+0x258>
 8006812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006816:	d815      	bhi.n	8006844 <UART_SetConfig+0x270>
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <UART_SetConfig+0x250>
 800681c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006820:	d008      	beq.n	8006834 <UART_SetConfig+0x260>
 8006822:	e00f      	b.n	8006844 <UART_SetConfig+0x270>
 8006824:	2300      	movs	r3, #0
 8006826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800682a:	e052      	b.n	80068d2 <UART_SetConfig+0x2fe>
 800682c:	2302      	movs	r3, #2
 800682e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006832:	e04e      	b.n	80068d2 <UART_SetConfig+0x2fe>
 8006834:	2304      	movs	r3, #4
 8006836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800683a:	e04a      	b.n	80068d2 <UART_SetConfig+0x2fe>
 800683c:	2308      	movs	r3, #8
 800683e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006842:	e046      	b.n	80068d2 <UART_SetConfig+0x2fe>
 8006844:	2310      	movs	r3, #16
 8006846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800684a:	e042      	b.n	80068d2 <UART_SetConfig+0x2fe>
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a17      	ldr	r2, [pc, #92]	@ (80068b0 <UART_SetConfig+0x2dc>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d13a      	bne.n	80068cc <UART_SetConfig+0x2f8>
 8006856:	4b18      	ldr	r3, [pc, #96]	@ (80068b8 <UART_SetConfig+0x2e4>)
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006860:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006864:	d01a      	beq.n	800689c <UART_SetConfig+0x2c8>
 8006866:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800686a:	d81b      	bhi.n	80068a4 <UART_SetConfig+0x2d0>
 800686c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006870:	d00c      	beq.n	800688c <UART_SetConfig+0x2b8>
 8006872:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006876:	d815      	bhi.n	80068a4 <UART_SetConfig+0x2d0>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <UART_SetConfig+0x2b0>
 800687c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006880:	d008      	beq.n	8006894 <UART_SetConfig+0x2c0>
 8006882:	e00f      	b.n	80068a4 <UART_SetConfig+0x2d0>
 8006884:	2300      	movs	r3, #0
 8006886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800688a:	e022      	b.n	80068d2 <UART_SetConfig+0x2fe>
 800688c:	2302      	movs	r3, #2
 800688e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006892:	e01e      	b.n	80068d2 <UART_SetConfig+0x2fe>
 8006894:	2304      	movs	r3, #4
 8006896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800689a:	e01a      	b.n	80068d2 <UART_SetConfig+0x2fe>
 800689c:	2308      	movs	r3, #8
 800689e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068a2:	e016      	b.n	80068d2 <UART_SetConfig+0x2fe>
 80068a4:	2310      	movs	r3, #16
 80068a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068aa:	e012      	b.n	80068d2 <UART_SetConfig+0x2fe>
 80068ac:	cfff69f3 	.word	0xcfff69f3
 80068b0:	40008000 	.word	0x40008000
 80068b4:	40013800 	.word	0x40013800
 80068b8:	40021000 	.word	0x40021000
 80068bc:	40004400 	.word	0x40004400
 80068c0:	40004800 	.word	0x40004800
 80068c4:	40004c00 	.word	0x40004c00
 80068c8:	40005000 	.word	0x40005000
 80068cc:	2310      	movs	r3, #16
 80068ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4ab0      	ldr	r2, [pc, #704]	@ (8006b98 <UART_SetConfig+0x5c4>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	f040 809b 	bne.w	8006a14 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80068e2:	2b08      	cmp	r3, #8
 80068e4:	d827      	bhi.n	8006936 <UART_SetConfig+0x362>
 80068e6:	a201      	add	r2, pc, #4	@ (adr r2, 80068ec <UART_SetConfig+0x318>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	08006911 	.word	0x08006911
 80068f0:	08006919 	.word	0x08006919
 80068f4:	08006921 	.word	0x08006921
 80068f8:	08006937 	.word	0x08006937
 80068fc:	08006927 	.word	0x08006927
 8006900:	08006937 	.word	0x08006937
 8006904:	08006937 	.word	0x08006937
 8006908:	08006937 	.word	0x08006937
 800690c:	0800692f 	.word	0x0800692f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006910:	f7fe f8c6 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8006914:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006916:	e014      	b.n	8006942 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006918:	f7fe f8d6 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 800691c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800691e:	e010      	b.n	8006942 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006920:	4b9e      	ldr	r3, [pc, #632]	@ (8006b9c <UART_SetConfig+0x5c8>)
 8006922:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006924:	e00d      	b.n	8006942 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006926:	f7fe f80b 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 800692a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800692c:	e009      	b.n	8006942 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800692e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006932:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006934:	e005      	b.n	8006942 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006940:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8130 	beq.w	8006baa <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	4a94      	ldr	r2, [pc, #592]	@ (8006ba0 <UART_SetConfig+0x5cc>)
 8006950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006954:	461a      	mov	r2, r3
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	fbb3 f3f2 	udiv	r3, r3, r2
 800695c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	4413      	add	r3, r2
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	429a      	cmp	r2, r3
 800696c:	d305      	bcc.n	800697a <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	429a      	cmp	r2, r3
 8006978:	d903      	bls.n	8006982 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006980:	e113      	b.n	8006baa <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006984:	2200      	movs	r2, #0
 8006986:	60bb      	str	r3, [r7, #8]
 8006988:	60fa      	str	r2, [r7, #12]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698e:	4a84      	ldr	r2, [pc, #528]	@ (8006ba0 <UART_SetConfig+0x5cc>)
 8006990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006994:	b29b      	uxth	r3, r3
 8006996:	2200      	movs	r2, #0
 8006998:	603b      	str	r3, [r7, #0]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069a4:	f7fa f954 	bl	8000c50 <__aeabi_uldivmod>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4610      	mov	r0, r2
 80069ae:	4619      	mov	r1, r3
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	020b      	lsls	r3, r1, #8
 80069ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069be:	0202      	lsls	r2, r0, #8
 80069c0:	6979      	ldr	r1, [r7, #20]
 80069c2:	6849      	ldr	r1, [r1, #4]
 80069c4:	0849      	lsrs	r1, r1, #1
 80069c6:	2000      	movs	r0, #0
 80069c8:	460c      	mov	r4, r1
 80069ca:	4605      	mov	r5, r0
 80069cc:	eb12 0804 	adds.w	r8, r2, r4
 80069d0:	eb43 0905 	adc.w	r9, r3, r5
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	469a      	mov	sl, r3
 80069dc:	4693      	mov	fp, r2
 80069de:	4652      	mov	r2, sl
 80069e0:	465b      	mov	r3, fp
 80069e2:	4640      	mov	r0, r8
 80069e4:	4649      	mov	r1, r9
 80069e6:	f7fa f933 	bl	8000c50 <__aeabi_uldivmod>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	4613      	mov	r3, r2
 80069f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069f8:	d308      	bcc.n	8006a0c <UART_SetConfig+0x438>
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a00:	d204      	bcs.n	8006a0c <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6a3a      	ldr	r2, [r7, #32]
 8006a08:	60da      	str	r2, [r3, #12]
 8006a0a:	e0ce      	b.n	8006baa <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a12:	e0ca      	b.n	8006baa <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a1c:	d166      	bne.n	8006aec <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8006a1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a22:	2b08      	cmp	r3, #8
 8006a24:	d827      	bhi.n	8006a76 <UART_SetConfig+0x4a2>
 8006a26:	a201      	add	r2, pc, #4	@ (adr r2, 8006a2c <UART_SetConfig+0x458>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a51 	.word	0x08006a51
 8006a30:	08006a59 	.word	0x08006a59
 8006a34:	08006a61 	.word	0x08006a61
 8006a38:	08006a77 	.word	0x08006a77
 8006a3c:	08006a67 	.word	0x08006a67
 8006a40:	08006a77 	.word	0x08006a77
 8006a44:	08006a77 	.word	0x08006a77
 8006a48:	08006a77 	.word	0x08006a77
 8006a4c:	08006a6f 	.word	0x08006a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a50:	f7fe f826 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8006a54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a56:	e014      	b.n	8006a82 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a58:	f7fe f836 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 8006a5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a5e:	e010      	b.n	8006a82 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a60:	4b4e      	ldr	r3, [pc, #312]	@ (8006b9c <UART_SetConfig+0x5c8>)
 8006a62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a64:	e00d      	b.n	8006a82 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a66:	f7fd ff6b 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 8006a6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a6c:	e009      	b.n	8006a82 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a74:	e005      	b.n	8006a82 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8090 	beq.w	8006baa <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8e:	4a44      	ldr	r2, [pc, #272]	@ (8006ba0 <UART_SetConfig+0x5cc>)
 8006a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a94:	461a      	mov	r2, r3
 8006a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a9c:	005a      	lsls	r2, r3, #1
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	441a      	add	r2, r3
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	2b0f      	cmp	r3, #15
 8006ab4:	d916      	bls.n	8006ae4 <UART_SetConfig+0x510>
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006abc:	d212      	bcs.n	8006ae4 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f023 030f 	bic.w	r3, r3, #15
 8006ac6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	8bfb      	ldrh	r3, [r7, #30]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	8bfa      	ldrh	r2, [r7, #30]
 8006ae0:	60da      	str	r2, [r3, #12]
 8006ae2:	e062      	b.n	8006baa <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006aea:	e05e      	b.n	8006baa <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d828      	bhi.n	8006b46 <UART_SetConfig+0x572>
 8006af4:	a201      	add	r2, pc, #4	@ (adr r2, 8006afc <UART_SetConfig+0x528>)
 8006af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afa:	bf00      	nop
 8006afc:	08006b21 	.word	0x08006b21
 8006b00:	08006b29 	.word	0x08006b29
 8006b04:	08006b31 	.word	0x08006b31
 8006b08:	08006b47 	.word	0x08006b47
 8006b0c:	08006b37 	.word	0x08006b37
 8006b10:	08006b47 	.word	0x08006b47
 8006b14:	08006b47 	.word	0x08006b47
 8006b18:	08006b47 	.word	0x08006b47
 8006b1c:	08006b3f 	.word	0x08006b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b20:	f7fd ffbe 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8006b24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b26:	e014      	b.n	8006b52 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b28:	f7fd ffce 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 8006b2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b2e:	e010      	b.n	8006b52 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b30:	4b1a      	ldr	r3, [pc, #104]	@ (8006b9c <UART_SetConfig+0x5c8>)
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b34:	e00d      	b.n	8006b52 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b36:	f7fd ff03 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 8006b3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b3c:	e009      	b.n	8006b52 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b44:	e005      	b.n	8006b52 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b50:	bf00      	nop
    }

    if (pclk != 0U)
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d028      	beq.n	8006baa <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5c:	4a10      	ldr	r2, [pc, #64]	@ (8006ba0 <UART_SetConfig+0x5cc>)
 8006b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b62:	461a      	mov	r2, r3
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	085b      	lsrs	r3, r3, #1
 8006b70:	441a      	add	r2, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	2b0f      	cmp	r3, #15
 8006b80:	d910      	bls.n	8006ba4 <UART_SetConfig+0x5d0>
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b88:	d20c      	bcs.n	8006ba4 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60da      	str	r2, [r3, #12]
 8006b94:	e009      	b.n	8006baa <UART_SetConfig+0x5d6>
 8006b96:	bf00      	nop
 8006b98:	40008000 	.word	0x40008000
 8006b9c:	00f42400 	.word	0x00f42400
 8006ba0:	0800bb0c 	.word	0x0800bb0c
      }
      else
      {
        ret = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006bc6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3730      	adds	r7, #48	@ 0x30
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c46:	f003 0304 	and.w	r3, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00a      	beq.n	8006c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d01a      	beq.n	8006cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cd2:	d10a      	bne.n	8006cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	605a      	str	r2, [r3, #4]
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b098      	sub	sp, #96	@ 0x60
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d28:	f7fb fa40 	bl	80021ac <HAL_GetTick>
 8006d2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0308 	and.w	r3, r3, #8
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d12f      	bne.n	8006d9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d44:	2200      	movs	r2, #0
 8006d46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f88e 	bl	8006e6c <UART_WaitOnFlagUntilTimeout>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d022      	beq.n	8006d9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d7c:	e841 2300 	strex	r3, r2, [r1]
 8006d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e6      	bne.n	8006d56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e063      	b.n	8006e64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d149      	bne.n	8006e3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006daa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006db2:	2200      	movs	r2, #0
 8006db4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f857 	bl	8006e6c <UART_WaitOnFlagUntilTimeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d03c      	beq.n	8006e3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006de8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e6      	bne.n	8006dc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f023 0301 	bic.w	r3, r3, #1
 8006e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3308      	adds	r3, #8
 8006e14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e16:	61fa      	str	r2, [r7, #28]
 8006e18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	69b9      	ldr	r1, [r7, #24]
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	617b      	str	r3, [r7, #20]
   return(result);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e5      	bne.n	8006df6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e012      	b.n	8006e64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3758      	adds	r7, #88	@ 0x58
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e7c:	e04f      	b.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e84:	d04b      	beq.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e86:	f7fb f991 	bl	80021ac <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d302      	bcc.n	8006e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e04e      	b.n	8006f3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0304 	and.w	r3, r3, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d037      	beq.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b80      	cmp	r3, #128	@ 0x80
 8006eb2:	d034      	beq.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b40      	cmp	r3, #64	@ 0x40
 8006eb8:	d031      	beq.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d110      	bne.n	8006eea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2208      	movs	r2, #8
 8006ece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 f838 	bl	8006f46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2208      	movs	r2, #8
 8006eda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e029      	b.n	8006f3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ef8:	d111      	bne.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f81e 	bl	8006f46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e00f      	b.n	8006f3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69da      	ldr	r2, [r3, #28]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	4013      	ands	r3, r2
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	bf0c      	ite	eq
 8006f2e:	2301      	moveq	r3, #1
 8006f30:	2300      	movne	r3, #0
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	461a      	mov	r2, r3
 8006f36:	79fb      	ldrb	r3, [r7, #7]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d0a0      	beq.n	8006e7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b095      	sub	sp, #84	@ 0x54
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e6      	bne.n	8006f4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3308      	adds	r3, #8
 8006f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e3      	bne.n	8006f80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d118      	bne.n	8006ff2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	f023 0310 	bic.w	r3, r3, #16
 8006fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fde:	61bb      	str	r3, [r7, #24]
 8006fe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	6979      	ldr	r1, [r7, #20]
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	613b      	str	r3, [r7, #16]
   return(result);
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e6      	bne.n	8006fc0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007006:	bf00      	nop
 8007008:	3754      	adds	r7, #84	@ 0x54
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f7ff fab9 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007036:	bf00      	nop
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b088      	sub	sp, #32
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	e853 3f00 	ldrex	r3, [r3]
 8007052:	60bb      	str	r3, [r7, #8]
   return(result);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800705a:	61fb      	str	r3, [r7, #28]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	461a      	mov	r2, r3
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6979      	ldr	r1, [r7, #20]
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	e841 2300 	strex	r3, r2, [r1]
 8007070:	613b      	str	r3, [r7, #16]
   return(result);
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1e6      	bne.n	8007046 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff fa84 	bl	8006594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800708c:	bf00      	nop
 800708e:	3720      	adds	r7, #32
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80070e2:	2302      	movs	r3, #2
 80070e4:	e027      	b.n	8007136 <HAL_UARTEx_DisableFifoMode+0x66>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2224      	movs	r2, #36	@ 0x24
 80070f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0201 	bic.w	r2, r2, #1
 800710c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007114:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007156:	2302      	movs	r3, #2
 8007158:	e02d      	b.n	80071b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2224      	movs	r2, #36	@ 0x24
 8007166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0201 	bic.w	r2, r2, #1
 8007180:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f850 	bl	800723c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d101      	bne.n	80071d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071d2:	2302      	movs	r3, #2
 80071d4:	e02d      	b.n	8007232 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2224      	movs	r2, #36	@ 0x24
 80071e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0201 	bic.w	r2, r2, #1
 80071fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f812 	bl	800723c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007248:	2b00      	cmp	r3, #0
 800724a:	d108      	bne.n	800725e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800725c:	e031      	b.n	80072c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800725e:	2308      	movs	r3, #8
 8007260:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007262:	2308      	movs	r3, #8
 8007264:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	0e5b      	lsrs	r3, r3, #25
 800726e:	b2db      	uxtb	r3, r3
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	0f5b      	lsrs	r3, r3, #29
 800727e:	b2db      	uxtb	r3, r3
 8007280:	f003 0307 	and.w	r3, r3, #7
 8007284:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007286:	7bbb      	ldrb	r3, [r7, #14]
 8007288:	7b3a      	ldrb	r2, [r7, #12]
 800728a:	4911      	ldr	r1, [pc, #68]	@ (80072d0 <UARTEx_SetNbDataToProcess+0x94>)
 800728c:	5c8a      	ldrb	r2, [r1, r2]
 800728e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007292:	7b3a      	ldrb	r2, [r7, #12]
 8007294:	490f      	ldr	r1, [pc, #60]	@ (80072d4 <UARTEx_SetNbDataToProcess+0x98>)
 8007296:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007298:	fb93 f3f2 	sdiv	r3, r3, r2
 800729c:	b29a      	uxth	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	7b7a      	ldrb	r2, [r7, #13]
 80072a8:	4909      	ldr	r1, [pc, #36]	@ (80072d0 <UARTEx_SetNbDataToProcess+0x94>)
 80072aa:	5c8a      	ldrb	r2, [r1, r2]
 80072ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072b0:	7b7a      	ldrb	r2, [r7, #13]
 80072b2:	4908      	ldr	r1, [pc, #32]	@ (80072d4 <UARTEx_SetNbDataToProcess+0x98>)
 80072b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80072c2:	bf00      	nop
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	0800bb24 	.word	0x0800bb24
 80072d4:	0800bb2c 	.word	0x0800bb2c

080072d8 <__cvt>:
 80072d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072dc:	ec57 6b10 	vmov	r6, r7, d0
 80072e0:	2f00      	cmp	r7, #0
 80072e2:	460c      	mov	r4, r1
 80072e4:	4619      	mov	r1, r3
 80072e6:	463b      	mov	r3, r7
 80072e8:	bfb4      	ite	lt
 80072ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80072ee:	2300      	movge	r3, #0
 80072f0:	4691      	mov	r9, r2
 80072f2:	bfbf      	itttt	lt
 80072f4:	4632      	movlt	r2, r6
 80072f6:	461f      	movlt	r7, r3
 80072f8:	232d      	movlt	r3, #45	@ 0x2d
 80072fa:	4616      	movlt	r6, r2
 80072fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007300:	700b      	strb	r3, [r1, #0]
 8007302:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007304:	f023 0820 	bic.w	r8, r3, #32
 8007308:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800730c:	d005      	beq.n	800731a <__cvt+0x42>
 800730e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007312:	d100      	bne.n	8007316 <__cvt+0x3e>
 8007314:	3401      	adds	r4, #1
 8007316:	2102      	movs	r1, #2
 8007318:	e000      	b.n	800731c <__cvt+0x44>
 800731a:	2103      	movs	r1, #3
 800731c:	ab03      	add	r3, sp, #12
 800731e:	4622      	mov	r2, r4
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	ab02      	add	r3, sp, #8
 8007324:	ec47 6b10 	vmov	d0, r6, r7
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	4653      	mov	r3, sl
 800732c:	f001 f8bc 	bl	80084a8 <_dtoa_r>
 8007330:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007334:	4605      	mov	r5, r0
 8007336:	d119      	bne.n	800736c <__cvt+0x94>
 8007338:	f019 0f01 	tst.w	r9, #1
 800733c:	d00e      	beq.n	800735c <__cvt+0x84>
 800733e:	eb00 0904 	add.w	r9, r0, r4
 8007342:	2200      	movs	r2, #0
 8007344:	2300      	movs	r3, #0
 8007346:	4630      	mov	r0, r6
 8007348:	4639      	mov	r1, r7
 800734a:	f7f9 fba1 	bl	8000a90 <__aeabi_dcmpeq>
 800734e:	b108      	cbz	r0, 8007354 <__cvt+0x7c>
 8007350:	f8cd 900c 	str.w	r9, [sp, #12]
 8007354:	2230      	movs	r2, #48	@ 0x30
 8007356:	9b03      	ldr	r3, [sp, #12]
 8007358:	454b      	cmp	r3, r9
 800735a:	d31e      	bcc.n	800739a <__cvt+0xc2>
 800735c:	9b03      	ldr	r3, [sp, #12]
 800735e:	4628      	mov	r0, r5
 8007360:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007362:	1b5b      	subs	r3, r3, r5
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	b004      	add	sp, #16
 8007368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007370:	eb00 0904 	add.w	r9, r0, r4
 8007374:	d1e5      	bne.n	8007342 <__cvt+0x6a>
 8007376:	7803      	ldrb	r3, [r0, #0]
 8007378:	2b30      	cmp	r3, #48	@ 0x30
 800737a:	d10a      	bne.n	8007392 <__cvt+0xba>
 800737c:	2200      	movs	r2, #0
 800737e:	2300      	movs	r3, #0
 8007380:	4630      	mov	r0, r6
 8007382:	4639      	mov	r1, r7
 8007384:	f7f9 fb84 	bl	8000a90 <__aeabi_dcmpeq>
 8007388:	b918      	cbnz	r0, 8007392 <__cvt+0xba>
 800738a:	f1c4 0401 	rsb	r4, r4, #1
 800738e:	f8ca 4000 	str.w	r4, [sl]
 8007392:	f8da 3000 	ldr.w	r3, [sl]
 8007396:	4499      	add	r9, r3
 8007398:	e7d3      	b.n	8007342 <__cvt+0x6a>
 800739a:	1c59      	adds	r1, r3, #1
 800739c:	9103      	str	r1, [sp, #12]
 800739e:	701a      	strb	r2, [r3, #0]
 80073a0:	e7d9      	b.n	8007356 <__cvt+0x7e>

080073a2 <__exponent>:
 80073a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073a4:	2900      	cmp	r1, #0
 80073a6:	7002      	strb	r2, [r0, #0]
 80073a8:	bfba      	itte	lt
 80073aa:	4249      	neglt	r1, r1
 80073ac:	232d      	movlt	r3, #45	@ 0x2d
 80073ae:	232b      	movge	r3, #43	@ 0x2b
 80073b0:	2909      	cmp	r1, #9
 80073b2:	7043      	strb	r3, [r0, #1]
 80073b4:	dd28      	ble.n	8007408 <__exponent+0x66>
 80073b6:	f10d 0307 	add.w	r3, sp, #7
 80073ba:	270a      	movs	r7, #10
 80073bc:	461d      	mov	r5, r3
 80073be:	461a      	mov	r2, r3
 80073c0:	3b01      	subs	r3, #1
 80073c2:	fbb1 f6f7 	udiv	r6, r1, r7
 80073c6:	fb07 1416 	mls	r4, r7, r6, r1
 80073ca:	3430      	adds	r4, #48	@ 0x30
 80073cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80073d0:	460c      	mov	r4, r1
 80073d2:	4631      	mov	r1, r6
 80073d4:	2c63      	cmp	r4, #99	@ 0x63
 80073d6:	dcf2      	bgt.n	80073be <__exponent+0x1c>
 80073d8:	3130      	adds	r1, #48	@ 0x30
 80073da:	1e94      	subs	r4, r2, #2
 80073dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80073e0:	1c41      	adds	r1, r0, #1
 80073e2:	4623      	mov	r3, r4
 80073e4:	42ab      	cmp	r3, r5
 80073e6:	d30a      	bcc.n	80073fe <__exponent+0x5c>
 80073e8:	f10d 0309 	add.w	r3, sp, #9
 80073ec:	1a9b      	subs	r3, r3, r2
 80073ee:	42ac      	cmp	r4, r5
 80073f0:	bf88      	it	hi
 80073f2:	2300      	movhi	r3, #0
 80073f4:	3302      	adds	r3, #2
 80073f6:	4403      	add	r3, r0
 80073f8:	1a18      	subs	r0, r3, r0
 80073fa:	b003      	add	sp, #12
 80073fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007402:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007406:	e7ed      	b.n	80073e4 <__exponent+0x42>
 8007408:	2330      	movs	r3, #48	@ 0x30
 800740a:	3130      	adds	r1, #48	@ 0x30
 800740c:	7083      	strb	r3, [r0, #2]
 800740e:	1d03      	adds	r3, r0, #4
 8007410:	70c1      	strb	r1, [r0, #3]
 8007412:	e7f1      	b.n	80073f8 <__exponent+0x56>

08007414 <_printf_float>:
 8007414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	b08d      	sub	sp, #52	@ 0x34
 800741a:	460c      	mov	r4, r1
 800741c:	4616      	mov	r6, r2
 800741e:	461f      	mov	r7, r3
 8007420:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007424:	4605      	mov	r5, r0
 8007426:	f000 ff23 	bl	8008270 <_localeconv_r>
 800742a:	6803      	ldr	r3, [r0, #0]
 800742c:	4618      	mov	r0, r3
 800742e:	9304      	str	r3, [sp, #16]
 8007430:	f7f8 ff02 	bl	8000238 <strlen>
 8007434:	2300      	movs	r3, #0
 8007436:	9005      	str	r0, [sp, #20]
 8007438:	930a      	str	r3, [sp, #40]	@ 0x28
 800743a:	f8d8 3000 	ldr.w	r3, [r8]
 800743e:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007442:	3307      	adds	r3, #7
 8007444:	f8d4 b000 	ldr.w	fp, [r4]
 8007448:	f023 0307 	bic.w	r3, r3, #7
 800744c:	f103 0208 	add.w	r2, r3, #8
 8007450:	f8c8 2000 	str.w	r2, [r8]
 8007454:	f04f 32ff 	mov.w	r2, #4294967295
 8007458:	e9d3 8900 	ldrd	r8, r9, [r3]
 800745c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007460:	f8cd 8018 	str.w	r8, [sp, #24]
 8007464:	9307      	str	r3, [sp, #28]
 8007466:	4b9d      	ldr	r3, [pc, #628]	@ (80076dc <_printf_float+0x2c8>)
 8007468:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800746c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007470:	f7f9 fb40 	bl	8000af4 <__aeabi_dcmpun>
 8007474:	bb70      	cbnz	r0, 80074d4 <_printf_float+0xc0>
 8007476:	f04f 32ff 	mov.w	r2, #4294967295
 800747a:	4b98      	ldr	r3, [pc, #608]	@ (80076dc <_printf_float+0x2c8>)
 800747c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007480:	f7f9 fb1a 	bl	8000ab8 <__aeabi_dcmple>
 8007484:	bb30      	cbnz	r0, 80074d4 <_printf_float+0xc0>
 8007486:	2200      	movs	r2, #0
 8007488:	2300      	movs	r3, #0
 800748a:	4640      	mov	r0, r8
 800748c:	4649      	mov	r1, r9
 800748e:	f7f9 fb09 	bl	8000aa4 <__aeabi_dcmplt>
 8007492:	b110      	cbz	r0, 800749a <_printf_float+0x86>
 8007494:	232d      	movs	r3, #45	@ 0x2d
 8007496:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800749a:	4a91      	ldr	r2, [pc, #580]	@ (80076e0 <_printf_float+0x2cc>)
 800749c:	4b91      	ldr	r3, [pc, #580]	@ (80076e4 <_printf_float+0x2d0>)
 800749e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80074a2:	bf8c      	ite	hi
 80074a4:	4690      	movhi	r8, r2
 80074a6:	4698      	movls	r8, r3
 80074a8:	2303      	movs	r3, #3
 80074aa:	f04f 0900 	mov.w	r9, #0
 80074ae:	6123      	str	r3, [r4, #16]
 80074b0:	f02b 0304 	bic.w	r3, fp, #4
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	4633      	mov	r3, r6
 80074b8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80074ba:	4621      	mov	r1, r4
 80074bc:	4628      	mov	r0, r5
 80074be:	9700      	str	r7, [sp, #0]
 80074c0:	f000 f9d2 	bl	8007868 <_printf_common>
 80074c4:	3001      	adds	r0, #1
 80074c6:	f040 808d 	bne.w	80075e4 <_printf_float+0x1d0>
 80074ca:	f04f 30ff 	mov.w	r0, #4294967295
 80074ce:	b00d      	add	sp, #52	@ 0x34
 80074d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d4:	4642      	mov	r2, r8
 80074d6:	464b      	mov	r3, r9
 80074d8:	4640      	mov	r0, r8
 80074da:	4649      	mov	r1, r9
 80074dc:	f7f9 fb0a 	bl	8000af4 <__aeabi_dcmpun>
 80074e0:	b140      	cbz	r0, 80074f4 <_printf_float+0xe0>
 80074e2:	464b      	mov	r3, r9
 80074e4:	4a80      	ldr	r2, [pc, #512]	@ (80076e8 <_printf_float+0x2d4>)
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bfbc      	itt	lt
 80074ea:	232d      	movlt	r3, #45	@ 0x2d
 80074ec:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80074f0:	4b7e      	ldr	r3, [pc, #504]	@ (80076ec <_printf_float+0x2d8>)
 80074f2:	e7d4      	b.n	800749e <_printf_float+0x8a>
 80074f4:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80074f8:	6863      	ldr	r3, [r4, #4]
 80074fa:	9206      	str	r2, [sp, #24]
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	d13b      	bne.n	8007578 <_printf_float+0x164>
 8007500:	2306      	movs	r3, #6
 8007502:	6063      	str	r3, [r4, #4]
 8007504:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007508:	2300      	movs	r3, #0
 800750a:	4628      	mov	r0, r5
 800750c:	6022      	str	r2, [r4, #0]
 800750e:	9303      	str	r3, [sp, #12]
 8007510:	ab0a      	add	r3, sp, #40	@ 0x28
 8007512:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007516:	ab09      	add	r3, sp, #36	@ 0x24
 8007518:	ec49 8b10 	vmov	d0, r8, r9
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007522:	6861      	ldr	r1, [r4, #4]
 8007524:	f7ff fed8 	bl	80072d8 <__cvt>
 8007528:	9b06      	ldr	r3, [sp, #24]
 800752a:	4680      	mov	r8, r0
 800752c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800752e:	2b47      	cmp	r3, #71	@ 0x47
 8007530:	d129      	bne.n	8007586 <_printf_float+0x172>
 8007532:	1cc8      	adds	r0, r1, #3
 8007534:	db02      	blt.n	800753c <_printf_float+0x128>
 8007536:	6863      	ldr	r3, [r4, #4]
 8007538:	4299      	cmp	r1, r3
 800753a:	dd41      	ble.n	80075c0 <_printf_float+0x1ac>
 800753c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007540:	fa5f fa8a 	uxtb.w	sl, sl
 8007544:	3901      	subs	r1, #1
 8007546:	4652      	mov	r2, sl
 8007548:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800754c:	9109      	str	r1, [sp, #36]	@ 0x24
 800754e:	f7ff ff28 	bl	80073a2 <__exponent>
 8007552:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007554:	4681      	mov	r9, r0
 8007556:	1813      	adds	r3, r2, r0
 8007558:	2a01      	cmp	r2, #1
 800755a:	6123      	str	r3, [r4, #16]
 800755c:	dc02      	bgt.n	8007564 <_printf_float+0x150>
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	07d2      	lsls	r2, r2, #31
 8007562:	d501      	bpl.n	8007568 <_printf_float+0x154>
 8007564:	3301      	adds	r3, #1
 8007566:	6123      	str	r3, [r4, #16]
 8007568:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0a2      	beq.n	80074b6 <_printf_float+0xa2>
 8007570:	232d      	movs	r3, #45	@ 0x2d
 8007572:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007576:	e79e      	b.n	80074b6 <_printf_float+0xa2>
 8007578:	9a06      	ldr	r2, [sp, #24]
 800757a:	2a47      	cmp	r2, #71	@ 0x47
 800757c:	d1c2      	bne.n	8007504 <_printf_float+0xf0>
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1c0      	bne.n	8007504 <_printf_float+0xf0>
 8007582:	2301      	movs	r3, #1
 8007584:	e7bd      	b.n	8007502 <_printf_float+0xee>
 8007586:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800758a:	d9db      	bls.n	8007544 <_printf_float+0x130>
 800758c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007590:	d118      	bne.n	80075c4 <_printf_float+0x1b0>
 8007592:	2900      	cmp	r1, #0
 8007594:	6863      	ldr	r3, [r4, #4]
 8007596:	dd0b      	ble.n	80075b0 <_printf_float+0x19c>
 8007598:	6121      	str	r1, [r4, #16]
 800759a:	b913      	cbnz	r3, 80075a2 <_printf_float+0x18e>
 800759c:	6822      	ldr	r2, [r4, #0]
 800759e:	07d0      	lsls	r0, r2, #31
 80075a0:	d502      	bpl.n	80075a8 <_printf_float+0x194>
 80075a2:	3301      	adds	r3, #1
 80075a4:	440b      	add	r3, r1
 80075a6:	6123      	str	r3, [r4, #16]
 80075a8:	f04f 0900 	mov.w	r9, #0
 80075ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80075ae:	e7db      	b.n	8007568 <_printf_float+0x154>
 80075b0:	b913      	cbnz	r3, 80075b8 <_printf_float+0x1a4>
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	07d2      	lsls	r2, r2, #31
 80075b6:	d501      	bpl.n	80075bc <_printf_float+0x1a8>
 80075b8:	3302      	adds	r3, #2
 80075ba:	e7f4      	b.n	80075a6 <_printf_float+0x192>
 80075bc:	2301      	movs	r3, #1
 80075be:	e7f2      	b.n	80075a6 <_printf_float+0x192>
 80075c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80075c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075c6:	4299      	cmp	r1, r3
 80075c8:	db05      	blt.n	80075d6 <_printf_float+0x1c2>
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	6121      	str	r1, [r4, #16]
 80075ce:	07d8      	lsls	r0, r3, #31
 80075d0:	d5ea      	bpl.n	80075a8 <_printf_float+0x194>
 80075d2:	1c4b      	adds	r3, r1, #1
 80075d4:	e7e7      	b.n	80075a6 <_printf_float+0x192>
 80075d6:	2900      	cmp	r1, #0
 80075d8:	bfd4      	ite	le
 80075da:	f1c1 0202 	rsble	r2, r1, #2
 80075de:	2201      	movgt	r2, #1
 80075e0:	4413      	add	r3, r2
 80075e2:	e7e0      	b.n	80075a6 <_printf_float+0x192>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	055a      	lsls	r2, r3, #21
 80075e8:	d407      	bmi.n	80075fa <_printf_float+0x1e6>
 80075ea:	6923      	ldr	r3, [r4, #16]
 80075ec:	4642      	mov	r2, r8
 80075ee:	4631      	mov	r1, r6
 80075f0:	4628      	mov	r0, r5
 80075f2:	47b8      	blx	r7
 80075f4:	3001      	adds	r0, #1
 80075f6:	d12b      	bne.n	8007650 <_printf_float+0x23c>
 80075f8:	e767      	b.n	80074ca <_printf_float+0xb6>
 80075fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075fe:	f240 80dd 	bls.w	80077bc <_printf_float+0x3a8>
 8007602:	2200      	movs	r2, #0
 8007604:	2300      	movs	r3, #0
 8007606:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800760a:	f7f9 fa41 	bl	8000a90 <__aeabi_dcmpeq>
 800760e:	2800      	cmp	r0, #0
 8007610:	d033      	beq.n	800767a <_printf_float+0x266>
 8007612:	2301      	movs	r3, #1
 8007614:	4a36      	ldr	r2, [pc, #216]	@ (80076f0 <_printf_float+0x2dc>)
 8007616:	4631      	mov	r1, r6
 8007618:	4628      	mov	r0, r5
 800761a:	47b8      	blx	r7
 800761c:	3001      	adds	r0, #1
 800761e:	f43f af54 	beq.w	80074ca <_printf_float+0xb6>
 8007622:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007626:	4543      	cmp	r3, r8
 8007628:	db02      	blt.n	8007630 <_printf_float+0x21c>
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	07d8      	lsls	r0, r3, #31
 800762e:	d50f      	bpl.n	8007650 <_printf_float+0x23c>
 8007630:	4631      	mov	r1, r6
 8007632:	4628      	mov	r0, r5
 8007634:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007638:	47b8      	blx	r7
 800763a:	3001      	adds	r0, #1
 800763c:	f43f af45 	beq.w	80074ca <_printf_float+0xb6>
 8007640:	f04f 0900 	mov.w	r9, #0
 8007644:	f108 38ff 	add.w	r8, r8, #4294967295
 8007648:	f104 0a1a 	add.w	sl, r4, #26
 800764c:	45c8      	cmp	r8, r9
 800764e:	dc09      	bgt.n	8007664 <_printf_float+0x250>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	079b      	lsls	r3, r3, #30
 8007654:	f100 8103 	bmi.w	800785e <_printf_float+0x44a>
 8007658:	68e0      	ldr	r0, [r4, #12]
 800765a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800765c:	4298      	cmp	r0, r3
 800765e:	bfb8      	it	lt
 8007660:	4618      	movlt	r0, r3
 8007662:	e734      	b.n	80074ce <_printf_float+0xba>
 8007664:	2301      	movs	r3, #1
 8007666:	4652      	mov	r2, sl
 8007668:	4631      	mov	r1, r6
 800766a:	4628      	mov	r0, r5
 800766c:	47b8      	blx	r7
 800766e:	3001      	adds	r0, #1
 8007670:	f43f af2b 	beq.w	80074ca <_printf_float+0xb6>
 8007674:	f109 0901 	add.w	r9, r9, #1
 8007678:	e7e8      	b.n	800764c <_printf_float+0x238>
 800767a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800767c:	2b00      	cmp	r3, #0
 800767e:	dc39      	bgt.n	80076f4 <_printf_float+0x2e0>
 8007680:	2301      	movs	r3, #1
 8007682:	4a1b      	ldr	r2, [pc, #108]	@ (80076f0 <_printf_float+0x2dc>)
 8007684:	4631      	mov	r1, r6
 8007686:	4628      	mov	r0, r5
 8007688:	47b8      	blx	r7
 800768a:	3001      	adds	r0, #1
 800768c:	f43f af1d 	beq.w	80074ca <_printf_float+0xb6>
 8007690:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007694:	ea59 0303 	orrs.w	r3, r9, r3
 8007698:	d102      	bne.n	80076a0 <_printf_float+0x28c>
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	07d9      	lsls	r1, r3, #31
 800769e:	d5d7      	bpl.n	8007650 <_printf_float+0x23c>
 80076a0:	4631      	mov	r1, r6
 80076a2:	4628      	mov	r0, r5
 80076a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076a8:	47b8      	blx	r7
 80076aa:	3001      	adds	r0, #1
 80076ac:	f43f af0d 	beq.w	80074ca <_printf_float+0xb6>
 80076b0:	f04f 0a00 	mov.w	sl, #0
 80076b4:	f104 0b1a 	add.w	fp, r4, #26
 80076b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ba:	425b      	negs	r3, r3
 80076bc:	4553      	cmp	r3, sl
 80076be:	dc01      	bgt.n	80076c4 <_printf_float+0x2b0>
 80076c0:	464b      	mov	r3, r9
 80076c2:	e793      	b.n	80075ec <_printf_float+0x1d8>
 80076c4:	2301      	movs	r3, #1
 80076c6:	465a      	mov	r2, fp
 80076c8:	4631      	mov	r1, r6
 80076ca:	4628      	mov	r0, r5
 80076cc:	47b8      	blx	r7
 80076ce:	3001      	adds	r0, #1
 80076d0:	f43f aefb 	beq.w	80074ca <_printf_float+0xb6>
 80076d4:	f10a 0a01 	add.w	sl, sl, #1
 80076d8:	e7ee      	b.n	80076b8 <_printf_float+0x2a4>
 80076da:	bf00      	nop
 80076dc:	7fefffff 	.word	0x7fefffff
 80076e0:	0800bb38 	.word	0x0800bb38
 80076e4:	0800bb34 	.word	0x0800bb34
 80076e8:	0800bb40 	.word	0x0800bb40
 80076ec:	0800bb3c 	.word	0x0800bb3c
 80076f0:	0800bb44 	.word	0x0800bb44
 80076f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80076fa:	4553      	cmp	r3, sl
 80076fc:	bfa8      	it	ge
 80076fe:	4653      	movge	r3, sl
 8007700:	2b00      	cmp	r3, #0
 8007702:	4699      	mov	r9, r3
 8007704:	dc36      	bgt.n	8007774 <_printf_float+0x360>
 8007706:	f04f 0b00 	mov.w	fp, #0
 800770a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800770e:	f104 021a 	add.w	r2, r4, #26
 8007712:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007714:	9306      	str	r3, [sp, #24]
 8007716:	eba3 0309 	sub.w	r3, r3, r9
 800771a:	455b      	cmp	r3, fp
 800771c:	dc31      	bgt.n	8007782 <_printf_float+0x36e>
 800771e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007720:	459a      	cmp	sl, r3
 8007722:	dc3a      	bgt.n	800779a <_printf_float+0x386>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	07da      	lsls	r2, r3, #31
 8007728:	d437      	bmi.n	800779a <_printf_float+0x386>
 800772a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800772c:	ebaa 0903 	sub.w	r9, sl, r3
 8007730:	9b06      	ldr	r3, [sp, #24]
 8007732:	ebaa 0303 	sub.w	r3, sl, r3
 8007736:	4599      	cmp	r9, r3
 8007738:	bfa8      	it	ge
 800773a:	4699      	movge	r9, r3
 800773c:	f1b9 0f00 	cmp.w	r9, #0
 8007740:	dc33      	bgt.n	80077aa <_printf_float+0x396>
 8007742:	f04f 0800 	mov.w	r8, #0
 8007746:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800774a:	f104 0b1a 	add.w	fp, r4, #26
 800774e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007750:	ebaa 0303 	sub.w	r3, sl, r3
 8007754:	eba3 0309 	sub.w	r3, r3, r9
 8007758:	4543      	cmp	r3, r8
 800775a:	f77f af79 	ble.w	8007650 <_printf_float+0x23c>
 800775e:	2301      	movs	r3, #1
 8007760:	465a      	mov	r2, fp
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	f43f aeae 	beq.w	80074ca <_printf_float+0xb6>
 800776e:	f108 0801 	add.w	r8, r8, #1
 8007772:	e7ec      	b.n	800774e <_printf_float+0x33a>
 8007774:	4642      	mov	r2, r8
 8007776:	4631      	mov	r1, r6
 8007778:	4628      	mov	r0, r5
 800777a:	47b8      	blx	r7
 800777c:	3001      	adds	r0, #1
 800777e:	d1c2      	bne.n	8007706 <_printf_float+0x2f2>
 8007780:	e6a3      	b.n	80074ca <_printf_float+0xb6>
 8007782:	2301      	movs	r3, #1
 8007784:	4631      	mov	r1, r6
 8007786:	4628      	mov	r0, r5
 8007788:	9206      	str	r2, [sp, #24]
 800778a:	47b8      	blx	r7
 800778c:	3001      	adds	r0, #1
 800778e:	f43f ae9c 	beq.w	80074ca <_printf_float+0xb6>
 8007792:	f10b 0b01 	add.w	fp, fp, #1
 8007796:	9a06      	ldr	r2, [sp, #24]
 8007798:	e7bb      	b.n	8007712 <_printf_float+0x2fe>
 800779a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800779e:	4631      	mov	r1, r6
 80077a0:	4628      	mov	r0, r5
 80077a2:	47b8      	blx	r7
 80077a4:	3001      	adds	r0, #1
 80077a6:	d1c0      	bne.n	800772a <_printf_float+0x316>
 80077a8:	e68f      	b.n	80074ca <_printf_float+0xb6>
 80077aa:	9a06      	ldr	r2, [sp, #24]
 80077ac:	464b      	mov	r3, r9
 80077ae:	4631      	mov	r1, r6
 80077b0:	4628      	mov	r0, r5
 80077b2:	4442      	add	r2, r8
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	d1c3      	bne.n	8007742 <_printf_float+0x32e>
 80077ba:	e686      	b.n	80074ca <_printf_float+0xb6>
 80077bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077c0:	f1ba 0f01 	cmp.w	sl, #1
 80077c4:	dc01      	bgt.n	80077ca <_printf_float+0x3b6>
 80077c6:	07db      	lsls	r3, r3, #31
 80077c8:	d536      	bpl.n	8007838 <_printf_float+0x424>
 80077ca:	2301      	movs	r3, #1
 80077cc:	4642      	mov	r2, r8
 80077ce:	4631      	mov	r1, r6
 80077d0:	4628      	mov	r0, r5
 80077d2:	47b8      	blx	r7
 80077d4:	3001      	adds	r0, #1
 80077d6:	f43f ae78 	beq.w	80074ca <_printf_float+0xb6>
 80077da:	4631      	mov	r1, r6
 80077dc:	4628      	mov	r0, r5
 80077de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077e2:	47b8      	blx	r7
 80077e4:	3001      	adds	r0, #1
 80077e6:	f43f ae70 	beq.w	80074ca <_printf_float+0xb6>
 80077ea:	2200      	movs	r2, #0
 80077ec:	2300      	movs	r3, #0
 80077ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077f6:	f7f9 f94b 	bl	8000a90 <__aeabi_dcmpeq>
 80077fa:	b9c0      	cbnz	r0, 800782e <_printf_float+0x41a>
 80077fc:	4653      	mov	r3, sl
 80077fe:	f108 0201 	add.w	r2, r8, #1
 8007802:	4631      	mov	r1, r6
 8007804:	4628      	mov	r0, r5
 8007806:	47b8      	blx	r7
 8007808:	3001      	adds	r0, #1
 800780a:	d10c      	bne.n	8007826 <_printf_float+0x412>
 800780c:	e65d      	b.n	80074ca <_printf_float+0xb6>
 800780e:	2301      	movs	r3, #1
 8007810:	465a      	mov	r2, fp
 8007812:	4631      	mov	r1, r6
 8007814:	4628      	mov	r0, r5
 8007816:	47b8      	blx	r7
 8007818:	3001      	adds	r0, #1
 800781a:	f43f ae56 	beq.w	80074ca <_printf_float+0xb6>
 800781e:	f108 0801 	add.w	r8, r8, #1
 8007822:	45d0      	cmp	r8, sl
 8007824:	dbf3      	blt.n	800780e <_printf_float+0x3fa>
 8007826:	464b      	mov	r3, r9
 8007828:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800782c:	e6df      	b.n	80075ee <_printf_float+0x1da>
 800782e:	f04f 0800 	mov.w	r8, #0
 8007832:	f104 0b1a 	add.w	fp, r4, #26
 8007836:	e7f4      	b.n	8007822 <_printf_float+0x40e>
 8007838:	2301      	movs	r3, #1
 800783a:	4642      	mov	r2, r8
 800783c:	e7e1      	b.n	8007802 <_printf_float+0x3ee>
 800783e:	2301      	movs	r3, #1
 8007840:	464a      	mov	r2, r9
 8007842:	4631      	mov	r1, r6
 8007844:	4628      	mov	r0, r5
 8007846:	47b8      	blx	r7
 8007848:	3001      	adds	r0, #1
 800784a:	f43f ae3e 	beq.w	80074ca <_printf_float+0xb6>
 800784e:	f108 0801 	add.w	r8, r8, #1
 8007852:	68e3      	ldr	r3, [r4, #12]
 8007854:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007856:	1a5b      	subs	r3, r3, r1
 8007858:	4543      	cmp	r3, r8
 800785a:	dcf0      	bgt.n	800783e <_printf_float+0x42a>
 800785c:	e6fc      	b.n	8007658 <_printf_float+0x244>
 800785e:	f04f 0800 	mov.w	r8, #0
 8007862:	f104 0919 	add.w	r9, r4, #25
 8007866:	e7f4      	b.n	8007852 <_printf_float+0x43e>

08007868 <_printf_common>:
 8007868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800786c:	4616      	mov	r6, r2
 800786e:	4698      	mov	r8, r3
 8007870:	688a      	ldr	r2, [r1, #8]
 8007872:	4607      	mov	r7, r0
 8007874:	690b      	ldr	r3, [r1, #16]
 8007876:	460c      	mov	r4, r1
 8007878:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800787c:	4293      	cmp	r3, r2
 800787e:	bfb8      	it	lt
 8007880:	4613      	movlt	r3, r2
 8007882:	6033      	str	r3, [r6, #0]
 8007884:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007888:	b10a      	cbz	r2, 800788e <_printf_common+0x26>
 800788a:	3301      	adds	r3, #1
 800788c:	6033      	str	r3, [r6, #0]
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	0699      	lsls	r1, r3, #26
 8007892:	bf42      	ittt	mi
 8007894:	6833      	ldrmi	r3, [r6, #0]
 8007896:	3302      	addmi	r3, #2
 8007898:	6033      	strmi	r3, [r6, #0]
 800789a:	6825      	ldr	r5, [r4, #0]
 800789c:	f015 0506 	ands.w	r5, r5, #6
 80078a0:	d106      	bne.n	80078b0 <_printf_common+0x48>
 80078a2:	f104 0a19 	add.w	sl, r4, #25
 80078a6:	68e3      	ldr	r3, [r4, #12]
 80078a8:	6832      	ldr	r2, [r6, #0]
 80078aa:	1a9b      	subs	r3, r3, r2
 80078ac:	42ab      	cmp	r3, r5
 80078ae:	dc2b      	bgt.n	8007908 <_printf_common+0xa0>
 80078b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078b4:	6822      	ldr	r2, [r4, #0]
 80078b6:	3b00      	subs	r3, #0
 80078b8:	bf18      	it	ne
 80078ba:	2301      	movne	r3, #1
 80078bc:	0692      	lsls	r2, r2, #26
 80078be:	d430      	bmi.n	8007922 <_printf_common+0xba>
 80078c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078c4:	4641      	mov	r1, r8
 80078c6:	4638      	mov	r0, r7
 80078c8:	47c8      	blx	r9
 80078ca:	3001      	adds	r0, #1
 80078cc:	d023      	beq.n	8007916 <_printf_common+0xae>
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	341a      	adds	r4, #26
 80078d2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80078d6:	f003 0306 	and.w	r3, r3, #6
 80078da:	2b04      	cmp	r3, #4
 80078dc:	bf0a      	itet	eq
 80078de:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80078e2:	2500      	movne	r5, #0
 80078e4:	6833      	ldreq	r3, [r6, #0]
 80078e6:	f04f 0600 	mov.w	r6, #0
 80078ea:	bf08      	it	eq
 80078ec:	1aed      	subeq	r5, r5, r3
 80078ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80078f2:	bf08      	it	eq
 80078f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078f8:	4293      	cmp	r3, r2
 80078fa:	bfc4      	itt	gt
 80078fc:	1a9b      	subgt	r3, r3, r2
 80078fe:	18ed      	addgt	r5, r5, r3
 8007900:	42b5      	cmp	r5, r6
 8007902:	d11a      	bne.n	800793a <_printf_common+0xd2>
 8007904:	2000      	movs	r0, #0
 8007906:	e008      	b.n	800791a <_printf_common+0xb2>
 8007908:	2301      	movs	r3, #1
 800790a:	4652      	mov	r2, sl
 800790c:	4641      	mov	r1, r8
 800790e:	4638      	mov	r0, r7
 8007910:	47c8      	blx	r9
 8007912:	3001      	adds	r0, #1
 8007914:	d103      	bne.n	800791e <_printf_common+0xb6>
 8007916:	f04f 30ff 	mov.w	r0, #4294967295
 800791a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800791e:	3501      	adds	r5, #1
 8007920:	e7c1      	b.n	80078a6 <_printf_common+0x3e>
 8007922:	18e1      	adds	r1, r4, r3
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	2030      	movs	r0, #48	@ 0x30
 8007928:	3302      	adds	r3, #2
 800792a:	4422      	add	r2, r4
 800792c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007930:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007934:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007938:	e7c2      	b.n	80078c0 <_printf_common+0x58>
 800793a:	2301      	movs	r3, #1
 800793c:	4622      	mov	r2, r4
 800793e:	4641      	mov	r1, r8
 8007940:	4638      	mov	r0, r7
 8007942:	47c8      	blx	r9
 8007944:	3001      	adds	r0, #1
 8007946:	d0e6      	beq.n	8007916 <_printf_common+0xae>
 8007948:	3601      	adds	r6, #1
 800794a:	e7d9      	b.n	8007900 <_printf_common+0x98>

0800794c <_printf_i>:
 800794c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007950:	7e0f      	ldrb	r7, [r1, #24]
 8007952:	4691      	mov	r9, r2
 8007954:	4680      	mov	r8, r0
 8007956:	460c      	mov	r4, r1
 8007958:	2f78      	cmp	r7, #120	@ 0x78
 800795a:	469a      	mov	sl, r3
 800795c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800795e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007962:	d807      	bhi.n	8007974 <_printf_i+0x28>
 8007964:	2f62      	cmp	r7, #98	@ 0x62
 8007966:	d80a      	bhi.n	800797e <_printf_i+0x32>
 8007968:	2f00      	cmp	r7, #0
 800796a:	f000 80d1 	beq.w	8007b10 <_printf_i+0x1c4>
 800796e:	2f58      	cmp	r7, #88	@ 0x58
 8007970:	f000 80b8 	beq.w	8007ae4 <_printf_i+0x198>
 8007974:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007978:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800797c:	e03a      	b.n	80079f4 <_printf_i+0xa8>
 800797e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007982:	2b15      	cmp	r3, #21
 8007984:	d8f6      	bhi.n	8007974 <_printf_i+0x28>
 8007986:	a101      	add	r1, pc, #4	@ (adr r1, 800798c <_printf_i+0x40>)
 8007988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800798c:	080079e5 	.word	0x080079e5
 8007990:	080079f9 	.word	0x080079f9
 8007994:	08007975 	.word	0x08007975
 8007998:	08007975 	.word	0x08007975
 800799c:	08007975 	.word	0x08007975
 80079a0:	08007975 	.word	0x08007975
 80079a4:	080079f9 	.word	0x080079f9
 80079a8:	08007975 	.word	0x08007975
 80079ac:	08007975 	.word	0x08007975
 80079b0:	08007975 	.word	0x08007975
 80079b4:	08007975 	.word	0x08007975
 80079b8:	08007af7 	.word	0x08007af7
 80079bc:	08007a23 	.word	0x08007a23
 80079c0:	08007ab1 	.word	0x08007ab1
 80079c4:	08007975 	.word	0x08007975
 80079c8:	08007975 	.word	0x08007975
 80079cc:	08007b19 	.word	0x08007b19
 80079d0:	08007975 	.word	0x08007975
 80079d4:	08007a23 	.word	0x08007a23
 80079d8:	08007975 	.word	0x08007975
 80079dc:	08007975 	.word	0x08007975
 80079e0:	08007ab9 	.word	0x08007ab9
 80079e4:	6833      	ldr	r3, [r6, #0]
 80079e6:	1d1a      	adds	r2, r3, #4
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6032      	str	r2, [r6, #0]
 80079ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079f4:	2301      	movs	r3, #1
 80079f6:	e09c      	b.n	8007b32 <_printf_i+0x1e6>
 80079f8:	6833      	ldr	r3, [r6, #0]
 80079fa:	6820      	ldr	r0, [r4, #0]
 80079fc:	1d19      	adds	r1, r3, #4
 80079fe:	6031      	str	r1, [r6, #0]
 8007a00:	0606      	lsls	r6, r0, #24
 8007a02:	d501      	bpl.n	8007a08 <_printf_i+0xbc>
 8007a04:	681d      	ldr	r5, [r3, #0]
 8007a06:	e003      	b.n	8007a10 <_printf_i+0xc4>
 8007a08:	0645      	lsls	r5, r0, #25
 8007a0a:	d5fb      	bpl.n	8007a04 <_printf_i+0xb8>
 8007a0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a10:	2d00      	cmp	r5, #0
 8007a12:	da03      	bge.n	8007a1c <_printf_i+0xd0>
 8007a14:	232d      	movs	r3, #45	@ 0x2d
 8007a16:	426d      	negs	r5, r5
 8007a18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a1c:	4858      	ldr	r0, [pc, #352]	@ (8007b80 <_printf_i+0x234>)
 8007a1e:	230a      	movs	r3, #10
 8007a20:	e011      	b.n	8007a46 <_printf_i+0xfa>
 8007a22:	6821      	ldr	r1, [r4, #0]
 8007a24:	6833      	ldr	r3, [r6, #0]
 8007a26:	0608      	lsls	r0, r1, #24
 8007a28:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a2c:	d402      	bmi.n	8007a34 <_printf_i+0xe8>
 8007a2e:	0649      	lsls	r1, r1, #25
 8007a30:	bf48      	it	mi
 8007a32:	b2ad      	uxthmi	r5, r5
 8007a34:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a36:	6033      	str	r3, [r6, #0]
 8007a38:	4851      	ldr	r0, [pc, #324]	@ (8007b80 <_printf_i+0x234>)
 8007a3a:	bf14      	ite	ne
 8007a3c:	230a      	movne	r3, #10
 8007a3e:	2308      	moveq	r3, #8
 8007a40:	2100      	movs	r1, #0
 8007a42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a46:	6866      	ldr	r6, [r4, #4]
 8007a48:	2e00      	cmp	r6, #0
 8007a4a:	60a6      	str	r6, [r4, #8]
 8007a4c:	db05      	blt.n	8007a5a <_printf_i+0x10e>
 8007a4e:	6821      	ldr	r1, [r4, #0]
 8007a50:	432e      	orrs	r6, r5
 8007a52:	f021 0104 	bic.w	r1, r1, #4
 8007a56:	6021      	str	r1, [r4, #0]
 8007a58:	d04b      	beq.n	8007af2 <_printf_i+0x1a6>
 8007a5a:	4616      	mov	r6, r2
 8007a5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a60:	fb03 5711 	mls	r7, r3, r1, r5
 8007a64:	5dc7      	ldrb	r7, [r0, r7]
 8007a66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a6a:	462f      	mov	r7, r5
 8007a6c:	460d      	mov	r5, r1
 8007a6e:	42bb      	cmp	r3, r7
 8007a70:	d9f4      	bls.n	8007a5c <_printf_i+0x110>
 8007a72:	2b08      	cmp	r3, #8
 8007a74:	d10b      	bne.n	8007a8e <_printf_i+0x142>
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	07df      	lsls	r7, r3, #31
 8007a7a:	d508      	bpl.n	8007a8e <_printf_i+0x142>
 8007a7c:	6923      	ldr	r3, [r4, #16]
 8007a7e:	6861      	ldr	r1, [r4, #4]
 8007a80:	4299      	cmp	r1, r3
 8007a82:	bfde      	ittt	le
 8007a84:	2330      	movle	r3, #48	@ 0x30
 8007a86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a8e:	1b92      	subs	r2, r2, r6
 8007a90:	6122      	str	r2, [r4, #16]
 8007a92:	464b      	mov	r3, r9
 8007a94:	aa03      	add	r2, sp, #12
 8007a96:	4621      	mov	r1, r4
 8007a98:	4640      	mov	r0, r8
 8007a9a:	f8cd a000 	str.w	sl, [sp]
 8007a9e:	f7ff fee3 	bl	8007868 <_printf_common>
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	d14a      	bne.n	8007b3c <_printf_i+0x1f0>
 8007aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aaa:	b004      	add	sp, #16
 8007aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	f043 0320 	orr.w	r3, r3, #32
 8007ab6:	6023      	str	r3, [r4, #0]
 8007ab8:	2778      	movs	r7, #120	@ 0x78
 8007aba:	4832      	ldr	r0, [pc, #200]	@ (8007b84 <_printf_i+0x238>)
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ac2:	061f      	lsls	r7, r3, #24
 8007ac4:	6831      	ldr	r1, [r6, #0]
 8007ac6:	f851 5b04 	ldr.w	r5, [r1], #4
 8007aca:	d402      	bmi.n	8007ad2 <_printf_i+0x186>
 8007acc:	065f      	lsls	r7, r3, #25
 8007ace:	bf48      	it	mi
 8007ad0:	b2ad      	uxthmi	r5, r5
 8007ad2:	6031      	str	r1, [r6, #0]
 8007ad4:	07d9      	lsls	r1, r3, #31
 8007ad6:	bf44      	itt	mi
 8007ad8:	f043 0320 	orrmi.w	r3, r3, #32
 8007adc:	6023      	strmi	r3, [r4, #0]
 8007ade:	b11d      	cbz	r5, 8007ae8 <_printf_i+0x19c>
 8007ae0:	2310      	movs	r3, #16
 8007ae2:	e7ad      	b.n	8007a40 <_printf_i+0xf4>
 8007ae4:	4826      	ldr	r0, [pc, #152]	@ (8007b80 <_printf_i+0x234>)
 8007ae6:	e7e9      	b.n	8007abc <_printf_i+0x170>
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	f023 0320 	bic.w	r3, r3, #32
 8007aee:	6023      	str	r3, [r4, #0]
 8007af0:	e7f6      	b.n	8007ae0 <_printf_i+0x194>
 8007af2:	4616      	mov	r6, r2
 8007af4:	e7bd      	b.n	8007a72 <_printf_i+0x126>
 8007af6:	6833      	ldr	r3, [r6, #0]
 8007af8:	6825      	ldr	r5, [r4, #0]
 8007afa:	1d18      	adds	r0, r3, #4
 8007afc:	6961      	ldr	r1, [r4, #20]
 8007afe:	6030      	str	r0, [r6, #0]
 8007b00:	062e      	lsls	r6, r5, #24
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	d501      	bpl.n	8007b0a <_printf_i+0x1be>
 8007b06:	6019      	str	r1, [r3, #0]
 8007b08:	e002      	b.n	8007b10 <_printf_i+0x1c4>
 8007b0a:	0668      	lsls	r0, r5, #25
 8007b0c:	d5fb      	bpl.n	8007b06 <_printf_i+0x1ba>
 8007b0e:	8019      	strh	r1, [r3, #0]
 8007b10:	2300      	movs	r3, #0
 8007b12:	4616      	mov	r6, r2
 8007b14:	6123      	str	r3, [r4, #16]
 8007b16:	e7bc      	b.n	8007a92 <_printf_i+0x146>
 8007b18:	6833      	ldr	r3, [r6, #0]
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	1d1a      	adds	r2, r3, #4
 8007b1e:	6032      	str	r2, [r6, #0]
 8007b20:	681e      	ldr	r6, [r3, #0]
 8007b22:	6862      	ldr	r2, [r4, #4]
 8007b24:	4630      	mov	r0, r6
 8007b26:	f000 fc1a 	bl	800835e <memchr>
 8007b2a:	b108      	cbz	r0, 8007b30 <_printf_i+0x1e4>
 8007b2c:	1b80      	subs	r0, r0, r6
 8007b2e:	6060      	str	r0, [r4, #4]
 8007b30:	6863      	ldr	r3, [r4, #4]
 8007b32:	6123      	str	r3, [r4, #16]
 8007b34:	2300      	movs	r3, #0
 8007b36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b3a:	e7aa      	b.n	8007a92 <_printf_i+0x146>
 8007b3c:	6923      	ldr	r3, [r4, #16]
 8007b3e:	4632      	mov	r2, r6
 8007b40:	4649      	mov	r1, r9
 8007b42:	4640      	mov	r0, r8
 8007b44:	47d0      	blx	sl
 8007b46:	3001      	adds	r0, #1
 8007b48:	d0ad      	beq.n	8007aa6 <_printf_i+0x15a>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	079b      	lsls	r3, r3, #30
 8007b4e:	d413      	bmi.n	8007b78 <_printf_i+0x22c>
 8007b50:	68e0      	ldr	r0, [r4, #12]
 8007b52:	9b03      	ldr	r3, [sp, #12]
 8007b54:	4298      	cmp	r0, r3
 8007b56:	bfb8      	it	lt
 8007b58:	4618      	movlt	r0, r3
 8007b5a:	e7a6      	b.n	8007aaa <_printf_i+0x15e>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	4632      	mov	r2, r6
 8007b60:	4649      	mov	r1, r9
 8007b62:	4640      	mov	r0, r8
 8007b64:	47d0      	blx	sl
 8007b66:	3001      	adds	r0, #1
 8007b68:	d09d      	beq.n	8007aa6 <_printf_i+0x15a>
 8007b6a:	3501      	adds	r5, #1
 8007b6c:	68e3      	ldr	r3, [r4, #12]
 8007b6e:	9903      	ldr	r1, [sp, #12]
 8007b70:	1a5b      	subs	r3, r3, r1
 8007b72:	42ab      	cmp	r3, r5
 8007b74:	dcf2      	bgt.n	8007b5c <_printf_i+0x210>
 8007b76:	e7eb      	b.n	8007b50 <_printf_i+0x204>
 8007b78:	2500      	movs	r5, #0
 8007b7a:	f104 0619 	add.w	r6, r4, #25
 8007b7e:	e7f5      	b.n	8007b6c <_printf_i+0x220>
 8007b80:	0800bb46 	.word	0x0800bb46
 8007b84:	0800bb57 	.word	0x0800bb57

08007b88 <_scanf_float>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	b087      	sub	sp, #28
 8007b8e:	4691      	mov	r9, r2
 8007b90:	4680      	mov	r8, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	9303      	str	r3, [sp, #12]
 8007b96:	688b      	ldr	r3, [r1, #8]
 8007b98:	1e5a      	subs	r2, r3, #1
 8007b9a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007b9e:	460a      	mov	r2, r1
 8007ba0:	bf89      	itett	hi
 8007ba2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007ba6:	f04f 0b00 	movls.w	fp, #0
 8007baa:	eb03 0b05 	addhi.w	fp, r3, r5
 8007bae:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007bb2:	f04f 0500 	mov.w	r5, #0
 8007bb6:	bf88      	it	hi
 8007bb8:	608b      	strhi	r3, [r1, #8]
 8007bba:	680b      	ldr	r3, [r1, #0]
 8007bbc:	46aa      	mov	sl, r5
 8007bbe:	462f      	mov	r7, r5
 8007bc0:	9502      	str	r5, [sp, #8]
 8007bc2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007bc6:	f842 3b1c 	str.w	r3, [r2], #28
 8007bca:	4616      	mov	r6, r2
 8007bcc:	9201      	str	r2, [sp, #4]
 8007bce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007bd2:	68a2      	ldr	r2, [r4, #8]
 8007bd4:	b15a      	cbz	r2, 8007bee <_scanf_float+0x66>
 8007bd6:	f8d9 3000 	ldr.w	r3, [r9]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b4e      	cmp	r3, #78	@ 0x4e
 8007bde:	d863      	bhi.n	8007ca8 <_scanf_float+0x120>
 8007be0:	2b40      	cmp	r3, #64	@ 0x40
 8007be2:	d83b      	bhi.n	8007c5c <_scanf_float+0xd4>
 8007be4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007be8:	b2c8      	uxtb	r0, r1
 8007bea:	280e      	cmp	r0, #14
 8007bec:	d939      	bls.n	8007c62 <_scanf_float+0xda>
 8007bee:	b11f      	cbz	r7, 8007bf8 <_scanf_float+0x70>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bf6:	6023      	str	r3, [r4, #0]
 8007bf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bfc:	f1ba 0f01 	cmp.w	sl, #1
 8007c00:	f200 8115 	bhi.w	8007e2e <_scanf_float+0x2a6>
 8007c04:	9b01      	ldr	r3, [sp, #4]
 8007c06:	429e      	cmp	r6, r3
 8007c08:	f200 8106 	bhi.w	8007e18 <_scanf_float+0x290>
 8007c0c:	2001      	movs	r0, #1
 8007c0e:	b007      	add	sp, #28
 8007c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c14:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007c18:	2a0d      	cmp	r2, #13
 8007c1a:	d8e8      	bhi.n	8007bee <_scanf_float+0x66>
 8007c1c:	a101      	add	r1, pc, #4	@ (adr r1, 8007c24 <_scanf_float+0x9c>)
 8007c1e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c22:	bf00      	nop
 8007c24:	08007d6d 	.word	0x08007d6d
 8007c28:	08007bef 	.word	0x08007bef
 8007c2c:	08007bef 	.word	0x08007bef
 8007c30:	08007bef 	.word	0x08007bef
 8007c34:	08007dc9 	.word	0x08007dc9
 8007c38:	08007da3 	.word	0x08007da3
 8007c3c:	08007bef 	.word	0x08007bef
 8007c40:	08007bef 	.word	0x08007bef
 8007c44:	08007d7b 	.word	0x08007d7b
 8007c48:	08007bef 	.word	0x08007bef
 8007c4c:	08007bef 	.word	0x08007bef
 8007c50:	08007bef 	.word	0x08007bef
 8007c54:	08007bef 	.word	0x08007bef
 8007c58:	08007d37 	.word	0x08007d37
 8007c5c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007c60:	e7da      	b.n	8007c18 <_scanf_float+0x90>
 8007c62:	290e      	cmp	r1, #14
 8007c64:	d8c3      	bhi.n	8007bee <_scanf_float+0x66>
 8007c66:	a001      	add	r0, pc, #4	@ (adr r0, 8007c6c <_scanf_float+0xe4>)
 8007c68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007c6c:	08007d27 	.word	0x08007d27
 8007c70:	08007bef 	.word	0x08007bef
 8007c74:	08007d27 	.word	0x08007d27
 8007c78:	08007db7 	.word	0x08007db7
 8007c7c:	08007bef 	.word	0x08007bef
 8007c80:	08007cc9 	.word	0x08007cc9
 8007c84:	08007d0d 	.word	0x08007d0d
 8007c88:	08007d0d 	.word	0x08007d0d
 8007c8c:	08007d0d 	.word	0x08007d0d
 8007c90:	08007d0d 	.word	0x08007d0d
 8007c94:	08007d0d 	.word	0x08007d0d
 8007c98:	08007d0d 	.word	0x08007d0d
 8007c9c:	08007d0d 	.word	0x08007d0d
 8007ca0:	08007d0d 	.word	0x08007d0d
 8007ca4:	08007d0d 	.word	0x08007d0d
 8007ca8:	2b6e      	cmp	r3, #110	@ 0x6e
 8007caa:	d809      	bhi.n	8007cc0 <_scanf_float+0x138>
 8007cac:	2b60      	cmp	r3, #96	@ 0x60
 8007cae:	d8b1      	bhi.n	8007c14 <_scanf_float+0x8c>
 8007cb0:	2b54      	cmp	r3, #84	@ 0x54
 8007cb2:	d07b      	beq.n	8007dac <_scanf_float+0x224>
 8007cb4:	2b59      	cmp	r3, #89	@ 0x59
 8007cb6:	d19a      	bne.n	8007bee <_scanf_float+0x66>
 8007cb8:	2d07      	cmp	r5, #7
 8007cba:	d198      	bne.n	8007bee <_scanf_float+0x66>
 8007cbc:	2508      	movs	r5, #8
 8007cbe:	e02f      	b.n	8007d20 <_scanf_float+0x198>
 8007cc0:	2b74      	cmp	r3, #116	@ 0x74
 8007cc2:	d073      	beq.n	8007dac <_scanf_float+0x224>
 8007cc4:	2b79      	cmp	r3, #121	@ 0x79
 8007cc6:	e7f6      	b.n	8007cb6 <_scanf_float+0x12e>
 8007cc8:	6821      	ldr	r1, [r4, #0]
 8007cca:	05c8      	lsls	r0, r1, #23
 8007ccc:	d51e      	bpl.n	8007d0c <_scanf_float+0x184>
 8007cce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007cd2:	3701      	adds	r7, #1
 8007cd4:	6021      	str	r1, [r4, #0]
 8007cd6:	f1bb 0f00 	cmp.w	fp, #0
 8007cda:	d003      	beq.n	8007ce4 <_scanf_float+0x15c>
 8007cdc:	3201      	adds	r2, #1
 8007cde:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ce2:	60a2      	str	r2, [r4, #8]
 8007ce4:	68a3      	ldr	r3, [r4, #8]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	60a3      	str	r3, [r4, #8]
 8007cea:	6923      	ldr	r3, [r4, #16]
 8007cec:	3301      	adds	r3, #1
 8007cee:	6123      	str	r3, [r4, #16]
 8007cf0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f8c9 3004 	str.w	r3, [r9, #4]
 8007cfc:	f340 8083 	ble.w	8007e06 <_scanf_float+0x27e>
 8007d00:	f8d9 3000 	ldr.w	r3, [r9]
 8007d04:	3301      	adds	r3, #1
 8007d06:	f8c9 3000 	str.w	r3, [r9]
 8007d0a:	e762      	b.n	8007bd2 <_scanf_float+0x4a>
 8007d0c:	eb1a 0105 	adds.w	r1, sl, r5
 8007d10:	f47f af6d 	bne.w	8007bee <_scanf_float+0x66>
 8007d14:	6822      	ldr	r2, [r4, #0]
 8007d16:	460d      	mov	r5, r1
 8007d18:	468a      	mov	sl, r1
 8007d1a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007d1e:	6022      	str	r2, [r4, #0]
 8007d20:	f806 3b01 	strb.w	r3, [r6], #1
 8007d24:	e7de      	b.n	8007ce4 <_scanf_float+0x15c>
 8007d26:	6822      	ldr	r2, [r4, #0]
 8007d28:	0610      	lsls	r0, r2, #24
 8007d2a:	f57f af60 	bpl.w	8007bee <_scanf_float+0x66>
 8007d2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d32:	6022      	str	r2, [r4, #0]
 8007d34:	e7f4      	b.n	8007d20 <_scanf_float+0x198>
 8007d36:	f1ba 0f00 	cmp.w	sl, #0
 8007d3a:	d10c      	bne.n	8007d56 <_scanf_float+0x1ce>
 8007d3c:	b977      	cbnz	r7, 8007d5c <_scanf_float+0x1d4>
 8007d3e:	6822      	ldr	r2, [r4, #0]
 8007d40:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007d44:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007d48:	d108      	bne.n	8007d5c <_scanf_float+0x1d4>
 8007d4a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d4e:	f04f 0a01 	mov.w	sl, #1
 8007d52:	6022      	str	r2, [r4, #0]
 8007d54:	e7e4      	b.n	8007d20 <_scanf_float+0x198>
 8007d56:	f1ba 0f02 	cmp.w	sl, #2
 8007d5a:	d051      	beq.n	8007e00 <_scanf_float+0x278>
 8007d5c:	2d01      	cmp	r5, #1
 8007d5e:	d002      	beq.n	8007d66 <_scanf_float+0x1de>
 8007d60:	2d04      	cmp	r5, #4
 8007d62:	f47f af44 	bne.w	8007bee <_scanf_float+0x66>
 8007d66:	3501      	adds	r5, #1
 8007d68:	b2ed      	uxtb	r5, r5
 8007d6a:	e7d9      	b.n	8007d20 <_scanf_float+0x198>
 8007d6c:	f1ba 0f01 	cmp.w	sl, #1
 8007d70:	f47f af3d 	bne.w	8007bee <_scanf_float+0x66>
 8007d74:	f04f 0a02 	mov.w	sl, #2
 8007d78:	e7d2      	b.n	8007d20 <_scanf_float+0x198>
 8007d7a:	b975      	cbnz	r5, 8007d9a <_scanf_float+0x212>
 8007d7c:	2f00      	cmp	r7, #0
 8007d7e:	f47f af37 	bne.w	8007bf0 <_scanf_float+0x68>
 8007d82:	6822      	ldr	r2, [r4, #0]
 8007d84:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007d88:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007d8c:	f040 8103 	bne.w	8007f96 <_scanf_float+0x40e>
 8007d90:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d94:	2501      	movs	r5, #1
 8007d96:	6022      	str	r2, [r4, #0]
 8007d98:	e7c2      	b.n	8007d20 <_scanf_float+0x198>
 8007d9a:	2d03      	cmp	r5, #3
 8007d9c:	d0e3      	beq.n	8007d66 <_scanf_float+0x1de>
 8007d9e:	2d05      	cmp	r5, #5
 8007da0:	e7df      	b.n	8007d62 <_scanf_float+0x1da>
 8007da2:	2d02      	cmp	r5, #2
 8007da4:	f47f af23 	bne.w	8007bee <_scanf_float+0x66>
 8007da8:	2503      	movs	r5, #3
 8007daa:	e7b9      	b.n	8007d20 <_scanf_float+0x198>
 8007dac:	2d06      	cmp	r5, #6
 8007dae:	f47f af1e 	bne.w	8007bee <_scanf_float+0x66>
 8007db2:	2507      	movs	r5, #7
 8007db4:	e7b4      	b.n	8007d20 <_scanf_float+0x198>
 8007db6:	6822      	ldr	r2, [r4, #0]
 8007db8:	0591      	lsls	r1, r2, #22
 8007dba:	f57f af18 	bpl.w	8007bee <_scanf_float+0x66>
 8007dbe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007dc2:	9702      	str	r7, [sp, #8]
 8007dc4:	6022      	str	r2, [r4, #0]
 8007dc6:	e7ab      	b.n	8007d20 <_scanf_float+0x198>
 8007dc8:	6822      	ldr	r2, [r4, #0]
 8007dca:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007dce:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007dd2:	d005      	beq.n	8007de0 <_scanf_float+0x258>
 8007dd4:	0550      	lsls	r0, r2, #21
 8007dd6:	f57f af0a 	bpl.w	8007bee <_scanf_float+0x66>
 8007dda:	2f00      	cmp	r7, #0
 8007ddc:	f000 80db 	beq.w	8007f96 <_scanf_float+0x40e>
 8007de0:	0591      	lsls	r1, r2, #22
 8007de2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007de6:	bf58      	it	pl
 8007de8:	9902      	ldrpl	r1, [sp, #8]
 8007dea:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007dee:	bf58      	it	pl
 8007df0:	1a79      	subpl	r1, r7, r1
 8007df2:	6022      	str	r2, [r4, #0]
 8007df4:	f04f 0700 	mov.w	r7, #0
 8007df8:	bf58      	it	pl
 8007dfa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007dfe:	e78f      	b.n	8007d20 <_scanf_float+0x198>
 8007e00:	f04f 0a03 	mov.w	sl, #3
 8007e04:	e78c      	b.n	8007d20 <_scanf_float+0x198>
 8007e06:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	4640      	mov	r0, r8
 8007e0e:	4798      	blx	r3
 8007e10:	2800      	cmp	r0, #0
 8007e12:	f43f aede 	beq.w	8007bd2 <_scanf_float+0x4a>
 8007e16:	e6ea      	b.n	8007bee <_scanf_float+0x66>
 8007e18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e1c:	464a      	mov	r2, r9
 8007e1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e22:	4640      	mov	r0, r8
 8007e24:	4798      	blx	r3
 8007e26:	6923      	ldr	r3, [r4, #16]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	6123      	str	r3, [r4, #16]
 8007e2c:	e6ea      	b.n	8007c04 <_scanf_float+0x7c>
 8007e2e:	1e6b      	subs	r3, r5, #1
 8007e30:	2b06      	cmp	r3, #6
 8007e32:	d824      	bhi.n	8007e7e <_scanf_float+0x2f6>
 8007e34:	2d02      	cmp	r5, #2
 8007e36:	d836      	bhi.n	8007ea6 <_scanf_float+0x31e>
 8007e38:	9b01      	ldr	r3, [sp, #4]
 8007e3a:	429e      	cmp	r6, r3
 8007e3c:	f67f aee6 	bls.w	8007c0c <_scanf_float+0x84>
 8007e40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e44:	464a      	mov	r2, r9
 8007e46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	4798      	blx	r3
 8007e4e:	6923      	ldr	r3, [r4, #16]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	6123      	str	r3, [r4, #16]
 8007e54:	e7f0      	b.n	8007e38 <_scanf_float+0x2b0>
 8007e56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e5a:	464a      	mov	r2, r9
 8007e5c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007e60:	4640      	mov	r0, r8
 8007e62:	4798      	blx	r3
 8007e64:	6923      	ldr	r3, [r4, #16]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	6123      	str	r3, [r4, #16]
 8007e6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e6e:	fa5f fa8a 	uxtb.w	sl, sl
 8007e72:	f1ba 0f02 	cmp.w	sl, #2
 8007e76:	d1ee      	bne.n	8007e56 <_scanf_float+0x2ce>
 8007e78:	3d03      	subs	r5, #3
 8007e7a:	b2ed      	uxtb	r5, r5
 8007e7c:	1b76      	subs	r6, r6, r5
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	05da      	lsls	r2, r3, #23
 8007e82:	d52f      	bpl.n	8007ee4 <_scanf_float+0x35c>
 8007e84:	055b      	lsls	r3, r3, #21
 8007e86:	d511      	bpl.n	8007eac <_scanf_float+0x324>
 8007e88:	9b01      	ldr	r3, [sp, #4]
 8007e8a:	429e      	cmp	r6, r3
 8007e8c:	f67f aebe 	bls.w	8007c0c <_scanf_float+0x84>
 8007e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e94:	464a      	mov	r2, r9
 8007e96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	4798      	blx	r3
 8007e9e:	6923      	ldr	r3, [r4, #16]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	6123      	str	r3, [r4, #16]
 8007ea4:	e7f0      	b.n	8007e88 <_scanf_float+0x300>
 8007ea6:	46aa      	mov	sl, r5
 8007ea8:	46b3      	mov	fp, r6
 8007eaa:	e7de      	b.n	8007e6a <_scanf_float+0x2e2>
 8007eac:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007eb0:	1e75      	subs	r5, r6, #1
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	2965      	cmp	r1, #101	@ 0x65
 8007eb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007eba:	6123      	str	r3, [r4, #16]
 8007ebc:	d00c      	beq.n	8007ed8 <_scanf_float+0x350>
 8007ebe:	2945      	cmp	r1, #69	@ 0x45
 8007ec0:	d00a      	beq.n	8007ed8 <_scanf_float+0x350>
 8007ec2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ec6:	464a      	mov	r2, r9
 8007ec8:	4640      	mov	r0, r8
 8007eca:	1eb5      	subs	r5, r6, #2
 8007ecc:	4798      	blx	r3
 8007ece:	6923      	ldr	r3, [r4, #16]
 8007ed0:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	6123      	str	r3, [r4, #16]
 8007ed8:	462e      	mov	r6, r5
 8007eda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ede:	464a      	mov	r2, r9
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4798      	blx	r3
 8007ee4:	6822      	ldr	r2, [r4, #0]
 8007ee6:	f012 0210 	ands.w	r2, r2, #16
 8007eea:	d001      	beq.n	8007ef0 <_scanf_float+0x368>
 8007eec:	2000      	movs	r0, #0
 8007eee:	e68e      	b.n	8007c0e <_scanf_float+0x86>
 8007ef0:	7032      	strb	r2, [r6, #0]
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007efc:	d125      	bne.n	8007f4a <_scanf_float+0x3c2>
 8007efe:	9b02      	ldr	r3, [sp, #8]
 8007f00:	429f      	cmp	r7, r3
 8007f02:	d00a      	beq.n	8007f1a <_scanf_float+0x392>
 8007f04:	1bda      	subs	r2, r3, r7
 8007f06:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007f0a:	4924      	ldr	r1, [pc, #144]	@ (8007f9c <_scanf_float+0x414>)
 8007f0c:	429e      	cmp	r6, r3
 8007f0e:	bf28      	it	cs
 8007f10:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007f14:	4630      	mov	r0, r6
 8007f16:	f000 f93d 	bl	8008194 <siprintf>
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	9901      	ldr	r1, [sp, #4]
 8007f1e:	4640      	mov	r0, r8
 8007f20:	f002 fc4e 	bl	800a7c0 <_strtod_r>
 8007f24:	6821      	ldr	r1, [r4, #0]
 8007f26:	9b03      	ldr	r3, [sp, #12]
 8007f28:	f011 0f02 	tst.w	r1, #2
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	ec57 6b10 	vmov	r6, r7, d0
 8007f32:	f103 0204 	add.w	r2, r3, #4
 8007f36:	d015      	beq.n	8007f64 <_scanf_float+0x3dc>
 8007f38:	9903      	ldr	r1, [sp, #12]
 8007f3a:	600a      	str	r2, [r1, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	e9c3 6700 	strd	r6, r7, [r3]
 8007f42:	68e3      	ldr	r3, [r4, #12]
 8007f44:	3301      	adds	r3, #1
 8007f46:	60e3      	str	r3, [r4, #12]
 8007f48:	e7d0      	b.n	8007eec <_scanf_float+0x364>
 8007f4a:	9b04      	ldr	r3, [sp, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d0e4      	beq.n	8007f1a <_scanf_float+0x392>
 8007f50:	9905      	ldr	r1, [sp, #20]
 8007f52:	230a      	movs	r3, #10
 8007f54:	4640      	mov	r0, r8
 8007f56:	3101      	adds	r1, #1
 8007f58:	f002 fcb2 	bl	800a8c0 <_strtol_r>
 8007f5c:	9b04      	ldr	r3, [sp, #16]
 8007f5e:	9e05      	ldr	r6, [sp, #20]
 8007f60:	1ac2      	subs	r2, r0, r3
 8007f62:	e7d0      	b.n	8007f06 <_scanf_float+0x37e>
 8007f64:	f011 0f04 	tst.w	r1, #4
 8007f68:	9903      	ldr	r1, [sp, #12]
 8007f6a:	600a      	str	r2, [r1, #0]
 8007f6c:	d1e6      	bne.n	8007f3c <_scanf_float+0x3b4>
 8007f6e:	681d      	ldr	r5, [r3, #0]
 8007f70:	4632      	mov	r2, r6
 8007f72:	463b      	mov	r3, r7
 8007f74:	4630      	mov	r0, r6
 8007f76:	4639      	mov	r1, r7
 8007f78:	f7f8 fdbc 	bl	8000af4 <__aeabi_dcmpun>
 8007f7c:	b128      	cbz	r0, 8007f8a <_scanf_float+0x402>
 8007f7e:	4808      	ldr	r0, [pc, #32]	@ (8007fa0 <_scanf_float+0x418>)
 8007f80:	f000 f9fc 	bl	800837c <nanf>
 8007f84:	ed85 0a00 	vstr	s0, [r5]
 8007f88:	e7db      	b.n	8007f42 <_scanf_float+0x3ba>
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	f7f8 fe0f 	bl	8000bb0 <__aeabi_d2f>
 8007f92:	6028      	str	r0, [r5, #0]
 8007f94:	e7d5      	b.n	8007f42 <_scanf_float+0x3ba>
 8007f96:	2700      	movs	r7, #0
 8007f98:	e62e      	b.n	8007bf8 <_scanf_float+0x70>
 8007f9a:	bf00      	nop
 8007f9c:	0800bb68 	.word	0x0800bb68
 8007fa0:	0800bca9 	.word	0x0800bca9

08007fa4 <std>:
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	b510      	push	{r4, lr}
 8007fa8:	4604      	mov	r4, r0
 8007faa:	6083      	str	r3, [r0, #8]
 8007fac:	8181      	strh	r1, [r0, #12]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fb2:	81c2      	strh	r2, [r0, #14]
 8007fb4:	2208      	movs	r2, #8
 8007fb6:	6183      	str	r3, [r0, #24]
 8007fb8:	e9c0 3300 	strd	r3, r3, [r0]
 8007fbc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fc0:	305c      	adds	r0, #92	@ 0x5c
 8007fc2:	f000 f94c 	bl	800825e <memset>
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ffc <std+0x58>)
 8007fc8:	6224      	str	r4, [r4, #32]
 8007fca:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8008000 <std+0x5c>)
 8007fce:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8008004 <std+0x60>)
 8007fd2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008008 <std+0x64>)
 8007fd6:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800800c <std+0x68>)
 8007fda:	429c      	cmp	r4, r3
 8007fdc:	d006      	beq.n	8007fec <std+0x48>
 8007fde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fe2:	4294      	cmp	r4, r2
 8007fe4:	d002      	beq.n	8007fec <std+0x48>
 8007fe6:	33d0      	adds	r3, #208	@ 0xd0
 8007fe8:	429c      	cmp	r4, r3
 8007fea:	d105      	bne.n	8007ff8 <std+0x54>
 8007fec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff4:	f000 b9b0 	b.w	8008358 <__retarget_lock_init_recursive>
 8007ff8:	bd10      	pop	{r4, pc}
 8007ffa:	bf00      	nop
 8007ffc:	080081d9 	.word	0x080081d9
 8008000:	080081fb 	.word	0x080081fb
 8008004:	08008233 	.word	0x08008233
 8008008:	08008257 	.word	0x08008257
 800800c:	20000348 	.word	0x20000348

08008010 <stdio_exit_handler>:
 8008010:	4a02      	ldr	r2, [pc, #8]	@ (800801c <stdio_exit_handler+0xc>)
 8008012:	4903      	ldr	r1, [pc, #12]	@ (8008020 <stdio_exit_handler+0x10>)
 8008014:	4803      	ldr	r0, [pc, #12]	@ (8008024 <stdio_exit_handler+0x14>)
 8008016:	f000 b869 	b.w	80080ec <_fwalk_sglue>
 800801a:	bf00      	nop
 800801c:	20000028 	.word	0x20000028
 8008020:	0800ac7d 	.word	0x0800ac7d
 8008024:	20000038 	.word	0x20000038

08008028 <cleanup_stdio>:
 8008028:	6841      	ldr	r1, [r0, #4]
 800802a:	4b0c      	ldr	r3, [pc, #48]	@ (800805c <cleanup_stdio+0x34>)
 800802c:	4299      	cmp	r1, r3
 800802e:	b510      	push	{r4, lr}
 8008030:	4604      	mov	r4, r0
 8008032:	d001      	beq.n	8008038 <cleanup_stdio+0x10>
 8008034:	f002 fe22 	bl	800ac7c <_fflush_r>
 8008038:	68a1      	ldr	r1, [r4, #8]
 800803a:	4b09      	ldr	r3, [pc, #36]	@ (8008060 <cleanup_stdio+0x38>)
 800803c:	4299      	cmp	r1, r3
 800803e:	d002      	beq.n	8008046 <cleanup_stdio+0x1e>
 8008040:	4620      	mov	r0, r4
 8008042:	f002 fe1b 	bl	800ac7c <_fflush_r>
 8008046:	68e1      	ldr	r1, [r4, #12]
 8008048:	4b06      	ldr	r3, [pc, #24]	@ (8008064 <cleanup_stdio+0x3c>)
 800804a:	4299      	cmp	r1, r3
 800804c:	d004      	beq.n	8008058 <cleanup_stdio+0x30>
 800804e:	4620      	mov	r0, r4
 8008050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008054:	f002 be12 	b.w	800ac7c <_fflush_r>
 8008058:	bd10      	pop	{r4, pc}
 800805a:	bf00      	nop
 800805c:	20000348 	.word	0x20000348
 8008060:	200003b0 	.word	0x200003b0
 8008064:	20000418 	.word	0x20000418

08008068 <global_stdio_init.part.0>:
 8008068:	b510      	push	{r4, lr}
 800806a:	4b0b      	ldr	r3, [pc, #44]	@ (8008098 <global_stdio_init.part.0+0x30>)
 800806c:	2104      	movs	r1, #4
 800806e:	4c0b      	ldr	r4, [pc, #44]	@ (800809c <global_stdio_init.part.0+0x34>)
 8008070:	4a0b      	ldr	r2, [pc, #44]	@ (80080a0 <global_stdio_init.part.0+0x38>)
 8008072:	4620      	mov	r0, r4
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	2200      	movs	r2, #0
 8008078:	f7ff ff94 	bl	8007fa4 <std>
 800807c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008080:	2201      	movs	r2, #1
 8008082:	2109      	movs	r1, #9
 8008084:	f7ff ff8e 	bl	8007fa4 <std>
 8008088:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800808c:	2202      	movs	r2, #2
 800808e:	2112      	movs	r1, #18
 8008090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008094:	f7ff bf86 	b.w	8007fa4 <std>
 8008098:	20000480 	.word	0x20000480
 800809c:	20000348 	.word	0x20000348
 80080a0:	08008011 	.word	0x08008011

080080a4 <__sfp_lock_acquire>:
 80080a4:	4801      	ldr	r0, [pc, #4]	@ (80080ac <__sfp_lock_acquire+0x8>)
 80080a6:	f000 b958 	b.w	800835a <__retarget_lock_acquire_recursive>
 80080aa:	bf00      	nop
 80080ac:	20000489 	.word	0x20000489

080080b0 <__sfp_lock_release>:
 80080b0:	4801      	ldr	r0, [pc, #4]	@ (80080b8 <__sfp_lock_release+0x8>)
 80080b2:	f000 b953 	b.w	800835c <__retarget_lock_release_recursive>
 80080b6:	bf00      	nop
 80080b8:	20000489 	.word	0x20000489

080080bc <__sinit>:
 80080bc:	b510      	push	{r4, lr}
 80080be:	4604      	mov	r4, r0
 80080c0:	f7ff fff0 	bl	80080a4 <__sfp_lock_acquire>
 80080c4:	6a23      	ldr	r3, [r4, #32]
 80080c6:	b11b      	cbz	r3, 80080d0 <__sinit+0x14>
 80080c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080cc:	f7ff bff0 	b.w	80080b0 <__sfp_lock_release>
 80080d0:	4b04      	ldr	r3, [pc, #16]	@ (80080e4 <__sinit+0x28>)
 80080d2:	6223      	str	r3, [r4, #32]
 80080d4:	4b04      	ldr	r3, [pc, #16]	@ (80080e8 <__sinit+0x2c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1f5      	bne.n	80080c8 <__sinit+0xc>
 80080dc:	f7ff ffc4 	bl	8008068 <global_stdio_init.part.0>
 80080e0:	e7f2      	b.n	80080c8 <__sinit+0xc>
 80080e2:	bf00      	nop
 80080e4:	08008029 	.word	0x08008029
 80080e8:	20000480 	.word	0x20000480

080080ec <_fwalk_sglue>:
 80080ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f0:	4607      	mov	r7, r0
 80080f2:	4688      	mov	r8, r1
 80080f4:	4614      	mov	r4, r2
 80080f6:	2600      	movs	r6, #0
 80080f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080fc:	f1b9 0901 	subs.w	r9, r9, #1
 8008100:	d505      	bpl.n	800810e <_fwalk_sglue+0x22>
 8008102:	6824      	ldr	r4, [r4, #0]
 8008104:	2c00      	cmp	r4, #0
 8008106:	d1f7      	bne.n	80080f8 <_fwalk_sglue+0xc>
 8008108:	4630      	mov	r0, r6
 800810a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800810e:	89ab      	ldrh	r3, [r5, #12]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d907      	bls.n	8008124 <_fwalk_sglue+0x38>
 8008114:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008118:	3301      	adds	r3, #1
 800811a:	d003      	beq.n	8008124 <_fwalk_sglue+0x38>
 800811c:	4629      	mov	r1, r5
 800811e:	4638      	mov	r0, r7
 8008120:	47c0      	blx	r8
 8008122:	4306      	orrs	r6, r0
 8008124:	3568      	adds	r5, #104	@ 0x68
 8008126:	e7e9      	b.n	80080fc <_fwalk_sglue+0x10>

08008128 <sniprintf>:
 8008128:	b40c      	push	{r2, r3}
 800812a:	4b19      	ldr	r3, [pc, #100]	@ (8008190 <sniprintf+0x68>)
 800812c:	b530      	push	{r4, r5, lr}
 800812e:	1e0c      	subs	r4, r1, #0
 8008130:	b09d      	sub	sp, #116	@ 0x74
 8008132:	681d      	ldr	r5, [r3, #0]
 8008134:	da08      	bge.n	8008148 <sniprintf+0x20>
 8008136:	238b      	movs	r3, #139	@ 0x8b
 8008138:	f04f 30ff 	mov.w	r0, #4294967295
 800813c:	602b      	str	r3, [r5, #0]
 800813e:	b01d      	add	sp, #116	@ 0x74
 8008140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008144:	b002      	add	sp, #8
 8008146:	4770      	bx	lr
 8008148:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800814c:	9002      	str	r0, [sp, #8]
 800814e:	9006      	str	r0, [sp, #24]
 8008150:	a902      	add	r1, sp, #8
 8008152:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008156:	f04f 0300 	mov.w	r3, #0
 800815a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800815c:	4628      	mov	r0, r5
 800815e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008160:	bf14      	ite	ne
 8008162:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008166:	4623      	moveq	r3, r4
 8008168:	9304      	str	r3, [sp, #16]
 800816a:	9307      	str	r3, [sp, #28]
 800816c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008170:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008174:	ab21      	add	r3, sp, #132	@ 0x84
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	f002 fc00 	bl	800a97c <_svfiprintf_r>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	bfbc      	itt	lt
 8008180:	238b      	movlt	r3, #139	@ 0x8b
 8008182:	602b      	strlt	r3, [r5, #0]
 8008184:	2c00      	cmp	r4, #0
 8008186:	d0da      	beq.n	800813e <sniprintf+0x16>
 8008188:	9b02      	ldr	r3, [sp, #8]
 800818a:	2200      	movs	r2, #0
 800818c:	701a      	strb	r2, [r3, #0]
 800818e:	e7d6      	b.n	800813e <sniprintf+0x16>
 8008190:	20000034 	.word	0x20000034

08008194 <siprintf>:
 8008194:	b40e      	push	{r1, r2, r3}
 8008196:	b510      	push	{r4, lr}
 8008198:	b09d      	sub	sp, #116	@ 0x74
 800819a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800819e:	2400      	movs	r4, #0
 80081a0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80081a2:	9002      	str	r0, [sp, #8]
 80081a4:	9006      	str	r0, [sp, #24]
 80081a6:	9107      	str	r1, [sp, #28]
 80081a8:	9104      	str	r1, [sp, #16]
 80081aa:	4809      	ldr	r0, [pc, #36]	@ (80081d0 <siprintf+0x3c>)
 80081ac:	4909      	ldr	r1, [pc, #36]	@ (80081d4 <siprintf+0x40>)
 80081ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b2:	9105      	str	r1, [sp, #20]
 80081b4:	a902      	add	r1, sp, #8
 80081b6:	6800      	ldr	r0, [r0, #0]
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80081bc:	f002 fbde 	bl	800a97c <_svfiprintf_r>
 80081c0:	9b02      	ldr	r3, [sp, #8]
 80081c2:	701c      	strb	r4, [r3, #0]
 80081c4:	b01d      	add	sp, #116	@ 0x74
 80081c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ca:	b003      	add	sp, #12
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	20000034 	.word	0x20000034
 80081d4:	ffff0208 	.word	0xffff0208

080081d8 <__sread>:
 80081d8:	b510      	push	{r4, lr}
 80081da:	460c      	mov	r4, r1
 80081dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e0:	f000 f86c 	bl	80082bc <_read_r>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	bfab      	itete	ge
 80081e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80081ea:	89a3      	ldrhlt	r3, [r4, #12]
 80081ec:	181b      	addge	r3, r3, r0
 80081ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80081f2:	bfac      	ite	ge
 80081f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80081f6:	81a3      	strhlt	r3, [r4, #12]
 80081f8:	bd10      	pop	{r4, pc}

080081fa <__swrite>:
 80081fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081fe:	461f      	mov	r7, r3
 8008200:	898b      	ldrh	r3, [r1, #12]
 8008202:	4605      	mov	r5, r0
 8008204:	460c      	mov	r4, r1
 8008206:	05db      	lsls	r3, r3, #23
 8008208:	4616      	mov	r6, r2
 800820a:	d505      	bpl.n	8008218 <__swrite+0x1e>
 800820c:	2302      	movs	r3, #2
 800820e:	2200      	movs	r2, #0
 8008210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008214:	f000 f840 	bl	8008298 <_lseek_r>
 8008218:	89a3      	ldrh	r3, [r4, #12]
 800821a:	4632      	mov	r2, r6
 800821c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008220:	4628      	mov	r0, r5
 8008222:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008226:	81a3      	strh	r3, [r4, #12]
 8008228:	463b      	mov	r3, r7
 800822a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800822e:	f000 b857 	b.w	80082e0 <_write_r>

08008232 <__sseek>:
 8008232:	b510      	push	{r4, lr}
 8008234:	460c      	mov	r4, r1
 8008236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800823a:	f000 f82d 	bl	8008298 <_lseek_r>
 800823e:	1c43      	adds	r3, r0, #1
 8008240:	89a3      	ldrh	r3, [r4, #12]
 8008242:	bf15      	itete	ne
 8008244:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008246:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800824a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800824e:	81a3      	strheq	r3, [r4, #12]
 8008250:	bf18      	it	ne
 8008252:	81a3      	strhne	r3, [r4, #12]
 8008254:	bd10      	pop	{r4, pc}

08008256 <__sclose>:
 8008256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800825a:	f000 b80d 	b.w	8008278 <_close_r>

0800825e <memset>:
 800825e:	4402      	add	r2, r0
 8008260:	4603      	mov	r3, r0
 8008262:	4293      	cmp	r3, r2
 8008264:	d100      	bne.n	8008268 <memset+0xa>
 8008266:	4770      	bx	lr
 8008268:	f803 1b01 	strb.w	r1, [r3], #1
 800826c:	e7f9      	b.n	8008262 <memset+0x4>
	...

08008270 <_localeconv_r>:
 8008270:	4800      	ldr	r0, [pc, #0]	@ (8008274 <_localeconv_r+0x4>)
 8008272:	4770      	bx	lr
 8008274:	20000174 	.word	0x20000174

08008278 <_close_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	2300      	movs	r3, #0
 800827c:	4d05      	ldr	r5, [pc, #20]	@ (8008294 <_close_r+0x1c>)
 800827e:	4604      	mov	r4, r0
 8008280:	4608      	mov	r0, r1
 8008282:	602b      	str	r3, [r5, #0]
 8008284:	f7f9 fd24 	bl	8001cd0 <_close>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d102      	bne.n	8008292 <_close_r+0x1a>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	b103      	cbz	r3, 8008292 <_close_r+0x1a>
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	20000484 	.word	0x20000484

08008298 <_lseek_r>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4604      	mov	r4, r0
 800829c:	4d06      	ldr	r5, [pc, #24]	@ (80082b8 <_lseek_r+0x20>)
 800829e:	4608      	mov	r0, r1
 80082a0:	4611      	mov	r1, r2
 80082a2:	2200      	movs	r2, #0
 80082a4:	602a      	str	r2, [r5, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	f7f9 fd39 	bl	8001d1e <_lseek>
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	d102      	bne.n	80082b6 <_lseek_r+0x1e>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	b103      	cbz	r3, 80082b6 <_lseek_r+0x1e>
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	bd38      	pop	{r3, r4, r5, pc}
 80082b8:	20000484 	.word	0x20000484

080082bc <_read_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4604      	mov	r4, r0
 80082c0:	4d06      	ldr	r5, [pc, #24]	@ (80082dc <_read_r+0x20>)
 80082c2:	4608      	mov	r0, r1
 80082c4:	4611      	mov	r1, r2
 80082c6:	2200      	movs	r2, #0
 80082c8:	602a      	str	r2, [r5, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	f7f9 fcc7 	bl	8001c5e <_read>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_read_r+0x1e>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_read_r+0x1e>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	20000484 	.word	0x20000484

080082e0 <_write_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4604      	mov	r4, r0
 80082e4:	4d06      	ldr	r5, [pc, #24]	@ (8008300 <_write_r+0x20>)
 80082e6:	4608      	mov	r0, r1
 80082e8:	4611      	mov	r1, r2
 80082ea:	2200      	movs	r2, #0
 80082ec:	602a      	str	r2, [r5, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f7f9 fcd2 	bl	8001c98 <_write>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_write_r+0x1e>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_write_r+0x1e>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	20000484 	.word	0x20000484

08008304 <__errno>:
 8008304:	4b01      	ldr	r3, [pc, #4]	@ (800830c <__errno+0x8>)
 8008306:	6818      	ldr	r0, [r3, #0]
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	20000034 	.word	0x20000034

08008310 <__libc_init_array>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	4d0d      	ldr	r5, [pc, #52]	@ (8008348 <__libc_init_array+0x38>)
 8008314:	2600      	movs	r6, #0
 8008316:	4c0d      	ldr	r4, [pc, #52]	@ (800834c <__libc_init_array+0x3c>)
 8008318:	1b64      	subs	r4, r4, r5
 800831a:	10a4      	asrs	r4, r4, #2
 800831c:	42a6      	cmp	r6, r4
 800831e:	d109      	bne.n	8008334 <__libc_init_array+0x24>
 8008320:	4d0b      	ldr	r5, [pc, #44]	@ (8008350 <__libc_init_array+0x40>)
 8008322:	2600      	movs	r6, #0
 8008324:	4c0b      	ldr	r4, [pc, #44]	@ (8008354 <__libc_init_array+0x44>)
 8008326:	f003 fb95 	bl	800ba54 <_init>
 800832a:	1b64      	subs	r4, r4, r5
 800832c:	10a4      	asrs	r4, r4, #2
 800832e:	42a6      	cmp	r6, r4
 8008330:	d105      	bne.n	800833e <__libc_init_array+0x2e>
 8008332:	bd70      	pop	{r4, r5, r6, pc}
 8008334:	f855 3b04 	ldr.w	r3, [r5], #4
 8008338:	3601      	adds	r6, #1
 800833a:	4798      	blx	r3
 800833c:	e7ee      	b.n	800831c <__libc_init_array+0xc>
 800833e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008342:	3601      	adds	r6, #1
 8008344:	4798      	blx	r3
 8008346:	e7f2      	b.n	800832e <__libc_init_array+0x1e>
 8008348:	0800bf64 	.word	0x0800bf64
 800834c:	0800bf64 	.word	0x0800bf64
 8008350:	0800bf64 	.word	0x0800bf64
 8008354:	0800bf68 	.word	0x0800bf68

08008358 <__retarget_lock_init_recursive>:
 8008358:	4770      	bx	lr

0800835a <__retarget_lock_acquire_recursive>:
 800835a:	4770      	bx	lr

0800835c <__retarget_lock_release_recursive>:
 800835c:	4770      	bx	lr

0800835e <memchr>:
 800835e:	b2c9      	uxtb	r1, r1
 8008360:	4603      	mov	r3, r0
 8008362:	4402      	add	r2, r0
 8008364:	b510      	push	{r4, lr}
 8008366:	4293      	cmp	r3, r2
 8008368:	4618      	mov	r0, r3
 800836a:	d101      	bne.n	8008370 <memchr+0x12>
 800836c:	2000      	movs	r0, #0
 800836e:	e003      	b.n	8008378 <memchr+0x1a>
 8008370:	7804      	ldrb	r4, [r0, #0]
 8008372:	3301      	adds	r3, #1
 8008374:	428c      	cmp	r4, r1
 8008376:	d1f6      	bne.n	8008366 <memchr+0x8>
 8008378:	bd10      	pop	{r4, pc}
	...

0800837c <nanf>:
 800837c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008384 <nanf+0x8>
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	7fc00000 	.word	0x7fc00000

08008388 <quorem>:
 8008388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	6903      	ldr	r3, [r0, #16]
 800838e:	4607      	mov	r7, r0
 8008390:	690c      	ldr	r4, [r1, #16]
 8008392:	42a3      	cmp	r3, r4
 8008394:	f2c0 8083 	blt.w	800849e <quorem+0x116>
 8008398:	3c01      	subs	r4, #1
 800839a:	f100 0514 	add.w	r5, r0, #20
 800839e:	f101 0814 	add.w	r8, r1, #20
 80083a2:	00a3      	lsls	r3, r4, #2
 80083a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083b8:	3301      	adds	r3, #1
 80083ba:	429a      	cmp	r2, r3
 80083bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80083c0:	d331      	bcc.n	8008426 <quorem+0x9e>
 80083c2:	f04f 0a00 	mov.w	sl, #0
 80083c6:	46c4      	mov	ip, r8
 80083c8:	46ae      	mov	lr, r5
 80083ca:	46d3      	mov	fp, sl
 80083cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80083d0:	b298      	uxth	r0, r3
 80083d2:	45e1      	cmp	r9, ip
 80083d4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80083d8:	fb06 a000 	mla	r0, r6, r0, sl
 80083dc:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80083e0:	b280      	uxth	r0, r0
 80083e2:	fb06 2303 	mla	r3, r6, r3, r2
 80083e6:	f8de 2000 	ldr.w	r2, [lr]
 80083ea:	b292      	uxth	r2, r2
 80083ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083f0:	eba2 0200 	sub.w	r2, r2, r0
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	f8de 0000 	ldr.w	r0, [lr]
 80083fa:	445a      	add	r2, fp
 80083fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008400:	b292      	uxth	r2, r2
 8008402:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008406:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800840a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800840e:	f84e 2b04 	str.w	r2, [lr], #4
 8008412:	d2db      	bcs.n	80083cc <quorem+0x44>
 8008414:	9b00      	ldr	r3, [sp, #0]
 8008416:	58eb      	ldr	r3, [r5, r3]
 8008418:	b92b      	cbnz	r3, 8008426 <quorem+0x9e>
 800841a:	9b01      	ldr	r3, [sp, #4]
 800841c:	3b04      	subs	r3, #4
 800841e:	429d      	cmp	r5, r3
 8008420:	461a      	mov	r2, r3
 8008422:	d330      	bcc.n	8008486 <quorem+0xfe>
 8008424:	613c      	str	r4, [r7, #16]
 8008426:	4638      	mov	r0, r7
 8008428:	f001 f9d0 	bl	80097cc <__mcmp>
 800842c:	2800      	cmp	r0, #0
 800842e:	db26      	blt.n	800847e <quorem+0xf6>
 8008430:	4629      	mov	r1, r5
 8008432:	2000      	movs	r0, #0
 8008434:	f858 2b04 	ldr.w	r2, [r8], #4
 8008438:	f8d1 c000 	ldr.w	ip, [r1]
 800843c:	fa1f fe82 	uxth.w	lr, r2
 8008440:	45c1      	cmp	r9, r8
 8008442:	fa1f f38c 	uxth.w	r3, ip
 8008446:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800844a:	eba3 030e 	sub.w	r3, r3, lr
 800844e:	4403      	add	r3, r0
 8008450:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008454:	b29b      	uxth	r3, r3
 8008456:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800845a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800845e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008462:	f841 3b04 	str.w	r3, [r1], #4
 8008466:	d2e5      	bcs.n	8008434 <quorem+0xac>
 8008468:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800846c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008470:	b922      	cbnz	r2, 800847c <quorem+0xf4>
 8008472:	3b04      	subs	r3, #4
 8008474:	429d      	cmp	r5, r3
 8008476:	461a      	mov	r2, r3
 8008478:	d30b      	bcc.n	8008492 <quorem+0x10a>
 800847a:	613c      	str	r4, [r7, #16]
 800847c:	3601      	adds	r6, #1
 800847e:	4630      	mov	r0, r6
 8008480:	b003      	add	sp, #12
 8008482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008486:	6812      	ldr	r2, [r2, #0]
 8008488:	3b04      	subs	r3, #4
 800848a:	2a00      	cmp	r2, #0
 800848c:	d1ca      	bne.n	8008424 <quorem+0x9c>
 800848e:	3c01      	subs	r4, #1
 8008490:	e7c5      	b.n	800841e <quorem+0x96>
 8008492:	6812      	ldr	r2, [r2, #0]
 8008494:	3b04      	subs	r3, #4
 8008496:	2a00      	cmp	r2, #0
 8008498:	d1ef      	bne.n	800847a <quorem+0xf2>
 800849a:	3c01      	subs	r4, #1
 800849c:	e7ea      	b.n	8008474 <quorem+0xec>
 800849e:	2000      	movs	r0, #0
 80084a0:	e7ee      	b.n	8008480 <quorem+0xf8>
 80084a2:	0000      	movs	r0, r0
 80084a4:	0000      	movs	r0, r0
	...

080084a8 <_dtoa_r>:
 80084a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	69c7      	ldr	r7, [r0, #28]
 80084ae:	b097      	sub	sp, #92	@ 0x5c
 80084b0:	4681      	mov	r9, r0
 80084b2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80084b4:	9107      	str	r1, [sp, #28]
 80084b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80084b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80084ba:	ec55 4b10 	vmov	r4, r5, d0
 80084be:	ed8d 0b04 	vstr	d0, [sp, #16]
 80084c2:	b97f      	cbnz	r7, 80084e4 <_dtoa_r+0x3c>
 80084c4:	2010      	movs	r0, #16
 80084c6:	f000 fe0b 	bl	80090e0 <malloc>
 80084ca:	4602      	mov	r2, r0
 80084cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80084d0:	b920      	cbnz	r0, 80084dc <_dtoa_r+0x34>
 80084d2:	4ba9      	ldr	r3, [pc, #676]	@ (8008778 <_dtoa_r+0x2d0>)
 80084d4:	21ef      	movs	r1, #239	@ 0xef
 80084d6:	48a9      	ldr	r0, [pc, #676]	@ (800877c <_dtoa_r+0x2d4>)
 80084d8:	f002 fc4a 	bl	800ad70 <__assert_func>
 80084dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80084e0:	6007      	str	r7, [r0, #0]
 80084e2:	60c7      	str	r7, [r0, #12]
 80084e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80084e8:	6819      	ldr	r1, [r3, #0]
 80084ea:	b159      	cbz	r1, 8008504 <_dtoa_r+0x5c>
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	2301      	movs	r3, #1
 80084f0:	4648      	mov	r0, r9
 80084f2:	4093      	lsls	r3, r2
 80084f4:	604a      	str	r2, [r1, #4]
 80084f6:	608b      	str	r3, [r1, #8]
 80084f8:	f000 fee8 	bl	80092cc <_Bfree>
 80084fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	1e2b      	subs	r3, r5, #0
 8008506:	bfb7      	itett	lt
 8008508:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800850c:	2300      	movge	r3, #0
 800850e:	2201      	movlt	r2, #1
 8008510:	9305      	strlt	r3, [sp, #20]
 8008512:	bfa8      	it	ge
 8008514:	6033      	strge	r3, [r6, #0]
 8008516:	9f05      	ldr	r7, [sp, #20]
 8008518:	4b99      	ldr	r3, [pc, #612]	@ (8008780 <_dtoa_r+0x2d8>)
 800851a:	bfb8      	it	lt
 800851c:	6032      	strlt	r2, [r6, #0]
 800851e:	43bb      	bics	r3, r7
 8008520:	d112      	bne.n	8008548 <_dtoa_r+0xa0>
 8008522:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008526:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008528:	6013      	str	r3, [r2, #0]
 800852a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800852e:	4323      	orrs	r3, r4
 8008530:	f000 855a 	beq.w	8008fe8 <_dtoa_r+0xb40>
 8008534:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008536:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008794 <_dtoa_r+0x2ec>
 800853a:	2b00      	cmp	r3, #0
 800853c:	f000 855c 	beq.w	8008ff8 <_dtoa_r+0xb50>
 8008540:	f10a 0303 	add.w	r3, sl, #3
 8008544:	f000 bd56 	b.w	8008ff4 <_dtoa_r+0xb4c>
 8008548:	ed9d 7b04 	vldr	d7, [sp, #16]
 800854c:	2200      	movs	r2, #0
 800854e:	2300      	movs	r3, #0
 8008550:	ec51 0b17 	vmov	r0, r1, d7
 8008554:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008558:	f7f8 fa9a 	bl	8000a90 <__aeabi_dcmpeq>
 800855c:	4680      	mov	r8, r0
 800855e:	b158      	cbz	r0, 8008578 <_dtoa_r+0xd0>
 8008560:	2301      	movs	r3, #1
 8008562:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008564:	6013      	str	r3, [r2, #0]
 8008566:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008568:	b113      	cbz	r3, 8008570 <_dtoa_r+0xc8>
 800856a:	4b86      	ldr	r3, [pc, #536]	@ (8008784 <_dtoa_r+0x2dc>)
 800856c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800856e:	6013      	str	r3, [r2, #0]
 8008570:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8008798 <_dtoa_r+0x2f0>
 8008574:	f000 bd40 	b.w	8008ff8 <_dtoa_r+0xb50>
 8008578:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800857c:	aa14      	add	r2, sp, #80	@ 0x50
 800857e:	a915      	add	r1, sp, #84	@ 0x54
 8008580:	4648      	mov	r0, r9
 8008582:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008586:	f001 fa49 	bl	8009a1c <__d2b>
 800858a:	9002      	str	r0, [sp, #8]
 800858c:	2e00      	cmp	r6, #0
 800858e:	d076      	beq.n	800867e <_dtoa_r+0x1d6>
 8008590:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008592:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008596:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800859a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800859e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80085a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80085a6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80085aa:	4619      	mov	r1, r3
 80085ac:	2200      	movs	r2, #0
 80085ae:	4b76      	ldr	r3, [pc, #472]	@ (8008788 <_dtoa_r+0x2e0>)
 80085b0:	f7f7 fe4e 	bl	8000250 <__aeabi_dsub>
 80085b4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008760 <_dtoa_r+0x2b8>)
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	f7f8 f801 	bl	80005c0 <__aeabi_dmul>
 80085be:	a36a      	add	r3, pc, #424	@ (adr r3, 8008768 <_dtoa_r+0x2c0>)
 80085c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c4:	f7f7 fe46 	bl	8000254 <__adddf3>
 80085c8:	4604      	mov	r4, r0
 80085ca:	460d      	mov	r5, r1
 80085cc:	4630      	mov	r0, r6
 80085ce:	f7f7 ff8d 	bl	80004ec <__aeabi_i2d>
 80085d2:	a367      	add	r3, pc, #412	@ (adr r3, 8008770 <_dtoa_r+0x2c8>)
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	f7f7 fff2 	bl	80005c0 <__aeabi_dmul>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4620      	mov	r0, r4
 80085e2:	4629      	mov	r1, r5
 80085e4:	f7f7 fe36 	bl	8000254 <__adddf3>
 80085e8:	4604      	mov	r4, r0
 80085ea:	460d      	mov	r5, r1
 80085ec:	f7f8 fa98 	bl	8000b20 <__aeabi_d2iz>
 80085f0:	2200      	movs	r2, #0
 80085f2:	4607      	mov	r7, r0
 80085f4:	2300      	movs	r3, #0
 80085f6:	4620      	mov	r0, r4
 80085f8:	4629      	mov	r1, r5
 80085fa:	f7f8 fa53 	bl	8000aa4 <__aeabi_dcmplt>
 80085fe:	b140      	cbz	r0, 8008612 <_dtoa_r+0x16a>
 8008600:	4638      	mov	r0, r7
 8008602:	f7f7 ff73 	bl	80004ec <__aeabi_i2d>
 8008606:	4622      	mov	r2, r4
 8008608:	462b      	mov	r3, r5
 800860a:	f7f8 fa41 	bl	8000a90 <__aeabi_dcmpeq>
 800860e:	b900      	cbnz	r0, 8008612 <_dtoa_r+0x16a>
 8008610:	3f01      	subs	r7, #1
 8008612:	2f16      	cmp	r7, #22
 8008614:	d852      	bhi.n	80086bc <_dtoa_r+0x214>
 8008616:	4b5d      	ldr	r3, [pc, #372]	@ (800878c <_dtoa_r+0x2e4>)
 8008618:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800861c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008624:	f7f8 fa3e 	bl	8000aa4 <__aeabi_dcmplt>
 8008628:	2800      	cmp	r0, #0
 800862a:	d049      	beq.n	80086c0 <_dtoa_r+0x218>
 800862c:	3f01      	subs	r7, #1
 800862e:	2300      	movs	r3, #0
 8008630:	9310      	str	r3, [sp, #64]	@ 0x40
 8008632:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008634:	1b9b      	subs	r3, r3, r6
 8008636:	1e5a      	subs	r2, r3, #1
 8008638:	bf4c      	ite	mi
 800863a:	f1c3 0301 	rsbmi	r3, r3, #1
 800863e:	2300      	movpl	r3, #0
 8008640:	9206      	str	r2, [sp, #24]
 8008642:	bf45      	ittet	mi
 8008644:	9300      	strmi	r3, [sp, #0]
 8008646:	2300      	movmi	r3, #0
 8008648:	9300      	strpl	r3, [sp, #0]
 800864a:	9306      	strmi	r3, [sp, #24]
 800864c:	2f00      	cmp	r7, #0
 800864e:	db39      	blt.n	80086c4 <_dtoa_r+0x21c>
 8008650:	9b06      	ldr	r3, [sp, #24]
 8008652:	970d      	str	r7, [sp, #52]	@ 0x34
 8008654:	443b      	add	r3, r7
 8008656:	9306      	str	r3, [sp, #24]
 8008658:	2300      	movs	r3, #0
 800865a:	9308      	str	r3, [sp, #32]
 800865c:	9b07      	ldr	r3, [sp, #28]
 800865e:	2b09      	cmp	r3, #9
 8008660:	d863      	bhi.n	800872a <_dtoa_r+0x282>
 8008662:	2b05      	cmp	r3, #5
 8008664:	bfc5      	ittet	gt
 8008666:	3b04      	subgt	r3, #4
 8008668:	2400      	movgt	r4, #0
 800866a:	2401      	movle	r4, #1
 800866c:	9307      	strgt	r3, [sp, #28]
 800866e:	9b07      	ldr	r3, [sp, #28]
 8008670:	3b02      	subs	r3, #2
 8008672:	2b03      	cmp	r3, #3
 8008674:	d865      	bhi.n	8008742 <_dtoa_r+0x29a>
 8008676:	e8df f003 	tbb	[pc, r3]
 800867a:	5654      	.short	0x5654
 800867c:	2d39      	.short	0x2d39
 800867e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008682:	441e      	add	r6, r3
 8008684:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008688:	2b20      	cmp	r3, #32
 800868a:	bfc9      	itett	gt
 800868c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008690:	f1c3 0320 	rsble	r3, r3, #32
 8008694:	409f      	lslgt	r7, r3
 8008696:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800869a:	bfd8      	it	le
 800869c:	fa04 f003 	lslle.w	r0, r4, r3
 80086a0:	f106 36ff 	add.w	r6, r6, #4294967295
 80086a4:	bfc4      	itt	gt
 80086a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80086aa:	ea47 0003 	orrgt.w	r0, r7, r3
 80086ae:	f7f7 ff0d 	bl	80004cc <__aeabi_ui2d>
 80086b2:	2201      	movs	r2, #1
 80086b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80086b8:	9212      	str	r2, [sp, #72]	@ 0x48
 80086ba:	e776      	b.n	80085aa <_dtoa_r+0x102>
 80086bc:	2301      	movs	r3, #1
 80086be:	e7b7      	b.n	8008630 <_dtoa_r+0x188>
 80086c0:	9010      	str	r0, [sp, #64]	@ 0x40
 80086c2:	e7b6      	b.n	8008632 <_dtoa_r+0x18a>
 80086c4:	9b00      	ldr	r3, [sp, #0]
 80086c6:	1bdb      	subs	r3, r3, r7
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	427b      	negs	r3, r7
 80086cc:	9308      	str	r3, [sp, #32]
 80086ce:	2300      	movs	r3, #0
 80086d0:	930d      	str	r3, [sp, #52]	@ 0x34
 80086d2:	e7c3      	b.n	800865c <_dtoa_r+0x1b4>
 80086d4:	2301      	movs	r3, #1
 80086d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80086d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086da:	eb07 0b03 	add.w	fp, r7, r3
 80086de:	f10b 0301 	add.w	r3, fp, #1
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	9303      	str	r3, [sp, #12]
 80086e6:	bfb8      	it	lt
 80086e8:	2301      	movlt	r3, #1
 80086ea:	e006      	b.n	80086fa <_dtoa_r+0x252>
 80086ec:	2301      	movs	r3, #1
 80086ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80086f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dd28      	ble.n	8008748 <_dtoa_r+0x2a0>
 80086f6:	469b      	mov	fp, r3
 80086f8:	9303      	str	r3, [sp, #12]
 80086fa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80086fe:	2100      	movs	r1, #0
 8008700:	2204      	movs	r2, #4
 8008702:	f102 0514 	add.w	r5, r2, #20
 8008706:	429d      	cmp	r5, r3
 8008708:	d926      	bls.n	8008758 <_dtoa_r+0x2b0>
 800870a:	6041      	str	r1, [r0, #4]
 800870c:	4648      	mov	r0, r9
 800870e:	f000 fd9d 	bl	800924c <_Balloc>
 8008712:	4682      	mov	sl, r0
 8008714:	2800      	cmp	r0, #0
 8008716:	d141      	bne.n	800879c <_dtoa_r+0x2f4>
 8008718:	4b1d      	ldr	r3, [pc, #116]	@ (8008790 <_dtoa_r+0x2e8>)
 800871a:	4602      	mov	r2, r0
 800871c:	f240 11af 	movw	r1, #431	@ 0x1af
 8008720:	e6d9      	b.n	80084d6 <_dtoa_r+0x2e>
 8008722:	2300      	movs	r3, #0
 8008724:	e7e3      	b.n	80086ee <_dtoa_r+0x246>
 8008726:	2300      	movs	r3, #0
 8008728:	e7d5      	b.n	80086d6 <_dtoa_r+0x22e>
 800872a:	2401      	movs	r4, #1
 800872c:	2300      	movs	r3, #0
 800872e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008730:	9307      	str	r3, [sp, #28]
 8008732:	f04f 3bff 	mov.w	fp, #4294967295
 8008736:	2200      	movs	r2, #0
 8008738:	2312      	movs	r3, #18
 800873a:	f8cd b00c 	str.w	fp, [sp, #12]
 800873e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008740:	e7db      	b.n	80086fa <_dtoa_r+0x252>
 8008742:	2301      	movs	r3, #1
 8008744:	9309      	str	r3, [sp, #36]	@ 0x24
 8008746:	e7f4      	b.n	8008732 <_dtoa_r+0x28a>
 8008748:	f04f 0b01 	mov.w	fp, #1
 800874c:	465b      	mov	r3, fp
 800874e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008752:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008756:	e7d0      	b.n	80086fa <_dtoa_r+0x252>
 8008758:	3101      	adds	r1, #1
 800875a:	0052      	lsls	r2, r2, #1
 800875c:	e7d1      	b.n	8008702 <_dtoa_r+0x25a>
 800875e:	bf00      	nop
 8008760:	636f4361 	.word	0x636f4361
 8008764:	3fd287a7 	.word	0x3fd287a7
 8008768:	8b60c8b3 	.word	0x8b60c8b3
 800876c:	3fc68a28 	.word	0x3fc68a28
 8008770:	509f79fb 	.word	0x509f79fb
 8008774:	3fd34413 	.word	0x3fd34413
 8008778:	0800bb7a 	.word	0x0800bb7a
 800877c:	0800bb91 	.word	0x0800bb91
 8008780:	7ff00000 	.word	0x7ff00000
 8008784:	0800bb45 	.word	0x0800bb45
 8008788:	3ff80000 	.word	0x3ff80000
 800878c:	0800bd40 	.word	0x0800bd40
 8008790:	0800bbe9 	.word	0x0800bbe9
 8008794:	0800bb76 	.word	0x0800bb76
 8008798:	0800bb44 	.word	0x0800bb44
 800879c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80087a0:	6018      	str	r0, [r3, #0]
 80087a2:	9b03      	ldr	r3, [sp, #12]
 80087a4:	2b0e      	cmp	r3, #14
 80087a6:	f200 80a1 	bhi.w	80088ec <_dtoa_r+0x444>
 80087aa:	2c00      	cmp	r4, #0
 80087ac:	f000 809e 	beq.w	80088ec <_dtoa_r+0x444>
 80087b0:	2f00      	cmp	r7, #0
 80087b2:	dd33      	ble.n	800881c <_dtoa_r+0x374>
 80087b4:	f007 020f 	and.w	r2, r7, #15
 80087b8:	4b9b      	ldr	r3, [pc, #620]	@ (8008a28 <_dtoa_r+0x580>)
 80087ba:	05f8      	lsls	r0, r7, #23
 80087bc:	ea4f 1427 	mov.w	r4, r7, asr #4
 80087c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087c4:	ed93 7b00 	vldr	d7, [r3]
 80087c8:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80087cc:	d516      	bpl.n	80087fc <_dtoa_r+0x354>
 80087ce:	4b97      	ldr	r3, [pc, #604]	@ (8008a2c <_dtoa_r+0x584>)
 80087d0:	f004 040f 	and.w	r4, r4, #15
 80087d4:	2603      	movs	r6, #3
 80087d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80087de:	f7f8 f819 	bl	8000814 <__aeabi_ddiv>
 80087e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087e6:	4d91      	ldr	r5, [pc, #580]	@ (8008a2c <_dtoa_r+0x584>)
 80087e8:	b954      	cbnz	r4, 8008800 <_dtoa_r+0x358>
 80087ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80087ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087f2:	f7f8 f80f 	bl	8000814 <__aeabi_ddiv>
 80087f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087fa:	e028      	b.n	800884e <_dtoa_r+0x3a6>
 80087fc:	2602      	movs	r6, #2
 80087fe:	e7f2      	b.n	80087e6 <_dtoa_r+0x33e>
 8008800:	07e1      	lsls	r1, r4, #31
 8008802:	d508      	bpl.n	8008816 <_dtoa_r+0x36e>
 8008804:	3601      	adds	r6, #1
 8008806:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800880a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800880e:	f7f7 fed7 	bl	80005c0 <__aeabi_dmul>
 8008812:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008816:	1064      	asrs	r4, r4, #1
 8008818:	3508      	adds	r5, #8
 800881a:	e7e5      	b.n	80087e8 <_dtoa_r+0x340>
 800881c:	f000 80af 	beq.w	800897e <_dtoa_r+0x4d6>
 8008820:	427c      	negs	r4, r7
 8008822:	4b81      	ldr	r3, [pc, #516]	@ (8008a28 <_dtoa_r+0x580>)
 8008824:	4d81      	ldr	r5, [pc, #516]	@ (8008a2c <_dtoa_r+0x584>)
 8008826:	2602      	movs	r6, #2
 8008828:	f004 020f 	and.w	r2, r4, #15
 800882c:	1124      	asrs	r4, r4, #4
 800882e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008832:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f7f7 fec1 	bl	80005c0 <__aeabi_dmul>
 800883e:	2300      	movs	r3, #0
 8008840:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008844:	2c00      	cmp	r4, #0
 8008846:	f040 808f 	bne.w	8008968 <_dtoa_r+0x4c0>
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1d3      	bne.n	80087f6 <_dtoa_r+0x34e>
 800884e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008850:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 8094 	beq.w	8008982 <_dtoa_r+0x4da>
 800885a:	2200      	movs	r2, #0
 800885c:	4b74      	ldr	r3, [pc, #464]	@ (8008a30 <_dtoa_r+0x588>)
 800885e:	4620      	mov	r0, r4
 8008860:	4629      	mov	r1, r5
 8008862:	f7f8 f91f 	bl	8000aa4 <__aeabi_dcmplt>
 8008866:	2800      	cmp	r0, #0
 8008868:	f000 808b 	beq.w	8008982 <_dtoa_r+0x4da>
 800886c:	9b03      	ldr	r3, [sp, #12]
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 8087 	beq.w	8008982 <_dtoa_r+0x4da>
 8008874:	f1bb 0f00 	cmp.w	fp, #0
 8008878:	dd34      	ble.n	80088e4 <_dtoa_r+0x43c>
 800887a:	4620      	mov	r0, r4
 800887c:	f107 38ff 	add.w	r8, r7, #4294967295
 8008880:	3601      	adds	r6, #1
 8008882:	465c      	mov	r4, fp
 8008884:	2200      	movs	r2, #0
 8008886:	4b6b      	ldr	r3, [pc, #428]	@ (8008a34 <_dtoa_r+0x58c>)
 8008888:	4629      	mov	r1, r5
 800888a:	f7f7 fe99 	bl	80005c0 <__aeabi_dmul>
 800888e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008892:	4630      	mov	r0, r6
 8008894:	f7f7 fe2a 	bl	80004ec <__aeabi_i2d>
 8008898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800889c:	f7f7 fe90 	bl	80005c0 <__aeabi_dmul>
 80088a0:	2200      	movs	r2, #0
 80088a2:	4b65      	ldr	r3, [pc, #404]	@ (8008a38 <_dtoa_r+0x590>)
 80088a4:	f7f7 fcd6 	bl	8000254 <__adddf3>
 80088a8:	4605      	mov	r5, r0
 80088aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80088ae:	2c00      	cmp	r4, #0
 80088b0:	d16a      	bne.n	8008988 <_dtoa_r+0x4e0>
 80088b2:	2200      	movs	r2, #0
 80088b4:	4b61      	ldr	r3, [pc, #388]	@ (8008a3c <_dtoa_r+0x594>)
 80088b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088ba:	f7f7 fcc9 	bl	8000250 <__aeabi_dsub>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088c6:	462a      	mov	r2, r5
 80088c8:	4633      	mov	r3, r6
 80088ca:	f7f8 f909 	bl	8000ae0 <__aeabi_dcmpgt>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	f040 8298 	bne.w	8008e04 <_dtoa_r+0x95c>
 80088d4:	462a      	mov	r2, r5
 80088d6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80088da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088de:	f7f8 f8e1 	bl	8000aa4 <__aeabi_dcmplt>
 80088e2:	bb38      	cbnz	r0, 8008934 <_dtoa_r+0x48c>
 80088e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80088e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80088ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f2c0 8157 	blt.w	8008ba2 <_dtoa_r+0x6fa>
 80088f4:	2f0e      	cmp	r7, #14
 80088f6:	f300 8154 	bgt.w	8008ba2 <_dtoa_r+0x6fa>
 80088fa:	4b4b      	ldr	r3, [pc, #300]	@ (8008a28 <_dtoa_r+0x580>)
 80088fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008900:	ed93 7b00 	vldr	d7, [r3]
 8008904:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008906:	2b00      	cmp	r3, #0
 8008908:	ed8d 7b00 	vstr	d7, [sp]
 800890c:	f280 80e5 	bge.w	8008ada <_dtoa_r+0x632>
 8008910:	9b03      	ldr	r3, [sp, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	f300 80e1 	bgt.w	8008ada <_dtoa_r+0x632>
 8008918:	d10c      	bne.n	8008934 <_dtoa_r+0x48c>
 800891a:	2200      	movs	r2, #0
 800891c:	4b47      	ldr	r3, [pc, #284]	@ (8008a3c <_dtoa_r+0x594>)
 800891e:	ec51 0b17 	vmov	r0, r1, d7
 8008922:	f7f7 fe4d 	bl	80005c0 <__aeabi_dmul>
 8008926:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800892a:	f7f8 f8cf 	bl	8000acc <__aeabi_dcmpge>
 800892e:	2800      	cmp	r0, #0
 8008930:	f000 8266 	beq.w	8008e00 <_dtoa_r+0x958>
 8008934:	2400      	movs	r4, #0
 8008936:	4625      	mov	r5, r4
 8008938:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800893a:	4656      	mov	r6, sl
 800893c:	ea6f 0803 	mvn.w	r8, r3
 8008940:	2700      	movs	r7, #0
 8008942:	4621      	mov	r1, r4
 8008944:	4648      	mov	r0, r9
 8008946:	f000 fcc1 	bl	80092cc <_Bfree>
 800894a:	2d00      	cmp	r5, #0
 800894c:	f000 80bd 	beq.w	8008aca <_dtoa_r+0x622>
 8008950:	b12f      	cbz	r7, 800895e <_dtoa_r+0x4b6>
 8008952:	42af      	cmp	r7, r5
 8008954:	d003      	beq.n	800895e <_dtoa_r+0x4b6>
 8008956:	4639      	mov	r1, r7
 8008958:	4648      	mov	r0, r9
 800895a:	f000 fcb7 	bl	80092cc <_Bfree>
 800895e:	4629      	mov	r1, r5
 8008960:	4648      	mov	r0, r9
 8008962:	f000 fcb3 	bl	80092cc <_Bfree>
 8008966:	e0b0      	b.n	8008aca <_dtoa_r+0x622>
 8008968:	07e2      	lsls	r2, r4, #31
 800896a:	d505      	bpl.n	8008978 <_dtoa_r+0x4d0>
 800896c:	3601      	adds	r6, #1
 800896e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008972:	f7f7 fe25 	bl	80005c0 <__aeabi_dmul>
 8008976:	2301      	movs	r3, #1
 8008978:	1064      	asrs	r4, r4, #1
 800897a:	3508      	adds	r5, #8
 800897c:	e762      	b.n	8008844 <_dtoa_r+0x39c>
 800897e:	2602      	movs	r6, #2
 8008980:	e765      	b.n	800884e <_dtoa_r+0x3a6>
 8008982:	46b8      	mov	r8, r7
 8008984:	9c03      	ldr	r4, [sp, #12]
 8008986:	e784      	b.n	8008892 <_dtoa_r+0x3ea>
 8008988:	4b27      	ldr	r3, [pc, #156]	@ (8008a28 <_dtoa_r+0x580>)
 800898a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800898c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008990:	4454      	add	r4, sl
 8008992:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008996:	2900      	cmp	r1, #0
 8008998:	d054      	beq.n	8008a44 <_dtoa_r+0x59c>
 800899a:	2000      	movs	r0, #0
 800899c:	4928      	ldr	r1, [pc, #160]	@ (8008a40 <_dtoa_r+0x598>)
 800899e:	f7f7 ff39 	bl	8000814 <__aeabi_ddiv>
 80089a2:	4633      	mov	r3, r6
 80089a4:	4656      	mov	r6, sl
 80089a6:	462a      	mov	r2, r5
 80089a8:	f7f7 fc52 	bl	8000250 <__aeabi_dsub>
 80089ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80089b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089b4:	f7f8 f8b4 	bl	8000b20 <__aeabi_d2iz>
 80089b8:	4605      	mov	r5, r0
 80089ba:	f7f7 fd97 	bl	80004ec <__aeabi_i2d>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	3530      	adds	r5, #48	@ 0x30
 80089c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089c8:	f7f7 fc42 	bl	8000250 <__aeabi_dsub>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	f806 5b01 	strb.w	r5, [r6], #1
 80089d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80089dc:	f7f8 f862 	bl	8000aa4 <__aeabi_dcmplt>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d172      	bne.n	8008aca <_dtoa_r+0x622>
 80089e4:	2000      	movs	r0, #0
 80089e6:	4912      	ldr	r1, [pc, #72]	@ (8008a30 <_dtoa_r+0x588>)
 80089e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089ec:	f7f7 fc30 	bl	8000250 <__aeabi_dsub>
 80089f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80089f4:	f7f8 f856 	bl	8000aa4 <__aeabi_dcmplt>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	f040 80b4 	bne.w	8008b66 <_dtoa_r+0x6be>
 80089fe:	42a6      	cmp	r6, r4
 8008a00:	f43f af70 	beq.w	80088e4 <_dtoa_r+0x43c>
 8008a04:	2200      	movs	r2, #0
 8008a06:	4b0b      	ldr	r3, [pc, #44]	@ (8008a34 <_dtoa_r+0x58c>)
 8008a08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008a0c:	f7f7 fdd8 	bl	80005c0 <__aeabi_dmul>
 8008a10:	2200      	movs	r2, #0
 8008a12:	4b08      	ldr	r3, [pc, #32]	@ (8008a34 <_dtoa_r+0x58c>)
 8008a14:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a1c:	f7f7 fdd0 	bl	80005c0 <__aeabi_dmul>
 8008a20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a24:	e7c4      	b.n	80089b0 <_dtoa_r+0x508>
 8008a26:	bf00      	nop
 8008a28:	0800bd40 	.word	0x0800bd40
 8008a2c:	0800bd18 	.word	0x0800bd18
 8008a30:	3ff00000 	.word	0x3ff00000
 8008a34:	40240000 	.word	0x40240000
 8008a38:	401c0000 	.word	0x401c0000
 8008a3c:	40140000 	.word	0x40140000
 8008a40:	3fe00000 	.word	0x3fe00000
 8008a44:	4631      	mov	r1, r6
 8008a46:	4656      	mov	r6, sl
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f7f7 fdb9 	bl	80005c0 <__aeabi_dmul>
 8008a4e:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008a50:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a58:	f7f8 f862 	bl	8000b20 <__aeabi_d2iz>
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	f7f7 fd45 	bl	80004ec <__aeabi_i2d>
 8008a62:	4602      	mov	r2, r0
 8008a64:	3530      	adds	r5, #48	@ 0x30
 8008a66:	460b      	mov	r3, r1
 8008a68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a6c:	f7f7 fbf0 	bl	8000250 <__aeabi_dsub>
 8008a70:	f806 5b01 	strb.w	r5, [r6], #1
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	42a6      	cmp	r6, r4
 8008a7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a7e:	f04f 0200 	mov.w	r2, #0
 8008a82:	d124      	bne.n	8008ace <_dtoa_r+0x626>
 8008a84:	4baf      	ldr	r3, [pc, #700]	@ (8008d44 <_dtoa_r+0x89c>)
 8008a86:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008a8a:	f7f7 fbe3 	bl	8000254 <__adddf3>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a96:	f7f8 f823 	bl	8000ae0 <__aeabi_dcmpgt>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d163      	bne.n	8008b66 <_dtoa_r+0x6be>
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	49a8      	ldr	r1, [pc, #672]	@ (8008d44 <_dtoa_r+0x89c>)
 8008aa2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008aa6:	f7f7 fbd3 	bl	8000250 <__aeabi_dsub>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ab2:	f7f7 fff7 	bl	8000aa4 <__aeabi_dcmplt>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	f43f af14 	beq.w	80088e4 <_dtoa_r+0x43c>
 8008abc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008abe:	1e73      	subs	r3, r6, #1
 8008ac0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ac2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ac6:	2b30      	cmp	r3, #48	@ 0x30
 8008ac8:	d0f8      	beq.n	8008abc <_dtoa_r+0x614>
 8008aca:	4647      	mov	r7, r8
 8008acc:	e03b      	b.n	8008b46 <_dtoa_r+0x69e>
 8008ace:	4b9e      	ldr	r3, [pc, #632]	@ (8008d48 <_dtoa_r+0x8a0>)
 8008ad0:	f7f7 fd76 	bl	80005c0 <__aeabi_dmul>
 8008ad4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ad8:	e7bc      	b.n	8008a54 <_dtoa_r+0x5ac>
 8008ada:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008ade:	4656      	mov	r6, sl
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ae8:	f7f7 fe94 	bl	8000814 <__aeabi_ddiv>
 8008aec:	f7f8 f818 	bl	8000b20 <__aeabi_d2iz>
 8008af0:	4680      	mov	r8, r0
 8008af2:	f7f7 fcfb 	bl	80004ec <__aeabi_i2d>
 8008af6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008afa:	f7f7 fd61 	bl	80005c0 <__aeabi_dmul>
 8008afe:	4602      	mov	r2, r0
 8008b00:	4620      	mov	r0, r4
 8008b02:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008b06:	460b      	mov	r3, r1
 8008b08:	4629      	mov	r1, r5
 8008b0a:	f7f7 fba1 	bl	8000250 <__aeabi_dsub>
 8008b0e:	9d03      	ldr	r5, [sp, #12]
 8008b10:	f806 4b01 	strb.w	r4, [r6], #1
 8008b14:	eba6 040a 	sub.w	r4, r6, sl
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	42a5      	cmp	r5, r4
 8008b1e:	d133      	bne.n	8008b88 <_dtoa_r+0x6e0>
 8008b20:	f7f7 fb98 	bl	8000254 <__adddf3>
 8008b24:	4604      	mov	r4, r0
 8008b26:	460d      	mov	r5, r1
 8008b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b2c:	f7f7 ffd8 	bl	8000ae0 <__aeabi_dcmpgt>
 8008b30:	b9c0      	cbnz	r0, 8008b64 <_dtoa_r+0x6bc>
 8008b32:	4620      	mov	r0, r4
 8008b34:	4629      	mov	r1, r5
 8008b36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b3a:	f7f7 ffa9 	bl	8000a90 <__aeabi_dcmpeq>
 8008b3e:	b110      	cbz	r0, 8008b46 <_dtoa_r+0x69e>
 8008b40:	f018 0f01 	tst.w	r8, #1
 8008b44:	d10e      	bne.n	8008b64 <_dtoa_r+0x6bc>
 8008b46:	9902      	ldr	r1, [sp, #8]
 8008b48:	4648      	mov	r0, r9
 8008b4a:	f000 fbbf 	bl	80092cc <_Bfree>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	3701      	adds	r7, #1
 8008b52:	7033      	strb	r3, [r6, #0]
 8008b54:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008b56:	601f      	str	r7, [r3, #0]
 8008b58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 824c 	beq.w	8008ff8 <_dtoa_r+0xb50>
 8008b60:	601e      	str	r6, [r3, #0]
 8008b62:	e249      	b.n	8008ff8 <_dtoa_r+0xb50>
 8008b64:	46b8      	mov	r8, r7
 8008b66:	4633      	mov	r3, r6
 8008b68:	461e      	mov	r6, r3
 8008b6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b6e:	2a39      	cmp	r2, #57	@ 0x39
 8008b70:	d106      	bne.n	8008b80 <_dtoa_r+0x6d8>
 8008b72:	459a      	cmp	sl, r3
 8008b74:	d1f8      	bne.n	8008b68 <_dtoa_r+0x6c0>
 8008b76:	2230      	movs	r2, #48	@ 0x30
 8008b78:	f108 0801 	add.w	r8, r8, #1
 8008b7c:	f88a 2000 	strb.w	r2, [sl]
 8008b80:	781a      	ldrb	r2, [r3, #0]
 8008b82:	3201      	adds	r2, #1
 8008b84:	701a      	strb	r2, [r3, #0]
 8008b86:	e7a0      	b.n	8008aca <_dtoa_r+0x622>
 8008b88:	2200      	movs	r2, #0
 8008b8a:	4b6f      	ldr	r3, [pc, #444]	@ (8008d48 <_dtoa_r+0x8a0>)
 8008b8c:	f7f7 fd18 	bl	80005c0 <__aeabi_dmul>
 8008b90:	2200      	movs	r2, #0
 8008b92:	2300      	movs	r3, #0
 8008b94:	4604      	mov	r4, r0
 8008b96:	460d      	mov	r5, r1
 8008b98:	f7f7 ff7a 	bl	8000a90 <__aeabi_dcmpeq>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d09f      	beq.n	8008ae0 <_dtoa_r+0x638>
 8008ba0:	e7d1      	b.n	8008b46 <_dtoa_r+0x69e>
 8008ba2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ba4:	2a00      	cmp	r2, #0
 8008ba6:	f000 80ea 	beq.w	8008d7e <_dtoa_r+0x8d6>
 8008baa:	9a07      	ldr	r2, [sp, #28]
 8008bac:	2a01      	cmp	r2, #1
 8008bae:	f300 80cd 	bgt.w	8008d4c <_dtoa_r+0x8a4>
 8008bb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008bb4:	2a00      	cmp	r2, #0
 8008bb6:	f000 80c1 	beq.w	8008d3c <_dtoa_r+0x894>
 8008bba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008bbe:	9c08      	ldr	r4, [sp, #32]
 8008bc0:	9e00      	ldr	r6, [sp, #0]
 8008bc2:	9a00      	ldr	r2, [sp, #0]
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	4648      	mov	r0, r9
 8008bc8:	441a      	add	r2, r3
 8008bca:	9200      	str	r2, [sp, #0]
 8008bcc:	9a06      	ldr	r2, [sp, #24]
 8008bce:	441a      	add	r2, r3
 8008bd0:	9206      	str	r2, [sp, #24]
 8008bd2:	f000 fc7b 	bl	80094cc <__i2b>
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	b166      	cbz	r6, 8008bf4 <_dtoa_r+0x74c>
 8008bda:	9b06      	ldr	r3, [sp, #24]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	dd09      	ble.n	8008bf4 <_dtoa_r+0x74c>
 8008be0:	42b3      	cmp	r3, r6
 8008be2:	9a00      	ldr	r2, [sp, #0]
 8008be4:	bfa8      	it	ge
 8008be6:	4633      	movge	r3, r6
 8008be8:	1ad2      	subs	r2, r2, r3
 8008bea:	1af6      	subs	r6, r6, r3
 8008bec:	9200      	str	r2, [sp, #0]
 8008bee:	9a06      	ldr	r2, [sp, #24]
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	9306      	str	r3, [sp, #24]
 8008bf4:	9b08      	ldr	r3, [sp, #32]
 8008bf6:	b30b      	cbz	r3, 8008c3c <_dtoa_r+0x794>
 8008bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 80c6 	beq.w	8008d8c <_dtoa_r+0x8e4>
 8008c00:	2c00      	cmp	r4, #0
 8008c02:	f000 80c0 	beq.w	8008d86 <_dtoa_r+0x8de>
 8008c06:	4629      	mov	r1, r5
 8008c08:	4622      	mov	r2, r4
 8008c0a:	4648      	mov	r0, r9
 8008c0c:	f000 fd18 	bl	8009640 <__pow5mult>
 8008c10:	9a02      	ldr	r2, [sp, #8]
 8008c12:	4601      	mov	r1, r0
 8008c14:	4605      	mov	r5, r0
 8008c16:	4648      	mov	r0, r9
 8008c18:	f000 fc6e 	bl	80094f8 <__multiply>
 8008c1c:	9902      	ldr	r1, [sp, #8]
 8008c1e:	4680      	mov	r8, r0
 8008c20:	4648      	mov	r0, r9
 8008c22:	f000 fb53 	bl	80092cc <_Bfree>
 8008c26:	9b08      	ldr	r3, [sp, #32]
 8008c28:	1b1b      	subs	r3, r3, r4
 8008c2a:	9308      	str	r3, [sp, #32]
 8008c2c:	f000 80b1 	beq.w	8008d92 <_dtoa_r+0x8ea>
 8008c30:	9a08      	ldr	r2, [sp, #32]
 8008c32:	4641      	mov	r1, r8
 8008c34:	4648      	mov	r0, r9
 8008c36:	f000 fd03 	bl	8009640 <__pow5mult>
 8008c3a:	9002      	str	r0, [sp, #8]
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	4648      	mov	r0, r9
 8008c40:	f000 fc44 	bl	80094cc <__i2b>
 8008c44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c46:	4604      	mov	r4, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 81d9 	beq.w	8009000 <_dtoa_r+0xb58>
 8008c4e:	461a      	mov	r2, r3
 8008c50:	4601      	mov	r1, r0
 8008c52:	4648      	mov	r0, r9
 8008c54:	f000 fcf4 	bl	8009640 <__pow5mult>
 8008c58:	9b07      	ldr	r3, [sp, #28]
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	f300 809f 	bgt.w	8008da0 <_dtoa_r+0x8f8>
 8008c62:	9b04      	ldr	r3, [sp, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f040 8097 	bne.w	8008d98 <_dtoa_r+0x8f0>
 8008c6a:	9b05      	ldr	r3, [sp, #20]
 8008c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f040 8093 	bne.w	8008d9c <_dtoa_r+0x8f4>
 8008c76:	9b05      	ldr	r3, [sp, #20]
 8008c78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c7c:	0d1b      	lsrs	r3, r3, #20
 8008c7e:	051b      	lsls	r3, r3, #20
 8008c80:	b133      	cbz	r3, 8008c90 <_dtoa_r+0x7e8>
 8008c82:	9b00      	ldr	r3, [sp, #0]
 8008c84:	3301      	adds	r3, #1
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	9b06      	ldr	r3, [sp, #24]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	9306      	str	r3, [sp, #24]
 8008c8e:	2301      	movs	r3, #1
 8008c90:	9308      	str	r3, [sp, #32]
 8008c92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 81b9 	beq.w	800900c <_dtoa_r+0xb64>
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ca0:	6918      	ldr	r0, [r3, #16]
 8008ca2:	f000 fbc7 	bl	8009434 <__hi0bits>
 8008ca6:	f1c0 0020 	rsb	r0, r0, #32
 8008caa:	9b06      	ldr	r3, [sp, #24]
 8008cac:	4418      	add	r0, r3
 8008cae:	f010 001f 	ands.w	r0, r0, #31
 8008cb2:	f000 8082 	beq.w	8008dba <_dtoa_r+0x912>
 8008cb6:	f1c0 0320 	rsb	r3, r0, #32
 8008cba:	2b04      	cmp	r3, #4
 8008cbc:	dd73      	ble.n	8008da6 <_dtoa_r+0x8fe>
 8008cbe:	f1c0 001c 	rsb	r0, r0, #28
 8008cc2:	9b00      	ldr	r3, [sp, #0]
 8008cc4:	4403      	add	r3, r0
 8008cc6:	4406      	add	r6, r0
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	9b06      	ldr	r3, [sp, #24]
 8008ccc:	4403      	add	r3, r0
 8008cce:	9306      	str	r3, [sp, #24]
 8008cd0:	9b00      	ldr	r3, [sp, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	dd05      	ble.n	8008ce2 <_dtoa_r+0x83a>
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	9902      	ldr	r1, [sp, #8]
 8008cda:	4648      	mov	r0, r9
 8008cdc:	f000 fd0a 	bl	80096f4 <__lshift>
 8008ce0:	9002      	str	r0, [sp, #8]
 8008ce2:	9b06      	ldr	r3, [sp, #24]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	dd05      	ble.n	8008cf4 <_dtoa_r+0x84c>
 8008ce8:	4621      	mov	r1, r4
 8008cea:	461a      	mov	r2, r3
 8008cec:	4648      	mov	r0, r9
 8008cee:	f000 fd01 	bl	80096f4 <__lshift>
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d061      	beq.n	8008dbe <_dtoa_r+0x916>
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	9802      	ldr	r0, [sp, #8]
 8008cfe:	f000 fd65 	bl	80097cc <__mcmp>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	da5b      	bge.n	8008dbe <_dtoa_r+0x916>
 8008d06:	2300      	movs	r3, #0
 8008d08:	220a      	movs	r2, #10
 8008d0a:	9902      	ldr	r1, [sp, #8]
 8008d0c:	4648      	mov	r0, r9
 8008d0e:	f000 faff 	bl	8009310 <__multadd>
 8008d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d14:	f107 38ff 	add.w	r8, r7, #4294967295
 8008d18:	9002      	str	r0, [sp, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 8178 	beq.w	8009010 <_dtoa_r+0xb68>
 8008d20:	4629      	mov	r1, r5
 8008d22:	2300      	movs	r3, #0
 8008d24:	220a      	movs	r2, #10
 8008d26:	4648      	mov	r0, r9
 8008d28:	f000 faf2 	bl	8009310 <__multadd>
 8008d2c:	f1bb 0f00 	cmp.w	fp, #0
 8008d30:	4605      	mov	r5, r0
 8008d32:	dc6f      	bgt.n	8008e14 <_dtoa_r+0x96c>
 8008d34:	9b07      	ldr	r3, [sp, #28]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	dc49      	bgt.n	8008dce <_dtoa_r+0x926>
 8008d3a:	e06b      	b.n	8008e14 <_dtoa_r+0x96c>
 8008d3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008d3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008d42:	e73c      	b.n	8008bbe <_dtoa_r+0x716>
 8008d44:	3fe00000 	.word	0x3fe00000
 8008d48:	40240000 	.word	0x40240000
 8008d4c:	9b03      	ldr	r3, [sp, #12]
 8008d4e:	1e5c      	subs	r4, r3, #1
 8008d50:	9b08      	ldr	r3, [sp, #32]
 8008d52:	42a3      	cmp	r3, r4
 8008d54:	db09      	blt.n	8008d6a <_dtoa_r+0x8c2>
 8008d56:	1b1c      	subs	r4, r3, r4
 8008d58:	9b03      	ldr	r3, [sp, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f6bf af30 	bge.w	8008bc0 <_dtoa_r+0x718>
 8008d60:	9b00      	ldr	r3, [sp, #0]
 8008d62:	9a03      	ldr	r2, [sp, #12]
 8008d64:	1a9e      	subs	r6, r3, r2
 8008d66:	2300      	movs	r3, #0
 8008d68:	e72b      	b.n	8008bc2 <_dtoa_r+0x71a>
 8008d6a:	9b08      	ldr	r3, [sp, #32]
 8008d6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d6e:	1ae3      	subs	r3, r4, r3
 8008d70:	9408      	str	r4, [sp, #32]
 8008d72:	9e00      	ldr	r6, [sp, #0]
 8008d74:	2400      	movs	r4, #0
 8008d76:	441a      	add	r2, r3
 8008d78:	9b03      	ldr	r3, [sp, #12]
 8008d7a:	920d      	str	r2, [sp, #52]	@ 0x34
 8008d7c:	e721      	b.n	8008bc2 <_dtoa_r+0x71a>
 8008d7e:	9c08      	ldr	r4, [sp, #32]
 8008d80:	9e00      	ldr	r6, [sp, #0]
 8008d82:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008d84:	e728      	b.n	8008bd8 <_dtoa_r+0x730>
 8008d86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008d8a:	e751      	b.n	8008c30 <_dtoa_r+0x788>
 8008d8c:	9a08      	ldr	r2, [sp, #32]
 8008d8e:	9902      	ldr	r1, [sp, #8]
 8008d90:	e750      	b.n	8008c34 <_dtoa_r+0x78c>
 8008d92:	f8cd 8008 	str.w	r8, [sp, #8]
 8008d96:	e751      	b.n	8008c3c <_dtoa_r+0x794>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	e779      	b.n	8008c90 <_dtoa_r+0x7e8>
 8008d9c:	9b04      	ldr	r3, [sp, #16]
 8008d9e:	e777      	b.n	8008c90 <_dtoa_r+0x7e8>
 8008da0:	2300      	movs	r3, #0
 8008da2:	9308      	str	r3, [sp, #32]
 8008da4:	e779      	b.n	8008c9a <_dtoa_r+0x7f2>
 8008da6:	d093      	beq.n	8008cd0 <_dtoa_r+0x828>
 8008da8:	331c      	adds	r3, #28
 8008daa:	9a00      	ldr	r2, [sp, #0]
 8008dac:	441a      	add	r2, r3
 8008dae:	441e      	add	r6, r3
 8008db0:	9200      	str	r2, [sp, #0]
 8008db2:	9a06      	ldr	r2, [sp, #24]
 8008db4:	441a      	add	r2, r3
 8008db6:	9206      	str	r2, [sp, #24]
 8008db8:	e78a      	b.n	8008cd0 <_dtoa_r+0x828>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	e7f4      	b.n	8008da8 <_dtoa_r+0x900>
 8008dbe:	9b03      	ldr	r3, [sp, #12]
 8008dc0:	46b8      	mov	r8, r7
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	dc20      	bgt.n	8008e08 <_dtoa_r+0x960>
 8008dc6:	469b      	mov	fp, r3
 8008dc8:	9b07      	ldr	r3, [sp, #28]
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	dd1e      	ble.n	8008e0c <_dtoa_r+0x964>
 8008dce:	f1bb 0f00 	cmp.w	fp, #0
 8008dd2:	f47f adb1 	bne.w	8008938 <_dtoa_r+0x490>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	465b      	mov	r3, fp
 8008dda:	2205      	movs	r2, #5
 8008ddc:	4648      	mov	r0, r9
 8008dde:	f000 fa97 	bl	8009310 <__multadd>
 8008de2:	4601      	mov	r1, r0
 8008de4:	4604      	mov	r4, r0
 8008de6:	9802      	ldr	r0, [sp, #8]
 8008de8:	f000 fcf0 	bl	80097cc <__mcmp>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	f77f ada3 	ble.w	8008938 <_dtoa_r+0x490>
 8008df2:	4656      	mov	r6, sl
 8008df4:	2331      	movs	r3, #49	@ 0x31
 8008df6:	f108 0801 	add.w	r8, r8, #1
 8008dfa:	f806 3b01 	strb.w	r3, [r6], #1
 8008dfe:	e59f      	b.n	8008940 <_dtoa_r+0x498>
 8008e00:	46b8      	mov	r8, r7
 8008e02:	9c03      	ldr	r4, [sp, #12]
 8008e04:	4625      	mov	r5, r4
 8008e06:	e7f4      	b.n	8008df2 <_dtoa_r+0x94a>
 8008e08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f000 8102 	beq.w	8009018 <_dtoa_r+0xb70>
 8008e14:	2e00      	cmp	r6, #0
 8008e16:	dd05      	ble.n	8008e24 <_dtoa_r+0x97c>
 8008e18:	4629      	mov	r1, r5
 8008e1a:	4632      	mov	r2, r6
 8008e1c:	4648      	mov	r0, r9
 8008e1e:	f000 fc69 	bl	80096f4 <__lshift>
 8008e22:	4605      	mov	r5, r0
 8008e24:	9b08      	ldr	r3, [sp, #32]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d05c      	beq.n	8008ee4 <_dtoa_r+0xa3c>
 8008e2a:	6869      	ldr	r1, [r5, #4]
 8008e2c:	4648      	mov	r0, r9
 8008e2e:	f000 fa0d 	bl	800924c <_Balloc>
 8008e32:	4606      	mov	r6, r0
 8008e34:	b928      	cbnz	r0, 8008e42 <_dtoa_r+0x99a>
 8008e36:	4b83      	ldr	r3, [pc, #524]	@ (8009044 <_dtoa_r+0xb9c>)
 8008e38:	4602      	mov	r2, r0
 8008e3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008e3e:	f7ff bb4a 	b.w	80084d6 <_dtoa_r+0x2e>
 8008e42:	692a      	ldr	r2, [r5, #16]
 8008e44:	f105 010c 	add.w	r1, r5, #12
 8008e48:	300c      	adds	r0, #12
 8008e4a:	3202      	adds	r2, #2
 8008e4c:	0092      	lsls	r2, r2, #2
 8008e4e:	f001 ff79 	bl	800ad44 <memcpy>
 8008e52:	2201      	movs	r2, #1
 8008e54:	4631      	mov	r1, r6
 8008e56:	4648      	mov	r0, r9
 8008e58:	f000 fc4c 	bl	80096f4 <__lshift>
 8008e5c:	f10a 0301 	add.w	r3, sl, #1
 8008e60:	462f      	mov	r7, r5
 8008e62:	4605      	mov	r5, r0
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	eb0a 030b 	add.w	r3, sl, fp
 8008e6a:	9308      	str	r3, [sp, #32]
 8008e6c:	9b04      	ldr	r3, [sp, #16]
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	9306      	str	r3, [sp, #24]
 8008e74:	9b00      	ldr	r3, [sp, #0]
 8008e76:	4621      	mov	r1, r4
 8008e78:	9802      	ldr	r0, [sp, #8]
 8008e7a:	f103 3bff 	add.w	fp, r3, #4294967295
 8008e7e:	f7ff fa83 	bl	8008388 <quorem>
 8008e82:	4603      	mov	r3, r0
 8008e84:	4639      	mov	r1, r7
 8008e86:	9003      	str	r0, [sp, #12]
 8008e88:	3330      	adds	r3, #48	@ 0x30
 8008e8a:	9802      	ldr	r0, [sp, #8]
 8008e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e8e:	f000 fc9d 	bl	80097cc <__mcmp>
 8008e92:	462a      	mov	r2, r5
 8008e94:	9004      	str	r0, [sp, #16]
 8008e96:	4621      	mov	r1, r4
 8008e98:	4648      	mov	r0, r9
 8008e9a:	f000 fcb3 	bl	8009804 <__mdiff>
 8008e9e:	68c2      	ldr	r2, [r0, #12]
 8008ea0:	4606      	mov	r6, r0
 8008ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea4:	bb02      	cbnz	r2, 8008ee8 <_dtoa_r+0xa40>
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	9802      	ldr	r0, [sp, #8]
 8008eaa:	f000 fc8f 	bl	80097cc <__mcmp>
 8008eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	4631      	mov	r1, r6
 8008eb4:	4648      	mov	r0, r9
 8008eb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008eb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eba:	f000 fa07 	bl	80092cc <_Bfree>
 8008ebe:	9b07      	ldr	r3, [sp, #28]
 8008ec0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008ec2:	9e00      	ldr	r6, [sp, #0]
 8008ec4:	ea42 0103 	orr.w	r1, r2, r3
 8008ec8:	9b06      	ldr	r3, [sp, #24]
 8008eca:	4319      	orrs	r1, r3
 8008ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ece:	d10d      	bne.n	8008eec <_dtoa_r+0xa44>
 8008ed0:	2b39      	cmp	r3, #57	@ 0x39
 8008ed2:	d027      	beq.n	8008f24 <_dtoa_r+0xa7c>
 8008ed4:	9a04      	ldr	r2, [sp, #16]
 8008ed6:	2a00      	cmp	r2, #0
 8008ed8:	dd01      	ble.n	8008ede <_dtoa_r+0xa36>
 8008eda:	9b03      	ldr	r3, [sp, #12]
 8008edc:	3331      	adds	r3, #49	@ 0x31
 8008ede:	f88b 3000 	strb.w	r3, [fp]
 8008ee2:	e52e      	b.n	8008942 <_dtoa_r+0x49a>
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	e7b9      	b.n	8008e5c <_dtoa_r+0x9b4>
 8008ee8:	2201      	movs	r2, #1
 8008eea:	e7e2      	b.n	8008eb2 <_dtoa_r+0xa0a>
 8008eec:	9904      	ldr	r1, [sp, #16]
 8008eee:	2900      	cmp	r1, #0
 8008ef0:	db04      	blt.n	8008efc <_dtoa_r+0xa54>
 8008ef2:	9807      	ldr	r0, [sp, #28]
 8008ef4:	4301      	orrs	r1, r0
 8008ef6:	9806      	ldr	r0, [sp, #24]
 8008ef8:	4301      	orrs	r1, r0
 8008efa:	d120      	bne.n	8008f3e <_dtoa_r+0xa96>
 8008efc:	2a00      	cmp	r2, #0
 8008efe:	ddee      	ble.n	8008ede <_dtoa_r+0xa36>
 8008f00:	2201      	movs	r2, #1
 8008f02:	9902      	ldr	r1, [sp, #8]
 8008f04:	4648      	mov	r0, r9
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	f000 fbf4 	bl	80096f4 <__lshift>
 8008f0c:	4621      	mov	r1, r4
 8008f0e:	9002      	str	r0, [sp, #8]
 8008f10:	f000 fc5c 	bl	80097cc <__mcmp>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	9b00      	ldr	r3, [sp, #0]
 8008f18:	dc02      	bgt.n	8008f20 <_dtoa_r+0xa78>
 8008f1a:	d1e0      	bne.n	8008ede <_dtoa_r+0xa36>
 8008f1c:	07da      	lsls	r2, r3, #31
 8008f1e:	d5de      	bpl.n	8008ede <_dtoa_r+0xa36>
 8008f20:	2b39      	cmp	r3, #57	@ 0x39
 8008f22:	d1da      	bne.n	8008eda <_dtoa_r+0xa32>
 8008f24:	2339      	movs	r3, #57	@ 0x39
 8008f26:	f88b 3000 	strb.w	r3, [fp]
 8008f2a:	4633      	mov	r3, r6
 8008f2c:	461e      	mov	r6, r3
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f34:	2a39      	cmp	r2, #57	@ 0x39
 8008f36:	d04f      	beq.n	8008fd8 <_dtoa_r+0xb30>
 8008f38:	3201      	adds	r2, #1
 8008f3a:	701a      	strb	r2, [r3, #0]
 8008f3c:	e501      	b.n	8008942 <_dtoa_r+0x49a>
 8008f3e:	2a00      	cmp	r2, #0
 8008f40:	dd03      	ble.n	8008f4a <_dtoa_r+0xaa2>
 8008f42:	2b39      	cmp	r3, #57	@ 0x39
 8008f44:	d0ee      	beq.n	8008f24 <_dtoa_r+0xa7c>
 8008f46:	3301      	adds	r3, #1
 8008f48:	e7c9      	b.n	8008ede <_dtoa_r+0xa36>
 8008f4a:	9a00      	ldr	r2, [sp, #0]
 8008f4c:	9908      	ldr	r1, [sp, #32]
 8008f4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008f52:	428a      	cmp	r2, r1
 8008f54:	d029      	beq.n	8008faa <_dtoa_r+0xb02>
 8008f56:	2300      	movs	r3, #0
 8008f58:	220a      	movs	r2, #10
 8008f5a:	9902      	ldr	r1, [sp, #8]
 8008f5c:	4648      	mov	r0, r9
 8008f5e:	f000 f9d7 	bl	8009310 <__multadd>
 8008f62:	42af      	cmp	r7, r5
 8008f64:	9002      	str	r0, [sp, #8]
 8008f66:	f04f 0300 	mov.w	r3, #0
 8008f6a:	f04f 020a 	mov.w	r2, #10
 8008f6e:	4639      	mov	r1, r7
 8008f70:	4648      	mov	r0, r9
 8008f72:	d107      	bne.n	8008f84 <_dtoa_r+0xadc>
 8008f74:	f000 f9cc 	bl	8009310 <__multadd>
 8008f78:	4607      	mov	r7, r0
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	9b00      	ldr	r3, [sp, #0]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	e777      	b.n	8008e74 <_dtoa_r+0x9cc>
 8008f84:	f000 f9c4 	bl	8009310 <__multadd>
 8008f88:	4629      	mov	r1, r5
 8008f8a:	4607      	mov	r7, r0
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	220a      	movs	r2, #10
 8008f90:	4648      	mov	r0, r9
 8008f92:	f000 f9bd 	bl	8009310 <__multadd>
 8008f96:	4605      	mov	r5, r0
 8008f98:	e7f0      	b.n	8008f7c <_dtoa_r+0xad4>
 8008f9a:	f1bb 0f00 	cmp.w	fp, #0
 8008f9e:	f04f 0700 	mov.w	r7, #0
 8008fa2:	bfcc      	ite	gt
 8008fa4:	465e      	movgt	r6, fp
 8008fa6:	2601      	movle	r6, #1
 8008fa8:	4456      	add	r6, sl
 8008faa:	2201      	movs	r2, #1
 8008fac:	9902      	ldr	r1, [sp, #8]
 8008fae:	4648      	mov	r0, r9
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	f000 fb9f 	bl	80096f4 <__lshift>
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	9002      	str	r0, [sp, #8]
 8008fba:	f000 fc07 	bl	80097cc <__mcmp>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	dcb3      	bgt.n	8008f2a <_dtoa_r+0xa82>
 8008fc2:	d102      	bne.n	8008fca <_dtoa_r+0xb22>
 8008fc4:	9b00      	ldr	r3, [sp, #0]
 8008fc6:	07db      	lsls	r3, r3, #31
 8008fc8:	d4af      	bmi.n	8008f2a <_dtoa_r+0xa82>
 8008fca:	4633      	mov	r3, r6
 8008fcc:	461e      	mov	r6, r3
 8008fce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fd2:	2a30      	cmp	r2, #48	@ 0x30
 8008fd4:	d0fa      	beq.n	8008fcc <_dtoa_r+0xb24>
 8008fd6:	e4b4      	b.n	8008942 <_dtoa_r+0x49a>
 8008fd8:	459a      	cmp	sl, r3
 8008fda:	d1a7      	bne.n	8008f2c <_dtoa_r+0xa84>
 8008fdc:	2331      	movs	r3, #49	@ 0x31
 8008fde:	f108 0801 	add.w	r8, r8, #1
 8008fe2:	f88a 3000 	strb.w	r3, [sl]
 8008fe6:	e4ac      	b.n	8008942 <_dtoa_r+0x49a>
 8008fe8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008fea:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009048 <_dtoa_r+0xba0>
 8008fee:	b11b      	cbz	r3, 8008ff8 <_dtoa_r+0xb50>
 8008ff0:	f10a 0308 	add.w	r3, sl, #8
 8008ff4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	4650      	mov	r0, sl
 8008ffa:	b017      	add	sp, #92	@ 0x5c
 8008ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009000:	9b07      	ldr	r3, [sp, #28]
 8009002:	2b01      	cmp	r3, #1
 8009004:	f77f ae2d 	ble.w	8008c62 <_dtoa_r+0x7ba>
 8009008:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800900a:	9308      	str	r3, [sp, #32]
 800900c:	2001      	movs	r0, #1
 800900e:	e64c      	b.n	8008caa <_dtoa_r+0x802>
 8009010:	f1bb 0f00 	cmp.w	fp, #0
 8009014:	f77f aed8 	ble.w	8008dc8 <_dtoa_r+0x920>
 8009018:	4656      	mov	r6, sl
 800901a:	4621      	mov	r1, r4
 800901c:	9802      	ldr	r0, [sp, #8]
 800901e:	f7ff f9b3 	bl	8008388 <quorem>
 8009022:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009026:	f806 3b01 	strb.w	r3, [r6], #1
 800902a:	eba6 020a 	sub.w	r2, r6, sl
 800902e:	4593      	cmp	fp, r2
 8009030:	ddb3      	ble.n	8008f9a <_dtoa_r+0xaf2>
 8009032:	2300      	movs	r3, #0
 8009034:	220a      	movs	r2, #10
 8009036:	9902      	ldr	r1, [sp, #8]
 8009038:	4648      	mov	r0, r9
 800903a:	f000 f969 	bl	8009310 <__multadd>
 800903e:	9002      	str	r0, [sp, #8]
 8009040:	e7eb      	b.n	800901a <_dtoa_r+0xb72>
 8009042:	bf00      	nop
 8009044:	0800bbe9 	.word	0x0800bbe9
 8009048:	0800bb6d 	.word	0x0800bb6d

0800904c <_free_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4605      	mov	r5, r0
 8009050:	2900      	cmp	r1, #0
 8009052:	d041      	beq.n	80090d8 <_free_r+0x8c>
 8009054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009058:	1f0c      	subs	r4, r1, #4
 800905a:	2b00      	cmp	r3, #0
 800905c:	bfb8      	it	lt
 800905e:	18e4      	addlt	r4, r4, r3
 8009060:	f000 f8e8 	bl	8009234 <__malloc_lock>
 8009064:	4a1d      	ldr	r2, [pc, #116]	@ (80090dc <_free_r+0x90>)
 8009066:	6813      	ldr	r3, [r2, #0]
 8009068:	b933      	cbnz	r3, 8009078 <_free_r+0x2c>
 800906a:	6063      	str	r3, [r4, #4]
 800906c:	6014      	str	r4, [r2, #0]
 800906e:	4628      	mov	r0, r5
 8009070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009074:	f000 b8e4 	b.w	8009240 <__malloc_unlock>
 8009078:	42a3      	cmp	r3, r4
 800907a:	d908      	bls.n	800908e <_free_r+0x42>
 800907c:	6820      	ldr	r0, [r4, #0]
 800907e:	1821      	adds	r1, r4, r0
 8009080:	428b      	cmp	r3, r1
 8009082:	bf01      	itttt	eq
 8009084:	6819      	ldreq	r1, [r3, #0]
 8009086:	685b      	ldreq	r3, [r3, #4]
 8009088:	1809      	addeq	r1, r1, r0
 800908a:	6021      	streq	r1, [r4, #0]
 800908c:	e7ed      	b.n	800906a <_free_r+0x1e>
 800908e:	461a      	mov	r2, r3
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	b10b      	cbz	r3, 8009098 <_free_r+0x4c>
 8009094:	42a3      	cmp	r3, r4
 8009096:	d9fa      	bls.n	800908e <_free_r+0x42>
 8009098:	6811      	ldr	r1, [r2, #0]
 800909a:	1850      	adds	r0, r2, r1
 800909c:	42a0      	cmp	r0, r4
 800909e:	d10b      	bne.n	80090b8 <_free_r+0x6c>
 80090a0:	6820      	ldr	r0, [r4, #0]
 80090a2:	4401      	add	r1, r0
 80090a4:	1850      	adds	r0, r2, r1
 80090a6:	6011      	str	r1, [r2, #0]
 80090a8:	4283      	cmp	r3, r0
 80090aa:	d1e0      	bne.n	800906e <_free_r+0x22>
 80090ac:	6818      	ldr	r0, [r3, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	4408      	add	r0, r1
 80090b2:	6053      	str	r3, [r2, #4]
 80090b4:	6010      	str	r0, [r2, #0]
 80090b6:	e7da      	b.n	800906e <_free_r+0x22>
 80090b8:	d902      	bls.n	80090c0 <_free_r+0x74>
 80090ba:	230c      	movs	r3, #12
 80090bc:	602b      	str	r3, [r5, #0]
 80090be:	e7d6      	b.n	800906e <_free_r+0x22>
 80090c0:	6820      	ldr	r0, [r4, #0]
 80090c2:	1821      	adds	r1, r4, r0
 80090c4:	428b      	cmp	r3, r1
 80090c6:	bf02      	ittt	eq
 80090c8:	6819      	ldreq	r1, [r3, #0]
 80090ca:	685b      	ldreq	r3, [r3, #4]
 80090cc:	1809      	addeq	r1, r1, r0
 80090ce:	6063      	str	r3, [r4, #4]
 80090d0:	bf08      	it	eq
 80090d2:	6021      	streq	r1, [r4, #0]
 80090d4:	6054      	str	r4, [r2, #4]
 80090d6:	e7ca      	b.n	800906e <_free_r+0x22>
 80090d8:	bd38      	pop	{r3, r4, r5, pc}
 80090da:	bf00      	nop
 80090dc:	20000490 	.word	0x20000490

080090e0 <malloc>:
 80090e0:	4b02      	ldr	r3, [pc, #8]	@ (80090ec <malloc+0xc>)
 80090e2:	4601      	mov	r1, r0
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	f000 b825 	b.w	8009134 <_malloc_r>
 80090ea:	bf00      	nop
 80090ec:	20000034 	.word	0x20000034

080090f0 <sbrk_aligned>:
 80090f0:	b570      	push	{r4, r5, r6, lr}
 80090f2:	4e0f      	ldr	r6, [pc, #60]	@ (8009130 <sbrk_aligned+0x40>)
 80090f4:	460c      	mov	r4, r1
 80090f6:	4605      	mov	r5, r0
 80090f8:	6831      	ldr	r1, [r6, #0]
 80090fa:	b911      	cbnz	r1, 8009102 <sbrk_aligned+0x12>
 80090fc:	f001 fe12 	bl	800ad24 <_sbrk_r>
 8009100:	6030      	str	r0, [r6, #0]
 8009102:	4621      	mov	r1, r4
 8009104:	4628      	mov	r0, r5
 8009106:	f001 fe0d 	bl	800ad24 <_sbrk_r>
 800910a:	1c43      	adds	r3, r0, #1
 800910c:	d103      	bne.n	8009116 <sbrk_aligned+0x26>
 800910e:	f04f 34ff 	mov.w	r4, #4294967295
 8009112:	4620      	mov	r0, r4
 8009114:	bd70      	pop	{r4, r5, r6, pc}
 8009116:	1cc4      	adds	r4, r0, #3
 8009118:	f024 0403 	bic.w	r4, r4, #3
 800911c:	42a0      	cmp	r0, r4
 800911e:	d0f8      	beq.n	8009112 <sbrk_aligned+0x22>
 8009120:	1a21      	subs	r1, r4, r0
 8009122:	4628      	mov	r0, r5
 8009124:	f001 fdfe 	bl	800ad24 <_sbrk_r>
 8009128:	3001      	adds	r0, #1
 800912a:	d1f2      	bne.n	8009112 <sbrk_aligned+0x22>
 800912c:	e7ef      	b.n	800910e <sbrk_aligned+0x1e>
 800912e:	bf00      	nop
 8009130:	2000048c 	.word	0x2000048c

08009134 <_malloc_r>:
 8009134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009138:	1ccd      	adds	r5, r1, #3
 800913a:	4606      	mov	r6, r0
 800913c:	f025 0503 	bic.w	r5, r5, #3
 8009140:	3508      	adds	r5, #8
 8009142:	2d0c      	cmp	r5, #12
 8009144:	bf38      	it	cc
 8009146:	250c      	movcc	r5, #12
 8009148:	2d00      	cmp	r5, #0
 800914a:	db01      	blt.n	8009150 <_malloc_r+0x1c>
 800914c:	42a9      	cmp	r1, r5
 800914e:	d904      	bls.n	800915a <_malloc_r+0x26>
 8009150:	230c      	movs	r3, #12
 8009152:	6033      	str	r3, [r6, #0]
 8009154:	2000      	movs	r0, #0
 8009156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800915a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009230 <_malloc_r+0xfc>
 800915e:	f000 f869 	bl	8009234 <__malloc_lock>
 8009162:	f8d8 3000 	ldr.w	r3, [r8]
 8009166:	461c      	mov	r4, r3
 8009168:	bb44      	cbnz	r4, 80091bc <_malloc_r+0x88>
 800916a:	4629      	mov	r1, r5
 800916c:	4630      	mov	r0, r6
 800916e:	f7ff ffbf 	bl	80090f0 <sbrk_aligned>
 8009172:	1c43      	adds	r3, r0, #1
 8009174:	4604      	mov	r4, r0
 8009176:	d158      	bne.n	800922a <_malloc_r+0xf6>
 8009178:	f8d8 4000 	ldr.w	r4, [r8]
 800917c:	4627      	mov	r7, r4
 800917e:	2f00      	cmp	r7, #0
 8009180:	d143      	bne.n	800920a <_malloc_r+0xd6>
 8009182:	2c00      	cmp	r4, #0
 8009184:	d04b      	beq.n	800921e <_malloc_r+0xea>
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	4639      	mov	r1, r7
 800918a:	4630      	mov	r0, r6
 800918c:	eb04 0903 	add.w	r9, r4, r3
 8009190:	f001 fdc8 	bl	800ad24 <_sbrk_r>
 8009194:	4581      	cmp	r9, r0
 8009196:	d142      	bne.n	800921e <_malloc_r+0xea>
 8009198:	6821      	ldr	r1, [r4, #0]
 800919a:	4630      	mov	r0, r6
 800919c:	1a6d      	subs	r5, r5, r1
 800919e:	4629      	mov	r1, r5
 80091a0:	f7ff ffa6 	bl	80090f0 <sbrk_aligned>
 80091a4:	3001      	adds	r0, #1
 80091a6:	d03a      	beq.n	800921e <_malloc_r+0xea>
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	442b      	add	r3, r5
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	f8d8 3000 	ldr.w	r3, [r8]
 80091b2:	685a      	ldr	r2, [r3, #4]
 80091b4:	bb62      	cbnz	r2, 8009210 <_malloc_r+0xdc>
 80091b6:	f8c8 7000 	str.w	r7, [r8]
 80091ba:	e00f      	b.n	80091dc <_malloc_r+0xa8>
 80091bc:	6822      	ldr	r2, [r4, #0]
 80091be:	1b52      	subs	r2, r2, r5
 80091c0:	d420      	bmi.n	8009204 <_malloc_r+0xd0>
 80091c2:	2a0b      	cmp	r2, #11
 80091c4:	d917      	bls.n	80091f6 <_malloc_r+0xc2>
 80091c6:	1961      	adds	r1, r4, r5
 80091c8:	42a3      	cmp	r3, r4
 80091ca:	6025      	str	r5, [r4, #0]
 80091cc:	bf18      	it	ne
 80091ce:	6059      	strne	r1, [r3, #4]
 80091d0:	6863      	ldr	r3, [r4, #4]
 80091d2:	bf08      	it	eq
 80091d4:	f8c8 1000 	streq.w	r1, [r8]
 80091d8:	5162      	str	r2, [r4, r5]
 80091da:	604b      	str	r3, [r1, #4]
 80091dc:	4630      	mov	r0, r6
 80091de:	f000 f82f 	bl	8009240 <__malloc_unlock>
 80091e2:	f104 000b 	add.w	r0, r4, #11
 80091e6:	1d23      	adds	r3, r4, #4
 80091e8:	f020 0007 	bic.w	r0, r0, #7
 80091ec:	1ac2      	subs	r2, r0, r3
 80091ee:	bf1c      	itt	ne
 80091f0:	1a1b      	subne	r3, r3, r0
 80091f2:	50a3      	strne	r3, [r4, r2]
 80091f4:	e7af      	b.n	8009156 <_malloc_r+0x22>
 80091f6:	6862      	ldr	r2, [r4, #4]
 80091f8:	42a3      	cmp	r3, r4
 80091fa:	bf0c      	ite	eq
 80091fc:	f8c8 2000 	streq.w	r2, [r8]
 8009200:	605a      	strne	r2, [r3, #4]
 8009202:	e7eb      	b.n	80091dc <_malloc_r+0xa8>
 8009204:	4623      	mov	r3, r4
 8009206:	6864      	ldr	r4, [r4, #4]
 8009208:	e7ae      	b.n	8009168 <_malloc_r+0x34>
 800920a:	463c      	mov	r4, r7
 800920c:	687f      	ldr	r7, [r7, #4]
 800920e:	e7b6      	b.n	800917e <_malloc_r+0x4a>
 8009210:	461a      	mov	r2, r3
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	42a3      	cmp	r3, r4
 8009216:	d1fb      	bne.n	8009210 <_malloc_r+0xdc>
 8009218:	2300      	movs	r3, #0
 800921a:	6053      	str	r3, [r2, #4]
 800921c:	e7de      	b.n	80091dc <_malloc_r+0xa8>
 800921e:	230c      	movs	r3, #12
 8009220:	4630      	mov	r0, r6
 8009222:	6033      	str	r3, [r6, #0]
 8009224:	f000 f80c 	bl	8009240 <__malloc_unlock>
 8009228:	e794      	b.n	8009154 <_malloc_r+0x20>
 800922a:	6005      	str	r5, [r0, #0]
 800922c:	e7d6      	b.n	80091dc <_malloc_r+0xa8>
 800922e:	bf00      	nop
 8009230:	20000490 	.word	0x20000490

08009234 <__malloc_lock>:
 8009234:	4801      	ldr	r0, [pc, #4]	@ (800923c <__malloc_lock+0x8>)
 8009236:	f7ff b890 	b.w	800835a <__retarget_lock_acquire_recursive>
 800923a:	bf00      	nop
 800923c:	20000488 	.word	0x20000488

08009240 <__malloc_unlock>:
 8009240:	4801      	ldr	r0, [pc, #4]	@ (8009248 <__malloc_unlock+0x8>)
 8009242:	f7ff b88b 	b.w	800835c <__retarget_lock_release_recursive>
 8009246:	bf00      	nop
 8009248:	20000488 	.word	0x20000488

0800924c <_Balloc>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	69c6      	ldr	r6, [r0, #28]
 8009250:	4604      	mov	r4, r0
 8009252:	460d      	mov	r5, r1
 8009254:	b976      	cbnz	r6, 8009274 <_Balloc+0x28>
 8009256:	2010      	movs	r0, #16
 8009258:	f7ff ff42 	bl	80090e0 <malloc>
 800925c:	4602      	mov	r2, r0
 800925e:	61e0      	str	r0, [r4, #28]
 8009260:	b920      	cbnz	r0, 800926c <_Balloc+0x20>
 8009262:	4b18      	ldr	r3, [pc, #96]	@ (80092c4 <_Balloc+0x78>)
 8009264:	216b      	movs	r1, #107	@ 0x6b
 8009266:	4818      	ldr	r0, [pc, #96]	@ (80092c8 <_Balloc+0x7c>)
 8009268:	f001 fd82 	bl	800ad70 <__assert_func>
 800926c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009270:	6006      	str	r6, [r0, #0]
 8009272:	60c6      	str	r6, [r0, #12]
 8009274:	69e6      	ldr	r6, [r4, #28]
 8009276:	68f3      	ldr	r3, [r6, #12]
 8009278:	b183      	cbz	r3, 800929c <_Balloc+0x50>
 800927a:	69e3      	ldr	r3, [r4, #28]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009282:	b9b8      	cbnz	r0, 80092b4 <_Balloc+0x68>
 8009284:	2101      	movs	r1, #1
 8009286:	4620      	mov	r0, r4
 8009288:	fa01 f605 	lsl.w	r6, r1, r5
 800928c:	1d72      	adds	r2, r6, #5
 800928e:	0092      	lsls	r2, r2, #2
 8009290:	f001 fd8c 	bl	800adac <_calloc_r>
 8009294:	b160      	cbz	r0, 80092b0 <_Balloc+0x64>
 8009296:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800929a:	e00e      	b.n	80092ba <_Balloc+0x6e>
 800929c:	2221      	movs	r2, #33	@ 0x21
 800929e:	2104      	movs	r1, #4
 80092a0:	4620      	mov	r0, r4
 80092a2:	f001 fd83 	bl	800adac <_calloc_r>
 80092a6:	69e3      	ldr	r3, [r4, #28]
 80092a8:	60f0      	str	r0, [r6, #12]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1e4      	bne.n	800927a <_Balloc+0x2e>
 80092b0:	2000      	movs	r0, #0
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	6802      	ldr	r2, [r0, #0]
 80092b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092ba:	2300      	movs	r3, #0
 80092bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092c0:	e7f7      	b.n	80092b2 <_Balloc+0x66>
 80092c2:	bf00      	nop
 80092c4:	0800bb7a 	.word	0x0800bb7a
 80092c8:	0800bbfa 	.word	0x0800bbfa

080092cc <_Bfree>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	69c6      	ldr	r6, [r0, #28]
 80092d0:	4605      	mov	r5, r0
 80092d2:	460c      	mov	r4, r1
 80092d4:	b976      	cbnz	r6, 80092f4 <_Bfree+0x28>
 80092d6:	2010      	movs	r0, #16
 80092d8:	f7ff ff02 	bl	80090e0 <malloc>
 80092dc:	4602      	mov	r2, r0
 80092de:	61e8      	str	r0, [r5, #28]
 80092e0:	b920      	cbnz	r0, 80092ec <_Bfree+0x20>
 80092e2:	4b09      	ldr	r3, [pc, #36]	@ (8009308 <_Bfree+0x3c>)
 80092e4:	218f      	movs	r1, #143	@ 0x8f
 80092e6:	4809      	ldr	r0, [pc, #36]	@ (800930c <_Bfree+0x40>)
 80092e8:	f001 fd42 	bl	800ad70 <__assert_func>
 80092ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092f0:	6006      	str	r6, [r0, #0]
 80092f2:	60c6      	str	r6, [r0, #12]
 80092f4:	b13c      	cbz	r4, 8009306 <_Bfree+0x3a>
 80092f6:	69eb      	ldr	r3, [r5, #28]
 80092f8:	6862      	ldr	r2, [r4, #4]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009300:	6021      	str	r1, [r4, #0]
 8009302:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	0800bb7a 	.word	0x0800bb7a
 800930c:	0800bbfa 	.word	0x0800bbfa

08009310 <__multadd>:
 8009310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009314:	f101 0c14 	add.w	ip, r1, #20
 8009318:	4607      	mov	r7, r0
 800931a:	460c      	mov	r4, r1
 800931c:	461e      	mov	r6, r3
 800931e:	690d      	ldr	r5, [r1, #16]
 8009320:	2000      	movs	r0, #0
 8009322:	f8dc 3000 	ldr.w	r3, [ip]
 8009326:	3001      	adds	r0, #1
 8009328:	b299      	uxth	r1, r3
 800932a:	4285      	cmp	r5, r0
 800932c:	fb02 6101 	mla	r1, r2, r1, r6
 8009330:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009334:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8009338:	b289      	uxth	r1, r1
 800933a:	fb02 3306 	mla	r3, r2, r6, r3
 800933e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009342:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009346:	f84c 1b04 	str.w	r1, [ip], #4
 800934a:	dcea      	bgt.n	8009322 <__multadd+0x12>
 800934c:	b30e      	cbz	r6, 8009392 <__multadd+0x82>
 800934e:	68a3      	ldr	r3, [r4, #8]
 8009350:	42ab      	cmp	r3, r5
 8009352:	dc19      	bgt.n	8009388 <__multadd+0x78>
 8009354:	6861      	ldr	r1, [r4, #4]
 8009356:	4638      	mov	r0, r7
 8009358:	3101      	adds	r1, #1
 800935a:	f7ff ff77 	bl	800924c <_Balloc>
 800935e:	4680      	mov	r8, r0
 8009360:	b928      	cbnz	r0, 800936e <__multadd+0x5e>
 8009362:	4602      	mov	r2, r0
 8009364:	4b0c      	ldr	r3, [pc, #48]	@ (8009398 <__multadd+0x88>)
 8009366:	21ba      	movs	r1, #186	@ 0xba
 8009368:	480c      	ldr	r0, [pc, #48]	@ (800939c <__multadd+0x8c>)
 800936a:	f001 fd01 	bl	800ad70 <__assert_func>
 800936e:	6922      	ldr	r2, [r4, #16]
 8009370:	f104 010c 	add.w	r1, r4, #12
 8009374:	300c      	adds	r0, #12
 8009376:	3202      	adds	r2, #2
 8009378:	0092      	lsls	r2, r2, #2
 800937a:	f001 fce3 	bl	800ad44 <memcpy>
 800937e:	4621      	mov	r1, r4
 8009380:	4644      	mov	r4, r8
 8009382:	4638      	mov	r0, r7
 8009384:	f7ff ffa2 	bl	80092cc <_Bfree>
 8009388:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800938c:	3501      	adds	r5, #1
 800938e:	615e      	str	r6, [r3, #20]
 8009390:	6125      	str	r5, [r4, #16]
 8009392:	4620      	mov	r0, r4
 8009394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009398:	0800bbe9 	.word	0x0800bbe9
 800939c:	0800bbfa 	.word	0x0800bbfa

080093a0 <__s2b>:
 80093a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093a4:	4615      	mov	r5, r2
 80093a6:	461f      	mov	r7, r3
 80093a8:	2209      	movs	r2, #9
 80093aa:	3308      	adds	r3, #8
 80093ac:	460c      	mov	r4, r1
 80093ae:	4606      	mov	r6, r0
 80093b0:	2100      	movs	r1, #0
 80093b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80093b6:	2201      	movs	r2, #1
 80093b8:	429a      	cmp	r2, r3
 80093ba:	db09      	blt.n	80093d0 <__s2b+0x30>
 80093bc:	4630      	mov	r0, r6
 80093be:	f7ff ff45 	bl	800924c <_Balloc>
 80093c2:	b940      	cbnz	r0, 80093d6 <__s2b+0x36>
 80093c4:	4602      	mov	r2, r0
 80093c6:	4b19      	ldr	r3, [pc, #100]	@ (800942c <__s2b+0x8c>)
 80093c8:	21d3      	movs	r1, #211	@ 0xd3
 80093ca:	4819      	ldr	r0, [pc, #100]	@ (8009430 <__s2b+0x90>)
 80093cc:	f001 fcd0 	bl	800ad70 <__assert_func>
 80093d0:	0052      	lsls	r2, r2, #1
 80093d2:	3101      	adds	r1, #1
 80093d4:	e7f0      	b.n	80093b8 <__s2b+0x18>
 80093d6:	9b08      	ldr	r3, [sp, #32]
 80093d8:	2d09      	cmp	r5, #9
 80093da:	6143      	str	r3, [r0, #20]
 80093dc:	f04f 0301 	mov.w	r3, #1
 80093e0:	6103      	str	r3, [r0, #16]
 80093e2:	dd16      	ble.n	8009412 <__s2b+0x72>
 80093e4:	f104 0909 	add.w	r9, r4, #9
 80093e8:	442c      	add	r4, r5
 80093ea:	46c8      	mov	r8, r9
 80093ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80093f0:	4601      	mov	r1, r0
 80093f2:	220a      	movs	r2, #10
 80093f4:	4630      	mov	r0, r6
 80093f6:	3b30      	subs	r3, #48	@ 0x30
 80093f8:	f7ff ff8a 	bl	8009310 <__multadd>
 80093fc:	45a0      	cmp	r8, r4
 80093fe:	d1f5      	bne.n	80093ec <__s2b+0x4c>
 8009400:	f1a5 0408 	sub.w	r4, r5, #8
 8009404:	444c      	add	r4, r9
 8009406:	1b2d      	subs	r5, r5, r4
 8009408:	1963      	adds	r3, r4, r5
 800940a:	42bb      	cmp	r3, r7
 800940c:	db04      	blt.n	8009418 <__s2b+0x78>
 800940e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009412:	340a      	adds	r4, #10
 8009414:	2509      	movs	r5, #9
 8009416:	e7f6      	b.n	8009406 <__s2b+0x66>
 8009418:	f814 3b01 	ldrb.w	r3, [r4], #1
 800941c:	4601      	mov	r1, r0
 800941e:	220a      	movs	r2, #10
 8009420:	4630      	mov	r0, r6
 8009422:	3b30      	subs	r3, #48	@ 0x30
 8009424:	f7ff ff74 	bl	8009310 <__multadd>
 8009428:	e7ee      	b.n	8009408 <__s2b+0x68>
 800942a:	bf00      	nop
 800942c:	0800bbe9 	.word	0x0800bbe9
 8009430:	0800bbfa 	.word	0x0800bbfa

08009434 <__hi0bits>:
 8009434:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009438:	4603      	mov	r3, r0
 800943a:	bf36      	itet	cc
 800943c:	0403      	lslcc	r3, r0, #16
 800943e:	2000      	movcs	r0, #0
 8009440:	2010      	movcc	r0, #16
 8009442:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009446:	bf3c      	itt	cc
 8009448:	021b      	lslcc	r3, r3, #8
 800944a:	3008      	addcc	r0, #8
 800944c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009450:	bf3c      	itt	cc
 8009452:	011b      	lslcc	r3, r3, #4
 8009454:	3004      	addcc	r0, #4
 8009456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800945a:	bf3c      	itt	cc
 800945c:	009b      	lslcc	r3, r3, #2
 800945e:	3002      	addcc	r0, #2
 8009460:	2b00      	cmp	r3, #0
 8009462:	db05      	blt.n	8009470 <__hi0bits+0x3c>
 8009464:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009468:	f100 0001 	add.w	r0, r0, #1
 800946c:	bf08      	it	eq
 800946e:	2020      	moveq	r0, #32
 8009470:	4770      	bx	lr

08009472 <__lo0bits>:
 8009472:	6803      	ldr	r3, [r0, #0]
 8009474:	4602      	mov	r2, r0
 8009476:	f013 0007 	ands.w	r0, r3, #7
 800947a:	d00b      	beq.n	8009494 <__lo0bits+0x22>
 800947c:	07d9      	lsls	r1, r3, #31
 800947e:	d421      	bmi.n	80094c4 <__lo0bits+0x52>
 8009480:	0798      	lsls	r0, r3, #30
 8009482:	bf47      	ittee	mi
 8009484:	085b      	lsrmi	r3, r3, #1
 8009486:	2001      	movmi	r0, #1
 8009488:	089b      	lsrpl	r3, r3, #2
 800948a:	2002      	movpl	r0, #2
 800948c:	bf4c      	ite	mi
 800948e:	6013      	strmi	r3, [r2, #0]
 8009490:	6013      	strpl	r3, [r2, #0]
 8009492:	4770      	bx	lr
 8009494:	b299      	uxth	r1, r3
 8009496:	b909      	cbnz	r1, 800949c <__lo0bits+0x2a>
 8009498:	0c1b      	lsrs	r3, r3, #16
 800949a:	2010      	movs	r0, #16
 800949c:	b2d9      	uxtb	r1, r3
 800949e:	b909      	cbnz	r1, 80094a4 <__lo0bits+0x32>
 80094a0:	3008      	adds	r0, #8
 80094a2:	0a1b      	lsrs	r3, r3, #8
 80094a4:	0719      	lsls	r1, r3, #28
 80094a6:	bf04      	itt	eq
 80094a8:	091b      	lsreq	r3, r3, #4
 80094aa:	3004      	addeq	r0, #4
 80094ac:	0799      	lsls	r1, r3, #30
 80094ae:	bf04      	itt	eq
 80094b0:	089b      	lsreq	r3, r3, #2
 80094b2:	3002      	addeq	r0, #2
 80094b4:	07d9      	lsls	r1, r3, #31
 80094b6:	d403      	bmi.n	80094c0 <__lo0bits+0x4e>
 80094b8:	085b      	lsrs	r3, r3, #1
 80094ba:	f100 0001 	add.w	r0, r0, #1
 80094be:	d003      	beq.n	80094c8 <__lo0bits+0x56>
 80094c0:	6013      	str	r3, [r2, #0]
 80094c2:	4770      	bx	lr
 80094c4:	2000      	movs	r0, #0
 80094c6:	4770      	bx	lr
 80094c8:	2020      	movs	r0, #32
 80094ca:	4770      	bx	lr

080094cc <__i2b>:
 80094cc:	b510      	push	{r4, lr}
 80094ce:	460c      	mov	r4, r1
 80094d0:	2101      	movs	r1, #1
 80094d2:	f7ff febb 	bl	800924c <_Balloc>
 80094d6:	4602      	mov	r2, r0
 80094d8:	b928      	cbnz	r0, 80094e6 <__i2b+0x1a>
 80094da:	4b05      	ldr	r3, [pc, #20]	@ (80094f0 <__i2b+0x24>)
 80094dc:	f240 1145 	movw	r1, #325	@ 0x145
 80094e0:	4804      	ldr	r0, [pc, #16]	@ (80094f4 <__i2b+0x28>)
 80094e2:	f001 fc45 	bl	800ad70 <__assert_func>
 80094e6:	2301      	movs	r3, #1
 80094e8:	6144      	str	r4, [r0, #20]
 80094ea:	6103      	str	r3, [r0, #16]
 80094ec:	bd10      	pop	{r4, pc}
 80094ee:	bf00      	nop
 80094f0:	0800bbe9 	.word	0x0800bbe9
 80094f4:	0800bbfa 	.word	0x0800bbfa

080094f8 <__multiply>:
 80094f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fc:	4617      	mov	r7, r2
 80094fe:	690a      	ldr	r2, [r1, #16]
 8009500:	4689      	mov	r9, r1
 8009502:	b085      	sub	sp, #20
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	429a      	cmp	r2, r3
 8009508:	bfa2      	ittt	ge
 800950a:	463b      	movge	r3, r7
 800950c:	460f      	movge	r7, r1
 800950e:	4699      	movge	r9, r3
 8009510:	693d      	ldr	r5, [r7, #16]
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009518:	6879      	ldr	r1, [r7, #4]
 800951a:	eb05 060a 	add.w	r6, r5, sl
 800951e:	42b3      	cmp	r3, r6
 8009520:	bfb8      	it	lt
 8009522:	3101      	addlt	r1, #1
 8009524:	f7ff fe92 	bl	800924c <_Balloc>
 8009528:	b930      	cbnz	r0, 8009538 <__multiply+0x40>
 800952a:	4602      	mov	r2, r0
 800952c:	4b42      	ldr	r3, [pc, #264]	@ (8009638 <__multiply+0x140>)
 800952e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009532:	4842      	ldr	r0, [pc, #264]	@ (800963c <__multiply+0x144>)
 8009534:	f001 fc1c 	bl	800ad70 <__assert_func>
 8009538:	f100 0414 	add.w	r4, r0, #20
 800953c:	2200      	movs	r2, #0
 800953e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009542:	4623      	mov	r3, r4
 8009544:	4573      	cmp	r3, lr
 8009546:	d320      	bcc.n	800958a <__multiply+0x92>
 8009548:	f107 0814 	add.w	r8, r7, #20
 800954c:	f109 0114 	add.w	r1, r9, #20
 8009550:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009554:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009558:	9302      	str	r3, [sp, #8]
 800955a:	1beb      	subs	r3, r5, r7
 800955c:	3715      	adds	r7, #21
 800955e:	3b15      	subs	r3, #21
 8009560:	f023 0303 	bic.w	r3, r3, #3
 8009564:	3304      	adds	r3, #4
 8009566:	42bd      	cmp	r5, r7
 8009568:	bf38      	it	cc
 800956a:	2304      	movcc	r3, #4
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	9b02      	ldr	r3, [sp, #8]
 8009570:	9103      	str	r1, [sp, #12]
 8009572:	428b      	cmp	r3, r1
 8009574:	d80c      	bhi.n	8009590 <__multiply+0x98>
 8009576:	2e00      	cmp	r6, #0
 8009578:	dd03      	ble.n	8009582 <__multiply+0x8a>
 800957a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800957e:	2b00      	cmp	r3, #0
 8009580:	d057      	beq.n	8009632 <__multiply+0x13a>
 8009582:	6106      	str	r6, [r0, #16]
 8009584:	b005      	add	sp, #20
 8009586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958a:	f843 2b04 	str.w	r2, [r3], #4
 800958e:	e7d9      	b.n	8009544 <__multiply+0x4c>
 8009590:	f8b1 a000 	ldrh.w	sl, [r1]
 8009594:	f1ba 0f00 	cmp.w	sl, #0
 8009598:	d021      	beq.n	80095de <__multiply+0xe6>
 800959a:	46c4      	mov	ip, r8
 800959c:	46a1      	mov	r9, r4
 800959e:	2700      	movs	r7, #0
 80095a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80095a4:	f8d9 3000 	ldr.w	r3, [r9]
 80095a8:	fa1f fb82 	uxth.w	fp, r2
 80095ac:	4565      	cmp	r5, ip
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80095b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80095b8:	443b      	add	r3, r7
 80095ba:	f8d9 7000 	ldr.w	r7, [r9]
 80095be:	ea4f 4717 	mov.w	r7, r7, lsr #16
 80095c2:	fb0a 7202 	mla	r2, sl, r2, r7
 80095c6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80095d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095d4:	f849 3b04 	str.w	r3, [r9], #4
 80095d8:	d8e2      	bhi.n	80095a0 <__multiply+0xa8>
 80095da:	9b01      	ldr	r3, [sp, #4]
 80095dc:	50e7      	str	r7, [r4, r3]
 80095de:	9b03      	ldr	r3, [sp, #12]
 80095e0:	3104      	adds	r1, #4
 80095e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80095e6:	f1b9 0f00 	cmp.w	r9, #0
 80095ea:	d020      	beq.n	800962e <__multiply+0x136>
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	4647      	mov	r7, r8
 80095f0:	46a4      	mov	ip, r4
 80095f2:	f04f 0a00 	mov.w	sl, #0
 80095f6:	f8b7 b000 	ldrh.w	fp, [r7]
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009600:	fb09 220b 	mla	r2, r9, fp, r2
 8009604:	4452      	add	r2, sl
 8009606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800960a:	f84c 3b04 	str.w	r3, [ip], #4
 800960e:	f857 3b04 	ldr.w	r3, [r7], #4
 8009612:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009616:	f8bc 3000 	ldrh.w	r3, [ip]
 800961a:	42bd      	cmp	r5, r7
 800961c:	fb09 330a 	mla	r3, r9, sl, r3
 8009620:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009624:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009628:	d8e5      	bhi.n	80095f6 <__multiply+0xfe>
 800962a:	9a01      	ldr	r2, [sp, #4]
 800962c:	50a3      	str	r3, [r4, r2]
 800962e:	3404      	adds	r4, #4
 8009630:	e79d      	b.n	800956e <__multiply+0x76>
 8009632:	3e01      	subs	r6, #1
 8009634:	e79f      	b.n	8009576 <__multiply+0x7e>
 8009636:	bf00      	nop
 8009638:	0800bbe9 	.word	0x0800bbe9
 800963c:	0800bbfa 	.word	0x0800bbfa

08009640 <__pow5mult>:
 8009640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009644:	4615      	mov	r5, r2
 8009646:	f012 0203 	ands.w	r2, r2, #3
 800964a:	4607      	mov	r7, r0
 800964c:	460e      	mov	r6, r1
 800964e:	d007      	beq.n	8009660 <__pow5mult+0x20>
 8009650:	3a01      	subs	r2, #1
 8009652:	4c25      	ldr	r4, [pc, #148]	@ (80096e8 <__pow5mult+0xa8>)
 8009654:	2300      	movs	r3, #0
 8009656:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800965a:	f7ff fe59 	bl	8009310 <__multadd>
 800965e:	4606      	mov	r6, r0
 8009660:	10ad      	asrs	r5, r5, #2
 8009662:	d03d      	beq.n	80096e0 <__pow5mult+0xa0>
 8009664:	69fc      	ldr	r4, [r7, #28]
 8009666:	b97c      	cbnz	r4, 8009688 <__pow5mult+0x48>
 8009668:	2010      	movs	r0, #16
 800966a:	f7ff fd39 	bl	80090e0 <malloc>
 800966e:	4602      	mov	r2, r0
 8009670:	61f8      	str	r0, [r7, #28]
 8009672:	b928      	cbnz	r0, 8009680 <__pow5mult+0x40>
 8009674:	4b1d      	ldr	r3, [pc, #116]	@ (80096ec <__pow5mult+0xac>)
 8009676:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800967a:	481d      	ldr	r0, [pc, #116]	@ (80096f0 <__pow5mult+0xb0>)
 800967c:	f001 fb78 	bl	800ad70 <__assert_func>
 8009680:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009684:	6004      	str	r4, [r0, #0]
 8009686:	60c4      	str	r4, [r0, #12]
 8009688:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800968c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009690:	b94c      	cbnz	r4, 80096a6 <__pow5mult+0x66>
 8009692:	f240 2171 	movw	r1, #625	@ 0x271
 8009696:	4638      	mov	r0, r7
 8009698:	f7ff ff18 	bl	80094cc <__i2b>
 800969c:	2300      	movs	r3, #0
 800969e:	4604      	mov	r4, r0
 80096a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80096a4:	6003      	str	r3, [r0, #0]
 80096a6:	f04f 0900 	mov.w	r9, #0
 80096aa:	07eb      	lsls	r3, r5, #31
 80096ac:	d50a      	bpl.n	80096c4 <__pow5mult+0x84>
 80096ae:	4631      	mov	r1, r6
 80096b0:	4622      	mov	r2, r4
 80096b2:	4638      	mov	r0, r7
 80096b4:	f7ff ff20 	bl	80094f8 <__multiply>
 80096b8:	4680      	mov	r8, r0
 80096ba:	4631      	mov	r1, r6
 80096bc:	4638      	mov	r0, r7
 80096be:	4646      	mov	r6, r8
 80096c0:	f7ff fe04 	bl	80092cc <_Bfree>
 80096c4:	106d      	asrs	r5, r5, #1
 80096c6:	d00b      	beq.n	80096e0 <__pow5mult+0xa0>
 80096c8:	6820      	ldr	r0, [r4, #0]
 80096ca:	b938      	cbnz	r0, 80096dc <__pow5mult+0x9c>
 80096cc:	4622      	mov	r2, r4
 80096ce:	4621      	mov	r1, r4
 80096d0:	4638      	mov	r0, r7
 80096d2:	f7ff ff11 	bl	80094f8 <__multiply>
 80096d6:	6020      	str	r0, [r4, #0]
 80096d8:	f8c0 9000 	str.w	r9, [r0]
 80096dc:	4604      	mov	r4, r0
 80096de:	e7e4      	b.n	80096aa <__pow5mult+0x6a>
 80096e0:	4630      	mov	r0, r6
 80096e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096e6:	bf00      	nop
 80096e8:	0800bd0c 	.word	0x0800bd0c
 80096ec:	0800bb7a 	.word	0x0800bb7a
 80096f0:	0800bbfa 	.word	0x0800bbfa

080096f4 <__lshift>:
 80096f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f8:	460c      	mov	r4, r1
 80096fa:	4607      	mov	r7, r0
 80096fc:	4691      	mov	r9, r2
 80096fe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009702:	6923      	ldr	r3, [r4, #16]
 8009704:	6849      	ldr	r1, [r1, #4]
 8009706:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800970a:	68a3      	ldr	r3, [r4, #8]
 800970c:	f108 0601 	add.w	r6, r8, #1
 8009710:	42b3      	cmp	r3, r6
 8009712:	db0b      	blt.n	800972c <__lshift+0x38>
 8009714:	4638      	mov	r0, r7
 8009716:	f7ff fd99 	bl	800924c <_Balloc>
 800971a:	4605      	mov	r5, r0
 800971c:	b948      	cbnz	r0, 8009732 <__lshift+0x3e>
 800971e:	4602      	mov	r2, r0
 8009720:	4b28      	ldr	r3, [pc, #160]	@ (80097c4 <__lshift+0xd0>)
 8009722:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009726:	4828      	ldr	r0, [pc, #160]	@ (80097c8 <__lshift+0xd4>)
 8009728:	f001 fb22 	bl	800ad70 <__assert_func>
 800972c:	3101      	adds	r1, #1
 800972e:	005b      	lsls	r3, r3, #1
 8009730:	e7ee      	b.n	8009710 <__lshift+0x1c>
 8009732:	2300      	movs	r3, #0
 8009734:	f100 0114 	add.w	r1, r0, #20
 8009738:	f100 0210 	add.w	r2, r0, #16
 800973c:	4618      	mov	r0, r3
 800973e:	4553      	cmp	r3, sl
 8009740:	db33      	blt.n	80097aa <__lshift+0xb6>
 8009742:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009746:	f104 0314 	add.w	r3, r4, #20
 800974a:	6920      	ldr	r0, [r4, #16]
 800974c:	f019 091f 	ands.w	r9, r9, #31
 8009750:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009754:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009758:	d02b      	beq.n	80097b2 <__lshift+0xbe>
 800975a:	f1c9 0e20 	rsb	lr, r9, #32
 800975e:	468a      	mov	sl, r1
 8009760:	2200      	movs	r2, #0
 8009762:	6818      	ldr	r0, [r3, #0]
 8009764:	fa00 f009 	lsl.w	r0, r0, r9
 8009768:	4310      	orrs	r0, r2
 800976a:	f84a 0b04 	str.w	r0, [sl], #4
 800976e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009772:	459c      	cmp	ip, r3
 8009774:	fa22 f20e 	lsr.w	r2, r2, lr
 8009778:	d8f3      	bhi.n	8009762 <__lshift+0x6e>
 800977a:	ebac 0304 	sub.w	r3, ip, r4
 800977e:	f104 0015 	add.w	r0, r4, #21
 8009782:	3b15      	subs	r3, #21
 8009784:	f023 0303 	bic.w	r3, r3, #3
 8009788:	3304      	adds	r3, #4
 800978a:	4560      	cmp	r0, ip
 800978c:	bf88      	it	hi
 800978e:	2304      	movhi	r3, #4
 8009790:	50ca      	str	r2, [r1, r3]
 8009792:	b10a      	cbz	r2, 8009798 <__lshift+0xa4>
 8009794:	f108 0602 	add.w	r6, r8, #2
 8009798:	3e01      	subs	r6, #1
 800979a:	4638      	mov	r0, r7
 800979c:	4621      	mov	r1, r4
 800979e:	612e      	str	r6, [r5, #16]
 80097a0:	f7ff fd94 	bl	80092cc <_Bfree>
 80097a4:	4628      	mov	r0, r5
 80097a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097aa:	3301      	adds	r3, #1
 80097ac:	f842 0f04 	str.w	r0, [r2, #4]!
 80097b0:	e7c5      	b.n	800973e <__lshift+0x4a>
 80097b2:	3904      	subs	r1, #4
 80097b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b8:	459c      	cmp	ip, r3
 80097ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80097be:	d8f9      	bhi.n	80097b4 <__lshift+0xc0>
 80097c0:	e7ea      	b.n	8009798 <__lshift+0xa4>
 80097c2:	bf00      	nop
 80097c4:	0800bbe9 	.word	0x0800bbe9
 80097c8:	0800bbfa 	.word	0x0800bbfa

080097cc <__mcmp>:
 80097cc:	4603      	mov	r3, r0
 80097ce:	690a      	ldr	r2, [r1, #16]
 80097d0:	6900      	ldr	r0, [r0, #16]
 80097d2:	1a80      	subs	r0, r0, r2
 80097d4:	b530      	push	{r4, r5, lr}
 80097d6:	d10e      	bne.n	80097f6 <__mcmp+0x2a>
 80097d8:	3314      	adds	r3, #20
 80097da:	3114      	adds	r1, #20
 80097dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80097e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80097e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80097e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80097ec:	4295      	cmp	r5, r2
 80097ee:	d003      	beq.n	80097f8 <__mcmp+0x2c>
 80097f0:	d205      	bcs.n	80097fe <__mcmp+0x32>
 80097f2:	f04f 30ff 	mov.w	r0, #4294967295
 80097f6:	bd30      	pop	{r4, r5, pc}
 80097f8:	42a3      	cmp	r3, r4
 80097fa:	d3f3      	bcc.n	80097e4 <__mcmp+0x18>
 80097fc:	e7fb      	b.n	80097f6 <__mcmp+0x2a>
 80097fe:	2001      	movs	r0, #1
 8009800:	e7f9      	b.n	80097f6 <__mcmp+0x2a>
	...

08009804 <__mdiff>:
 8009804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009808:	4689      	mov	r9, r1
 800980a:	4606      	mov	r6, r0
 800980c:	4611      	mov	r1, r2
 800980e:	4614      	mov	r4, r2
 8009810:	4648      	mov	r0, r9
 8009812:	f7ff ffdb 	bl	80097cc <__mcmp>
 8009816:	1e05      	subs	r5, r0, #0
 8009818:	d112      	bne.n	8009840 <__mdiff+0x3c>
 800981a:	4629      	mov	r1, r5
 800981c:	4630      	mov	r0, r6
 800981e:	f7ff fd15 	bl	800924c <_Balloc>
 8009822:	4602      	mov	r2, r0
 8009824:	b928      	cbnz	r0, 8009832 <__mdiff+0x2e>
 8009826:	4b41      	ldr	r3, [pc, #260]	@ (800992c <__mdiff+0x128>)
 8009828:	f240 2137 	movw	r1, #567	@ 0x237
 800982c:	4840      	ldr	r0, [pc, #256]	@ (8009930 <__mdiff+0x12c>)
 800982e:	f001 fa9f 	bl	800ad70 <__assert_func>
 8009832:	2301      	movs	r3, #1
 8009834:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009838:	4610      	mov	r0, r2
 800983a:	b003      	add	sp, #12
 800983c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009840:	bfbc      	itt	lt
 8009842:	464b      	movlt	r3, r9
 8009844:	46a1      	movlt	r9, r4
 8009846:	4630      	mov	r0, r6
 8009848:	bfb8      	it	lt
 800984a:	2501      	movlt	r5, #1
 800984c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009850:	bfb4      	ite	lt
 8009852:	461c      	movlt	r4, r3
 8009854:	2500      	movge	r5, #0
 8009856:	f7ff fcf9 	bl	800924c <_Balloc>
 800985a:	4602      	mov	r2, r0
 800985c:	b918      	cbnz	r0, 8009866 <__mdiff+0x62>
 800985e:	4b33      	ldr	r3, [pc, #204]	@ (800992c <__mdiff+0x128>)
 8009860:	f240 2145 	movw	r1, #581	@ 0x245
 8009864:	e7e2      	b.n	800982c <__mdiff+0x28>
 8009866:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800986a:	f104 0e14 	add.w	lr, r4, #20
 800986e:	6926      	ldr	r6, [r4, #16]
 8009870:	f100 0b14 	add.w	fp, r0, #20
 8009874:	60c5      	str	r5, [r0, #12]
 8009876:	f109 0514 	add.w	r5, r9, #20
 800987a:	f109 0310 	add.w	r3, r9, #16
 800987e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009882:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009886:	46d9      	mov	r9, fp
 8009888:	f04f 0c00 	mov.w	ip, #0
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	9b01      	ldr	r3, [sp, #4]
 8009890:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009894:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009898:	4576      	cmp	r6, lr
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	fa1f f38a 	uxth.w	r3, sl
 80098a0:	4619      	mov	r1, r3
 80098a2:	b283      	uxth	r3, r0
 80098a4:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80098a8:	eba1 0303 	sub.w	r3, r1, r3
 80098ac:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80098b0:	4463      	add	r3, ip
 80098b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80098c0:	f849 3b04 	str.w	r3, [r9], #4
 80098c4:	d8e3      	bhi.n	800988e <__mdiff+0x8a>
 80098c6:	1b33      	subs	r3, r6, r4
 80098c8:	3415      	adds	r4, #21
 80098ca:	3b15      	subs	r3, #21
 80098cc:	f023 0303 	bic.w	r3, r3, #3
 80098d0:	3304      	adds	r3, #4
 80098d2:	42a6      	cmp	r6, r4
 80098d4:	bf38      	it	cc
 80098d6:	2304      	movcc	r3, #4
 80098d8:	441d      	add	r5, r3
 80098da:	445b      	add	r3, fp
 80098dc:	462c      	mov	r4, r5
 80098de:	461e      	mov	r6, r3
 80098e0:	4544      	cmp	r4, r8
 80098e2:	d30e      	bcc.n	8009902 <__mdiff+0xfe>
 80098e4:	f108 0103 	add.w	r1, r8, #3
 80098e8:	1b49      	subs	r1, r1, r5
 80098ea:	3d03      	subs	r5, #3
 80098ec:	f021 0103 	bic.w	r1, r1, #3
 80098f0:	45a8      	cmp	r8, r5
 80098f2:	bf38      	it	cc
 80098f4:	2100      	movcc	r1, #0
 80098f6:	440b      	add	r3, r1
 80098f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098fc:	b199      	cbz	r1, 8009926 <__mdiff+0x122>
 80098fe:	6117      	str	r7, [r2, #16]
 8009900:	e79a      	b.n	8009838 <__mdiff+0x34>
 8009902:	f854 1b04 	ldr.w	r1, [r4], #4
 8009906:	46e6      	mov	lr, ip
 8009908:	fa1f fc81 	uxth.w	ip, r1
 800990c:	0c08      	lsrs	r0, r1, #16
 800990e:	4471      	add	r1, lr
 8009910:	44f4      	add	ip, lr
 8009912:	b289      	uxth	r1, r1
 8009914:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009918:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800991c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009920:	f846 1b04 	str.w	r1, [r6], #4
 8009924:	e7dc      	b.n	80098e0 <__mdiff+0xdc>
 8009926:	3f01      	subs	r7, #1
 8009928:	e7e6      	b.n	80098f8 <__mdiff+0xf4>
 800992a:	bf00      	nop
 800992c:	0800bbe9 	.word	0x0800bbe9
 8009930:	0800bbfa 	.word	0x0800bbfa

08009934 <__ulp>:
 8009934:	b082      	sub	sp, #8
 8009936:	4b11      	ldr	r3, [pc, #68]	@ (800997c <__ulp+0x48>)
 8009938:	ed8d 0b00 	vstr	d0, [sp]
 800993c:	9a01      	ldr	r2, [sp, #4]
 800993e:	4013      	ands	r3, r2
 8009940:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009944:	2b00      	cmp	r3, #0
 8009946:	dc08      	bgt.n	800995a <__ulp+0x26>
 8009948:	425b      	negs	r3, r3
 800994a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800994e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009952:	da04      	bge.n	800995e <__ulp+0x2a>
 8009954:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009958:	4113      	asrs	r3, r2
 800995a:	2200      	movs	r2, #0
 800995c:	e008      	b.n	8009970 <__ulp+0x3c>
 800995e:	f1a2 0314 	sub.w	r3, r2, #20
 8009962:	2b1e      	cmp	r3, #30
 8009964:	bfd6      	itet	le
 8009966:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800996a:	2201      	movgt	r2, #1
 800996c:	40da      	lsrle	r2, r3
 800996e:	2300      	movs	r3, #0
 8009970:	4619      	mov	r1, r3
 8009972:	4610      	mov	r0, r2
 8009974:	ec41 0b10 	vmov	d0, r0, r1
 8009978:	b002      	add	sp, #8
 800997a:	4770      	bx	lr
 800997c:	7ff00000 	.word	0x7ff00000

08009980 <__b2d>:
 8009980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009984:	6906      	ldr	r6, [r0, #16]
 8009986:	f100 0814 	add.w	r8, r0, #20
 800998a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800998e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009992:	1f37      	subs	r7, r6, #4
 8009994:	4610      	mov	r0, r2
 8009996:	f7ff fd4d 	bl	8009434 <__hi0bits>
 800999a:	f1c0 0320 	rsb	r3, r0, #32
 800999e:	280a      	cmp	r0, #10
 80099a0:	600b      	str	r3, [r1, #0]
 80099a2:	491d      	ldr	r1, [pc, #116]	@ (8009a18 <__b2d+0x98>)
 80099a4:	dc16      	bgt.n	80099d4 <__b2d+0x54>
 80099a6:	f1c0 0c0b 	rsb	ip, r0, #11
 80099aa:	45b8      	cmp	r8, r7
 80099ac:	f100 0015 	add.w	r0, r0, #21
 80099b0:	fa22 f30c 	lsr.w	r3, r2, ip
 80099b4:	fa02 f000 	lsl.w	r0, r2, r0
 80099b8:	ea43 0501 	orr.w	r5, r3, r1
 80099bc:	bf34      	ite	cc
 80099be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80099c2:	2300      	movcs	r3, #0
 80099c4:	fa23 f30c 	lsr.w	r3, r3, ip
 80099c8:	4303      	orrs	r3, r0
 80099ca:	461c      	mov	r4, r3
 80099cc:	ec45 4b10 	vmov	d0, r4, r5
 80099d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d4:	45b8      	cmp	r8, r7
 80099d6:	bf3a      	itte	cc
 80099d8:	f1a6 0708 	subcc.w	r7, r6, #8
 80099dc:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80099e0:	2300      	movcs	r3, #0
 80099e2:	380b      	subs	r0, #11
 80099e4:	d014      	beq.n	8009a10 <__b2d+0x90>
 80099e6:	f1c0 0120 	rsb	r1, r0, #32
 80099ea:	4082      	lsls	r2, r0
 80099ec:	4547      	cmp	r7, r8
 80099ee:	fa23 f401 	lsr.w	r4, r3, r1
 80099f2:	fa03 f300 	lsl.w	r3, r3, r0
 80099f6:	ea42 0204 	orr.w	r2, r2, r4
 80099fa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80099fe:	bf8c      	ite	hi
 8009a00:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009a04:	2200      	movls	r2, #0
 8009a06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009a0a:	40ca      	lsrs	r2, r1
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	e7dc      	b.n	80099ca <__b2d+0x4a>
 8009a10:	ea42 0501 	orr.w	r5, r2, r1
 8009a14:	e7d9      	b.n	80099ca <__b2d+0x4a>
 8009a16:	bf00      	nop
 8009a18:	3ff00000 	.word	0x3ff00000

08009a1c <__d2b>:
 8009a1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a20:	460f      	mov	r7, r1
 8009a22:	2101      	movs	r1, #1
 8009a24:	4616      	mov	r6, r2
 8009a26:	ec59 8b10 	vmov	r8, r9, d0
 8009a2a:	f7ff fc0f 	bl	800924c <_Balloc>
 8009a2e:	4604      	mov	r4, r0
 8009a30:	b930      	cbnz	r0, 8009a40 <__d2b+0x24>
 8009a32:	4602      	mov	r2, r0
 8009a34:	4b23      	ldr	r3, [pc, #140]	@ (8009ac4 <__d2b+0xa8>)
 8009a36:	f240 310f 	movw	r1, #783	@ 0x30f
 8009a3a:	4823      	ldr	r0, [pc, #140]	@ (8009ac8 <__d2b+0xac>)
 8009a3c:	f001 f998 	bl	800ad70 <__assert_func>
 8009a40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a48:	b10d      	cbz	r5, 8009a4e <__d2b+0x32>
 8009a4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	f1b8 0300 	subs.w	r3, r8, #0
 8009a54:	d023      	beq.n	8009a9e <__d2b+0x82>
 8009a56:	4668      	mov	r0, sp
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	f7ff fd0a 	bl	8009472 <__lo0bits>
 8009a5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a62:	b1d0      	cbz	r0, 8009a9a <__d2b+0x7e>
 8009a64:	f1c0 0320 	rsb	r3, r0, #32
 8009a68:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6c:	40c2      	lsrs	r2, r0
 8009a6e:	430b      	orrs	r3, r1
 8009a70:	9201      	str	r2, [sp, #4]
 8009a72:	6163      	str	r3, [r4, #20]
 8009a74:	9b01      	ldr	r3, [sp, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	61a3      	str	r3, [r4, #24]
 8009a7a:	bf0c      	ite	eq
 8009a7c:	2201      	moveq	r2, #1
 8009a7e:	2202      	movne	r2, #2
 8009a80:	6122      	str	r2, [r4, #16]
 8009a82:	b1a5      	cbz	r5, 8009aae <__d2b+0x92>
 8009a84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009a88:	4405      	add	r5, r0
 8009a8a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009a8e:	603d      	str	r5, [r7, #0]
 8009a90:	6030      	str	r0, [r6, #0]
 8009a92:	4620      	mov	r0, r4
 8009a94:	b003      	add	sp, #12
 8009a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a9a:	6161      	str	r1, [r4, #20]
 8009a9c:	e7ea      	b.n	8009a74 <__d2b+0x58>
 8009a9e:	a801      	add	r0, sp, #4
 8009aa0:	f7ff fce7 	bl	8009472 <__lo0bits>
 8009aa4:	9b01      	ldr	r3, [sp, #4]
 8009aa6:	3020      	adds	r0, #32
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	6163      	str	r3, [r4, #20]
 8009aac:	e7e8      	b.n	8009a80 <__d2b+0x64>
 8009aae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009ab2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ab6:	6038      	str	r0, [r7, #0]
 8009ab8:	6918      	ldr	r0, [r3, #16]
 8009aba:	f7ff fcbb 	bl	8009434 <__hi0bits>
 8009abe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ac2:	e7e5      	b.n	8009a90 <__d2b+0x74>
 8009ac4:	0800bbe9 	.word	0x0800bbe9
 8009ac8:	0800bbfa 	.word	0x0800bbfa

08009acc <__ratio>:
 8009acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad0:	b085      	sub	sp, #20
 8009ad2:	e9cd 1000 	strd	r1, r0, [sp]
 8009ad6:	a902      	add	r1, sp, #8
 8009ad8:	f7ff ff52 	bl	8009980 <__b2d>
 8009adc:	a903      	add	r1, sp, #12
 8009ade:	9800      	ldr	r0, [sp, #0]
 8009ae0:	ec55 4b10 	vmov	r4, r5, d0
 8009ae4:	f7ff ff4c 	bl	8009980 <__b2d>
 8009ae8:	9b01      	ldr	r3, [sp, #4]
 8009aea:	462f      	mov	r7, r5
 8009aec:	4620      	mov	r0, r4
 8009aee:	6919      	ldr	r1, [r3, #16]
 8009af0:	9b00      	ldr	r3, [sp, #0]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	1ac9      	subs	r1, r1, r3
 8009af6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009afa:	ec5b ab10 	vmov	sl, fp, d0
 8009afe:	1a9b      	subs	r3, r3, r2
 8009b00:	46d9      	mov	r9, fp
 8009b02:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	bfcd      	iteet	gt
 8009b0a:	462a      	movgt	r2, r5
 8009b0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b10:	465a      	movle	r2, fp
 8009b12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b16:	bfd8      	it	le
 8009b18:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009b1c:	4652      	mov	r2, sl
 8009b1e:	4639      	mov	r1, r7
 8009b20:	464b      	mov	r3, r9
 8009b22:	f7f6 fe77 	bl	8000814 <__aeabi_ddiv>
 8009b26:	ec41 0b10 	vmov	d0, r0, r1
 8009b2a:	b005      	add	sp, #20
 8009b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b30 <__copybits>:
 8009b30:	3901      	subs	r1, #1
 8009b32:	f102 0314 	add.w	r3, r2, #20
 8009b36:	1149      	asrs	r1, r1, #5
 8009b38:	b570      	push	{r4, r5, r6, lr}
 8009b3a:	3101      	adds	r1, #1
 8009b3c:	6914      	ldr	r4, [r2, #16]
 8009b3e:	1f05      	subs	r5, r0, #4
 8009b40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b48:	42a3      	cmp	r3, r4
 8009b4a:	d30c      	bcc.n	8009b66 <__copybits+0x36>
 8009b4c:	1aa3      	subs	r3, r4, r2
 8009b4e:	3211      	adds	r2, #17
 8009b50:	3b11      	subs	r3, #17
 8009b52:	f023 0303 	bic.w	r3, r3, #3
 8009b56:	42a2      	cmp	r2, r4
 8009b58:	bf88      	it	hi
 8009b5a:	2300      	movhi	r3, #0
 8009b5c:	4418      	add	r0, r3
 8009b5e:	2300      	movs	r3, #0
 8009b60:	4288      	cmp	r0, r1
 8009b62:	d305      	bcc.n	8009b70 <__copybits+0x40>
 8009b64:	bd70      	pop	{r4, r5, r6, pc}
 8009b66:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b6a:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b6e:	e7eb      	b.n	8009b48 <__copybits+0x18>
 8009b70:	f840 3b04 	str.w	r3, [r0], #4
 8009b74:	e7f4      	b.n	8009b60 <__copybits+0x30>

08009b76 <__any_on>:
 8009b76:	f100 0214 	add.w	r2, r0, #20
 8009b7a:	114b      	asrs	r3, r1, #5
 8009b7c:	6900      	ldr	r0, [r0, #16]
 8009b7e:	4298      	cmp	r0, r3
 8009b80:	b510      	push	{r4, lr}
 8009b82:	db11      	blt.n	8009ba8 <__any_on+0x32>
 8009b84:	dd0a      	ble.n	8009b9c <__any_on+0x26>
 8009b86:	f011 011f 	ands.w	r1, r1, #31
 8009b8a:	d007      	beq.n	8009b9c <__any_on+0x26>
 8009b8c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b90:	fa24 f001 	lsr.w	r0, r4, r1
 8009b94:	fa00 f101 	lsl.w	r1, r0, r1
 8009b98:	428c      	cmp	r4, r1
 8009b9a:	d10b      	bne.n	8009bb4 <__any_on+0x3e>
 8009b9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d803      	bhi.n	8009bac <__any_on+0x36>
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	bd10      	pop	{r4, pc}
 8009ba8:	4603      	mov	r3, r0
 8009baa:	e7f7      	b.n	8009b9c <__any_on+0x26>
 8009bac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bb0:	2900      	cmp	r1, #0
 8009bb2:	d0f5      	beq.n	8009ba0 <__any_on+0x2a>
 8009bb4:	2001      	movs	r0, #1
 8009bb6:	e7f6      	b.n	8009ba6 <__any_on+0x30>

08009bb8 <sulp>:
 8009bb8:	b570      	push	{r4, r5, r6, lr}
 8009bba:	4604      	mov	r4, r0
 8009bbc:	460d      	mov	r5, r1
 8009bbe:	4616      	mov	r6, r2
 8009bc0:	ec45 4b10 	vmov	d0, r4, r5
 8009bc4:	f7ff feb6 	bl	8009934 <__ulp>
 8009bc8:	ec51 0b10 	vmov	r0, r1, d0
 8009bcc:	b17e      	cbz	r6, 8009bee <sulp+0x36>
 8009bce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009bd2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	dd09      	ble.n	8009bee <sulp+0x36>
 8009bda:	051b      	lsls	r3, r3, #20
 8009bdc:	2400      	movs	r4, #0
 8009bde:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009be2:	4622      	mov	r2, r4
 8009be4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009be8:	462b      	mov	r3, r5
 8009bea:	f7f6 fce9 	bl	80005c0 <__aeabi_dmul>
 8009bee:	ec41 0b10 	vmov	d0, r0, r1
 8009bf2:	bd70      	pop	{r4, r5, r6, pc}
 8009bf4:	0000      	movs	r0, r0
	...

08009bf8 <_strtod_l>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	b09f      	sub	sp, #124	@ 0x7c
 8009bfe:	460c      	mov	r4, r1
 8009c00:	f04f 0a00 	mov.w	sl, #0
 8009c04:	f04f 0b00 	mov.w	fp, #0
 8009c08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	9005      	str	r0, [sp, #20]
 8009c0e:	921a      	str	r2, [sp, #104]	@ 0x68
 8009c10:	460a      	mov	r2, r1
 8009c12:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c14:	7811      	ldrb	r1, [r2, #0]
 8009c16:	292b      	cmp	r1, #43	@ 0x2b
 8009c18:	d04a      	beq.n	8009cb0 <_strtod_l+0xb8>
 8009c1a:	d838      	bhi.n	8009c8e <_strtod_l+0x96>
 8009c1c:	290d      	cmp	r1, #13
 8009c1e:	d832      	bhi.n	8009c86 <_strtod_l+0x8e>
 8009c20:	2908      	cmp	r1, #8
 8009c22:	d832      	bhi.n	8009c8a <_strtod_l+0x92>
 8009c24:	2900      	cmp	r1, #0
 8009c26:	d03b      	beq.n	8009ca0 <_strtod_l+0xa8>
 8009c28:	2200      	movs	r2, #0
 8009c2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009c2e:	782a      	ldrb	r2, [r5, #0]
 8009c30:	2a30      	cmp	r2, #48	@ 0x30
 8009c32:	f040 80b2 	bne.w	8009d9a <_strtod_l+0x1a2>
 8009c36:	786a      	ldrb	r2, [r5, #1]
 8009c38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009c3c:	2a58      	cmp	r2, #88	@ 0x58
 8009c3e:	d16e      	bne.n	8009d1e <_strtod_l+0x126>
 8009c40:	9302      	str	r3, [sp, #8]
 8009c42:	a919      	add	r1, sp, #100	@ 0x64
 8009c44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c46:	4a90      	ldr	r2, [pc, #576]	@ (8009e88 <_strtod_l+0x290>)
 8009c48:	9301      	str	r3, [sp, #4]
 8009c4a:	ab1a      	add	r3, sp, #104	@ 0x68
 8009c4c:	9805      	ldr	r0, [sp, #20]
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009c52:	f001 f925 	bl	800aea0 <__gethex>
 8009c56:	f010 060f 	ands.w	r6, r0, #15
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	d005      	beq.n	8009c6a <_strtod_l+0x72>
 8009c5e:	2e06      	cmp	r6, #6
 8009c60:	d128      	bne.n	8009cb4 <_strtod_l+0xbc>
 8009c62:	3501      	adds	r5, #1
 8009c64:	2300      	movs	r3, #0
 8009c66:	9519      	str	r5, [sp, #100]	@ 0x64
 8009c68:	930e      	str	r3, [sp, #56]	@ 0x38
 8009c6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f040 858e 	bne.w	800a78e <_strtod_l+0xb96>
 8009c72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c74:	b1cb      	cbz	r3, 8009caa <_strtod_l+0xb2>
 8009c76:	4652      	mov	r2, sl
 8009c78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009c7c:	ec43 2b10 	vmov	d0, r2, r3
 8009c80:	b01f      	add	sp, #124	@ 0x7c
 8009c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c86:	2920      	cmp	r1, #32
 8009c88:	d1ce      	bne.n	8009c28 <_strtod_l+0x30>
 8009c8a:	3201      	adds	r2, #1
 8009c8c:	e7c1      	b.n	8009c12 <_strtod_l+0x1a>
 8009c8e:	292d      	cmp	r1, #45	@ 0x2d
 8009c90:	d1ca      	bne.n	8009c28 <_strtod_l+0x30>
 8009c92:	2101      	movs	r1, #1
 8009c94:	910e      	str	r1, [sp, #56]	@ 0x38
 8009c96:	1c51      	adds	r1, r2, #1
 8009c98:	9119      	str	r1, [sp, #100]	@ 0x64
 8009c9a:	7852      	ldrb	r2, [r2, #1]
 8009c9c:	2a00      	cmp	r2, #0
 8009c9e:	d1c5      	bne.n	8009c2c <_strtod_l+0x34>
 8009ca0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009ca2:	9419      	str	r4, [sp, #100]	@ 0x64
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f040 8570 	bne.w	800a78a <_strtod_l+0xb92>
 8009caa:	4652      	mov	r2, sl
 8009cac:	465b      	mov	r3, fp
 8009cae:	e7e5      	b.n	8009c7c <_strtod_l+0x84>
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	e7ef      	b.n	8009c94 <_strtod_l+0x9c>
 8009cb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009cb6:	b13a      	cbz	r2, 8009cc8 <_strtod_l+0xd0>
 8009cb8:	2135      	movs	r1, #53	@ 0x35
 8009cba:	a81c      	add	r0, sp, #112	@ 0x70
 8009cbc:	f7ff ff38 	bl	8009b30 <__copybits>
 8009cc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cc2:	9805      	ldr	r0, [sp, #20]
 8009cc4:	f7ff fb02 	bl	80092cc <_Bfree>
 8009cc8:	3e01      	subs	r6, #1
 8009cca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009ccc:	2e04      	cmp	r6, #4
 8009cce:	d806      	bhi.n	8009cde <_strtod_l+0xe6>
 8009cd0:	e8df f006 	tbb	[pc, r6]
 8009cd4:	201d0314 	.word	0x201d0314
 8009cd8:	14          	.byte	0x14
 8009cd9:	00          	.byte	0x00
 8009cda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009cde:	05e1      	lsls	r1, r4, #23
 8009ce0:	bf48      	it	mi
 8009ce2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009ce6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009cea:	0d1b      	lsrs	r3, r3, #20
 8009cec:	051b      	lsls	r3, r3, #20
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1bb      	bne.n	8009c6a <_strtod_l+0x72>
 8009cf2:	f7fe fb07 	bl	8008304 <__errno>
 8009cf6:	2322      	movs	r3, #34	@ 0x22
 8009cf8:	6003      	str	r3, [r0, #0]
 8009cfa:	e7b6      	b.n	8009c6a <_strtod_l+0x72>
 8009cfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009d00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009d04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009d08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009d0c:	e7e7      	b.n	8009cde <_strtod_l+0xe6>
 8009d0e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009e90 <_strtod_l+0x298>
 8009d12:	e7e4      	b.n	8009cde <_strtod_l+0xe6>
 8009d14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009d18:	f04f 3aff 	mov.w	sl, #4294967295
 8009d1c:	e7df      	b.n	8009cde <_strtod_l+0xe6>
 8009d1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d20:	1c5a      	adds	r2, r3, #1
 8009d22:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d24:	785b      	ldrb	r3, [r3, #1]
 8009d26:	2b30      	cmp	r3, #48	@ 0x30
 8009d28:	d0f9      	beq.n	8009d1e <_strtod_l+0x126>
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d09d      	beq.n	8009c6a <_strtod_l+0x72>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	2700      	movs	r7, #0
 8009d32:	9308      	str	r3, [sp, #32]
 8009d34:	220a      	movs	r2, #10
 8009d36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d38:	46b9      	mov	r9, r7
 8009d3a:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009d3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d3e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009d40:	7805      	ldrb	r5, [r0, #0]
 8009d42:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009d46:	b2d9      	uxtb	r1, r3
 8009d48:	2909      	cmp	r1, #9
 8009d4a:	d928      	bls.n	8009d9e <_strtod_l+0x1a6>
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	494f      	ldr	r1, [pc, #316]	@ (8009e8c <_strtod_l+0x294>)
 8009d50:	f000 ffd6 	bl	800ad00 <strncmp>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d032      	beq.n	8009dbe <_strtod_l+0x1c6>
 8009d58:	2000      	movs	r0, #0
 8009d5a:	462a      	mov	r2, r5
 8009d5c:	464d      	mov	r5, r9
 8009d5e:	4603      	mov	r3, r0
 8009d60:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d62:	2a65      	cmp	r2, #101	@ 0x65
 8009d64:	d001      	beq.n	8009d6a <_strtod_l+0x172>
 8009d66:	2a45      	cmp	r2, #69	@ 0x45
 8009d68:	d114      	bne.n	8009d94 <_strtod_l+0x19c>
 8009d6a:	b91d      	cbnz	r5, 8009d74 <_strtod_l+0x17c>
 8009d6c:	9a08      	ldr	r2, [sp, #32]
 8009d6e:	4302      	orrs	r2, r0
 8009d70:	d096      	beq.n	8009ca0 <_strtod_l+0xa8>
 8009d72:	2500      	movs	r5, #0
 8009d74:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009d76:	1c62      	adds	r2, r4, #1
 8009d78:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d7a:	7862      	ldrb	r2, [r4, #1]
 8009d7c:	2a2b      	cmp	r2, #43	@ 0x2b
 8009d7e:	d079      	beq.n	8009e74 <_strtod_l+0x27c>
 8009d80:	2a2d      	cmp	r2, #45	@ 0x2d
 8009d82:	d07d      	beq.n	8009e80 <_strtod_l+0x288>
 8009d84:	f04f 0c00 	mov.w	ip, #0
 8009d88:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009d8c:	2909      	cmp	r1, #9
 8009d8e:	f240 8085 	bls.w	8009e9c <_strtod_l+0x2a4>
 8009d92:	9419      	str	r4, [sp, #100]	@ 0x64
 8009d94:	f04f 0800 	mov.w	r8, #0
 8009d98:	e0a5      	b.n	8009ee6 <_strtod_l+0x2ee>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	e7c8      	b.n	8009d30 <_strtod_l+0x138>
 8009d9e:	f1b9 0f08 	cmp.w	r9, #8
 8009da2:	f100 0001 	add.w	r0, r0, #1
 8009da6:	f109 0901 	add.w	r9, r9, #1
 8009daa:	bfd4      	ite	le
 8009dac:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009dae:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009db2:	9019      	str	r0, [sp, #100]	@ 0x64
 8009db4:	bfdc      	itt	le
 8009db6:	fb02 3301 	mlale	r3, r2, r1, r3
 8009dba:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009dbc:	e7bf      	b.n	8009d3e <_strtod_l+0x146>
 8009dbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dc0:	1c5a      	adds	r2, r3, #1
 8009dc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009dc4:	785a      	ldrb	r2, [r3, #1]
 8009dc6:	f1b9 0f00 	cmp.w	r9, #0
 8009dca:	d03a      	beq.n	8009e42 <_strtod_l+0x24a>
 8009dcc:	464d      	mov	r5, r9
 8009dce:	900a      	str	r0, [sp, #40]	@ 0x28
 8009dd0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009dd4:	2b09      	cmp	r3, #9
 8009dd6:	d912      	bls.n	8009dfe <_strtod_l+0x206>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e7c2      	b.n	8009d62 <_strtod_l+0x16a>
 8009ddc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dde:	3001      	adds	r0, #1
 8009de0:	1c5a      	adds	r2, r3, #1
 8009de2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009de4:	785a      	ldrb	r2, [r3, #1]
 8009de6:	2a30      	cmp	r2, #48	@ 0x30
 8009de8:	d0f8      	beq.n	8009ddc <_strtod_l+0x1e4>
 8009dea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009dee:	2b08      	cmp	r3, #8
 8009df0:	f200 84d2 	bhi.w	800a798 <_strtod_l+0xba0>
 8009df4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009df6:	2000      	movs	r0, #0
 8009df8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009dfe:	3a30      	subs	r2, #48	@ 0x30
 8009e00:	f100 0301 	add.w	r3, r0, #1
 8009e04:	d017      	beq.n	8009e36 <_strtod_l+0x23e>
 8009e06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e08:	462e      	mov	r6, r5
 8009e0a:	f04f 0e0a 	mov.w	lr, #10
 8009e0e:	4419      	add	r1, r3
 8009e10:	910a      	str	r1, [sp, #40]	@ 0x28
 8009e12:	1c71      	adds	r1, r6, #1
 8009e14:	eba1 0c05 	sub.w	ip, r1, r5
 8009e18:	4563      	cmp	r3, ip
 8009e1a:	dc14      	bgt.n	8009e46 <_strtod_l+0x24e>
 8009e1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009e20:	182b      	adds	r3, r5, r0
 8009e22:	3501      	adds	r5, #1
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	4405      	add	r5, r0
 8009e28:	dc1a      	bgt.n	8009e60 <_strtod_l+0x268>
 8009e2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e2c:	230a      	movs	r3, #10
 8009e2e:	fb03 2301 	mla	r3, r3, r1, r2
 8009e32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e34:	2300      	movs	r3, #0
 8009e36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009e38:	4618      	mov	r0, r3
 8009e3a:	1c51      	adds	r1, r2, #1
 8009e3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009e3e:	7852      	ldrb	r2, [r2, #1]
 8009e40:	e7c6      	b.n	8009dd0 <_strtod_l+0x1d8>
 8009e42:	4648      	mov	r0, r9
 8009e44:	e7cf      	b.n	8009de6 <_strtod_l+0x1ee>
 8009e46:	2e08      	cmp	r6, #8
 8009e48:	dc05      	bgt.n	8009e56 <_strtod_l+0x25e>
 8009e4a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009e4c:	fb0e f606 	mul.w	r6, lr, r6
 8009e50:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009e52:	460e      	mov	r6, r1
 8009e54:	e7dd      	b.n	8009e12 <_strtod_l+0x21a>
 8009e56:	2910      	cmp	r1, #16
 8009e58:	bfd8      	it	le
 8009e5a:	fb0e f707 	mulle.w	r7, lr, r7
 8009e5e:	e7f8      	b.n	8009e52 <_strtod_l+0x25a>
 8009e60:	2b0f      	cmp	r3, #15
 8009e62:	bfdc      	itt	le
 8009e64:	230a      	movle	r3, #10
 8009e66:	fb03 2707 	mlale	r7, r3, r7, r2
 8009e6a:	e7e3      	b.n	8009e34 <_strtod_l+0x23c>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e70:	2301      	movs	r3, #1
 8009e72:	e77b      	b.n	8009d6c <_strtod_l+0x174>
 8009e74:	f04f 0c00 	mov.w	ip, #0
 8009e78:	1ca2      	adds	r2, r4, #2
 8009e7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e7c:	78a2      	ldrb	r2, [r4, #2]
 8009e7e:	e783      	b.n	8009d88 <_strtod_l+0x190>
 8009e80:	f04f 0c01 	mov.w	ip, #1
 8009e84:	e7f8      	b.n	8009e78 <_strtod_l+0x280>
 8009e86:	bf00      	nop
 8009e88:	0800be1c 	.word	0x0800be1c
 8009e8c:	0800bc53 	.word	0x0800bc53
 8009e90:	7ff00000 	.word	0x7ff00000
 8009e94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009e96:	1c51      	adds	r1, r2, #1
 8009e98:	9119      	str	r1, [sp, #100]	@ 0x64
 8009e9a:	7852      	ldrb	r2, [r2, #1]
 8009e9c:	2a30      	cmp	r2, #48	@ 0x30
 8009e9e:	d0f9      	beq.n	8009e94 <_strtod_l+0x29c>
 8009ea0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009ea4:	2908      	cmp	r1, #8
 8009ea6:	f63f af75 	bhi.w	8009d94 <_strtod_l+0x19c>
 8009eaa:	3a30      	subs	r2, #48	@ 0x30
 8009eac:	f04f 080a 	mov.w	r8, #10
 8009eb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009eb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009eb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009eb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009eb8:	1c56      	adds	r6, r2, #1
 8009eba:	9619      	str	r6, [sp, #100]	@ 0x64
 8009ebc:	7852      	ldrb	r2, [r2, #1]
 8009ebe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009ec2:	f1be 0f09 	cmp.w	lr, #9
 8009ec6:	d939      	bls.n	8009f3c <_strtod_l+0x344>
 8009ec8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009eca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009ece:	1a76      	subs	r6, r6, r1
 8009ed0:	2e08      	cmp	r6, #8
 8009ed2:	dc03      	bgt.n	8009edc <_strtod_l+0x2e4>
 8009ed4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ed6:	4588      	cmp	r8, r1
 8009ed8:	bfa8      	it	ge
 8009eda:	4688      	movge	r8, r1
 8009edc:	f1bc 0f00 	cmp.w	ip, #0
 8009ee0:	d001      	beq.n	8009ee6 <_strtod_l+0x2ee>
 8009ee2:	f1c8 0800 	rsb	r8, r8, #0
 8009ee6:	2d00      	cmp	r5, #0
 8009ee8:	d14e      	bne.n	8009f88 <_strtod_l+0x390>
 8009eea:	9908      	ldr	r1, [sp, #32]
 8009eec:	4308      	orrs	r0, r1
 8009eee:	f47f aebc 	bne.w	8009c6a <_strtod_l+0x72>
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f47f aed4 	bne.w	8009ca0 <_strtod_l+0xa8>
 8009ef8:	2a69      	cmp	r2, #105	@ 0x69
 8009efa:	d028      	beq.n	8009f4e <_strtod_l+0x356>
 8009efc:	dc25      	bgt.n	8009f4a <_strtod_l+0x352>
 8009efe:	2a49      	cmp	r2, #73	@ 0x49
 8009f00:	d025      	beq.n	8009f4e <_strtod_l+0x356>
 8009f02:	2a4e      	cmp	r2, #78	@ 0x4e
 8009f04:	f47f aecc 	bne.w	8009ca0 <_strtod_l+0xa8>
 8009f08:	499a      	ldr	r1, [pc, #616]	@ (800a174 <_strtod_l+0x57c>)
 8009f0a:	a819      	add	r0, sp, #100	@ 0x64
 8009f0c:	f001 f9e8 	bl	800b2e0 <__match>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	f43f aec5 	beq.w	8009ca0 <_strtod_l+0xa8>
 8009f16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	2b28      	cmp	r3, #40	@ 0x28
 8009f1c:	d12e      	bne.n	8009f7c <_strtod_l+0x384>
 8009f1e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009f20:	4995      	ldr	r1, [pc, #596]	@ (800a178 <_strtod_l+0x580>)
 8009f22:	a819      	add	r0, sp, #100	@ 0x64
 8009f24:	f001 f9f0 	bl	800b308 <__hexnan>
 8009f28:	2805      	cmp	r0, #5
 8009f2a:	d127      	bne.n	8009f7c <_strtod_l+0x384>
 8009f2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f2e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009f32:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009f36:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009f3a:	e696      	b.n	8009c6a <_strtod_l+0x72>
 8009f3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f3e:	fb08 2101 	mla	r1, r8, r1, r2
 8009f42:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009f46:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f48:	e7b5      	b.n	8009eb6 <_strtod_l+0x2be>
 8009f4a:	2a6e      	cmp	r2, #110	@ 0x6e
 8009f4c:	e7da      	b.n	8009f04 <_strtod_l+0x30c>
 8009f4e:	498b      	ldr	r1, [pc, #556]	@ (800a17c <_strtod_l+0x584>)
 8009f50:	a819      	add	r0, sp, #100	@ 0x64
 8009f52:	f001 f9c5 	bl	800b2e0 <__match>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	f43f aea2 	beq.w	8009ca0 <_strtod_l+0xa8>
 8009f5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f5e:	a819      	add	r0, sp, #100	@ 0x64
 8009f60:	4987      	ldr	r1, [pc, #540]	@ (800a180 <_strtod_l+0x588>)
 8009f62:	3b01      	subs	r3, #1
 8009f64:	9319      	str	r3, [sp, #100]	@ 0x64
 8009f66:	f001 f9bb 	bl	800b2e0 <__match>
 8009f6a:	b910      	cbnz	r0, 8009f72 <_strtod_l+0x37a>
 8009f6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f6e:	3301      	adds	r3, #1
 8009f70:	9319      	str	r3, [sp, #100]	@ 0x64
 8009f72:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a190 <_strtod_l+0x598>
 8009f76:	f04f 0a00 	mov.w	sl, #0
 8009f7a:	e676      	b.n	8009c6a <_strtod_l+0x72>
 8009f7c:	4881      	ldr	r0, [pc, #516]	@ (800a184 <_strtod_l+0x58c>)
 8009f7e:	f000 feef 	bl	800ad60 <nan>
 8009f82:	ec5b ab10 	vmov	sl, fp, d0
 8009f86:	e670      	b.n	8009c6a <_strtod_l+0x72>
 8009f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f8a:	f1b9 0f00 	cmp.w	r9, #0
 8009f8e:	bf08      	it	eq
 8009f90:	46a9      	moveq	r9, r5
 8009f92:	2d10      	cmp	r5, #16
 8009f94:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009f96:	eba8 0303 	sub.w	r3, r8, r3
 8009f9a:	462c      	mov	r4, r5
 8009f9c:	bfa8      	it	ge
 8009f9e:	2410      	movge	r4, #16
 8009fa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fa2:	f7f6 fa93 	bl	80004cc <__aeabi_ui2d>
 8009fa6:	2d09      	cmp	r5, #9
 8009fa8:	4682      	mov	sl, r0
 8009faa:	468b      	mov	fp, r1
 8009fac:	dc13      	bgt.n	8009fd6 <_strtod_l+0x3de>
 8009fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f43f ae5a 	beq.w	8009c6a <_strtod_l+0x72>
 8009fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb8:	dd78      	ble.n	800a0ac <_strtod_l+0x4b4>
 8009fba:	2b16      	cmp	r3, #22
 8009fbc:	dc5f      	bgt.n	800a07e <_strtod_l+0x486>
 8009fbe:	4972      	ldr	r1, [pc, #456]	@ (800a188 <_strtod_l+0x590>)
 8009fc0:	4652      	mov	r2, sl
 8009fc2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009fc6:	465b      	mov	r3, fp
 8009fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fcc:	f7f6 faf8 	bl	80005c0 <__aeabi_dmul>
 8009fd0:	4682      	mov	sl, r0
 8009fd2:	468b      	mov	fp, r1
 8009fd4:	e649      	b.n	8009c6a <_strtod_l+0x72>
 8009fd6:	4b6c      	ldr	r3, [pc, #432]	@ (800a188 <_strtod_l+0x590>)
 8009fd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009fdc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009fe0:	f7f6 faee 	bl	80005c0 <__aeabi_dmul>
 8009fe4:	4682      	mov	sl, r0
 8009fe6:	468b      	mov	fp, r1
 8009fe8:	4638      	mov	r0, r7
 8009fea:	f7f6 fa6f 	bl	80004cc <__aeabi_ui2d>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4650      	mov	r0, sl
 8009ff4:	4659      	mov	r1, fp
 8009ff6:	f7f6 f92d 	bl	8000254 <__adddf3>
 8009ffa:	2d0f      	cmp	r5, #15
 8009ffc:	4682      	mov	sl, r0
 8009ffe:	468b      	mov	fp, r1
 800a000:	ddd5      	ble.n	8009fae <_strtod_l+0x3b6>
 800a002:	1b2c      	subs	r4, r5, r4
 800a004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a006:	441c      	add	r4, r3
 800a008:	2c00      	cmp	r4, #0
 800a00a:	f340 8093 	ble.w	800a134 <_strtod_l+0x53c>
 800a00e:	f014 030f 	ands.w	r3, r4, #15
 800a012:	d00a      	beq.n	800a02a <_strtod_l+0x432>
 800a014:	495c      	ldr	r1, [pc, #368]	@ (800a188 <_strtod_l+0x590>)
 800a016:	4652      	mov	r2, sl
 800a018:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a01c:	465b      	mov	r3, fp
 800a01e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a022:	f7f6 facd 	bl	80005c0 <__aeabi_dmul>
 800a026:	4682      	mov	sl, r0
 800a028:	468b      	mov	fp, r1
 800a02a:	f034 040f 	bics.w	r4, r4, #15
 800a02e:	d073      	beq.n	800a118 <_strtod_l+0x520>
 800a030:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a034:	dd49      	ble.n	800a0ca <_strtod_l+0x4d2>
 800a036:	2400      	movs	r4, #0
 800a038:	46a0      	mov	r8, r4
 800a03a:	46a1      	mov	r9, r4
 800a03c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a03e:	2322      	movs	r3, #34	@ 0x22
 800a040:	9a05      	ldr	r2, [sp, #20]
 800a042:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a190 <_strtod_l+0x598>
 800a046:	f04f 0a00 	mov.w	sl, #0
 800a04a:	6013      	str	r3, [r2, #0]
 800a04c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f43f ae0b 	beq.w	8009c6a <_strtod_l+0x72>
 800a054:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a056:	9805      	ldr	r0, [sp, #20]
 800a058:	f7ff f938 	bl	80092cc <_Bfree>
 800a05c:	4649      	mov	r1, r9
 800a05e:	9805      	ldr	r0, [sp, #20]
 800a060:	f7ff f934 	bl	80092cc <_Bfree>
 800a064:	4641      	mov	r1, r8
 800a066:	9805      	ldr	r0, [sp, #20]
 800a068:	f7ff f930 	bl	80092cc <_Bfree>
 800a06c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a06e:	9805      	ldr	r0, [sp, #20]
 800a070:	f7ff f92c 	bl	80092cc <_Bfree>
 800a074:	4621      	mov	r1, r4
 800a076:	9805      	ldr	r0, [sp, #20]
 800a078:	f7ff f928 	bl	80092cc <_Bfree>
 800a07c:	e5f5      	b.n	8009c6a <_strtod_l+0x72>
 800a07e:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a082:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a084:	4293      	cmp	r3, r2
 800a086:	dbbc      	blt.n	800a002 <_strtod_l+0x40a>
 800a088:	f1c5 050f 	rsb	r5, r5, #15
 800a08c:	4c3e      	ldr	r4, [pc, #248]	@ (800a188 <_strtod_l+0x590>)
 800a08e:	4652      	mov	r2, sl
 800a090:	465b      	mov	r3, fp
 800a092:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a09a:	f7f6 fa91 	bl	80005c0 <__aeabi_dmul>
 800a09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0a0:	1b5d      	subs	r5, r3, r5
 800a0a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a0a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a0aa:	e78f      	b.n	8009fcc <_strtod_l+0x3d4>
 800a0ac:	3316      	adds	r3, #22
 800a0ae:	dba8      	blt.n	800a002 <_strtod_l+0x40a>
 800a0b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0b2:	4650      	mov	r0, sl
 800a0b4:	4659      	mov	r1, fp
 800a0b6:	eba3 0808 	sub.w	r8, r3, r8
 800a0ba:	4b33      	ldr	r3, [pc, #204]	@ (800a188 <_strtod_l+0x590>)
 800a0bc:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a0c0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a0c4:	f7f6 fba6 	bl	8000814 <__aeabi_ddiv>
 800a0c8:	e782      	b.n	8009fd0 <_strtod_l+0x3d8>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	1124      	asrs	r4, r4, #4
 800a0ce:	4650      	mov	r0, sl
 800a0d0:	4659      	mov	r1, fp
 800a0d2:	4f2e      	ldr	r7, [pc, #184]	@ (800a18c <_strtod_l+0x594>)
 800a0d4:	461e      	mov	r6, r3
 800a0d6:	2c01      	cmp	r4, #1
 800a0d8:	dc21      	bgt.n	800a11e <_strtod_l+0x526>
 800a0da:	b10b      	cbz	r3, 800a0e0 <_strtod_l+0x4e8>
 800a0dc:	4682      	mov	sl, r0
 800a0de:	468b      	mov	fp, r1
 800a0e0:	492a      	ldr	r1, [pc, #168]	@ (800a18c <_strtod_l+0x594>)
 800a0e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a0e6:	4652      	mov	r2, sl
 800a0e8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a0ec:	465b      	mov	r3, fp
 800a0ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0f2:	f7f6 fa65 	bl	80005c0 <__aeabi_dmul>
 800a0f6:	4b26      	ldr	r3, [pc, #152]	@ (800a190 <_strtod_l+0x598>)
 800a0f8:	460a      	mov	r2, r1
 800a0fa:	4682      	mov	sl, r0
 800a0fc:	400b      	ands	r3, r1
 800a0fe:	4925      	ldr	r1, [pc, #148]	@ (800a194 <_strtod_l+0x59c>)
 800a100:	428b      	cmp	r3, r1
 800a102:	d898      	bhi.n	800a036 <_strtod_l+0x43e>
 800a104:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a108:	428b      	cmp	r3, r1
 800a10a:	bf86      	itte	hi
 800a10c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a198 <_strtod_l+0x5a0>
 800a110:	f04f 3aff 	movhi.w	sl, #4294967295
 800a114:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a118:	2300      	movs	r3, #0
 800a11a:	9308      	str	r3, [sp, #32]
 800a11c:	e076      	b.n	800a20c <_strtod_l+0x614>
 800a11e:	07e2      	lsls	r2, r4, #31
 800a120:	d504      	bpl.n	800a12c <_strtod_l+0x534>
 800a122:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a126:	f7f6 fa4b 	bl	80005c0 <__aeabi_dmul>
 800a12a:	2301      	movs	r3, #1
 800a12c:	3601      	adds	r6, #1
 800a12e:	1064      	asrs	r4, r4, #1
 800a130:	3708      	adds	r7, #8
 800a132:	e7d0      	b.n	800a0d6 <_strtod_l+0x4de>
 800a134:	d0f0      	beq.n	800a118 <_strtod_l+0x520>
 800a136:	4264      	negs	r4, r4
 800a138:	f014 020f 	ands.w	r2, r4, #15
 800a13c:	d00a      	beq.n	800a154 <_strtod_l+0x55c>
 800a13e:	4b12      	ldr	r3, [pc, #72]	@ (800a188 <_strtod_l+0x590>)
 800a140:	4650      	mov	r0, sl
 800a142:	4659      	mov	r1, fp
 800a144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14c:	f7f6 fb62 	bl	8000814 <__aeabi_ddiv>
 800a150:	4682      	mov	sl, r0
 800a152:	468b      	mov	fp, r1
 800a154:	1124      	asrs	r4, r4, #4
 800a156:	d0df      	beq.n	800a118 <_strtod_l+0x520>
 800a158:	2c1f      	cmp	r4, #31
 800a15a:	dd1f      	ble.n	800a19c <_strtod_l+0x5a4>
 800a15c:	2400      	movs	r4, #0
 800a15e:	46a0      	mov	r8, r4
 800a160:	46a1      	mov	r9, r4
 800a162:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a164:	2322      	movs	r3, #34	@ 0x22
 800a166:	9a05      	ldr	r2, [sp, #20]
 800a168:	f04f 0a00 	mov.w	sl, #0
 800a16c:	f04f 0b00 	mov.w	fp, #0
 800a170:	6013      	str	r3, [r2, #0]
 800a172:	e76b      	b.n	800a04c <_strtod_l+0x454>
 800a174:	0800bb41 	.word	0x0800bb41
 800a178:	0800be08 	.word	0x0800be08
 800a17c:	0800bb39 	.word	0x0800bb39
 800a180:	0800bb70 	.word	0x0800bb70
 800a184:	0800bca9 	.word	0x0800bca9
 800a188:	0800bd40 	.word	0x0800bd40
 800a18c:	0800bd18 	.word	0x0800bd18
 800a190:	7ff00000 	.word	0x7ff00000
 800a194:	7ca00000 	.word	0x7ca00000
 800a198:	7fefffff 	.word	0x7fefffff
 800a19c:	f014 0310 	ands.w	r3, r4, #16
 800a1a0:	4650      	mov	r0, sl
 800a1a2:	4659      	mov	r1, fp
 800a1a4:	4ea9      	ldr	r6, [pc, #676]	@ (800a44c <_strtod_l+0x854>)
 800a1a6:	bf18      	it	ne
 800a1a8:	236a      	movne	r3, #106	@ 0x6a
 800a1aa:	9308      	str	r3, [sp, #32]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	07e7      	lsls	r7, r4, #31
 800a1b0:	d504      	bpl.n	800a1bc <_strtod_l+0x5c4>
 800a1b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a1b6:	f7f6 fa03 	bl	80005c0 <__aeabi_dmul>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	1064      	asrs	r4, r4, #1
 800a1be:	f106 0608 	add.w	r6, r6, #8
 800a1c2:	d1f4      	bne.n	800a1ae <_strtod_l+0x5b6>
 800a1c4:	b10b      	cbz	r3, 800a1ca <_strtod_l+0x5d2>
 800a1c6:	4682      	mov	sl, r0
 800a1c8:	468b      	mov	fp, r1
 800a1ca:	9b08      	ldr	r3, [sp, #32]
 800a1cc:	b1b3      	cbz	r3, 800a1fc <_strtod_l+0x604>
 800a1ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a1d2:	4659      	mov	r1, fp
 800a1d4:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	dd0f      	ble.n	800a1fc <_strtod_l+0x604>
 800a1dc:	2b1f      	cmp	r3, #31
 800a1de:	dd56      	ble.n	800a28e <_strtod_l+0x696>
 800a1e0:	2b34      	cmp	r3, #52	@ 0x34
 800a1e2:	f04f 0a00 	mov.w	sl, #0
 800a1e6:	bfdb      	ittet	le
 800a1e8:	f04f 33ff 	movle.w	r3, #4294967295
 800a1ec:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a1f0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a1f4:	4093      	lslle	r3, r2
 800a1f6:	bfd8      	it	le
 800a1f8:	ea03 0b01 	andle.w	fp, r3, r1
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	2300      	movs	r3, #0
 800a200:	4650      	mov	r0, sl
 800a202:	4659      	mov	r1, fp
 800a204:	f7f6 fc44 	bl	8000a90 <__aeabi_dcmpeq>
 800a208:	2800      	cmp	r0, #0
 800a20a:	d1a7      	bne.n	800a15c <_strtod_l+0x564>
 800a20c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a20e:	464a      	mov	r2, r9
 800a210:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	462b      	mov	r3, r5
 800a216:	9805      	ldr	r0, [sp, #20]
 800a218:	f7ff f8c2 	bl	80093a0 <__s2b>
 800a21c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a21e:	2800      	cmp	r0, #0
 800a220:	f43f af09 	beq.w	800a036 <_strtod_l+0x43e>
 800a224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a226:	2400      	movs	r4, #0
 800a228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a22a:	2a00      	cmp	r2, #0
 800a22c:	eba3 0308 	sub.w	r3, r3, r8
 800a230:	46a0      	mov	r8, r4
 800a232:	bfa8      	it	ge
 800a234:	2300      	movge	r3, #0
 800a236:	9312      	str	r3, [sp, #72]	@ 0x48
 800a238:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a23c:	9316      	str	r3, [sp, #88]	@ 0x58
 800a23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a240:	9805      	ldr	r0, [sp, #20]
 800a242:	6859      	ldr	r1, [r3, #4]
 800a244:	f7ff f802 	bl	800924c <_Balloc>
 800a248:	4681      	mov	r9, r0
 800a24a:	2800      	cmp	r0, #0
 800a24c:	f43f aef7 	beq.w	800a03e <_strtod_l+0x446>
 800a250:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a252:	300c      	adds	r0, #12
 800a254:	691a      	ldr	r2, [r3, #16]
 800a256:	f103 010c 	add.w	r1, r3, #12
 800a25a:	3202      	adds	r2, #2
 800a25c:	0092      	lsls	r2, r2, #2
 800a25e:	f000 fd71 	bl	800ad44 <memcpy>
 800a262:	aa1c      	add	r2, sp, #112	@ 0x70
 800a264:	a91b      	add	r1, sp, #108	@ 0x6c
 800a266:	9805      	ldr	r0, [sp, #20]
 800a268:	ec4b ab10 	vmov	d0, sl, fp
 800a26c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a270:	f7ff fbd4 	bl	8009a1c <__d2b>
 800a274:	901a      	str	r0, [sp, #104]	@ 0x68
 800a276:	2800      	cmp	r0, #0
 800a278:	f43f aee1 	beq.w	800a03e <_strtod_l+0x446>
 800a27c:	2101      	movs	r1, #1
 800a27e:	9805      	ldr	r0, [sp, #20]
 800a280:	f7ff f924 	bl	80094cc <__i2b>
 800a284:	4680      	mov	r8, r0
 800a286:	b948      	cbnz	r0, 800a29c <_strtod_l+0x6a4>
 800a288:	f04f 0800 	mov.w	r8, #0
 800a28c:	e6d7      	b.n	800a03e <_strtod_l+0x446>
 800a28e:	f04f 32ff 	mov.w	r2, #4294967295
 800a292:	fa02 f303 	lsl.w	r3, r2, r3
 800a296:	ea03 0a0a 	and.w	sl, r3, sl
 800a29a:	e7af      	b.n	800a1fc <_strtod_l+0x604>
 800a29c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a29e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a2a0:	2d00      	cmp	r5, #0
 800a2a2:	bfa9      	itett	ge
 800a2a4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a2a6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a2a8:	18ef      	addge	r7, r5, r3
 800a2aa:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a2ac:	bfb8      	it	lt
 800a2ae:	1b5e      	sublt	r6, r3, r5
 800a2b0:	9b08      	ldr	r3, [sp, #32]
 800a2b2:	bfb8      	it	lt
 800a2b4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a2b6:	1aed      	subs	r5, r5, r3
 800a2b8:	4b65      	ldr	r3, [pc, #404]	@ (800a450 <_strtod_l+0x858>)
 800a2ba:	4415      	add	r5, r2
 800a2bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a2c0:	3d01      	subs	r5, #1
 800a2c2:	429d      	cmp	r5, r3
 800a2c4:	da4f      	bge.n	800a366 <_strtod_l+0x76e>
 800a2c6:	1b5b      	subs	r3, r3, r5
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	2b1f      	cmp	r3, #31
 800a2cc:	eba2 0203 	sub.w	r2, r2, r3
 800a2d0:	dc3d      	bgt.n	800a34e <_strtod_l+0x756>
 800a2d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a2d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a2d8:	2300      	movs	r3, #0
 800a2da:	9310      	str	r3, [sp, #64]	@ 0x40
 800a2dc:	18bd      	adds	r5, r7, r2
 800a2de:	9b08      	ldr	r3, [sp, #32]
 800a2e0:	4416      	add	r6, r2
 800a2e2:	42af      	cmp	r7, r5
 800a2e4:	441e      	add	r6, r3
 800a2e6:	463b      	mov	r3, r7
 800a2e8:	bfa8      	it	ge
 800a2ea:	462b      	movge	r3, r5
 800a2ec:	42b3      	cmp	r3, r6
 800a2ee:	bfa8      	it	ge
 800a2f0:	4633      	movge	r3, r6
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	bfc2      	ittt	gt
 800a2f6:	1aed      	subgt	r5, r5, r3
 800a2f8:	1af6      	subgt	r6, r6, r3
 800a2fa:	1aff      	subgt	r7, r7, r3
 800a2fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	dd16      	ble.n	800a330 <_strtod_l+0x738>
 800a302:	4641      	mov	r1, r8
 800a304:	461a      	mov	r2, r3
 800a306:	9805      	ldr	r0, [sp, #20]
 800a308:	f7ff f99a 	bl	8009640 <__pow5mult>
 800a30c:	4680      	mov	r8, r0
 800a30e:	2800      	cmp	r0, #0
 800a310:	d0ba      	beq.n	800a288 <_strtod_l+0x690>
 800a312:	4601      	mov	r1, r0
 800a314:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a316:	9805      	ldr	r0, [sp, #20]
 800a318:	f7ff f8ee 	bl	80094f8 <__multiply>
 800a31c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a31e:	2800      	cmp	r0, #0
 800a320:	f43f ae8d 	beq.w	800a03e <_strtod_l+0x446>
 800a324:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a326:	9805      	ldr	r0, [sp, #20]
 800a328:	f7fe ffd0 	bl	80092cc <_Bfree>
 800a32c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a32e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a330:	2d00      	cmp	r5, #0
 800a332:	dc1d      	bgt.n	800a370 <_strtod_l+0x778>
 800a334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a336:	2b00      	cmp	r3, #0
 800a338:	dd23      	ble.n	800a382 <_strtod_l+0x78a>
 800a33a:	4649      	mov	r1, r9
 800a33c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a33e:	9805      	ldr	r0, [sp, #20]
 800a340:	f7ff f97e 	bl	8009640 <__pow5mult>
 800a344:	4681      	mov	r9, r0
 800a346:	b9e0      	cbnz	r0, 800a382 <_strtod_l+0x78a>
 800a348:	f04f 0900 	mov.w	r9, #0
 800a34c:	e677      	b.n	800a03e <_strtod_l+0x446>
 800a34e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a352:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a354:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a358:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a35c:	35e2      	adds	r5, #226	@ 0xe2
 800a35e:	fa01 f305 	lsl.w	r3, r1, r5
 800a362:	9310      	str	r3, [sp, #64]	@ 0x40
 800a364:	e7ba      	b.n	800a2dc <_strtod_l+0x6e4>
 800a366:	2300      	movs	r3, #0
 800a368:	9310      	str	r3, [sp, #64]	@ 0x40
 800a36a:	2301      	movs	r3, #1
 800a36c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a36e:	e7b5      	b.n	800a2dc <_strtod_l+0x6e4>
 800a370:	462a      	mov	r2, r5
 800a372:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a374:	9805      	ldr	r0, [sp, #20]
 800a376:	f7ff f9bd 	bl	80096f4 <__lshift>
 800a37a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a37c:	2800      	cmp	r0, #0
 800a37e:	d1d9      	bne.n	800a334 <_strtod_l+0x73c>
 800a380:	e65d      	b.n	800a03e <_strtod_l+0x446>
 800a382:	2e00      	cmp	r6, #0
 800a384:	dd07      	ble.n	800a396 <_strtod_l+0x79e>
 800a386:	4649      	mov	r1, r9
 800a388:	4632      	mov	r2, r6
 800a38a:	9805      	ldr	r0, [sp, #20]
 800a38c:	f7ff f9b2 	bl	80096f4 <__lshift>
 800a390:	4681      	mov	r9, r0
 800a392:	2800      	cmp	r0, #0
 800a394:	d0d8      	beq.n	800a348 <_strtod_l+0x750>
 800a396:	2f00      	cmp	r7, #0
 800a398:	dd08      	ble.n	800a3ac <_strtod_l+0x7b4>
 800a39a:	4641      	mov	r1, r8
 800a39c:	463a      	mov	r2, r7
 800a39e:	9805      	ldr	r0, [sp, #20]
 800a3a0:	f7ff f9a8 	bl	80096f4 <__lshift>
 800a3a4:	4680      	mov	r8, r0
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	f43f ae49 	beq.w	800a03e <_strtod_l+0x446>
 800a3ac:	464a      	mov	r2, r9
 800a3ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3b0:	9805      	ldr	r0, [sp, #20]
 800a3b2:	f7ff fa27 	bl	8009804 <__mdiff>
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	f43f ae40 	beq.w	800a03e <_strtod_l+0x446>
 800a3be:	68c3      	ldr	r3, [r0, #12]
 800a3c0:	4641      	mov	r1, r8
 800a3c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	60c3      	str	r3, [r0, #12]
 800a3c8:	f7ff fa00 	bl	80097cc <__mcmp>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	da45      	bge.n	800a45c <_strtod_l+0x864>
 800a3d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3d2:	ea53 030a 	orrs.w	r3, r3, sl
 800a3d6:	d16b      	bne.n	800a4b0 <_strtod_l+0x8b8>
 800a3d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d167      	bne.n	800a4b0 <_strtod_l+0x8b8>
 800a3e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a3e4:	0d1b      	lsrs	r3, r3, #20
 800a3e6:	051b      	lsls	r3, r3, #20
 800a3e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a3ec:	d960      	bls.n	800a4b0 <_strtod_l+0x8b8>
 800a3ee:	6963      	ldr	r3, [r4, #20]
 800a3f0:	b913      	cbnz	r3, 800a3f8 <_strtod_l+0x800>
 800a3f2:	6923      	ldr	r3, [r4, #16]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	dd5b      	ble.n	800a4b0 <_strtod_l+0x8b8>
 800a3f8:	4621      	mov	r1, r4
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	9805      	ldr	r0, [sp, #20]
 800a3fe:	f7ff f979 	bl	80096f4 <__lshift>
 800a402:	4641      	mov	r1, r8
 800a404:	4604      	mov	r4, r0
 800a406:	f7ff f9e1 	bl	80097cc <__mcmp>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	dd50      	ble.n	800a4b0 <_strtod_l+0x8b8>
 800a40e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a412:	9a08      	ldr	r2, [sp, #32]
 800a414:	0d1b      	lsrs	r3, r3, #20
 800a416:	051b      	lsls	r3, r3, #20
 800a418:	2a00      	cmp	r2, #0
 800a41a:	d06a      	beq.n	800a4f2 <_strtod_l+0x8fa>
 800a41c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a420:	d867      	bhi.n	800a4f2 <_strtod_l+0x8fa>
 800a422:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a426:	f67f ae9d 	bls.w	800a164 <_strtod_l+0x56c>
 800a42a:	4b0a      	ldr	r3, [pc, #40]	@ (800a454 <_strtod_l+0x85c>)
 800a42c:	4650      	mov	r0, sl
 800a42e:	4659      	mov	r1, fp
 800a430:	2200      	movs	r2, #0
 800a432:	f7f6 f8c5 	bl	80005c0 <__aeabi_dmul>
 800a436:	4b08      	ldr	r3, [pc, #32]	@ (800a458 <_strtod_l+0x860>)
 800a438:	4682      	mov	sl, r0
 800a43a:	468b      	mov	fp, r1
 800a43c:	400b      	ands	r3, r1
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f47f ae08 	bne.w	800a054 <_strtod_l+0x45c>
 800a444:	2322      	movs	r3, #34	@ 0x22
 800a446:	9a05      	ldr	r2, [sp, #20]
 800a448:	6013      	str	r3, [r2, #0]
 800a44a:	e603      	b.n	800a054 <_strtod_l+0x45c>
 800a44c:	0800be30 	.word	0x0800be30
 800a450:	fffffc02 	.word	0xfffffc02
 800a454:	39500000 	.word	0x39500000
 800a458:	7ff00000 	.word	0x7ff00000
 800a45c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a460:	d165      	bne.n	800a52e <_strtod_l+0x936>
 800a462:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a468:	b35a      	cbz	r2, 800a4c2 <_strtod_l+0x8ca>
 800a46a:	4a9f      	ldr	r2, [pc, #636]	@ (800a6e8 <_strtod_l+0xaf0>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d12b      	bne.n	800a4c8 <_strtod_l+0x8d0>
 800a470:	9b08      	ldr	r3, [sp, #32]
 800a472:	4651      	mov	r1, sl
 800a474:	b303      	cbz	r3, 800a4b8 <_strtod_l+0x8c0>
 800a476:	465a      	mov	r2, fp
 800a478:	4b9c      	ldr	r3, [pc, #624]	@ (800a6ec <_strtod_l+0xaf4>)
 800a47a:	4013      	ands	r3, r2
 800a47c:	f04f 32ff 	mov.w	r2, #4294967295
 800a480:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a484:	d81b      	bhi.n	800a4be <_strtod_l+0x8c6>
 800a486:	0d1b      	lsrs	r3, r3, #20
 800a488:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a48c:	fa02 f303 	lsl.w	r3, r2, r3
 800a490:	4299      	cmp	r1, r3
 800a492:	d119      	bne.n	800a4c8 <_strtod_l+0x8d0>
 800a494:	4b96      	ldr	r3, [pc, #600]	@ (800a6f0 <_strtod_l+0xaf8>)
 800a496:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a498:	429a      	cmp	r2, r3
 800a49a:	d102      	bne.n	800a4a2 <_strtod_l+0x8aa>
 800a49c:	3101      	adds	r1, #1
 800a49e:	f43f adce 	beq.w	800a03e <_strtod_l+0x446>
 800a4a2:	4b92      	ldr	r3, [pc, #584]	@ (800a6ec <_strtod_l+0xaf4>)
 800a4a4:	f04f 0a00 	mov.w	sl, #0
 800a4a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4aa:	401a      	ands	r2, r3
 800a4ac:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a4b0:	9b08      	ldr	r3, [sp, #32]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1b9      	bne.n	800a42a <_strtod_l+0x832>
 800a4b6:	e5cd      	b.n	800a054 <_strtod_l+0x45c>
 800a4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4bc:	e7e8      	b.n	800a490 <_strtod_l+0x898>
 800a4be:	4613      	mov	r3, r2
 800a4c0:	e7e6      	b.n	800a490 <_strtod_l+0x898>
 800a4c2:	ea53 030a 	orrs.w	r3, r3, sl
 800a4c6:	d0a2      	beq.n	800a40e <_strtod_l+0x816>
 800a4c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a4ca:	b1db      	cbz	r3, 800a504 <_strtod_l+0x90c>
 800a4cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4ce:	4213      	tst	r3, r2
 800a4d0:	d0ee      	beq.n	800a4b0 <_strtod_l+0x8b8>
 800a4d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4d4:	4650      	mov	r0, sl
 800a4d6:	9a08      	ldr	r2, [sp, #32]
 800a4d8:	4659      	mov	r1, fp
 800a4da:	b1bb      	cbz	r3, 800a50c <_strtod_l+0x914>
 800a4dc:	f7ff fb6c 	bl	8009bb8 <sulp>
 800a4e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4e4:	ec53 2b10 	vmov	r2, r3, d0
 800a4e8:	f7f5 feb4 	bl	8000254 <__adddf3>
 800a4ec:	4682      	mov	sl, r0
 800a4ee:	468b      	mov	fp, r1
 800a4f0:	e7de      	b.n	800a4b0 <_strtod_l+0x8b8>
 800a4f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a4f6:	f04f 3aff 	mov.w	sl, #4294967295
 800a4fa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a4fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a502:	e7d5      	b.n	800a4b0 <_strtod_l+0x8b8>
 800a504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a506:	ea13 0f0a 	tst.w	r3, sl
 800a50a:	e7e1      	b.n	800a4d0 <_strtod_l+0x8d8>
 800a50c:	f7ff fb54 	bl	8009bb8 <sulp>
 800a510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a514:	ec53 2b10 	vmov	r2, r3, d0
 800a518:	f7f5 fe9a 	bl	8000250 <__aeabi_dsub>
 800a51c:	2200      	movs	r2, #0
 800a51e:	2300      	movs	r3, #0
 800a520:	4682      	mov	sl, r0
 800a522:	468b      	mov	fp, r1
 800a524:	f7f6 fab4 	bl	8000a90 <__aeabi_dcmpeq>
 800a528:	2800      	cmp	r0, #0
 800a52a:	d0c1      	beq.n	800a4b0 <_strtod_l+0x8b8>
 800a52c:	e61a      	b.n	800a164 <_strtod_l+0x56c>
 800a52e:	4641      	mov	r1, r8
 800a530:	4620      	mov	r0, r4
 800a532:	f7ff facb 	bl	8009acc <__ratio>
 800a536:	2200      	movs	r2, #0
 800a538:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a53c:	ec57 6b10 	vmov	r6, r7, d0
 800a540:	4630      	mov	r0, r6
 800a542:	4639      	mov	r1, r7
 800a544:	f7f6 fab8 	bl	8000ab8 <__aeabi_dcmple>
 800a548:	2800      	cmp	r0, #0
 800a54a:	d06f      	beq.n	800a62c <_strtod_l+0xa34>
 800a54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d17a      	bne.n	800a648 <_strtod_l+0xa50>
 800a552:	f1ba 0f00 	cmp.w	sl, #0
 800a556:	d158      	bne.n	800a60a <_strtod_l+0xa12>
 800a558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a55a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d15a      	bne.n	800a618 <_strtod_l+0xa20>
 800a562:	2200      	movs	r2, #0
 800a564:	4b63      	ldr	r3, [pc, #396]	@ (800a6f4 <_strtod_l+0xafc>)
 800a566:	4630      	mov	r0, r6
 800a568:	4639      	mov	r1, r7
 800a56a:	f7f6 fa9b 	bl	8000aa4 <__aeabi_dcmplt>
 800a56e:	2800      	cmp	r0, #0
 800a570:	d159      	bne.n	800a626 <_strtod_l+0xa2e>
 800a572:	4630      	mov	r0, r6
 800a574:	4639      	mov	r1, r7
 800a576:	2200      	movs	r2, #0
 800a578:	4b5f      	ldr	r3, [pc, #380]	@ (800a6f8 <_strtod_l+0xb00>)
 800a57a:	f7f6 f821 	bl	80005c0 <__aeabi_dmul>
 800a57e:	4606      	mov	r6, r0
 800a580:	460f      	mov	r7, r1
 800a582:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a586:	9606      	str	r6, [sp, #24]
 800a588:	9307      	str	r3, [sp, #28]
 800a58a:	4d58      	ldr	r5, [pc, #352]	@ (800a6ec <_strtod_l+0xaf4>)
 800a58c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a590:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a596:	401d      	ands	r5, r3
 800a598:	4b58      	ldr	r3, [pc, #352]	@ (800a6fc <_strtod_l+0xb04>)
 800a59a:	429d      	cmp	r5, r3
 800a59c:	f040 80b2 	bne.w	800a704 <_strtod_l+0xb0c>
 800a5a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a5a6:	ec4b ab10 	vmov	d0, sl, fp
 800a5aa:	f7ff f9c3 	bl	8009934 <__ulp>
 800a5ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5b2:	ec51 0b10 	vmov	r0, r1, d0
 800a5b6:	f7f6 f803 	bl	80005c0 <__aeabi_dmul>
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	465b      	mov	r3, fp
 800a5be:	f7f5 fe49 	bl	8000254 <__adddf3>
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	4949      	ldr	r1, [pc, #292]	@ (800a6ec <_strtod_l+0xaf4>)
 800a5c6:	4682      	mov	sl, r0
 800a5c8:	4a4d      	ldr	r2, [pc, #308]	@ (800a700 <_strtod_l+0xb08>)
 800a5ca:	4019      	ands	r1, r3
 800a5cc:	4291      	cmp	r1, r2
 800a5ce:	d942      	bls.n	800a656 <_strtod_l+0xa5e>
 800a5d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a5d2:	4b47      	ldr	r3, [pc, #284]	@ (800a6f0 <_strtod_l+0xaf8>)
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d103      	bne.n	800a5e0 <_strtod_l+0x9e8>
 800a5d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a5da:	3301      	adds	r3, #1
 800a5dc:	f43f ad2f 	beq.w	800a03e <_strtod_l+0x446>
 800a5e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a6f0 <_strtod_l+0xaf8>
 800a5e4:	f04f 3aff 	mov.w	sl, #4294967295
 800a5e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5ea:	9805      	ldr	r0, [sp, #20]
 800a5ec:	f7fe fe6e 	bl	80092cc <_Bfree>
 800a5f0:	4649      	mov	r1, r9
 800a5f2:	9805      	ldr	r0, [sp, #20]
 800a5f4:	f7fe fe6a 	bl	80092cc <_Bfree>
 800a5f8:	4641      	mov	r1, r8
 800a5fa:	9805      	ldr	r0, [sp, #20]
 800a5fc:	f7fe fe66 	bl	80092cc <_Bfree>
 800a600:	4621      	mov	r1, r4
 800a602:	9805      	ldr	r0, [sp, #20]
 800a604:	f7fe fe62 	bl	80092cc <_Bfree>
 800a608:	e619      	b.n	800a23e <_strtod_l+0x646>
 800a60a:	f1ba 0f01 	cmp.w	sl, #1
 800a60e:	d103      	bne.n	800a618 <_strtod_l+0xa20>
 800a610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a612:	2b00      	cmp	r3, #0
 800a614:	f43f ada6 	beq.w	800a164 <_strtod_l+0x56c>
 800a618:	2600      	movs	r6, #0
 800a61a:	4f36      	ldr	r7, [pc, #216]	@ (800a6f4 <_strtod_l+0xafc>)
 800a61c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800a6c8 <_strtod_l+0xad0>
 800a620:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a624:	e7b1      	b.n	800a58a <_strtod_l+0x992>
 800a626:	2600      	movs	r6, #0
 800a628:	4f33      	ldr	r7, [pc, #204]	@ (800a6f8 <_strtod_l+0xb00>)
 800a62a:	e7aa      	b.n	800a582 <_strtod_l+0x98a>
 800a62c:	4b32      	ldr	r3, [pc, #200]	@ (800a6f8 <_strtod_l+0xb00>)
 800a62e:	4630      	mov	r0, r6
 800a630:	4639      	mov	r1, r7
 800a632:	2200      	movs	r2, #0
 800a634:	f7f5 ffc4 	bl	80005c0 <__aeabi_dmul>
 800a638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a63a:	4606      	mov	r6, r0
 800a63c:	460f      	mov	r7, r1
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d09f      	beq.n	800a582 <_strtod_l+0x98a>
 800a642:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a646:	e7a0      	b.n	800a58a <_strtod_l+0x992>
 800a648:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a6d0 <_strtod_l+0xad8>
 800a64c:	ec57 6b17 	vmov	r6, r7, d7
 800a650:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a654:	e799      	b.n	800a58a <_strtod_l+0x992>
 800a656:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a65a:	9b08      	ldr	r3, [sp, #32]
 800a65c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a660:	2b00      	cmp	r3, #0
 800a662:	d1c1      	bne.n	800a5e8 <_strtod_l+0x9f0>
 800a664:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a668:	0d1b      	lsrs	r3, r3, #20
 800a66a:	051b      	lsls	r3, r3, #20
 800a66c:	429d      	cmp	r5, r3
 800a66e:	d1bb      	bne.n	800a5e8 <_strtod_l+0x9f0>
 800a670:	4630      	mov	r0, r6
 800a672:	4639      	mov	r1, r7
 800a674:	f7f6 fb04 	bl	8000c80 <__aeabi_d2lz>
 800a678:	f7f5 ff74 	bl	8000564 <__aeabi_l2d>
 800a67c:	4602      	mov	r2, r0
 800a67e:	460b      	mov	r3, r1
 800a680:	4630      	mov	r0, r6
 800a682:	4639      	mov	r1, r7
 800a684:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a688:	f7f5 fde2 	bl	8000250 <__aeabi_dsub>
 800a68c:	460b      	mov	r3, r1
 800a68e:	4602      	mov	r2, r0
 800a690:	ea46 060a 	orr.w	r6, r6, sl
 800a694:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a698:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a69a:	431e      	orrs	r6, r3
 800a69c:	d06f      	beq.n	800a77e <_strtod_l+0xb86>
 800a69e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a6d8 <_strtod_l+0xae0>)
 800a6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a4:	f7f6 f9fe 	bl	8000aa4 <__aeabi_dcmplt>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	f47f acd3 	bne.w	800a054 <_strtod_l+0x45c>
 800a6ae:	a30c      	add	r3, pc, #48	@ (adr r3, 800a6e0 <_strtod_l+0xae8>)
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6b8:	f7f6 fa12 	bl	8000ae0 <__aeabi_dcmpgt>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d093      	beq.n	800a5e8 <_strtod_l+0x9f0>
 800a6c0:	e4c8      	b.n	800a054 <_strtod_l+0x45c>
 800a6c2:	bf00      	nop
 800a6c4:	f3af 8000 	nop.w
 800a6c8:	00000000 	.word	0x00000000
 800a6cc:	bff00000 	.word	0xbff00000
 800a6d0:	00000000 	.word	0x00000000
 800a6d4:	3ff00000 	.word	0x3ff00000
 800a6d8:	94a03595 	.word	0x94a03595
 800a6dc:	3fdfffff 	.word	0x3fdfffff
 800a6e0:	35afe535 	.word	0x35afe535
 800a6e4:	3fe00000 	.word	0x3fe00000
 800a6e8:	000fffff 	.word	0x000fffff
 800a6ec:	7ff00000 	.word	0x7ff00000
 800a6f0:	7fefffff 	.word	0x7fefffff
 800a6f4:	3ff00000 	.word	0x3ff00000
 800a6f8:	3fe00000 	.word	0x3fe00000
 800a6fc:	7fe00000 	.word	0x7fe00000
 800a700:	7c9fffff 	.word	0x7c9fffff
 800a704:	9b08      	ldr	r3, [sp, #32]
 800a706:	b323      	cbz	r3, 800a752 <_strtod_l+0xb5a>
 800a708:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a70c:	d821      	bhi.n	800a752 <_strtod_l+0xb5a>
 800a70e:	4630      	mov	r0, r6
 800a710:	4639      	mov	r1, r7
 800a712:	a327      	add	r3, pc, #156	@ (adr r3, 800a7b0 <_strtod_l+0xbb8>)
 800a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a718:	f7f6 f9ce 	bl	8000ab8 <__aeabi_dcmple>
 800a71c:	b1a0      	cbz	r0, 800a748 <_strtod_l+0xb50>
 800a71e:	4639      	mov	r1, r7
 800a720:	4630      	mov	r0, r6
 800a722:	f7f6 fa25 	bl	8000b70 <__aeabi_d2uiz>
 800a726:	2801      	cmp	r0, #1
 800a728:	bf38      	it	cc
 800a72a:	2001      	movcc	r0, #1
 800a72c:	f7f5 fece 	bl	80004cc <__aeabi_ui2d>
 800a730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a732:	4606      	mov	r6, r0
 800a734:	460f      	mov	r7, r1
 800a736:	b9fb      	cbnz	r3, 800a778 <_strtod_l+0xb80>
 800a738:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a73c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a73e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a740:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a744:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a748:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a74a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a74e:	1b5b      	subs	r3, r3, r5
 800a750:	9311      	str	r3, [sp, #68]	@ 0x44
 800a752:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a756:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a75a:	f7ff f8eb 	bl	8009934 <__ulp>
 800a75e:	4650      	mov	r0, sl
 800a760:	4659      	mov	r1, fp
 800a762:	ec53 2b10 	vmov	r2, r3, d0
 800a766:	f7f5 ff2b 	bl	80005c0 <__aeabi_dmul>
 800a76a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a76e:	f7f5 fd71 	bl	8000254 <__adddf3>
 800a772:	4682      	mov	sl, r0
 800a774:	468b      	mov	fp, r1
 800a776:	e770      	b.n	800a65a <_strtod_l+0xa62>
 800a778:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a77c:	e7e0      	b.n	800a740 <_strtod_l+0xb48>
 800a77e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a7b8 <_strtod_l+0xbc0>)
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	f7f6 f98e 	bl	8000aa4 <__aeabi_dcmplt>
 800a788:	e798      	b.n	800a6bc <_strtod_l+0xac4>
 800a78a:	2300      	movs	r3, #0
 800a78c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a78e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a790:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a792:	6013      	str	r3, [r2, #0]
 800a794:	f7ff ba6d 	b.w	8009c72 <_strtod_l+0x7a>
 800a798:	2a65      	cmp	r2, #101	@ 0x65
 800a79a:	f43f ab67 	beq.w	8009e6c <_strtod_l+0x274>
 800a79e:	2a45      	cmp	r2, #69	@ 0x45
 800a7a0:	f43f ab64 	beq.w	8009e6c <_strtod_l+0x274>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	f7ff bba0 	b.w	8009eea <_strtod_l+0x2f2>
 800a7aa:	bf00      	nop
 800a7ac:	f3af 8000 	nop.w
 800a7b0:	ffc00000 	.word	0xffc00000
 800a7b4:	41dfffff 	.word	0x41dfffff
 800a7b8:	94a03595 	.word	0x94a03595
 800a7bc:	3fcfffff 	.word	0x3fcfffff

0800a7c0 <_strtod_r>:
 800a7c0:	4b01      	ldr	r3, [pc, #4]	@ (800a7c8 <_strtod_r+0x8>)
 800a7c2:	f7ff ba19 	b.w	8009bf8 <_strtod_l>
 800a7c6:	bf00      	nop
 800a7c8:	20000084 	.word	0x20000084

0800a7cc <_strtol_l.isra.0>:
 800a7cc:	2b24      	cmp	r3, #36	@ 0x24
 800a7ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d2:	4686      	mov	lr, r0
 800a7d4:	4690      	mov	r8, r2
 800a7d6:	d801      	bhi.n	800a7dc <_strtol_l.isra.0+0x10>
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d106      	bne.n	800a7ea <_strtol_l.isra.0+0x1e>
 800a7dc:	f7fd fd92 	bl	8008304 <__errno>
 800a7e0:	2316      	movs	r3, #22
 800a7e2:	6003      	str	r3, [r0, #0]
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ea:	460d      	mov	r5, r1
 800a7ec:	4833      	ldr	r0, [pc, #204]	@ (800a8bc <_strtol_l.isra.0+0xf0>)
 800a7ee:	462a      	mov	r2, r5
 800a7f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7f4:	5d06      	ldrb	r6, [r0, r4]
 800a7f6:	f016 0608 	ands.w	r6, r6, #8
 800a7fa:	d1f8      	bne.n	800a7ee <_strtol_l.isra.0+0x22>
 800a7fc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a7fe:	d110      	bne.n	800a822 <_strtol_l.isra.0+0x56>
 800a800:	782c      	ldrb	r4, [r5, #0]
 800a802:	2601      	movs	r6, #1
 800a804:	1c95      	adds	r5, r2, #2
 800a806:	f033 0210 	bics.w	r2, r3, #16
 800a80a:	d115      	bne.n	800a838 <_strtol_l.isra.0+0x6c>
 800a80c:	2c30      	cmp	r4, #48	@ 0x30
 800a80e:	d10d      	bne.n	800a82c <_strtol_l.isra.0+0x60>
 800a810:	782a      	ldrb	r2, [r5, #0]
 800a812:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a816:	2a58      	cmp	r2, #88	@ 0x58
 800a818:	d108      	bne.n	800a82c <_strtol_l.isra.0+0x60>
 800a81a:	786c      	ldrb	r4, [r5, #1]
 800a81c:	3502      	adds	r5, #2
 800a81e:	2310      	movs	r3, #16
 800a820:	e00a      	b.n	800a838 <_strtol_l.isra.0+0x6c>
 800a822:	2c2b      	cmp	r4, #43	@ 0x2b
 800a824:	bf04      	itt	eq
 800a826:	782c      	ldrbeq	r4, [r5, #0]
 800a828:	1c95      	addeq	r5, r2, #2
 800a82a:	e7ec      	b.n	800a806 <_strtol_l.isra.0+0x3a>
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1f6      	bne.n	800a81e <_strtol_l.isra.0+0x52>
 800a830:	2c30      	cmp	r4, #48	@ 0x30
 800a832:	bf14      	ite	ne
 800a834:	230a      	movne	r3, #10
 800a836:	2308      	moveq	r3, #8
 800a838:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a83c:	2200      	movs	r2, #0
 800a83e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a842:	4610      	mov	r0, r2
 800a844:	fbbc f9f3 	udiv	r9, ip, r3
 800a848:	fb03 ca19 	mls	sl, r3, r9, ip
 800a84c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a850:	2f09      	cmp	r7, #9
 800a852:	d80f      	bhi.n	800a874 <_strtol_l.isra.0+0xa8>
 800a854:	463c      	mov	r4, r7
 800a856:	42a3      	cmp	r3, r4
 800a858:	dd1b      	ble.n	800a892 <_strtol_l.isra.0+0xc6>
 800a85a:	1c57      	adds	r7, r2, #1
 800a85c:	d007      	beq.n	800a86e <_strtol_l.isra.0+0xa2>
 800a85e:	4581      	cmp	r9, r0
 800a860:	d314      	bcc.n	800a88c <_strtol_l.isra.0+0xc0>
 800a862:	d101      	bne.n	800a868 <_strtol_l.isra.0+0x9c>
 800a864:	45a2      	cmp	sl, r4
 800a866:	db11      	blt.n	800a88c <_strtol_l.isra.0+0xc0>
 800a868:	fb00 4003 	mla	r0, r0, r3, r4
 800a86c:	2201      	movs	r2, #1
 800a86e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a872:	e7eb      	b.n	800a84c <_strtol_l.isra.0+0x80>
 800a874:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a878:	2f19      	cmp	r7, #25
 800a87a:	d801      	bhi.n	800a880 <_strtol_l.isra.0+0xb4>
 800a87c:	3c37      	subs	r4, #55	@ 0x37
 800a87e:	e7ea      	b.n	800a856 <_strtol_l.isra.0+0x8a>
 800a880:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a884:	2f19      	cmp	r7, #25
 800a886:	d804      	bhi.n	800a892 <_strtol_l.isra.0+0xc6>
 800a888:	3c57      	subs	r4, #87	@ 0x57
 800a88a:	e7e4      	b.n	800a856 <_strtol_l.isra.0+0x8a>
 800a88c:	f04f 32ff 	mov.w	r2, #4294967295
 800a890:	e7ed      	b.n	800a86e <_strtol_l.isra.0+0xa2>
 800a892:	1c53      	adds	r3, r2, #1
 800a894:	d108      	bne.n	800a8a8 <_strtol_l.isra.0+0xdc>
 800a896:	2322      	movs	r3, #34	@ 0x22
 800a898:	4660      	mov	r0, ip
 800a89a:	f8ce 3000 	str.w	r3, [lr]
 800a89e:	f1b8 0f00 	cmp.w	r8, #0
 800a8a2:	d0a0      	beq.n	800a7e6 <_strtol_l.isra.0+0x1a>
 800a8a4:	1e69      	subs	r1, r5, #1
 800a8a6:	e006      	b.n	800a8b6 <_strtol_l.isra.0+0xea>
 800a8a8:	b106      	cbz	r6, 800a8ac <_strtol_l.isra.0+0xe0>
 800a8aa:	4240      	negs	r0, r0
 800a8ac:	f1b8 0f00 	cmp.w	r8, #0
 800a8b0:	d099      	beq.n	800a7e6 <_strtol_l.isra.0+0x1a>
 800a8b2:	2a00      	cmp	r2, #0
 800a8b4:	d1f6      	bne.n	800a8a4 <_strtol_l.isra.0+0xd8>
 800a8b6:	f8c8 1000 	str.w	r1, [r8]
 800a8ba:	e794      	b.n	800a7e6 <_strtol_l.isra.0+0x1a>
 800a8bc:	0800be59 	.word	0x0800be59

0800a8c0 <_strtol_r>:
 800a8c0:	f7ff bf84 	b.w	800a7cc <_strtol_l.isra.0>

0800a8c4 <__ssputs_r>:
 800a8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c8:	461f      	mov	r7, r3
 800a8ca:	688e      	ldr	r6, [r1, #8]
 800a8cc:	4682      	mov	sl, r0
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	42be      	cmp	r6, r7
 800a8d2:	4690      	mov	r8, r2
 800a8d4:	680b      	ldr	r3, [r1, #0]
 800a8d6:	d82d      	bhi.n	800a934 <__ssputs_r+0x70>
 800a8d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a8e0:	d026      	beq.n	800a930 <__ssputs_r+0x6c>
 800a8e2:	6965      	ldr	r5, [r4, #20]
 800a8e4:	6909      	ldr	r1, [r1, #16]
 800a8e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8ea:	eba3 0901 	sub.w	r9, r3, r1
 800a8ee:	1c7b      	adds	r3, r7, #1
 800a8f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8f4:	444b      	add	r3, r9
 800a8f6:	106d      	asrs	r5, r5, #1
 800a8f8:	429d      	cmp	r5, r3
 800a8fa:	bf38      	it	cc
 800a8fc:	461d      	movcc	r5, r3
 800a8fe:	0553      	lsls	r3, r2, #21
 800a900:	d527      	bpl.n	800a952 <__ssputs_r+0x8e>
 800a902:	4629      	mov	r1, r5
 800a904:	f7fe fc16 	bl	8009134 <_malloc_r>
 800a908:	4606      	mov	r6, r0
 800a90a:	b360      	cbz	r0, 800a966 <__ssputs_r+0xa2>
 800a90c:	464a      	mov	r2, r9
 800a90e:	6921      	ldr	r1, [r4, #16]
 800a910:	f000 fa18 	bl	800ad44 <memcpy>
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a91a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a91e:	81a3      	strh	r3, [r4, #12]
 800a920:	6126      	str	r6, [r4, #16]
 800a922:	444e      	add	r6, r9
 800a924:	6165      	str	r5, [r4, #20]
 800a926:	eba5 0509 	sub.w	r5, r5, r9
 800a92a:	6026      	str	r6, [r4, #0]
 800a92c:	463e      	mov	r6, r7
 800a92e:	60a5      	str	r5, [r4, #8]
 800a930:	42be      	cmp	r6, r7
 800a932:	d900      	bls.n	800a936 <__ssputs_r+0x72>
 800a934:	463e      	mov	r6, r7
 800a936:	4632      	mov	r2, r6
 800a938:	4641      	mov	r1, r8
 800a93a:	6820      	ldr	r0, [r4, #0]
 800a93c:	f000 f9c6 	bl	800accc <memmove>
 800a940:	68a3      	ldr	r3, [r4, #8]
 800a942:	2000      	movs	r0, #0
 800a944:	1b9b      	subs	r3, r3, r6
 800a946:	60a3      	str	r3, [r4, #8]
 800a948:	6823      	ldr	r3, [r4, #0]
 800a94a:	4433      	add	r3, r6
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a952:	462a      	mov	r2, r5
 800a954:	f000 fd85 	bl	800b462 <_realloc_r>
 800a958:	4606      	mov	r6, r0
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d1e0      	bne.n	800a920 <__ssputs_r+0x5c>
 800a95e:	6921      	ldr	r1, [r4, #16]
 800a960:	4650      	mov	r0, sl
 800a962:	f7fe fb73 	bl	800904c <_free_r>
 800a966:	230c      	movs	r3, #12
 800a968:	f04f 30ff 	mov.w	r0, #4294967295
 800a96c:	f8ca 3000 	str.w	r3, [sl]
 800a970:	89a3      	ldrh	r3, [r4, #12]
 800a972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a976:	81a3      	strh	r3, [r4, #12]
 800a978:	e7e9      	b.n	800a94e <__ssputs_r+0x8a>
	...

0800a97c <_svfiprintf_r>:
 800a97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a980:	4698      	mov	r8, r3
 800a982:	898b      	ldrh	r3, [r1, #12]
 800a984:	b09d      	sub	sp, #116	@ 0x74
 800a986:	4607      	mov	r7, r0
 800a988:	061b      	lsls	r3, r3, #24
 800a98a:	460d      	mov	r5, r1
 800a98c:	4614      	mov	r4, r2
 800a98e:	d510      	bpl.n	800a9b2 <_svfiprintf_r+0x36>
 800a990:	690b      	ldr	r3, [r1, #16]
 800a992:	b973      	cbnz	r3, 800a9b2 <_svfiprintf_r+0x36>
 800a994:	2140      	movs	r1, #64	@ 0x40
 800a996:	f7fe fbcd 	bl	8009134 <_malloc_r>
 800a99a:	6028      	str	r0, [r5, #0]
 800a99c:	6128      	str	r0, [r5, #16]
 800a99e:	b930      	cbnz	r0, 800a9ae <_svfiprintf_r+0x32>
 800a9a0:	230c      	movs	r3, #12
 800a9a2:	603b      	str	r3, [r7, #0]
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a8:	b01d      	add	sp, #116	@ 0x74
 800a9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ae:	2340      	movs	r3, #64	@ 0x40
 800a9b0:	616b      	str	r3, [r5, #20]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9b8:	f04f 0901 	mov.w	r9, #1
 800a9bc:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800ab60 <_svfiprintf_r+0x1e4>
 800a9c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9c2:	2320      	movs	r3, #32
 800a9c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9c8:	2330      	movs	r3, #48	@ 0x30
 800a9ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9ce:	4623      	mov	r3, r4
 800a9d0:	469a      	mov	sl, r3
 800a9d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9d6:	b10a      	cbz	r2, 800a9dc <_svfiprintf_r+0x60>
 800a9d8:	2a25      	cmp	r2, #37	@ 0x25
 800a9da:	d1f9      	bne.n	800a9d0 <_svfiprintf_r+0x54>
 800a9dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a9e0:	d00b      	beq.n	800a9fa <_svfiprintf_r+0x7e>
 800a9e2:	465b      	mov	r3, fp
 800a9e4:	4622      	mov	r2, r4
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	4638      	mov	r0, r7
 800a9ea:	f7ff ff6b 	bl	800a8c4 <__ssputs_r>
 800a9ee:	3001      	adds	r0, #1
 800a9f0:	f000 80a7 	beq.w	800ab42 <_svfiprintf_r+0x1c6>
 800a9f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9f6:	445a      	add	r2, fp
 800a9f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 809f 	beq.w	800ab42 <_svfiprintf_r+0x1c6>
 800aa04:	2300      	movs	r3, #0
 800aa06:	f04f 32ff 	mov.w	r2, #4294967295
 800aa0a:	f10a 0a01 	add.w	sl, sl, #1
 800aa0e:	9304      	str	r3, [sp, #16]
 800aa10:	9307      	str	r3, [sp, #28]
 800aa12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa16:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa1c:	4654      	mov	r4, sl
 800aa1e:	2205      	movs	r2, #5
 800aa20:	484f      	ldr	r0, [pc, #316]	@ (800ab60 <_svfiprintf_r+0x1e4>)
 800aa22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa26:	f7fd fc9a 	bl	800835e <memchr>
 800aa2a:	9a04      	ldr	r2, [sp, #16]
 800aa2c:	b9d8      	cbnz	r0, 800aa66 <_svfiprintf_r+0xea>
 800aa2e:	06d0      	lsls	r0, r2, #27
 800aa30:	bf44      	itt	mi
 800aa32:	2320      	movmi	r3, #32
 800aa34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa38:	0711      	lsls	r1, r2, #28
 800aa3a:	bf44      	itt	mi
 800aa3c:	232b      	movmi	r3, #43	@ 0x2b
 800aa3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa42:	f89a 3000 	ldrb.w	r3, [sl]
 800aa46:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa48:	d015      	beq.n	800aa76 <_svfiprintf_r+0xfa>
 800aa4a:	9a07      	ldr	r2, [sp, #28]
 800aa4c:	4654      	mov	r4, sl
 800aa4e:	2000      	movs	r0, #0
 800aa50:	f04f 0c0a 	mov.w	ip, #10
 800aa54:	4621      	mov	r1, r4
 800aa56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa5a:	3b30      	subs	r3, #48	@ 0x30
 800aa5c:	2b09      	cmp	r3, #9
 800aa5e:	d94b      	bls.n	800aaf8 <_svfiprintf_r+0x17c>
 800aa60:	b1b0      	cbz	r0, 800aa90 <_svfiprintf_r+0x114>
 800aa62:	9207      	str	r2, [sp, #28]
 800aa64:	e014      	b.n	800aa90 <_svfiprintf_r+0x114>
 800aa66:	eba0 0308 	sub.w	r3, r0, r8
 800aa6a:	46a2      	mov	sl, r4
 800aa6c:	fa09 f303 	lsl.w	r3, r9, r3
 800aa70:	4313      	orrs	r3, r2
 800aa72:	9304      	str	r3, [sp, #16]
 800aa74:	e7d2      	b.n	800aa1c <_svfiprintf_r+0xa0>
 800aa76:	9b03      	ldr	r3, [sp, #12]
 800aa78:	1d19      	adds	r1, r3, #4
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	9103      	str	r1, [sp, #12]
 800aa80:	bfbb      	ittet	lt
 800aa82:	425b      	neglt	r3, r3
 800aa84:	f042 0202 	orrlt.w	r2, r2, #2
 800aa88:	9307      	strge	r3, [sp, #28]
 800aa8a:	9307      	strlt	r3, [sp, #28]
 800aa8c:	bfb8      	it	lt
 800aa8e:	9204      	strlt	r2, [sp, #16]
 800aa90:	7823      	ldrb	r3, [r4, #0]
 800aa92:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa94:	d10a      	bne.n	800aaac <_svfiprintf_r+0x130>
 800aa96:	7863      	ldrb	r3, [r4, #1]
 800aa98:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa9a:	d132      	bne.n	800ab02 <_svfiprintf_r+0x186>
 800aa9c:	9b03      	ldr	r3, [sp, #12]
 800aa9e:	3402      	adds	r4, #2
 800aaa0:	1d1a      	adds	r2, r3, #4
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aaa8:	9203      	str	r2, [sp, #12]
 800aaaa:	9305      	str	r3, [sp, #20]
 800aaac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ab70 <_svfiprintf_r+0x1f4>
 800aab0:	2203      	movs	r2, #3
 800aab2:	7821      	ldrb	r1, [r4, #0]
 800aab4:	4650      	mov	r0, sl
 800aab6:	f7fd fc52 	bl	800835e <memchr>
 800aaba:	b138      	cbz	r0, 800aacc <_svfiprintf_r+0x150>
 800aabc:	eba0 000a 	sub.w	r0, r0, sl
 800aac0:	2240      	movs	r2, #64	@ 0x40
 800aac2:	9b04      	ldr	r3, [sp, #16]
 800aac4:	3401      	adds	r4, #1
 800aac6:	4082      	lsls	r2, r0
 800aac8:	4313      	orrs	r3, r2
 800aaca:	9304      	str	r3, [sp, #16]
 800aacc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aad0:	2206      	movs	r2, #6
 800aad2:	4824      	ldr	r0, [pc, #144]	@ (800ab64 <_svfiprintf_r+0x1e8>)
 800aad4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aad8:	f7fd fc41 	bl	800835e <memchr>
 800aadc:	2800      	cmp	r0, #0
 800aade:	d036      	beq.n	800ab4e <_svfiprintf_r+0x1d2>
 800aae0:	4b21      	ldr	r3, [pc, #132]	@ (800ab68 <_svfiprintf_r+0x1ec>)
 800aae2:	bb1b      	cbnz	r3, 800ab2c <_svfiprintf_r+0x1b0>
 800aae4:	9b03      	ldr	r3, [sp, #12]
 800aae6:	3307      	adds	r3, #7
 800aae8:	f023 0307 	bic.w	r3, r3, #7
 800aaec:	3308      	adds	r3, #8
 800aaee:	9303      	str	r3, [sp, #12]
 800aaf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf2:	4433      	add	r3, r6
 800aaf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaf6:	e76a      	b.n	800a9ce <_svfiprintf_r+0x52>
 800aaf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800aafc:	460c      	mov	r4, r1
 800aafe:	2001      	movs	r0, #1
 800ab00:	e7a8      	b.n	800aa54 <_svfiprintf_r+0xd8>
 800ab02:	2300      	movs	r3, #0
 800ab04:	3401      	adds	r4, #1
 800ab06:	f04f 0c0a 	mov.w	ip, #10
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	9305      	str	r3, [sp, #20]
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab14:	3a30      	subs	r2, #48	@ 0x30
 800ab16:	2a09      	cmp	r2, #9
 800ab18:	d903      	bls.n	800ab22 <_svfiprintf_r+0x1a6>
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d0c6      	beq.n	800aaac <_svfiprintf_r+0x130>
 800ab1e:	9105      	str	r1, [sp, #20]
 800ab20:	e7c4      	b.n	800aaac <_svfiprintf_r+0x130>
 800ab22:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab26:	4604      	mov	r4, r0
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e7f0      	b.n	800ab0e <_svfiprintf_r+0x192>
 800ab2c:	ab03      	add	r3, sp, #12
 800ab2e:	462a      	mov	r2, r5
 800ab30:	a904      	add	r1, sp, #16
 800ab32:	4638      	mov	r0, r7
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	4b0d      	ldr	r3, [pc, #52]	@ (800ab6c <_svfiprintf_r+0x1f0>)
 800ab38:	f7fc fc6c 	bl	8007414 <_printf_float>
 800ab3c:	1c42      	adds	r2, r0, #1
 800ab3e:	4606      	mov	r6, r0
 800ab40:	d1d6      	bne.n	800aaf0 <_svfiprintf_r+0x174>
 800ab42:	89ab      	ldrh	r3, [r5, #12]
 800ab44:	065b      	lsls	r3, r3, #25
 800ab46:	f53f af2d 	bmi.w	800a9a4 <_svfiprintf_r+0x28>
 800ab4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab4c:	e72c      	b.n	800a9a8 <_svfiprintf_r+0x2c>
 800ab4e:	ab03      	add	r3, sp, #12
 800ab50:	462a      	mov	r2, r5
 800ab52:	a904      	add	r1, sp, #16
 800ab54:	4638      	mov	r0, r7
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	4b04      	ldr	r3, [pc, #16]	@ (800ab6c <_svfiprintf_r+0x1f0>)
 800ab5a:	f7fc fef7 	bl	800794c <_printf_i>
 800ab5e:	e7ed      	b.n	800ab3c <_svfiprintf_r+0x1c0>
 800ab60:	0800bc55 	.word	0x0800bc55
 800ab64:	0800bc5f 	.word	0x0800bc5f
 800ab68:	08007415 	.word	0x08007415
 800ab6c:	0800a8c5 	.word	0x0800a8c5
 800ab70:	0800bc5b 	.word	0x0800bc5b

0800ab74 <__sflush_r>:
 800ab74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab7c:	0716      	lsls	r6, r2, #28
 800ab7e:	4605      	mov	r5, r0
 800ab80:	460c      	mov	r4, r1
 800ab82:	d454      	bmi.n	800ac2e <__sflush_r+0xba>
 800ab84:	684b      	ldr	r3, [r1, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	dc02      	bgt.n	800ab90 <__sflush_r+0x1c>
 800ab8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	dd48      	ble.n	800ac22 <__sflush_r+0xae>
 800ab90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab92:	2e00      	cmp	r6, #0
 800ab94:	d045      	beq.n	800ac22 <__sflush_r+0xae>
 800ab96:	2300      	movs	r3, #0
 800ab98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab9c:	682f      	ldr	r7, [r5, #0]
 800ab9e:	6a21      	ldr	r1, [r4, #32]
 800aba0:	602b      	str	r3, [r5, #0]
 800aba2:	d030      	beq.n	800ac06 <__sflush_r+0x92>
 800aba4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aba6:	89a3      	ldrh	r3, [r4, #12]
 800aba8:	0759      	lsls	r1, r3, #29
 800abaa:	d505      	bpl.n	800abb8 <__sflush_r+0x44>
 800abac:	6863      	ldr	r3, [r4, #4]
 800abae:	1ad2      	subs	r2, r2, r3
 800abb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800abb2:	b10b      	cbz	r3, 800abb8 <__sflush_r+0x44>
 800abb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800abb6:	1ad2      	subs	r2, r2, r3
 800abb8:	2300      	movs	r3, #0
 800abba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abbc:	6a21      	ldr	r1, [r4, #32]
 800abbe:	4628      	mov	r0, r5
 800abc0:	47b0      	blx	r6
 800abc2:	1c43      	adds	r3, r0, #1
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	d106      	bne.n	800abd6 <__sflush_r+0x62>
 800abc8:	6829      	ldr	r1, [r5, #0]
 800abca:	291d      	cmp	r1, #29
 800abcc:	d82b      	bhi.n	800ac26 <__sflush_r+0xb2>
 800abce:	4a2a      	ldr	r2, [pc, #168]	@ (800ac78 <__sflush_r+0x104>)
 800abd0:	40ca      	lsrs	r2, r1
 800abd2:	07d6      	lsls	r6, r2, #31
 800abd4:	d527      	bpl.n	800ac26 <__sflush_r+0xb2>
 800abd6:	2200      	movs	r2, #0
 800abd8:	04d9      	lsls	r1, r3, #19
 800abda:	6062      	str	r2, [r4, #4]
 800abdc:	6922      	ldr	r2, [r4, #16]
 800abde:	6022      	str	r2, [r4, #0]
 800abe0:	d504      	bpl.n	800abec <__sflush_r+0x78>
 800abe2:	1c42      	adds	r2, r0, #1
 800abe4:	d101      	bne.n	800abea <__sflush_r+0x76>
 800abe6:	682b      	ldr	r3, [r5, #0]
 800abe8:	b903      	cbnz	r3, 800abec <__sflush_r+0x78>
 800abea:	6560      	str	r0, [r4, #84]	@ 0x54
 800abec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abee:	602f      	str	r7, [r5, #0]
 800abf0:	b1b9      	cbz	r1, 800ac22 <__sflush_r+0xae>
 800abf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abf6:	4299      	cmp	r1, r3
 800abf8:	d002      	beq.n	800ac00 <__sflush_r+0x8c>
 800abfa:	4628      	mov	r0, r5
 800abfc:	f7fe fa26 	bl	800904c <_free_r>
 800ac00:	2300      	movs	r3, #0
 800ac02:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac04:	e00d      	b.n	800ac22 <__sflush_r+0xae>
 800ac06:	2301      	movs	r3, #1
 800ac08:	4628      	mov	r0, r5
 800ac0a:	47b0      	blx	r6
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	1c50      	adds	r0, r2, #1
 800ac10:	d1c9      	bne.n	800aba6 <__sflush_r+0x32>
 800ac12:	682b      	ldr	r3, [r5, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d0c6      	beq.n	800aba6 <__sflush_r+0x32>
 800ac18:	2b1d      	cmp	r3, #29
 800ac1a:	d001      	beq.n	800ac20 <__sflush_r+0xac>
 800ac1c:	2b16      	cmp	r3, #22
 800ac1e:	d11d      	bne.n	800ac5c <__sflush_r+0xe8>
 800ac20:	602f      	str	r7, [r5, #0]
 800ac22:	2000      	movs	r0, #0
 800ac24:	e021      	b.n	800ac6a <__sflush_r+0xf6>
 800ac26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac2a:	b21b      	sxth	r3, r3
 800ac2c:	e01a      	b.n	800ac64 <__sflush_r+0xf0>
 800ac2e:	690f      	ldr	r7, [r1, #16]
 800ac30:	2f00      	cmp	r7, #0
 800ac32:	d0f6      	beq.n	800ac22 <__sflush_r+0xae>
 800ac34:	0793      	lsls	r3, r2, #30
 800ac36:	680e      	ldr	r6, [r1, #0]
 800ac38:	600f      	str	r7, [r1, #0]
 800ac3a:	bf0c      	ite	eq
 800ac3c:	694b      	ldreq	r3, [r1, #20]
 800ac3e:	2300      	movne	r3, #0
 800ac40:	eba6 0807 	sub.w	r8, r6, r7
 800ac44:	608b      	str	r3, [r1, #8]
 800ac46:	f1b8 0f00 	cmp.w	r8, #0
 800ac4a:	ddea      	ble.n	800ac22 <__sflush_r+0xae>
 800ac4c:	4643      	mov	r3, r8
 800ac4e:	463a      	mov	r2, r7
 800ac50:	6a21      	ldr	r1, [r4, #32]
 800ac52:	4628      	mov	r0, r5
 800ac54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac56:	47b0      	blx	r6
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	dc08      	bgt.n	800ac6e <__sflush_r+0xfa>
 800ac5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac64:	f04f 30ff 	mov.w	r0, #4294967295
 800ac68:	81a3      	strh	r3, [r4, #12]
 800ac6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac6e:	4407      	add	r7, r0
 800ac70:	eba8 0800 	sub.w	r8, r8, r0
 800ac74:	e7e7      	b.n	800ac46 <__sflush_r+0xd2>
 800ac76:	bf00      	nop
 800ac78:	20400001 	.word	0x20400001

0800ac7c <_fflush_r>:
 800ac7c:	b538      	push	{r3, r4, r5, lr}
 800ac7e:	690b      	ldr	r3, [r1, #16]
 800ac80:	4605      	mov	r5, r0
 800ac82:	460c      	mov	r4, r1
 800ac84:	b913      	cbnz	r3, 800ac8c <_fflush_r+0x10>
 800ac86:	2500      	movs	r5, #0
 800ac88:	4628      	mov	r0, r5
 800ac8a:	bd38      	pop	{r3, r4, r5, pc}
 800ac8c:	b118      	cbz	r0, 800ac96 <_fflush_r+0x1a>
 800ac8e:	6a03      	ldr	r3, [r0, #32]
 800ac90:	b90b      	cbnz	r3, 800ac96 <_fflush_r+0x1a>
 800ac92:	f7fd fa13 	bl	80080bc <__sinit>
 800ac96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d0f3      	beq.n	800ac86 <_fflush_r+0xa>
 800ac9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aca0:	07d0      	lsls	r0, r2, #31
 800aca2:	d404      	bmi.n	800acae <_fflush_r+0x32>
 800aca4:	0599      	lsls	r1, r3, #22
 800aca6:	d402      	bmi.n	800acae <_fflush_r+0x32>
 800aca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acaa:	f7fd fb56 	bl	800835a <__retarget_lock_acquire_recursive>
 800acae:	4628      	mov	r0, r5
 800acb0:	4621      	mov	r1, r4
 800acb2:	f7ff ff5f 	bl	800ab74 <__sflush_r>
 800acb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800acb8:	4605      	mov	r5, r0
 800acba:	07da      	lsls	r2, r3, #31
 800acbc:	d4e4      	bmi.n	800ac88 <_fflush_r+0xc>
 800acbe:	89a3      	ldrh	r3, [r4, #12]
 800acc0:	059b      	lsls	r3, r3, #22
 800acc2:	d4e1      	bmi.n	800ac88 <_fflush_r+0xc>
 800acc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acc6:	f7fd fb49 	bl	800835c <__retarget_lock_release_recursive>
 800acca:	e7dd      	b.n	800ac88 <_fflush_r+0xc>

0800accc <memmove>:
 800accc:	4288      	cmp	r0, r1
 800acce:	b510      	push	{r4, lr}
 800acd0:	eb01 0402 	add.w	r4, r1, r2
 800acd4:	d902      	bls.n	800acdc <memmove+0x10>
 800acd6:	4284      	cmp	r4, r0
 800acd8:	4623      	mov	r3, r4
 800acda:	d807      	bhi.n	800acec <memmove+0x20>
 800acdc:	1e43      	subs	r3, r0, #1
 800acde:	42a1      	cmp	r1, r4
 800ace0:	d008      	beq.n	800acf4 <memmove+0x28>
 800ace2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ace6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acea:	e7f8      	b.n	800acde <memmove+0x12>
 800acec:	4402      	add	r2, r0
 800acee:	4601      	mov	r1, r0
 800acf0:	428a      	cmp	r2, r1
 800acf2:	d100      	bne.n	800acf6 <memmove+0x2a>
 800acf4:	bd10      	pop	{r4, pc}
 800acf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acfe:	e7f7      	b.n	800acf0 <memmove+0x24>

0800ad00 <strncmp>:
 800ad00:	b510      	push	{r4, lr}
 800ad02:	b16a      	cbz	r2, 800ad20 <strncmp+0x20>
 800ad04:	3901      	subs	r1, #1
 800ad06:	1884      	adds	r4, r0, r2
 800ad08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d103      	bne.n	800ad1c <strncmp+0x1c>
 800ad14:	42a0      	cmp	r0, r4
 800ad16:	d001      	beq.n	800ad1c <strncmp+0x1c>
 800ad18:	2a00      	cmp	r2, #0
 800ad1a:	d1f5      	bne.n	800ad08 <strncmp+0x8>
 800ad1c:	1ad0      	subs	r0, r2, r3
 800ad1e:	bd10      	pop	{r4, pc}
 800ad20:	4610      	mov	r0, r2
 800ad22:	e7fc      	b.n	800ad1e <strncmp+0x1e>

0800ad24 <_sbrk_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	2300      	movs	r3, #0
 800ad28:	4d05      	ldr	r5, [pc, #20]	@ (800ad40 <_sbrk_r+0x1c>)
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4608      	mov	r0, r1
 800ad2e:	602b      	str	r3, [r5, #0]
 800ad30:	f7f7 f802 	bl	8001d38 <_sbrk>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d102      	bne.n	800ad3e <_sbrk_r+0x1a>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	b103      	cbz	r3, 800ad3e <_sbrk_r+0x1a>
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	20000484 	.word	0x20000484

0800ad44 <memcpy>:
 800ad44:	440a      	add	r2, r1
 800ad46:	1e43      	subs	r3, r0, #1
 800ad48:	4291      	cmp	r1, r2
 800ad4a:	d100      	bne.n	800ad4e <memcpy+0xa>
 800ad4c:	4770      	bx	lr
 800ad4e:	b510      	push	{r4, lr}
 800ad50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad54:	4291      	cmp	r1, r2
 800ad56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad5a:	d1f9      	bne.n	800ad50 <memcpy+0xc>
 800ad5c:	bd10      	pop	{r4, pc}
	...

0800ad60 <nan>:
 800ad60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ad68 <nan+0x8>
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	00000000 	.word	0x00000000
 800ad6c:	7ff80000 	.word	0x7ff80000

0800ad70 <__assert_func>:
 800ad70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad72:	4614      	mov	r4, r2
 800ad74:	461a      	mov	r2, r3
 800ad76:	4b09      	ldr	r3, [pc, #36]	@ (800ad9c <__assert_func+0x2c>)
 800ad78:	4605      	mov	r5, r0
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68d8      	ldr	r0, [r3, #12]
 800ad7e:	b14c      	cbz	r4, 800ad94 <__assert_func+0x24>
 800ad80:	4b07      	ldr	r3, [pc, #28]	@ (800ada0 <__assert_func+0x30>)
 800ad82:	9100      	str	r1, [sp, #0]
 800ad84:	4907      	ldr	r1, [pc, #28]	@ (800ada4 <__assert_func+0x34>)
 800ad86:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad8a:	462b      	mov	r3, r5
 800ad8c:	f000 fba4 	bl	800b4d8 <fiprintf>
 800ad90:	f000 fbb4 	bl	800b4fc <abort>
 800ad94:	4b04      	ldr	r3, [pc, #16]	@ (800ada8 <__assert_func+0x38>)
 800ad96:	461c      	mov	r4, r3
 800ad98:	e7f3      	b.n	800ad82 <__assert_func+0x12>
 800ad9a:	bf00      	nop
 800ad9c:	20000034 	.word	0x20000034
 800ada0:	0800bc6e 	.word	0x0800bc6e
 800ada4:	0800bc7b 	.word	0x0800bc7b
 800ada8:	0800bca9 	.word	0x0800bca9

0800adac <_calloc_r>:
 800adac:	b570      	push	{r4, r5, r6, lr}
 800adae:	fba1 5402 	umull	r5, r4, r1, r2
 800adb2:	b934      	cbnz	r4, 800adc2 <_calloc_r+0x16>
 800adb4:	4629      	mov	r1, r5
 800adb6:	f7fe f9bd 	bl	8009134 <_malloc_r>
 800adba:	4606      	mov	r6, r0
 800adbc:	b928      	cbnz	r0, 800adca <_calloc_r+0x1e>
 800adbe:	4630      	mov	r0, r6
 800adc0:	bd70      	pop	{r4, r5, r6, pc}
 800adc2:	220c      	movs	r2, #12
 800adc4:	2600      	movs	r6, #0
 800adc6:	6002      	str	r2, [r0, #0]
 800adc8:	e7f9      	b.n	800adbe <_calloc_r+0x12>
 800adca:	462a      	mov	r2, r5
 800adcc:	4621      	mov	r1, r4
 800adce:	f7fd fa46 	bl	800825e <memset>
 800add2:	e7f4      	b.n	800adbe <_calloc_r+0x12>

0800add4 <rshift>:
 800add4:	6903      	ldr	r3, [r0, #16]
 800add6:	114a      	asrs	r2, r1, #5
 800add8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800addc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ade0:	f100 0414 	add.w	r4, r0, #20
 800ade4:	dd45      	ble.n	800ae72 <rshift+0x9e>
 800ade6:	f011 011f 	ands.w	r1, r1, #31
 800adea:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800adee:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800adf2:	d10c      	bne.n	800ae0e <rshift+0x3a>
 800adf4:	f100 0710 	add.w	r7, r0, #16
 800adf8:	4629      	mov	r1, r5
 800adfa:	42b1      	cmp	r1, r6
 800adfc:	d334      	bcc.n	800ae68 <rshift+0x94>
 800adfe:	1a9b      	subs	r3, r3, r2
 800ae00:	1eea      	subs	r2, r5, #3
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	4296      	cmp	r6, r2
 800ae06:	bf38      	it	cc
 800ae08:	2300      	movcc	r3, #0
 800ae0a:	4423      	add	r3, r4
 800ae0c:	e015      	b.n	800ae3a <rshift+0x66>
 800ae0e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae12:	f1c1 0820 	rsb	r8, r1, #32
 800ae16:	f105 0e04 	add.w	lr, r5, #4
 800ae1a:	46a1      	mov	r9, r4
 800ae1c:	40cf      	lsrs	r7, r1
 800ae1e:	4576      	cmp	r6, lr
 800ae20:	46f4      	mov	ip, lr
 800ae22:	d815      	bhi.n	800ae50 <rshift+0x7c>
 800ae24:	1a9a      	subs	r2, r3, r2
 800ae26:	3501      	adds	r5, #1
 800ae28:	0092      	lsls	r2, r2, #2
 800ae2a:	3a04      	subs	r2, #4
 800ae2c:	42ae      	cmp	r6, r5
 800ae2e:	bf38      	it	cc
 800ae30:	2200      	movcc	r2, #0
 800ae32:	18a3      	adds	r3, r4, r2
 800ae34:	50a7      	str	r7, [r4, r2]
 800ae36:	b107      	cbz	r7, 800ae3a <rshift+0x66>
 800ae38:	3304      	adds	r3, #4
 800ae3a:	1b1a      	subs	r2, r3, r4
 800ae3c:	42a3      	cmp	r3, r4
 800ae3e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae42:	bf08      	it	eq
 800ae44:	2300      	moveq	r3, #0
 800ae46:	6102      	str	r2, [r0, #16]
 800ae48:	bf08      	it	eq
 800ae4a:	6143      	streq	r3, [r0, #20]
 800ae4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae50:	f8dc c000 	ldr.w	ip, [ip]
 800ae54:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae58:	ea4c 0707 	orr.w	r7, ip, r7
 800ae5c:	f849 7b04 	str.w	r7, [r9], #4
 800ae60:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae64:	40cf      	lsrs	r7, r1
 800ae66:	e7da      	b.n	800ae1e <rshift+0x4a>
 800ae68:	f851 cb04 	ldr.w	ip, [r1], #4
 800ae6c:	f847 cf04 	str.w	ip, [r7, #4]!
 800ae70:	e7c3      	b.n	800adfa <rshift+0x26>
 800ae72:	4623      	mov	r3, r4
 800ae74:	e7e1      	b.n	800ae3a <rshift+0x66>

0800ae76 <__hexdig_fun>:
 800ae76:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ae7a:	2b09      	cmp	r3, #9
 800ae7c:	d802      	bhi.n	800ae84 <__hexdig_fun+0xe>
 800ae7e:	3820      	subs	r0, #32
 800ae80:	b2c0      	uxtb	r0, r0
 800ae82:	4770      	bx	lr
 800ae84:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ae88:	2b05      	cmp	r3, #5
 800ae8a:	d801      	bhi.n	800ae90 <__hexdig_fun+0x1a>
 800ae8c:	3847      	subs	r0, #71	@ 0x47
 800ae8e:	e7f7      	b.n	800ae80 <__hexdig_fun+0xa>
 800ae90:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ae94:	2b05      	cmp	r3, #5
 800ae96:	d801      	bhi.n	800ae9c <__hexdig_fun+0x26>
 800ae98:	3827      	subs	r0, #39	@ 0x27
 800ae9a:	e7f1      	b.n	800ae80 <__hexdig_fun+0xa>
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	4770      	bx	lr

0800aea0 <__gethex>:
 800aea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	b085      	sub	sp, #20
 800aea6:	468a      	mov	sl, r1
 800aea8:	4690      	mov	r8, r2
 800aeaa:	9302      	str	r3, [sp, #8]
 800aeac:	680b      	ldr	r3, [r1, #0]
 800aeae:	9001      	str	r0, [sp, #4]
 800aeb0:	1c9c      	adds	r4, r3, #2
 800aeb2:	46a1      	mov	r9, r4
 800aeb4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aeb8:	2830      	cmp	r0, #48	@ 0x30
 800aeba:	d0fa      	beq.n	800aeb2 <__gethex+0x12>
 800aebc:	eba9 0303 	sub.w	r3, r9, r3
 800aec0:	f1a3 0b02 	sub.w	fp, r3, #2
 800aec4:	f7ff ffd7 	bl	800ae76 <__hexdig_fun>
 800aec8:	4605      	mov	r5, r0
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d166      	bne.n	800af9c <__gethex+0xfc>
 800aece:	2201      	movs	r2, #1
 800aed0:	499e      	ldr	r1, [pc, #632]	@ (800b14c <__gethex+0x2ac>)
 800aed2:	4648      	mov	r0, r9
 800aed4:	f7ff ff14 	bl	800ad00 <strncmp>
 800aed8:	4607      	mov	r7, r0
 800aeda:	2800      	cmp	r0, #0
 800aedc:	d165      	bne.n	800afaa <__gethex+0x10a>
 800aede:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aee2:	4626      	mov	r6, r4
 800aee4:	f7ff ffc7 	bl	800ae76 <__hexdig_fun>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	d060      	beq.n	800afae <__gethex+0x10e>
 800aeec:	4623      	mov	r3, r4
 800aeee:	7818      	ldrb	r0, [r3, #0]
 800aef0:	4699      	mov	r9, r3
 800aef2:	3301      	adds	r3, #1
 800aef4:	2830      	cmp	r0, #48	@ 0x30
 800aef6:	d0fa      	beq.n	800aeee <__gethex+0x4e>
 800aef8:	f7ff ffbd 	bl	800ae76 <__hexdig_fun>
 800aefc:	fab0 f580 	clz	r5, r0
 800af00:	f04f 0b01 	mov.w	fp, #1
 800af04:	096d      	lsrs	r5, r5, #5
 800af06:	464a      	mov	r2, r9
 800af08:	4616      	mov	r6, r2
 800af0a:	3201      	adds	r2, #1
 800af0c:	7830      	ldrb	r0, [r6, #0]
 800af0e:	f7ff ffb2 	bl	800ae76 <__hexdig_fun>
 800af12:	2800      	cmp	r0, #0
 800af14:	d1f8      	bne.n	800af08 <__gethex+0x68>
 800af16:	2201      	movs	r2, #1
 800af18:	498c      	ldr	r1, [pc, #560]	@ (800b14c <__gethex+0x2ac>)
 800af1a:	4630      	mov	r0, r6
 800af1c:	f7ff fef0 	bl	800ad00 <strncmp>
 800af20:	2800      	cmp	r0, #0
 800af22:	d13e      	bne.n	800afa2 <__gethex+0x102>
 800af24:	b944      	cbnz	r4, 800af38 <__gethex+0x98>
 800af26:	1c74      	adds	r4, r6, #1
 800af28:	4622      	mov	r2, r4
 800af2a:	4616      	mov	r6, r2
 800af2c:	3201      	adds	r2, #1
 800af2e:	7830      	ldrb	r0, [r6, #0]
 800af30:	f7ff ffa1 	bl	800ae76 <__hexdig_fun>
 800af34:	2800      	cmp	r0, #0
 800af36:	d1f8      	bne.n	800af2a <__gethex+0x8a>
 800af38:	1ba4      	subs	r4, r4, r6
 800af3a:	00a7      	lsls	r7, r4, #2
 800af3c:	7833      	ldrb	r3, [r6, #0]
 800af3e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800af42:	2b50      	cmp	r3, #80	@ 0x50
 800af44:	d13d      	bne.n	800afc2 <__gethex+0x122>
 800af46:	7873      	ldrb	r3, [r6, #1]
 800af48:	2b2b      	cmp	r3, #43	@ 0x2b
 800af4a:	d032      	beq.n	800afb2 <__gethex+0x112>
 800af4c:	2b2d      	cmp	r3, #45	@ 0x2d
 800af4e:	d033      	beq.n	800afb8 <__gethex+0x118>
 800af50:	1c71      	adds	r1, r6, #1
 800af52:	2400      	movs	r4, #0
 800af54:	7808      	ldrb	r0, [r1, #0]
 800af56:	f7ff ff8e 	bl	800ae76 <__hexdig_fun>
 800af5a:	1e43      	subs	r3, r0, #1
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b18      	cmp	r3, #24
 800af60:	d82f      	bhi.n	800afc2 <__gethex+0x122>
 800af62:	f1a0 0210 	sub.w	r2, r0, #16
 800af66:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800af6a:	f7ff ff84 	bl	800ae76 <__hexdig_fun>
 800af6e:	f100 3cff 	add.w	ip, r0, #4294967295
 800af72:	230a      	movs	r3, #10
 800af74:	fa5f fc8c 	uxtb.w	ip, ip
 800af78:	f1bc 0f18 	cmp.w	ip, #24
 800af7c:	d91e      	bls.n	800afbc <__gethex+0x11c>
 800af7e:	b104      	cbz	r4, 800af82 <__gethex+0xe2>
 800af80:	4252      	negs	r2, r2
 800af82:	4417      	add	r7, r2
 800af84:	f8ca 1000 	str.w	r1, [sl]
 800af88:	b1ed      	cbz	r5, 800afc6 <__gethex+0x126>
 800af8a:	f1bb 0f00 	cmp.w	fp, #0
 800af8e:	bf0c      	ite	eq
 800af90:	2506      	moveq	r5, #6
 800af92:	2500      	movne	r5, #0
 800af94:	4628      	mov	r0, r5
 800af96:	b005      	add	sp, #20
 800af98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af9c:	2500      	movs	r5, #0
 800af9e:	462c      	mov	r4, r5
 800afa0:	e7b1      	b.n	800af06 <__gethex+0x66>
 800afa2:	2c00      	cmp	r4, #0
 800afa4:	d1c8      	bne.n	800af38 <__gethex+0x98>
 800afa6:	4627      	mov	r7, r4
 800afa8:	e7c8      	b.n	800af3c <__gethex+0x9c>
 800afaa:	464e      	mov	r6, r9
 800afac:	462f      	mov	r7, r5
 800afae:	2501      	movs	r5, #1
 800afb0:	e7c4      	b.n	800af3c <__gethex+0x9c>
 800afb2:	2400      	movs	r4, #0
 800afb4:	1cb1      	adds	r1, r6, #2
 800afb6:	e7cd      	b.n	800af54 <__gethex+0xb4>
 800afb8:	2401      	movs	r4, #1
 800afba:	e7fb      	b.n	800afb4 <__gethex+0x114>
 800afbc:	fb03 0002 	mla	r0, r3, r2, r0
 800afc0:	e7cf      	b.n	800af62 <__gethex+0xc2>
 800afc2:	4631      	mov	r1, r6
 800afc4:	e7de      	b.n	800af84 <__gethex+0xe4>
 800afc6:	eba6 0309 	sub.w	r3, r6, r9
 800afca:	4629      	mov	r1, r5
 800afcc:	3b01      	subs	r3, #1
 800afce:	2b07      	cmp	r3, #7
 800afd0:	dc0a      	bgt.n	800afe8 <__gethex+0x148>
 800afd2:	9801      	ldr	r0, [sp, #4]
 800afd4:	f7fe f93a 	bl	800924c <_Balloc>
 800afd8:	4604      	mov	r4, r0
 800afda:	b940      	cbnz	r0, 800afee <__gethex+0x14e>
 800afdc:	4b5c      	ldr	r3, [pc, #368]	@ (800b150 <__gethex+0x2b0>)
 800afde:	4602      	mov	r2, r0
 800afe0:	21e4      	movs	r1, #228	@ 0xe4
 800afe2:	485c      	ldr	r0, [pc, #368]	@ (800b154 <__gethex+0x2b4>)
 800afe4:	f7ff fec4 	bl	800ad70 <__assert_func>
 800afe8:	3101      	adds	r1, #1
 800afea:	105b      	asrs	r3, r3, #1
 800afec:	e7ef      	b.n	800afce <__gethex+0x12e>
 800afee:	f100 0a14 	add.w	sl, r0, #20
 800aff2:	2300      	movs	r3, #0
 800aff4:	4655      	mov	r5, sl
 800aff6:	469b      	mov	fp, r3
 800aff8:	45b1      	cmp	r9, r6
 800affa:	d337      	bcc.n	800b06c <__gethex+0x1cc>
 800affc:	f845 bb04 	str.w	fp, [r5], #4
 800b000:	eba5 050a 	sub.w	r5, r5, sl
 800b004:	4658      	mov	r0, fp
 800b006:	10ad      	asrs	r5, r5, #2
 800b008:	6125      	str	r5, [r4, #16]
 800b00a:	016d      	lsls	r5, r5, #5
 800b00c:	f7fe fa12 	bl	8009434 <__hi0bits>
 800b010:	f8d8 6000 	ldr.w	r6, [r8]
 800b014:	1a2d      	subs	r5, r5, r0
 800b016:	42b5      	cmp	r5, r6
 800b018:	dd54      	ble.n	800b0c4 <__gethex+0x224>
 800b01a:	1bad      	subs	r5, r5, r6
 800b01c:	4620      	mov	r0, r4
 800b01e:	4629      	mov	r1, r5
 800b020:	f7fe fda9 	bl	8009b76 <__any_on>
 800b024:	4681      	mov	r9, r0
 800b026:	b178      	cbz	r0, 800b048 <__gethex+0x1a8>
 800b028:	1e6b      	subs	r3, r5, #1
 800b02a:	f04f 0901 	mov.w	r9, #1
 800b02e:	1159      	asrs	r1, r3, #5
 800b030:	f003 021f 	and.w	r2, r3, #31
 800b034:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b038:	fa09 f202 	lsl.w	r2, r9, r2
 800b03c:	420a      	tst	r2, r1
 800b03e:	d003      	beq.n	800b048 <__gethex+0x1a8>
 800b040:	454b      	cmp	r3, r9
 800b042:	dc36      	bgt.n	800b0b2 <__gethex+0x212>
 800b044:	f04f 0902 	mov.w	r9, #2
 800b048:	442f      	add	r7, r5
 800b04a:	4629      	mov	r1, r5
 800b04c:	4620      	mov	r0, r4
 800b04e:	f7ff fec1 	bl	800add4 <rshift>
 800b052:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b056:	42bb      	cmp	r3, r7
 800b058:	da42      	bge.n	800b0e0 <__gethex+0x240>
 800b05a:	4621      	mov	r1, r4
 800b05c:	9801      	ldr	r0, [sp, #4]
 800b05e:	f7fe f935 	bl	80092cc <_Bfree>
 800b062:	2300      	movs	r3, #0
 800b064:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b066:	25a3      	movs	r5, #163	@ 0xa3
 800b068:	6013      	str	r3, [r2, #0]
 800b06a:	e793      	b.n	800af94 <__gethex+0xf4>
 800b06c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b070:	2a2e      	cmp	r2, #46	@ 0x2e
 800b072:	d012      	beq.n	800b09a <__gethex+0x1fa>
 800b074:	2b20      	cmp	r3, #32
 800b076:	d104      	bne.n	800b082 <__gethex+0x1e2>
 800b078:	f845 bb04 	str.w	fp, [r5], #4
 800b07c:	f04f 0b00 	mov.w	fp, #0
 800b080:	465b      	mov	r3, fp
 800b082:	7830      	ldrb	r0, [r6, #0]
 800b084:	9303      	str	r3, [sp, #12]
 800b086:	f7ff fef6 	bl	800ae76 <__hexdig_fun>
 800b08a:	9b03      	ldr	r3, [sp, #12]
 800b08c:	f000 000f 	and.w	r0, r0, #15
 800b090:	4098      	lsls	r0, r3
 800b092:	3304      	adds	r3, #4
 800b094:	ea4b 0b00 	orr.w	fp, fp, r0
 800b098:	e7ae      	b.n	800aff8 <__gethex+0x158>
 800b09a:	45b1      	cmp	r9, r6
 800b09c:	d8ea      	bhi.n	800b074 <__gethex+0x1d4>
 800b09e:	2201      	movs	r2, #1
 800b0a0:	492a      	ldr	r1, [pc, #168]	@ (800b14c <__gethex+0x2ac>)
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	9303      	str	r3, [sp, #12]
 800b0a6:	f7ff fe2b 	bl	800ad00 <strncmp>
 800b0aa:	9b03      	ldr	r3, [sp, #12]
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d1e1      	bne.n	800b074 <__gethex+0x1d4>
 800b0b0:	e7a2      	b.n	800aff8 <__gethex+0x158>
 800b0b2:	1ea9      	subs	r1, r5, #2
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f7fe fd5e 	bl	8009b76 <__any_on>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d0c2      	beq.n	800b044 <__gethex+0x1a4>
 800b0be:	f04f 0903 	mov.w	r9, #3
 800b0c2:	e7c1      	b.n	800b048 <__gethex+0x1a8>
 800b0c4:	da09      	bge.n	800b0da <__gethex+0x23a>
 800b0c6:	1b75      	subs	r5, r6, r5
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	9801      	ldr	r0, [sp, #4]
 800b0cc:	462a      	mov	r2, r5
 800b0ce:	1b7f      	subs	r7, r7, r5
 800b0d0:	f7fe fb10 	bl	80096f4 <__lshift>
 800b0d4:	4604      	mov	r4, r0
 800b0d6:	f100 0a14 	add.w	sl, r0, #20
 800b0da:	f04f 0900 	mov.w	r9, #0
 800b0de:	e7b8      	b.n	800b052 <__gethex+0x1b2>
 800b0e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b0e4:	42bd      	cmp	r5, r7
 800b0e6:	dd6f      	ble.n	800b1c8 <__gethex+0x328>
 800b0e8:	1bed      	subs	r5, r5, r7
 800b0ea:	42ae      	cmp	r6, r5
 800b0ec:	dc34      	bgt.n	800b158 <__gethex+0x2b8>
 800b0ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d022      	beq.n	800b13c <__gethex+0x29c>
 800b0f6:	2b03      	cmp	r3, #3
 800b0f8:	d024      	beq.n	800b144 <__gethex+0x2a4>
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d115      	bne.n	800b12a <__gethex+0x28a>
 800b0fe:	42ae      	cmp	r6, r5
 800b100:	d113      	bne.n	800b12a <__gethex+0x28a>
 800b102:	2e01      	cmp	r6, #1
 800b104:	d10b      	bne.n	800b11e <__gethex+0x27e>
 800b106:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b10a:	2562      	movs	r5, #98	@ 0x62
 800b10c:	9a02      	ldr	r2, [sp, #8]
 800b10e:	6013      	str	r3, [r2, #0]
 800b110:	2301      	movs	r3, #1
 800b112:	6123      	str	r3, [r4, #16]
 800b114:	f8ca 3000 	str.w	r3, [sl]
 800b118:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b11a:	601c      	str	r4, [r3, #0]
 800b11c:	e73a      	b.n	800af94 <__gethex+0xf4>
 800b11e:	1e71      	subs	r1, r6, #1
 800b120:	4620      	mov	r0, r4
 800b122:	f7fe fd28 	bl	8009b76 <__any_on>
 800b126:	2800      	cmp	r0, #0
 800b128:	d1ed      	bne.n	800b106 <__gethex+0x266>
 800b12a:	4621      	mov	r1, r4
 800b12c:	9801      	ldr	r0, [sp, #4]
 800b12e:	f7fe f8cd 	bl	80092cc <_Bfree>
 800b132:	2300      	movs	r3, #0
 800b134:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b136:	2550      	movs	r5, #80	@ 0x50
 800b138:	6013      	str	r3, [r2, #0]
 800b13a:	e72b      	b.n	800af94 <__gethex+0xf4>
 800b13c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1f3      	bne.n	800b12a <__gethex+0x28a>
 800b142:	e7e0      	b.n	800b106 <__gethex+0x266>
 800b144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1dd      	bne.n	800b106 <__gethex+0x266>
 800b14a:	e7ee      	b.n	800b12a <__gethex+0x28a>
 800b14c:	0800bc53 	.word	0x0800bc53
 800b150:	0800bbe9 	.word	0x0800bbe9
 800b154:	0800bcaa 	.word	0x0800bcaa
 800b158:	1e6f      	subs	r7, r5, #1
 800b15a:	f1b9 0f00 	cmp.w	r9, #0
 800b15e:	d130      	bne.n	800b1c2 <__gethex+0x322>
 800b160:	b127      	cbz	r7, 800b16c <__gethex+0x2cc>
 800b162:	4639      	mov	r1, r7
 800b164:	4620      	mov	r0, r4
 800b166:	f7fe fd06 	bl	8009b76 <__any_on>
 800b16a:	4681      	mov	r9, r0
 800b16c:	117a      	asrs	r2, r7, #5
 800b16e:	2301      	movs	r3, #1
 800b170:	f007 071f 	and.w	r7, r7, #31
 800b174:	4629      	mov	r1, r5
 800b176:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b17a:	4620      	mov	r0, r4
 800b17c:	40bb      	lsls	r3, r7
 800b17e:	1b76      	subs	r6, r6, r5
 800b180:	2502      	movs	r5, #2
 800b182:	4213      	tst	r3, r2
 800b184:	bf18      	it	ne
 800b186:	f049 0902 	orrne.w	r9, r9, #2
 800b18a:	f7ff fe23 	bl	800add4 <rshift>
 800b18e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b192:	f1b9 0f00 	cmp.w	r9, #0
 800b196:	d047      	beq.n	800b228 <__gethex+0x388>
 800b198:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d015      	beq.n	800b1cc <__gethex+0x32c>
 800b1a0:	2b03      	cmp	r3, #3
 800b1a2:	d017      	beq.n	800b1d4 <__gethex+0x334>
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d109      	bne.n	800b1bc <__gethex+0x31c>
 800b1a8:	f019 0f02 	tst.w	r9, #2
 800b1ac:	d006      	beq.n	800b1bc <__gethex+0x31c>
 800b1ae:	f8da 3000 	ldr.w	r3, [sl]
 800b1b2:	ea49 0903 	orr.w	r9, r9, r3
 800b1b6:	f019 0f01 	tst.w	r9, #1
 800b1ba:	d10e      	bne.n	800b1da <__gethex+0x33a>
 800b1bc:	f045 0510 	orr.w	r5, r5, #16
 800b1c0:	e032      	b.n	800b228 <__gethex+0x388>
 800b1c2:	f04f 0901 	mov.w	r9, #1
 800b1c6:	e7d1      	b.n	800b16c <__gethex+0x2cc>
 800b1c8:	2501      	movs	r5, #1
 800b1ca:	e7e2      	b.n	800b192 <__gethex+0x2f2>
 800b1cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1ce:	f1c3 0301 	rsb	r3, r3, #1
 800b1d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d0f0      	beq.n	800b1bc <__gethex+0x31c>
 800b1da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b1de:	f104 0314 	add.w	r3, r4, #20
 800b1e2:	f04f 0c00 	mov.w	ip, #0
 800b1e6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b1ea:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b1f8:	d01b      	beq.n	800b232 <__gethex+0x392>
 800b1fa:	3201      	adds	r2, #1
 800b1fc:	6002      	str	r2, [r0, #0]
 800b1fe:	2d02      	cmp	r5, #2
 800b200:	f104 0314 	add.w	r3, r4, #20
 800b204:	d13c      	bne.n	800b280 <__gethex+0x3e0>
 800b206:	f8d8 2000 	ldr.w	r2, [r8]
 800b20a:	3a01      	subs	r2, #1
 800b20c:	42b2      	cmp	r2, r6
 800b20e:	d109      	bne.n	800b224 <__gethex+0x384>
 800b210:	1171      	asrs	r1, r6, #5
 800b212:	2201      	movs	r2, #1
 800b214:	f006 061f 	and.w	r6, r6, #31
 800b218:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b21c:	fa02 f606 	lsl.w	r6, r2, r6
 800b220:	421e      	tst	r6, r3
 800b222:	d13a      	bne.n	800b29a <__gethex+0x3fa>
 800b224:	f045 0520 	orr.w	r5, r5, #32
 800b228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b22a:	601c      	str	r4, [r3, #0]
 800b22c:	9b02      	ldr	r3, [sp, #8]
 800b22e:	601f      	str	r7, [r3, #0]
 800b230:	e6b0      	b.n	800af94 <__gethex+0xf4>
 800b232:	4299      	cmp	r1, r3
 800b234:	f843 cc04 	str.w	ip, [r3, #-4]
 800b238:	d8d9      	bhi.n	800b1ee <__gethex+0x34e>
 800b23a:	68a3      	ldr	r3, [r4, #8]
 800b23c:	459b      	cmp	fp, r3
 800b23e:	db17      	blt.n	800b270 <__gethex+0x3d0>
 800b240:	6861      	ldr	r1, [r4, #4]
 800b242:	9801      	ldr	r0, [sp, #4]
 800b244:	3101      	adds	r1, #1
 800b246:	f7fe f801 	bl	800924c <_Balloc>
 800b24a:	4681      	mov	r9, r0
 800b24c:	b918      	cbnz	r0, 800b256 <__gethex+0x3b6>
 800b24e:	4b1a      	ldr	r3, [pc, #104]	@ (800b2b8 <__gethex+0x418>)
 800b250:	4602      	mov	r2, r0
 800b252:	2184      	movs	r1, #132	@ 0x84
 800b254:	e6c5      	b.n	800afe2 <__gethex+0x142>
 800b256:	6922      	ldr	r2, [r4, #16]
 800b258:	f104 010c 	add.w	r1, r4, #12
 800b25c:	300c      	adds	r0, #12
 800b25e:	3202      	adds	r2, #2
 800b260:	0092      	lsls	r2, r2, #2
 800b262:	f7ff fd6f 	bl	800ad44 <memcpy>
 800b266:	4621      	mov	r1, r4
 800b268:	464c      	mov	r4, r9
 800b26a:	9801      	ldr	r0, [sp, #4]
 800b26c:	f7fe f82e 	bl	80092cc <_Bfree>
 800b270:	6923      	ldr	r3, [r4, #16]
 800b272:	1c5a      	adds	r2, r3, #1
 800b274:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b278:	6122      	str	r2, [r4, #16]
 800b27a:	2201      	movs	r2, #1
 800b27c:	615a      	str	r2, [r3, #20]
 800b27e:	e7be      	b.n	800b1fe <__gethex+0x35e>
 800b280:	6922      	ldr	r2, [r4, #16]
 800b282:	455a      	cmp	r2, fp
 800b284:	dd0b      	ble.n	800b29e <__gethex+0x3fe>
 800b286:	2101      	movs	r1, #1
 800b288:	4620      	mov	r0, r4
 800b28a:	f7ff fda3 	bl	800add4 <rshift>
 800b28e:	3701      	adds	r7, #1
 800b290:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b294:	42bb      	cmp	r3, r7
 800b296:	f6ff aee0 	blt.w	800b05a <__gethex+0x1ba>
 800b29a:	2501      	movs	r5, #1
 800b29c:	e7c2      	b.n	800b224 <__gethex+0x384>
 800b29e:	f016 061f 	ands.w	r6, r6, #31
 800b2a2:	d0fa      	beq.n	800b29a <__gethex+0x3fa>
 800b2a4:	4453      	add	r3, sl
 800b2a6:	f1c6 0620 	rsb	r6, r6, #32
 800b2aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b2ae:	f7fe f8c1 	bl	8009434 <__hi0bits>
 800b2b2:	42b0      	cmp	r0, r6
 800b2b4:	dbe7      	blt.n	800b286 <__gethex+0x3e6>
 800b2b6:	e7f0      	b.n	800b29a <__gethex+0x3fa>
 800b2b8:	0800bbe9 	.word	0x0800bbe9

0800b2bc <L_shift>:
 800b2bc:	f1c2 0208 	rsb	r2, r2, #8
 800b2c0:	0092      	lsls	r2, r2, #2
 800b2c2:	b570      	push	{r4, r5, r6, lr}
 800b2c4:	f1c2 0620 	rsb	r6, r2, #32
 800b2c8:	6843      	ldr	r3, [r0, #4]
 800b2ca:	6804      	ldr	r4, [r0, #0]
 800b2cc:	fa03 f506 	lsl.w	r5, r3, r6
 800b2d0:	40d3      	lsrs	r3, r2
 800b2d2:	432c      	orrs	r4, r5
 800b2d4:	6004      	str	r4, [r0, #0]
 800b2d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b2da:	4288      	cmp	r0, r1
 800b2dc:	d3f4      	bcc.n	800b2c8 <L_shift+0xc>
 800b2de:	bd70      	pop	{r4, r5, r6, pc}

0800b2e0 <__match>:
 800b2e0:	6803      	ldr	r3, [r0, #0]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	b530      	push	{r4, r5, lr}
 800b2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ea:	b914      	cbnz	r4, 800b2f2 <__match+0x12>
 800b2ec:	6003      	str	r3, [r0, #0]
 800b2ee:	2001      	movs	r0, #1
 800b2f0:	bd30      	pop	{r4, r5, pc}
 800b2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b2fa:	2d19      	cmp	r5, #25
 800b2fc:	bf98      	it	ls
 800b2fe:	3220      	addls	r2, #32
 800b300:	42a2      	cmp	r2, r4
 800b302:	d0f0      	beq.n	800b2e6 <__match+0x6>
 800b304:	2000      	movs	r0, #0
 800b306:	e7f3      	b.n	800b2f0 <__match+0x10>

0800b308 <__hexnan>:
 800b308:	680b      	ldr	r3, [r1, #0]
 800b30a:	6801      	ldr	r1, [r0, #0]
 800b30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b310:	115e      	asrs	r6, r3, #5
 800b312:	f013 031f 	ands.w	r3, r3, #31
 800b316:	f04f 0500 	mov.w	r5, #0
 800b31a:	b087      	sub	sp, #28
 800b31c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b320:	4682      	mov	sl, r0
 800b322:	4690      	mov	r8, r2
 800b324:	46ab      	mov	fp, r5
 800b326:	bf18      	it	ne
 800b328:	3604      	addne	r6, #4
 800b32a:	9301      	str	r3, [sp, #4]
 800b32c:	9502      	str	r5, [sp, #8]
 800b32e:	1f37      	subs	r7, r6, #4
 800b330:	f846 5c04 	str.w	r5, [r6, #-4]
 800b334:	46b9      	mov	r9, r7
 800b336:	463c      	mov	r4, r7
 800b338:	1c4b      	adds	r3, r1, #1
 800b33a:	784a      	ldrb	r2, [r1, #1]
 800b33c:	9303      	str	r3, [sp, #12]
 800b33e:	b342      	cbz	r2, 800b392 <__hexnan+0x8a>
 800b340:	4610      	mov	r0, r2
 800b342:	9105      	str	r1, [sp, #20]
 800b344:	9204      	str	r2, [sp, #16]
 800b346:	f7ff fd96 	bl	800ae76 <__hexdig_fun>
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d151      	bne.n	800b3f2 <__hexnan+0xea>
 800b34e:	9a04      	ldr	r2, [sp, #16]
 800b350:	9905      	ldr	r1, [sp, #20]
 800b352:	2a20      	cmp	r2, #32
 800b354:	d818      	bhi.n	800b388 <__hexnan+0x80>
 800b356:	9b02      	ldr	r3, [sp, #8]
 800b358:	459b      	cmp	fp, r3
 800b35a:	dd13      	ble.n	800b384 <__hexnan+0x7c>
 800b35c:	454c      	cmp	r4, r9
 800b35e:	d206      	bcs.n	800b36e <__hexnan+0x66>
 800b360:	2d07      	cmp	r5, #7
 800b362:	dc04      	bgt.n	800b36e <__hexnan+0x66>
 800b364:	462a      	mov	r2, r5
 800b366:	4649      	mov	r1, r9
 800b368:	4620      	mov	r0, r4
 800b36a:	f7ff ffa7 	bl	800b2bc <L_shift>
 800b36e:	4544      	cmp	r4, r8
 800b370:	d951      	bls.n	800b416 <__hexnan+0x10e>
 800b372:	2300      	movs	r3, #0
 800b374:	f1a4 0904 	sub.w	r9, r4, #4
 800b378:	f8cd b008 	str.w	fp, [sp, #8]
 800b37c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b380:	461d      	mov	r5, r3
 800b382:	464c      	mov	r4, r9
 800b384:	9903      	ldr	r1, [sp, #12]
 800b386:	e7d7      	b.n	800b338 <__hexnan+0x30>
 800b388:	2a29      	cmp	r2, #41	@ 0x29
 800b38a:	d156      	bne.n	800b43a <__hexnan+0x132>
 800b38c:	3102      	adds	r1, #2
 800b38e:	f8ca 1000 	str.w	r1, [sl]
 800b392:	f1bb 0f00 	cmp.w	fp, #0
 800b396:	d050      	beq.n	800b43a <__hexnan+0x132>
 800b398:	454c      	cmp	r4, r9
 800b39a:	d206      	bcs.n	800b3aa <__hexnan+0xa2>
 800b39c:	2d07      	cmp	r5, #7
 800b39e:	dc04      	bgt.n	800b3aa <__hexnan+0xa2>
 800b3a0:	462a      	mov	r2, r5
 800b3a2:	4649      	mov	r1, r9
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f7ff ff89 	bl	800b2bc <L_shift>
 800b3aa:	4544      	cmp	r4, r8
 800b3ac:	d935      	bls.n	800b41a <__hexnan+0x112>
 800b3ae:	f1a8 0204 	sub.w	r2, r8, #4
 800b3b2:	4623      	mov	r3, r4
 800b3b4:	f853 1b04 	ldr.w	r1, [r3], #4
 800b3b8:	429f      	cmp	r7, r3
 800b3ba:	f842 1f04 	str.w	r1, [r2, #4]!
 800b3be:	d2f9      	bcs.n	800b3b4 <__hexnan+0xac>
 800b3c0:	1b3b      	subs	r3, r7, r4
 800b3c2:	3e03      	subs	r6, #3
 800b3c4:	3401      	adds	r4, #1
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f023 0303 	bic.w	r3, r3, #3
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	42b4      	cmp	r4, r6
 800b3d0:	bf88      	it	hi
 800b3d2:	2304      	movhi	r3, #4
 800b3d4:	4443      	add	r3, r8
 800b3d6:	f843 2b04 	str.w	r2, [r3], #4
 800b3da:	429f      	cmp	r7, r3
 800b3dc:	d2fb      	bcs.n	800b3d6 <__hexnan+0xce>
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	b91b      	cbnz	r3, 800b3ea <__hexnan+0xe2>
 800b3e2:	4547      	cmp	r7, r8
 800b3e4:	d127      	bne.n	800b436 <__hexnan+0x12e>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	603b      	str	r3, [r7, #0]
 800b3ea:	2005      	movs	r0, #5
 800b3ec:	b007      	add	sp, #28
 800b3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f2:	3501      	adds	r5, #1
 800b3f4:	f10b 0b01 	add.w	fp, fp, #1
 800b3f8:	2d08      	cmp	r5, #8
 800b3fa:	dd05      	ble.n	800b408 <__hexnan+0x100>
 800b3fc:	4544      	cmp	r4, r8
 800b3fe:	d9c1      	bls.n	800b384 <__hexnan+0x7c>
 800b400:	2300      	movs	r3, #0
 800b402:	3c04      	subs	r4, #4
 800b404:	2501      	movs	r5, #1
 800b406:	6023      	str	r3, [r4, #0]
 800b408:	6822      	ldr	r2, [r4, #0]
 800b40a:	f000 000f 	and.w	r0, r0, #15
 800b40e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b412:	6020      	str	r0, [r4, #0]
 800b414:	e7b6      	b.n	800b384 <__hexnan+0x7c>
 800b416:	2508      	movs	r5, #8
 800b418:	e7b4      	b.n	800b384 <__hexnan+0x7c>
 800b41a:	9b01      	ldr	r3, [sp, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d0de      	beq.n	800b3de <__hexnan+0xd6>
 800b420:	f1c3 0320 	rsb	r3, r3, #32
 800b424:	f04f 32ff 	mov.w	r2, #4294967295
 800b428:	40da      	lsrs	r2, r3
 800b42a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b42e:	4013      	ands	r3, r2
 800b430:	f846 3c04 	str.w	r3, [r6, #-4]
 800b434:	e7d3      	b.n	800b3de <__hexnan+0xd6>
 800b436:	3f04      	subs	r7, #4
 800b438:	e7d1      	b.n	800b3de <__hexnan+0xd6>
 800b43a:	2004      	movs	r0, #4
 800b43c:	e7d6      	b.n	800b3ec <__hexnan+0xe4>

0800b43e <__ascii_mbtowc>:
 800b43e:	b082      	sub	sp, #8
 800b440:	b901      	cbnz	r1, 800b444 <__ascii_mbtowc+0x6>
 800b442:	a901      	add	r1, sp, #4
 800b444:	b142      	cbz	r2, 800b458 <__ascii_mbtowc+0x1a>
 800b446:	b14b      	cbz	r3, 800b45c <__ascii_mbtowc+0x1e>
 800b448:	7813      	ldrb	r3, [r2, #0]
 800b44a:	600b      	str	r3, [r1, #0]
 800b44c:	7812      	ldrb	r2, [r2, #0]
 800b44e:	1e10      	subs	r0, r2, #0
 800b450:	bf18      	it	ne
 800b452:	2001      	movne	r0, #1
 800b454:	b002      	add	sp, #8
 800b456:	4770      	bx	lr
 800b458:	4610      	mov	r0, r2
 800b45a:	e7fb      	b.n	800b454 <__ascii_mbtowc+0x16>
 800b45c:	f06f 0001 	mvn.w	r0, #1
 800b460:	e7f8      	b.n	800b454 <__ascii_mbtowc+0x16>

0800b462 <_realloc_r>:
 800b462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b466:	4607      	mov	r7, r0
 800b468:	4614      	mov	r4, r2
 800b46a:	460d      	mov	r5, r1
 800b46c:	b921      	cbnz	r1, 800b478 <_realloc_r+0x16>
 800b46e:	4611      	mov	r1, r2
 800b470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b474:	f7fd be5e 	b.w	8009134 <_malloc_r>
 800b478:	b92a      	cbnz	r2, 800b486 <_realloc_r+0x24>
 800b47a:	4625      	mov	r5, r4
 800b47c:	f7fd fde6 	bl	800904c <_free_r>
 800b480:	4628      	mov	r0, r5
 800b482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b486:	f000 f840 	bl	800b50a <_malloc_usable_size_r>
 800b48a:	4284      	cmp	r4, r0
 800b48c:	4606      	mov	r6, r0
 800b48e:	d802      	bhi.n	800b496 <_realloc_r+0x34>
 800b490:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b494:	d8f4      	bhi.n	800b480 <_realloc_r+0x1e>
 800b496:	4621      	mov	r1, r4
 800b498:	4638      	mov	r0, r7
 800b49a:	f7fd fe4b 	bl	8009134 <_malloc_r>
 800b49e:	4680      	mov	r8, r0
 800b4a0:	b908      	cbnz	r0, 800b4a6 <_realloc_r+0x44>
 800b4a2:	4645      	mov	r5, r8
 800b4a4:	e7ec      	b.n	800b480 <_realloc_r+0x1e>
 800b4a6:	42b4      	cmp	r4, r6
 800b4a8:	4622      	mov	r2, r4
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	bf28      	it	cs
 800b4ae:	4632      	movcs	r2, r6
 800b4b0:	f7ff fc48 	bl	800ad44 <memcpy>
 800b4b4:	4629      	mov	r1, r5
 800b4b6:	4638      	mov	r0, r7
 800b4b8:	f7fd fdc8 	bl	800904c <_free_r>
 800b4bc:	e7f1      	b.n	800b4a2 <_realloc_r+0x40>

0800b4be <__ascii_wctomb>:
 800b4be:	4603      	mov	r3, r0
 800b4c0:	4608      	mov	r0, r1
 800b4c2:	b141      	cbz	r1, 800b4d6 <__ascii_wctomb+0x18>
 800b4c4:	2aff      	cmp	r2, #255	@ 0xff
 800b4c6:	d904      	bls.n	800b4d2 <__ascii_wctomb+0x14>
 800b4c8:	228a      	movs	r2, #138	@ 0x8a
 800b4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ce:	601a      	str	r2, [r3, #0]
 800b4d0:	4770      	bx	lr
 800b4d2:	2001      	movs	r0, #1
 800b4d4:	700a      	strb	r2, [r1, #0]
 800b4d6:	4770      	bx	lr

0800b4d8 <fiprintf>:
 800b4d8:	b40e      	push	{r1, r2, r3}
 800b4da:	b503      	push	{r0, r1, lr}
 800b4dc:	ab03      	add	r3, sp, #12
 800b4de:	4601      	mov	r1, r0
 800b4e0:	4805      	ldr	r0, [pc, #20]	@ (800b4f8 <fiprintf+0x20>)
 800b4e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4e6:	6800      	ldr	r0, [r0, #0]
 800b4e8:	9301      	str	r3, [sp, #4]
 800b4ea:	f000 f83f 	bl	800b56c <_vfiprintf_r>
 800b4ee:	b002      	add	sp, #8
 800b4f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4f4:	b003      	add	sp, #12
 800b4f6:	4770      	bx	lr
 800b4f8:	20000034 	.word	0x20000034

0800b4fc <abort>:
 800b4fc:	2006      	movs	r0, #6
 800b4fe:	b508      	push	{r3, lr}
 800b500:	f000 fa08 	bl	800b914 <raise>
 800b504:	2001      	movs	r0, #1
 800b506:	f7f6 fb9f 	bl	8001c48 <_exit>

0800b50a <_malloc_usable_size_r>:
 800b50a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b50e:	1f18      	subs	r0, r3, #4
 800b510:	2b00      	cmp	r3, #0
 800b512:	bfbc      	itt	lt
 800b514:	580b      	ldrlt	r3, [r1, r0]
 800b516:	18c0      	addlt	r0, r0, r3
 800b518:	4770      	bx	lr

0800b51a <__sfputc_r>:
 800b51a:	6893      	ldr	r3, [r2, #8]
 800b51c:	3b01      	subs	r3, #1
 800b51e:	2b00      	cmp	r3, #0
 800b520:	b410      	push	{r4}
 800b522:	6093      	str	r3, [r2, #8]
 800b524:	da08      	bge.n	800b538 <__sfputc_r+0x1e>
 800b526:	6994      	ldr	r4, [r2, #24]
 800b528:	42a3      	cmp	r3, r4
 800b52a:	db01      	blt.n	800b530 <__sfputc_r+0x16>
 800b52c:	290a      	cmp	r1, #10
 800b52e:	d103      	bne.n	800b538 <__sfputc_r+0x1e>
 800b530:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b534:	f000 b932 	b.w	800b79c <__swbuf_r>
 800b538:	6813      	ldr	r3, [r2, #0]
 800b53a:	1c58      	adds	r0, r3, #1
 800b53c:	6010      	str	r0, [r2, #0]
 800b53e:	4608      	mov	r0, r1
 800b540:	7019      	strb	r1, [r3, #0]
 800b542:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <__sfputs_r>:
 800b548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54a:	4606      	mov	r6, r0
 800b54c:	460f      	mov	r7, r1
 800b54e:	4614      	mov	r4, r2
 800b550:	18d5      	adds	r5, r2, r3
 800b552:	42ac      	cmp	r4, r5
 800b554:	d101      	bne.n	800b55a <__sfputs_r+0x12>
 800b556:	2000      	movs	r0, #0
 800b558:	e007      	b.n	800b56a <__sfputs_r+0x22>
 800b55a:	463a      	mov	r2, r7
 800b55c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b560:	4630      	mov	r0, r6
 800b562:	f7ff ffda 	bl	800b51a <__sfputc_r>
 800b566:	1c43      	adds	r3, r0, #1
 800b568:	d1f3      	bne.n	800b552 <__sfputs_r+0xa>
 800b56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b56c <_vfiprintf_r>:
 800b56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b570:	460d      	mov	r5, r1
 800b572:	b09d      	sub	sp, #116	@ 0x74
 800b574:	4614      	mov	r4, r2
 800b576:	4698      	mov	r8, r3
 800b578:	4606      	mov	r6, r0
 800b57a:	b118      	cbz	r0, 800b584 <_vfiprintf_r+0x18>
 800b57c:	6a03      	ldr	r3, [r0, #32]
 800b57e:	b90b      	cbnz	r3, 800b584 <_vfiprintf_r+0x18>
 800b580:	f7fc fd9c 	bl	80080bc <__sinit>
 800b584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b586:	07d9      	lsls	r1, r3, #31
 800b588:	d405      	bmi.n	800b596 <_vfiprintf_r+0x2a>
 800b58a:	89ab      	ldrh	r3, [r5, #12]
 800b58c:	059a      	lsls	r2, r3, #22
 800b58e:	d402      	bmi.n	800b596 <_vfiprintf_r+0x2a>
 800b590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b592:	f7fc fee2 	bl	800835a <__retarget_lock_acquire_recursive>
 800b596:	89ab      	ldrh	r3, [r5, #12]
 800b598:	071b      	lsls	r3, r3, #28
 800b59a:	d501      	bpl.n	800b5a0 <_vfiprintf_r+0x34>
 800b59c:	692b      	ldr	r3, [r5, #16]
 800b59e:	b99b      	cbnz	r3, 800b5c8 <_vfiprintf_r+0x5c>
 800b5a0:	4629      	mov	r1, r5
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f000 f938 	bl	800b818 <__swsetup_r>
 800b5a8:	b170      	cbz	r0, 800b5c8 <_vfiprintf_r+0x5c>
 800b5aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5ac:	07dc      	lsls	r4, r3, #31
 800b5ae:	d504      	bpl.n	800b5ba <_vfiprintf_r+0x4e>
 800b5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b4:	b01d      	add	sp, #116	@ 0x74
 800b5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ba:	89ab      	ldrh	r3, [r5, #12]
 800b5bc:	0598      	lsls	r0, r3, #22
 800b5be:	d4f7      	bmi.n	800b5b0 <_vfiprintf_r+0x44>
 800b5c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5c2:	f7fc fecb 	bl	800835c <__retarget_lock_release_recursive>
 800b5c6:	e7f3      	b.n	800b5b0 <_vfiprintf_r+0x44>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5ce:	f04f 0901 	mov.w	r9, #1
 800b5d2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800b788 <_vfiprintf_r+0x21c>
 800b5d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5d8:	2320      	movs	r3, #32
 800b5da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5de:	2330      	movs	r3, #48	@ 0x30
 800b5e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5e4:	4623      	mov	r3, r4
 800b5e6:	469a      	mov	sl, r3
 800b5e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ec:	b10a      	cbz	r2, 800b5f2 <_vfiprintf_r+0x86>
 800b5ee:	2a25      	cmp	r2, #37	@ 0x25
 800b5f0:	d1f9      	bne.n	800b5e6 <_vfiprintf_r+0x7a>
 800b5f2:	ebba 0b04 	subs.w	fp, sl, r4
 800b5f6:	d00b      	beq.n	800b610 <_vfiprintf_r+0xa4>
 800b5f8:	465b      	mov	r3, fp
 800b5fa:	4622      	mov	r2, r4
 800b5fc:	4629      	mov	r1, r5
 800b5fe:	4630      	mov	r0, r6
 800b600:	f7ff ffa2 	bl	800b548 <__sfputs_r>
 800b604:	3001      	adds	r0, #1
 800b606:	f000 80a7 	beq.w	800b758 <_vfiprintf_r+0x1ec>
 800b60a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b60c:	445a      	add	r2, fp
 800b60e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b610:	f89a 3000 	ldrb.w	r3, [sl]
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 809f 	beq.w	800b758 <_vfiprintf_r+0x1ec>
 800b61a:	2300      	movs	r3, #0
 800b61c:	f04f 32ff 	mov.w	r2, #4294967295
 800b620:	f10a 0a01 	add.w	sl, sl, #1
 800b624:	9304      	str	r3, [sp, #16]
 800b626:	9307      	str	r3, [sp, #28]
 800b628:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b62c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b62e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b632:	4654      	mov	r4, sl
 800b634:	2205      	movs	r2, #5
 800b636:	4854      	ldr	r0, [pc, #336]	@ (800b788 <_vfiprintf_r+0x21c>)
 800b638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b63c:	f7fc fe8f 	bl	800835e <memchr>
 800b640:	9a04      	ldr	r2, [sp, #16]
 800b642:	b9d8      	cbnz	r0, 800b67c <_vfiprintf_r+0x110>
 800b644:	06d1      	lsls	r1, r2, #27
 800b646:	bf44      	itt	mi
 800b648:	2320      	movmi	r3, #32
 800b64a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b64e:	0713      	lsls	r3, r2, #28
 800b650:	bf44      	itt	mi
 800b652:	232b      	movmi	r3, #43	@ 0x2b
 800b654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b658:	f89a 3000 	ldrb.w	r3, [sl]
 800b65c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b65e:	d015      	beq.n	800b68c <_vfiprintf_r+0x120>
 800b660:	9a07      	ldr	r2, [sp, #28]
 800b662:	4654      	mov	r4, sl
 800b664:	2000      	movs	r0, #0
 800b666:	f04f 0c0a 	mov.w	ip, #10
 800b66a:	4621      	mov	r1, r4
 800b66c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b670:	3b30      	subs	r3, #48	@ 0x30
 800b672:	2b09      	cmp	r3, #9
 800b674:	d94b      	bls.n	800b70e <_vfiprintf_r+0x1a2>
 800b676:	b1b0      	cbz	r0, 800b6a6 <_vfiprintf_r+0x13a>
 800b678:	9207      	str	r2, [sp, #28]
 800b67a:	e014      	b.n	800b6a6 <_vfiprintf_r+0x13a>
 800b67c:	eba0 0308 	sub.w	r3, r0, r8
 800b680:	46a2      	mov	sl, r4
 800b682:	fa09 f303 	lsl.w	r3, r9, r3
 800b686:	4313      	orrs	r3, r2
 800b688:	9304      	str	r3, [sp, #16]
 800b68a:	e7d2      	b.n	800b632 <_vfiprintf_r+0xc6>
 800b68c:	9b03      	ldr	r3, [sp, #12]
 800b68e:	1d19      	adds	r1, r3, #4
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	9103      	str	r1, [sp, #12]
 800b696:	bfbb      	ittet	lt
 800b698:	425b      	neglt	r3, r3
 800b69a:	f042 0202 	orrlt.w	r2, r2, #2
 800b69e:	9307      	strge	r3, [sp, #28]
 800b6a0:	9307      	strlt	r3, [sp, #28]
 800b6a2:	bfb8      	it	lt
 800b6a4:	9204      	strlt	r2, [sp, #16]
 800b6a6:	7823      	ldrb	r3, [r4, #0]
 800b6a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6aa:	d10a      	bne.n	800b6c2 <_vfiprintf_r+0x156>
 800b6ac:	7863      	ldrb	r3, [r4, #1]
 800b6ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6b0:	d132      	bne.n	800b718 <_vfiprintf_r+0x1ac>
 800b6b2:	9b03      	ldr	r3, [sp, #12]
 800b6b4:	3402      	adds	r4, #2
 800b6b6:	1d1a      	adds	r2, r3, #4
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6be:	9203      	str	r2, [sp, #12]
 800b6c0:	9305      	str	r3, [sp, #20]
 800b6c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b798 <_vfiprintf_r+0x22c>
 800b6c6:	2203      	movs	r2, #3
 800b6c8:	7821      	ldrb	r1, [r4, #0]
 800b6ca:	4650      	mov	r0, sl
 800b6cc:	f7fc fe47 	bl	800835e <memchr>
 800b6d0:	b138      	cbz	r0, 800b6e2 <_vfiprintf_r+0x176>
 800b6d2:	eba0 000a 	sub.w	r0, r0, sl
 800b6d6:	2240      	movs	r2, #64	@ 0x40
 800b6d8:	9b04      	ldr	r3, [sp, #16]
 800b6da:	3401      	adds	r4, #1
 800b6dc:	4082      	lsls	r2, r0
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	9304      	str	r3, [sp, #16]
 800b6e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6e6:	2206      	movs	r2, #6
 800b6e8:	4828      	ldr	r0, [pc, #160]	@ (800b78c <_vfiprintf_r+0x220>)
 800b6ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6ee:	f7fc fe36 	bl	800835e <memchr>
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	d03f      	beq.n	800b776 <_vfiprintf_r+0x20a>
 800b6f6:	4b26      	ldr	r3, [pc, #152]	@ (800b790 <_vfiprintf_r+0x224>)
 800b6f8:	bb1b      	cbnz	r3, 800b742 <_vfiprintf_r+0x1d6>
 800b6fa:	9b03      	ldr	r3, [sp, #12]
 800b6fc:	3307      	adds	r3, #7
 800b6fe:	f023 0307 	bic.w	r3, r3, #7
 800b702:	3308      	adds	r3, #8
 800b704:	9303      	str	r3, [sp, #12]
 800b706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b708:	443b      	add	r3, r7
 800b70a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b70c:	e76a      	b.n	800b5e4 <_vfiprintf_r+0x78>
 800b70e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b712:	460c      	mov	r4, r1
 800b714:	2001      	movs	r0, #1
 800b716:	e7a8      	b.n	800b66a <_vfiprintf_r+0xfe>
 800b718:	2300      	movs	r3, #0
 800b71a:	3401      	adds	r4, #1
 800b71c:	f04f 0c0a 	mov.w	ip, #10
 800b720:	4619      	mov	r1, r3
 800b722:	9305      	str	r3, [sp, #20]
 800b724:	4620      	mov	r0, r4
 800b726:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b72a:	3a30      	subs	r2, #48	@ 0x30
 800b72c:	2a09      	cmp	r2, #9
 800b72e:	d903      	bls.n	800b738 <_vfiprintf_r+0x1cc>
 800b730:	2b00      	cmp	r3, #0
 800b732:	d0c6      	beq.n	800b6c2 <_vfiprintf_r+0x156>
 800b734:	9105      	str	r1, [sp, #20]
 800b736:	e7c4      	b.n	800b6c2 <_vfiprintf_r+0x156>
 800b738:	fb0c 2101 	mla	r1, ip, r1, r2
 800b73c:	4604      	mov	r4, r0
 800b73e:	2301      	movs	r3, #1
 800b740:	e7f0      	b.n	800b724 <_vfiprintf_r+0x1b8>
 800b742:	ab03      	add	r3, sp, #12
 800b744:	462a      	mov	r2, r5
 800b746:	a904      	add	r1, sp, #16
 800b748:	4630      	mov	r0, r6
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	4b11      	ldr	r3, [pc, #68]	@ (800b794 <_vfiprintf_r+0x228>)
 800b74e:	f7fb fe61 	bl	8007414 <_printf_float>
 800b752:	4607      	mov	r7, r0
 800b754:	1c78      	adds	r0, r7, #1
 800b756:	d1d6      	bne.n	800b706 <_vfiprintf_r+0x19a>
 800b758:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b75a:	07d9      	lsls	r1, r3, #31
 800b75c:	d405      	bmi.n	800b76a <_vfiprintf_r+0x1fe>
 800b75e:	89ab      	ldrh	r3, [r5, #12]
 800b760:	059a      	lsls	r2, r3, #22
 800b762:	d402      	bmi.n	800b76a <_vfiprintf_r+0x1fe>
 800b764:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b766:	f7fc fdf9 	bl	800835c <__retarget_lock_release_recursive>
 800b76a:	89ab      	ldrh	r3, [r5, #12]
 800b76c:	065b      	lsls	r3, r3, #25
 800b76e:	f53f af1f 	bmi.w	800b5b0 <_vfiprintf_r+0x44>
 800b772:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b774:	e71e      	b.n	800b5b4 <_vfiprintf_r+0x48>
 800b776:	ab03      	add	r3, sp, #12
 800b778:	462a      	mov	r2, r5
 800b77a:	a904      	add	r1, sp, #16
 800b77c:	4630      	mov	r0, r6
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	4b04      	ldr	r3, [pc, #16]	@ (800b794 <_vfiprintf_r+0x228>)
 800b782:	f7fc f8e3 	bl	800794c <_printf_i>
 800b786:	e7e4      	b.n	800b752 <_vfiprintf_r+0x1e6>
 800b788:	0800bc55 	.word	0x0800bc55
 800b78c:	0800bc5f 	.word	0x0800bc5f
 800b790:	08007415 	.word	0x08007415
 800b794:	0800b549 	.word	0x0800b549
 800b798:	0800bc5b 	.word	0x0800bc5b

0800b79c <__swbuf_r>:
 800b79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b79e:	460e      	mov	r6, r1
 800b7a0:	4614      	mov	r4, r2
 800b7a2:	4605      	mov	r5, r0
 800b7a4:	b118      	cbz	r0, 800b7ae <__swbuf_r+0x12>
 800b7a6:	6a03      	ldr	r3, [r0, #32]
 800b7a8:	b90b      	cbnz	r3, 800b7ae <__swbuf_r+0x12>
 800b7aa:	f7fc fc87 	bl	80080bc <__sinit>
 800b7ae:	69a3      	ldr	r3, [r4, #24]
 800b7b0:	60a3      	str	r3, [r4, #8]
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	071a      	lsls	r2, r3, #28
 800b7b6:	d501      	bpl.n	800b7bc <__swbuf_r+0x20>
 800b7b8:	6923      	ldr	r3, [r4, #16]
 800b7ba:	b943      	cbnz	r3, 800b7ce <__swbuf_r+0x32>
 800b7bc:	4621      	mov	r1, r4
 800b7be:	4628      	mov	r0, r5
 800b7c0:	f000 f82a 	bl	800b818 <__swsetup_r>
 800b7c4:	b118      	cbz	r0, 800b7ce <__swbuf_r+0x32>
 800b7c6:	f04f 37ff 	mov.w	r7, #4294967295
 800b7ca:	4638      	mov	r0, r7
 800b7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ce:	6823      	ldr	r3, [r4, #0]
 800b7d0:	b2f6      	uxtb	r6, r6
 800b7d2:	6922      	ldr	r2, [r4, #16]
 800b7d4:	4637      	mov	r7, r6
 800b7d6:	1a98      	subs	r0, r3, r2
 800b7d8:	6963      	ldr	r3, [r4, #20]
 800b7da:	4283      	cmp	r3, r0
 800b7dc:	dc05      	bgt.n	800b7ea <__swbuf_r+0x4e>
 800b7de:	4621      	mov	r1, r4
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	f7ff fa4b 	bl	800ac7c <_fflush_r>
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d1ed      	bne.n	800b7c6 <__swbuf_r+0x2a>
 800b7ea:	68a3      	ldr	r3, [r4, #8]
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	60a3      	str	r3, [r4, #8]
 800b7f0:	6823      	ldr	r3, [r4, #0]
 800b7f2:	1c5a      	adds	r2, r3, #1
 800b7f4:	6022      	str	r2, [r4, #0]
 800b7f6:	701e      	strb	r6, [r3, #0]
 800b7f8:	1c43      	adds	r3, r0, #1
 800b7fa:	6962      	ldr	r2, [r4, #20]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d004      	beq.n	800b80a <__swbuf_r+0x6e>
 800b800:	89a3      	ldrh	r3, [r4, #12]
 800b802:	07db      	lsls	r3, r3, #31
 800b804:	d5e1      	bpl.n	800b7ca <__swbuf_r+0x2e>
 800b806:	2e0a      	cmp	r6, #10
 800b808:	d1df      	bne.n	800b7ca <__swbuf_r+0x2e>
 800b80a:	4621      	mov	r1, r4
 800b80c:	4628      	mov	r0, r5
 800b80e:	f7ff fa35 	bl	800ac7c <_fflush_r>
 800b812:	2800      	cmp	r0, #0
 800b814:	d0d9      	beq.n	800b7ca <__swbuf_r+0x2e>
 800b816:	e7d6      	b.n	800b7c6 <__swbuf_r+0x2a>

0800b818 <__swsetup_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	4b29      	ldr	r3, [pc, #164]	@ (800b8c0 <__swsetup_r+0xa8>)
 800b81c:	4605      	mov	r5, r0
 800b81e:	460c      	mov	r4, r1
 800b820:	6818      	ldr	r0, [r3, #0]
 800b822:	b118      	cbz	r0, 800b82c <__swsetup_r+0x14>
 800b824:	6a03      	ldr	r3, [r0, #32]
 800b826:	b90b      	cbnz	r3, 800b82c <__swsetup_r+0x14>
 800b828:	f7fc fc48 	bl	80080bc <__sinit>
 800b82c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b830:	0719      	lsls	r1, r3, #28
 800b832:	d422      	bmi.n	800b87a <__swsetup_r+0x62>
 800b834:	06da      	lsls	r2, r3, #27
 800b836:	d407      	bmi.n	800b848 <__swsetup_r+0x30>
 800b838:	2209      	movs	r2, #9
 800b83a:	602a      	str	r2, [r5, #0]
 800b83c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b840:	f04f 30ff 	mov.w	r0, #4294967295
 800b844:	81a3      	strh	r3, [r4, #12]
 800b846:	e033      	b.n	800b8b0 <__swsetup_r+0x98>
 800b848:	0758      	lsls	r0, r3, #29
 800b84a:	d512      	bpl.n	800b872 <__swsetup_r+0x5a>
 800b84c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b84e:	b141      	cbz	r1, 800b862 <__swsetup_r+0x4a>
 800b850:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b854:	4299      	cmp	r1, r3
 800b856:	d002      	beq.n	800b85e <__swsetup_r+0x46>
 800b858:	4628      	mov	r0, r5
 800b85a:	f7fd fbf7 	bl	800904c <_free_r>
 800b85e:	2300      	movs	r3, #0
 800b860:	6363      	str	r3, [r4, #52]	@ 0x34
 800b862:	89a3      	ldrh	r3, [r4, #12]
 800b864:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b868:	81a3      	strh	r3, [r4, #12]
 800b86a:	2300      	movs	r3, #0
 800b86c:	6063      	str	r3, [r4, #4]
 800b86e:	6923      	ldr	r3, [r4, #16]
 800b870:	6023      	str	r3, [r4, #0]
 800b872:	89a3      	ldrh	r3, [r4, #12]
 800b874:	f043 0308 	orr.w	r3, r3, #8
 800b878:	81a3      	strh	r3, [r4, #12]
 800b87a:	6923      	ldr	r3, [r4, #16]
 800b87c:	b94b      	cbnz	r3, 800b892 <__swsetup_r+0x7a>
 800b87e:	89a3      	ldrh	r3, [r4, #12]
 800b880:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b888:	d003      	beq.n	800b892 <__swsetup_r+0x7a>
 800b88a:	4621      	mov	r1, r4
 800b88c:	4628      	mov	r0, r5
 800b88e:	f000 f882 	bl	800b996 <__smakebuf_r>
 800b892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b896:	f013 0201 	ands.w	r2, r3, #1
 800b89a:	d00a      	beq.n	800b8b2 <__swsetup_r+0x9a>
 800b89c:	2200      	movs	r2, #0
 800b89e:	60a2      	str	r2, [r4, #8]
 800b8a0:	6962      	ldr	r2, [r4, #20]
 800b8a2:	4252      	negs	r2, r2
 800b8a4:	61a2      	str	r2, [r4, #24]
 800b8a6:	6922      	ldr	r2, [r4, #16]
 800b8a8:	b942      	cbnz	r2, 800b8bc <__swsetup_r+0xa4>
 800b8aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b8ae:	d1c5      	bne.n	800b83c <__swsetup_r+0x24>
 800b8b0:	bd38      	pop	{r3, r4, r5, pc}
 800b8b2:	0799      	lsls	r1, r3, #30
 800b8b4:	bf58      	it	pl
 800b8b6:	6962      	ldrpl	r2, [r4, #20]
 800b8b8:	60a2      	str	r2, [r4, #8]
 800b8ba:	e7f4      	b.n	800b8a6 <__swsetup_r+0x8e>
 800b8bc:	2000      	movs	r0, #0
 800b8be:	e7f7      	b.n	800b8b0 <__swsetup_r+0x98>
 800b8c0:	20000034 	.word	0x20000034

0800b8c4 <_raise_r>:
 800b8c4:	291f      	cmp	r1, #31
 800b8c6:	b538      	push	{r3, r4, r5, lr}
 800b8c8:	4605      	mov	r5, r0
 800b8ca:	460c      	mov	r4, r1
 800b8cc:	d904      	bls.n	800b8d8 <_raise_r+0x14>
 800b8ce:	2316      	movs	r3, #22
 800b8d0:	6003      	str	r3, [r0, #0]
 800b8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
 800b8d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b8da:	b112      	cbz	r2, 800b8e2 <_raise_r+0x1e>
 800b8dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8e0:	b94b      	cbnz	r3, 800b8f6 <_raise_r+0x32>
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	f000 f830 	bl	800b948 <_getpid_r>
 800b8e8:	4622      	mov	r2, r4
 800b8ea:	4601      	mov	r1, r0
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8f2:	f000 b817 	b.w	800b924 <_kill_r>
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d00a      	beq.n	800b910 <_raise_r+0x4c>
 800b8fa:	1c59      	adds	r1, r3, #1
 800b8fc:	d103      	bne.n	800b906 <_raise_r+0x42>
 800b8fe:	2316      	movs	r3, #22
 800b900:	6003      	str	r3, [r0, #0]
 800b902:	2001      	movs	r0, #1
 800b904:	e7e7      	b.n	800b8d6 <_raise_r+0x12>
 800b906:	2100      	movs	r1, #0
 800b908:	4620      	mov	r0, r4
 800b90a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b90e:	4798      	blx	r3
 800b910:	2000      	movs	r0, #0
 800b912:	e7e0      	b.n	800b8d6 <_raise_r+0x12>

0800b914 <raise>:
 800b914:	4b02      	ldr	r3, [pc, #8]	@ (800b920 <raise+0xc>)
 800b916:	4601      	mov	r1, r0
 800b918:	6818      	ldr	r0, [r3, #0]
 800b91a:	f7ff bfd3 	b.w	800b8c4 <_raise_r>
 800b91e:	bf00      	nop
 800b920:	20000034 	.word	0x20000034

0800b924 <_kill_r>:
 800b924:	b538      	push	{r3, r4, r5, lr}
 800b926:	2300      	movs	r3, #0
 800b928:	4d06      	ldr	r5, [pc, #24]	@ (800b944 <_kill_r+0x20>)
 800b92a:	4604      	mov	r4, r0
 800b92c:	4608      	mov	r0, r1
 800b92e:	4611      	mov	r1, r2
 800b930:	602b      	str	r3, [r5, #0]
 800b932:	f7f6 f979 	bl	8001c28 <_kill>
 800b936:	1c43      	adds	r3, r0, #1
 800b938:	d102      	bne.n	800b940 <_kill_r+0x1c>
 800b93a:	682b      	ldr	r3, [r5, #0]
 800b93c:	b103      	cbz	r3, 800b940 <_kill_r+0x1c>
 800b93e:	6023      	str	r3, [r4, #0]
 800b940:	bd38      	pop	{r3, r4, r5, pc}
 800b942:	bf00      	nop
 800b944:	20000484 	.word	0x20000484

0800b948 <_getpid_r>:
 800b948:	f7f6 b966 	b.w	8001c18 <_getpid>

0800b94c <__swhatbuf_r>:
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	460c      	mov	r4, r1
 800b950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b954:	b096      	sub	sp, #88	@ 0x58
 800b956:	4615      	mov	r5, r2
 800b958:	2900      	cmp	r1, #0
 800b95a:	461e      	mov	r6, r3
 800b95c:	da0c      	bge.n	800b978 <__swhatbuf_r+0x2c>
 800b95e:	89a3      	ldrh	r3, [r4, #12]
 800b960:	2100      	movs	r1, #0
 800b962:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b966:	bf14      	ite	ne
 800b968:	2340      	movne	r3, #64	@ 0x40
 800b96a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b96e:	2000      	movs	r0, #0
 800b970:	6031      	str	r1, [r6, #0]
 800b972:	602b      	str	r3, [r5, #0]
 800b974:	b016      	add	sp, #88	@ 0x58
 800b976:	bd70      	pop	{r4, r5, r6, pc}
 800b978:	466a      	mov	r2, sp
 800b97a:	f000 f849 	bl	800ba10 <_fstat_r>
 800b97e:	2800      	cmp	r0, #0
 800b980:	dbed      	blt.n	800b95e <__swhatbuf_r+0x12>
 800b982:	9901      	ldr	r1, [sp, #4]
 800b984:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b988:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b98c:	4259      	negs	r1, r3
 800b98e:	4159      	adcs	r1, r3
 800b990:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b994:	e7eb      	b.n	800b96e <__swhatbuf_r+0x22>

0800b996 <__smakebuf_r>:
 800b996:	898b      	ldrh	r3, [r1, #12]
 800b998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b99a:	079d      	lsls	r5, r3, #30
 800b99c:	4606      	mov	r6, r0
 800b99e:	460c      	mov	r4, r1
 800b9a0:	d507      	bpl.n	800b9b2 <__smakebuf_r+0x1c>
 800b9a2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b9a6:	6023      	str	r3, [r4, #0]
 800b9a8:	6123      	str	r3, [r4, #16]
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	6163      	str	r3, [r4, #20]
 800b9ae:	b003      	add	sp, #12
 800b9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9b2:	ab01      	add	r3, sp, #4
 800b9b4:	466a      	mov	r2, sp
 800b9b6:	f7ff ffc9 	bl	800b94c <__swhatbuf_r>
 800b9ba:	9f00      	ldr	r7, [sp, #0]
 800b9bc:	4605      	mov	r5, r0
 800b9be:	4630      	mov	r0, r6
 800b9c0:	4639      	mov	r1, r7
 800b9c2:	f7fd fbb7 	bl	8009134 <_malloc_r>
 800b9c6:	b948      	cbnz	r0, 800b9dc <__smakebuf_r+0x46>
 800b9c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9cc:	059a      	lsls	r2, r3, #22
 800b9ce:	d4ee      	bmi.n	800b9ae <__smakebuf_r+0x18>
 800b9d0:	f023 0303 	bic.w	r3, r3, #3
 800b9d4:	f043 0302 	orr.w	r3, r3, #2
 800b9d8:	81a3      	strh	r3, [r4, #12]
 800b9da:	e7e2      	b.n	800b9a2 <__smakebuf_r+0xc>
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	6020      	str	r0, [r4, #0]
 800b9e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9e4:	81a3      	strh	r3, [r4, #12]
 800b9e6:	9b01      	ldr	r3, [sp, #4]
 800b9e8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b9ec:	b15b      	cbz	r3, 800ba06 <__smakebuf_r+0x70>
 800b9ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	f000 f81e 	bl	800ba34 <_isatty_r>
 800b9f8:	b128      	cbz	r0, 800ba06 <__smakebuf_r+0x70>
 800b9fa:	89a3      	ldrh	r3, [r4, #12]
 800b9fc:	f023 0303 	bic.w	r3, r3, #3
 800ba00:	f043 0301 	orr.w	r3, r3, #1
 800ba04:	81a3      	strh	r3, [r4, #12]
 800ba06:	89a3      	ldrh	r3, [r4, #12]
 800ba08:	431d      	orrs	r5, r3
 800ba0a:	81a5      	strh	r5, [r4, #12]
 800ba0c:	e7cf      	b.n	800b9ae <__smakebuf_r+0x18>
	...

0800ba10 <_fstat_r>:
 800ba10:	b538      	push	{r3, r4, r5, lr}
 800ba12:	2300      	movs	r3, #0
 800ba14:	4d06      	ldr	r5, [pc, #24]	@ (800ba30 <_fstat_r+0x20>)
 800ba16:	4604      	mov	r4, r0
 800ba18:	4608      	mov	r0, r1
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	602b      	str	r3, [r5, #0]
 800ba1e:	f7f6 f963 	bl	8001ce8 <_fstat>
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	d102      	bne.n	800ba2c <_fstat_r+0x1c>
 800ba26:	682b      	ldr	r3, [r5, #0]
 800ba28:	b103      	cbz	r3, 800ba2c <_fstat_r+0x1c>
 800ba2a:	6023      	str	r3, [r4, #0]
 800ba2c:	bd38      	pop	{r3, r4, r5, pc}
 800ba2e:	bf00      	nop
 800ba30:	20000484 	.word	0x20000484

0800ba34 <_isatty_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	2300      	movs	r3, #0
 800ba38:	4d05      	ldr	r5, [pc, #20]	@ (800ba50 <_isatty_r+0x1c>)
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	4608      	mov	r0, r1
 800ba3e:	602b      	str	r3, [r5, #0]
 800ba40:	f7f6 f962 	bl	8001d08 <_isatty>
 800ba44:	1c43      	adds	r3, r0, #1
 800ba46:	d102      	bne.n	800ba4e <_isatty_r+0x1a>
 800ba48:	682b      	ldr	r3, [r5, #0]
 800ba4a:	b103      	cbz	r3, 800ba4e <_isatty_r+0x1a>
 800ba4c:	6023      	str	r3, [r4, #0]
 800ba4e:	bd38      	pop	{r3, r4, r5, pc}
 800ba50:	20000484 	.word	0x20000484

0800ba54 <_init>:
 800ba54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba56:	bf00      	nop
 800ba58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba5a:	bc08      	pop	{r3}
 800ba5c:	469e      	mov	lr, r3
 800ba5e:	4770      	bx	lr

0800ba60 <_fini>:
 800ba60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba62:	bf00      	nop
 800ba64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba66:	bc08      	pop	{r3}
 800ba68:	469e      	mov	lr, r3
 800ba6a:	4770      	bx	lr
