
dez_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e680  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  0800e878  0800e878  0000f878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef3c  0800ef3c  00010254  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ef3c  0800ef3c  0000ff3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef44  0800ef44  00010254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef44  0800ef44  0000ff44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ef48  0800ef48  0000ff48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  0800ef4c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000254  0800f1a0  00010254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  0800f1a0  000105bc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00010254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e98f  00000000  00000000  0001028a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004007  00000000  00000000  0002ec19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  00032c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001485  00000000  00000000  00034690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd6f  00000000  00000000  00035b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f73e  00000000  00000000  00063884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124c29  00000000  00000000  00082fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a7beb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c94  00000000  00000000  001a7c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001b08c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000254 	.word	0x20000254
 8000214:	00000000 	.word	0x00000000
 8000218:	0800e860 	.word	0x0800e860

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000258 	.word	0x20000258
 8000234:	0800e860 	.word	0x0800e860

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_drsub>:
 800025c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000260:	e002      	b.n	8000268 <__adddf3>
 8000262:	bf00      	nop

08000264 <__aeabi_dsub>:
 8000264:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000268 <__adddf3>:
 8000268:	b530      	push	{r4, r5, lr}
 800026a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800026e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000272:	ea94 0f05 	teq	r4, r5
 8000276:	bf08      	it	eq
 8000278:	ea90 0f02 	teqeq	r0, r2
 800027c:	bf1f      	itttt	ne
 800027e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000282:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000286:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800028a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800028e:	f000 80e2 	beq.w	8000456 <__adddf3+0x1ee>
 8000292:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000296:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800029a:	bfb8      	it	lt
 800029c:	426d      	neglt	r5, r5
 800029e:	dd0c      	ble.n	80002ba <__adddf3+0x52>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	ea82 0000 	eor.w	r0, r2, r0
 80002ae:	ea83 0101 	eor.w	r1, r3, r1
 80002b2:	ea80 0202 	eor.w	r2, r0, r2
 80002b6:	ea81 0303 	eor.w	r3, r1, r3
 80002ba:	2d36      	cmp	r5, #54	@ 0x36
 80002bc:	bf88      	it	hi
 80002be:	bd30      	pophi	{r4, r5, pc}
 80002c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x70>
 80002d2:	4240      	negs	r0, r0
 80002d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x84>
 80002e6:	4252      	negs	r2, r2
 80002e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ec:	ea94 0f05 	teq	r4, r5
 80002f0:	f000 80a7 	beq.w	8000442 <__adddf3+0x1da>
 80002f4:	f1a4 0401 	sub.w	r4, r4, #1
 80002f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002fc:	db0d      	blt.n	800031a <__adddf3+0xb2>
 80002fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000302:	fa22 f205 	lsr.w	r2, r2, r5
 8000306:	1880      	adds	r0, r0, r2
 8000308:	f141 0100 	adc.w	r1, r1, #0
 800030c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000310:	1880      	adds	r0, r0, r2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	4159      	adcs	r1, r3
 8000318:	e00e      	b.n	8000338 <__adddf3+0xd0>
 800031a:	f1a5 0520 	sub.w	r5, r5, #32
 800031e:	f10e 0e20 	add.w	lr, lr, #32
 8000322:	2a01      	cmp	r2, #1
 8000324:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000328:	bf28      	it	cs
 800032a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	18c0      	adds	r0, r0, r3
 8000334:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000338:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800033c:	d507      	bpl.n	800034e <__adddf3+0xe6>
 800033e:	f04f 0e00 	mov.w	lr, #0
 8000342:	f1dc 0c00 	rsbs	ip, ip, #0
 8000346:	eb7e 0000 	sbcs.w	r0, lr, r0
 800034a:	eb6e 0101 	sbc.w	r1, lr, r1
 800034e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000352:	d31b      	bcc.n	800038c <__adddf3+0x124>
 8000354:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000358:	d30c      	bcc.n	8000374 <__adddf3+0x10c>
 800035a:	0849      	lsrs	r1, r1, #1
 800035c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000360:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000364:	f104 0401 	add.w	r4, r4, #1
 8000368:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800036c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000370:	f080 809a 	bcs.w	80004a8 <__adddf3+0x240>
 8000374:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000378:	bf08      	it	eq
 800037a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800037e:	f150 0000 	adcs.w	r0, r0, #0
 8000382:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000386:	ea41 0105 	orr.w	r1, r1, r5
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000390:	4140      	adcs	r0, r0
 8000392:	eb41 0101 	adc.w	r1, r1, r1
 8000396:	3c01      	subs	r4, #1
 8000398:	bf28      	it	cs
 800039a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800039e:	d2e9      	bcs.n	8000374 <__adddf3+0x10c>
 80003a0:	f091 0f00 	teq	r1, #0
 80003a4:	bf04      	itt	eq
 80003a6:	4601      	moveq	r1, r0
 80003a8:	2000      	moveq	r0, #0
 80003aa:	fab1 f381 	clz	r3, r1
 80003ae:	bf08      	it	eq
 80003b0:	3320      	addeq	r3, #32
 80003b2:	f1a3 030b 	sub.w	r3, r3, #11
 80003b6:	f1b3 0220 	subs.w	r2, r3, #32
 80003ba:	da0c      	bge.n	80003d6 <__adddf3+0x16e>
 80003bc:	320c      	adds	r2, #12
 80003be:	dd08      	ble.n	80003d2 <__adddf3+0x16a>
 80003c0:	f102 0c14 	add.w	ip, r2, #20
 80003c4:	f1c2 020c 	rsb	r2, r2, #12
 80003c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003cc:	fa21 f102 	lsr.w	r1, r1, r2
 80003d0:	e00c      	b.n	80003ec <__adddf3+0x184>
 80003d2:	f102 0214 	add.w	r2, r2, #20
 80003d6:	bfd8      	it	le
 80003d8:	f1c2 0c20 	rsble	ip, r2, #32
 80003dc:	fa01 f102 	lsl.w	r1, r1, r2
 80003e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003e4:	bfdc      	itt	le
 80003e6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ea:	4090      	lslle	r0, r2
 80003ec:	1ae4      	subs	r4, r4, r3
 80003ee:	bfa2      	ittt	ge
 80003f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003f4:	4329      	orrge	r1, r5
 80003f6:	bd30      	popge	{r4, r5, pc}
 80003f8:	ea6f 0404 	mvn.w	r4, r4
 80003fc:	3c1f      	subs	r4, #31
 80003fe:	da1c      	bge.n	800043a <__adddf3+0x1d2>
 8000400:	340c      	adds	r4, #12
 8000402:	dc0e      	bgt.n	8000422 <__adddf3+0x1ba>
 8000404:	f104 0414 	add.w	r4, r4, #20
 8000408:	f1c4 0220 	rsb	r2, r4, #32
 800040c:	fa20 f004 	lsr.w	r0, r0, r4
 8000410:	fa01 f302 	lsl.w	r3, r1, r2
 8000414:	ea40 0003 	orr.w	r0, r0, r3
 8000418:	fa21 f304 	lsr.w	r3, r1, r4
 800041c:	ea45 0103 	orr.w	r1, r5, r3
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	f1c4 040c 	rsb	r4, r4, #12
 8000426:	f1c4 0220 	rsb	r2, r4, #32
 800042a:	fa20 f002 	lsr.w	r0, r0, r2
 800042e:	fa01 f304 	lsl.w	r3, r1, r4
 8000432:	ea40 0003 	orr.w	r0, r0, r3
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	fa21 f004 	lsr.w	r0, r1, r4
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	f094 0f00 	teq	r4, #0
 8000446:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800044a:	bf06      	itte	eq
 800044c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000450:	3401      	addeq	r4, #1
 8000452:	3d01      	subne	r5, #1
 8000454:	e74e      	b.n	80002f4 <__adddf3+0x8c>
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf18      	it	ne
 800045c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000460:	d029      	beq.n	80004b6 <__adddf3+0x24e>
 8000462:	ea94 0f05 	teq	r4, r5
 8000466:	bf08      	it	eq
 8000468:	ea90 0f02 	teqeq	r0, r2
 800046c:	d005      	beq.n	800047a <__adddf3+0x212>
 800046e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000472:	bf04      	itt	eq
 8000474:	4619      	moveq	r1, r3
 8000476:	4610      	moveq	r0, r2
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea91 0f03 	teq	r1, r3
 800047e:	bf1e      	ittt	ne
 8000480:	2100      	movne	r1, #0
 8000482:	2000      	movne	r0, #0
 8000484:	bd30      	popne	{r4, r5, pc}
 8000486:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800048a:	d105      	bne.n	8000498 <__adddf3+0x230>
 800048c:	0040      	lsls	r0, r0, #1
 800048e:	4149      	adcs	r1, r1
 8000490:	bf28      	it	cs
 8000492:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000496:	bd30      	pop	{r4, r5, pc}
 8000498:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800049c:	bf3c      	itt	cc
 800049e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004a2:	bd30      	popcc	{r4, r5, pc}
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ba:	bf1a      	itte	ne
 80004bc:	4619      	movne	r1, r3
 80004be:	4610      	movne	r0, r2
 80004c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004c4:	bf1c      	itt	ne
 80004c6:	460b      	movne	r3, r1
 80004c8:	4602      	movne	r2, r0
 80004ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ce:	bf06      	itte	eq
 80004d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004d4:	ea91 0f03 	teqeq	r1, r3
 80004d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	bf00      	nop

080004e0 <__aeabi_ui2d>:
 80004e0:	f090 0f00 	teq	r0, #0
 80004e4:	bf04      	itt	eq
 80004e6:	2100      	moveq	r1, #0
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f4:	f04f 0500 	mov.w	r5, #0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e750      	b.n	80003a0 <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2d>:
 8000500:	f090 0f00 	teq	r0, #0
 8000504:	bf04      	itt	eq
 8000506:	2100      	moveq	r1, #0
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000510:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000514:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000518:	bf48      	it	mi
 800051a:	4240      	negmi	r0, r0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e73e      	b.n	80003a0 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_f2d>:
 8000524:	0042      	lsls	r2, r0, #1
 8000526:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800052a:	ea4f 0131 	mov.w	r1, r1, rrx
 800052e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000532:	bf1f      	itttt	ne
 8000534:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000538:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800053c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000540:	4770      	bxne	lr
 8000542:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000546:	bf08      	it	eq
 8000548:	4770      	bxeq	lr
 800054a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800054e:	bf04      	itt	eq
 8000550:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800055c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000560:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000564:	e71c      	b.n	80003a0 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_ul2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f04f 0500 	mov.w	r5, #0
 8000576:	e00a      	b.n	800058e <__aeabi_l2d+0x16>

08000578 <__aeabi_l2d>:
 8000578:	ea50 0201 	orrs.w	r2, r0, r1
 800057c:	bf08      	it	eq
 800057e:	4770      	bxeq	lr
 8000580:	b530      	push	{r4, r5, lr}
 8000582:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000586:	d502      	bpl.n	800058e <__aeabi_l2d+0x16>
 8000588:	4240      	negs	r0, r0
 800058a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800058e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000592:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000596:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800059a:	f43f aed8 	beq.w	800034e <__adddf3+0xe6>
 800059e:	f04f 0203 	mov.w	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005b6:	f1c2 0320 	rsb	r3, r2, #32
 80005ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80005be:	fa20 f002 	lsr.w	r0, r0, r2
 80005c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005c6:	ea40 000e 	orr.w	r0, r0, lr
 80005ca:	fa21 f102 	lsr.w	r1, r1, r2
 80005ce:	4414      	add	r4, r2
 80005d0:	e6bd      	b.n	800034e <__adddf3+0xe6>
 80005d2:	bf00      	nop

080005d4 <__aeabi_dmul>:
 80005d4:	b570      	push	{r4, r5, r6, lr}
 80005d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005e2:	bf1d      	ittte	ne
 80005e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e8:	ea94 0f0c 	teqne	r4, ip
 80005ec:	ea95 0f0c 	teqne	r5, ip
 80005f0:	f000 f8de 	bleq	80007b0 <__aeabi_dmul+0x1dc>
 80005f4:	442c      	add	r4, r5
 80005f6:	ea81 0603 	eor.w	r6, r1, r3
 80005fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000602:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000606:	bf18      	it	ne
 8000608:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000610:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000614:	d038      	beq.n	8000688 <__aeabi_dmul+0xb4>
 8000616:	fba0 ce02 	umull	ip, lr, r0, r2
 800061a:	f04f 0500 	mov.w	r5, #0
 800061e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000622:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000626:	fbe0 e503 	umlal	lr, r5, r0, r3
 800062a:	f04f 0600 	mov.w	r6, #0
 800062e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000632:	f09c 0f00 	teq	ip, #0
 8000636:	bf18      	it	ne
 8000638:	f04e 0e01 	orrne.w	lr, lr, #1
 800063c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000640:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000644:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000648:	d204      	bcs.n	8000654 <__aeabi_dmul+0x80>
 800064a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800064e:	416d      	adcs	r5, r5
 8000650:	eb46 0606 	adc.w	r6, r6, r6
 8000654:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000658:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800065c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000660:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000664:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000668:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800066c:	bf88      	it	hi
 800066e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000672:	d81e      	bhi.n	80006b2 <__aeabi_dmul+0xde>
 8000674:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000678:	bf08      	it	eq
 800067a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800067e:	f150 0000 	adcs.w	r0, r0, #0
 8000682:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800068c:	ea46 0101 	orr.w	r1, r6, r1
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	ea81 0103 	eor.w	r1, r1, r3
 8000698:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800069c:	bfc2      	ittt	gt
 800069e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006a6:	bd70      	popgt	{r4, r5, r6, pc}
 80006a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006ac:	f04f 0e00 	mov.w	lr, #0
 80006b0:	3c01      	subs	r4, #1
 80006b2:	f300 80ab 	bgt.w	800080c <__aeabi_dmul+0x238>
 80006b6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ba:	bfde      	ittt	le
 80006bc:	2000      	movle	r0, #0
 80006be:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006c2:	bd70      	pople	{r4, r5, r6, pc}
 80006c4:	f1c4 0400 	rsb	r4, r4, #0
 80006c8:	3c20      	subs	r4, #32
 80006ca:	da35      	bge.n	8000738 <__aeabi_dmul+0x164>
 80006cc:	340c      	adds	r4, #12
 80006ce:	dc1b      	bgt.n	8000708 <__aeabi_dmul+0x134>
 80006d0:	f104 0414 	add.w	r4, r4, #20
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f305 	lsl.w	r3, r0, r5
 80006dc:	fa20 f004 	lsr.w	r0, r0, r4
 80006e0:	fa01 f205 	lsl.w	r2, r1, r5
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	fa21 f604 	lsr.w	r6, r1, r4
 80006f8:	eb42 0106 	adc.w	r1, r2, r6
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f1c4 040c 	rsb	r4, r4, #12
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f304 	lsl.w	r3, r0, r4
 8000714:	fa20 f005 	lsr.w	r0, r0, r5
 8000718:	fa01 f204 	lsl.w	r2, r1, r4
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	f141 0100 	adc.w	r1, r1, #0
 800072c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000730:	bf08      	it	eq
 8000732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f205 	lsl.w	r2, r0, r5
 8000740:	ea4e 0e02 	orr.w	lr, lr, r2
 8000744:	fa20 f304 	lsr.w	r3, r0, r4
 8000748:	fa01 f205 	lsl.w	r2, r1, r5
 800074c:	ea43 0302 	orr.w	r3, r3, r2
 8000750:	fa21 f004 	lsr.w	r0, r1, r4
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	fa21 f204 	lsr.w	r2, r1, r4
 800075c:	ea20 0002 	bic.w	r0, r0, r2
 8000760:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f094 0f00 	teq	r4, #0
 8000774:	d10f      	bne.n	8000796 <__aeabi_dmul+0x1c2>
 8000776:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800077a:	0040      	lsls	r0, r0, #1
 800077c:	eb41 0101 	adc.w	r1, r1, r1
 8000780:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000784:	bf08      	it	eq
 8000786:	3c01      	subeq	r4, #1
 8000788:	d0f7      	beq.n	800077a <__aeabi_dmul+0x1a6>
 800078a:	ea41 0106 	orr.w	r1, r1, r6
 800078e:	f095 0f00 	teq	r5, #0
 8000792:	bf18      	it	ne
 8000794:	4770      	bxne	lr
 8000796:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800079a:	0052      	lsls	r2, r2, #1
 800079c:	eb43 0303 	adc.w	r3, r3, r3
 80007a0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007a4:	bf08      	it	eq
 80007a6:	3d01      	subeq	r5, #1
 80007a8:	d0f7      	beq.n	800079a <__aeabi_dmul+0x1c6>
 80007aa:	ea43 0306 	orr.w	r3, r3, r6
 80007ae:	4770      	bx	lr
 80007b0:	ea94 0f0c 	teq	r4, ip
 80007b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b8:	bf18      	it	ne
 80007ba:	ea95 0f0c 	teqne	r5, ip
 80007be:	d00c      	beq.n	80007da <__aeabi_dmul+0x206>
 80007c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c4:	bf18      	it	ne
 80007c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ca:	d1d1      	bne.n	8000770 <__aeabi_dmul+0x19c>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007de:	bf06      	itte	eq
 80007e0:	4610      	moveq	r0, r2
 80007e2:	4619      	moveq	r1, r3
 80007e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e8:	d019      	beq.n	800081e <__aeabi_dmul+0x24a>
 80007ea:	ea94 0f0c 	teq	r4, ip
 80007ee:	d102      	bne.n	80007f6 <__aeabi_dmul+0x222>
 80007f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007f4:	d113      	bne.n	800081e <__aeabi_dmul+0x24a>
 80007f6:	ea95 0f0c 	teq	r5, ip
 80007fa:	d105      	bne.n	8000808 <__aeabi_dmul+0x234>
 80007fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000800:	bf1c      	itt	ne
 8000802:	4610      	movne	r0, r2
 8000804:	4619      	movne	r1, r3
 8000806:	d10a      	bne.n	800081e <__aeabi_dmul+0x24a>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000810:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000814:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000822:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000826:	bd70      	pop	{r4, r5, r6, pc}

08000828 <__aeabi_ddiv>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800082e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000832:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000836:	bf1d      	ittte	ne
 8000838:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800083c:	ea94 0f0c 	teqne	r4, ip
 8000840:	ea95 0f0c 	teqne	r5, ip
 8000844:	f000 f8a7 	bleq	8000996 <__aeabi_ddiv+0x16e>
 8000848:	eba4 0405 	sub.w	r4, r4, r5
 800084c:	ea81 0e03 	eor.w	lr, r1, r3
 8000850:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000854:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000858:	f000 8088 	beq.w	800096c <__aeabi_ddiv+0x144>
 800085c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000860:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000864:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000868:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800086c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000870:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000874:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000878:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800087c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000880:	429d      	cmp	r5, r3
 8000882:	bf08      	it	eq
 8000884:	4296      	cmpeq	r6, r2
 8000886:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800088a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800088e:	d202      	bcs.n	8000896 <__aeabi_ddiv+0x6e>
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	1ab6      	subs	r6, r6, r2
 8000898:	eb65 0503 	sbc.w	r5, r5, r3
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008a6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000904:	ea55 0e06 	orrs.w	lr, r5, r6
 8000908:	d018      	beq.n	800093c <__aeabi_ddiv+0x114>
 800090a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800090e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000912:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000916:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800091a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800091e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000922:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000926:	d1c0      	bne.n	80008aa <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800092c:	d10b      	bne.n	8000946 <__aeabi_ddiv+0x11e>
 800092e:	ea41 0100 	orr.w	r1, r1, r0
 8000932:	f04f 0000 	mov.w	r0, #0
 8000936:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800093a:	e7b6      	b.n	80008aa <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	bf04      	itt	eq
 8000942:	4301      	orreq	r1, r0
 8000944:	2000      	moveq	r0, #0
 8000946:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800094a:	bf88      	it	hi
 800094c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000950:	f63f aeaf 	bhi.w	80006b2 <__aeabi_dmul+0xde>
 8000954:	ebb5 0c03 	subs.w	ip, r5, r3
 8000958:	bf04      	itt	eq
 800095a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800095e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000962:	f150 0000 	adcs.w	r0, r0, #0
 8000966:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000970:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000974:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000978:	bfc2      	ittt	gt
 800097a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800097e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000982:	bd70      	popgt	{r4, r5, r6, pc}
 8000984:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000988:	f04f 0e00 	mov.w	lr, #0
 800098c:	3c01      	subs	r4, #1
 800098e:	e690      	b.n	80006b2 <__aeabi_dmul+0xde>
 8000990:	ea45 0e06 	orr.w	lr, r5, r6
 8000994:	e68d      	b.n	80006b2 <__aeabi_dmul+0xde>
 8000996:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800099a:	ea94 0f0c 	teq	r4, ip
 800099e:	bf08      	it	eq
 80009a0:	ea95 0f0c 	teqeq	r5, ip
 80009a4:	f43f af3b 	beq.w	800081e <__aeabi_dmul+0x24a>
 80009a8:	ea94 0f0c 	teq	r4, ip
 80009ac:	d10a      	bne.n	80009c4 <__aeabi_ddiv+0x19c>
 80009ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009b2:	f47f af34 	bne.w	800081e <__aeabi_dmul+0x24a>
 80009b6:	ea95 0f0c 	teq	r5, ip
 80009ba:	f47f af25 	bne.w	8000808 <__aeabi_dmul+0x234>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e72c      	b.n	800081e <__aeabi_dmul+0x24a>
 80009c4:	ea95 0f0c 	teq	r5, ip
 80009c8:	d106      	bne.n	80009d8 <__aeabi_ddiv+0x1b0>
 80009ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ce:	f43f aefd 	beq.w	80007cc <__aeabi_dmul+0x1f8>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e722      	b.n	800081e <__aeabi_dmul+0x24a>
 80009d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009dc:	bf18      	it	ne
 80009de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009e2:	f47f aec5 	bne.w	8000770 <__aeabi_dmul+0x19c>
 80009e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ea:	f47f af0d 	bne.w	8000808 <__aeabi_dmul+0x234>
 80009ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009f2:	f47f aeeb 	bne.w	80007cc <__aeabi_dmul+0x1f8>
 80009f6:	e712      	b.n	800081e <__aeabi_dmul+0x24a>

080009f8 <__gedf2>:
 80009f8:	f04f 3cff 	mov.w	ip, #4294967295
 80009fc:	e006      	b.n	8000a0c <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__ledf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	e002      	b.n	8000a0c <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__cmpdf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	bf18      	it	ne
 8000a1e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a22:	d01b      	beq.n	8000a5c <__cmpdf2+0x54>
 8000a24:	b001      	add	sp, #4
 8000a26:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a2a:	bf0c      	ite	eq
 8000a2c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a30:	ea91 0f03 	teqne	r1, r3
 8000a34:	bf02      	ittt	eq
 8000a36:	ea90 0f02 	teqeq	r0, r2
 8000a3a:	2000      	moveq	r0, #0
 8000a3c:	4770      	bxeq	lr
 8000a3e:	f110 0f00 	cmn.w	r0, #0
 8000a42:	ea91 0f03 	teq	r1, r3
 8000a46:	bf58      	it	pl
 8000a48:	4299      	cmppl	r1, r3
 8000a4a:	bf08      	it	eq
 8000a4c:	4290      	cmpeq	r0, r2
 8000a4e:	bf2c      	ite	cs
 8000a50:	17d8      	asrcs	r0, r3, #31
 8000a52:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a56:	f040 0001 	orr.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d102      	bne.n	8000a6c <__cmpdf2+0x64>
 8000a66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a6a:	d107      	bne.n	8000a7c <__cmpdf2+0x74>
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d1d6      	bne.n	8000a24 <__cmpdf2+0x1c>
 8000a76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a7a:	d0d3      	beq.n	8000a24 <__cmpdf2+0x1c>
 8000a7c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdrcmple>:
 8000a84:	4684      	mov	ip, r0
 8000a86:	4610      	mov	r0, r2
 8000a88:	4662      	mov	r2, ip
 8000a8a:	468c      	mov	ip, r1
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4663      	mov	r3, ip
 8000a90:	e000      	b.n	8000a94 <__aeabi_cdcmpeq>
 8000a92:	bf00      	nop

08000a94 <__aeabi_cdcmpeq>:
 8000a94:	b501      	push	{r0, lr}
 8000a96:	f7ff ffb7 	bl	8000a08 <__cmpdf2>
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	bf48      	it	mi
 8000a9e:	f110 0f00 	cmnmi.w	r0, #0
 8000aa2:	bd01      	pop	{r0, pc}

08000aa4 <__aeabi_dcmpeq>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff fff4 	bl	8000a94 <__aeabi_cdcmpeq>
 8000aac:	bf0c      	ite	eq
 8000aae:	2001      	moveq	r0, #1
 8000ab0:	2000      	movne	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmplt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffea 	bl	8000a94 <__aeabi_cdcmpeq>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmple>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffe0 	bl	8000a94 <__aeabi_cdcmpeq>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpge>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffce 	bl	8000a84 <__aeabi_cdrcmple>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpgt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffc4 	bl	8000a84 <__aeabi_cdrcmple>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpun>:
 8000b08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__aeabi_dcmpun+0x10>
 8000b12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b16:	d10a      	bne.n	8000b2e <__aeabi_dcmpun+0x26>
 8000b18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b20:	d102      	bne.n	8000b28 <__aeabi_dcmpun+0x20>
 8000b22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b26:	d102      	bne.n	8000b2e <__aeabi_dcmpun+0x26>
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	f04f 0001 	mov.w	r0, #1
 8000b32:	4770      	bx	lr

08000b34 <__aeabi_d2iz>:
 8000b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b3c:	d215      	bcs.n	8000b6a <__aeabi_d2iz+0x36>
 8000b3e:	d511      	bpl.n	8000b64 <__aeabi_d2iz+0x30>
 8000b40:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d912      	bls.n	8000b70 <__aeabi_d2iz+0x3c>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d105      	bne.n	8000b7c <__aeabi_d2iz+0x48>
 8000b70:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	bf08      	it	eq
 8000b76:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__aeabi_d2uiz>:
 8000b84:	004a      	lsls	r2, r1, #1
 8000b86:	d211      	bcs.n	8000bac <__aeabi_d2uiz+0x28>
 8000b88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b8c:	d211      	bcs.n	8000bb2 <__aeabi_d2uiz+0x2e>
 8000b8e:	d50d      	bpl.n	8000bac <__aeabi_d2uiz+0x28>
 8000b90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b98:	d40e      	bmi.n	8000bb8 <__aeabi_d2uiz+0x34>
 8000b9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d102      	bne.n	8000bbe <__aeabi_d2uiz+0x3a>
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	4770      	bx	lr
 8000bbe:	f04f 0000 	mov.w	r0, #0
 8000bc2:	4770      	bx	lr

08000bc4 <__aeabi_d2f>:
 8000bc4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bcc:	bf24      	itt	cs
 8000bce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bd6:	d90d      	bls.n	8000bf4 <__aeabi_d2f+0x30>
 8000bd8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bdc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bec:	bf08      	it	eq
 8000bee:	f020 0001 	biceq.w	r0, r0, #1
 8000bf2:	4770      	bx	lr
 8000bf4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf8:	d121      	bne.n	8000c3e <__aeabi_d2f+0x7a>
 8000bfa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bfe:	bfbc      	itt	lt
 8000c00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c04:	4770      	bxlt	lr
 8000c06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c0e:	f1c2 0218 	rsb	r2, r2, #24
 8000c12:	f1c2 0c20 	rsb	ip, r2, #32
 8000c16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c1e:	bf18      	it	ne
 8000c20:	f040 0001 	orrne.w	r0, r0, #1
 8000c24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c30:	ea40 000c 	orr.w	r0, r0, ip
 8000c34:	fa23 f302 	lsr.w	r3, r3, r2
 8000c38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c3c:	e7cc      	b.n	8000bd8 <__aeabi_d2f+0x14>
 8000c3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c42:	d107      	bne.n	8000c54 <__aeabi_d2f+0x90>
 8000c44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c48:	bf1e      	ittt	ne
 8000c4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c52:	4770      	bxne	lr
 8000c54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <__aeabi_ldivmod>:
 8000c64:	b97b      	cbnz	r3, 8000c86 <__aeabi_ldivmod+0x22>
 8000c66:	b972      	cbnz	r2, 8000c86 <__aeabi_ldivmod+0x22>
 8000c68:	2900      	cmp	r1, #0
 8000c6a:	bfbe      	ittt	lt
 8000c6c:	2000      	movlt	r0, #0
 8000c6e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c72:	e006      	blt.n	8000c82 <__aeabi_ldivmod+0x1e>
 8000c74:	bf08      	it	eq
 8000c76:	2800      	cmpeq	r0, #0
 8000c78:	bf1c      	itt	ne
 8000c7a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c7e:	f04f 30ff 	movne.w	r0, #4294967295
 8000c82:	f000 ba31 	b.w	80010e8 <__aeabi_idiv0>
 8000c86:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	db09      	blt.n	8000ca6 <__aeabi_ldivmod+0x42>
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db1a      	blt.n	8000ccc <__aeabi_ldivmod+0x68>
 8000c96:	f000 f883 	bl	8000da0 <__udivmoddi4>
 8000c9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca2:	b004      	add	sp, #16
 8000ca4:	4770      	bx	lr
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db1b      	blt.n	8000ce8 <__aeabi_ldivmod+0x84>
 8000cb0:	f000 f876 	bl	8000da0 <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	4252      	negs	r2, r2
 8000cc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f865 	bl	8000da0 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4240      	negs	r0, r0
 8000ce2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce6:	4770      	bx	lr
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	f000 f857 	bl	8000da0 <__udivmoddi4>
 8000cf2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfa:	b004      	add	sp, #16
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_uldivmod>:
 8000d04:	b953      	cbnz	r3, 8000d1c <__aeabi_uldivmod+0x18>
 8000d06:	b94a      	cbnz	r2, 8000d1c <__aeabi_uldivmod+0x18>
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	2800      	cmpeq	r0, #0
 8000d0e:	bf1c      	itt	ne
 8000d10:	f04f 31ff 	movne.w	r1, #4294967295
 8000d14:	f04f 30ff 	movne.w	r0, #4294967295
 8000d18:	f000 b9e6 	b.w	80010e8 <__aeabi_idiv0>
 8000d1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d24:	f000 f83c 	bl	8000da0 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_d2lz>:
 8000d34:	b538      	push	{r3, r4, r5, lr}
 8000d36:	2200      	movs	r2, #0
 8000d38:	2300      	movs	r3, #0
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	460d      	mov	r5, r1
 8000d3e:	f7ff febb 	bl	8000ab8 <__aeabi_dcmplt>
 8000d42:	b928      	cbnz	r0, 8000d50 <__aeabi_d2lz+0x1c>
 8000d44:	4620      	mov	r0, r4
 8000d46:	4629      	mov	r1, r5
 8000d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d4c:	f000 b80a 	b.w	8000d64 <__aeabi_d2ulz>
 8000d50:	4620      	mov	r0, r4
 8000d52:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d56:	f000 f805 	bl	8000d64 <__aeabi_d2ulz>
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d60:	bd38      	pop	{r3, r4, r5, pc}
 8000d62:	bf00      	nop

08000d64 <__aeabi_d2ulz>:
 8000d64:	b5d0      	push	{r4, r6, r7, lr}
 8000d66:	2200      	movs	r2, #0
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <__aeabi_d2ulz+0x34>)
 8000d6a:	4606      	mov	r6, r0
 8000d6c:	460f      	mov	r7, r1
 8000d6e:	f7ff fc31 	bl	80005d4 <__aeabi_dmul>
 8000d72:	f7ff ff07 	bl	8000b84 <__aeabi_d2uiz>
 8000d76:	4604      	mov	r4, r0
 8000d78:	f7ff fbb2 	bl	80004e0 <__aeabi_ui2d>
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <__aeabi_d2ulz+0x38>)
 8000d80:	f7ff fc28 	bl	80005d4 <__aeabi_dmul>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4630      	mov	r0, r6
 8000d8a:	4639      	mov	r1, r7
 8000d8c:	f7ff fa6a 	bl	8000264 <__aeabi_dsub>
 8000d90:	f7ff fef8 	bl	8000b84 <__aeabi_d2uiz>
 8000d94:	4621      	mov	r1, r4
 8000d96:	bdd0      	pop	{r4, r6, r7, pc}
 8000d98:	3df00000 	.word	0x3df00000
 8000d9c:	41f00000 	.word	0x41f00000

08000da0 <__udivmoddi4>:
 8000da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000da6:	4688      	mov	r8, r1
 8000da8:	4604      	mov	r4, r0
 8000daa:	468e      	mov	lr, r1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d14a      	bne.n	8000e46 <__udivmoddi4+0xa6>
 8000db0:	428a      	cmp	r2, r1
 8000db2:	4617      	mov	r7, r2
 8000db4:	d95f      	bls.n	8000e76 <__udivmoddi4+0xd6>
 8000db6:	fab2 f682 	clz	r6, r2
 8000dba:	b14e      	cbz	r6, 8000dd0 <__udivmoddi4+0x30>
 8000dbc:	f1c6 0320 	rsb	r3, r6, #32
 8000dc0:	fa01 fe06 	lsl.w	lr, r1, r6
 8000dc4:	40b7      	lsls	r7, r6
 8000dc6:	40b4      	lsls	r4, r6
 8000dc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dcc:	ea43 0e0e 	orr.w	lr, r3, lr
 8000dd0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dd4:	fa1f fc87 	uxth.w	ip, r7
 8000dd8:	0c23      	lsrs	r3, r4, #16
 8000dda:	fbbe f1f8 	udiv	r1, lr, r8
 8000dde:	fb08 ee11 	mls	lr, r8, r1, lr
 8000de2:	fb01 f20c 	mul.w	r2, r1, ip
 8000de6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x5e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x5c>
 8000df6:	429a      	cmp	r2, r3
 8000df8:	f200 8154 	bhi.w	80010a4 <__udivmoddi4+0x304>
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	b2a2      	uxth	r2, r4
 8000e02:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e06:	fb08 3310 	mls	r3, r8, r0, r3
 8000e0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000e12:	4594      	cmp	ip, r2
 8000e14:	d90b      	bls.n	8000e2e <__udivmoddi4+0x8e>
 8000e16:	18ba      	adds	r2, r7, r2
 8000e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1c:	bf2c      	ite	cs
 8000e1e:	2401      	movcs	r4, #1
 8000e20:	2400      	movcc	r4, #0
 8000e22:	4594      	cmp	ip, r2
 8000e24:	d902      	bls.n	8000e2c <__udivmoddi4+0x8c>
 8000e26:	2c00      	cmp	r4, #0
 8000e28:	f000 813f 	beq.w	80010aa <__udivmoddi4+0x30a>
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e32:	eba2 020c 	sub.w	r2, r2, ip
 8000e36:	2100      	movs	r1, #0
 8000e38:	b11d      	cbz	r5, 8000e42 <__udivmoddi4+0xa2>
 8000e3a:	40f2      	lsrs	r2, r6
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e9c5 2300 	strd	r2, r3, [r5]
 8000e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d905      	bls.n	8000e56 <__udivmoddi4+0xb6>
 8000e4a:	b10d      	cbz	r5, 8000e50 <__udivmoddi4+0xb0>
 8000e4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000e50:	2100      	movs	r1, #0
 8000e52:	4608      	mov	r0, r1
 8000e54:	e7f5      	b.n	8000e42 <__udivmoddi4+0xa2>
 8000e56:	fab3 f183 	clz	r1, r3
 8000e5a:	2900      	cmp	r1, #0
 8000e5c:	d14e      	bne.n	8000efc <__udivmoddi4+0x15c>
 8000e5e:	4543      	cmp	r3, r8
 8000e60:	f0c0 8112 	bcc.w	8001088 <__udivmoddi4+0x2e8>
 8000e64:	4282      	cmp	r2, r0
 8000e66:	f240 810f 	bls.w	8001088 <__udivmoddi4+0x2e8>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	2d00      	cmp	r5, #0
 8000e6e:	d0e8      	beq.n	8000e42 <__udivmoddi4+0xa2>
 8000e70:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e74:	e7e5      	b.n	8000e42 <__udivmoddi4+0xa2>
 8000e76:	2a00      	cmp	r2, #0
 8000e78:	f000 80ac 	beq.w	8000fd4 <__udivmoddi4+0x234>
 8000e7c:	fab2 f682 	clz	r6, r2
 8000e80:	2e00      	cmp	r6, #0
 8000e82:	f040 80bb 	bne.w	8000ffc <__udivmoddi4+0x25c>
 8000e86:	1a8b      	subs	r3, r1, r2
 8000e88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e8c:	b2bc      	uxth	r4, r7
 8000e8e:	2101      	movs	r1, #1
 8000e90:	0c02      	lsrs	r2, r0, #16
 8000e92:	b280      	uxth	r0, r0
 8000e94:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e9c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000ea0:	fb04 f20c 	mul.w	r2, r4, ip
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d90e      	bls.n	8000ec6 <__udivmoddi4+0x126>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000eae:	bf2c      	ite	cs
 8000eb0:	f04f 0901 	movcs.w	r9, #1
 8000eb4:	f04f 0900 	movcc.w	r9, #0
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d903      	bls.n	8000ec4 <__udivmoddi4+0x124>
 8000ebc:	f1b9 0f00 	cmp.w	r9, #0
 8000ec0:	f000 80ec 	beq.w	800109c <__udivmoddi4+0x2fc>
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ecc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ed0:	fb04 f408 	mul.w	r4, r4, r8
 8000ed4:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000ed8:	4294      	cmp	r4, r2
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x154>
 8000edc:	18ba      	adds	r2, r7, r2
 8000ede:	f108 33ff 	add.w	r3, r8, #4294967295
 8000ee2:	bf2c      	ite	cs
 8000ee4:	2001      	movcs	r0, #1
 8000ee6:	2000      	movcc	r0, #0
 8000ee8:	4294      	cmp	r4, r2
 8000eea:	d902      	bls.n	8000ef2 <__udivmoddi4+0x152>
 8000eec:	2800      	cmp	r0, #0
 8000eee:	f000 80d1 	beq.w	8001094 <__udivmoddi4+0x2f4>
 8000ef2:	4698      	mov	r8, r3
 8000ef4:	1b12      	subs	r2, r2, r4
 8000ef6:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000efa:	e79d      	b.n	8000e38 <__udivmoddi4+0x98>
 8000efc:	f1c1 0620 	rsb	r6, r1, #32
 8000f00:	408b      	lsls	r3, r1
 8000f02:	fa08 f401 	lsl.w	r4, r8, r1
 8000f06:	fa00 f901 	lsl.w	r9, r0, r1
 8000f0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f0e:	fa28 f806 	lsr.w	r8, r8, r6
 8000f12:	408a      	lsls	r2, r1
 8000f14:	431f      	orrs	r7, r3
 8000f16:	fa20 f306 	lsr.w	r3, r0, r6
 8000f1a:	0c38      	lsrs	r0, r7, #16
 8000f1c:	4323      	orrs	r3, r4
 8000f1e:	fa1f fc87 	uxth.w	ip, r7
 8000f22:	0c1c      	lsrs	r4, r3, #16
 8000f24:	fbb8 fef0 	udiv	lr, r8, r0
 8000f28:	fb00 881e 	mls	r8, r0, lr, r8
 8000f2c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000f30:	fb0e f80c 	mul.w	r8, lr, ip
 8000f34:	45a0      	cmp	r8, r4
 8000f36:	d90e      	bls.n	8000f56 <__udivmoddi4+0x1b6>
 8000f38:	193c      	adds	r4, r7, r4
 8000f3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f3e:	bf2c      	ite	cs
 8000f40:	f04f 0b01 	movcs.w	fp, #1
 8000f44:	f04f 0b00 	movcc.w	fp, #0
 8000f48:	45a0      	cmp	r8, r4
 8000f4a:	d903      	bls.n	8000f54 <__udivmoddi4+0x1b4>
 8000f4c:	f1bb 0f00 	cmp.w	fp, #0
 8000f50:	f000 80b8 	beq.w	80010c4 <__udivmoddi4+0x324>
 8000f54:	46d6      	mov	lr, sl
 8000f56:	eba4 0408 	sub.w	r4, r4, r8
 8000f5a:	fa1f f883 	uxth.w	r8, r3
 8000f5e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f62:	fb00 4413 	mls	r4, r0, r3, r4
 8000f66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f6a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000f6e:	45a4      	cmp	ip, r4
 8000f70:	d90e      	bls.n	8000f90 <__udivmoddi4+0x1f0>
 8000f72:	193c      	adds	r4, r7, r4
 8000f74:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f78:	bf2c      	ite	cs
 8000f7a:	f04f 0801 	movcs.w	r8, #1
 8000f7e:	f04f 0800 	movcc.w	r8, #0
 8000f82:	45a4      	cmp	ip, r4
 8000f84:	d903      	bls.n	8000f8e <__udivmoddi4+0x1ee>
 8000f86:	f1b8 0f00 	cmp.w	r8, #0
 8000f8a:	f000 809f 	beq.w	80010cc <__udivmoddi4+0x32c>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f94:	eba4 040c 	sub.w	r4, r4, ip
 8000f98:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f9c:	4564      	cmp	r4, ip
 8000f9e:	4673      	mov	r3, lr
 8000fa0:	46e0      	mov	r8, ip
 8000fa2:	d302      	bcc.n	8000faa <__udivmoddi4+0x20a>
 8000fa4:	d107      	bne.n	8000fb6 <__udivmoddi4+0x216>
 8000fa6:	45f1      	cmp	r9, lr
 8000fa8:	d205      	bcs.n	8000fb6 <__udivmoddi4+0x216>
 8000faa:	ebbe 0302 	subs.w	r3, lr, r2
 8000fae:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fb2:	3801      	subs	r0, #1
 8000fb4:	46e0      	mov	r8, ip
 8000fb6:	b15d      	cbz	r5, 8000fd0 <__udivmoddi4+0x230>
 8000fb8:	ebb9 0203 	subs.w	r2, r9, r3
 8000fbc:	eb64 0408 	sbc.w	r4, r4, r8
 8000fc0:	fa04 f606 	lsl.w	r6, r4, r6
 8000fc4:	fa22 f301 	lsr.w	r3, r2, r1
 8000fc8:	40cc      	lsrs	r4, r1
 8000fca:	431e      	orrs	r6, r3
 8000fcc:	e9c5 6400 	strd	r6, r4, [r5]
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	e736      	b.n	8000e42 <__udivmoddi4+0xa2>
 8000fd4:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fd8:	0c01      	lsrs	r1, r0, #16
 8000fda:	4614      	mov	r4, r2
 8000fdc:	b280      	uxth	r0, r0
 8000fde:	4696      	mov	lr, r2
 8000fe0:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fe4:	2620      	movs	r6, #32
 8000fe6:	4690      	mov	r8, r2
 8000fe8:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000fec:	4610      	mov	r0, r2
 8000fee:	fbb1 f1f2 	udiv	r1, r1, r2
 8000ff2:	eba3 0308 	sub.w	r3, r3, r8
 8000ff6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ffa:	e74b      	b.n	8000e94 <__udivmoddi4+0xf4>
 8000ffc:	40b7      	lsls	r7, r6
 8000ffe:	f1c6 0320 	rsb	r3, r6, #32
 8001002:	fa01 f206 	lsl.w	r2, r1, r6
 8001006:	fa21 f803 	lsr.w	r8, r1, r3
 800100a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800100e:	fa20 f303 	lsr.w	r3, r0, r3
 8001012:	b2bc      	uxth	r4, r7
 8001014:	40b0      	lsls	r0, r6
 8001016:	4313      	orrs	r3, r2
 8001018:	0c02      	lsrs	r2, r0, #16
 800101a:	0c19      	lsrs	r1, r3, #16
 800101c:	b280      	uxth	r0, r0
 800101e:	fbb8 f9fe 	udiv	r9, r8, lr
 8001022:	fb0e 8819 	mls	r8, lr, r9, r8
 8001026:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800102a:	fb09 f804 	mul.w	r8, r9, r4
 800102e:	4588      	cmp	r8, r1
 8001030:	d951      	bls.n	80010d6 <__udivmoddi4+0x336>
 8001032:	1879      	adds	r1, r7, r1
 8001034:	f109 3cff 	add.w	ip, r9, #4294967295
 8001038:	bf2c      	ite	cs
 800103a:	f04f 0a01 	movcs.w	sl, #1
 800103e:	f04f 0a00 	movcc.w	sl, #0
 8001042:	4588      	cmp	r8, r1
 8001044:	d902      	bls.n	800104c <__udivmoddi4+0x2ac>
 8001046:	f1ba 0f00 	cmp.w	sl, #0
 800104a:	d031      	beq.n	80010b0 <__udivmoddi4+0x310>
 800104c:	eba1 0108 	sub.w	r1, r1, r8
 8001050:	fbb1 f9fe 	udiv	r9, r1, lr
 8001054:	fb09 f804 	mul.w	r8, r9, r4
 8001058:	fb0e 1119 	mls	r1, lr, r9, r1
 800105c:	b29b      	uxth	r3, r3
 800105e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001062:	4543      	cmp	r3, r8
 8001064:	d235      	bcs.n	80010d2 <__udivmoddi4+0x332>
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	f109 31ff 	add.w	r1, r9, #4294967295
 800106c:	bf2c      	ite	cs
 800106e:	f04f 0a01 	movcs.w	sl, #1
 8001072:	f04f 0a00 	movcc.w	sl, #0
 8001076:	4543      	cmp	r3, r8
 8001078:	d2bb      	bcs.n	8000ff2 <__udivmoddi4+0x252>
 800107a:	f1ba 0f00 	cmp.w	sl, #0
 800107e:	d1b8      	bne.n	8000ff2 <__udivmoddi4+0x252>
 8001080:	f1a9 0102 	sub.w	r1, r9, #2
 8001084:	443b      	add	r3, r7
 8001086:	e7b4      	b.n	8000ff2 <__udivmoddi4+0x252>
 8001088:	1a84      	subs	r4, r0, r2
 800108a:	eb68 0203 	sbc.w	r2, r8, r3
 800108e:	2001      	movs	r0, #1
 8001090:	4696      	mov	lr, r2
 8001092:	e6eb      	b.n	8000e6c <__udivmoddi4+0xcc>
 8001094:	443a      	add	r2, r7
 8001096:	f1a8 0802 	sub.w	r8, r8, #2
 800109a:	e72b      	b.n	8000ef4 <__udivmoddi4+0x154>
 800109c:	f1ac 0c02 	sub.w	ip, ip, #2
 80010a0:	443b      	add	r3, r7
 80010a2:	e710      	b.n	8000ec6 <__udivmoddi4+0x126>
 80010a4:	3902      	subs	r1, #2
 80010a6:	443b      	add	r3, r7
 80010a8:	e6a9      	b.n	8000dfe <__udivmoddi4+0x5e>
 80010aa:	443a      	add	r2, r7
 80010ac:	3802      	subs	r0, #2
 80010ae:	e6be      	b.n	8000e2e <__udivmoddi4+0x8e>
 80010b0:	eba7 0808 	sub.w	r8, r7, r8
 80010b4:	f1a9 0c02 	sub.w	ip, r9, #2
 80010b8:	4441      	add	r1, r8
 80010ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80010be:	fb09 f804 	mul.w	r8, r9, r4
 80010c2:	e7c9      	b.n	8001058 <__udivmoddi4+0x2b8>
 80010c4:	f1ae 0e02 	sub.w	lr, lr, #2
 80010c8:	443c      	add	r4, r7
 80010ca:	e744      	b.n	8000f56 <__udivmoddi4+0x1b6>
 80010cc:	3b02      	subs	r3, #2
 80010ce:	443c      	add	r4, r7
 80010d0:	e75e      	b.n	8000f90 <__udivmoddi4+0x1f0>
 80010d2:	4649      	mov	r1, r9
 80010d4:	e78d      	b.n	8000ff2 <__udivmoddi4+0x252>
 80010d6:	eba1 0108 	sub.w	r1, r1, r8
 80010da:	46cc      	mov	ip, r9
 80010dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e0:	fb09 f804 	mul.w	r8, r9, r4
 80010e4:	e7b8      	b.n	8001058 <__udivmoddi4+0x2b8>
 80010e6:	bf00      	nop

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800110e:	4b45      	ldr	r3, [pc, #276]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001110:	4a45      	ldr	r2, [pc, #276]	@ (8001228 <MX_ADC1_Init+0x13c>)
 8001112:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001114:	4b43      	ldr	r3, [pc, #268]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800111a:	4b42      	ldr	r3, [pc, #264]	@ (8001224 <MX_ADC1_Init+0x138>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001120:	4b40      	ldr	r3, [pc, #256]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001126:	4b3f      	ldr	r3, [pc, #252]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001128:	2201      	movs	r2, #1
 800112a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112c:	4b3d      	ldr	r3, [pc, #244]	@ (8001224 <MX_ADC1_Init+0x138>)
 800112e:	2204      	movs	r2, #4
 8001130:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001132:	4b3c      	ldr	r3, [pc, #240]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001134:	2200      	movs	r2, #0
 8001136:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001138:	4b3a      	ldr	r3, [pc, #232]	@ (8001224 <MX_ADC1_Init+0x138>)
 800113a:	2200      	movs	r2, #0
 800113c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800113e:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001140:	2204      	movs	r2, #4
 8001142:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001144:	4b37      	ldr	r3, [pc, #220]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800114c:	4b35      	ldr	r3, [pc, #212]	@ (8001224 <MX_ADC1_Init+0x138>)
 800114e:	2200      	movs	r2, #0
 8001150:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001152:	4b34      	ldr	r3, [pc, #208]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001154:	2200      	movs	r2, #0
 8001156:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001158:	4b32      	ldr	r3, [pc, #200]	@ (8001224 <MX_ADC1_Init+0x138>)
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001160:	4b30      	ldr	r3, [pc, #192]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001162:	2200      	movs	r2, #0
 8001164:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001166:	4b2f      	ldr	r3, [pc, #188]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800116e:	482d      	ldr	r0, [pc, #180]	@ (8001224 <MX_ADC1_Init+0x138>)
 8001170:	f001 fc16 	bl	80029a0 <HAL_ADC_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800117a:	f000 fe45 	bl	8001e08 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	4826      	ldr	r0, [pc, #152]	@ (8001224 <MX_ADC1_Init+0x138>)
 800118a:	f002 f965 	bl	8003458 <HAL_ADCEx_MultiModeConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001194:	f000 fe38 	bl	8001e08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001198:	4b24      	ldr	r3, [pc, #144]	@ (800122c <MX_ADC1_Init+0x140>)
 800119a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800119c:	2306      	movs	r3, #6
 800119e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011a4:	237f      	movs	r3, #127	@ 0x7f
 80011a6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a8:	2304      	movs	r3, #4
 80011aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	481b      	ldr	r0, [pc, #108]	@ (8001224 <MX_ADC1_Init+0x138>)
 80011b6:	f001 fd3f 	bl	8002c38 <HAL_ADC_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80011c0:	f000 fe22 	bl	8001e08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_ADC1_Init+0x144>)
 80011c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011c8:	230c      	movs	r3, #12
 80011ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80011cc:	2307      	movs	r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	4813      	ldr	r0, [pc, #76]	@ (8001224 <MX_ADC1_Init+0x138>)
 80011d6:	f001 fd2f 	bl	8002c38 <HAL_ADC_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80011e0:	f000 fe12 	bl	8001e08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <MX_ADC1_Init+0x148>)
 80011e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011e8:	2312      	movs	r3, #18
 80011ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	480c      	ldr	r0, [pc, #48]	@ (8001224 <MX_ADC1_Init+0x138>)
 80011f2:	f001 fd21 	bl	8002c38 <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80011fc:	f000 fe04 	bl	8001e08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8001200:	4b0d      	ldr	r3, [pc, #52]	@ (8001238 <MX_ADC1_Init+0x14c>)
 8001202:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001204:	2318      	movs	r3, #24
 8001206:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_ADC1_Init+0x138>)
 800120e:	f001 fd13 	bl	8002c38 <HAL_ADC_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8001218:	f000 fdf6 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	@ 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000270 	.word	0x20000270
 8001228:	42028000 	.word	0x42028000
 800122c:	14f00020 	.word	0x14f00020
 8001230:	c7520000 	.word	0xc7520000
 8001234:	80000001 	.word	0x80000001
 8001238:	cb840000 	.word	0xcb840000

0800123c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0ae      	sub	sp, #184	@ 0xb8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	2294      	movs	r2, #148	@ 0x94
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f008 fb50 	bl	8009902 <memset>
  if(adcHandle->Instance==ADC1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a27      	ldr	r2, [pc, #156]	@ (8001304 <HAL_ADC_MspInit+0xc8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d146      	bne.n	80012fa <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800126c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001270:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001272:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001276:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 800127a:	2301      	movs	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800127e:	2301      	movs	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001282:	2310      	movs	r3, #16
 8001284:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001286:	2307      	movs	r3, #7
 8001288:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800128a:	2302      	movs	r3, #2
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800128e:	2302      	movs	r3, #2
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001292:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4618      	mov	r0, r3
 800129e:	f003 ff3b 	bl	8005118 <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80012a8:	f000 fdae 	bl	8001e08 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012ac:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <HAL_ADC_MspInit+0xcc>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b0:	4a15      	ldr	r2, [pc, #84]	@ (8001308 <HAL_ADC_MspInit+0xcc>)
 80012b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b8:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <HAL_ADC_MspInit+0xcc>)
 80012ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <HAL_ADC_MspInit+0xcc>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001308 <HAL_ADC_MspInit+0xcc>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <HAL_ADC_MspInit+0xcc>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012dc:	2301      	movs	r3, #1
 80012de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	@ (800130c <HAL_ADC_MspInit+0xd0>)
 80012f6:	f002 fd09 	bl	8003d0c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012fa:	bf00      	nop
 80012fc:	37b8      	adds	r7, #184	@ 0xb8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	42028000 	.word	0x42028000
 8001308:	40021000 	.word	0x40021000
 800130c:	42020000 	.word	0x42020000

08001310 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b3d      	ldr	r3, [pc, #244]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a3c      	ldr	r2, [pc, #240]	@ (800141c <MX_GPIO_Init+0x10c>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b3a      	ldr	r3, [pc, #232]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	4b37      	ldr	r3, [pc, #220]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	4a36      	ldr	r2, [pc, #216]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134a:	4b34      	ldr	r3, [pc, #208]	@ (800141c <MX_GPIO_Init+0x10c>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b31      	ldr	r3, [pc, #196]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	4a30      	ldr	r2, [pc, #192]	@ (800141c <MX_GPIO_Init+0x10c>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001362:	4b2e      	ldr	r3, [pc, #184]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	4a2a      	ldr	r2, [pc, #168]	@ (800141c <MX_GPIO_Init+0x10c>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137a:	4b28      	ldr	r3, [pc, #160]	@ (800141c <MX_GPIO_Init+0x10c>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800138c:	4824      	ldr	r0, [pc, #144]	@ (8001420 <MX_GPIO_Init+0x110>)
 800138e:	f002 fe3d 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2110      	movs	r1, #16
 8001396:	4823      	ldr	r0, [pc, #140]	@ (8001424 <MX_GPIO_Init+0x114>)
 8001398:	f002 fe38 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2101      	movs	r1, #1
 80013a0:	4821      	ldr	r0, [pc, #132]	@ (8001428 <MX_GPIO_Init+0x118>)
 80013a2:	f002 fe33 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4818      	ldr	r0, [pc, #96]	@ (8001420 <MX_GPIO_Init+0x110>)
 80013c0:	f002 fca4 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : Bat23_Pin */
  GPIO_InitStruct.Pin = Bat23_Pin;
 80013c4:	2302      	movs	r3, #2
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Bat23_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4813      	ldr	r0, [pc, #76]	@ (8001424 <MX_GPIO_Init+0x114>)
 80013d8:	f002 fc98 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013dc:	2310      	movs	r3, #16
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	480c      	ldr	r0, [pc, #48]	@ (8001424 <MX_GPIO_Init+0x114>)
 80013f4:	f002 fc8a 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013f8:	2301      	movs	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	@ (8001428 <MX_GPIO_Init+0x118>)
 8001410:	f002 fc7c 	bl	8003d0c <HAL_GPIO_Init>

}
 8001414:	bf00      	nop
 8001416:	3728      	adds	r7, #40	@ 0x28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	42020800 	.word	0x42020800
 8001424:	42020000 	.word	0x42020000
 8001428:	42020400 	.word	0x42020400

0800142c <convert_to_timestamp>:

/**
  * @brief Convert RTC date/time to Unix timestamp (accurate)
  */
static uint32_t convert_to_timestamp(RTC_DateTypeDef date, RTC_TimeTypeDef time)
{
 800142c:	b084      	sub	sp, #16
 800142e:	b580      	push	{r7, lr}
 8001430:	b08c      	sub	sp, #48	@ 0x30
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800143a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    struct tm tm_time = {
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	2224      	movs	r2, #36	@ 0x24
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f008 fa5b 	bl	8009902 <memset>
        .tm_sec = time.Seconds,
 800144c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
    struct tm tm_time = {
 8001450:	60fb      	str	r3, [r7, #12]
        .tm_min = time.Minutes,
 8001452:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
    struct tm tm_time = {
 8001456:	613b      	str	r3, [r7, #16]
        .tm_hour = time.Hours,
 8001458:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
    struct tm tm_time = {
 800145c:	617b      	str	r3, [r7, #20]
        .tm_mday = date.Date,
 800145e:	79bb      	ldrb	r3, [r7, #6]
    struct tm tm_time = {
 8001460:	61bb      	str	r3, [r7, #24]
        .tm_mon = date.Month - 1,
 8001462:	797b      	ldrb	r3, [r7, #5]
 8001464:	3b01      	subs	r3, #1
    struct tm tm_time = {
 8001466:	61fb      	str	r3, [r7, #28]
        .tm_year = date.Year + 100,  // STM32 RTC year is offset from 2000 (2000=0)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	3364      	adds	r3, #100	@ 0x64
    struct tm tm_time = {
 800146c:	623b      	str	r3, [r7, #32]
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .tm_isdst = -1
    };

    return mktime(&tm_time);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4618      	mov	r0, r3
 800147a:	f008 fc43 	bl	8009d04 <mktime>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4613      	mov	r3, r2
}
 8001484:	4618      	mov	r0, r3
 8001486:	3730      	adds	r7, #48	@ 0x30
 8001488:	46bd      	mov	sp, r7
 800148a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800148e:	b004      	add	sp, #16
 8001490:	4770      	bx	lr

08001492 <convert_from_timestamp>:

/**
  * @brief Convert Unix timestamp to RTC date/time
  */
static void convert_from_timestamp(uint32_t timestamp, RTC_DateTypeDef* date, RTC_TimeTypeDef* time)
{
 8001492:	b5b0      	push	{r4, r5, r7, lr}
 8001494:	b088      	sub	sp, #32
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
    struct tm *tm_time;
    time_t t = timestamp;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	461c      	mov	r4, r3
 80014a4:	4615      	mov	r5, r2
 80014a6:	e9c7 4504 	strd	r4, r5, [r7, #16]
    tm_time = localtime(&t);
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	4618      	mov	r0, r3
 80014b0:	f008 fa46 	bl	8009940 <localtime>
 80014b4:	61f8      	str	r0, [r7, #28]

    time->Seconds = tm_time->tm_sec;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	709a      	strb	r2, [r3, #2]
    time->Minutes = tm_time->tm_min;
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	705a      	strb	r2, [r3, #1]
    time->Hours = tm_time->tm_hour;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	701a      	strb	r2, [r3, #0]

    date->Date = tm_time->tm_mday;
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	709a      	strb	r2, [r3, #2]
    date->Month = tm_time->tm_mon + 1;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	3301      	adds	r3, #1
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	705a      	strb	r2, [r3, #1]
    date->Year = tm_time->tm_year - 100;  // Convert back to STM32 RTC format
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	3b64      	subs	r3, #100	@ 0x64
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	70da      	strb	r2, [r3, #3]
    date->WeekDay = tm_time->tm_wday;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	701a      	strb	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	3720      	adds	r7, #32
 8001508:	46bd      	mov	sp, r7
 800150a:	bdb0      	pop	{r4, r5, r7, pc}

0800150c <is_data_valid>:

static bool is_data_valid(FlashCalendarData* data)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    return (data->magic == FLASH_DATA_MAGIC &&
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a09      	ldr	r2, [pc, #36]	@ (8001540 <is_data_valid+0x34>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d105      	bne.n	800152a <is_data_valid+0x1e>
            data->data_valid == DATA_VALID_FLAG);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7b1b      	ldrb	r3, [r3, #12]
    return (data->magic == FLASH_DATA_MAGIC &&
 8001522:	2baa      	cmp	r3, #170	@ 0xaa
 8001524:	d101      	bne.n	800152a <is_data_valid+0x1e>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <is_data_valid+0x20>
 800152a:	2300      	movs	r3, #0
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	b2db      	uxtb	r3, r3
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	abcd1234 	.word	0xabcd1234

08001544 <save_to_flash>:

static void save_to_flash(FlashCalendarData data)
{
 8001544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001548:	b099      	sub	sp, #100	@ 0x64
 800154a:	af00      	add	r7, sp, #0
 800154c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_FLASH_Unlock();
 8001554:	f002 fa30 	bl	80039b8 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase_init = {
 8001558:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800155c:	2300      	movs	r3, #0
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	6053      	str	r3, [r2, #4]
 8001562:	6093      	str	r3, [r2, #8]
 8001564:	60d3      	str	r3, [r2, #12]
 8001566:	2302      	movs	r3, #2
 8001568:	643b      	str	r3, [r7, #64]	@ 0x40
        .TypeErase = FLASH_TYPEERASE_PAGES,
        .Page = (FLASH_USER_START_ADDR - FLASH_BASE) / FLASH_PAGE_SIZE,
 800156a:	4b6c      	ldr	r3, [pc, #432]	@ (800171c <save_to_flash+0x1d8>)
 800156c:	881a      	ldrh	r2, [r3, #0]
 800156e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001572:	429a      	cmp	r2, r3
 8001574:	d00e      	beq.n	8001594 <save_to_flash+0x50>
 8001576:	4b69      	ldr	r3, [pc, #420]	@ (800171c <save_to_flash+0x1d8>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d008      	beq.n	8001590 <save_to_flash+0x4c>
 800157e:	4b67      	ldr	r3, [pc, #412]	@ (800171c <save_to_flash+0x1d8>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	029a      	lsls	r2, r3, #10
 8001584:	4b66      	ldr	r3, [pc, #408]	@ (8001720 <save_to_flash+0x1dc>)
 8001586:	4013      	ands	r3, r2
 8001588:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800158c:	0adb      	lsrs	r3, r3, #11
 800158e:	e002      	b.n	8001596 <save_to_flash+0x52>
 8001590:	23ff      	movs	r3, #255	@ 0xff
 8001592:	e000      	b.n	8001596 <save_to_flash+0x52>
 8001594:	23ff      	movs	r3, #255	@ 0xff
    FLASH_EraseInitTypeDef erase_init = {
 8001596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001598:	2301      	movs	r3, #1
 800159a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        .NbPages = 1
    };

    uint32_t page_error;
    HAL_FLASHEx_Erase(&erase_init, &page_error);
 800159c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80015a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 fac0 	bl	8003b2c <HAL_FLASHEx_Erase>

    uint32_t address = FLASH_USER_START_ADDR;
 80015ac:	4b5b      	ldr	r3, [pc, #364]	@ (800171c <save_to_flash+0x1d8>)
 80015ae:	881a      	ldrh	r2, [r3, #0]
 80015b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d00f      	beq.n	80015d8 <save_to_flash+0x94>
 80015b8:	4b58      	ldr	r3, [pc, #352]	@ (800171c <save_to_flash+0x1d8>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d009      	beq.n	80015d4 <save_to_flash+0x90>
 80015c0:	4b56      	ldr	r3, [pc, #344]	@ (800171c <save_to_flash+0x1d8>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	029a      	lsls	r2, r3, #10
 80015c6:	4b56      	ldr	r3, [pc, #344]	@ (8001720 <save_to_flash+0x1dc>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	f103 63ff 	add.w	r3, r3, #133693440	@ 0x7f80000
 80015ce:	f503 23ff 	add.w	r3, r3, #522240	@ 0x7f800
 80015d2:	e002      	b.n	80015da <save_to_flash+0x96>
 80015d4:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <save_to_flash+0x1e0>)
 80015d6:	e000      	b.n	80015da <save_to_flash+0x96>
 80015d8:	4b52      	ldr	r3, [pc, #328]	@ (8001724 <save_to_flash+0x1e0>)
 80015da:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint64_t data64 = ((uint64_t)data.magic << 32) | data.magic;
 80015dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015de:	2200      	movs	r2, #0
 80015e0:	623b      	str	r3, [r7, #32]
 80015e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80015e4:	2301      	movs	r3, #1
 80015e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015ea:	460a      	mov	r2, r1
 80015ec:	fb03 f202 	mul.w	r2, r3, r2
 80015f0:	2301      	movs	r3, #1
 80015f2:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80015f6:	4601      	mov	r1, r0
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	441a      	add	r2, r3
 80015fe:	2301      	movs	r3, #1
 8001600:	6a39      	ldr	r1, [r7, #32]
 8001602:	fba1 8903 	umull	r8, r9, r1, r3
 8001606:	eb02 0309 	add.w	r3, r2, r9
 800160a:	4699      	mov	r9, r3
 800160c:	e9c7 8914 	strd	r8, r9, [r7, #80]	@ 0x50
 8001610:	e9c7 8914 	strd	r8, r9, [r7, #80]	@ 0x50
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data64);
 8001614:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001618:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800161a:	2001      	movs	r0, #1
 800161c:	f002 f98a 	bl	8003934 <HAL_FLASH_Program>
    address += 8;
 8001620:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001622:	3308      	adds	r3, #8
 8001624:	65fb      	str	r3, [r7, #92]	@ 0x5c

    data64 = ((uint64_t)data.timestamp << 32) | data.timestamp;
 8001626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001628:	2200      	movs	r2, #0
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	617a      	str	r2, [r7, #20]
 800162e:	2301      	movs	r3, #1
 8001630:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001634:	464a      	mov	r2, r9
 8001636:	fb03 f202 	mul.w	r2, r3, r2
 800163a:	2301      	movs	r3, #1
 800163c:	4641      	mov	r1, r8
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	4413      	add	r3, r2
 8001644:	2201      	movs	r2, #1
 8001646:	4641      	mov	r1, r8
 8001648:	fba1 ab02 	umull	sl, fp, r1, r2
 800164c:	445b      	add	r3, fp
 800164e:	469b      	mov	fp, r3
 8001650:	e9c7 ab14 	strd	sl, fp, [r7, #80]	@ 0x50
 8001654:	e9c7 ab14 	strd	sl, fp, [r7, #80]	@ 0x50
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data64);
 8001658:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800165c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800165e:	2001      	movs	r0, #1
 8001660:	f002 f968 	bl	8003934 <HAL_FLASH_Program>
    address += 8;
 8001664:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001666:	3308      	adds	r3, #8
 8001668:	65fb      	str	r3, [r7, #92]	@ 0x5c

    data64 = ((uint64_t)data.period_sec << 32) | data.period_sec;
 800166a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800166c:	2200      	movs	r2, #0
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	60fa      	str	r2, [r7, #12]
 8001672:	2301      	movs	r3, #1
 8001674:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001678:	464a      	mov	r2, r9
 800167a:	fb03 f202 	mul.w	r2, r3, r2
 800167e:	2301      	movs	r3, #1
 8001680:	4641      	mov	r1, r8
 8001682:	fb01 f303 	mul.w	r3, r1, r3
 8001686:	4413      	add	r3, r2
 8001688:	2201      	movs	r2, #1
 800168a:	4641      	mov	r1, r8
 800168c:	fba1 1202 	umull	r1, r2, r1, r2
 8001690:	61fa      	str	r2, [r7, #28]
 8001692:	460a      	mov	r2, r1
 8001694:	61ba      	str	r2, [r7, #24]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	4413      	add	r3, r2
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80016a0:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 80016a4:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data64);
 80016a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80016ac:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80016ae:	2001      	movs	r0, #1
 80016b0:	f002 f940 	bl	8003934 <HAL_FLASH_Program>
    address += 8;
 80016b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016b6:	3308      	adds	r3, #8
 80016b8:	65fb      	str	r3, [r7, #92]	@ 0x5c

    data64 = ((uint64_t)data.data_valid << 32) | data.data_valid;
 80016ba:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2200      	movs	r2, #0
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	2301      	movs	r3, #1
 80016c8:	e9d7 8900 	ldrd	r8, r9, [r7]
 80016cc:	464a      	mov	r2, r9
 80016ce:	fb03 f202 	mul.w	r2, r3, r2
 80016d2:	2301      	movs	r3, #1
 80016d4:	4641      	mov	r1, r8
 80016d6:	fb01 f303 	mul.w	r3, r1, r3
 80016da:	4413      	add	r3, r2
 80016dc:	2201      	movs	r2, #1
 80016de:	4641      	mov	r1, r8
 80016e0:	fba1 5602 	umull	r5, r6, r1, r2
 80016e4:	4433      	add	r3, r6
 80016e6:	461e      	mov	r6, r3
 80016e8:	e9c7 5614 	strd	r5, r6, [r7, #80]	@ 0x50
 80016ec:	e9c7 5614 	strd	r5, r6, [r7, #80]	@ 0x50
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data64);
 80016f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80016f4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80016f6:	2001      	movs	r0, #1
 80016f8:	f002 f91c 	bl	8003934 <HAL_FLASH_Program>

    HAL_FLASH_Lock();
 80016fc:	f002 f97e 	bl	80039fc <HAL_FLASH_Lock>
    calendar_data = data;
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <save_to_flash+0x1e4>)
 8001702:	461c      	mov	r4, r3
 8001704:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800170a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    blink_led();
 800170e:	f000 f851 	bl	80017b4 <blink_led>
}
 8001712:	bf00      	nop
 8001714:	3764      	adds	r7, #100	@ 0x64
 8001716:	46bd      	mov	sp, r7
 8001718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800171c:	0bfa05e0 	.word	0x0bfa05e0
 8001720:	003ffc00 	.word	0x003ffc00
 8001724:	0807f800 	.word	0x0807f800
 8001728:	200002d8 	.word	0x200002d8

0800172c <read_from_flash>:

static FlashCalendarData read_from_flash(void)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b089      	sub	sp, #36	@ 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    FlashCalendarData* data = (FlashCalendarData*)FLASH_USER_START_ADDR;
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <read_from_flash+0x78>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800173c:	4293      	cmp	r3, r2
 800173e:	d00f      	beq.n	8001760 <read_from_flash+0x34>
 8001740:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <read_from_flash+0x78>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d009      	beq.n	800175c <read_from_flash+0x30>
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <read_from_flash+0x78>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	029a      	lsls	r2, r3, #10
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <read_from_flash+0x7c>)
 8001750:	4013      	ands	r3, r2
 8001752:	f103 63ff 	add.w	r3, r3, #133693440	@ 0x7f80000
 8001756:	f503 23ff 	add.w	r3, r3, #522240	@ 0x7f800
 800175a:	e002      	b.n	8001762 <read_from_flash+0x36>
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <read_from_flash+0x80>)
 800175e:	e000      	b.n	8001762 <read_from_flash+0x36>
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <read_from_flash+0x80>)
 8001762:	61fb      	str	r3, [r7, #28]
    if(is_data_valid(data)) {
 8001764:	69f8      	ldr	r0, [r7, #28]
 8001766:	f7ff fed1 	bl	800150c <is_data_valid>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <read_from_flash+0x52>
        return *data;
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	4614      	mov	r4, r2
 8001776:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001778:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800177c:	e00e      	b.n	800179c <read_from_flash+0x70>
    }

    FlashCalendarData default_data = {
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <read_from_flash+0x84>)
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	2300      	movs	r3, #0
 800178c:	763b      	strb	r3, [r7, #24]
        .magic = FLASH_DATA_MAGIC,
        .timestamp = 0,
        .period_sec = 0,
        .data_valid = 0
    };
    return default_data;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	461c      	mov	r4, r3
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	3724      	adds	r7, #36	@ 0x24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	0bfa05e0 	.word	0x0bfa05e0
 80017a8:	003ffc00 	.word	0x003ffc00
 80017ac:	0807f800 	.word	0x0807f800
 80017b0:	abcd1234 	.word	0xabcd1234

080017b4 <blink_led>:

static void blink_led(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
    for(int i = 0; i < LED_BLINK_COUNT; i++) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	e012      	b.n	80017e6 <blink_led+0x32>
        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 80017c0:	2201      	movs	r2, #1
 80017c2:	2101      	movs	r1, #1
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <blink_led+0x44>)
 80017c6:	f002 fc21 	bl	800400c <HAL_GPIO_WritePin>
        HAL_Delay(LED_BLINK_DELAY_MS);
 80017ca:	20c8      	movs	r0, #200	@ 0xc8
 80017cc:	f000 ff24 	bl	8002618 <HAL_Delay>
        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2101      	movs	r1, #1
 80017d4:	4808      	ldr	r0, [pc, #32]	@ (80017f8 <blink_led+0x44>)
 80017d6:	f002 fc19 	bl	800400c <HAL_GPIO_WritePin>
        HAL_Delay(LED_BLINK_DELAY_MS);
 80017da:	20c8      	movs	r0, #200	@ 0xc8
 80017dc:	f000 ff1c 	bl	8002618 <HAL_Delay>
    for(int i = 0; i < LED_BLINK_COUNT; i++) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3301      	adds	r3, #1
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	dde9      	ble.n	80017c0 <blink_led+0xc>
    }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	42020400 	.word	0x42020400

080017fc <is_rtc_initialized>:

static bool is_rtc_initialized(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
    return (HAL_RTCEx_BKUPRead(&hrtc, RTC_INIT_FLAG) == RTC_INIT_VALUE);
 8001800:	2100      	movs	r1, #0
 8001802:	4806      	ldr	r0, [pc, #24]	@ (800181c <is_rtc_initialized+0x20>)
 8001804:	f004 fcc6 	bl	8006194 <HAL_RTCEx_BKUPRead>
 8001808:	4603      	mov	r3, r0
 800180a:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 800180e:	4293      	cmp	r3, r2
 8001810:	bf0c      	ite	eq
 8001812:	2301      	moveq	r3, #1
 8001814:	2300      	movne	r3, #0
 8001816:	b2db      	uxtb	r3, r3
}
 8001818:	4618      	mov	r0, r3
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000338 	.word	0x20000338

08001820 <initialize_rtc>:

static void initialize_rtc(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8001834:	2300      	movs	r3, #0
 8001836:	603b      	str	r3, [r7, #0]

    sTime.Hours = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	71bb      	strb	r3, [r7, #6]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	2200      	movs	r2, #0
 8001848:	4619      	mov	r1, r3
 800184a:	480c      	ldr	r0, [pc, #48]	@ (800187c <initialize_rtc+0x5c>)
 800184c:	f004 f9f2 	bl	8005c34 <HAL_RTC_SetTime>

    sDate.Year = 0;  // 2000
 8001850:	2300      	movs	r3, #0
 8001852:	70fb      	strb	r3, [r7, #3]
    sDate.Month = 1;
 8001854:	2301      	movs	r3, #1
 8001856:	707b      	strb	r3, [r7, #1]
    sDate.Date = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	70bb      	strb	r3, [r7, #2]
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800185c:	463b      	mov	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	4619      	mov	r1, r3
 8001862:	4806      	ldr	r0, [pc, #24]	@ (800187c <initialize_rtc+0x5c>)
 8001864:	f004 fad8 	bl	8005e18 <HAL_RTC_SetDate>

    HAL_RTCEx_BKUPWrite(&hrtc, RTC_INIT_FLAG, RTC_INIT_VALUE);
 8001868:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 800186c:	2100      	movs	r1, #0
 800186e:	4803      	ldr	r0, [pc, #12]	@ (800187c <initialize_rtc+0x5c>)
 8001870:	f004 fc78 	bl	8006164 <HAL_RTCEx_BKUPWrite>
}
 8001874:	bf00      	nop
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000338 	.word	0x20000338

08001880 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
    if(huart->Instance == LPUART1) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a19      	ldr	r2, [pc, #100]	@ (80018f4 <HAL_UART_RxCpltCallback+0x74>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d12c      	bne.n	80018ec <HAL_UART_RxCpltCallback+0x6c>
        uart_last_rx_time = HAL_GetTick();
 8001892:	f000 feb5 	bl	8002600 <HAL_GetTick>
 8001896:	4603      	mov	r3, r0
 8001898:	4a17      	ldr	r2, [pc, #92]	@ (80018f8 <HAL_UART_RxCpltCallback+0x78>)
 800189a:	6013      	str	r3, [r2, #0]

        if(uart_rx_buf[uart_rx_pos] == '\n' || uart_rx_pos >= sizeof(uart_rx_buf)-1) {
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <HAL_UART_RxCpltCallback+0x7c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <HAL_UART_RxCpltCallback+0x80>)
 80018a4:	5c9b      	ldrb	r3, [r3, r2]
 80018a6:	2b0a      	cmp	r3, #10
 80018a8:	d003      	beq.n	80018b2 <HAL_UART_RxCpltCallback+0x32>
 80018aa:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <HAL_UART_RxCpltCallback+0x7c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80018b0:	d90c      	bls.n	80018cc <HAL_UART_RxCpltCallback+0x4c>
            uart_cmd_ready = 1;
 80018b2:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <HAL_UART_RxCpltCallback+0x84>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
            uart_rx_buf[uart_rx_pos] = '\0';
 80018b8:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <HAL_UART_RxCpltCallback+0x7c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <HAL_UART_RxCpltCallback+0x80>)
 80018c0:	2100      	movs	r1, #0
 80018c2:	5499      	strb	r1, [r3, r2]
            HAL_UART_AbortReceive_IT(&hlpuart1);
 80018c4:	4810      	ldr	r0, [pc, #64]	@ (8001908 <HAL_UART_RxCpltCallback+0x88>)
 80018c6:	f004 ff29 	bl	800671c <HAL_UART_AbortReceive_IT>
        } else {
            uart_rx_pos++;
            HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
        }
    }
}
 80018ca:	e00f      	b.n	80018ec <HAL_UART_RxCpltCallback+0x6c>
            uart_rx_pos++;
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <HAL_UART_RxCpltCallback+0x7c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	3301      	adds	r3, #1
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <HAL_UART_RxCpltCallback+0x7c>)
 80018d6:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <HAL_UART_RxCpltCallback+0x7c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <HAL_UART_RxCpltCallback+0x80>)
 80018e0:	4413      	add	r3, r2
 80018e2:	2201      	movs	r2, #1
 80018e4:	4619      	mov	r1, r3
 80018e6:	4808      	ldr	r0, [pc, #32]	@ (8001908 <HAL_UART_RxCpltCallback+0x88>)
 80018e8:	f004 fecc 	bl	8006684 <HAL_UART_Receive_IT>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40008000 	.word	0x40008000
 80018f8:	2000032c 	.word	0x2000032c
 80018fc:	20000328 	.word	0x20000328
 8001900:	200002e8 	.word	0x200002e8
 8001904:	20000329 	.word	0x20000329
 8001908:	200003b4 	.word	0x200003b4

0800190c <process_uart_command>:

static void process_uart_command(uint8_t* data, uint8_t len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b094      	sub	sp, #80	@ 0x50
 8001910:	af02      	add	r7, sp, #8
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	70fb      	strb	r3, [r7, #3]
    char* date_ptr = strstr((char*)data, "DATE:");
 8001918:	494e      	ldr	r1, [pc, #312]	@ (8001a54 <process_uart_command+0x148>)
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f007 fff9 	bl	8009912 <strstr>
 8001920:	6478      	str	r0, [r7, #68]	@ 0x44
    char* time_ptr = strstr((char*)data, ";TIME:");
 8001922:	494d      	ldr	r1, [pc, #308]	@ (8001a58 <process_uart_command+0x14c>)
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f007 fff4 	bl	8009912 <strstr>
 800192a:	6438      	str	r0, [r7, #64]	@ 0x40
    char* period_ptr = strstr((char*)data, ";PERIOD:");
 800192c:	494b      	ldr	r1, [pc, #300]	@ (8001a5c <process_uart_command+0x150>)
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f007 ffef 	bl	8009912 <strstr>
 8001934:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if(date_ptr && time_ptr && period_ptr) {
 8001936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001938:	2b00      	cmp	r3, #0
 800193a:	d06f      	beq.n	8001a1c <process_uart_command+0x110>
 800193c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800193e:	2b00      	cmp	r3, #0
 8001940:	d06c      	beq.n	8001a1c <process_uart_command+0x110>
 8001942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001944:	2b00      	cmp	r3, #0
 8001946:	d069      	beq.n	8001a1c <process_uart_command+0x110>
        RTC_DateTypeDef date;
        RTC_TimeTypeDef time;
        int year, month, day, hour, min, sec;

        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) != 3) return;
 8001948:	f107 011c 	add.w	r1, r7, #28
 800194c:	f107 0220 	add.w	r2, r7, #32
 8001950:	f107 0318 	add.w	r3, r7, #24
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	460b      	mov	r3, r1
 8001958:	4941      	ldr	r1, [pc, #260]	@ (8001a60 <process_uart_command+0x154>)
 800195a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800195c:	f007 ff60 	bl	8009820 <siscanf>
 8001960:	4603      	mov	r3, r0
 8001962:	2b03      	cmp	r3, #3
 8001964:	d16d      	bne.n	8001a42 <process_uart_command+0x136>
        if(sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) != 3) return;
 8001966:	f107 0110 	add.w	r1, r7, #16
 800196a:	f107 0214 	add.w	r2, r7, #20
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	460b      	mov	r3, r1
 8001976:	493b      	ldr	r1, [pc, #236]	@ (8001a64 <process_uart_command+0x158>)
 8001978:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800197a:	f007 ff51 	bl	8009820 <siscanf>
 800197e:	4603      	mov	r3, r0
 8001980:	2b03      	cmp	r3, #3
 8001982:	d160      	bne.n	8001a46 <process_uart_command+0x13a>
        if(sscanf(period_ptr, ";PERIOD:%lu", &calendar_data.period_sec) != 1) return;
 8001984:	4a38      	ldr	r2, [pc, #224]	@ (8001a68 <process_uart_command+0x15c>)
 8001986:	4939      	ldr	r1, [pc, #228]	@ (8001a6c <process_uart_command+0x160>)
 8001988:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800198a:	f007 ff49 	bl	8009820 <siscanf>
 800198e:	4603      	mov	r3, r0
 8001990:	2b01      	cmp	r3, #1
 8001992:	d15a      	bne.n	8001a4a <process_uart_command+0x13e>

        date.Year = year - 2000;
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	3330      	adds	r3, #48	@ 0x30
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        date.Month = month;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
        date.Date = day;
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
        time.Hours = hour;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        time.Minutes = min;
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        time.Seconds = sec;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

        calendar_data.timestamp = convert_to_timestamp(date, time);
 80019c8:	466a      	mov	r2, sp
 80019ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019d2:	e882 0003 	stmia.w	r2, {r0, r1}
 80019d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019dc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80019de:	f7ff fd25 	bl	800142c <convert_to_timestamp>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4a22      	ldr	r2, [pc, #136]	@ (8001a70 <process_uart_command+0x164>)
 80019e6:	6053      	str	r3, [r2, #4]
        calendar_data.magic = FLASH_DATA_MAGIC;
 80019e8:	4b21      	ldr	r3, [pc, #132]	@ (8001a70 <process_uart_command+0x164>)
 80019ea:	4a22      	ldr	r2, [pc, #136]	@ (8001a74 <process_uart_command+0x168>)
 80019ec:	601a      	str	r2, [r3, #0]
        calendar_data.data_valid = DATA_VALID_FLAG;
 80019ee:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <process_uart_command+0x164>)
 80019f0:	22aa      	movs	r2, #170	@ 0xaa
 80019f2:	731a      	strb	r2, [r3, #12]

        save_to_flash(calendar_data);
 80019f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a70 <process_uart_command+0x164>)
 80019f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019f8:	f7ff fda4 	bl	8001544 <save_to_flash>

        HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80019fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a00:	2200      	movs	r2, #0
 8001a02:	4619      	mov	r1, r3
 8001a04:	481c      	ldr	r0, [pc, #112]	@ (8001a78 <process_uart_command+0x16c>)
 8001a06:	f004 f915 	bl	8005c34 <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001a0a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	4819      	ldr	r0, [pc, #100]	@ (8001a78 <process_uart_command+0x16c>)
 8001a14:	f004 fa00 	bl	8005e18 <HAL_RTC_SetDate>

        send_current_datetime();
 8001a18:	f000 f836 	bl	8001a88 <send_current_datetime>
    }

    uart_rx_pos = 0;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <process_uart_command+0x170>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
    memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8001a22:	2240      	movs	r2, #64	@ 0x40
 8001a24:	2100      	movs	r1, #0
 8001a26:	4816      	ldr	r0, [pc, #88]	@ (8001a80 <process_uart_command+0x174>)
 8001a28:	f007 ff6b 	bl	8009902 <memset>
    HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001a2c:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <process_uart_command+0x170>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <process_uart_command+0x174>)
 8001a34:	4413      	add	r3, r2
 8001a36:	2201      	movs	r2, #1
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4812      	ldr	r0, [pc, #72]	@ (8001a84 <process_uart_command+0x178>)
 8001a3c:	f004 fe22 	bl	8006684 <HAL_UART_Receive_IT>
 8001a40:	e004      	b.n	8001a4c <process_uart_command+0x140>
        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) != 3) return;
 8001a42:	bf00      	nop
 8001a44:	e002      	b.n	8001a4c <process_uart_command+0x140>
        if(sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) != 3) return;
 8001a46:	bf00      	nop
 8001a48:	e000      	b.n	8001a4c <process_uart_command+0x140>
        if(sscanf(period_ptr, ";PERIOD:%lu", &calendar_data.period_sec) != 1) return;
 8001a4a:	bf00      	nop
}
 8001a4c:	3748      	adds	r7, #72	@ 0x48
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	0800e884 	.word	0x0800e884
 8001a58:	0800e88c 	.word	0x0800e88c
 8001a5c:	0800e894 	.word	0x0800e894
 8001a60:	0800e8a0 	.word	0x0800e8a0
 8001a64:	0800e8b0 	.word	0x0800e8b0
 8001a68:	200002e0 	.word	0x200002e0
 8001a6c:	0800e8c0 	.word	0x0800e8c0
 8001a70:	200002d8 	.word	0x200002d8
 8001a74:	abcd1234 	.word	0xabcd1234
 8001a78:	20000338 	.word	0x20000338
 8001a7c:	20000328 	.word	0x20000328
 8001a80:	200002e8 	.word	0x200002e8
 8001a84:	200003b4 	.word	0x200003b4

08001a88 <send_current_datetime>:

static void send_current_datetime(void)
{
 8001a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8a:	b09f      	sub	sp, #124	@ 0x7c
 8001a8c:	af06      	add	r7, sp, #24
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;
    char uart_msg[64];

    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001a8e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a92:	2200      	movs	r2, #0
 8001a94:	4619      	mov	r1, r3
 8001a96:	481f      	ldr	r0, [pc, #124]	@ (8001b14 <send_current_datetime+0x8c>)
 8001a98:	f004 f962 	bl	8005d60 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001a9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	481b      	ldr	r0, [pc, #108]	@ (8001b14 <send_current_datetime+0x8c>)
 8001aa6:	f004 fa3d 	bl	8005f24 <HAL_RTC_GetDate>

    snprintf(uart_msg, sizeof(uart_msg),
           "DATE:%04d-%02d-%02d;TIME:%02d:%02d:%02d;PERIOD:%lu\r\n",
           date.Year + 2000, date.Month, date.Date,
 8001aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
    snprintf(uart_msg, sizeof(uart_msg),
 8001aae:	f503 62fa 	add.w	r2, r3, #2000	@ 0x7d0
           date.Year + 2000, date.Month, date.Date,
 8001ab2:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
    snprintf(uart_msg, sizeof(uart_msg),
 8001ab6:	4619      	mov	r1, r3
           date.Year + 2000, date.Month, date.Date,
 8001ab8:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
    snprintf(uart_msg, sizeof(uart_msg),
 8001abc:	461c      	mov	r4, r3
           time.Hours, time.Minutes, time.Seconds,
 8001abe:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
    snprintf(uart_msg, sizeof(uart_msg),
 8001ac2:	461d      	mov	r5, r3
           time.Hours, time.Minutes, time.Seconds,
 8001ac4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
    snprintf(uart_msg, sizeof(uart_msg),
 8001ac8:	461e      	mov	r6, r3
           time.Hours, time.Minutes, time.Seconds,
 8001aca:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
    snprintf(uart_msg, sizeof(uart_msg),
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <send_current_datetime+0x90>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f107 0008 	add.w	r0, r7, #8
 8001ad8:	9305      	str	r3, [sp, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	9304      	str	r3, [sp, #16]
 8001ade:	9603      	str	r6, [sp, #12]
 8001ae0:	9502      	str	r5, [sp, #8]
 8001ae2:	9401      	str	r4, [sp, #4]
 8001ae4:	9100      	str	r1, [sp, #0]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8001b1c <send_current_datetime+0x94>)
 8001aea:	2140      	movs	r1, #64	@ 0x40
 8001aec:	f007 fe40 	bl	8009770 <sniprintf>
           calendar_data.period_sec);

    HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_msg, strlen(uart_msg), 100);
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fba9 	bl	800024c <strlen>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	f107 0108 	add.w	r1, r7, #8
 8001b02:	2364      	movs	r3, #100	@ 0x64
 8001b04:	4806      	ldr	r0, [pc, #24]	@ (8001b20 <send_current_datetime+0x98>)
 8001b06:	f004 fd2e 	bl	8006566 <HAL_UART_Transmit>
}
 8001b0a:	bf00      	nop
 8001b0c:	3764      	adds	r7, #100	@ 0x64
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000338 	.word	0x20000338
 8001b18:	200002d8 	.word	0x200002d8
 8001b1c:	0800e8cc 	.word	0x0800e8cc
 8001b20:	200003b4 	.word	0x200003b4

08001b24 <update_calendar>:

static void update_calendar(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08c      	sub	sp, #48	@ 0x30
 8001b28:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef current_time;
    HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4619      	mov	r1, r3
 8001b32:	4822      	ldr	r0, [pc, #136]	@ (8001bbc <update_calendar+0x98>)
 8001b34:	f004 f914 	bl	8005d60 <HAL_RTC_GetTime>

    if(current_time.Seconds != last_rtc_seconds) {
 8001b38:	7fbb      	ldrb	r3, [r7, #30]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <update_calendar+0x9c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d037      	beq.n	8001bb4 <update_calendar+0x90>
        last_rtc_seconds = current_time.Seconds;
 8001b44:	7fbb      	ldrb	r3, [r7, #30]
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc0 <update_calendar+0x9c>)
 8001b4a:	601a      	str	r2, [r3, #0]

        if(calendar_data.period_sec > 0) {
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc4 <update_calendar+0xa0>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d02f      	beq.n	8001bb4 <update_calendar+0x90>
            seconds_counter++;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <update_calendar+0xa4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc8 <update_calendar+0xa4>)
 8001b5c:	6013      	str	r3, [r2, #0]

            if(seconds_counter >= calendar_data.period_sec) {
 8001b5e:	4b19      	ldr	r3, [pc, #100]	@ (8001bc4 <update_calendar+0xa0>)
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <update_calendar+0xa4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d824      	bhi.n	8001bb4 <update_calendar+0x90>
                seconds_counter = 0;
 8001b6a:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <update_calendar+0xa4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

                calendar_data.timestamp += calendar_data.period_sec;
 8001b70:	4b14      	ldr	r3, [pc, #80]	@ (8001bc4 <update_calendar+0xa0>)
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <update_calendar+0xa0>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a12      	ldr	r2, [pc, #72]	@ (8001bc4 <update_calendar+0xa0>)
 8001b7c:	6053      	str	r3, [r2, #4]
                save_to_flash(calendar_data);
 8001b7e:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <update_calendar+0xa0>)
 8001b80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b82:	f7ff fcdf 	bl	8001544 <save_to_flash>

                RTC_DateTypeDef date;
                RTC_TimeTypeDef time;
                convert_from_timestamp(calendar_data.timestamp, &date, &time);
 8001b86:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <update_calendar+0xa0>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	1d3a      	adds	r2, r7, #4
 8001b8c:	f107 0118 	add.w	r1, r7, #24
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fc7e 	bl	8001492 <convert_from_timestamp>
                HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4807      	ldr	r0, [pc, #28]	@ (8001bbc <update_calendar+0x98>)
 8001b9e:	f004 f849 	bl	8005c34 <HAL_RTC_SetTime>
                HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001ba2:	f107 0318 	add.w	r3, r7, #24
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4804      	ldr	r0, [pc, #16]	@ (8001bbc <update_calendar+0x98>)
 8001bac:	f004 f934 	bl	8005e18 <HAL_RTC_SetDate>

                send_current_datetime();
 8001bb0:	f7ff ff6a 	bl	8001a88 <send_current_datetime>
            }
        }
    }
}
 8001bb4:	bf00      	nop
 8001bb6:	3730      	adds	r7, #48	@ 0x30
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000338 	.word	0x20000338
 8001bc0:	20000334 	.word	0x20000334
 8001bc4:	200002d8 	.word	0x200002d8
 8001bc8:	20000330 	.word	0x20000330

08001bcc <main>:

/* Main function -------------------------------------------------------------*/
int main(void)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b091      	sub	sp, #68	@ 0x44
 8001bd0:	af00      	add	r7, sp, #0
    HAL_Init();
 8001bd2:	f000 fcaa 	bl	800252a <HAL_Init>
    SystemClock_Config();
 8001bd6:	f000 f8cd 	bl	8001d74 <SystemClock_Config>
    MX_GPIO_Init();
 8001bda:	f7ff fb99 	bl	8001310 <MX_GPIO_Init>
    MX_ADC1_Init();
 8001bde:	f7ff fa85 	bl	80010ec <MX_ADC1_Init>
    MX_LPUART1_UART_Init();
 8001be2:	f000 fbc7 	bl	8002374 <MX_LPUART1_UART_Init>
    MX_RTC_Init();
 8001be6:	f000 f91f 	bl	8001e28 <MX_RTC_Init>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	4b57      	ldr	r3, [pc, #348]	@ (8001d48 <main+0x17c>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	4a56      	ldr	r2, [pc, #344]	@ (8001d48 <main+0x17c>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf6:	4b54      	ldr	r3, [pc, #336]	@ (8001d48 <main+0x17c>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = LED_PIN;
 8001c12:	2301      	movs	r3, #1
 8001c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 8001c22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c26:	4619      	mov	r1, r3
 8001c28:	4848      	ldr	r0, [pc, #288]	@ (8001d4c <main+0x180>)
 8001c2a:	f002 f86f 	bl	8003d0c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2101      	movs	r1, #1
 8001c32:	4846      	ldr	r0, [pc, #280]	@ (8001d4c <main+0x180>)
 8001c34:	f002 f9ea 	bl	800400c <HAL_GPIO_WritePin>

    if(!is_rtc_initialized()) {
 8001c38:	f7ff fde0 	bl	80017fc <is_rtc_initialized>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f083 0301 	eor.w	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <main+0x80>
        initialize_rtc();
 8001c48:	f7ff fdea 	bl	8001820 <initialize_rtc>
    }

    calendar_data = read_from_flash();
 8001c4c:	4c40      	ldr	r4, [pc, #256]	@ (8001d50 <main+0x184>)
 8001c4e:	463b      	mov	r3, r7
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fd6b 	bl	800172c <read_from_flash>
 8001c56:	463b      	mov	r3, r7
 8001c58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if(is_data_valid(&calendar_data)) {
 8001c5e:	483c      	ldr	r0, [pc, #240]	@ (8001d50 <main+0x184>)
 8001c60:	f7ff fc54 	bl	800150c <is_data_valid>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d020      	beq.n	8001cac <main+0xe0>
        RTC_TimeTypeDef sTime = {0};
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
        RTC_DateTypeDef sDate = {0};
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]

        convert_from_timestamp(calendar_data.timestamp, &sDate, &sTime);
 8001c7e:	4b34      	ldr	r3, [pc, #208]	@ (8001d50 <main+0x184>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f107 0214 	add.w	r2, r7, #20
 8001c86:	f107 0110 	add.w	r1, r7, #16
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fc01 	bl	8001492 <convert_from_timestamp>
        HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	4619      	mov	r1, r3
 8001c98:	482e      	ldr	r0, [pc, #184]	@ (8001d54 <main+0x188>)
 8001c9a:	f003 ffcb 	bl	8005c34 <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001c9e:	f107 0310 	add.w	r3, r7, #16
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	482b      	ldr	r0, [pc, #172]	@ (8001d54 <main+0x188>)
 8001ca8:	f004 f8b6 	bl	8005e18 <HAL_RTC_SetDate>
    }

    uart_last_rx_time = HAL_GetTick();
 8001cac:	f000 fca8 	bl	8002600 <HAL_GetTick>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a29      	ldr	r2, [pc, #164]	@ (8001d58 <main+0x18c>)
 8001cb4:	6013      	str	r3, [r2, #0]
    last_rtc_seconds = 0;
 8001cb6:	4b29      	ldr	r3, [pc, #164]	@ (8001d5c <main+0x190>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
    seconds_counter = 0;
 8001cbc:	4b28      	ldr	r3, [pc, #160]	@ (8001d60 <main+0x194>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]

    HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001cc2:	4b28      	ldr	r3, [pc, #160]	@ (8001d64 <main+0x198>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b27      	ldr	r3, [pc, #156]	@ (8001d68 <main+0x19c>)
 8001cca:	4413      	add	r3, r2
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4826      	ldr	r0, [pc, #152]	@ (8001d6c <main+0x1a0>)
 8001cd2:	f004 fcd7 	bl	8006684 <HAL_UART_Receive_IT>

    while (1)
    {
        if(uart_cmd_ready) {
 8001cd6:	4b26      	ldr	r3, [pc, #152]	@ (8001d70 <main+0x1a4>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <main+0x126>
            uart_cmd_ready = 0;
 8001ce0:	4b23      	ldr	r3, [pc, #140]	@ (8001d70 <main+0x1a4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
            process_uart_command(uart_rx_buf, uart_rx_pos);
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <main+0x198>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4619      	mov	r1, r3
 8001cec:	481e      	ldr	r0, [pc, #120]	@ (8001d68 <main+0x19c>)
 8001cee:	f7ff fe0d 	bl	800190c <process_uart_command>
        }

        if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_TIMEOUT_MS) {
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <main+0x198>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d019      	beq.n	8001d2e <main+0x162>
 8001cfa:	f000 fc81 	bl	8002600 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <main+0x18c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	@ 0x64
 8001d08:	d911      	bls.n	8001d2e <main+0x162>
            uart_rx_pos = 0;
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <main+0x198>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
            memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8001d10:	2240      	movs	r2, #64	@ 0x40
 8001d12:	2100      	movs	r1, #0
 8001d14:	4814      	ldr	r0, [pc, #80]	@ (8001d68 <main+0x19c>)
 8001d16:	f007 fdf4 	bl	8009902 <memset>
            HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001d1a:	4b12      	ldr	r3, [pc, #72]	@ (8001d64 <main+0x198>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <main+0x19c>)
 8001d22:	4413      	add	r3, r2
 8001d24:	2201      	movs	r2, #1
 8001d26:	4619      	mov	r1, r3
 8001d28:	4810      	ldr	r0, [pc, #64]	@ (8001d6c <main+0x1a0>)
 8001d2a:	f004 fcab 	bl	8006684 <HAL_UART_Receive_IT>
        }

        if(is_data_valid(&calendar_data)) {
 8001d2e:	4808      	ldr	r0, [pc, #32]	@ (8001d50 <main+0x184>)
 8001d30:	f7ff fbec 	bl	800150c <is_data_valid>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <main+0x172>
            update_calendar();
 8001d3a:	f7ff fef3 	bl	8001b24 <update_calendar>
        }

        HAL_Delay(10);
 8001d3e:	200a      	movs	r0, #10
 8001d40:	f000 fc6a 	bl	8002618 <HAL_Delay>
        if(uart_cmd_ready) {
 8001d44:	e7c7      	b.n	8001cd6 <main+0x10a>
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	42020400 	.word	0x42020400
 8001d50:	200002d8 	.word	0x200002d8
 8001d54:	20000338 	.word	0x20000338
 8001d58:	2000032c 	.word	0x2000032c
 8001d5c:	20000334 	.word	0x20000334
 8001d60:	20000330 	.word	0x20000330
 8001d64:	20000328 	.word	0x20000328
 8001d68:	200002e8 	.word	0x200002e8
 8001d6c:	200003b4 	.word	0x200003b4
 8001d70:	20000329 	.word	0x20000329

08001d74 <SystemClock_Config>:
    }
}

/* System Clock Configuration */
void SystemClock_Config(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b098      	sub	sp, #96	@ 0x60
 8001d78:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7a:	f107 0318 	add.w	r3, r7, #24
 8001d7e:	2248      	movs	r2, #72	@ 0x48
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f007 fdbd 	bl	8009902 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
 8001d94:	611a      	str	r2, [r3, #16]

    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK) {
 8001d96:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001d9a:	f002 f977 	bl	800408c <HAL_PWREx_ControlVoltageScaling>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <SystemClock_Config+0x34>
        Error_Handler();
 8001da4:	f000 f830 	bl	8001e08 <Error_Handler>
    }

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001da8:	2318      	movs	r3, #24
 8001daa:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001db0:	2301      	movs	r3, #1
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001db4:	2301      	movs	r3, #1
 8001db6:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001dbc:	2360      	movs	r3, #96	@ 0x60
 8001dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001dc4:	f107 0318 	add.w	r3, r7, #24
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f002 f9ef 	bl	80041ac <HAL_RCC_OscConfig>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <SystemClock_Config+0x64>
        Error_Handler();
 8001dd4:	f000 f818 	bl	8001e08 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd8:	230f      	movs	r3, #15
 8001dda:	607b      	str	r3, [r7, #4]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f002 feb1 	bl	8004b58 <HAL_RCC_ClockConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <SystemClock_Config+0x8c>
        Error_Handler();
 8001dfc:	f000 f804 	bl	8001e08 <Error_Handler>
    }
}
 8001e00:	bf00      	nop
 8001e02:	3760      	adds	r7, #96	@ 0x60
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <Error_Handler>:

void Error_Handler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e0c:	b672      	cpsid	i
}
 8001e0e:	bf00      	nop
    __disable_irq();
    while (1) {
        HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8001e10:	2101      	movs	r1, #1
 8001e12:	4804      	ldr	r0, [pc, #16]	@ (8001e24 <Error_Handler+0x1c>)
 8001e14:	f002 f912 	bl	800403c <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 8001e18:	2064      	movs	r0, #100	@ 0x64
 8001e1a:	f000 fbfd 	bl	8002618 <HAL_Delay>
        HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8001e1e:	bf00      	nop
 8001e20:	e7f6      	b.n	8001e10 <Error_Handler+0x8>
 8001e22:	bf00      	nop
 8001e24:	42020400 	.word	0x42020400

08001e28 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	@ 0x30
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001e2e:	f107 0318 	add.w	r3, r7, #24
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	611a      	str	r2, [r3, #16]
 8001e3e:	615a      	str	r2, [r3, #20]
  RTC_TimeTypeDef sTime = {0};
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e52:	4b31      	ldr	r3, [pc, #196]	@ (8001f18 <MX_RTC_Init+0xf0>)
 8001e54:	4a31      	ldr	r2, [pc, #196]	@ (8001f1c <MX_RTC_Init+0xf4>)
 8001e56:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e58:	4b2f      	ldr	r3, [pc, #188]	@ (8001f18 <MX_RTC_Init+0xf0>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f18 <MX_RTC_Init+0xf0>)
 8001e60:	227f      	movs	r2, #127	@ 0x7f
 8001e62:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e64:	4b2c      	ldr	r3, [pc, #176]	@ (8001f18 <MX_RTC_Init+0xf0>)
 8001e66:	22ff      	movs	r2, #255	@ 0xff
 8001e68:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f18 <MX_RTC_Init+0xf0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e70:	4b29      	ldr	r3, [pc, #164]	@ (8001f18 <MX_RTC_Init+0xf0>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e76:	4b28      	ldr	r3, [pc, #160]	@ (8001f18 <MX_RTC_Init+0xf0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e7c:	4b26      	ldr	r3, [pc, #152]	@ (8001f18 <MX_RTC_Init+0xf0>)
 8001e7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e82:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001e84:	4b24      	ldr	r3, [pc, #144]	@ (8001f18 <MX_RTC_Init+0xf0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e8a:	4823      	ldr	r0, [pc, #140]	@ (8001f18 <MX_RTC_Init+0xf0>)
 8001e8c:	f003 fe5a 	bl	8005b44 <HAL_RTC_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_RTC_Init+0x72>
  {
    Error_Handler();
 8001e96:	f7ff ffb7 	bl	8001e08 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001eaa:	f107 0318 	add.w	r3, r7, #24
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4819      	ldr	r0, [pc, #100]	@ (8001f18 <MX_RTC_Init+0xf0>)
 8001eb2:	f004 f985 	bl	80061c0 <HAL_RTCEx_PrivilegeModeSet>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001ebc:	f7ff ffa4 	bl	8001e08 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480f      	ldr	r0, [pc, #60]	@ (8001f18 <MX_RTC_Init+0xf0>)
 8001edc:	f003 feaa 	bl	8005c34 <HAL_RTC_SetTime>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001ee6:	f7ff ff8f 	bl	8001e08 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001eea:	2301      	movs	r3, #1
 8001eec:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001efa:	463b      	mov	r3, r7
 8001efc:	2201      	movs	r2, #1
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <MX_RTC_Init+0xf0>)
 8001f02:	f003 ff89 	bl	8005e18 <HAL_RTC_SetDate>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_RTC_Init+0xe8>
  {
    Error_Handler();
 8001f0c:	f7ff ff7c 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	3730      	adds	r7, #48	@ 0x30
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000338 	.word	0x20000338
 8001f1c:	40002800 	.word	0x40002800

08001f20 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b0a8      	sub	sp, #160	@ 0xa0
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	2294      	movs	r2, #148	@ 0x94
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f007 fce6 	bl	8009902 <memset>
  if(rtcHandle->Instance==RTC)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a16      	ldr	r2, [pc, #88]	@ (8001f94 <HAL_RTC_MspInit+0x74>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d124      	bne.n	8001f8a <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f44:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	4618      	mov	r0, r3
 8001f54:	f003 f8e0 	bl	8005118 <HAL_RCCEx_PeriphCLKConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001f5e:	f7ff ff53 	bl	8001e08 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f62:	4b0d      	ldr	r3, [pc, #52]	@ (8001f98 <HAL_RTC_MspInit+0x78>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f68:	4a0b      	ldr	r2, [pc, #44]	@ (8001f98 <HAL_RTC_MspInit+0x78>)
 8001f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <HAL_RTC_MspInit+0x78>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f76:	4a08      	ldr	r2, [pc, #32]	@ (8001f98 <HAL_RTC_MspInit+0x78>)
 8001f78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <HAL_RTC_MspInit+0x78>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	37a0      	adds	r7, #160	@ 0xa0
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40002800 	.word	0x40002800
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fae:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbe:	4a08      	ldr	r2, [pc, #32]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001fd2:	f002 f8b7 	bl	8004144 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <NMI_Handler+0x4>

08001fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <BusFault_Handler+0x4>

08002004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <UsageFault_Handler+0x4>

0800200c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203a:	f000 facd 	bl	80025d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <TIM6_IRQHandler+0x10>)
 800204a:	f004 f8e5 	bl	8006218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000368 	.word	0x20000368

08002058 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 31.
  */
void LPUART1_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <LPUART1_IRQHandler+0x10>)
 800205e:	f004 fc2b 	bl	80068b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200003b4 	.word	0x200003b4

0800206c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return 1;
 8002070:	2301      	movs	r3, #1
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_kill>:

int _kill(int pid, int sig)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002086:	f008 fb29 	bl	800a6dc <__errno>
 800208a:	4603      	mov	r3, r0
 800208c:	2216      	movs	r2, #22
 800208e:	601a      	str	r2, [r3, #0]
  return -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <_exit>:

void _exit (int status)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ffe7 	bl	800207c <_kill>
  while (1) {}    /* Make sure we hang here */
 80020ae:	bf00      	nop
 80020b0:	e7fd      	b.n	80020ae <_exit+0x12>

080020b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	e00a      	b.n	80020da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020c4:	f3af 8000 	nop.w
 80020c8:	4601      	mov	r1, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	60ba      	str	r2, [r7, #8]
 80020d0:	b2ca      	uxtb	r2, r1
 80020d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3301      	adds	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	429a      	cmp	r2, r3
 80020e0:	dbf0      	blt.n	80020c4 <_read+0x12>
  }

  return len;
 80020e2:	687b      	ldr	r3, [r7, #4]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	e009      	b.n	8002112 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	60ba      	str	r2, [r7, #8]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3301      	adds	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	429a      	cmp	r2, r3
 8002118:	dbf1      	blt.n	80020fe <_write+0x12>
  }
  return len;
 800211a:	687b      	ldr	r3, [r7, #4]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_close>:

int _close(int file)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800214c:	605a      	str	r2, [r3, #4]
  return 0;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_isatty>:

int _isatty(int file)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002164:	2301      	movs	r3, #1
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002194:	4a14      	ldr	r2, [pc, #80]	@ (80021e8 <_sbrk+0x5c>)
 8002196:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <_sbrk+0x60>)
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a0:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a8:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <_sbrk+0x64>)
 80021aa:	4a12      	ldr	r2, [pc, #72]	@ (80021f4 <_sbrk+0x68>)
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ae:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d207      	bcs.n	80021cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021bc:	f008 fa8e 	bl	800a6dc <__errno>
 80021c0:	4603      	mov	r3, r0
 80021c2:	220c      	movs	r2, #12
 80021c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	e009      	b.n	80021e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021cc:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021d2:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	4a05      	ldr	r2, [pc, #20]	@ (80021f0 <_sbrk+0x64>)
 80021dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20030000 	.word	0x20030000
 80021ec:	00000400 	.word	0x00000400
 80021f0:	20000364 	.word	0x20000364
 80021f4:	200005c0 	.word	0x200005c0

080021f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <SystemInit+0x20>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002202:	4a05      	ldr	r2, [pc, #20]	@ (8002218 <SystemInit+0x20>)
 8002204:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002208:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8002222:	4b4f      	ldr	r3, [pc, #316]	@ (8002360 <SystemCoreClockUpdate+0x144>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d107      	bne.n	800223e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800222e:	4b4c      	ldr	r3, [pc, #304]	@ (8002360 <SystemCoreClockUpdate+0x144>)
 8002230:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	e005      	b.n	800224a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800223e:	4b48      	ldr	r3, [pc, #288]	@ (8002360 <SystemCoreClockUpdate+0x144>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800224a:	4a46      	ldr	r2, [pc, #280]	@ (8002364 <SystemCoreClockUpdate+0x148>)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002252:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002254:	4b42      	ldr	r3, [pc, #264]	@ (8002360 <SystemCoreClockUpdate+0x144>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b0c      	cmp	r3, #12
 800225e:	d866      	bhi.n	800232e <SystemCoreClockUpdate+0x112>
 8002260:	a201      	add	r2, pc, #4	@ (adr r2, 8002268 <SystemCoreClockUpdate+0x4c>)
 8002262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002266:	bf00      	nop
 8002268:	0800229d 	.word	0x0800229d
 800226c:	0800232f 	.word	0x0800232f
 8002270:	0800232f 	.word	0x0800232f
 8002274:	0800232f 	.word	0x0800232f
 8002278:	080022a5 	.word	0x080022a5
 800227c:	0800232f 	.word	0x0800232f
 8002280:	0800232f 	.word	0x0800232f
 8002284:	0800232f 	.word	0x0800232f
 8002288:	080022ad 	.word	0x080022ad
 800228c:	0800232f 	.word	0x0800232f
 8002290:	0800232f 	.word	0x0800232f
 8002294:	0800232f 	.word	0x0800232f
 8002298:	080022b5 	.word	0x080022b5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800229c:	4a32      	ldr	r2, [pc, #200]	@ (8002368 <SystemCoreClockUpdate+0x14c>)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	6013      	str	r3, [r2, #0]
      break;
 80022a2:	e048      	b.n	8002336 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80022a4:	4b30      	ldr	r3, [pc, #192]	@ (8002368 <SystemCoreClockUpdate+0x14c>)
 80022a6:	4a31      	ldr	r2, [pc, #196]	@ (800236c <SystemCoreClockUpdate+0x150>)
 80022a8:	601a      	str	r2, [r3, #0]
      break;
 80022aa:	e044      	b.n	8002336 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80022ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002368 <SystemCoreClockUpdate+0x14c>)
 80022ae:	4a2f      	ldr	r2, [pc, #188]	@ (800236c <SystemCoreClockUpdate+0x150>)
 80022b0:	601a      	str	r2, [r3, #0]
      break;
 80022b2:	e040      	b.n	8002336 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80022b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002360 <SystemCoreClockUpdate+0x144>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80022be:	4b28      	ldr	r3, [pc, #160]	@ (8002360 <SystemCoreClockUpdate+0x144>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	3301      	adds	r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d003      	beq.n	80022da <SystemCoreClockUpdate+0xbe>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d006      	beq.n	80022e6 <SystemCoreClockUpdate+0xca>
 80022d8:	e00b      	b.n	80022f2 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80022da:	4a24      	ldr	r2, [pc, #144]	@ (800236c <SystemCoreClockUpdate+0x150>)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e2:	613b      	str	r3, [r7, #16]
          break;
 80022e4:	e00b      	b.n	80022fe <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80022e6:	4a21      	ldr	r2, [pc, #132]	@ (800236c <SystemCoreClockUpdate+0x150>)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	613b      	str	r3, [r7, #16]
          break;
 80022f0:	e005      	b.n	80022fe <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	613b      	str	r3, [r7, #16]
          break;
 80022fc:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80022fe:	4b18      	ldr	r3, [pc, #96]	@ (8002360 <SystemCoreClockUpdate+0x144>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8002310:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <SystemCoreClockUpdate+0x144>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0e5b      	lsrs	r3, r3, #25
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	3301      	adds	r3, #1
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	4a0f      	ldr	r2, [pc, #60]	@ (8002368 <SystemCoreClockUpdate+0x14c>)
 800232a:	6013      	str	r3, [r2, #0]
      break;
 800232c:	e003      	b.n	8002336 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800232e:	4a0e      	ldr	r2, [pc, #56]	@ (8002368 <SystemCoreClockUpdate+0x14c>)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	6013      	str	r3, [r2, #0]
      break;
 8002334:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <SystemCoreClockUpdate+0x144>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	4a0b      	ldr	r2, [pc, #44]	@ (8002370 <SystemCoreClockUpdate+0x154>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002346:	4b08      	ldr	r3, [pc, #32]	@ (8002368 <SystemCoreClockUpdate+0x14c>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	4a05      	ldr	r2, [pc, #20]	@ (8002368 <SystemCoreClockUpdate+0x14c>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	371c      	adds	r7, #28
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40021000 	.word	0x40021000
 8002364:	0800e928 	.word	0x0800e928
 8002368:	20000004 	.word	0x20000004
 800236c:	00f42400 	.word	0x00f42400
 8002370:	0800e910 	.word	0x0800e910

08002374 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002378:	4b22      	ldr	r3, [pc, #136]	@ (8002404 <MX_LPUART1_UART_Init+0x90>)
 800237a:	4a23      	ldr	r2, [pc, #140]	@ (8002408 <MX_LPUART1_UART_Init+0x94>)
 800237c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800237e:	4b21      	ldr	r3, [pc, #132]	@ (8002404 <MX_LPUART1_UART_Init+0x90>)
 8002380:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002384:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002386:	4b1f      	ldr	r3, [pc, #124]	@ (8002404 <MX_LPUART1_UART_Init+0x90>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800238c:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <MX_LPUART1_UART_Init+0x90>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002392:	4b1c      	ldr	r3, [pc, #112]	@ (8002404 <MX_LPUART1_UART_Init+0x90>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002398:	4b1a      	ldr	r3, [pc, #104]	@ (8002404 <MX_LPUART1_UART_Init+0x90>)
 800239a:	220c      	movs	r2, #12
 800239c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239e:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <MX_LPUART1_UART_Init+0x90>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023a4:	4b17      	ldr	r3, [pc, #92]	@ (8002404 <MX_LPUART1_UART_Init+0x90>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023aa:	4b16      	ldr	r3, [pc, #88]	@ (8002404 <MX_LPUART1_UART_Init+0x90>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023b0:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <MX_LPUART1_UART_Init+0x90>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80023b6:	4b13      	ldr	r3, [pc, #76]	@ (8002404 <MX_LPUART1_UART_Init+0x90>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80023bc:	4811      	ldr	r0, [pc, #68]	@ (8002404 <MX_LPUART1_UART_Init+0x90>)
 80023be:	f004 f882 	bl	80064c6 <HAL_UART_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80023c8:	f7ff fd1e 	bl	8001e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023cc:	2100      	movs	r1, #0
 80023ce:	480d      	ldr	r0, [pc, #52]	@ (8002404 <MX_LPUART1_UART_Init+0x90>)
 80023d0:	f006 f9db 	bl	800878a <HAL_UARTEx_SetTxFifoThreshold>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80023da:	f7ff fd15 	bl	8001e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023de:	2100      	movs	r1, #0
 80023e0:	4808      	ldr	r0, [pc, #32]	@ (8002404 <MX_LPUART1_UART_Init+0x90>)
 80023e2:	f006 fa10 	bl	8008806 <HAL_UARTEx_SetRxFifoThreshold>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80023ec:	f7ff fd0c 	bl	8001e08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80023f0:	4804      	ldr	r0, [pc, #16]	@ (8002404 <MX_LPUART1_UART_Init+0x90>)
 80023f2:	f006 f991 	bl	8008718 <HAL_UARTEx_DisableFifoMode>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80023fc:	f7ff fd04 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200003b4 	.word	0x200003b4
 8002408:	40008000 	.word	0x40008000

0800240c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b0ae      	sub	sp, #184	@ 0xb8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	2294      	movs	r2, #148	@ 0x94
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f007 fa68 	bl	8009902 <memset>
  if(uartHandle->Instance==LPUART1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a25      	ldr	r2, [pc, #148]	@ (80024cc <HAL_UART_MspInit+0xc0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d143      	bne.n	80024c4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800243c:	2320      	movs	r3, #32
 800243e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002440:	2300      	movs	r3, #0
 8002442:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002444:	f107 0310 	add.w	r3, r7, #16
 8002448:	4618      	mov	r0, r3
 800244a:	f002 fe65 	bl	8005118 <HAL_RCCEx_PeriphCLKConfig>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002454:	f7ff fcd8 	bl	8001e08 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002458:	4b1d      	ldr	r3, [pc, #116]	@ (80024d0 <HAL_UART_MspInit+0xc4>)
 800245a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245c:	4a1c      	ldr	r2, [pc, #112]	@ (80024d0 <HAL_UART_MspInit+0xc4>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002464:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <HAL_UART_MspInit+0xc4>)
 8002466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002470:	4b17      	ldr	r3, [pc, #92]	@ (80024d0 <HAL_UART_MspInit+0xc4>)
 8002472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002474:	4a16      	ldr	r2, [pc, #88]	@ (80024d0 <HAL_UART_MspInit+0xc4>)
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800247c:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <HAL_UART_MspInit+0xc4>)
 800247e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002488:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800248c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249c:	2300      	movs	r3, #0
 800249e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80024a2:	2308      	movs	r3, #8
 80024a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024ac:	4619      	mov	r1, r3
 80024ae:	4809      	ldr	r0, [pc, #36]	@ (80024d4 <HAL_UART_MspInit+0xc8>)
 80024b0:	f001 fc2c 	bl	8003d0c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2100      	movs	r1, #0
 80024b8:	2042      	movs	r0, #66	@ 0x42
 80024ba:	f001 f94c 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80024be:	2042      	movs	r0, #66	@ 0x42
 80024c0:	f001 f963 	bl	800378a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80024c4:	bf00      	nop
 80024c6:	37b8      	adds	r7, #184	@ 0xb8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40008000 	.word	0x40008000
 80024d0:	40021000 	.word	0x40021000
 80024d4:	42020400 	.word	0x42020400

080024d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80024d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002510 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024dc:	f7ff fe8c 	bl	80021f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80024e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80024e2:	e003      	b.n	80024ec <LoopCopyDataInit>

080024e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80024e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80024e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80024e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80024ea:	3104      	adds	r1, #4

080024ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80024ec:	480a      	ldr	r0, [pc, #40]	@ (8002518 <LoopForever+0xa>)
	ldr	r3, =_edata
 80024ee:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <LoopForever+0xe>)
	adds	r2, r0, r1
 80024f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80024f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80024f4:	d3f6      	bcc.n	80024e4 <CopyDataInit>
	ldr	r2, =_sbss
 80024f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002520 <LoopForever+0x12>)
	b	LoopFillZerobss
 80024f8:	e002      	b.n	8002500 <LoopFillZerobss>

080024fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80024fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80024fc:	f842 3b04 	str.w	r3, [r2], #4

08002500 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002500:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <LoopForever+0x16>)
	cmp	r2, r3
 8002502:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002504:	d3f9      	bcc.n	80024fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002506:	f008 f8ef 	bl	800a6e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800250a:	f7ff fb5f 	bl	8001bcc <main>

0800250e <LoopForever>:

LoopForever:
    b LoopForever
 800250e:	e7fe      	b.n	800250e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002510:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8002514:	0800ef4c 	.word	0x0800ef4c
	ldr	r0, =_sdata
 8002518:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800251c:	20000254 	.word	0x20000254
	ldr	r2, =_sbss
 8002520:	20000254 	.word	0x20000254
	ldr	r3, = _ebss
 8002524:	200005bc 	.word	0x200005bc

08002528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002528:	e7fe      	b.n	8002528 <ADC1_2_IRQHandler>

0800252a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002534:	2004      	movs	r0, #4
 8002536:	f001 f903 	bl	8003740 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800253a:	f7ff fe6f 	bl	800221c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800253e:	2007      	movs	r0, #7
 8002540:	f000 f80e 	bl	8002560 <HAL_InitTick>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	71fb      	strb	r3, [r7, #7]
 800254e:	e001      	b.n	8002554 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002550:	f7ff fd24 	bl	8001f9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002554:	79fb      	ldrb	r3, [r7, #7]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800256c:	4b17      	ldr	r3, [pc, #92]	@ (80025cc <HAL_InitTick+0x6c>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d023      	beq.n	80025bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002574:	4b16      	ldr	r3, [pc, #88]	@ (80025d0 <HAL_InitTick+0x70>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b14      	ldr	r3, [pc, #80]	@ (80025cc <HAL_InitTick+0x6c>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002582:	fbb3 f3f1 	udiv	r3, r3, r1
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f001 f90b 	bl	80037a6 <HAL_SYSTICK_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10f      	bne.n	80025b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b07      	cmp	r3, #7
 800259a:	d809      	bhi.n	80025b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800259c:	2200      	movs	r2, #0
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	f001 f8d7 	bl	8003756 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025a8:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <HAL_InitTick+0x74>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e007      	b.n	80025c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e004      	b.n	80025c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	e001      	b.n	80025c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	2000000c 	.word	0x2000000c
 80025d0:	20000004 	.word	0x20000004
 80025d4:	20000008 	.word	0x20000008

080025d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_IncTick+0x20>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <HAL_IncTick+0x24>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a04      	ldr	r2, [pc, #16]	@ (80025fc <HAL_IncTick+0x24>)
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000000c 	.word	0x2000000c
 80025fc:	20000448 	.word	0x20000448

08002600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return uwTick;
 8002604:	4b03      	ldr	r3, [pc, #12]	@ (8002614 <HAL_GetTick+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000448 	.word	0x20000448

08002618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff ffee 	bl	8002600 <HAL_GetTick>
 8002624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d005      	beq.n	800263e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <HAL_Delay+0x44>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4413      	add	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800263e:	bf00      	nop
 8002640:	f7ff ffde 	bl	8002600 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	429a      	cmp	r2, r3
 800264e:	d8f7      	bhi.n	8002640 <HAL_Delay+0x28>
  {
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000000c 	.word	0x2000000c

08002660 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	609a      	str	r2, [r3, #8]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	609a      	str	r2, [r3, #8]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3360      	adds	r3, #96	@ 0x60
 80026da:	461a      	mov	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b08      	ldr	r3, [pc, #32]	@ (800270c <LL_ADC_SetOffset+0x44>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002700:	bf00      	nop
 8002702:	371c      	adds	r7, #28
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	03fff000 	.word	0x03fff000

08002710 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3360      	adds	r3, #96	@ 0x60
 800271e:	461a      	mov	r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3360      	adds	r3, #96	@ 0x60
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	431a      	orrs	r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	615a      	str	r2, [r3, #20]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3330      	adds	r3, #48	@ 0x30
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	4413      	add	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	211f      	movs	r1, #31
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	401a      	ands	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	0e9b      	lsrs	r3, r3, #26
 80027d0:	f003 011f 	and.w	r1, r3, #31
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	fa01 f303 	lsl.w	r3, r1, r3
 80027de:	431a      	orrs	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027e4:	bf00      	nop
 80027e6:	371c      	adds	r7, #28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	3314      	adds	r3, #20
 8002800:	461a      	mov	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	0e5b      	lsrs	r3, r3, #25
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	4413      	add	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	0d1b      	lsrs	r3, r3, #20
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	2107      	movs	r1, #7
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	401a      	ands	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	0d1b      	lsrs	r3, r3, #20
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	431a      	orrs	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002860:	43db      	mvns	r3, r3
 8002862:	401a      	ands	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f003 0318 	and.w	r3, r3, #24
 800286a:	4908      	ldr	r1, [pc, #32]	@ (800288c <LL_ADC_SetChannelSingleDiff+0x44>)
 800286c:	40d9      	lsrs	r1, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	400b      	ands	r3, r1
 8002872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002876:	431a      	orrs	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	0007ffff 	.word	0x0007ffff

08002890 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80028a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6093      	str	r3, [r2, #8]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028c8:	d101      	bne.n	80028ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80028ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002914:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002918:	d101      	bne.n	800291e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <LL_ADC_IsEnabled+0x18>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <LL_ADC_IsEnabled+0x1a>
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b04      	cmp	r3, #4
 8002964:	d101      	bne.n	800296a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b08      	cmp	r3, #8
 800298a:	d101      	bne.n	8002990 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b089      	sub	sp, #36	@ 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e12e      	b.n	8002c18 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d109      	bne.n	80029dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7fe fc37 	bl	800123c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff67 	bl	80028b4 <LL_ADC_IsDeepPowerDownEnabled>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d004      	beq.n	80029f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff4d 	bl	8002890 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff82 	bl	8002904 <LL_ADC_IsInternalRegulatorEnabled>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d115      	bne.n	8002a32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ff66 	bl	80028dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a10:	4b83      	ldr	r3, [pc, #524]	@ (8002c20 <HAL_ADC_Init+0x280>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	4a83      	ldr	r2, [pc, #524]	@ (8002c24 <HAL_ADC_Init+0x284>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	099b      	lsrs	r3, r3, #6
 8002a1e:	3301      	adds	r3, #1
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a24:	e002      	b.n	8002a2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f9      	bne.n	8002a26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff ff64 	bl	8002904 <LL_ADC_IsInternalRegulatorEnabled>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10d      	bne.n	8002a5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a46:	f043 0210 	orr.w	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ff75 	bl	8002952 <LL_ADC_REG_IsConversionOngoing>
 8002a68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 80c7 	bne.w	8002c06 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 80c3 	bne.w	8002c06 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a84:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a88:	f043 0202 	orr.w	r2, r3, #2
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff49 	bl	800292c <LL_ADC_IsEnabled>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d110      	bne.n	8002ac2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa0:	4861      	ldr	r0, [pc, #388]	@ (8002c28 <HAL_ADC_Init+0x288>)
 8002aa2:	f7ff ff43 	bl	800292c <LL_ADC_IsEnabled>
 8002aa6:	4604      	mov	r4, r0
 8002aa8:	4860      	ldr	r0, [pc, #384]	@ (8002c2c <HAL_ADC_Init+0x28c>)
 8002aaa:	f7ff ff3f 	bl	800292c <LL_ADC_IsEnabled>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4323      	orrs	r3, r4
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d105      	bne.n	8002ac2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4619      	mov	r1, r3
 8002abc:	485c      	ldr	r0, [pc, #368]	@ (8002c30 <HAL_ADC_Init+0x290>)
 8002abe:	f7ff fdcf 	bl	8002660 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7e5b      	ldrb	r3, [r3, #25]
 8002ac6:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002acc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ad2:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ad8:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae0:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d106      	bne.n	8002afe <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	3b01      	subs	r3, #1
 8002af6:	045b      	lsls	r3, r3, #17
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0a:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b12:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	4b44      	ldr	r3, [pc, #272]	@ (8002c34 <HAL_ADC_Init+0x294>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	69b9      	ldr	r1, [r7, #24]
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff ff20 	bl	8002978 <LL_ADC_INJ_IsConversionOngoing>
 8002b38:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d140      	bne.n	8002bc2 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d13d      	bne.n	8002bc2 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	7e1b      	ldrb	r3, [r3, #24]
 8002b4e:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b50:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b58:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b68:	f023 0306 	bic.w	r3, r3, #6
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	69b9      	ldr	r1, [r7, #24]
 8002b72:	430b      	orrs	r3, r1
 8002b74:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d118      	bne.n	8002bb2 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b8a:	f023 0304 	bic.w	r3, r3, #4
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b96:	4311      	orrs	r1, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b9c:	4311      	orrs	r1, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	611a      	str	r2, [r3, #16]
 8002bb0:	e007      	b.n	8002bc2 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0201 	bic.w	r2, r2, #1
 8002bc0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d10c      	bne.n	8002be4 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd0:	f023 010f 	bic.w	r1, r3, #15
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	1e5a      	subs	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002be2:	e007      	b.n	8002bf4 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 020f 	bic.w	r2, r2, #15
 8002bf2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf8:	f023 0303 	bic.w	r3, r3, #3
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c04:	e007      	b.n	8002c16 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c16:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3724      	adds	r7, #36	@ 0x24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd90      	pop	{r4, r7, pc}
 8002c20:	20000004 	.word	0x20000004
 8002c24:	053e2d63 	.word	0x053e2d63
 8002c28:	42028000 	.word	0x42028000
 8002c2c:	42028100 	.word	0x42028100
 8002c30:	42028300 	.word	0x42028300
 8002c34:	fff0c007 	.word	0xfff0c007

08002c38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c38:	b590      	push	{r4, r7, lr}
 8002c3a:	b0b7      	sub	sp, #220	@ 0xdc
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x22>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e3c1      	b.n	80033de <HAL_ADC_ConfigChannel+0x7a6>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fe73 	bl	8002952 <LL_ADC_REG_IsConversionOngoing>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f040 83a6 	bne.w	80033c0 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6859      	ldr	r1, [r3, #4]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	f7ff fd89 	bl	8002798 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fe61 	bl	8002952 <LL_ADC_REG_IsConversionOngoing>
 8002c90:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fe6d 	bl	8002978 <LL_ADC_INJ_IsConversionOngoing>
 8002c9e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ca2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f040 81c1 	bne.w	800302e <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f040 81bc 	bne.w	800302e <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cbe:	d10f      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f7ff fd90 	bl	80027f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fd4a 	bl	8002772 <LL_ADC_SetSamplingTimeCommonConfig>
 8002cde:	e00e      	b.n	8002cfe <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6819      	ldr	r1, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	461a      	mov	r2, r3
 8002cee:	f7ff fd7f 	bl	80027f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff fd3a 	bl	8002772 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	08db      	lsrs	r3, r3, #3
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d00a      	beq.n	8002d36 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	6919      	ldr	r1, [r3, #16]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d30:	f7ff fcca 	bl	80026c8 <LL_ADC_SetOffset>
 8002d34:	e17b      	b.n	800302e <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fce7 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x12a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fcdc 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	0e9b      	lsrs	r3, r3, #26
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	e01e      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x168>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fcd1 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002d90:	2320      	movs	r3, #32
 8002d92:	e004      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8002d94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d98:	fab3 f383 	clz	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x180>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	e018      	b.n	8002dea <HAL_ADC_ConfigChannel+0x1b2>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002dd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002ddc:	2320      	movs	r3, #32
 8002dde:	e004      	b.n	8002dea <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002de0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d106      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fca0 	bl	800273c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2101      	movs	r1, #1
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fc84 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10a      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x1f0>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2101      	movs	r1, #1
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fc79 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	0e9b      	lsrs	r3, r3, #26
 8002e22:	f003 021f 	and.w	r2, r3, #31
 8002e26:	e01e      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x22e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fc6e 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8002e56:	2320      	movs	r3, #32
 8002e58:	e004      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8002e5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d105      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x246>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	0e9b      	lsrs	r3, r3, #26
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	e018      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x278>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002e92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002e9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	e004      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8002ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d106      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2101      	movs	r1, #1
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fc3d 	bl	800273c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fc21 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x2b6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2102      	movs	r1, #2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fc16 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	0e9b      	lsrs	r3, r3, #26
 8002ee8:	f003 021f 	and.w	r2, r3, #31
 8002eec:	e01e      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x2f4>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2102      	movs	r1, #2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fc0b 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002f0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002f14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	e004      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002f20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d105      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x30c>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0e9b      	lsrs	r3, r3, #26
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	e016      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x33a>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002f56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002f64:	2320      	movs	r3, #32
 8002f66:	e004      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8002f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d106      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fbdc 	bl	800273c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2103      	movs	r1, #3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fbc0 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x378>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2103      	movs	r1, #3
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fbb5 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	0e9b      	lsrs	r3, r3, #26
 8002faa:	f003 021f 	and.w	r2, r3, #31
 8002fae:	e017      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x3a8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2103      	movs	r1, #3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fbaa 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002fc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fca:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002fcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	e003      	b.n	8002fde <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8002fd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d105      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x3c0>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	0e9b      	lsrs	r3, r3, #26
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	e011      	b.n	800301c <HAL_ADC_ConfigChannel+0x3e4>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003006:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003008:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800300a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8003010:	2320      	movs	r3, #32
 8003012:	e003      	b.n	800301c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8003014:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800301c:	429a      	cmp	r2, r3
 800301e:	d106      	bne.n	800302e <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2200      	movs	r2, #0
 8003026:	2103      	movs	r1, #3
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fb87 	bl	800273c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fc7a 	bl	800292c <LL_ADC_IsEnabled>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	f040 81c9 	bne.w	80033d2 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	461a      	mov	r2, r3
 800304e:	f7ff fbfb 	bl	8002848 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	4a8f      	ldr	r2, [pc, #572]	@ (8003294 <HAL_ADC_ConfigChannel+0x65c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	f040 8131 	bne.w	80032c0 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10b      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x44e>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	0e9b      	lsrs	r3, r3, #26
 8003074:	3301      	adds	r3, #1
 8003076:	f003 031f 	and.w	r3, r3, #31
 800307a:	2b09      	cmp	r3, #9
 800307c:	bf94      	ite	ls
 800307e:	2301      	movls	r3, #1
 8003080:	2300      	movhi	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	e019      	b.n	80030ba <HAL_ADC_ConfigChannel+0x482>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003094:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003096:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003098:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800309e:	2320      	movs	r3, #32
 80030a0:	e003      	b.n	80030aa <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 80030a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030a4:	fab3 f383 	clz	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	3301      	adds	r3, #1
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	2b09      	cmp	r3, #9
 80030b2:	bf94      	ite	ls
 80030b4:	2301      	movls	r3, #1
 80030b6:	2300      	movhi	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d079      	beq.n	80031b2 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d107      	bne.n	80030da <HAL_ADC_ConfigChannel+0x4a2>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	0e9b      	lsrs	r3, r3, #26
 80030d0:	3301      	adds	r3, #1
 80030d2:	069b      	lsls	r3, r3, #26
 80030d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030d8:	e015      	b.n	8003106 <HAL_ADC_ConfigChannel+0x4ce>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80030e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030ea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80030ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80030f2:	2320      	movs	r3, #32
 80030f4:	e003      	b.n	80030fe <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80030f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	069b      	lsls	r3, r3, #26
 8003102:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x4ee>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	0e9b      	lsrs	r3, r3, #26
 8003118:	3301      	adds	r3, #1
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2101      	movs	r1, #1
 8003120:	fa01 f303 	lsl.w	r3, r1, r3
 8003124:	e017      	b.n	8003156 <HAL_ADC_ConfigChannel+0x51e>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003136:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 800313e:	2320      	movs	r3, #32
 8003140:	e003      	b.n	800314a <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8003142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003144:	fab3 f383 	clz	r3, r3
 8003148:	b2db      	uxtb	r3, r3
 800314a:	3301      	adds	r3, #1
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	2101      	movs	r1, #1
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	ea42 0103 	orr.w	r1, r2, r3
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_ADC_ConfigChannel+0x544>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0e9b      	lsrs	r3, r3, #26
 800316c:	3301      	adds	r3, #1
 800316e:	f003 021f 	and.w	r2, r3, #31
 8003172:	4613      	mov	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4413      	add	r3, r2
 8003178:	051b      	lsls	r3, r3, #20
 800317a:	e018      	b.n	80031ae <HAL_ADC_ConfigChannel+0x576>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800318a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800318e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003194:	2320      	movs	r3, #32
 8003196:	e003      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	3301      	adds	r3, #1
 80031a2:	f003 021f 	and.w	r2, r3, #31
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031ae:	430b      	orrs	r3, r1
 80031b0:	e081      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x596>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	0e9b      	lsrs	r3, r3, #26
 80031c4:	3301      	adds	r3, #1
 80031c6:	069b      	lsls	r3, r3, #26
 80031c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031cc:	e015      	b.n	80031fa <HAL_ADC_ConfigChannel+0x5c2>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80031dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031de:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80031e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80031e6:	2320      	movs	r3, #32
 80031e8:	e003      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80031ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ec:	fab3 f383 	clz	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	3301      	adds	r3, #1
 80031f4:	069b      	lsls	r3, r3, #26
 80031f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_ADC_ConfigChannel+0x5e2>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	0e9b      	lsrs	r3, r3, #26
 800320c:	3301      	adds	r3, #1
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	2101      	movs	r1, #1
 8003214:	fa01 f303 	lsl.w	r3, r1, r3
 8003218:	e017      	b.n	800324a <HAL_ADC_ConfigChannel+0x612>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	61fb      	str	r3, [r7, #28]
  return result;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8003232:	2320      	movs	r3, #32
 8003234:	e003      	b.n	800323e <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	3301      	adds	r3, #1
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f303 	lsl.w	r3, r1, r3
 800324a:	ea42 0103 	orr.w	r1, r2, r3
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10d      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x63e>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	0e9b      	lsrs	r3, r3, #26
 8003260:	3301      	adds	r3, #1
 8003262:	f003 021f 	and.w	r2, r3, #31
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	3b1e      	subs	r3, #30
 800326e:	051b      	lsls	r3, r3, #20
 8003270:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003274:	e01e      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x67c>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	613b      	str	r3, [r7, #16]
  return result;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d104      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800328e:	2320      	movs	r3, #32
 8003290:	e006      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x668>
 8003292:	bf00      	nop
 8003294:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	3301      	adds	r3, #1
 80032a2:	f003 021f 	and.w	r2, r3, #31
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	3b1e      	subs	r3, #30
 80032ae:	051b      	lsls	r3, r3, #20
 80032b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ba:	4619      	mov	r1, r3
 80032bc:	f7ff fa98 	bl	80027f0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b48      	ldr	r3, [pc, #288]	@ (80033e8 <HAL_ADC_ConfigChannel+0x7b0>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8082 	beq.w	80033d2 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032ce:	4847      	ldr	r0, [pc, #284]	@ (80033ec <HAL_ADC_ConfigChannel+0x7b4>)
 80032d0:	f7ff f9ec 	bl	80026ac <LL_ADC_GetCommonPathInternalCh>
 80032d4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d8:	4845      	ldr	r0, [pc, #276]	@ (80033f0 <HAL_ADC_ConfigChannel+0x7b8>)
 80032da:	f7ff fb27 	bl	800292c <LL_ADC_IsEnabled>
 80032de:	4604      	mov	r4, r0
 80032e0:	4844      	ldr	r0, [pc, #272]	@ (80033f4 <HAL_ADC_ConfigChannel+0x7bc>)
 80032e2:	f7ff fb23 	bl	800292c <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	4323      	orrs	r3, r4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d15e      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a41      	ldr	r2, [pc, #260]	@ (80033f8 <HAL_ADC_ConfigChannel+0x7c0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d127      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d121      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a39      	ldr	r2, [pc, #228]	@ (80033f0 <HAL_ADC_ConfigChannel+0x7b8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d161      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800330e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003312:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003316:	4619      	mov	r1, r3
 8003318:	4834      	ldr	r0, [pc, #208]	@ (80033ec <HAL_ADC_ConfigChannel+0x7b4>)
 800331a:	f7ff f9b4 	bl	8002686 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800331e:	4b37      	ldr	r3, [pc, #220]	@ (80033fc <HAL_ADC_ConfigChannel+0x7c4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	099b      	lsrs	r3, r3, #6
 8003324:	4a36      	ldr	r2, [pc, #216]	@ (8003400 <HAL_ADC_ConfigChannel+0x7c8>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	099b      	lsrs	r3, r3, #6
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003336:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003338:	e002      	b.n	8003340 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3b01      	subs	r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f9      	bne.n	800333a <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003346:	e044      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a2d      	ldr	r2, [pc, #180]	@ (8003404 <HAL_ADC_ConfigChannel+0x7cc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d113      	bne.n	800337a <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003352:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003356:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10d      	bne.n	800337a <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a23      	ldr	r2, [pc, #140]	@ (80033f0 <HAL_ADC_ConfigChannel+0x7b8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d134      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003368:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800336c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003370:	4619      	mov	r1, r3
 8003372:	481e      	ldr	r0, [pc, #120]	@ (80033ec <HAL_ADC_ConfigChannel+0x7b4>)
 8003374:	f7ff f987 	bl	8002686 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003378:	e02b      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a22      	ldr	r2, [pc, #136]	@ (8003408 <HAL_ADC_ConfigChannel+0x7d0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d126      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003384:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003388:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d120      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a16      	ldr	r2, [pc, #88]	@ (80033f0 <HAL_ADC_ConfigChannel+0x7b8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d11b      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800339a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800339e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033a2:	4619      	mov	r1, r3
 80033a4:	4811      	ldr	r0, [pc, #68]	@ (80033ec <HAL_ADC_ConfigChannel+0x7b4>)
 80033a6:	f7ff f96e 	bl	8002686 <LL_ADC_SetCommonPathInternalCh>
 80033aa:	e012      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b0:	f043 0220 	orr.w	r2, r3, #32
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80033be:	e008      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c4:	f043 0220 	orr.w	r2, r3, #32
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80033da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80033de:	4618      	mov	r0, r3
 80033e0:	37dc      	adds	r7, #220	@ 0xdc
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd90      	pop	{r4, r7, pc}
 80033e6:	bf00      	nop
 80033e8:	80080000 	.word	0x80080000
 80033ec:	42028300 	.word	0x42028300
 80033f0:	42028000 	.word	0x42028000
 80033f4:	42028100 	.word	0x42028100
 80033f8:	c7520000 	.word	0xc7520000
 80033fc:	20000004 	.word	0x20000004
 8003400:	053e2d63 	.word	0x053e2d63
 8003404:	cb840000 	.word	0xcb840000
 8003408:	80000001 	.word	0x80000001

0800340c <LL_ADC_IsEnabled>:
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <LL_ADC_IsEnabled+0x18>
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <LL_ADC_IsEnabled+0x1a>
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <LL_ADC_REG_IsConversionOngoing>:
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b04      	cmp	r3, #4
 8003444:	d101      	bne.n	800344a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b0a1      	sub	sp, #132	@ 0x84
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003472:	2302      	movs	r3, #2
 8003474:	e089      	b.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800347e:	2300      	movs	r3, #0
 8003480:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003482:	2300      	movs	r3, #0
 8003484:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a42      	ldr	r2, [pc, #264]	@ (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d102      	bne.n	8003496 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003490:	4b41      	ldr	r3, [pc, #260]	@ (8003598 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	e001      	b.n	800349a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10b      	bne.n	80034b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e068      	b.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff ffb9 	bl	8003432 <LL_ADC_REG_IsConversionOngoing>
 80034c0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff ffb3 	bl	8003432 <LL_ADC_REG_IsConversionOngoing>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d14a      	bne.n	8003568 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80034d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d147      	bne.n	8003568 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80034d8:	4b30      	ldr	r3, [pc, #192]	@ (800359c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80034da:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d027      	beq.n	8003534 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80034e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80034f6:	035b      	lsls	r3, r3, #13
 80034f8:	430b      	orrs	r3, r1
 80034fa:	431a      	orrs	r2, r3
 80034fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003500:	4824      	ldr	r0, [pc, #144]	@ (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003502:	f7ff ff83 	bl	800340c <LL_ADC_IsEnabled>
 8003506:	4604      	mov	r4, r0
 8003508:	4823      	ldr	r0, [pc, #140]	@ (8003598 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800350a:	f7ff ff7f 	bl	800340c <LL_ADC_IsEnabled>
 800350e:	4603      	mov	r3, r0
 8003510:	4323      	orrs	r3, r4
 8003512:	2b00      	cmp	r3, #0
 8003514:	d132      	bne.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003516:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800351e:	f023 030f 	bic.w	r3, r3, #15
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	6811      	ldr	r1, [r2, #0]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	6892      	ldr	r2, [r2, #8]
 800352a:	430a      	orrs	r2, r1
 800352c:	431a      	orrs	r2, r3
 800352e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003530:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003532:	e023      	b.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003534:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800353c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800353e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003540:	4814      	ldr	r0, [pc, #80]	@ (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003542:	f7ff ff63 	bl	800340c <LL_ADC_IsEnabled>
 8003546:	4604      	mov	r4, r0
 8003548:	4813      	ldr	r0, [pc, #76]	@ (8003598 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800354a:	f7ff ff5f 	bl	800340c <LL_ADC_IsEnabled>
 800354e:	4603      	mov	r3, r0
 8003550:	4323      	orrs	r3, r4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d112      	bne.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003556:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800355e:	f023 030f 	bic.w	r3, r3, #15
 8003562:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003564:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003566:	e009      	b.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800357a:	e000      	b.n	800357e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800357c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003586:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800358a:	4618      	mov	r0, r3
 800358c:	3784      	adds	r7, #132	@ 0x84
 800358e:	46bd      	mov	sp, r7
 8003590:	bd90      	pop	{r4, r7, pc}
 8003592:	bf00      	nop
 8003594:	42028000 	.word	0x42028000
 8003598:	42028100 	.word	0x42028100
 800359c:	42028300 	.word	0x42028300

080035a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b0:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035bc:	4013      	ands	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035d2:	4a04      	ldr	r2, [pc, #16]	@ (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	60d3      	str	r3, [r2, #12]
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035ec:	4b04      	ldr	r3, [pc, #16]	@ (8003600 <__NVIC_GetPriorityGrouping+0x18>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	f003 0307 	and.w	r3, r3, #7
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	2b00      	cmp	r3, #0
 8003614:	db0b      	blt.n	800362e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	f003 021f 	and.w	r2, r3, #31
 800361c:	4907      	ldr	r1, [pc, #28]	@ (800363c <__NVIC_EnableIRQ+0x38>)
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2001      	movs	r0, #1
 8003626:	fa00 f202 	lsl.w	r2, r0, r2
 800362a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000e100 	.word	0xe000e100

08003640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	6039      	str	r1, [r7, #0]
 800364a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800364c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003650:	2b00      	cmp	r3, #0
 8003652:	db0a      	blt.n	800366a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	490c      	ldr	r1, [pc, #48]	@ (800368c <__NVIC_SetPriority+0x4c>)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	0152      	lsls	r2, r2, #5
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	440b      	add	r3, r1
 8003664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003668:	e00a      	b.n	8003680 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4908      	ldr	r1, [pc, #32]	@ (8003690 <__NVIC_SetPriority+0x50>)
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	3b04      	subs	r3, #4
 8003678:	0152      	lsls	r2, r2, #5
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	440b      	add	r3, r1
 800367e:	761a      	strb	r2, [r3, #24]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	e000e100 	.word	0xe000e100
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	@ 0x24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f1c3 0307 	rsb	r3, r3, #7
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	bf28      	it	cs
 80036b2:	2303      	movcs	r3, #3
 80036b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3303      	adds	r3, #3
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d902      	bls.n	80036c4 <NVIC_EncodePriority+0x30>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3b04      	subs	r3, #4
 80036c2:	e000      	b.n	80036c6 <NVIC_EncodePriority+0x32>
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	f04f 32ff 	mov.w	r2, #4294967295
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43da      	mvns	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	401a      	ands	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036dc:	f04f 31ff 	mov.w	r1, #4294967295
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	43d9      	mvns	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	4313      	orrs	r3, r2
         );
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3724      	adds	r7, #36	@ 0x24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3b01      	subs	r3, #1
 8003708:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800370c:	d301      	bcc.n	8003712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800370e:	2301      	movs	r3, #1
 8003710:	e00f      	b.n	8003732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003712:	4a0a      	ldr	r2, [pc, #40]	@ (800373c <SysTick_Config+0x40>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800371a:	2107      	movs	r1, #7
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	f7ff ff8e 	bl	8003640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <SysTick_Config+0x40>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800372a:	4b04      	ldr	r3, [pc, #16]	@ (800373c <SysTick_Config+0x40>)
 800372c:	2207      	movs	r2, #7
 800372e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	e000e010 	.word	0xe000e010

08003740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ff29 	bl	80035a0 <__NVIC_SetPriorityGrouping>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	4603      	mov	r3, r0
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003764:	f7ff ff40 	bl	80035e8 <__NVIC_GetPriorityGrouping>
 8003768:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	6978      	ldr	r0, [r7, #20]
 8003770:	f7ff ff90 	bl	8003694 <NVIC_EncodePriority>
 8003774:	4602      	mov	r2, r0
 8003776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff ff5f 	bl	8003640 <__NVIC_SetPriority>
}
 8003782:	bf00      	nop
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	4603      	mov	r3, r0
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ff33 	bl	8003604 <__NVIC_EnableIRQ>
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ffa4 	bl	80036fc <SysTick_Config>
 80037b4:	4603      	mov	r3, r0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d008      	beq.n	80037e8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2204      	movs	r2, #4
 80037da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e040      	b.n	800386a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 020e 	bic.w	r2, r2, #14
 80037f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003802:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003806:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800381c:	f003 021c 	and.w	r2, r3, #28
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003824:	2101      	movs	r1, #1
 8003826:	fa01 f202 	lsl.w	r2, r1, r2
 800382a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003834:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00c      	beq.n	8003858 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003848:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800384c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003856:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d005      	beq.n	800389a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2204      	movs	r2, #4
 8003892:	645a      	str	r2, [r3, #68]	@ 0x44

    status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
 8003898:	e047      	b.n	800392a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 020e 	bic.w	r2, r2, #14
 80038a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0201 	bic.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ce:	f003 021c 	and.w	r2, r3, #28
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d6:	2101      	movs	r1, #1
 80038d8:	fa01 f202 	lsl.w	r2, r1, r2
 80038dc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80038e6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00c      	beq.n	800390a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003908:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	4798      	blx	r3
    }
  }
  return status;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_FLASH_Program>:
  *                This parameter is the data for the double word program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	e9c7 2300 	strd	r2, r3, [r7]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003942:	4b1b      	ldr	r3, [pc, #108]	@ (80039b0 <HAL_FLASH_Program+0x7c>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_FLASH_Program+0x1a>
 800394a:	2302      	movs	r3, #2
 800394c:	e02c      	b.n	80039a8 <HAL_FLASH_Program+0x74>
 800394e:	4b18      	ldr	r3, [pc, #96]	@ (80039b0 <HAL_FLASH_Program+0x7c>)
 8003950:	2201      	movs	r2, #1
 8003952:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003954:	4b16      	ldr	r3, [pc, #88]	@ (80039b0 <HAL_FLASH_Program+0x7c>)
 8003956:	2200      	movs	r2, #0
 8003958:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800395a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800395e:	f000 f867 	bl	8003a30 <FLASH_WaitForLastOperation>
 8003962:	4603      	mov	r3, r0
 8003964:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d119      	bne.n	80039a0 <HAL_FLASH_Program+0x6c>
  {
    pFlash.ProcedureOnGoing = TypeProgram;
 800396c:	4a10      	ldr	r2, [pc, #64]	@ (80039b0 <HAL_FLASH_Program+0x7c>)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6093      	str	r3, [r2, #8]
    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8003972:	4b10      	ldr	r3, [pc, #64]	@ (80039b4 <HAL_FLASH_Program+0x80>)
 8003974:	613b      	str	r3, [r7, #16]

    /* Program double-word (64-bit) at a specified address */
    FLASH_Program_DoubleWord(Address, Data);
 8003976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800397a:	68b8      	ldr	r0, [r7, #8]
 800397c:	f000 f8a0 	bl	8003ac0 <FLASH_Program_DoubleWord>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003980:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003984:	f000 f854 	bl	8003a30 <FLASH_WaitForLastOperation>
 8003988:	4603      	mov	r3, r0
 800398a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b07      	ldr	r3, [pc, #28]	@ (80039b0 <HAL_FLASH_Program+0x7c>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003998:	43db      	mvns	r3, r3
 800399a:	401a      	ands	r2, r3
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80039a0:	4b03      	ldr	r3, [pc, #12]	@ (80039b0 <HAL_FLASH_Program+0x7c>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	701a      	strb	r2, [r3, #0]

  return status;
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20000010 	.word	0x20000010
 80039b4:	40022028 	.word	0x40022028

080039b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 80039c2:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <HAL_FLASH_Unlock+0x38>)
 80039c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	da0b      	bge.n	80039e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 80039ca:	4b09      	ldr	r3, [pc, #36]	@ (80039f0 <HAL_FLASH_Unlock+0x38>)
 80039cc:	4a09      	ldr	r2, [pc, #36]	@ (80039f4 <HAL_FLASH_Unlock+0x3c>)
 80039ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 80039d0:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <HAL_FLASH_Unlock+0x38>)
 80039d2:	4a09      	ldr	r2, [pc, #36]	@ (80039f8 <HAL_FLASH_Unlock+0x40>)
 80039d4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 80039d6:	4b06      	ldr	r3, [pc, #24]	@ (80039f0 <HAL_FLASH_Unlock+0x38>)
 80039d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039da:	2b00      	cmp	r3, #0
 80039dc:	da01      	bge.n	80039e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif

  return status;
 80039e2:	79fb      	ldrb	r3, [r7, #7]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	40022000 	.word	0x40022000
 80039f4:	45670123 	.word	0x45670123
 80039f8:	cdef89ab 	.word	0xcdef89ab

080039fc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK);
 8003a06:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <HAL_FLASH_Lock+0x30>)
 8003a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0a:	4a08      	ldr	r2, [pc, #32]	@ (8003a2c <HAL_FLASH_Lock+0x30>)
 8003a0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a10:	6293      	str	r3, [r2, #40]	@ 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 8003a12:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <HAL_FLASH_Lock+0x30>)
 8003a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	da01      	bge.n	8003a1e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif

  return status;
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	40022000 	.word	0x40022000

08003a30 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 8003a38:	f7fe fde2 	bl	8002600 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
  uint32_t error;
  __IO uint32_t *reg_sr;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003a44:	e00b      	b.n	8003a5e <FLASH_WaitForLastOperation+0x2e>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d007      	beq.n	8003a5e <FLASH_WaitForLastOperation+0x2e>
    {
      if(HAL_GetTick() >= timeout)
 8003a4e:	f7fe fdd7 	bl	8002600 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d801      	bhi.n	8003a5e <FLASH_WaitForLastOperation+0x2e>
      {
        return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e025      	b.n	8003aaa <FLASH_WaitForLastOperation+0x7a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003a5e:	4b15      	ldr	r3, [pc, #84]	@ (8003ab4 <FLASH_WaitForLastOperation+0x84>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1ed      	bne.n	8003a46 <FLASH_WaitForLastOperation+0x16>
      }
    }
  }
  
  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8003a6a:	4b13      	ldr	r3, [pc, #76]	@ (8003ab8 <FLASH_WaitForLastOperation+0x88>)
 8003a6c:	613b      	str	r3, [r7, #16]

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	f242 03fa 	movw	r3, #8442	@ 0x20fa
 8003a76:	4013      	ands	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */ 

  if(error != 0u)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <FLASH_WaitForLastOperation+0x66>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003a80:	4b0e      	ldr	r3, [pc, #56]	@ (8003abc <FLASH_WaitForLastOperation+0x8c>)
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	4a0c      	ldr	r2, [pc, #48]	@ (8003abc <FLASH_WaitForLastOperation+0x8c>)
 8003a8a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    (*reg_sr) = error;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e009      	b.n	8003aaa <FLASH_WaitForLastOperation+0x7a>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <FLASH_WaitForLastOperation+0x78>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40022000 	.word	0x40022000
 8003ab8:	40022020 	.word	0x40022020
 8003abc:	20000010 	.word	0x20000010

08003ac0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	@ 0x24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	e9c7 2300 	strd	r2, r3, [r7]
  __IO uint32_t *reg;
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8003acc:	4b16      	ldr	r3, [pc, #88]	@ (8003b28 <FLASH_Program_DoubleWord+0x68>)
 8003ace:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad4:	613b      	str	r3, [r7, #16]
  return(result);
 8003ad6:	693b      	ldr	r3, [r7, #16]

  /* Disable interrupts to avoid any interruption during the double word programming */
  primask_bit = __get_PRIMASK();
 8003ad8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ada:	b672      	cpsid	i
}
 8003adc:	bf00      	nop
  __disable_irq();

  /* Set PG bit */
  SET_BIT((*reg), FLASH_NSCR_NSPG);
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f043 0201 	orr.w	r2, r3, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	601a      	str	r2, [r3, #0]

  /* Program first word */
  *(uint32_t*)Address = (uint32_t)Data;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003af0:	f3bf 8f6f 	isb	sy
}
 8003af4:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t*)(Address+4U) = (uint32_t)(Data >> 32U);
 8003af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	000a      	movs	r2, r1
 8003b04:	2300      	movs	r3, #0
 8003b06:	68f9      	ldr	r1, [r7, #12]
 8003b08:	3104      	adds	r1, #4
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f383 8810 	msr	PRIMASK, r3
}
 8003b18:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003b1a:	bf00      	nop
 8003b1c:	3724      	adds	r7, #36	@ 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40022028 	.word	0x40022028

08003b2c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b36:	4b33      	ldr	r3, [pc, #204]	@ (8003c04 <HAL_FLASHEx_Erase+0xd8>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_FLASHEx_Erase+0x16>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e05c      	b.n	8003bfc <HAL_FLASHEx_Erase+0xd0>
 8003b42:	4b30      	ldr	r3, [pc, #192]	@ (8003c04 <HAL_FLASHEx_Erase+0xd8>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b48:	4b2e      	ldr	r3, [pc, #184]	@ (8003c04 <HAL_FLASHEx_Erase+0xd8>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b52:	f7ff ff6d 	bl	8003a30 <FLASH_WaitForLastOperation>
 8003b56:	4603      	mov	r3, r0
 8003b58:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d149      	bne.n	8003bf4 <HAL_FLASHEx_Erase+0xc8>
  {
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a27      	ldr	r2, [pc, #156]	@ (8003c04 <HAL_FLASHEx_Erase+0xd8>)
 8003b66:	6093      	str	r3, [r2, #8]

    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8003b68:	4b27      	ldr	r3, [pc, #156]	@ (8003c08 <HAL_FLASHEx_Erase+0xdc>)
 8003b6a:	60fb      	str	r3, [r7, #12]

    if ((pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8003b6c:	4b25      	ldr	r3, [pc, #148]	@ (8003c04 <HAL_FLASHEx_Erase+0xd8>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b74:	f248 0204 	movw	r2, #32772	@ 0x8004
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d10b      	bne.n	8003b94 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f843 	bl	8003c0c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b8a:	f7ff ff51 	bl	8003a30 <FLASH_WaitForLastOperation>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	75fb      	strb	r3, [r7, #23]
 8003b92:	e025      	b.n	8003be0 <HAL_FLASHEx_Erase+0xb4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9a:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	e015      	b.n	8003bd0 <HAL_FLASHEx_Erase+0xa4>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6938      	ldr	r0, [r7, #16]
 8003bac:	f000 f86a 	bl	8003c84 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003bb0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003bb4:	f7ff ff3c 	bl	8003a30 <FLASH_WaitForLastOperation>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_FLASHEx_Erase+0x9e>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	601a      	str	r2, [r3, #0]
          break;
 8003bc8:	e00a      	b.n	8003be0 <HAL_FLASHEx_Erase+0xb4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d3e1      	bcc.n	8003ba4 <HAL_FLASHEx_Erase+0x78>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b07      	ldr	r3, [pc, #28]	@ (8003c04 <HAL_FLASHEx_Erase+0xd8>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bec:	43db      	mvns	r3, r3
 8003bee:	401a      	ands	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003bf4:	4b03      	ldr	r3, [pc, #12]	@ (8003c04 <HAL_FLASHEx_Erase+0xd8>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]

  return status;
 8003bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000010 	.word	0x20000010
 8003c08:	40022028 	.word	0x40022028

08003c0c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  primask_bit = __get_PRIMASK();
  __disable_irq();
#endif
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8003c14:	4b19      	ldr	r3, [pc, #100]	@ (8003c7c <FLASH_MassErase+0x70>)
 8003c16:	60fb      	str	r3, [r7, #12]

  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8003c18:	4b19      	ldr	r3, [pc, #100]	@ (8003c80 <FLASH_MassErase+0x74>)
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d016      	beq.n	8003c52 <FLASH_MassErase+0x46>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <FLASH_MassErase+0x2e>
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER1);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f043 0204 	orr.w	r2, r3, #4
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	601a      	str	r2, [r3, #0]
    }

    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00e      	beq.n	8003c62 <FLASH_MassErase+0x56>
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER2);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	e007      	b.n	8003c62 <FLASH_MassErase+0x56>
    }
  }
  else
  {
    SET_BIT((*reg), (FLASH_NSCR_NSMER1 | FLASH_NSCR_NSMER2));
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c5a:	f043 0304 	orr.w	r3, r3, #4
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	6013      	str	r3, [r2, #0]
  }

  /* Proceed to erase all sectors */
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40022028 	.word	0x40022028
 8003c80:	40022000 	.word	0x40022000

08003c84 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  primask_bit = __get_PRIMASK();
  __disable_irq();
#endif

  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d04 <FLASH_PageErase+0x80>)
 8003c90:	60fb      	str	r3, [r7, #12]

  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8003c92:	4b1d      	ldr	r3, [pc, #116]	@ (8003d08 <FLASH_PageErase+0x84>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <FLASH_PageErase+0x28>
  {
    CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e011      	b.n	8003cd0 <FLASH_PageErase+0x4c>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <FLASH_PageErase+0x40>
    {
      CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	e005      	b.n	8003cd0 <FLASH_PageErase+0x4c>
    }
    else
    {
      SET_BIT((*reg), FLASH_NSCR_NSBKER);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg), (FLASH_NSCR_NSPNB | FLASH_NSCR_NSPER), ((Page << FLASH_NSCR_NSPNB_Pos) | FLASH_NSCR_NSPER));
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8003cd8:	f023 0302 	bic.w	r3, r3, #2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	00d2      	lsls	r2, r2, #3
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f043 0202 	orr.w	r2, r3, #2
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40022028 	.word	0x40022028
 8003d08:	40022000 	.word	0x40022000

08003d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d1a:	e158      	b.n	8003fce <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	2101      	movs	r1, #1
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	fa01 f303 	lsl.w	r3, r1, r3
 8003d28:	4013      	ands	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 814a 	beq.w	8003fc8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d005      	beq.n	8003d4c <HAL_GPIO_Init+0x40>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d130      	bne.n	8003dae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	2203      	movs	r2, #3
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4013      	ands	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d82:	2201      	movs	r2, #1
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	f003 0201 	and.w	r2, r3, #1
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d017      	beq.n	8003dea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d123      	bne.n	8003e3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	08da      	lsrs	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3208      	adds	r2, #8
 8003dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	220f      	movs	r2, #15
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4013      	ands	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	08da      	lsrs	r2, r3, #3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3208      	adds	r2, #8
 8003e38:	6939      	ldr	r1, [r7, #16]
 8003e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	2203      	movs	r2, #3
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4013      	ands	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0203 	and.w	r2, r3, #3
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 80a4 	beq.w	8003fc8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003e80:	4a5a      	ldr	r2, [pc, #360]	@ (8003fec <HAL_GPIO_Init+0x2e0>)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	089b      	lsrs	r3, r3, #2
 8003e86:	3318      	adds	r3, #24
 8003e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	220f      	movs	r2, #15
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a52      	ldr	r2, [pc, #328]	@ (8003ff0 <HAL_GPIO_Init+0x2e4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d025      	beq.n	8003ef8 <HAL_GPIO_Init+0x1ec>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a51      	ldr	r2, [pc, #324]	@ (8003ff4 <HAL_GPIO_Init+0x2e8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d01f      	beq.n	8003ef4 <HAL_GPIO_Init+0x1e8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a50      	ldr	r2, [pc, #320]	@ (8003ff8 <HAL_GPIO_Init+0x2ec>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d019      	beq.n	8003ef0 <HAL_GPIO_Init+0x1e4>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a4f      	ldr	r2, [pc, #316]	@ (8003ffc <HAL_GPIO_Init+0x2f0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <HAL_GPIO_Init+0x1e0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a4e      	ldr	r2, [pc, #312]	@ (8004000 <HAL_GPIO_Init+0x2f4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00d      	beq.n	8003ee8 <HAL_GPIO_Init+0x1dc>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a4d      	ldr	r2, [pc, #308]	@ (8004004 <HAL_GPIO_Init+0x2f8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d007      	beq.n	8003ee4 <HAL_GPIO_Init+0x1d8>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a4c      	ldr	r2, [pc, #304]	@ (8004008 <HAL_GPIO_Init+0x2fc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d101      	bne.n	8003ee0 <HAL_GPIO_Init+0x1d4>
 8003edc:	2306      	movs	r3, #6
 8003ede:	e00c      	b.n	8003efa <HAL_GPIO_Init+0x1ee>
 8003ee0:	2307      	movs	r3, #7
 8003ee2:	e00a      	b.n	8003efa <HAL_GPIO_Init+0x1ee>
 8003ee4:	2305      	movs	r3, #5
 8003ee6:	e008      	b.n	8003efa <HAL_GPIO_Init+0x1ee>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	e006      	b.n	8003efa <HAL_GPIO_Init+0x1ee>
 8003eec:	2303      	movs	r3, #3
 8003eee:	e004      	b.n	8003efa <HAL_GPIO_Init+0x1ee>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e002      	b.n	8003efa <HAL_GPIO_Init+0x1ee>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <HAL_GPIO_Init+0x1ee>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	f002 0203 	and.w	r2, r2, #3
 8003f00:	00d2      	lsls	r2, r2, #3
 8003f02:	4093      	lsls	r3, r2
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003f0a:	4938      	ldr	r1, [pc, #224]	@ (8003fec <HAL_GPIO_Init+0x2e0>)
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	089b      	lsrs	r3, r3, #2
 8003f10:	3318      	adds	r3, #24
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f18:	4b34      	ldr	r3, [pc, #208]	@ (8003fec <HAL_GPIO_Init+0x2e0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fec <HAL_GPIO_Init+0x2e0>)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f42:	4b2a      	ldr	r3, [pc, #168]	@ (8003fec <HAL_GPIO_Init+0x2e0>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f66:	4a21      	ldr	r2, [pc, #132]	@ (8003fec <HAL_GPIO_Init+0x2e0>)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8003fec <HAL_GPIO_Init+0x2e0>)
 8003f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	43db      	mvns	r3, r3
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f92:	4a16      	ldr	r2, [pc, #88]	@ (8003fec <HAL_GPIO_Init+0x2e0>)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8003f9a:	4b14      	ldr	r3, [pc, #80]	@ (8003fec <HAL_GPIO_Init+0x2e0>)
 8003f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8003fec <HAL_GPIO_Init+0x2e0>)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f47f ae9f 	bne.w	8003d1c <HAL_GPIO_Init+0x10>
  }
}
 8003fde:	bf00      	nop
 8003fe0:	bf00      	nop
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	4002f400 	.word	0x4002f400
 8003ff0:	42020000 	.word	0x42020000
 8003ff4:	42020400 	.word	0x42020400
 8003ff8:	42020800 	.word	0x42020800
 8003ffc:	42020c00 	.word	0x42020c00
 8004000:	42021000 	.word	0x42021000
 8004004:	42021400 	.word	0x42021400
 8004008:	42021800 	.word	0x42021800

0800400c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	807b      	strh	r3, [r7, #2]
 8004018:	4613      	mov	r3, r2
 800401a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800401c:	787b      	ldrb	r3, [r7, #1]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004028:	e002      	b.n	8004030 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800402a:	887a      	ldrh	r2, [r7, #2]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800404e:	887a      	ldrh	r2, [r7, #2]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4013      	ands	r3, r2
 8004054:	041a      	lsls	r2, r3, #16
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	43d9      	mvns	r1, r3
 800405a:	887b      	ldrh	r3, [r7, #2]
 800405c:	400b      	ands	r3, r1
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	619a      	str	r2, [r3, #24]
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004074:	4b04      	ldr	r3, [pc, #16]	@ (8004088 <HAL_PWREx_GetVoltageRange+0x18>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40007000 	.word	0x40007000

0800408c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8004094:	4b27      	ldr	r3, [pc, #156]	@ (8004134 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800409c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800409e:	f000 f861 	bl	8004164 <HAL_PWREx_SMPS_GetEffectiveMode>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a8:	d101      	bne.n	80040ae <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e03e      	b.n	800412c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80040ae:	4b21      	ldr	r3, [pc, #132]	@ (8004134 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ba:	d101      	bne.n	80040c0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e035      	b.n	800412c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d101      	bne.n	80040cc <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	e02f      	b.n	800412c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80040cc:	4b19      	ldr	r3, [pc, #100]	@ (8004134 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80040d4:	4917      	ldr	r1, [pc, #92]	@ (8004134 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4313      	orrs	r3, r2
 80040da:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80040dc:	4b16      	ldr	r3, [pc, #88]	@ (8004138 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	4a16      	ldr	r2, [pc, #88]	@ (800413c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80040e4:	fba2 2303 	umull	r2, r3, r2, r3
 80040e8:	09db      	lsrs	r3, r3, #7
 80040ea:	2232      	movs	r2, #50	@ 0x32
 80040ec:	fb02 f303 	mul.w	r3, r2, r3
 80040f0:	4a13      	ldr	r2, [pc, #76]	@ (8004140 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	08db      	lsrs	r3, r3, #3
 80040f8:	3301      	adds	r3, #1
 80040fa:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040fc:	e002      	b.n	8004104 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3b01      	subs	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004104:	4b0b      	ldr	r3, [pc, #44]	@ (8004134 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004110:	d102      	bne.n	8004118 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f2      	bne.n	80040fe <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004118:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004124:	d101      	bne.n	800412a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e000      	b.n	800412c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40007000 	.word	0x40007000
 8004138:	20000004 	.word	0x20000004
 800413c:	0a7c5ac5 	.word	0x0a7c5ac5
 8004140:	cccccccd 	.word	0xcccccccd

08004144 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004148:	4b05      	ldr	r3, [pc, #20]	@ (8004160 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4a04      	ldr	r2, [pc, #16]	@ (8004160 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800414e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004152:	6093      	str	r3, [r2, #8]
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40007000 	.word	0x40007000

08004164 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800416a:	4b0f      	ldr	r3, [pc, #60]	@ (80041a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800417a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800417e:	607b      	str	r3, [r7, #4]
 8004180:	e00a      	b.n	8004198 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d103      	bne.n	8004194 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800418c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004190:	607b      	str	r3, [r7, #4]
 8004192:	e001      	b.n	8004198 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004194:	2300      	movs	r3, #0
 8004196:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004198:	687b      	ldr	r3, [r7, #4]
}
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40007000 	.word	0x40007000

080041ac <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f000 bcc2 	b.w	8004b44 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041c0:	4b99      	ldr	r3, [pc, #612]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 030c 	and.w	r3, r3, #12
 80041c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ca:	4b97      	ldr	r3, [pc, #604]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 80e9 	beq.w	80043b4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d006      	beq.n	80041f6 <HAL_RCC_OscConfig+0x4a>
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	f040 8083 	bne.w	80042f6 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d17f      	bne.n	80042f6 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041f6:	4b8c      	ldr	r3, [pc, #560]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d006      	beq.n	8004210 <HAL_RCC_OscConfig+0x64>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	f000 bc9a 	b.w	8004b44 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004214:	4b84      	ldr	r3, [pc, #528]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d004      	beq.n	800422a <HAL_RCC_OscConfig+0x7e>
 8004220:	4b81      	ldr	r3, [pc, #516]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004228:	e005      	b.n	8004236 <HAL_RCC_OscConfig+0x8a>
 800422a:	4b7f      	ldr	r3, [pc, #508]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 800422c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004236:	4293      	cmp	r3, r2
 8004238:	d224      	bcs.n	8004284 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fe9a 	bl	8004f78 <RCC_SetFlashLatencyFromMSIRange>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f000 bc7a 	b.w	8004b44 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004250:	4b75      	ldr	r3, [pc, #468]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a74      	ldr	r2, [pc, #464]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004256:	f043 0308 	orr.w	r3, r3, #8
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	4b72      	ldr	r3, [pc, #456]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	496f      	ldr	r1, [pc, #444]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800426e:	4b6e      	ldr	r3, [pc, #440]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	496a      	ldr	r1, [pc, #424]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 800427e:	4313      	orrs	r3, r2
 8004280:	604b      	str	r3, [r1, #4]
 8004282:	e026      	b.n	80042d2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004284:	4b68      	ldr	r3, [pc, #416]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a67      	ldr	r2, [pc, #412]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 800428a:	f043 0308 	orr.w	r3, r3, #8
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	4b65      	ldr	r3, [pc, #404]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	4962      	ldr	r1, [pc, #392]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042a2:	4b61      	ldr	r3, [pc, #388]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	495d      	ldr	r1, [pc, #372]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fe59 	bl	8004f78 <RCC_SetFlashLatencyFromMSIRange>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f000 bc39 	b.w	8004b44 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80042d2:	f000 fe15 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 80042d6:	4603      	mov	r3, r0
 80042d8:	4a54      	ldr	r2, [pc, #336]	@ (800442c <HAL_RCC_OscConfig+0x280>)
 80042da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042dc:	4b54      	ldr	r3, [pc, #336]	@ (8004430 <HAL_RCC_OscConfig+0x284>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fe f93d 	bl	8002560 <HAL_InitTick>
 80042e6:	4603      	mov	r3, r0
 80042e8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d060      	beq.n	80043b2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	f000 bc27 	b.w	8004b44 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d039      	beq.n	8004372 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a49      	ldr	r2, [pc, #292]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800430a:	f7fe f979 	bl	8002600 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004310:	e00f      	b.n	8004332 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004312:	f7fe f975 	bl	8002600 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d908      	bls.n	8004332 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004320:	4b41      	ldr	r3, [pc, #260]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	f000 bc09 	b.w	8004b44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004332:	4b3d      	ldr	r3, [pc, #244]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0e9      	beq.n	8004312 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800433e:	4b3a      	ldr	r3, [pc, #232]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a39      	ldr	r2, [pc, #228]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004344:	f043 0308 	orr.w	r3, r3, #8
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b37      	ldr	r3, [pc, #220]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	4934      	ldr	r1, [pc, #208]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004358:	4313      	orrs	r3, r2
 800435a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800435c:	4b32      	ldr	r3, [pc, #200]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	021b      	lsls	r3, r3, #8
 800436a:	492f      	ldr	r1, [pc, #188]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 800436c:	4313      	orrs	r3, r2
 800436e:	604b      	str	r3, [r1, #4]
 8004370:	e020      	b.n	80043b4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004372:	4b2d      	ldr	r3, [pc, #180]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a2c      	ldr	r2, [pc, #176]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800437e:	f7fe f93f 	bl	8002600 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004384:	e00e      	b.n	80043a4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004386:	f7fe f93b 	bl	8002600 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d907      	bls.n	80043a4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004394:	4b24      	ldr	r3, [pc, #144]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e3cf      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043a4:	4b20      	ldr	r3, [pc, #128]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1ea      	bne.n	8004386 <HAL_RCC_OscConfig+0x1da>
 80043b0:	e000      	b.n	80043b4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d07e      	beq.n	80044be <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d005      	beq.n	80043d2 <HAL_RCC_OscConfig+0x226>
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d10e      	bne.n	80043ea <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d10b      	bne.n	80043ea <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d2:	4b15      	ldr	r3, [pc, #84]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d06e      	beq.n	80044bc <HAL_RCC_OscConfig+0x310>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d16a      	bne.n	80044bc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e3ac      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f2:	d106      	bne.n	8004402 <HAL_RCC_OscConfig+0x256>
 80043f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 80043fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	e024      	b.n	800444c <HAL_RCC_OscConfig+0x2a0>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800440a:	d113      	bne.n	8004434 <HAL_RCC_OscConfig+0x288>
 800440c:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a05      	ldr	r2, [pc, #20]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004412:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	4b03      	ldr	r3, [pc, #12]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a02      	ldr	r2, [pc, #8]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 800441e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	e012      	b.n	800444c <HAL_RCC_OscConfig+0x2a0>
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000
 800442c:	20000004 	.word	0x20000004
 8004430:	20000008 	.word	0x20000008
 8004434:	4b8b      	ldr	r3, [pc, #556]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a8a      	ldr	r2, [pc, #552]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800443a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b88      	ldr	r3, [pc, #544]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a87      	ldr	r2, [pc, #540]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004446:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800444a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d019      	beq.n	8004488 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7fe f8d4 	bl	8002600 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800445a:	e00e      	b.n	800447a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800445c:	f7fe f8d0 	bl	8002600 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	@ 0x64
 8004468:	d907      	bls.n	800447a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800446a:	4b7e      	ldr	r3, [pc, #504]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e364      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800447a:	4b7a      	ldr	r3, [pc, #488]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0ea      	beq.n	800445c <HAL_RCC_OscConfig+0x2b0>
 8004486:	e01a      	b.n	80044be <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fe f8ba 	bl	8002600 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800448e:	e00e      	b.n	80044ae <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004490:	f7fe f8b6 	bl	8002600 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	@ 0x64
 800449c:	d907      	bls.n	80044ae <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800449e:	4b71      	ldr	r3, [pc, #452]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e34a      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1ea      	bne.n	8004490 <HAL_RCC_OscConfig+0x2e4>
 80044ba:	e000      	b.n	80044be <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d06c      	beq.n	80045a4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d005      	beq.n	80044dc <HAL_RCC_OscConfig+0x330>
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	d119      	bne.n	800450a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d116      	bne.n	800450a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044dc:	4b61      	ldr	r3, [pc, #388]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_RCC_OscConfig+0x348>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e327      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f4:	4b5b      	ldr	r3, [pc, #364]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	061b      	lsls	r3, r3, #24
 8004502:	4958      	ldr	r1, [pc, #352]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004508:	e04c      	b.n	80045a4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d029      	beq.n	8004566 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004512:	4b54      	ldr	r3, [pc, #336]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a53      	ldr	r2, [pc, #332]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800451c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fe f86f 	bl	8002600 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004524:	e00e      	b.n	8004544 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004526:	f7fe f86b 	bl	8002600 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d907      	bls.n	8004544 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004534:	4b4b      	ldr	r3, [pc, #300]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e2ff      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004544:	4b47      	ldr	r3, [pc, #284]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ea      	beq.n	8004526 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004550:	4b44      	ldr	r3, [pc, #272]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	4941      	ldr	r1, [pc, #260]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004560:	4313      	orrs	r3, r2
 8004562:	604b      	str	r3, [r1, #4]
 8004564:	e01e      	b.n	80045a4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004566:	4b3f      	ldr	r3, [pc, #252]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a3e      	ldr	r2, [pc, #248]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800456c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004572:	f7fe f845 	bl	8002600 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004578:	e00e      	b.n	8004598 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800457a:	f7fe f841 	bl	8002600 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d907      	bls.n	8004598 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004588:	4b36      	ldr	r3, [pc, #216]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e2d5      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004598:	4b32      	ldr	r3, [pc, #200]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1ea      	bne.n	800457a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d062      	beq.n	8004676 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d038      	beq.n	800462a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d108      	bne.n	80045d2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80045c0:	4b28      	ldr	r3, [pc, #160]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045c6:	4a27      	ldr	r2, [pc, #156]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045c8:	f023 0310 	bic.w	r3, r3, #16
 80045cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80045d0:	e007      	b.n	80045e2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80045d2:	4b24      	ldr	r3, [pc, #144]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045d8:	4a22      	ldr	r2, [pc, #136]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045da:	f043 0310 	orr.w	r3, r3, #16
 80045de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e2:	4b20      	ldr	r3, [pc, #128]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f2:	f7fe f805 	bl	8002600 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045f8:	e00f      	b.n	800461a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045fa:	f7fe f801 	bl	8002600 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b07      	cmp	r3, #7
 8004606:	d908      	bls.n	800461a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004608:	4b16      	ldr	r3, [pc, #88]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800460a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e294      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800461a:	4b12      	ldr	r3, [pc, #72]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800461c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0e8      	beq.n	80045fa <HAL_RCC_OscConfig+0x44e>
 8004628:	e025      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800462a:	4b0e      	ldr	r3, [pc, #56]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800462c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004630:	4a0c      	ldr	r2, [pc, #48]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463a:	f7fd ffe1 	bl	8002600 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004640:	e012      	b.n	8004668 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004642:	f7fd ffdd 	bl	8002600 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b07      	cmp	r3, #7
 800464e:	d90b      	bls.n	8004668 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004650:	4b04      	ldr	r3, [pc, #16]	@ (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d004      	beq.n	8004668 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e270      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004668:	4ba8      	ldr	r3, [pc, #672]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 800466a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e5      	bne.n	8004642 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 812d 	beq.w	80048de <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004684:	2300      	movs	r3, #0
 8004686:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004688:	4ba0      	ldr	r3, [pc, #640]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 800468a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800468c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10d      	bne.n	80046b0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004694:	4b9d      	ldr	r3, [pc, #628]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004698:	4a9c      	ldr	r2, [pc, #624]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 800469a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800469e:	6593      	str	r3, [r2, #88]	@ 0x58
 80046a0:	4b9a      	ldr	r3, [pc, #616]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 80046a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ac:	2301      	movs	r3, #1
 80046ae:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046b0:	4b97      	ldr	r3, [pc, #604]	@ (8004910 <HAL_RCC_OscConfig+0x764>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d11e      	bne.n	80046fa <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046bc:	4b94      	ldr	r3, [pc, #592]	@ (8004910 <HAL_RCC_OscConfig+0x764>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a93      	ldr	r2, [pc, #588]	@ (8004910 <HAL_RCC_OscConfig+0x764>)
 80046c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c8:	f7fd ff9a 	bl	8002600 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ce:	e00e      	b.n	80046ee <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d0:	f7fd ff96 	bl	8002600 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d907      	bls.n	80046ee <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046de:	4b8c      	ldr	r3, [pc, #560]	@ (8004910 <HAL_RCC_OscConfig+0x764>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e22a      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ee:	4b88      	ldr	r3, [pc, #544]	@ (8004910 <HAL_RCC_OscConfig+0x764>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0ea      	beq.n	80046d0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01f      	beq.n	8004746 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d010      	beq.n	8004734 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004712:	4b7e      	ldr	r3, [pc, #504]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 8004714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004718:	4a7c      	ldr	r2, [pc, #496]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 800471a:	f043 0304 	orr.w	r3, r3, #4
 800471e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004722:	4b7a      	ldr	r3, [pc, #488]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 8004724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004728:	4a78      	ldr	r2, [pc, #480]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004732:	e018      	b.n	8004766 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004734:	4b75      	ldr	r3, [pc, #468]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473a:	4a74      	ldr	r2, [pc, #464]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004744:	e00f      	b.n	8004766 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004746:	4b71      	ldr	r3, [pc, #452]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474c:	4a6f      	ldr	r2, [pc, #444]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 800474e:	f023 0301 	bic.w	r3, r3, #1
 8004752:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004756:	4b6d      	ldr	r3, [pc, #436]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475c:	4a6b      	ldr	r2, [pc, #428]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 800475e:	f023 0304 	bic.w	r3, r3, #4
 8004762:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d068      	beq.n	8004840 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476e:	f7fd ff47 	bl	8002600 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004774:	e011      	b.n	800479a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004776:	f7fd ff43 	bl	8002600 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004784:	4293      	cmp	r3, r2
 8004786:	d908      	bls.n	800479a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004788:	4b60      	ldr	r3, [pc, #384]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e1d4      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800479a:	4b5c      	ldr	r3, [pc, #368]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0e6      	beq.n	8004776 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d022      	beq.n	80047fa <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80047b4:	4b55      	ldr	r3, [pc, #340]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ba:	4a54      	ldr	r2, [pc, #336]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 80047bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80047c4:	e011      	b.n	80047ea <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c6:	f7fd ff1b 	bl	8002600 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d908      	bls.n	80047ea <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80047d8:	4b4c      	ldr	r3, [pc, #304]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e1ac      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80047ea:	4b48      	ldr	r3, [pc, #288]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0e6      	beq.n	80047c6 <HAL_RCC_OscConfig+0x61a>
 80047f8:	e068      	b.n	80048cc <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80047fa:	4b44      	ldr	r3, [pc, #272]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004800:	4a42      	ldr	r2, [pc, #264]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 8004802:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004806:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800480a:	e011      	b.n	8004830 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480c:	f7fd fef8 	bl	8002600 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d908      	bls.n	8004830 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800481e:	4b3b      	ldr	r3, [pc, #236]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 8004820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004824:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e189      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004830:	4b36      	ldr	r3, [pc, #216]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004836:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e6      	bne.n	800480c <HAL_RCC_OscConfig+0x660>
 800483e:	e045      	b.n	80048cc <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fd fede 	bl	8002600 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004846:	e011      	b.n	800486c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004848:	f7fd feda 	bl	8002600 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d908      	bls.n	800486c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800485a:	4b2c      	ldr	r3, [pc, #176]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e16b      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800486c:	4b27      	ldr	r3, [pc, #156]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e6      	bne.n	8004848 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800487a:	4b24      	ldr	r3, [pc, #144]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004884:	2b00      	cmp	r3, #0
 8004886:	d021      	beq.n	80048cc <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004888:	4b20      	ldr	r3, [pc, #128]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488e:	4a1f      	ldr	r2, [pc, #124]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 8004890:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004898:	e011      	b.n	80048be <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fd feb1 	bl	8002600 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d908      	bls.n	80048be <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048ac:	4b17      	ldr	r3, [pc, #92]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e142      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048be:	4b13      	ldr	r3, [pc, #76]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e6      	bne.n	800489a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048cc:	7ffb      	ldrb	r3, [r7, #31]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d105      	bne.n	80048de <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d2:	4b0e      	ldr	r3, [pc, #56]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 80048d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d6:	4a0d      	ldr	r2, [pc, #52]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 80048d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d04f      	beq.n	800498a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d028      	beq.n	8004944 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048f2:	4b06      	ldr	r3, [pc, #24]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 80048f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048f8:	4a04      	ldr	r2, [pc, #16]	@ (800490c <HAL_RCC_OscConfig+0x760>)
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004902:	f7fd fe7d 	bl	8002600 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004908:	e014      	b.n	8004934 <HAL_RCC_OscConfig+0x788>
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000
 8004910:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004914:	f7fd fe74 	bl	8002600 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d908      	bls.n	8004934 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004922:	4b8a      	ldr	r3, [pc, #552]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004924:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e107      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004934:	4b85      	ldr	r3, [pc, #532]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004936:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0e8      	beq.n	8004914 <HAL_RCC_OscConfig+0x768>
 8004942:	e022      	b.n	800498a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004944:	4b81      	ldr	r3, [pc, #516]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004946:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800494a:	4a80      	ldr	r2, [pc, #512]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004954:	f7fd fe54 	bl	8002600 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800495a:	e00f      	b.n	800497c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800495c:	f7fd fe50 	bl	8002600 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d908      	bls.n	800497c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800496a:	4b78      	ldr	r3, [pc, #480]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 800496c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e0e3      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800497c:	4b73      	ldr	r3, [pc, #460]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 800497e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e8      	bne.n	800495c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 80d7 	beq.w	8004b42 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004994:	4b6d      	ldr	r3, [pc, #436]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b0c      	cmp	r3, #12
 800499e:	f000 8091 	beq.w	8004ac4 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d166      	bne.n	8004a78 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049aa:	4b68      	ldr	r3, [pc, #416]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a67      	ldr	r2, [pc, #412]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 80049b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b6:	f7fd fe23 	bl	8002600 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049bc:	e00e      	b.n	80049dc <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049be:	f7fd fe1f 	bl	8002600 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d907      	bls.n	80049dc <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049cc:	4b5f      	ldr	r3, [pc, #380]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e0b3      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049dc:	4b5b      	ldr	r3, [pc, #364]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1ea      	bne.n	80049be <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e8:	4b58      	ldr	r3, [pc, #352]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	4b58      	ldr	r3, [pc, #352]	@ (8004b50 <HAL_RCC_OscConfig+0x9a4>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049f8:	3a01      	subs	r2, #1
 80049fa:	0112      	lsls	r2, r2, #4
 80049fc:	4311      	orrs	r1, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a02:	0212      	lsls	r2, r2, #8
 8004a04:	4311      	orrs	r1, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a0a:	0852      	lsrs	r2, r2, #1
 8004a0c:	3a01      	subs	r2, #1
 8004a0e:	0552      	lsls	r2, r2, #21
 8004a10:	4311      	orrs	r1, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004a16:	0852      	lsrs	r2, r2, #1
 8004a18:	3a01      	subs	r2, #1
 8004a1a:	0652      	lsls	r2, r2, #25
 8004a1c:	4311      	orrs	r1, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a22:	06d2      	lsls	r2, r2, #27
 8004a24:	430a      	orrs	r2, r1
 8004a26:	4949      	ldr	r1, [pc, #292]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a2c:	4b47      	ldr	r3, [pc, #284]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a46      	ldr	r2, [pc, #280]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a38:	4b44      	ldr	r3, [pc, #272]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4a43      	ldr	r2, [pc, #268]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004a3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fd fddc 	bl	8002600 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4a:	e00e      	b.n	8004a6a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fd fdd8 	bl	8002600 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d907      	bls.n	8004a6a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a5a:	4b3c      	ldr	r3, [pc, #240]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e06c      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6a:	4b38      	ldr	r3, [pc, #224]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0ea      	beq.n	8004a4c <HAL_RCC_OscConfig+0x8a0>
 8004a76:	e064      	b.n	8004b42 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a78:	4b34      	ldr	r3, [pc, #208]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a33      	ldr	r2, [pc, #204]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7fd fdbc 	bl	8002600 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a8a:	e00e      	b.n	8004aaa <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8c:	f7fd fdb8 	bl	8002600 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d907      	bls.n	8004aaa <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a9a:	4b2c      	ldr	r3, [pc, #176]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e04c      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aaa:	4b28      	ldr	r3, [pc, #160]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1ea      	bne.n	8004a8c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ab6:	4b25      	ldr	r3, [pc, #148]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	4924      	ldr	r1, [pc, #144]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004abc:	4b25      	ldr	r3, [pc, #148]	@ (8004b54 <HAL_RCC_OscConfig+0x9a8>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	60cb      	str	r3, [r1, #12]
 8004ac2:	e03e      	b.n	8004b42 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e039      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8004b4c <HAL_RCC_OscConfig+0x9a0>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f003 0203 	and.w	r2, r3, #3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d12c      	bne.n	8004b3e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aee:	3b01      	subs	r3, #1
 8004af0:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d123      	bne.n	8004b3e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b00:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d11b      	bne.n	8004b3e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b10:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d113      	bne.n	8004b3e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	3b01      	subs	r3, #1
 8004b24:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d109      	bne.n	8004b3e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b34:	085b      	lsrs	r3, r3, #1
 8004b36:	3b01      	subs	r3, #1
 8004b38:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d001      	beq.n	8004b42 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	019f800c 	.word	0x019f800c
 8004b54:	feeefffc 	.word	0xfeeefffc

08004b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e11c      	b.n	8004daa <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b90      	ldr	r3, [pc, #576]	@ (8004db4 <HAL_RCC_ClockConfig+0x25c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d910      	bls.n	8004ba0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b8d      	ldr	r3, [pc, #564]	@ (8004db4 <HAL_RCC_ClockConfig+0x25c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 020f 	bic.w	r2, r3, #15
 8004b86:	498b      	ldr	r1, [pc, #556]	@ (8004db4 <HAL_RCC_ClockConfig+0x25c>)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8e:	4b89      	ldr	r3, [pc, #548]	@ (8004db4 <HAL_RCC_ClockConfig+0x25c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e104      	b.n	8004daa <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d010      	beq.n	8004bce <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	4b81      	ldr	r3, [pc, #516]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d908      	bls.n	8004bce <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bbc:	4b7e      	ldr	r3, [pc, #504]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	497b      	ldr	r1, [pc, #492]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8085 	beq.w	8004ce6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d11f      	bne.n	8004c24 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be4:	4b74      	ldr	r3, [pc, #464]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0da      	b.n	8004daa <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004bf4:	f000 fa24 	bl	8005040 <RCC_GetSysClockFreqFromPLLSource>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4a6f      	ldr	r2, [pc, #444]	@ (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d947      	bls.n	8004c92 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c02:	4b6d      	ldr	r3, [pc, #436]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d141      	bne.n	8004c92 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c0e:	4b6a      	ldr	r3, [pc, #424]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c16:	4a68      	ldr	r2, [pc, #416]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c1e:	2380      	movs	r3, #128	@ 0x80
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	e036      	b.n	8004c92 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d107      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c2c:	4b62      	ldr	r3, [pc, #392]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d115      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0b6      	b.n	8004daa <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d107      	bne.n	8004c54 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c44:	4b5c      	ldr	r3, [pc, #368]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d109      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0aa      	b.n	8004daa <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c54:	4b58      	ldr	r3, [pc, #352]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0a2      	b.n	8004daa <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c64:	f000 f8b0 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 8004c68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	4a53      	ldr	r2, [pc, #332]	@ (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d90f      	bls.n	8004c92 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c72:	4b51      	ldr	r3, [pc, #324]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c86:	4a4c      	ldr	r2, [pc, #304]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c8e:	2380      	movs	r3, #128	@ 0x80
 8004c90:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c92:	4b49      	ldr	r3, [pc, #292]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f023 0203 	bic.w	r2, r3, #3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4946      	ldr	r1, [pc, #280]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca4:	f7fd fcac 	bl	8002600 <HAL_GetTick>
 8004ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004caa:	e013      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cac:	f7fd fca8 	bl	8002600 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d90a      	bls.n	8004cd4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 020c 	and.w	r2, r3, #12
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e06a      	b.n	8004daa <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd4:	4b38      	ldr	r3, [pc, #224]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 020c 	and.w	r2, r3, #12
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d1e2      	bne.n	8004cac <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b80      	cmp	r3, #128	@ 0x80
 8004cea:	d105      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cec:	4b32      	ldr	r3, [pc, #200]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a31      	ldr	r2, [pc, #196]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004cf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cf6:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d010      	beq.n	8004d26 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	4b2b      	ldr	r3, [pc, #172]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d208      	bcs.n	8004d26 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d14:	4b28      	ldr	r3, [pc, #160]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	4925      	ldr	r1, [pc, #148]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d26:	4b23      	ldr	r3, [pc, #140]	@ (8004db4 <HAL_RCC_ClockConfig+0x25c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d210      	bcs.n	8004d56 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d34:	4b1f      	ldr	r3, [pc, #124]	@ (8004db4 <HAL_RCC_ClockConfig+0x25c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f023 020f 	bic.w	r2, r3, #15
 8004d3c:	491d      	ldr	r1, [pc, #116]	@ (8004db4 <HAL_RCC_ClockConfig+0x25c>)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d44:	4b1b      	ldr	r3, [pc, #108]	@ (8004db4 <HAL_RCC_ClockConfig+0x25c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d001      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e029      	b.n	8004daa <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d62:	4b15      	ldr	r3, [pc, #84]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	4912      	ldr	r1, [pc, #72]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d009      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d80:	4b0d      	ldr	r3, [pc, #52]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	490a      	ldr	r1, [pc, #40]	@ (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d94:	f000 f8b4 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	4a09      	ldr	r2, [pc, #36]	@ (8004dc0 <HAL_RCC_ClockConfig+0x268>)
 8004d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d9e:	4b09      	ldr	r3, [pc, #36]	@ (8004dc4 <HAL_RCC_ClockConfig+0x26c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fd fbdc 	bl	8002560 <HAL_InitTick>
 8004da8:	4603      	mov	r3, r0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40022000 	.word	0x40022000
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	04c4b400 	.word	0x04c4b400
 8004dc0:	20000004 	.word	0x20000004
 8004dc4:	20000008 	.word	0x20000008

08004dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b089      	sub	sp, #36	@ 0x24
 8004dcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dd6:	4b47      	ldr	r3, [pc, #284]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004de0:	4b44      	ldr	r3, [pc, #272]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <HAL_RCC_GetSysClockFreq+0x34>
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b0c      	cmp	r3, #12
 8004df4:	d121      	bne.n	8004e3a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d11e      	bne.n	8004e3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dfc:	4b3d      	ldr	r3, [pc, #244]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d107      	bne.n	8004e18 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e08:	4b3a      	ldr	r3, [pc, #232]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	e005      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e18:	4b36      	ldr	r3, [pc, #216]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004e24:	4a34      	ldr	r2, [pc, #208]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x130>)
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e2c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10d      	bne.n	8004e50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e38:	e00a      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d102      	bne.n	8004e46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e40:	4b2e      	ldr	r3, [pc, #184]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x134>)
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	e004      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d101      	bne.n	8004e50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x134>)
 8004e4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	2b0c      	cmp	r3, #12
 8004e54:	d146      	bne.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004e56:	4b27      	ldr	r3, [pc, #156]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e60:	4b24      	ldr	r3, [pc, #144]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	091b      	lsrs	r3, r3, #4
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d003      	beq.n	8004e7c <HAL_RCC_GetSysClockFreq+0xb4>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d00d      	beq.n	8004e96 <HAL_RCC_GetSysClockFreq+0xce>
 8004e7a:	e019      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x134>)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e84:	4a1b      	ldr	r2, [pc, #108]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e86:	68d2      	ldr	r2, [r2, #12]
 8004e88:	0a12      	lsrs	r2, r2, #8
 8004e8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e8e:	fb02 f303 	mul.w	r3, r2, r3
 8004e92:	617b      	str	r3, [r7, #20]
        break;
 8004e94:	e019      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e96:	4a19      	ldr	r2, [pc, #100]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x134>)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	4a15      	ldr	r2, [pc, #84]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ea0:	68d2      	ldr	r2, [r2, #12]
 8004ea2:	0a12      	lsrs	r2, r2, #8
 8004ea4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ea8:	fb02 f303 	mul.w	r3, r2, r3
 8004eac:	617b      	str	r3, [r7, #20]
        break;
 8004eae:	e00c      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004eba:	68d2      	ldr	r2, [r2, #12]
 8004ebc:	0a12      	lsrs	r2, r2, #8
 8004ebe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
 8004ec6:	617b      	str	r3, [r7, #20]
        break;
 8004ec8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004eca:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	0e5b      	lsrs	r3, r3, #25
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ee4:	69bb      	ldr	r3, [r7, #24]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3724      	adds	r7, #36	@ 0x24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	0800e928 	.word	0x0800e928
 8004efc:	00f42400 	.word	0x00f42400

08004f00 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004f04:	f7ff ff60 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <HAL_RCC_GetHCLKFreq+0x20>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	091b      	lsrs	r3, r3, #4
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	4903      	ldr	r1, [pc, #12]	@ (8004f24 <HAL_RCC_GetHCLKFreq+0x24>)
 8004f16:	5ccb      	ldrb	r3, [r1, r3]
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40021000 	.word	0x40021000
 8004f24:	0800e910 	.word	0x0800e910

08004f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f2c:	f7ff ffe8 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f30:	4602      	mov	r2, r0
 8004f32:	4b05      	ldr	r3, [pc, #20]	@ (8004f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	4903      	ldr	r1, [pc, #12]	@ (8004f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f3e:	5ccb      	ldrb	r3, [r1, r3]
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	0800e920 	.word	0x0800e920

08004f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f54:	f7ff ffd4 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	4b05      	ldr	r3, [pc, #20]	@ (8004f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	0adb      	lsrs	r3, r3, #11
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	4903      	ldr	r1, [pc, #12]	@ (8004f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f66:	5ccb      	ldrb	r3, [r1, r3]
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40021000 	.word	0x40021000
 8004f74:	0800e920 	.word	0x0800e920

08004f78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f84:	4b2c      	ldr	r3, [pc, #176]	@ (8005038 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f90:	f7ff f86e 	bl	8004070 <HAL_PWREx_GetVoltageRange>
 8004f94:	6138      	str	r0, [r7, #16]
 8004f96:	e014      	b.n	8004fc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f98:	4b27      	ldr	r3, [pc, #156]	@ (8005038 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9c:	4a26      	ldr	r2, [pc, #152]	@ (8005038 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fa4:	4b24      	ldr	r3, [pc, #144]	@ (8005038 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fb0:	f7ff f85e 	bl	8004070 <HAL_PWREx_GetVoltageRange>
 8004fb4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fb6:	4b20      	ldr	r3, [pc, #128]	@ (8005038 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fba:	4a1f      	ldr	r2, [pc, #124]	@ (8005038 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fce:	d10b      	bne.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b80      	cmp	r3, #128	@ 0x80
 8004fd4:	d919      	bls.n	800500a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2ba0      	cmp	r3, #160	@ 0xa0
 8004fda:	d902      	bls.n	8004fe2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fdc:	2302      	movs	r3, #2
 8004fde:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004fe0:	e013      	b.n	800500a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004fe6:	e010      	b.n	800500a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b80      	cmp	r3, #128	@ 0x80
 8004fec:	d902      	bls.n	8004ff4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fee:	2303      	movs	r3, #3
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	e00a      	b.n	800500a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b80      	cmp	r3, #128	@ 0x80
 8004ff8:	d102      	bne.n	8005000 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	e004      	b.n	800500a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b70      	cmp	r3, #112	@ 0x70
 8005004:	d101      	bne.n	800500a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005006:	2301      	movs	r3, #1
 8005008:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800500a:	4b0c      	ldr	r3, [pc, #48]	@ (800503c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f023 020f 	bic.w	r2, r3, #15
 8005012:	490a      	ldr	r1, [pc, #40]	@ (800503c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800501a:	4b08      	ldr	r3, [pc, #32]	@ (800503c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	429a      	cmp	r2, r3
 8005026:	d001      	beq.n	800502c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40021000 	.word	0x40021000
 800503c:	40022000 	.word	0x40022000

08005040 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005046:	4b31      	ldr	r3, [pc, #196]	@ (800510c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005050:	4b2e      	ldr	r3, [pc, #184]	@ (800510c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	3301      	adds	r3, #1
 800505c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b03      	cmp	r3, #3
 8005062:	d015      	beq.n	8005090 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b03      	cmp	r3, #3
 8005068:	d839      	bhi.n	80050de <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d01c      	beq.n	80050aa <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d133      	bne.n	80050de <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005076:	4a26      	ldr	r2, [pc, #152]	@ (8005110 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	fbb2 f3f3 	udiv	r3, r2, r3
 800507e:	4a23      	ldr	r2, [pc, #140]	@ (800510c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005080:	68d2      	ldr	r2, [r2, #12]
 8005082:	0a12      	lsrs	r2, r2, #8
 8005084:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005088:	fb02 f303 	mul.w	r3, r2, r3
 800508c:	613b      	str	r3, [r7, #16]
      break;
 800508e:	e029      	b.n	80050e4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005090:	4a1f      	ldr	r2, [pc, #124]	@ (8005110 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	fbb2 f3f3 	udiv	r3, r2, r3
 8005098:	4a1c      	ldr	r2, [pc, #112]	@ (800510c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800509a:	68d2      	ldr	r2, [r2, #12]
 800509c:	0a12      	lsrs	r2, r2, #8
 800509e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	613b      	str	r3, [r7, #16]
      break;
 80050a8:	e01c      	b.n	80050e4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050aa:	4b18      	ldr	r3, [pc, #96]	@ (800510c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d107      	bne.n	80050c6 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050b6:	4b15      	ldr	r3, [pc, #84]	@ (800510c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80050b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050bc:	0a1b      	lsrs	r3, r3, #8
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	e005      	b.n	80050d2 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050c6:	4b11      	ldr	r3, [pc, #68]	@ (800510c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	091b      	lsrs	r3, r3, #4
 80050cc:	f003 030f 	and.w	r3, r3, #15
 80050d0:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80050d2:	4a10      	ldr	r2, [pc, #64]	@ (8005114 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050da:	613b      	str	r3, [r7, #16]
        break;
 80050dc:	e002      	b.n	80050e4 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	613b      	str	r3, [r7, #16]
      break;
 80050e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80050e4:	4b09      	ldr	r3, [pc, #36]	@ (800510c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	0e5b      	lsrs	r3, r3, #25
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	3301      	adds	r3, #1
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80050fe:	683b      	ldr	r3, [r7, #0]
}
 8005100:	4618      	mov	r0, r3
 8005102:	371c      	adds	r7, #28
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	40021000 	.word	0x40021000
 8005110:	00f42400 	.word	0x00f42400
 8005114:	0800e928 	.word	0x0800e928

08005118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005120:	2300      	movs	r3, #0
 8005122:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005124:	2300      	movs	r3, #0
 8005126:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005130:	2b00      	cmp	r3, #0
 8005132:	d040      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005138:	2b80      	cmp	r3, #128	@ 0x80
 800513a:	d02a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800513c:	2b80      	cmp	r3, #128	@ 0x80
 800513e:	d825      	bhi.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005140:	2b60      	cmp	r3, #96	@ 0x60
 8005142:	d026      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005144:	2b60      	cmp	r3, #96	@ 0x60
 8005146:	d821      	bhi.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005148:	2b40      	cmp	r3, #64	@ 0x40
 800514a:	d006      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800514c:	2b40      	cmp	r3, #64	@ 0x40
 800514e:	d81d      	bhi.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d009      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005154:	2b20      	cmp	r3, #32
 8005156:	d010      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005158:	e018      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800515a:	4b8f      	ldr	r3, [pc, #572]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	4a8e      	ldr	r2, [pc, #568]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005164:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005166:	e015      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3304      	adds	r3, #4
 800516c:	2100      	movs	r1, #0
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fb56 	bl	8005820 <RCCEx_PLLSAI1_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005178:	e00c      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3320      	adds	r3, #32
 800517e:	2100      	movs	r1, #0
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fc33 	bl	80059ec <RCCEx_PLLSAI2_Config>
 8005186:	4603      	mov	r3, r0
 8005188:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800518a:	e003      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	77fb      	strb	r3, [r7, #31]
        break;
 8005190:	e000      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8005192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005194:	7ffb      	ldrb	r3, [r7, #31]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10b      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800519a:	4b7f      	ldr	r3, [pc, #508]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800519c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051a0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051a8:	497b      	ldr	r1, [pc, #492]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80051b0:	e001      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b2:	7ffb      	ldrb	r3, [r7, #31]
 80051b4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d047      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ca:	d030      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d0:	d82a      	bhi.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051d6:	d02a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051dc:	d824      	bhi.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051e2:	d008      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80051e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051e8:	d81e      	bhi.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80051ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051f2:	d010      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80051f4:	e018      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051f6:	4b68      	ldr	r3, [pc, #416]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	4a67      	ldr	r2, [pc, #412]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005200:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005202:	e015      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3304      	adds	r3, #4
 8005208:	2100      	movs	r1, #0
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fb08 	bl	8005820 <RCCEx_PLLSAI1_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005214:	e00c      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3320      	adds	r3, #32
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fbe5 	bl	80059ec <RCCEx_PLLSAI2_Config>
 8005222:	4603      	mov	r3, r0
 8005224:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005226:	e003      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	77fb      	strb	r3, [r7, #31]
        break;
 800522c:	e000      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800522e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005230:	7ffb      	ldrb	r3, [r7, #31]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005236:	4b58      	ldr	r3, [pc, #352]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005238:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800523c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005244:	4954      	ldr	r1, [pc, #336]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800524c:	e001      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524e:	7ffb      	ldrb	r3, [r7, #31]
 8005250:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 80ab 	beq.w	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005260:	2300      	movs	r3, #0
 8005262:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005264:	4b4c      	ldr	r3, [pc, #304]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10d      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005270:	4b49      	ldr	r3, [pc, #292]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005274:	4a48      	ldr	r2, [pc, #288]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800527a:	6593      	str	r3, [r2, #88]	@ 0x58
 800527c:	4b46      	ldr	r3, [pc, #280]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800527e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005288:	2301      	movs	r3, #1
 800528a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800528c:	4b43      	ldr	r3, [pc, #268]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a42      	ldr	r2, [pc, #264]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005296:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005298:	f7fd f9b2 	bl	8002600 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800529e:	e00f      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a0:	f7fd f9ae 	bl	8002600 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d908      	bls.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ae:	4b3b      	ldr	r3, [pc, #236]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80052be:	e006      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052c0:	4b36      	ldr	r3, [pc, #216]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0e9      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80052cc:	e000      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80052ce:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80052d0:	7ffb      	ldrb	r3, [r7, #31]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d164      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052d6:	4b30      	ldr	r3, [pc, #192]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052e0:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01f      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d019      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052f4:	4b28      	ldr	r3, [pc, #160]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052fe:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005300:	4b25      	ldr	r3, [pc, #148]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005306:	4a24      	ldr	r2, [pc, #144]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800530c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005310:	4b21      	ldr	r3, [pc, #132]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005316:	4a20      	ldr	r2, [pc, #128]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005318:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800531c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005320:	4a1d      	ldr	r2, [pc, #116]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d01f      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005332:	f7fd f965 	bl	8002600 <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005338:	e012      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533a:	f7fd f961 	bl	8002600 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005348:	4293      	cmp	r3, r2
 800534a:	d909      	bls.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800534c:	4b12      	ldr	r3, [pc, #72]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800535e:	e007      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005360:	4b0d      	ldr	r3, [pc, #52]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0e5      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800536e:	e000      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005370:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005372:	7ffb      	ldrb	r3, [r7, #31]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10c      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005378:	4b07      	ldr	r3, [pc, #28]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800537a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800537e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005388:	4903      	ldr	r1, [pc, #12]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005390:	e008      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005392:	7ffb      	ldrb	r3, [r7, #31]
 8005394:	77bb      	strb	r3, [r7, #30]
 8005396:	e005      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005398:	40021000 	.word	0x40021000
 800539c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a0:	7ffb      	ldrb	r3, [r7, #31]
 80053a2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d105      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053aa:	4b9c      	ldr	r3, [pc, #624]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ae:	4a9b      	ldr	r2, [pc, #620]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053c2:	4b96      	ldr	r3, [pc, #600]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c8:	f023 0203 	bic.w	r2, r3, #3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d0:	4992      	ldr	r1, [pc, #584]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053e4:	4b8d      	ldr	r3, [pc, #564]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ea:	f023 020c 	bic.w	r2, r3, #12
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f2:	498a      	ldr	r1, [pc, #552]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005406:	4b85      	ldr	r3, [pc, #532]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005414:	4981      	ldr	r1, [pc, #516]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005428:	4b7c      	ldr	r3, [pc, #496]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005436:	4979      	ldr	r1, [pc, #484]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0310 	and.w	r3, r3, #16
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800544a:	4b74      	ldr	r3, [pc, #464]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005450:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005458:	4970      	ldr	r1, [pc, #448]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800546c:	4b6b      	ldr	r3, [pc, #428]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005472:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800547a:	4968      	ldr	r1, [pc, #416]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800548e:	4b63      	ldr	r3, [pc, #396]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005494:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800549c:	495f      	ldr	r1, [pc, #380]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054b0:	4b5a      	ldr	r3, [pc, #360]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054be:	4957      	ldr	r1, [pc, #348]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80054d2:	4b52      	ldr	r3, [pc, #328]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054e0:	494e      	ldr	r1, [pc, #312]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d031      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054fc:	d00e      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x404>
 80054fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005502:	d814      	bhi.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d015      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005508:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800550c:	d10f      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800550e:	4b43      	ldr	r3, [pc, #268]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	4a42      	ldr	r2, [pc, #264]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005518:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800551a:	e00c      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	2100      	movs	r1, #0
 8005522:	4618      	mov	r0, r3
 8005524:	f000 f97c 	bl	8005820 <RCCEx_PLLSAI1_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800552c:	e003      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	77fb      	strb	r3, [r7, #31]
        break;
 8005532:	e000      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005536:	7ffb      	ldrb	r3, [r7, #31]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10b      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800553c:	4b37      	ldr	r3, [pc, #220]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005542:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800554a:	4934      	ldr	r1, [pc, #208]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005552:	e001      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005554:	7ffb      	ldrb	r3, [r7, #31]
 8005556:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005564:	4b2d      	ldr	r3, [pc, #180]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005572:	492a      	ldr	r1, [pc, #168]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005586:	4b25      	ldr	r3, [pc, #148]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005594:	4921      	ldr	r1, [pc, #132]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055a8:	4b1c      	ldr	r3, [pc, #112]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b6:	4919      	ldr	r1, [pc, #100]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055ca:	4b14      	ldr	r3, [pc, #80]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055d0:	f023 0203 	bic.w	r2, r3, #3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d8:	4910      	ldr	r1, [pc, #64]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d02b      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055ec:	4b0b      	ldr	r3, [pc, #44]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055fa:	4908      	ldr	r1, [pc, #32]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800560a:	d109      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800560c:	4b03      	ldr	r3, [pc, #12]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	4a02      	ldr	r2, [pc, #8]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005612:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005616:	60d3      	str	r3, [r2, #12]
 8005618:	e014      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800561a:	bf00      	nop
 800561c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005624:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005628:	d10c      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3304      	adds	r3, #4
 800562e:	2101      	movs	r1, #1
 8005630:	4618      	mov	r0, r3
 8005632:	f000 f8f5 	bl	8005820 <RCCEx_PLLSAI1_Config>
 8005636:	4603      	mov	r3, r0
 8005638:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800563a:	7ffb      	ldrb	r3, [r7, #31]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8005640:	7ffb      	ldrb	r3, [r7, #31]
 8005642:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d04a      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005654:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005658:	d108      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x554>
 800565a:	4b70      	ldr	r3, [pc, #448]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800565c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005660:	4a6e      	ldr	r2, [pc, #440]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005662:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005666:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800566a:	e012      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800566c:	4b6b      	ldr	r3, [pc, #428]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005672:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800567a:	4968      	ldr	r1, [pc, #416]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005682:	4b66      	ldr	r3, [pc, #408]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005684:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005688:	4a64      	ldr	r2, [pc, #400]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800568a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800568e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005696:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800569a:	d10d      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3304      	adds	r3, #4
 80056a0:	2101      	movs	r1, #1
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f8bc 	bl	8005820 <RCCEx_PLLSAI1_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80056ac:	7ffb      	ldrb	r3, [r7, #31]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d019      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80056b2:	7ffb      	ldrb	r3, [r7, #31]
 80056b4:	77bb      	strb	r3, [r7, #30]
 80056b6:	e016      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056c0:	d106      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c2:	4b56      	ldr	r3, [pc, #344]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	4a55      	ldr	r2, [pc, #340]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056cc:	60d3      	str	r3, [r2, #12]
 80056ce:	e00a      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056d8:	d105      	bne.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056da:	4b50      	ldr	r3, [pc, #320]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	4a4f      	ldr	r2, [pc, #316]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056e4:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d028      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056f2:	4b4a      	ldr	r3, [pc, #296]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005700:	4946      	ldr	r1, [pc, #280]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800570c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005710:	d106      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005712:	4b42      	ldr	r3, [pc, #264]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	4a41      	ldr	r2, [pc, #260]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005718:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800571c:	60d3      	str	r3, [r2, #12]
 800571e:	e011      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005724:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005728:	d10c      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3304      	adds	r3, #4
 800572e:	2101      	movs	r1, #1
 8005730:	4618      	mov	r0, r3
 8005732:	f000 f875 	bl	8005820 <RCCEx_PLLSAI1_Config>
 8005736:	4603      	mov	r3, r0
 8005738:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800573a:	7ffb      	ldrb	r3, [r7, #31]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005740:	7ffb      	ldrb	r3, [r7, #31]
 8005742:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01e      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005750:	4b32      	ldr	r3, [pc, #200]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005756:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005760:	492e      	ldr	r1, [pc, #184]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005762:	4313      	orrs	r3, r2
 8005764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800576e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005772:	d10c      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3304      	adds	r3, #4
 8005778:	2102      	movs	r1, #2
 800577a:	4618      	mov	r0, r3
 800577c:	f000 f850 	bl	8005820 <RCCEx_PLLSAI1_Config>
 8005780:	4603      	mov	r3, r0
 8005782:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005784:	7ffb      	ldrb	r3, [r7, #31]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800578a:	7ffb      	ldrb	r3, [r7, #31]
 800578c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00b      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800579a:	4b20      	ldr	r3, [pc, #128]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800579c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057a0:	f023 0204 	bic.w	r2, r3, #4
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057aa:	491c      	ldr	r1, [pc, #112]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80057be:	4b17      	ldr	r3, [pc, #92]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057c4:	f023 0218 	bic.w	r2, r3, #24
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ce:	4913      	ldr	r1, [pc, #76]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d017      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80057e2:	4b0e      	ldr	r3, [pc, #56]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057f2:	490a      	ldr	r1, [pc, #40]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005800:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005804:	d105      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005806:	4b05      	ldr	r3, [pc, #20]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	4a04      	ldr	r2, [pc, #16]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800580c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005810:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005812:	7fbb      	ldrb	r3, [r7, #30]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3720      	adds	r7, #32
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000

08005820 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d018      	beq.n	8005868 <RCCEx_PLLSAI1_Config+0x48>
 8005836:	2b03      	cmp	r3, #3
 8005838:	d81f      	bhi.n	800587a <RCCEx_PLLSAI1_Config+0x5a>
 800583a:	2b01      	cmp	r3, #1
 800583c:	d002      	beq.n	8005844 <RCCEx_PLLSAI1_Config+0x24>
 800583e:	2b02      	cmp	r3, #2
 8005840:	d009      	beq.n	8005856 <RCCEx_PLLSAI1_Config+0x36>
 8005842:	e01a      	b.n	800587a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005844:	4b65      	ldr	r3, [pc, #404]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d117      	bne.n	8005880 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005854:	e014      	b.n	8005880 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005856:	4b61      	ldr	r3, [pc, #388]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800585e:	2b00      	cmp	r3, #0
 8005860:	d110      	bne.n	8005884 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005866:	e00d      	b.n	8005884 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005868:	4b5c      	ldr	r3, [pc, #368]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d109      	bne.n	8005888 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005878:	e006      	b.n	8005888 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	73fb      	strb	r3, [r7, #15]
      break;
 800587e:	e004      	b.n	800588a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005880:	bf00      	nop
 8005882:	e002      	b.n	800588a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005884:	bf00      	nop
 8005886:	e000      	b.n	800588a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005888:	bf00      	nop
  }

  if (status == HAL_OK)
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f040 809f 	bne.w	80059d0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005892:	4b52      	ldr	r3, [pc, #328]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a51      	ldr	r2, [pc, #324]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005898:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800589c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800589e:	f7fc feaf 	bl	8002600 <HAL_GetTick>
 80058a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058a4:	e00f      	b.n	80058c6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058a6:	f7fc feab 	bl	8002600 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d908      	bls.n	80058c6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058b4:	4b49      	ldr	r3, [pc, #292]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d009      	beq.n	80058d4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058c4:	e006      	b.n	80058d4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058c6:	4b45      	ldr	r3, [pc, #276]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e9      	bne.n	80058a6 <RCCEx_PLLSAI1_Config+0x86>
 80058d2:	e000      	b.n	80058d6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80058d4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d179      	bne.n	80059d0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d116      	bne.n	8005910 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058e2:	4b3e      	ldr	r3, [pc, #248]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	4b3e      	ldr	r3, [pc, #248]	@ (80059e0 <RCCEx_PLLSAI1_Config+0x1c0>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6892      	ldr	r2, [r2, #8]
 80058ee:	0211      	lsls	r1, r2, #8
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	68d2      	ldr	r2, [r2, #12]
 80058f4:	06d2      	lsls	r2, r2, #27
 80058f6:	4311      	orrs	r1, r2
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6852      	ldr	r2, [r2, #4]
 80058fc:	3a01      	subs	r2, #1
 80058fe:	0112      	lsls	r2, r2, #4
 8005900:	4311      	orrs	r1, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	4934      	ldr	r1, [pc, #208]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 800590a:	4313      	orrs	r3, r2
 800590c:	610b      	str	r3, [r1, #16]
 800590e:	e033      	b.n	8005978 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d118      	bne.n	8005948 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005916:	4b31      	ldr	r3, [pc, #196]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	4b32      	ldr	r3, [pc, #200]	@ (80059e4 <RCCEx_PLLSAI1_Config+0x1c4>)
 800591c:	4013      	ands	r3, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6892      	ldr	r2, [r2, #8]
 8005922:	0211      	lsls	r1, r2, #8
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6912      	ldr	r2, [r2, #16]
 8005928:	0852      	lsrs	r2, r2, #1
 800592a:	3a01      	subs	r2, #1
 800592c:	0552      	lsls	r2, r2, #21
 800592e:	4311      	orrs	r1, r2
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6852      	ldr	r2, [r2, #4]
 8005934:	3a01      	subs	r2, #1
 8005936:	0112      	lsls	r2, r2, #4
 8005938:	4311      	orrs	r1, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	4926      	ldr	r1, [pc, #152]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005942:	4313      	orrs	r3, r2
 8005944:	610b      	str	r3, [r1, #16]
 8005946:	e017      	b.n	8005978 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005948:	4b24      	ldr	r3, [pc, #144]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	4b26      	ldr	r3, [pc, #152]	@ (80059e8 <RCCEx_PLLSAI1_Config+0x1c8>)
 800594e:	4013      	ands	r3, r2
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6892      	ldr	r2, [r2, #8]
 8005954:	0211      	lsls	r1, r2, #8
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6952      	ldr	r2, [r2, #20]
 800595a:	0852      	lsrs	r2, r2, #1
 800595c:	3a01      	subs	r2, #1
 800595e:	0652      	lsls	r2, r2, #25
 8005960:	4311      	orrs	r1, r2
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6852      	ldr	r2, [r2, #4]
 8005966:	3a01      	subs	r2, #1
 8005968:	0112      	lsls	r2, r2, #4
 800596a:	4311      	orrs	r1, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	491a      	ldr	r1, [pc, #104]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005974:	4313      	orrs	r3, r2
 8005976:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005978:	4b18      	ldr	r3, [pc, #96]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a17      	ldr	r2, [pc, #92]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 800597e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005982:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005984:	f7fc fe3c 	bl	8002600 <HAL_GetTick>
 8005988:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800598a:	e00f      	b.n	80059ac <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800598c:	f7fc fe38 	bl	8002600 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d908      	bls.n	80059ac <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800599a:	4b10      	ldr	r3, [pc, #64]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80059aa:	e006      	b.n	80059ba <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059ac:	4b0b      	ldr	r3, [pc, #44]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0e9      	beq.n	800598c <RCCEx_PLLSAI1_Config+0x16c>
 80059b8:	e000      	b.n	80059bc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80059ba:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d106      	bne.n	80059d0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80059c2:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	4904      	ldr	r1, [pc, #16]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1bc>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40021000 	.word	0x40021000
 80059e0:	07ff800c 	.word	0x07ff800c
 80059e4:	ff9f800c 	.word	0xff9f800c
 80059e8:	f9ff800c 	.word	0xf9ff800c

080059ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d018      	beq.n	8005a34 <RCCEx_PLLSAI2_Config+0x48>
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d81f      	bhi.n	8005a46 <RCCEx_PLLSAI2_Config+0x5a>
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d002      	beq.n	8005a10 <RCCEx_PLLSAI2_Config+0x24>
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d009      	beq.n	8005a22 <RCCEx_PLLSAI2_Config+0x36>
 8005a0e:	e01a      	b.n	8005a46 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a10:	4b4a      	ldr	r3, [pc, #296]	@ (8005b3c <RCCEx_PLLSAI2_Config+0x150>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d117      	bne.n	8005a4c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a20:	e014      	b.n	8005a4c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a22:	4b46      	ldr	r3, [pc, #280]	@ (8005b3c <RCCEx_PLLSAI2_Config+0x150>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d110      	bne.n	8005a50 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a32:	e00d      	b.n	8005a50 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005a34:	4b41      	ldr	r3, [pc, #260]	@ (8005b3c <RCCEx_PLLSAI2_Config+0x150>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d109      	bne.n	8005a54 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a44:	e006      	b.n	8005a54 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	73fb      	strb	r3, [r7, #15]
      break;
 8005a4a:	e004      	b.n	8005a56 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005a4c:	bf00      	nop
 8005a4e:	e002      	b.n	8005a56 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005a50:	bf00      	nop
 8005a52:	e000      	b.n	8005a56 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005a54:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d169      	bne.n	8005b30 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a5c:	4b37      	ldr	r3, [pc, #220]	@ (8005b3c <RCCEx_PLLSAI2_Config+0x150>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a36      	ldr	r2, [pc, #216]	@ (8005b3c <RCCEx_PLLSAI2_Config+0x150>)
 8005a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a68:	f7fc fdca 	bl	8002600 <HAL_GetTick>
 8005a6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a6e:	e00f      	b.n	8005a90 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a70:	f7fc fdc6 	bl	8002600 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d908      	bls.n	8005a90 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8005b3c <RCCEx_PLLSAI2_Config+0x150>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a8e:	e006      	b.n	8005a9e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a90:	4b2a      	ldr	r3, [pc, #168]	@ (8005b3c <RCCEx_PLLSAI2_Config+0x150>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e9      	bne.n	8005a70 <RCCEx_PLLSAI2_Config+0x84>
 8005a9c:	e000      	b.n	8005aa0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005a9e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d144      	bne.n	8005b30 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d115      	bne.n	8005ad8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005aac:	4b23      	ldr	r3, [pc, #140]	@ (8005b3c <RCCEx_PLLSAI2_Config+0x150>)
 8005aae:	695a      	ldr	r2, [r3, #20]
 8005ab0:	4b23      	ldr	r3, [pc, #140]	@ (8005b40 <RCCEx_PLLSAI2_Config+0x154>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6892      	ldr	r2, [r2, #8]
 8005ab8:	0211      	lsls	r1, r2, #8
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	68d2      	ldr	r2, [r2, #12]
 8005abe:	06d2      	lsls	r2, r2, #27
 8005ac0:	4311      	orrs	r1, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6852      	ldr	r2, [r2, #4]
 8005ac6:	3a01      	subs	r2, #1
 8005ac8:	0112      	lsls	r2, r2, #4
 8005aca:	4311      	orrs	r1, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	491a      	ldr	r1, [pc, #104]	@ (8005b3c <RCCEx_PLLSAI2_Config+0x150>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ad8:	4b18      	ldr	r3, [pc, #96]	@ (8005b3c <RCCEx_PLLSAI2_Config+0x150>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a17      	ldr	r2, [pc, #92]	@ (8005b3c <RCCEx_PLLSAI2_Config+0x150>)
 8005ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ae2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae4:	f7fc fd8c 	bl	8002600 <HAL_GetTick>
 8005ae8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005aea:	e00f      	b.n	8005b0c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005aec:	f7fc fd88 	bl	8002600 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d908      	bls.n	8005b0c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005afa:	4b10      	ldr	r3, [pc, #64]	@ (8005b3c <RCCEx_PLLSAI2_Config+0x150>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d109      	bne.n	8005b1a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005b0a:	e006      	b.n	8005b1a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b3c <RCCEx_PLLSAI2_Config+0x150>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0e9      	beq.n	8005aec <RCCEx_PLLSAI2_Config+0x100>
 8005b18:	e000      	b.n	8005b1c <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005b1a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005b22:	4b06      	ldr	r3, [pc, #24]	@ (8005b3c <RCCEx_PLLSAI2_Config+0x150>)
 8005b24:	695a      	ldr	r2, [r3, #20]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	4904      	ldr	r1, [pc, #16]	@ (8005b3c <RCCEx_PLLSAI2_Config+0x150>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	07ff800c 	.word	0x07ff800c

08005b44 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d066      	beq.n	8005c24 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7fc f9d8 	bl	8001f20 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	2b10      	cmp	r3, #16
 8005b84:	d045      	beq.n	8005c12 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b86:	4b2a      	ldr	r3, [pc, #168]	@ (8005c30 <HAL_RTC_Init+0xec>)
 8005b88:	22ca      	movs	r2, #202	@ 0xca
 8005b8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b8c:	4b28      	ldr	r3, [pc, #160]	@ (8005c30 <HAL_RTC_Init+0xec>)
 8005b8e:	2253      	movs	r2, #83	@ 0x53
 8005b90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fa38 	bl	8006008 <RTC_EnterInitMode>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d121      	bne.n	8005be6 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005ba2:	4b23      	ldr	r3, [pc, #140]	@ (8005c30 <HAL_RTC_Init+0xec>)
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	4a22      	ldr	r2, [pc, #136]	@ (8005c30 <HAL_RTC_Init+0xec>)
 8005ba8:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8005bac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8005c30 <HAL_RTC_Init+0xec>)
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6859      	ldr	r1, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	4319      	orrs	r1, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	491a      	ldr	r1, [pc, #104]	@ (8005c30 <HAL_RTC_Init+0xec>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	041b      	lsls	r3, r3, #16
 8005bd6:	4916      	ldr	r1, [pc, #88]	@ (8005c30 <HAL_RTC_Init+0xec>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fa47 	bl	8006070 <RTC_ExitInitMode>
 8005be2:	4603      	mov	r3, r0
 8005be4:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10e      	bne.n	8005c0a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8005bec:	4b10      	ldr	r3, [pc, #64]	@ (8005c30 <HAL_RTC_Init+0xec>)
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a19      	ldr	r1, [r3, #32]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	4319      	orrs	r1, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	430b      	orrs	r3, r1
 8005c04:	490a      	ldr	r1, [pc, #40]	@ (8005c30 <HAL_RTC_Init+0xec>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c0a:	4b09      	ldr	r3, [pc, #36]	@ (8005c30 <HAL_RTC_Init+0xec>)
 8005c0c:	22ff      	movs	r2, #255	@ 0xff
 8005c0e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c10:	e001      	b.n	8005c16 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d103      	bne.n	8005c24 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40002800 	.word	0x40002800

08005c34 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d101      	bne.n	8005c4e <HAL_RTC_SetTime+0x1a>
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	e081      	b.n	8005d52 <HAL_RTC_SetTime+0x11e>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2202      	movs	r2, #2
 8005c5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d5c <HAL_RTC_SetTime+0x128>)
 8005c60:	22ca      	movs	r2, #202	@ 0xca
 8005c62:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c64:	4b3d      	ldr	r3, [pc, #244]	@ (8005d5c <HAL_RTC_SetTime+0x128>)
 8005c66:	2253      	movs	r2, #83	@ 0x53
 8005c68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 f9cc 	bl	8006008 <RTC_EnterInitMode>
 8005c70:	4603      	mov	r3, r0
 8005c72:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005c74:	7cfb      	ldrb	r3, [r7, #19]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d15c      	bne.n	8005d34 <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d125      	bne.n	8005ccc <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005c80:	4b36      	ldr	r3, [pc, #216]	@ (8005d5c <HAL_RTC_SetTime+0x128>)
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fa28 	bl	80060ec <RTC_ByteToBcd2>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	785b      	ldrb	r3, [r3, #1]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fa21 	bl	80060ec <RTC_ByteToBcd2>
 8005caa:	4603      	mov	r3, r0
 8005cac:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005cae:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	789b      	ldrb	r3, [r3, #2]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fa19 	bl	80060ec <RTC_ByteToBcd2>
 8005cba:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005cbc:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	78db      	ldrb	r3, [r3, #3]
 8005cc4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	e017      	b.n	8005cfc <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005ccc:	4b23      	ldr	r3, [pc, #140]	@ (8005d5c <HAL_RTC_SetTime+0x128>)
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d102      	bne.n	8005cde <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	785b      	ldrb	r3, [r3, #1]
 8005ce8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005cea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005cf0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	78db      	ldrb	r3, [r3, #3]
 8005cf6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8005cfc:	4a17      	ldr	r2, [pc, #92]	@ (8005d5c <HAL_RTC_SetTime+0x128>)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005d04:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005d08:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8005d0a:	4b14      	ldr	r3, [pc, #80]	@ (8005d5c <HAL_RTC_SetTime+0x128>)
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	4a13      	ldr	r2, [pc, #76]	@ (8005d5c <HAL_RTC_SetTime+0x128>)
 8005d10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d14:	6193      	str	r3, [r2, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8005d16:	4b11      	ldr	r3, [pc, #68]	@ (8005d5c <HAL_RTC_SetTime+0x128>)
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	68d9      	ldr	r1, [r3, #12]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	430b      	orrs	r3, r1
 8005d24:	490d      	ldr	r1, [pc, #52]	@ (8005d5c <HAL_RTC_SetTime+0x128>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f9a0 	bl	8006070 <RTC_ExitInitMode>
 8005d30:	4603      	mov	r3, r0
 8005d32:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d34:	4b09      	ldr	r3, [pc, #36]	@ (8005d5c <HAL_RTC_SetTime+0x128>)
 8005d36:	22ff      	movs	r2, #255	@ 0xff
 8005d38:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005d3a:	7cfb      	ldrb	r3, [r7, #19]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d103      	bne.n	8005d48 <HAL_RTC_SetTime+0x114>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005d50:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd90      	pop	{r4, r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40002800 	.word	0x40002800

08005d60 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8005d6c:	4b29      	ldr	r3, [pc, #164]	@ (8005e14 <HAL_RTC_GetTime+0xb4>)
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8005d74:	4b27      	ldr	r3, [pc, #156]	@ (8005e14 <HAL_RTC_GetTime+0xb4>)
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8005d80:	4b24      	ldr	r3, [pc, #144]	@ (8005e14 <HAL_RTC_GetTime+0xb4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005d88:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	0c1b      	lsrs	r3, r3, #16
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	0a1b      	lsrs	r3, r3, #8
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	0d9b      	lsrs	r3, r3, #22
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d11a      	bne.n	8005e08 <HAL_RTC_GetTime+0xa8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 f9a8 	bl	800612c <RTC_Bcd2ToByte>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	461a      	mov	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 f99f 	bl	800612c <RTC_Bcd2ToByte>
 8005dee:	4603      	mov	r3, r0
 8005df0:	461a      	mov	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	789b      	ldrb	r3, [r3, #2]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 f996 	bl	800612c <RTC_Bcd2ToByte>
 8005e00:	4603      	mov	r3, r0
 8005e02:	461a      	mov	r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	40002800 	.word	0x40002800

08005e18 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e18:	b590      	push	{r4, r7, lr}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_RTC_SetDate+0x1a>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e071      	b.n	8005f16 <HAL_RTC_SetDate+0xfe>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10e      	bne.n	8005e66 <HAL_RTC_SetDate+0x4e>
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	785b      	ldrb	r3, [r3, #1]
 8005e4c:	f003 0310 	and.w	r3, r3, #16
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	f023 0310 	bic.w	r3, r3, #16
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	330a      	adds	r3, #10
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d11c      	bne.n	8005ea6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	78db      	ldrb	r3, [r3, #3]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 f93b 	bl	80060ec <RTC_ByteToBcd2>
 8005e76:	4603      	mov	r3, r0
 8005e78:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	785b      	ldrb	r3, [r3, #1]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 f934 	bl	80060ec <RTC_ByteToBcd2>
 8005e84:	4603      	mov	r3, r0
 8005e86:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005e88:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	789b      	ldrb	r3, [r3, #2]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f92c 	bl	80060ec <RTC_ByteToBcd2>
 8005e94:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e96:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	e00e      	b.n	8005ec4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	78db      	ldrb	r3, [r3, #3]
 8005eaa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005eb2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005eb8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ec4:	4b16      	ldr	r3, [pc, #88]	@ (8005f20 <HAL_RTC_SetDate+0x108>)
 8005ec6:	22ca      	movs	r2, #202	@ 0xca
 8005ec8:	625a      	str	r2, [r3, #36]	@ 0x24
 8005eca:	4b15      	ldr	r3, [pc, #84]	@ (8005f20 <HAL_RTC_SetDate+0x108>)
 8005ecc:	2253      	movs	r2, #83	@ 0x53
 8005ece:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f899 	bl	8006008 <RTC_EnterInitMode>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005eda:	7cfb      	ldrb	r3, [r7, #19]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10b      	bne.n	8005ef8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8005ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8005f20 <HAL_RTC_SetDate+0x108>)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005ee8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005eec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 f8be 	bl	8006070 <RTC_ExitInitMode>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef8:	4b09      	ldr	r3, [pc, #36]	@ (8005f20 <HAL_RTC_SetDate+0x108>)
 8005efa:	22ff      	movs	r2, #255	@ 0xff
 8005efc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005efe:	7cfb      	ldrb	r3, [r7, #19]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d103      	bne.n	8005f0c <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005f14:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd90      	pop	{r4, r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40002800 	.word	0x40002800

08005f24 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8005f30:	4b22      	ldr	r3, [pc, #136]	@ (8005fbc <HAL_RTC_GetDate+0x98>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005f38:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	0c1b      	lsrs	r3, r3, #16
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	0a1b      	lsrs	r3, r3, #8
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	f003 031f 	and.w	r3, r3, #31
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	0b5b      	lsrs	r3, r3, #13
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d11a      	bne.n	8005fb2 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	78db      	ldrb	r3, [r3, #3]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 f8d3 	bl	800612c <RTC_Bcd2ToByte>
 8005f86:	4603      	mov	r3, r0
 8005f88:	461a      	mov	r2, r3
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 f8ca 	bl	800612c <RTC_Bcd2ToByte>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	789b      	ldrb	r3, [r3, #2]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 f8c1 	bl	800612c <RTC_Bcd2ToByte>
 8005faa:	4603      	mov	r3, r0
 8005fac:	461a      	mov	r2, r3
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40002800 	.word	0x40002800

08005fc0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8005fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8006000 <HAL_RTC_WaitForSynchro+0x40>)
 8005fca:	4a0e      	ldr	r2, [pc, #56]	@ (8006004 <HAL_RTC_WaitForSynchro+0x44>)
 8005fcc:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005fce:	f7fc fb17 	bl	8002600 <HAL_GetTick>
 8005fd2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005fd4:	e009      	b.n	8005fea <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fd6:	f7fc fb13 	bl	8002600 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fe4:	d901      	bls.n	8005fea <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e006      	b.n	8005ff8 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005fea:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <HAL_RTC_WaitForSynchro+0x40>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0ef      	beq.n	8005fd6 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40002800 	.word	0x40002800
 8006004:	0001005c 	.word	0x0001005c

08006008 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006014:	4b15      	ldr	r3, [pc, #84]	@ (800606c <RTC_EnterInitMode+0x64>)
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d120      	bne.n	8006062 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006020:	4b12      	ldr	r3, [pc, #72]	@ (800606c <RTC_EnterInitMode+0x64>)
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	4a11      	ldr	r2, [pc, #68]	@ (800606c <RTC_EnterInitMode+0x64>)
 8006026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800602a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800602c:	f7fc fae8 	bl	8002600 <HAL_GetTick>
 8006030:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006032:	e00d      	b.n	8006050 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006034:	f7fc fae4 	bl	8002600 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006042:	d905      	bls.n	8006050 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2203      	movs	r2, #3
 800604c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006050:	4b06      	ldr	r3, [pc, #24]	@ (800606c <RTC_EnterInitMode+0x64>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d102      	bne.n	8006062 <RTC_EnterInitMode+0x5a>
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b03      	cmp	r3, #3
 8006060:	d1e8      	bne.n	8006034 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006062:	7bfb      	ldrb	r3, [r7, #15]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40002800 	.word	0x40002800

08006070 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800607c:	4b1a      	ldr	r3, [pc, #104]	@ (80060e8 <RTC_ExitInitMode+0x78>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	4a19      	ldr	r2, [pc, #100]	@ (80060e8 <RTC_ExitInitMode+0x78>)
 8006082:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006086:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006088:	4b17      	ldr	r3, [pc, #92]	@ (80060e8 <RTC_ExitInitMode+0x78>)
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10c      	bne.n	80060ae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff ff93 	bl	8005fc0 <HAL_RTC_WaitForSynchro>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01e      	beq.n	80060de <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2203      	movs	r2, #3
 80060a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	73fb      	strb	r3, [r7, #15]
 80060ac:	e017      	b.n	80060de <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80060ae:	4b0e      	ldr	r3, [pc, #56]	@ (80060e8 <RTC_ExitInitMode+0x78>)
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	4a0d      	ldr	r2, [pc, #52]	@ (80060e8 <RTC_ExitInitMode+0x78>)
 80060b4:	f023 0320 	bic.w	r3, r3, #32
 80060b8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff ff80 	bl	8005fc0 <HAL_RTC_WaitForSynchro>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2203      	movs	r2, #3
 80060ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80060d2:	4b05      	ldr	r3, [pc, #20]	@ (80060e8 <RTC_ExitInitMode+0x78>)
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	4a04      	ldr	r2, [pc, #16]	@ (80060e8 <RTC_ExitInitMode+0x78>)
 80060d8:	f043 0320 	orr.w	r3, r3, #32
 80060dc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40002800 	.word	0x40002800

080060ec <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80060fe:	e005      	b.n	800610c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3301      	adds	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006106:	7afb      	ldrb	r3, [r7, #11]
 8006108:	3b0a      	subs	r3, #10
 800610a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800610c:	7afb      	ldrb	r3, [r7, #11]
 800610e:	2b09      	cmp	r3, #9
 8006110:	d8f6      	bhi.n	8006100 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	b2db      	uxtb	r3, r3
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	b2da      	uxtb	r2, r3
 800611a:	7afb      	ldrb	r3, [r7, #11]
 800611c:	4313      	orrs	r3, r2
 800611e:	b2db      	uxtb	r3, r3
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8006136:	79fb      	ldrb	r3, [r7, #7]
 8006138:	091b      	lsrs	r3, r3, #4
 800613a:	b2db      	uxtb	r3, r3
 800613c:	461a      	mov	r2, r3
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	b2da      	uxtb	r2, r3
 800614c:	79fb      	ldrb	r3, [r7, #7]
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	b2db      	uxtb	r3, r3
 8006154:	4413      	add	r3, r2
 8006156:	b2db      	uxtb	r3, r3
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006170:	4b07      	ldr	r3, [pc, #28]	@ (8006190 <HAL_RTCEx_BKUPWrite+0x2c>)
 8006172:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4413      	add	r3, r2
 800617c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	601a      	str	r2, [r3, #0]
}
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	40003500 	.word	0x40003500

08006194 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800619e:	4b07      	ldr	r3, [pc, #28]	@ (80061bc <HAL_RTCEx_BKUPRead+0x28>)
 80061a0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4413      	add	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	40003500 	.word	0x40003500

080061c0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	490f      	ldr	r1, [pc, #60]	@ (8006210 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	490c      	ldr	r1, [pc, #48]	@ (8006214 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80061e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006214 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6919      	ldr	r1, [r3, #16]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	041b      	lsls	r3, r3, #16
 80061f8:	430b      	orrs	r3, r1
 80061fa:	4906      	ldr	r1, [pc, #24]	@ (8006214 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40002800 	.word	0x40002800
 8006214:	40003400 	.word	0x40003400

08006218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d020      	beq.n	800627c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01b      	beq.n	800627c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0202 	mvn.w	r2, #2
 800624c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f8f3 	bl	800644e <HAL_TIM_IC_CaptureCallback>
 8006268:	e005      	b.n	8006276 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f8e5 	bl	800643a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f8f6 	bl	8006462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	d020      	beq.n	80062c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01b      	beq.n	80062c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0204 	mvn.w	r2, #4
 8006298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f8cd 	bl	800644e <HAL_TIM_IC_CaptureCallback>
 80062b4:	e005      	b.n	80062c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f8bf 	bl	800643a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f8d0 	bl	8006462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d020      	beq.n	8006314 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01b      	beq.n	8006314 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0208 	mvn.w	r2, #8
 80062e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2204      	movs	r2, #4
 80062ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f8a7 	bl	800644e <HAL_TIM_IC_CaptureCallback>
 8006300:	e005      	b.n	800630e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f899 	bl	800643a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f8aa 	bl	8006462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f003 0310 	and.w	r3, r3, #16
 800631a:	2b00      	cmp	r3, #0
 800631c:	d020      	beq.n	8006360 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01b      	beq.n	8006360 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0210 	mvn.w	r2, #16
 8006330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2208      	movs	r2, #8
 8006336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f881 	bl	800644e <HAL_TIM_IC_CaptureCallback>
 800634c:	e005      	b.n	800635a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f873 	bl	800643a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f884 	bl	8006462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00c      	beq.n	8006384 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d007      	beq.n	8006384 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0201 	mvn.w	r2, #1
 800637c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f851 	bl	8006426 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800638a:	2b00      	cmp	r3, #0
 800638c:	d104      	bne.n	8006398 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00c      	beq.n	80063b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80063aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f876 	bl	800649e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00c      	beq.n	80063d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d007      	beq.n	80063d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80063ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f86e 	bl	80064b2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00c      	beq.n	80063fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f83e 	bl	8006476 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f003 0320 	and.w	r3, r3, #32
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00c      	beq.n	800641e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f003 0320 	and.w	r3, r3, #32
 800640a:	2b00      	cmp	r3, #0
 800640c:	d007      	beq.n	800641e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f06f 0220 	mvn.w	r2, #32
 8006416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f836 	bl	800648a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800641e:	bf00      	nop
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b082      	sub	sp, #8
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e042      	b.n	800655e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fb ff8e 	bl	800240c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2224      	movs	r2, #36	@ 0x24
 80064f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0201 	bic.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f001 f81f 	bl	8007554 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fd1c 	bl	8006f54 <UART_SetConfig>
 800651c:	4603      	mov	r3, r0
 800651e:	2b01      	cmp	r3, #1
 8006520:	d101      	bne.n	8006526 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e01b      	b.n	800655e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006534:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006544:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0201 	orr.w	r2, r2, #1
 8006554:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 f89e 	bl	8007698 <UART_CheckIdleState>
 800655c:	4603      	mov	r3, r0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b08a      	sub	sp, #40	@ 0x28
 800656a:	af02      	add	r7, sp, #8
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	603b      	str	r3, [r7, #0]
 8006572:	4613      	mov	r3, r2
 8006574:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657c:	2b20      	cmp	r3, #32
 800657e:	d17b      	bne.n	8006678 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <HAL_UART_Transmit+0x26>
 8006586:	88fb      	ldrh	r3, [r7, #6]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e074      	b.n	800667a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2221      	movs	r2, #33	@ 0x21
 800659c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065a0:	f7fc f82e 	bl	8002600 <HAL_GetTick>
 80065a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	88fa      	ldrh	r2, [r7, #6]
 80065aa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	88fa      	ldrh	r2, [r7, #6]
 80065b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065be:	d108      	bne.n	80065d2 <HAL_UART_Transmit+0x6c>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d104      	bne.n	80065d2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	61bb      	str	r3, [r7, #24]
 80065d0:	e003      	b.n	80065da <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065da:	e030      	b.n	800663e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2200      	movs	r2, #0
 80065e4:	2180      	movs	r1, #128	@ 0x80
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f001 f900 	bl	80077ec <UART_WaitOnFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d005      	beq.n	80065fe <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e03d      	b.n	800667a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10b      	bne.n	800661c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006612:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	3302      	adds	r3, #2
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	e007      	b.n	800662c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	781a      	ldrb	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	3301      	adds	r3, #1
 800662a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006632:	b29b      	uxth	r3, r3
 8006634:	3b01      	subs	r3, #1
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1c8      	bne.n	80065dc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2200      	movs	r2, #0
 8006652:	2140      	movs	r1, #64	@ 0x40
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f001 f8c9 	bl	80077ec <UART_WaitOnFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e006      	b.n	800667a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2220      	movs	r2, #32
 8006670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	e000      	b.n	800667a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006678:	2302      	movs	r3, #2
  }
}
 800667a:	4618      	mov	r0, r3
 800667c:	3720      	adds	r7, #32
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08a      	sub	sp, #40	@ 0x28
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	4613      	mov	r3, r2
 8006690:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006698:	2b20      	cmp	r3, #32
 800669a:	d137      	bne.n	800670c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <HAL_UART_Receive_IT+0x24>
 80066a2:	88fb      	ldrh	r3, [r7, #6]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e030      	b.n	800670e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a18      	ldr	r2, [pc, #96]	@ (8006718 <HAL_UART_Receive_IT+0x94>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d01f      	beq.n	80066fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d018      	beq.n	80066fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	e853 3f00 	ldrex	r3, [r3]
 80066d6:	613b      	str	r3, [r7, #16]
   return(result);
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80066de:	627b      	str	r3, [r7, #36]	@ 0x24
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	623b      	str	r3, [r7, #32]
 80066ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	69f9      	ldr	r1, [r7, #28]
 80066ee:	6a3a      	ldr	r2, [r7, #32]
 80066f0:	e841 2300 	strex	r3, r2, [r1]
 80066f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e6      	bne.n	80066ca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066fc:	88fb      	ldrh	r3, [r7, #6]
 80066fe:	461a      	mov	r2, r3
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f001 f8e0 	bl	80078c8 <UART_Start_Receive_IT>
 8006708:	4603      	mov	r3, r0
 800670a:	e000      	b.n	800670e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800670c:	2302      	movs	r3, #2
  }
}
 800670e:	4618      	mov	r0, r3
 8006710:	3728      	adds	r7, #40	@ 0x28
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	40008000 	.word	0x40008000

0800671c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b09a      	sub	sp, #104	@ 0x68
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006738:	667b      	str	r3, [r7, #100]	@ 0x64
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006742:	657b      	str	r3, [r7, #84]	@ 0x54
 8006744:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006748:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e6      	bne.n	8006724 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3308      	adds	r3, #8
 800675c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800676c:	f023 0301 	bic.w	r3, r3, #1
 8006770:	663b      	str	r3, [r7, #96]	@ 0x60
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3308      	adds	r3, #8
 8006778:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800677a:	643a      	str	r2, [r7, #64]	@ 0x40
 800677c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006780:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e3      	bne.n	8006756 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006792:	2b01      	cmp	r3, #1
 8006794:	d118      	bne.n	80067c8 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	e853 3f00 	ldrex	r3, [r3]
 80067a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f023 0310 	bic.w	r3, r3, #16
 80067aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067b6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067bc:	e841 2300 	strex	r3, r2, [r1]
 80067c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e6      	bne.n	8006796 <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d2:	2b40      	cmp	r3, #64	@ 0x40
 80067d4:	d154      	bne.n	8006880 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3308      	adds	r3, #8
 80067dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3308      	adds	r3, #8
 80067f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067f6:	61ba      	str	r2, [r7, #24]
 80067f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6979      	ldr	r1, [r7, #20]
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	613b      	str	r3, [r7, #16]
   return(result);
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e5      	bne.n	80067d6 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006810:	2b00      	cmp	r3, #0
 8006812:	d017      	beq.n	8006844 <HAL_UART_AbortReceive_IT+0x128>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800681a:	4a26      	ldr	r2, [pc, #152]	@ (80068b4 <HAL_UART_AbortReceive_IT+0x198>)
 800681c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006824:	4618      	mov	r0, r3
 8006826:	f7fd f826 	bl	8003876 <HAL_DMA_Abort_IT>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d03c      	beq.n	80068aa <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800683e:	4610      	mov	r0, r2
 8006840:	4798      	blx	r3
 8006842:	e032      	b.n	80068aa <HAL_UART_AbortReceive_IT+0x18e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	220f      	movs	r2, #15
 8006858:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699a      	ldr	r2, [r3, #24]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f042 0208 	orr.w	r2, r2, #8
 8006868:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fb55 	bl	8006f28 <HAL_UART_AbortReceiveCpltCallback>
 800687e:	e014      	b.n	80068aa <HAL_UART_AbortReceive_IT+0x18e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	220f      	movs	r2, #15
 8006894:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2220      	movs	r2, #32
 800689a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fb3f 	bl	8006f28 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3768      	adds	r7, #104	@ 0x68
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	08007c05 	.word	0x08007c05

080068b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b0ba      	sub	sp, #232	@ 0xe8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80068e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80068e6:	4013      	ands	r3, r2
 80068e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80068ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d11b      	bne.n	800692c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d015      	beq.n	800692c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b00      	cmp	r3, #0
 800690a:	d105      	bne.n	8006918 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800690c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d009      	beq.n	800692c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 82e3 	beq.w	8006ee8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
      }
      return;
 800692a:	e2dd      	b.n	8006ee8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800692c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 8123 	beq.w	8006b7c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006936:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800693a:	4b8d      	ldr	r3, [pc, #564]	@ (8006b70 <HAL_UART_IRQHandler+0x2b8>)
 800693c:	4013      	ands	r3, r2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006942:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006946:	4b8b      	ldr	r3, [pc, #556]	@ (8006b74 <HAL_UART_IRQHandler+0x2bc>)
 8006948:	4013      	ands	r3, r2
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 8116 	beq.w	8006b7c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d011      	beq.n	8006980 <HAL_UART_IRQHandler+0xc8>
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2201      	movs	r2, #1
 800696e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006976:	f043 0201 	orr.w	r2, r3, #1
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d011      	beq.n	80069b0 <HAL_UART_IRQHandler+0xf8>
 800698c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00b      	beq.n	80069b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2202      	movs	r2, #2
 800699e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a6:	f043 0204 	orr.w	r2, r3, #4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b4:	f003 0304 	and.w	r3, r3, #4
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d011      	beq.n	80069e0 <HAL_UART_IRQHandler+0x128>
 80069bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00b      	beq.n	80069e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2204      	movs	r2, #4
 80069ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d6:	f043 0202 	orr.w	r2, r3, #2
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069e4:	f003 0308 	and.w	r3, r3, #8
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d017      	beq.n	8006a1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069f0:	f003 0320 	and.w	r3, r3, #32
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d105      	bne.n	8006a04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80069f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80069fc:	4b5c      	ldr	r3, [pc, #368]	@ (8006b70 <HAL_UART_IRQHandler+0x2b8>)
 80069fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00b      	beq.n	8006a1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2208      	movs	r2, #8
 8006a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a12:	f043 0208 	orr.w	r2, r3, #8
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d012      	beq.n	8006a4e <HAL_UART_IRQHandler+0x196>
 8006a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00c      	beq.n	8006a4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a44:	f043 0220 	orr.w	r2, r3, #32
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 8249 	beq.w	8006eec <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d013      	beq.n	8006a8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d105      	bne.n	8006a7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d007      	beq.n	8006a8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa2:	2b40      	cmp	r3, #64	@ 0x40
 8006aa4:	d005      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006aaa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d054      	beq.n	8006b5c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 f82a 	bl	8007b0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac2:	2b40      	cmp	r3, #64	@ 0x40
 8006ac4:	d146      	bne.n	8006b54 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3308      	adds	r3, #8
 8006acc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3308      	adds	r3, #8
 8006aee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006af2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006af6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006afe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1d9      	bne.n	8006ac6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d017      	beq.n	8006b4c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b22:	4a15      	ldr	r2, [pc, #84]	@ (8006b78 <HAL_UART_IRQHandler+0x2c0>)
 8006b24:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fc fea2 	bl	8003876 <HAL_DMA_Abort_IT>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d019      	beq.n	8006b6c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006b46:	4610      	mov	r0, r2
 8006b48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b4a:	e00f      	b.n	8006b6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f9e1 	bl	8006f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b52:	e00b      	b.n	8006b6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f9dd 	bl	8006f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b5a:	e007      	b.n	8006b6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f9d9 	bl	8006f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006b6a:	e1bf      	b.n	8006eec <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b6c:	bf00      	nop
    return;
 8006b6e:	e1bd      	b.n	8006eec <HAL_UART_IRQHandler+0x634>
 8006b70:	10000001 	.word	0x10000001
 8006b74:	04000120 	.word	0x04000120
 8006b78:	08007bd9 	.word	0x08007bd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	f040 8153 	bne.w	8006e2c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b8a:	f003 0310 	and.w	r3, r3, #16
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 814c 	beq.w	8006e2c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b98:	f003 0310 	and.w	r3, r3, #16
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 8145 	beq.w	8006e2c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2210      	movs	r2, #16
 8006ba8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bb4:	2b40      	cmp	r3, #64	@ 0x40
 8006bb6:	f040 80bb 	bne.w	8006d30 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 818f 	beq.w	8006ef0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	f080 8187 	bcs.w	8006ef0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006be8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f040 8087 	bne.w	8006d0e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c2e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1da      	bne.n	8006c00 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3308      	adds	r3, #8
 8006c50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c5c:	f023 0301 	bic.w	r3, r3, #1
 8006c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3308      	adds	r3, #8
 8006c6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e1      	bne.n	8006c4a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006caa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006cac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006cb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e3      	bne.n	8006c86 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cdc:	f023 0310 	bic.w	r3, r3, #16
 8006ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cf0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e4      	bne.n	8006ccc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fc fd58 	bl	80037be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2202      	movs	r2, #2
 8006d12:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f907 	bl	8006f3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d2e:	e0df      	b.n	8006ef0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 80d1 	beq.w	8006ef4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006d52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f000 80cc 	beq.w	8006ef4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d80:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e4      	bne.n	8006d5c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3308      	adds	r3, #8
 8006d98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	623b      	str	r3, [r7, #32]
   return(result);
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006da8:	f023 0301 	bic.w	r3, r3, #1
 8006dac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3308      	adds	r3, #8
 8006db6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006dba:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e1      	bne.n	8006d92 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	e853 3f00 	ldrex	r3, [r3]
 8006dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0310 	bic.w	r3, r3, #16
 8006df6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e04:	61fb      	str	r3, [r7, #28]
 8006e06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	69b9      	ldr	r1, [r7, #24]
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	617b      	str	r3, [r7, #20]
   return(result);
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e4      	bne.n	8006de2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f889 	bl	8006f3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e2a:	e063      	b.n	8006ef4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00e      	beq.n	8006e56 <HAL_UART_IRQHandler+0x59e>
 8006e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d008      	beq.n	8006e56 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 fc44 	bl	80086dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e54:	e051      	b.n	8006efa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d014      	beq.n	8006e8c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d105      	bne.n	8006e7a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d008      	beq.n	8006e8c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d03a      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	4798      	blx	r3
    }
    return;
 8006e8a:	e035      	b.n	8006ef8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d009      	beq.n	8006eac <HAL_UART_IRQHandler+0x5f4>
 8006e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fed2 	bl	8007c4e <UART_EndTransmit_IT>
    return;
 8006eaa:	e026      	b.n	8006efa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d009      	beq.n	8006ecc <HAL_UART_IRQHandler+0x614>
 8006eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ebc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 fc1d 	bl	8008704 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006eca:	e016      	b.n	8006efa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d010      	beq.n	8006efa <HAL_UART_IRQHandler+0x642>
 8006ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	da0c      	bge.n	8006efa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 fc05 	bl	80086f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ee6:	e008      	b.n	8006efa <HAL_UART_IRQHandler+0x642>
      return;
 8006ee8:	bf00      	nop
 8006eea:	e006      	b.n	8006efa <HAL_UART_IRQHandler+0x642>
    return;
 8006eec:	bf00      	nop
 8006eee:	e004      	b.n	8006efa <HAL_UART_IRQHandler+0x642>
      return;
 8006ef0:	bf00      	nop
 8006ef2:	e002      	b.n	8006efa <HAL_UART_IRQHandler+0x642>
      return;
 8006ef4:	bf00      	nop
 8006ef6:	e000      	b.n	8006efa <HAL_UART_IRQHandler+0x642>
    return;
 8006ef8:	bf00      	nop
  }
}
 8006efa:	37e8      	adds	r7, #232	@ 0xe8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f58:	b08c      	sub	sp, #48	@ 0x30
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	431a      	orrs	r2, r3
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	4baa      	ldr	r3, [pc, #680]	@ (800722c <UART_SetConfig+0x2d8>)
 8006f84:	4013      	ands	r3, r2
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	6812      	ldr	r2, [r2, #0]
 8006f8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a9f      	ldr	r2, [pc, #636]	@ (8007230 <UART_SetConfig+0x2dc>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006fca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	6812      	ldr	r2, [r2, #0]
 8006fd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fde:	f023 010f 	bic.w	r1, r3, #15
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a90      	ldr	r2, [pc, #576]	@ (8007234 <UART_SetConfig+0x2e0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d125      	bne.n	8007044 <UART_SetConfig+0xf0>
 8006ff8:	4b8f      	ldr	r3, [pc, #572]	@ (8007238 <UART_SetConfig+0x2e4>)
 8006ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffe:	f003 0303 	and.w	r3, r3, #3
 8007002:	2b03      	cmp	r3, #3
 8007004:	d81a      	bhi.n	800703c <UART_SetConfig+0xe8>
 8007006:	a201      	add	r2, pc, #4	@ (adr r2, 800700c <UART_SetConfig+0xb8>)
 8007008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700c:	0800701d 	.word	0x0800701d
 8007010:	0800702d 	.word	0x0800702d
 8007014:	08007025 	.word	0x08007025
 8007018:	08007035 	.word	0x08007035
 800701c:	2301      	movs	r3, #1
 800701e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007022:	e116      	b.n	8007252 <UART_SetConfig+0x2fe>
 8007024:	2302      	movs	r3, #2
 8007026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800702a:	e112      	b.n	8007252 <UART_SetConfig+0x2fe>
 800702c:	2304      	movs	r3, #4
 800702e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007032:	e10e      	b.n	8007252 <UART_SetConfig+0x2fe>
 8007034:	2308      	movs	r3, #8
 8007036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800703a:	e10a      	b.n	8007252 <UART_SetConfig+0x2fe>
 800703c:	2310      	movs	r3, #16
 800703e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007042:	e106      	b.n	8007252 <UART_SetConfig+0x2fe>
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a7c      	ldr	r2, [pc, #496]	@ (800723c <UART_SetConfig+0x2e8>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d138      	bne.n	80070c0 <UART_SetConfig+0x16c>
 800704e:	4b7a      	ldr	r3, [pc, #488]	@ (8007238 <UART_SetConfig+0x2e4>)
 8007050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007054:	f003 030c 	and.w	r3, r3, #12
 8007058:	2b0c      	cmp	r3, #12
 800705a:	d82d      	bhi.n	80070b8 <UART_SetConfig+0x164>
 800705c:	a201      	add	r2, pc, #4	@ (adr r2, 8007064 <UART_SetConfig+0x110>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	08007099 	.word	0x08007099
 8007068:	080070b9 	.word	0x080070b9
 800706c:	080070b9 	.word	0x080070b9
 8007070:	080070b9 	.word	0x080070b9
 8007074:	080070a9 	.word	0x080070a9
 8007078:	080070b9 	.word	0x080070b9
 800707c:	080070b9 	.word	0x080070b9
 8007080:	080070b9 	.word	0x080070b9
 8007084:	080070a1 	.word	0x080070a1
 8007088:	080070b9 	.word	0x080070b9
 800708c:	080070b9 	.word	0x080070b9
 8007090:	080070b9 	.word	0x080070b9
 8007094:	080070b1 	.word	0x080070b1
 8007098:	2300      	movs	r3, #0
 800709a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800709e:	e0d8      	b.n	8007252 <UART_SetConfig+0x2fe>
 80070a0:	2302      	movs	r3, #2
 80070a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a6:	e0d4      	b.n	8007252 <UART_SetConfig+0x2fe>
 80070a8:	2304      	movs	r3, #4
 80070aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ae:	e0d0      	b.n	8007252 <UART_SetConfig+0x2fe>
 80070b0:	2308      	movs	r3, #8
 80070b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b6:	e0cc      	b.n	8007252 <UART_SetConfig+0x2fe>
 80070b8:	2310      	movs	r3, #16
 80070ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070be:	e0c8      	b.n	8007252 <UART_SetConfig+0x2fe>
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a5e      	ldr	r2, [pc, #376]	@ (8007240 <UART_SetConfig+0x2ec>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d125      	bne.n	8007116 <UART_SetConfig+0x1c2>
 80070ca:	4b5b      	ldr	r3, [pc, #364]	@ (8007238 <UART_SetConfig+0x2e4>)
 80070cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80070d4:	2b30      	cmp	r3, #48	@ 0x30
 80070d6:	d016      	beq.n	8007106 <UART_SetConfig+0x1b2>
 80070d8:	2b30      	cmp	r3, #48	@ 0x30
 80070da:	d818      	bhi.n	800710e <UART_SetConfig+0x1ba>
 80070dc:	2b20      	cmp	r3, #32
 80070de:	d00a      	beq.n	80070f6 <UART_SetConfig+0x1a2>
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d814      	bhi.n	800710e <UART_SetConfig+0x1ba>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <UART_SetConfig+0x19a>
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	d008      	beq.n	80070fe <UART_SetConfig+0x1aa>
 80070ec:	e00f      	b.n	800710e <UART_SetConfig+0x1ba>
 80070ee:	2300      	movs	r3, #0
 80070f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070f4:	e0ad      	b.n	8007252 <UART_SetConfig+0x2fe>
 80070f6:	2302      	movs	r3, #2
 80070f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070fc:	e0a9      	b.n	8007252 <UART_SetConfig+0x2fe>
 80070fe:	2304      	movs	r3, #4
 8007100:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007104:	e0a5      	b.n	8007252 <UART_SetConfig+0x2fe>
 8007106:	2308      	movs	r3, #8
 8007108:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800710c:	e0a1      	b.n	8007252 <UART_SetConfig+0x2fe>
 800710e:	2310      	movs	r3, #16
 8007110:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007114:	e09d      	b.n	8007252 <UART_SetConfig+0x2fe>
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a4a      	ldr	r2, [pc, #296]	@ (8007244 <UART_SetConfig+0x2f0>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d125      	bne.n	800716c <UART_SetConfig+0x218>
 8007120:	4b45      	ldr	r3, [pc, #276]	@ (8007238 <UART_SetConfig+0x2e4>)
 8007122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007126:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800712a:	2bc0      	cmp	r3, #192	@ 0xc0
 800712c:	d016      	beq.n	800715c <UART_SetConfig+0x208>
 800712e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007130:	d818      	bhi.n	8007164 <UART_SetConfig+0x210>
 8007132:	2b80      	cmp	r3, #128	@ 0x80
 8007134:	d00a      	beq.n	800714c <UART_SetConfig+0x1f8>
 8007136:	2b80      	cmp	r3, #128	@ 0x80
 8007138:	d814      	bhi.n	8007164 <UART_SetConfig+0x210>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <UART_SetConfig+0x1f0>
 800713e:	2b40      	cmp	r3, #64	@ 0x40
 8007140:	d008      	beq.n	8007154 <UART_SetConfig+0x200>
 8007142:	e00f      	b.n	8007164 <UART_SetConfig+0x210>
 8007144:	2300      	movs	r3, #0
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800714a:	e082      	b.n	8007252 <UART_SetConfig+0x2fe>
 800714c:	2302      	movs	r3, #2
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007152:	e07e      	b.n	8007252 <UART_SetConfig+0x2fe>
 8007154:	2304      	movs	r3, #4
 8007156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800715a:	e07a      	b.n	8007252 <UART_SetConfig+0x2fe>
 800715c:	2308      	movs	r3, #8
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007162:	e076      	b.n	8007252 <UART_SetConfig+0x2fe>
 8007164:	2310      	movs	r3, #16
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800716a:	e072      	b.n	8007252 <UART_SetConfig+0x2fe>
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a35      	ldr	r2, [pc, #212]	@ (8007248 <UART_SetConfig+0x2f4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d12a      	bne.n	80071cc <UART_SetConfig+0x278>
 8007176:	4b30      	ldr	r3, [pc, #192]	@ (8007238 <UART_SetConfig+0x2e4>)
 8007178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007180:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007184:	d01a      	beq.n	80071bc <UART_SetConfig+0x268>
 8007186:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800718a:	d81b      	bhi.n	80071c4 <UART_SetConfig+0x270>
 800718c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007190:	d00c      	beq.n	80071ac <UART_SetConfig+0x258>
 8007192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007196:	d815      	bhi.n	80071c4 <UART_SetConfig+0x270>
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <UART_SetConfig+0x250>
 800719c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071a0:	d008      	beq.n	80071b4 <UART_SetConfig+0x260>
 80071a2:	e00f      	b.n	80071c4 <UART_SetConfig+0x270>
 80071a4:	2300      	movs	r3, #0
 80071a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071aa:	e052      	b.n	8007252 <UART_SetConfig+0x2fe>
 80071ac:	2302      	movs	r3, #2
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071b2:	e04e      	b.n	8007252 <UART_SetConfig+0x2fe>
 80071b4:	2304      	movs	r3, #4
 80071b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ba:	e04a      	b.n	8007252 <UART_SetConfig+0x2fe>
 80071bc:	2308      	movs	r3, #8
 80071be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071c2:	e046      	b.n	8007252 <UART_SetConfig+0x2fe>
 80071c4:	2310      	movs	r3, #16
 80071c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ca:	e042      	b.n	8007252 <UART_SetConfig+0x2fe>
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a17      	ldr	r2, [pc, #92]	@ (8007230 <UART_SetConfig+0x2dc>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d13a      	bne.n	800724c <UART_SetConfig+0x2f8>
 80071d6:	4b18      	ldr	r3, [pc, #96]	@ (8007238 <UART_SetConfig+0x2e4>)
 80071d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80071e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071e4:	d01a      	beq.n	800721c <UART_SetConfig+0x2c8>
 80071e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071ea:	d81b      	bhi.n	8007224 <UART_SetConfig+0x2d0>
 80071ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071f0:	d00c      	beq.n	800720c <UART_SetConfig+0x2b8>
 80071f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071f6:	d815      	bhi.n	8007224 <UART_SetConfig+0x2d0>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <UART_SetConfig+0x2b0>
 80071fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007200:	d008      	beq.n	8007214 <UART_SetConfig+0x2c0>
 8007202:	e00f      	b.n	8007224 <UART_SetConfig+0x2d0>
 8007204:	2300      	movs	r3, #0
 8007206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800720a:	e022      	b.n	8007252 <UART_SetConfig+0x2fe>
 800720c:	2302      	movs	r3, #2
 800720e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007212:	e01e      	b.n	8007252 <UART_SetConfig+0x2fe>
 8007214:	2304      	movs	r3, #4
 8007216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800721a:	e01a      	b.n	8007252 <UART_SetConfig+0x2fe>
 800721c:	2308      	movs	r3, #8
 800721e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007222:	e016      	b.n	8007252 <UART_SetConfig+0x2fe>
 8007224:	2310      	movs	r3, #16
 8007226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800722a:	e012      	b.n	8007252 <UART_SetConfig+0x2fe>
 800722c:	cfff69f3 	.word	0xcfff69f3
 8007230:	40008000 	.word	0x40008000
 8007234:	40013800 	.word	0x40013800
 8007238:	40021000 	.word	0x40021000
 800723c:	40004400 	.word	0x40004400
 8007240:	40004800 	.word	0x40004800
 8007244:	40004c00 	.word	0x40004c00
 8007248:	40005000 	.word	0x40005000
 800724c:	2310      	movs	r3, #16
 800724e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4ab0      	ldr	r2, [pc, #704]	@ (8007518 <UART_SetConfig+0x5c4>)
 8007258:	4293      	cmp	r3, r2
 800725a:	f040 809b 	bne.w	8007394 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800725e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007262:	2b08      	cmp	r3, #8
 8007264:	d827      	bhi.n	80072b6 <UART_SetConfig+0x362>
 8007266:	a201      	add	r2, pc, #4	@ (adr r2, 800726c <UART_SetConfig+0x318>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	08007291 	.word	0x08007291
 8007270:	08007299 	.word	0x08007299
 8007274:	080072a1 	.word	0x080072a1
 8007278:	080072b7 	.word	0x080072b7
 800727c:	080072a7 	.word	0x080072a7
 8007280:	080072b7 	.word	0x080072b7
 8007284:	080072b7 	.word	0x080072b7
 8007288:	080072b7 	.word	0x080072b7
 800728c:	080072af 	.word	0x080072af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007290:	f7fd fe4a 	bl	8004f28 <HAL_RCC_GetPCLK1Freq>
 8007294:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007296:	e014      	b.n	80072c2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007298:	f7fd fe5a 	bl	8004f50 <HAL_RCC_GetPCLK2Freq>
 800729c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800729e:	e010      	b.n	80072c2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072a0:	4b9e      	ldr	r3, [pc, #632]	@ (800751c <UART_SetConfig+0x5c8>)
 80072a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072a4:	e00d      	b.n	80072c2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072a6:	f7fd fd8f 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 80072aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072ac:	e009      	b.n	80072c2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072b4:	e005      	b.n	80072c2 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 8130 	beq.w	800752a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ce:	4a94      	ldr	r2, [pc, #592]	@ (8007520 <UART_SetConfig+0x5cc>)
 80072d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072d4:	461a      	mov	r2, r3
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	4613      	mov	r3, r2
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	4413      	add	r3, r2
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d305      	bcc.n	80072fa <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d903      	bls.n	8007302 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007300:	e113      	b.n	800752a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007304:	2200      	movs	r2, #0
 8007306:	60bb      	str	r3, [r7, #8]
 8007308:	60fa      	str	r2, [r7, #12]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730e:	4a84      	ldr	r2, [pc, #528]	@ (8007520 <UART_SetConfig+0x5cc>)
 8007310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007314:	b29b      	uxth	r3, r3
 8007316:	2200      	movs	r2, #0
 8007318:	603b      	str	r3, [r7, #0]
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007320:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007324:	f7f9 fcee 	bl	8000d04 <__aeabi_uldivmod>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4610      	mov	r0, r2
 800732e:	4619      	mov	r1, r3
 8007330:	f04f 0200 	mov.w	r2, #0
 8007334:	f04f 0300 	mov.w	r3, #0
 8007338:	020b      	lsls	r3, r1, #8
 800733a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800733e:	0202      	lsls	r2, r0, #8
 8007340:	6979      	ldr	r1, [r7, #20]
 8007342:	6849      	ldr	r1, [r1, #4]
 8007344:	0849      	lsrs	r1, r1, #1
 8007346:	2000      	movs	r0, #0
 8007348:	460c      	mov	r4, r1
 800734a:	4605      	mov	r5, r0
 800734c:	eb12 0804 	adds.w	r8, r2, r4
 8007350:	eb43 0905 	adc.w	r9, r3, r5
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	469a      	mov	sl, r3
 800735c:	4693      	mov	fp, r2
 800735e:	4652      	mov	r2, sl
 8007360:	465b      	mov	r3, fp
 8007362:	4640      	mov	r0, r8
 8007364:	4649      	mov	r1, r9
 8007366:	f7f9 fccd 	bl	8000d04 <__aeabi_uldivmod>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4613      	mov	r3, r2
 8007370:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007378:	d308      	bcc.n	800738c <UART_SetConfig+0x438>
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007380:	d204      	bcs.n	800738c <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6a3a      	ldr	r2, [r7, #32]
 8007388:	60da      	str	r2, [r3, #12]
 800738a:	e0ce      	b.n	800752a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007392:	e0ca      	b.n	800752a <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800739c:	d166      	bne.n	800746c <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800739e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073a2:	2b08      	cmp	r3, #8
 80073a4:	d827      	bhi.n	80073f6 <UART_SetConfig+0x4a2>
 80073a6:	a201      	add	r2, pc, #4	@ (adr r2, 80073ac <UART_SetConfig+0x458>)
 80073a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ac:	080073d1 	.word	0x080073d1
 80073b0:	080073d9 	.word	0x080073d9
 80073b4:	080073e1 	.word	0x080073e1
 80073b8:	080073f7 	.word	0x080073f7
 80073bc:	080073e7 	.word	0x080073e7
 80073c0:	080073f7 	.word	0x080073f7
 80073c4:	080073f7 	.word	0x080073f7
 80073c8:	080073f7 	.word	0x080073f7
 80073cc:	080073ef 	.word	0x080073ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d0:	f7fd fdaa 	bl	8004f28 <HAL_RCC_GetPCLK1Freq>
 80073d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073d6:	e014      	b.n	8007402 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073d8:	f7fd fdba 	bl	8004f50 <HAL_RCC_GetPCLK2Freq>
 80073dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073de:	e010      	b.n	8007402 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073e0:	4b4e      	ldr	r3, [pc, #312]	@ (800751c <UART_SetConfig+0x5c8>)
 80073e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073e4:	e00d      	b.n	8007402 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073e6:	f7fd fcef 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 80073ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073ec:	e009      	b.n	8007402 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073f4:	e005      	b.n	8007402 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007400:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 8090 	beq.w	800752a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740e:	4a44      	ldr	r2, [pc, #272]	@ (8007520 <UART_SetConfig+0x5cc>)
 8007410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007414:	461a      	mov	r2, r3
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	fbb3 f3f2 	udiv	r3, r3, r2
 800741c:	005a      	lsls	r2, r3, #1
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	441a      	add	r2, r3
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	fbb2 f3f3 	udiv	r3, r2, r3
 800742e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	2b0f      	cmp	r3, #15
 8007434:	d916      	bls.n	8007464 <UART_SetConfig+0x510>
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800743c:	d212      	bcs.n	8007464 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	b29b      	uxth	r3, r3
 8007442:	f023 030f 	bic.w	r3, r3, #15
 8007446:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007448:	6a3b      	ldr	r3, [r7, #32]
 800744a:	085b      	lsrs	r3, r3, #1
 800744c:	b29b      	uxth	r3, r3
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	b29a      	uxth	r2, r3
 8007454:	8bfb      	ldrh	r3, [r7, #30]
 8007456:	4313      	orrs	r3, r2
 8007458:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	8bfa      	ldrh	r2, [r7, #30]
 8007460:	60da      	str	r2, [r3, #12]
 8007462:	e062      	b.n	800752a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800746a:	e05e      	b.n	800752a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800746c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007470:	2b08      	cmp	r3, #8
 8007472:	d828      	bhi.n	80074c6 <UART_SetConfig+0x572>
 8007474:	a201      	add	r2, pc, #4	@ (adr r2, 800747c <UART_SetConfig+0x528>)
 8007476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747a:	bf00      	nop
 800747c:	080074a1 	.word	0x080074a1
 8007480:	080074a9 	.word	0x080074a9
 8007484:	080074b1 	.word	0x080074b1
 8007488:	080074c7 	.word	0x080074c7
 800748c:	080074b7 	.word	0x080074b7
 8007490:	080074c7 	.word	0x080074c7
 8007494:	080074c7 	.word	0x080074c7
 8007498:	080074c7 	.word	0x080074c7
 800749c:	080074bf 	.word	0x080074bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a0:	f7fd fd42 	bl	8004f28 <HAL_RCC_GetPCLK1Freq>
 80074a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074a6:	e014      	b.n	80074d2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074a8:	f7fd fd52 	bl	8004f50 <HAL_RCC_GetPCLK2Freq>
 80074ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074ae:	e010      	b.n	80074d2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074b0:	4b1a      	ldr	r3, [pc, #104]	@ (800751c <UART_SetConfig+0x5c8>)
 80074b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074b4:	e00d      	b.n	80074d2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074b6:	f7fd fc87 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 80074ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074bc:	e009      	b.n	80074d2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074c4:	e005      	b.n	80074d2 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074d0:	bf00      	nop
    }

    if (pclk != 0U)
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d028      	beq.n	800752a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074dc:	4a10      	ldr	r2, [pc, #64]	@ (8007520 <UART_SetConfig+0x5cc>)
 80074de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074e2:	461a      	mov	r2, r3
 80074e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	085b      	lsrs	r3, r3, #1
 80074f0:	441a      	add	r2, r3
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	2b0f      	cmp	r3, #15
 8007500:	d910      	bls.n	8007524 <UART_SetConfig+0x5d0>
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007508:	d20c      	bcs.n	8007524 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	b29a      	uxth	r2, r3
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60da      	str	r2, [r3, #12]
 8007514:	e009      	b.n	800752a <UART_SetConfig+0x5d6>
 8007516:	bf00      	nop
 8007518:	40008000 	.word	0x40008000
 800751c:	00f42400 	.word	0x00f42400
 8007520:	0800e968 	.word	0x0800e968
      }
      else
      {
        ret = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2201      	movs	r2, #1
 800752e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2201      	movs	r2, #1
 8007536:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2200      	movs	r2, #0
 800753e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2200      	movs	r2, #0
 8007544:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007546:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800754a:	4618      	mov	r0, r3
 800754c:	3730      	adds	r7, #48	@ 0x30
 800754e:	46bd      	mov	sp, r7
 8007550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007560:	f003 0308 	and.w	r3, r3, #8
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c6:	f003 0304 	and.w	r3, r3, #4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	430a      	orrs	r2, r1
 80075e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e8:	f003 0310 	and.w	r3, r3, #16
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760a:	f003 0320 	and.w	r3, r3, #32
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800762c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007630:	2b00      	cmp	r3, #0
 8007632:	d01a      	beq.n	800766a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800764e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007652:	d10a      	bne.n	800766a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	605a      	str	r2, [r3, #4]
  }
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b098      	sub	sp, #96	@ 0x60
 800769c:	af02      	add	r7, sp, #8
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076a8:	f7fa ffaa 	bl	8002600 <HAL_GetTick>
 80076ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0308 	and.w	r3, r3, #8
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d12f      	bne.n	800771c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076c4:	2200      	movs	r2, #0
 80076c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f88e 	bl	80077ec <UART_WaitOnFlagUntilTimeout>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d022      	beq.n	800771c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	461a      	mov	r2, r3
 80076f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80076f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076fc:	e841 2300 	strex	r3, r2, [r1]
 8007700:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1e6      	bne.n	80076d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2220      	movs	r2, #32
 800770c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e063      	b.n	80077e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0304 	and.w	r3, r3, #4
 8007726:	2b04      	cmp	r3, #4
 8007728:	d149      	bne.n	80077be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800772a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007732:	2200      	movs	r2, #0
 8007734:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f857 	bl	80077ec <UART_WaitOnFlagUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d03c      	beq.n	80077be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	623b      	str	r3, [r7, #32]
   return(result);
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007758:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	461a      	mov	r2, r3
 8007760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007762:	633b      	str	r3, [r7, #48]	@ 0x30
 8007764:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e6      	bne.n	8007744 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3308      	adds	r3, #8
 800777c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	60fb      	str	r3, [r7, #12]
   return(result);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f023 0301 	bic.w	r3, r3, #1
 800778c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3308      	adds	r3, #8
 8007794:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007796:	61fa      	str	r2, [r7, #28]
 8007798:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	69b9      	ldr	r1, [r7, #24]
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	617b      	str	r3, [r7, #20]
   return(result);
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e5      	bne.n	8007776 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e012      	b.n	80077e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2220      	movs	r2, #32
 80077c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3758      	adds	r7, #88	@ 0x58
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	4613      	mov	r3, r2
 80077fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077fc:	e04f      	b.n	800789e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d04b      	beq.n	800789e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007806:	f7fa fefb 	bl	8002600 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	429a      	cmp	r2, r3
 8007814:	d302      	bcc.n	800781c <UART_WaitOnFlagUntilTimeout+0x30>
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e04e      	b.n	80078be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0304 	and.w	r3, r3, #4
 800782a:	2b00      	cmp	r3, #0
 800782c:	d037      	beq.n	800789e <UART_WaitOnFlagUntilTimeout+0xb2>
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2b80      	cmp	r3, #128	@ 0x80
 8007832:	d034      	beq.n	800789e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b40      	cmp	r3, #64	@ 0x40
 8007838:	d031      	beq.n	800789e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69db      	ldr	r3, [r3, #28]
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b08      	cmp	r3, #8
 8007846:	d110      	bne.n	800786a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2208      	movs	r2, #8
 800784e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f95b 	bl	8007b0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2208      	movs	r2, #8
 800785a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e029      	b.n	80078be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007878:	d111      	bne.n	800789e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 f941 	bl	8007b0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2220      	movs	r2, #32
 800788e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e00f      	b.n	80078be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	69da      	ldr	r2, [r3, #28]
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	4013      	ands	r3, r2
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	bf0c      	ite	eq
 80078ae:	2301      	moveq	r3, #1
 80078b0:	2300      	movne	r3, #0
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	461a      	mov	r2, r3
 80078b6:	79fb      	ldrb	r3, [r7, #7]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d0a0      	beq.n	80077fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b0a3      	sub	sp, #140	@ 0x8c
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	88fa      	ldrh	r2, [r7, #6]
 80078e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078fa:	d10e      	bne.n	800791a <UART_Start_Receive_IT+0x52>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d105      	bne.n	8007910 <UART_Start_Receive_IT+0x48>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800790a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800790e:	e02d      	b.n	800796c <UART_Start_Receive_IT+0xa4>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	22ff      	movs	r2, #255	@ 0xff
 8007914:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007918:	e028      	b.n	800796c <UART_Start_Receive_IT+0xa4>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10d      	bne.n	800793e <UART_Start_Receive_IT+0x76>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d104      	bne.n	8007934 <UART_Start_Receive_IT+0x6c>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	22ff      	movs	r2, #255	@ 0xff
 800792e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007932:	e01b      	b.n	800796c <UART_Start_Receive_IT+0xa4>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	227f      	movs	r2, #127	@ 0x7f
 8007938:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800793c:	e016      	b.n	800796c <UART_Start_Receive_IT+0xa4>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007946:	d10d      	bne.n	8007964 <UART_Start_Receive_IT+0x9c>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d104      	bne.n	800795a <UART_Start_Receive_IT+0x92>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	227f      	movs	r2, #127	@ 0x7f
 8007954:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007958:	e008      	b.n	800796c <UART_Start_Receive_IT+0xa4>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	223f      	movs	r2, #63	@ 0x3f
 800795e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007962:	e003      	b.n	800796c <UART_Start_Receive_IT+0xa4>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2222      	movs	r2, #34	@ 0x22
 8007978:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3308      	adds	r3, #8
 8007982:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007986:	e853 3f00 	ldrex	r3, [r3]
 800798a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800798c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800798e:	f043 0301 	orr.w	r3, r3, #1
 8007992:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3308      	adds	r3, #8
 800799c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80079a0:	673a      	str	r2, [r7, #112]	@ 0x70
 80079a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80079a6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80079a8:	e841 2300 	strex	r3, r2, [r1]
 80079ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80079ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1e3      	bne.n	800797c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079bc:	d14f      	bne.n	8007a5e <UART_Start_Receive_IT+0x196>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80079c4:	88fa      	ldrh	r2, [r7, #6]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d349      	bcc.n	8007a5e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079d2:	d107      	bne.n	80079e4 <UART_Start_Receive_IT+0x11c>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d103      	bne.n	80079e4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4a47      	ldr	r2, [pc, #284]	@ (8007afc <UART_Start_Receive_IT+0x234>)
 80079e0:	675a      	str	r2, [r3, #116]	@ 0x74
 80079e2:	e002      	b.n	80079ea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4a46      	ldr	r2, [pc, #280]	@ (8007b00 <UART_Start_Receive_IT+0x238>)
 80079e8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d01a      	beq.n	8007a28 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a16:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007a1a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e4      	bne.n	80079f2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3308      	adds	r3, #8
 8007a46:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007a48:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007a4a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e5      	bne.n	8007a28 <UART_Start_Receive_IT+0x160>
 8007a5c:	e046      	b.n	8007aec <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a66:	d107      	bne.n	8007a78 <UART_Start_Receive_IT+0x1b0>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d103      	bne.n	8007a78 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4a24      	ldr	r2, [pc, #144]	@ (8007b04 <UART_Start_Receive_IT+0x23c>)
 8007a74:	675a      	str	r2, [r3, #116]	@ 0x74
 8007a76:	e002      	b.n	8007a7e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4a23      	ldr	r2, [pc, #140]	@ (8007b08 <UART_Start_Receive_IT+0x240>)
 8007a7c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d019      	beq.n	8007aba <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8e:	e853 3f00 	ldrex	r3, [r3]
 8007a92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a96:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007a9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aa6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007aaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e6      	bne.n	8007a86 <UART_Start_Receive_IT+0x1be>
 8007ab8:	e018      	b.n	8007aec <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f043 0320 	orr.w	r3, r3, #32
 8007ace:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ad8:	623b      	str	r3, [r7, #32]
 8007ada:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	69f9      	ldr	r1, [r7, #28]
 8007ade:	6a3a      	ldr	r2, [r7, #32]
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e6      	bne.n	8007aba <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	378c      	adds	r7, #140	@ 0x8c
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	08008375 	.word	0x08008375
 8007b00:	08008015 	.word	0x08008015
 8007b04:	08007e5d 	.word	0x08007e5d
 8007b08:	08007ca5 	.word	0x08007ca5

08007b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b095      	sub	sp, #84	@ 0x54
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b1c:	e853 3f00 	ldrex	r3, [r3]
 8007b20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b32:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e6      	bne.n	8007b14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b5c:	f023 0301 	bic.w	r3, r3, #1
 8007b60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	3308      	adds	r3, #8
 8007b68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e3      	bne.n	8007b46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d118      	bne.n	8007bb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	e853 3f00 	ldrex	r3, [r3]
 8007b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f023 0310 	bic.w	r3, r3, #16
 8007b9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ba4:	61bb      	str	r3, [r7, #24]
 8007ba6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	6979      	ldr	r1, [r7, #20]
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	e841 2300 	strex	r3, r2, [r1]
 8007bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e6      	bne.n	8007b86 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007bcc:	bf00      	nop
 8007bce:	3754      	adds	r7, #84	@ 0x54
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff f98c 	bl	8006f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bfc:	bf00      	nop
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c10:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	220f      	movs	r2, #15
 8007c20:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699a      	ldr	r2, [r3, #24]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f042 0208 	orr.w	r2, r2, #8
 8007c30:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f7ff f971 	bl	8006f28 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c46:	bf00      	nop
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b088      	sub	sp, #32
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c6a:	61fb      	str	r3, [r7, #28]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	461a      	mov	r2, r3
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6979      	ldr	r1, [r7, #20]
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	613b      	str	r3, [r7, #16]
   return(result);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e6      	bne.n	8007c56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7ff f932 	bl	8006f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c9c:	bf00      	nop
 8007c9e:	3720      	adds	r7, #32
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b09c      	sub	sp, #112	@ 0x70
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007cb2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cbc:	2b22      	cmp	r3, #34	@ 0x22
 8007cbe:	f040 80be 	bne.w	8007e3e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ccc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007cd0:	b2d9      	uxtb	r1, r3
 8007cd2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cdc:	400a      	ands	r2, r1
 8007cde:	b2d2      	uxtb	r2, r2
 8007ce0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f040 80a1 	bne.w	8007e4e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d14:	e853 3f00 	ldrex	r3, [r3]
 8007d18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e6      	bne.n	8007d0c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3308      	adds	r3, #8
 8007d44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d48:	e853 3f00 	ldrex	r3, [r3]
 8007d4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d50:	f023 0301 	bic.w	r3, r3, #1
 8007d54:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e5      	bne.n	8007d3e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2220      	movs	r2, #32
 8007d76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a33      	ldr	r2, [pc, #204]	@ (8007e58 <UART_RxISR_8BIT+0x1b4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d01f      	beq.n	8007dd0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d018      	beq.n	8007dd0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	e853 3f00 	ldrex	r3, [r3]
 8007daa:	623b      	str	r3, [r7, #32]
   return(result);
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007db2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dc4:	e841 2300 	strex	r3, r2, [r1]
 8007dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e6      	bne.n	8007d9e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d12e      	bne.n	8007e36 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	e853 3f00 	ldrex	r3, [r3]
 8007dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f023 0310 	bic.w	r3, r3, #16
 8007df2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dfc:	61fb      	str	r3, [r7, #28]
 8007dfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	69b9      	ldr	r1, [r7, #24]
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	e841 2300 	strex	r3, r2, [r1]
 8007e08:	617b      	str	r3, [r7, #20]
   return(result);
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e6      	bne.n	8007dde <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	f003 0310 	and.w	r3, r3, #16
 8007e1a:	2b10      	cmp	r3, #16
 8007e1c:	d103      	bne.n	8007e26 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2210      	movs	r2, #16
 8007e24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff f884 	bl	8006f3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e34:	e00b      	b.n	8007e4e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7f9 fd22 	bl	8001880 <HAL_UART_RxCpltCallback>
}
 8007e3c:	e007      	b.n	8007e4e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	699a      	ldr	r2, [r3, #24]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f042 0208 	orr.w	r2, r2, #8
 8007e4c:	619a      	str	r2, [r3, #24]
}
 8007e4e:	bf00      	nop
 8007e50:	3770      	adds	r7, #112	@ 0x70
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	40008000 	.word	0x40008000

08007e5c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b09c      	sub	sp, #112	@ 0x70
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e6a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e74:	2b22      	cmp	r3, #34	@ 0x22
 8007e76:	f040 80be 	bne.w	8007ff6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e88:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e8a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007e8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007e92:	4013      	ands	r3, r2
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e98:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e9e:	1c9a      	adds	r2, r3, #2
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	3b01      	subs	r3, #1
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f040 80a1 	bne.w	8008006 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ed4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ed8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ee2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ee4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ee8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e6      	bne.n	8007ec4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3308      	adds	r3, #8
 8007efc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f00:	e853 3f00 	ldrex	r3, [r3]
 8007f04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f08:	f023 0301 	bic.w	r3, r3, #1
 8007f0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3308      	adds	r3, #8
 8007f14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f16:	643a      	str	r2, [r7, #64]	@ 0x40
 8007f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e5      	bne.n	8007ef6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a33      	ldr	r2, [pc, #204]	@ (8008010 <UART_RxISR_16BIT+0x1b4>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d01f      	beq.n	8007f88 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d018      	beq.n	8007f88 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	e853 3f00 	ldrex	r3, [r3]
 8007f62:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	461a      	mov	r2, r3
 8007f72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f76:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f7c:	e841 2300 	strex	r3, r2, [r1]
 8007f80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1e6      	bne.n	8007f56 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d12e      	bne.n	8007fee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f023 0310 	bic.w	r3, r3, #16
 8007faa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007fb4:	61bb      	str	r3, [r7, #24]
 8007fb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	6979      	ldr	r1, [r7, #20]
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	e841 2300 	strex	r3, r2, [r1]
 8007fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e6      	bne.n	8007f96 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	f003 0310 	and.w	r3, r3, #16
 8007fd2:	2b10      	cmp	r3, #16
 8007fd4:	d103      	bne.n	8007fde <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2210      	movs	r2, #16
 8007fdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7fe ffa8 	bl	8006f3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fec:	e00b      	b.n	8008006 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7f9 fc46 	bl	8001880 <HAL_UART_RxCpltCallback>
}
 8007ff4:	e007      	b.n	8008006 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	699a      	ldr	r2, [r3, #24]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f042 0208 	orr.w	r2, r2, #8
 8008004:	619a      	str	r2, [r3, #24]
}
 8008006:	bf00      	nop
 8008008:	3770      	adds	r7, #112	@ 0x70
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	40008000 	.word	0x40008000

08008014 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b0ac      	sub	sp, #176	@ 0xb0
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008022:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69db      	ldr	r3, [r3, #28]
 800802c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800804a:	2b22      	cmp	r3, #34	@ 0x22
 800804c:	f040 8182 	bne.w	8008354 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008056:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800805a:	e125      	b.n	80082a8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008062:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008066:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800806a:	b2d9      	uxtb	r1, r3
 800806c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008070:	b2da      	uxtb	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008076:	400a      	ands	r2, r1
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800808c:	b29b      	uxth	r3, r3
 800808e:	3b01      	subs	r3, #1
 8008090:	b29a      	uxth	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080a6:	f003 0307 	and.w	r3, r3, #7
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d053      	beq.n	8008156 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d011      	beq.n	80080de <UART_RxISR_8BIT_FIFOEN+0xca>
 80080ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00b      	beq.n	80080de <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2201      	movs	r2, #1
 80080cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080d4:	f043 0201 	orr.w	r2, r3, #1
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d011      	beq.n	800810e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80080ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00b      	beq.n	800810e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2202      	movs	r2, #2
 80080fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008104:	f043 0204 	orr.w	r2, r3, #4
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800810e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008112:	f003 0304 	and.w	r3, r3, #4
 8008116:	2b00      	cmp	r3, #0
 8008118:	d011      	beq.n	800813e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800811a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00b      	beq.n	800813e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2204      	movs	r2, #4
 800812c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008134:	f043 0202 	orr.w	r2, r3, #2
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008144:	2b00      	cmp	r3, #0
 8008146:	d006      	beq.n	8008156 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7fe fee3 	bl	8006f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800815c:	b29b      	uxth	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	f040 80a2 	bne.w	80082a8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008172:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008178:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	461a      	mov	r2, r3
 8008182:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008186:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008188:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800818c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008194:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e4      	bne.n	8008164 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3308      	adds	r3, #8
 80081a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80081aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081b0:	f023 0301 	bic.w	r3, r3, #1
 80081b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3308      	adds	r3, #8
 80081be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80081c2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80081c4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80081c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80081d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e1      	bne.n	800819a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2220      	movs	r2, #32
 80081da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a5f      	ldr	r2, [pc, #380]	@ (800836c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d021      	beq.n	8008238 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d01a      	beq.n	8008238 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008208:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800820a:	e853 3f00 	ldrex	r3, [r3]
 800820e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008212:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008216:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008224:	657b      	str	r3, [r7, #84]	@ 0x54
 8008226:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800822a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800822c:	e841 2300 	strex	r3, r2, [r1]
 8008230:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e4      	bne.n	8008202 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800823c:	2b01      	cmp	r3, #1
 800823e:	d130      	bne.n	80082a2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800824e:	e853 3f00 	ldrex	r3, [r3]
 8008252:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008256:	f023 0310 	bic.w	r3, r3, #16
 800825a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008268:	643b      	str	r3, [r7, #64]	@ 0x40
 800826a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800826e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008270:	e841 2300 	strex	r3, r2, [r1]
 8008274:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1e4      	bne.n	8008246 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	f003 0310 	and.w	r3, r3, #16
 8008286:	2b10      	cmp	r3, #16
 8008288:	d103      	bne.n	8008292 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2210      	movs	r2, #16
 8008290:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7fe fe4e 	bl	8006f3c <HAL_UARTEx_RxEventCallback>
 80082a0:	e002      	b.n	80082a8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7f9 faec 	bl	8001880 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082a8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d006      	beq.n	80082be <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80082b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082b4:	f003 0320 	and.w	r3, r3, #32
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f47f aecf 	bne.w	800805c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80082c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d049      	beq.n	8008364 <UART_RxISR_8BIT_FIFOEN+0x350>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80082d6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80082da:	429a      	cmp	r2, r3
 80082dc:	d242      	bcs.n	8008364 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3308      	adds	r3, #8
 80082e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3308      	adds	r3, #8
 80082fe:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008302:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008304:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e3      	bne.n	80082de <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a15      	ldr	r2, [pc, #84]	@ (8008370 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800831a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	e853 3f00 	ldrex	r3, [r3]
 8008328:	60bb      	str	r3, [r7, #8]
   return(result);
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f043 0320 	orr.w	r3, r3, #32
 8008330:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	461a      	mov	r2, r3
 800833a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800833e:	61bb      	str	r3, [r7, #24]
 8008340:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	6979      	ldr	r1, [r7, #20]
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	613b      	str	r3, [r7, #16]
   return(result);
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1e4      	bne.n	800831c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008352:	e007      	b.n	8008364 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f042 0208 	orr.w	r2, r2, #8
 8008362:	619a      	str	r2, [r3, #24]
}
 8008364:	bf00      	nop
 8008366:	37b0      	adds	r7, #176	@ 0xb0
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	40008000 	.word	0x40008000
 8008370:	08007ca5 	.word	0x08007ca5

08008374 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b0ae      	sub	sp, #184	@ 0xb8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008382:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083aa:	2b22      	cmp	r3, #34	@ 0x22
 80083ac:	f040 8186 	bne.w	80086bc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80083b6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80083ba:	e129      	b.n	8008610 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80083ce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80083d2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80083d6:	4013      	ands	r3, r2
 80083d8:	b29a      	uxth	r2, r3
 80083da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083e4:	1c9a      	adds	r2, r3, #2
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	3b01      	subs	r3, #1
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800840a:	f003 0307 	and.w	r3, r3, #7
 800840e:	2b00      	cmp	r3, #0
 8008410:	d053      	beq.n	80084ba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008412:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d011      	beq.n	8008442 <UART_RxISR_16BIT_FIFOEN+0xce>
 800841e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00b      	beq.n	8008442 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2201      	movs	r2, #1
 8008430:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008438:	f043 0201 	orr.w	r2, r3, #1
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008442:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008446:	f003 0302 	and.w	r3, r3, #2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d011      	beq.n	8008472 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800844e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00b      	beq.n	8008472 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2202      	movs	r2, #2
 8008460:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008468:	f043 0204 	orr.w	r2, r3, #4
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008472:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008476:	f003 0304 	and.w	r3, r3, #4
 800847a:	2b00      	cmp	r3, #0
 800847c:	d011      	beq.n	80084a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800847e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00b      	beq.n	80084a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2204      	movs	r2, #4
 8008490:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008498:	f043 0202 	orr.w	r2, r3, #2
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d006      	beq.n	80084ba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7fe fd31 	bl	8006f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f040 80a4 	bne.w	8008610 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80084d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	461a      	mov	r2, r3
 80084e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80084f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80084f6:	e841 2300 	strex	r3, r2, [r1]
 80084fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80084fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1e2      	bne.n	80084c8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3308      	adds	r3, #8
 8008508:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008514:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008518:	f023 0301 	bic.w	r3, r3, #1
 800851c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3308      	adds	r3, #8
 8008526:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800852a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800852c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008530:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008538:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e1      	bne.n	8008502 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2220      	movs	r2, #32
 8008542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a5f      	ldr	r2, [pc, #380]	@ (80086d4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d021      	beq.n	80085a0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d01a      	beq.n	80085a0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008570:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008572:	e853 3f00 	ldrex	r3, [r3]
 8008576:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008578:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800857a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800857e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800858c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800858e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008590:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008592:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008594:	e841 2300 	strex	r3, r2, [r1]
 8008598:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800859a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e4      	bne.n	800856a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d130      	bne.n	800860a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085be:	f023 0310 	bic.w	r3, r3, #16
 80085c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80085d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085d8:	e841 2300 	strex	r3, r2, [r1]
 80085dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1e4      	bne.n	80085ae <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	f003 0310 	and.w	r3, r3, #16
 80085ee:	2b10      	cmp	r3, #16
 80085f0:	d103      	bne.n	80085fa <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2210      	movs	r2, #16
 80085f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7fe fc9a 	bl	8006f3c <HAL_UARTEx_RxEventCallback>
 8008608:	e002      	b.n	8008610 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7f9 f938 	bl	8001880 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008610:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008614:	2b00      	cmp	r3, #0
 8008616:	d006      	beq.n	8008626 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008618:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800861c:	f003 0320 	and.w	r3, r3, #32
 8008620:	2b00      	cmp	r3, #0
 8008622:	f47f aecb 	bne.w	80083bc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800862c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008630:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008634:	2b00      	cmp	r3, #0
 8008636:	d049      	beq.n	80086cc <UART_RxISR_16BIT_FIFOEN+0x358>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800863e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008642:	429a      	cmp	r2, r3
 8008644:	d242      	bcs.n	80086cc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3308      	adds	r3, #8
 800864c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	e853 3f00 	ldrex	r3, [r3]
 8008654:	623b      	str	r3, [r7, #32]
   return(result);
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800865c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3308      	adds	r3, #8
 8008666:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800866a:	633a      	str	r2, [r7, #48]	@ 0x30
 800866c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1e3      	bne.n	8008646 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a15      	ldr	r2, [pc, #84]	@ (80086d8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008682:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	e853 3f00 	ldrex	r3, [r3]
 8008690:	60fb      	str	r3, [r7, #12]
   return(result);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f043 0320 	orr.w	r3, r3, #32
 8008698:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	461a      	mov	r2, r3
 80086a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	69b9      	ldr	r1, [r7, #24]
 80086ac:	69fa      	ldr	r2, [r7, #28]
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	617b      	str	r3, [r7, #20]
   return(result);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e4      	bne.n	8008684 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086ba:	e007      	b.n	80086cc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	699a      	ldr	r2, [r3, #24]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0208 	orr.w	r2, r2, #8
 80086ca:	619a      	str	r2, [r3, #24]
}
 80086cc:	bf00      	nop
 80086ce:	37b8      	adds	r7, #184	@ 0xb8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	40008000 	.word	0x40008000
 80086d8:	08007e5d 	.word	0x08007e5d

080086dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008726:	2b01      	cmp	r3, #1
 8008728:	d101      	bne.n	800872e <HAL_UARTEx_DisableFifoMode+0x16>
 800872a:	2302      	movs	r3, #2
 800872c:	e027      	b.n	800877e <HAL_UARTEx_DisableFifoMode+0x66>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2224      	movs	r2, #36	@ 0x24
 800873a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 0201 	bic.w	r2, r2, #1
 8008754:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800875c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2220      	movs	r2, #32
 8008770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b084      	sub	sp, #16
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800879a:	2b01      	cmp	r3, #1
 800879c:	d101      	bne.n	80087a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800879e:	2302      	movs	r3, #2
 80087a0:	e02d      	b.n	80087fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2224      	movs	r2, #36	@ 0x24
 80087ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f022 0201 	bic.w	r2, r2, #1
 80087c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f850 	bl	8008884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008816:	2b01      	cmp	r3, #1
 8008818:	d101      	bne.n	800881e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800881a:	2302      	movs	r3, #2
 800881c:	e02d      	b.n	800887a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2224      	movs	r2, #36	@ 0x24
 800882a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f022 0201 	bic.w	r2, r2, #1
 8008844:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	430a      	orrs	r2, r1
 8008858:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f812 	bl	8008884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
	...

08008884 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008890:	2b00      	cmp	r3, #0
 8008892:	d108      	bne.n	80088a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088a4:	e031      	b.n	800890a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088a6:	2308      	movs	r3, #8
 80088a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088aa:	2308      	movs	r3, #8
 80088ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	0e5b      	lsrs	r3, r3, #25
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	f003 0307 	and.w	r3, r3, #7
 80088bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	0f5b      	lsrs	r3, r3, #29
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	f003 0307 	and.w	r3, r3, #7
 80088cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	7b3a      	ldrb	r2, [r7, #12]
 80088d2:	4911      	ldr	r1, [pc, #68]	@ (8008918 <UARTEx_SetNbDataToProcess+0x94>)
 80088d4:	5c8a      	ldrb	r2, [r1, r2]
 80088d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80088da:	7b3a      	ldrb	r2, [r7, #12]
 80088dc:	490f      	ldr	r1, [pc, #60]	@ (800891c <UARTEx_SetNbDataToProcess+0x98>)
 80088de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
 80088ee:	7b7a      	ldrb	r2, [r7, #13]
 80088f0:	4909      	ldr	r1, [pc, #36]	@ (8008918 <UARTEx_SetNbDataToProcess+0x94>)
 80088f2:	5c8a      	ldrb	r2, [r1, r2]
 80088f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80088f8:	7b7a      	ldrb	r2, [r7, #13]
 80088fa:	4908      	ldr	r1, [pc, #32]	@ (800891c <UARTEx_SetNbDataToProcess+0x98>)
 80088fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008902:	b29a      	uxth	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800890a:	bf00      	nop
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	0800e980 	.word	0x0800e980
 800891c:	0800e988 	.word	0x0800e988

08008920 <__cvt>:
 8008920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008924:	ec57 6b10 	vmov	r6, r7, d0
 8008928:	2f00      	cmp	r7, #0
 800892a:	460c      	mov	r4, r1
 800892c:	4619      	mov	r1, r3
 800892e:	463b      	mov	r3, r7
 8008930:	bfb4      	ite	lt
 8008932:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008936:	2300      	movge	r3, #0
 8008938:	4691      	mov	r9, r2
 800893a:	bfbf      	itttt	lt
 800893c:	4632      	movlt	r2, r6
 800893e:	461f      	movlt	r7, r3
 8008940:	232d      	movlt	r3, #45	@ 0x2d
 8008942:	4616      	movlt	r6, r2
 8008944:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008948:	700b      	strb	r3, [r1, #0]
 800894a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800894c:	f023 0820 	bic.w	r8, r3, #32
 8008950:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008954:	d005      	beq.n	8008962 <__cvt+0x42>
 8008956:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800895a:	d100      	bne.n	800895e <__cvt+0x3e>
 800895c:	3401      	adds	r4, #1
 800895e:	2102      	movs	r1, #2
 8008960:	e000      	b.n	8008964 <__cvt+0x44>
 8008962:	2103      	movs	r1, #3
 8008964:	ab03      	add	r3, sp, #12
 8008966:	4622      	mov	r2, r4
 8008968:	9301      	str	r3, [sp, #4]
 800896a:	ab02      	add	r3, sp, #8
 800896c:	ec47 6b10 	vmov	d0, r6, r7
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	4653      	mov	r3, sl
 8008974:	f001 ffb4 	bl	800a8e0 <_dtoa_r>
 8008978:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800897c:	4605      	mov	r5, r0
 800897e:	d119      	bne.n	80089b4 <__cvt+0x94>
 8008980:	f019 0f01 	tst.w	r9, #1
 8008984:	d00e      	beq.n	80089a4 <__cvt+0x84>
 8008986:	eb00 0904 	add.w	r9, r0, r4
 800898a:	2200      	movs	r2, #0
 800898c:	2300      	movs	r3, #0
 800898e:	4630      	mov	r0, r6
 8008990:	4639      	mov	r1, r7
 8008992:	f7f8 f887 	bl	8000aa4 <__aeabi_dcmpeq>
 8008996:	b108      	cbz	r0, 800899c <__cvt+0x7c>
 8008998:	f8cd 900c 	str.w	r9, [sp, #12]
 800899c:	2230      	movs	r2, #48	@ 0x30
 800899e:	9b03      	ldr	r3, [sp, #12]
 80089a0:	454b      	cmp	r3, r9
 80089a2:	d31e      	bcc.n	80089e2 <__cvt+0xc2>
 80089a4:	9b03      	ldr	r3, [sp, #12]
 80089a6:	4628      	mov	r0, r5
 80089a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089aa:	1b5b      	subs	r3, r3, r5
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	b004      	add	sp, #16
 80089b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80089b8:	eb00 0904 	add.w	r9, r0, r4
 80089bc:	d1e5      	bne.n	800898a <__cvt+0x6a>
 80089be:	7803      	ldrb	r3, [r0, #0]
 80089c0:	2b30      	cmp	r3, #48	@ 0x30
 80089c2:	d10a      	bne.n	80089da <__cvt+0xba>
 80089c4:	2200      	movs	r2, #0
 80089c6:	2300      	movs	r3, #0
 80089c8:	4630      	mov	r0, r6
 80089ca:	4639      	mov	r1, r7
 80089cc:	f7f8 f86a 	bl	8000aa4 <__aeabi_dcmpeq>
 80089d0:	b918      	cbnz	r0, 80089da <__cvt+0xba>
 80089d2:	f1c4 0401 	rsb	r4, r4, #1
 80089d6:	f8ca 4000 	str.w	r4, [sl]
 80089da:	f8da 3000 	ldr.w	r3, [sl]
 80089de:	4499      	add	r9, r3
 80089e0:	e7d3      	b.n	800898a <__cvt+0x6a>
 80089e2:	1c59      	adds	r1, r3, #1
 80089e4:	9103      	str	r1, [sp, #12]
 80089e6:	701a      	strb	r2, [r3, #0]
 80089e8:	e7d9      	b.n	800899e <__cvt+0x7e>

080089ea <__exponent>:
 80089ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089ec:	2900      	cmp	r1, #0
 80089ee:	7002      	strb	r2, [r0, #0]
 80089f0:	bfba      	itte	lt
 80089f2:	4249      	neglt	r1, r1
 80089f4:	232d      	movlt	r3, #45	@ 0x2d
 80089f6:	232b      	movge	r3, #43	@ 0x2b
 80089f8:	2909      	cmp	r1, #9
 80089fa:	7043      	strb	r3, [r0, #1]
 80089fc:	dd28      	ble.n	8008a50 <__exponent+0x66>
 80089fe:	f10d 0307 	add.w	r3, sp, #7
 8008a02:	270a      	movs	r7, #10
 8008a04:	461d      	mov	r5, r3
 8008a06:	461a      	mov	r2, r3
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a0e:	fb07 1416 	mls	r4, r7, r6, r1
 8008a12:	3430      	adds	r4, #48	@ 0x30
 8008a14:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a18:	460c      	mov	r4, r1
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	2c63      	cmp	r4, #99	@ 0x63
 8008a1e:	dcf2      	bgt.n	8008a06 <__exponent+0x1c>
 8008a20:	3130      	adds	r1, #48	@ 0x30
 8008a22:	1e94      	subs	r4, r2, #2
 8008a24:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a28:	1c41      	adds	r1, r0, #1
 8008a2a:	4623      	mov	r3, r4
 8008a2c:	42ab      	cmp	r3, r5
 8008a2e:	d30a      	bcc.n	8008a46 <__exponent+0x5c>
 8008a30:	f10d 0309 	add.w	r3, sp, #9
 8008a34:	1a9b      	subs	r3, r3, r2
 8008a36:	42ac      	cmp	r4, r5
 8008a38:	bf88      	it	hi
 8008a3a:	2300      	movhi	r3, #0
 8008a3c:	3302      	adds	r3, #2
 8008a3e:	4403      	add	r3, r0
 8008a40:	1a18      	subs	r0, r3, r0
 8008a42:	b003      	add	sp, #12
 8008a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a46:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008a4a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008a4e:	e7ed      	b.n	8008a2c <__exponent+0x42>
 8008a50:	2330      	movs	r3, #48	@ 0x30
 8008a52:	3130      	adds	r1, #48	@ 0x30
 8008a54:	7083      	strb	r3, [r0, #2]
 8008a56:	1d03      	adds	r3, r0, #4
 8008a58:	70c1      	strb	r1, [r0, #3]
 8008a5a:	e7f1      	b.n	8008a40 <__exponent+0x56>

08008a5c <_printf_float>:
 8008a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a60:	b08d      	sub	sp, #52	@ 0x34
 8008a62:	460c      	mov	r4, r1
 8008a64:	4616      	mov	r6, r2
 8008a66:	461f      	mov	r7, r3
 8008a68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008a6c:	4605      	mov	r5, r0
 8008a6e:	f001 fdeb 	bl	800a648 <_localeconv_r>
 8008a72:	6803      	ldr	r3, [r0, #0]
 8008a74:	4618      	mov	r0, r3
 8008a76:	9304      	str	r3, [sp, #16]
 8008a78:	f7f7 fbe8 	bl	800024c <strlen>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	9005      	str	r0, [sp, #20]
 8008a80:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a82:	f8d8 3000 	ldr.w	r3, [r8]
 8008a86:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008a8a:	3307      	adds	r3, #7
 8008a8c:	f8d4 b000 	ldr.w	fp, [r4]
 8008a90:	f023 0307 	bic.w	r3, r3, #7
 8008a94:	f103 0208 	add.w	r2, r3, #8
 8008a98:	f8c8 2000 	str.w	r2, [r8]
 8008a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008aa4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008aa8:	f8cd 8018 	str.w	r8, [sp, #24]
 8008aac:	9307      	str	r3, [sp, #28]
 8008aae:	4b9d      	ldr	r3, [pc, #628]	@ (8008d24 <_printf_float+0x2c8>)
 8008ab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ab4:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008ab8:	f7f8 f826 	bl	8000b08 <__aeabi_dcmpun>
 8008abc:	bb70      	cbnz	r0, 8008b1c <_printf_float+0xc0>
 8008abe:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac2:	4b98      	ldr	r3, [pc, #608]	@ (8008d24 <_printf_float+0x2c8>)
 8008ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ac8:	f7f8 f800 	bl	8000acc <__aeabi_dcmple>
 8008acc:	bb30      	cbnz	r0, 8008b1c <_printf_float+0xc0>
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	f7f7 ffef 	bl	8000ab8 <__aeabi_dcmplt>
 8008ada:	b110      	cbz	r0, 8008ae2 <_printf_float+0x86>
 8008adc:	232d      	movs	r3, #45	@ 0x2d
 8008ade:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ae2:	4a91      	ldr	r2, [pc, #580]	@ (8008d28 <_printf_float+0x2cc>)
 8008ae4:	4b91      	ldr	r3, [pc, #580]	@ (8008d2c <_printf_float+0x2d0>)
 8008ae6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008aea:	bf8c      	ite	hi
 8008aec:	4690      	movhi	r8, r2
 8008aee:	4698      	movls	r8, r3
 8008af0:	2303      	movs	r3, #3
 8008af2:	f04f 0900 	mov.w	r9, #0
 8008af6:	6123      	str	r3, [r4, #16]
 8008af8:	f02b 0304 	bic.w	r3, fp, #4
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	4633      	mov	r3, r6
 8008b00:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b02:	4621      	mov	r1, r4
 8008b04:	4628      	mov	r0, r5
 8008b06:	9700      	str	r7, [sp, #0]
 8008b08:	f000 f9d2 	bl	8008eb0 <_printf_common>
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	f040 808d 	bne.w	8008c2c <_printf_float+0x1d0>
 8008b12:	f04f 30ff 	mov.w	r0, #4294967295
 8008b16:	b00d      	add	sp, #52	@ 0x34
 8008b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1c:	4642      	mov	r2, r8
 8008b1e:	464b      	mov	r3, r9
 8008b20:	4640      	mov	r0, r8
 8008b22:	4649      	mov	r1, r9
 8008b24:	f7f7 fff0 	bl	8000b08 <__aeabi_dcmpun>
 8008b28:	b140      	cbz	r0, 8008b3c <_printf_float+0xe0>
 8008b2a:	464b      	mov	r3, r9
 8008b2c:	4a80      	ldr	r2, [pc, #512]	@ (8008d30 <_printf_float+0x2d4>)
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	bfbc      	itt	lt
 8008b32:	232d      	movlt	r3, #45	@ 0x2d
 8008b34:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008b38:	4b7e      	ldr	r3, [pc, #504]	@ (8008d34 <_printf_float+0x2d8>)
 8008b3a:	e7d4      	b.n	8008ae6 <_printf_float+0x8a>
 8008b3c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008b40:	6863      	ldr	r3, [r4, #4]
 8008b42:	9206      	str	r2, [sp, #24]
 8008b44:	1c5a      	adds	r2, r3, #1
 8008b46:	d13b      	bne.n	8008bc0 <_printf_float+0x164>
 8008b48:	2306      	movs	r3, #6
 8008b4a:	6063      	str	r3, [r4, #4]
 8008b4c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008b50:	2300      	movs	r3, #0
 8008b52:	4628      	mov	r0, r5
 8008b54:	6022      	str	r2, [r4, #0]
 8008b56:	9303      	str	r3, [sp, #12]
 8008b58:	ab0a      	add	r3, sp, #40	@ 0x28
 8008b5a:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008b5e:	ab09      	add	r3, sp, #36	@ 0x24
 8008b60:	ec49 8b10 	vmov	d0, r8, r9
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008b6a:	6861      	ldr	r1, [r4, #4]
 8008b6c:	f7ff fed8 	bl	8008920 <__cvt>
 8008b70:	9b06      	ldr	r3, [sp, #24]
 8008b72:	4680      	mov	r8, r0
 8008b74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b76:	2b47      	cmp	r3, #71	@ 0x47
 8008b78:	d129      	bne.n	8008bce <_printf_float+0x172>
 8008b7a:	1cc8      	adds	r0, r1, #3
 8008b7c:	db02      	blt.n	8008b84 <_printf_float+0x128>
 8008b7e:	6863      	ldr	r3, [r4, #4]
 8008b80:	4299      	cmp	r1, r3
 8008b82:	dd41      	ble.n	8008c08 <_printf_float+0x1ac>
 8008b84:	f1aa 0a02 	sub.w	sl, sl, #2
 8008b88:	fa5f fa8a 	uxtb.w	sl, sl
 8008b8c:	3901      	subs	r1, #1
 8008b8e:	4652      	mov	r2, sl
 8008b90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008b94:	9109      	str	r1, [sp, #36]	@ 0x24
 8008b96:	f7ff ff28 	bl	80089ea <__exponent>
 8008b9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b9c:	4681      	mov	r9, r0
 8008b9e:	1813      	adds	r3, r2, r0
 8008ba0:	2a01      	cmp	r2, #1
 8008ba2:	6123      	str	r3, [r4, #16]
 8008ba4:	dc02      	bgt.n	8008bac <_printf_float+0x150>
 8008ba6:	6822      	ldr	r2, [r4, #0]
 8008ba8:	07d2      	lsls	r2, r2, #31
 8008baa:	d501      	bpl.n	8008bb0 <_printf_float+0x154>
 8008bac:	3301      	adds	r3, #1
 8008bae:	6123      	str	r3, [r4, #16]
 8008bb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d0a2      	beq.n	8008afe <_printf_float+0xa2>
 8008bb8:	232d      	movs	r3, #45	@ 0x2d
 8008bba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bbe:	e79e      	b.n	8008afe <_printf_float+0xa2>
 8008bc0:	9a06      	ldr	r2, [sp, #24]
 8008bc2:	2a47      	cmp	r2, #71	@ 0x47
 8008bc4:	d1c2      	bne.n	8008b4c <_printf_float+0xf0>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1c0      	bne.n	8008b4c <_printf_float+0xf0>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e7bd      	b.n	8008b4a <_printf_float+0xee>
 8008bce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008bd2:	d9db      	bls.n	8008b8c <_printf_float+0x130>
 8008bd4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008bd8:	d118      	bne.n	8008c0c <_printf_float+0x1b0>
 8008bda:	2900      	cmp	r1, #0
 8008bdc:	6863      	ldr	r3, [r4, #4]
 8008bde:	dd0b      	ble.n	8008bf8 <_printf_float+0x19c>
 8008be0:	6121      	str	r1, [r4, #16]
 8008be2:	b913      	cbnz	r3, 8008bea <_printf_float+0x18e>
 8008be4:	6822      	ldr	r2, [r4, #0]
 8008be6:	07d0      	lsls	r0, r2, #31
 8008be8:	d502      	bpl.n	8008bf0 <_printf_float+0x194>
 8008bea:	3301      	adds	r3, #1
 8008bec:	440b      	add	r3, r1
 8008bee:	6123      	str	r3, [r4, #16]
 8008bf0:	f04f 0900 	mov.w	r9, #0
 8008bf4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008bf6:	e7db      	b.n	8008bb0 <_printf_float+0x154>
 8008bf8:	b913      	cbnz	r3, 8008c00 <_printf_float+0x1a4>
 8008bfa:	6822      	ldr	r2, [r4, #0]
 8008bfc:	07d2      	lsls	r2, r2, #31
 8008bfe:	d501      	bpl.n	8008c04 <_printf_float+0x1a8>
 8008c00:	3302      	adds	r3, #2
 8008c02:	e7f4      	b.n	8008bee <_printf_float+0x192>
 8008c04:	2301      	movs	r3, #1
 8008c06:	e7f2      	b.n	8008bee <_printf_float+0x192>
 8008c08:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008c0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c0e:	4299      	cmp	r1, r3
 8008c10:	db05      	blt.n	8008c1e <_printf_float+0x1c2>
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	6121      	str	r1, [r4, #16]
 8008c16:	07d8      	lsls	r0, r3, #31
 8008c18:	d5ea      	bpl.n	8008bf0 <_printf_float+0x194>
 8008c1a:	1c4b      	adds	r3, r1, #1
 8008c1c:	e7e7      	b.n	8008bee <_printf_float+0x192>
 8008c1e:	2900      	cmp	r1, #0
 8008c20:	bfd4      	ite	le
 8008c22:	f1c1 0202 	rsble	r2, r1, #2
 8008c26:	2201      	movgt	r2, #1
 8008c28:	4413      	add	r3, r2
 8008c2a:	e7e0      	b.n	8008bee <_printf_float+0x192>
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	055a      	lsls	r2, r3, #21
 8008c30:	d407      	bmi.n	8008c42 <_printf_float+0x1e6>
 8008c32:	6923      	ldr	r3, [r4, #16]
 8008c34:	4642      	mov	r2, r8
 8008c36:	4631      	mov	r1, r6
 8008c38:	4628      	mov	r0, r5
 8008c3a:	47b8      	blx	r7
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d12b      	bne.n	8008c98 <_printf_float+0x23c>
 8008c40:	e767      	b.n	8008b12 <_printf_float+0xb6>
 8008c42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c46:	f240 80dd 	bls.w	8008e04 <_printf_float+0x3a8>
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c52:	f7f7 ff27 	bl	8000aa4 <__aeabi_dcmpeq>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d033      	beq.n	8008cc2 <_printf_float+0x266>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	4a36      	ldr	r2, [pc, #216]	@ (8008d38 <_printf_float+0x2dc>)
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b8      	blx	r7
 8008c64:	3001      	adds	r0, #1
 8008c66:	f43f af54 	beq.w	8008b12 <_printf_float+0xb6>
 8008c6a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008c6e:	4543      	cmp	r3, r8
 8008c70:	db02      	blt.n	8008c78 <_printf_float+0x21c>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	07d8      	lsls	r0, r3, #31
 8008c76:	d50f      	bpl.n	8008c98 <_printf_float+0x23c>
 8008c78:	4631      	mov	r1, r6
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c80:	47b8      	blx	r7
 8008c82:	3001      	adds	r0, #1
 8008c84:	f43f af45 	beq.w	8008b12 <_printf_float+0xb6>
 8008c88:	f04f 0900 	mov.w	r9, #0
 8008c8c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c90:	f104 0a1a 	add.w	sl, r4, #26
 8008c94:	45c8      	cmp	r8, r9
 8008c96:	dc09      	bgt.n	8008cac <_printf_float+0x250>
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	079b      	lsls	r3, r3, #30
 8008c9c:	f100 8103 	bmi.w	8008ea6 <_printf_float+0x44a>
 8008ca0:	68e0      	ldr	r0, [r4, #12]
 8008ca2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ca4:	4298      	cmp	r0, r3
 8008ca6:	bfb8      	it	lt
 8008ca8:	4618      	movlt	r0, r3
 8008caa:	e734      	b.n	8008b16 <_printf_float+0xba>
 8008cac:	2301      	movs	r3, #1
 8008cae:	4652      	mov	r2, sl
 8008cb0:	4631      	mov	r1, r6
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	47b8      	blx	r7
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	f43f af2b 	beq.w	8008b12 <_printf_float+0xb6>
 8008cbc:	f109 0901 	add.w	r9, r9, #1
 8008cc0:	e7e8      	b.n	8008c94 <_printf_float+0x238>
 8008cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	dc39      	bgt.n	8008d3c <_printf_float+0x2e0>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	4a1b      	ldr	r2, [pc, #108]	@ (8008d38 <_printf_float+0x2dc>)
 8008ccc:	4631      	mov	r1, r6
 8008cce:	4628      	mov	r0, r5
 8008cd0:	47b8      	blx	r7
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	f43f af1d 	beq.w	8008b12 <_printf_float+0xb6>
 8008cd8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008cdc:	ea59 0303 	orrs.w	r3, r9, r3
 8008ce0:	d102      	bne.n	8008ce8 <_printf_float+0x28c>
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	07d9      	lsls	r1, r3, #31
 8008ce6:	d5d7      	bpl.n	8008c98 <_printf_float+0x23c>
 8008ce8:	4631      	mov	r1, r6
 8008cea:	4628      	mov	r0, r5
 8008cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cf0:	47b8      	blx	r7
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	f43f af0d 	beq.w	8008b12 <_printf_float+0xb6>
 8008cf8:	f04f 0a00 	mov.w	sl, #0
 8008cfc:	f104 0b1a 	add.w	fp, r4, #26
 8008d00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d02:	425b      	negs	r3, r3
 8008d04:	4553      	cmp	r3, sl
 8008d06:	dc01      	bgt.n	8008d0c <_printf_float+0x2b0>
 8008d08:	464b      	mov	r3, r9
 8008d0a:	e793      	b.n	8008c34 <_printf_float+0x1d8>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	465a      	mov	r2, fp
 8008d10:	4631      	mov	r1, r6
 8008d12:	4628      	mov	r0, r5
 8008d14:	47b8      	blx	r7
 8008d16:	3001      	adds	r0, #1
 8008d18:	f43f aefb 	beq.w	8008b12 <_printf_float+0xb6>
 8008d1c:	f10a 0a01 	add.w	sl, sl, #1
 8008d20:	e7ee      	b.n	8008d00 <_printf_float+0x2a4>
 8008d22:	bf00      	nop
 8008d24:	7fefffff 	.word	0x7fefffff
 8008d28:	0800e994 	.word	0x0800e994
 8008d2c:	0800e990 	.word	0x0800e990
 8008d30:	0800e99c 	.word	0x0800e99c
 8008d34:	0800e998 	.word	0x0800e998
 8008d38:	0800ebb9 	.word	0x0800ebb9
 8008d3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d3e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d42:	4553      	cmp	r3, sl
 8008d44:	bfa8      	it	ge
 8008d46:	4653      	movge	r3, sl
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	4699      	mov	r9, r3
 8008d4c:	dc36      	bgt.n	8008dbc <_printf_float+0x360>
 8008d4e:	f04f 0b00 	mov.w	fp, #0
 8008d52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d56:	f104 021a 	add.w	r2, r4, #26
 8008d5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d5c:	9306      	str	r3, [sp, #24]
 8008d5e:	eba3 0309 	sub.w	r3, r3, r9
 8008d62:	455b      	cmp	r3, fp
 8008d64:	dc31      	bgt.n	8008dca <_printf_float+0x36e>
 8008d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d68:	459a      	cmp	sl, r3
 8008d6a:	dc3a      	bgt.n	8008de2 <_printf_float+0x386>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	07da      	lsls	r2, r3, #31
 8008d70:	d437      	bmi.n	8008de2 <_printf_float+0x386>
 8008d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d74:	ebaa 0903 	sub.w	r9, sl, r3
 8008d78:	9b06      	ldr	r3, [sp, #24]
 8008d7a:	ebaa 0303 	sub.w	r3, sl, r3
 8008d7e:	4599      	cmp	r9, r3
 8008d80:	bfa8      	it	ge
 8008d82:	4699      	movge	r9, r3
 8008d84:	f1b9 0f00 	cmp.w	r9, #0
 8008d88:	dc33      	bgt.n	8008df2 <_printf_float+0x396>
 8008d8a:	f04f 0800 	mov.w	r8, #0
 8008d8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d92:	f104 0b1a 	add.w	fp, r4, #26
 8008d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d98:	ebaa 0303 	sub.w	r3, sl, r3
 8008d9c:	eba3 0309 	sub.w	r3, r3, r9
 8008da0:	4543      	cmp	r3, r8
 8008da2:	f77f af79 	ble.w	8008c98 <_printf_float+0x23c>
 8008da6:	2301      	movs	r3, #1
 8008da8:	465a      	mov	r2, fp
 8008daa:	4631      	mov	r1, r6
 8008dac:	4628      	mov	r0, r5
 8008dae:	47b8      	blx	r7
 8008db0:	3001      	adds	r0, #1
 8008db2:	f43f aeae 	beq.w	8008b12 <_printf_float+0xb6>
 8008db6:	f108 0801 	add.w	r8, r8, #1
 8008dba:	e7ec      	b.n	8008d96 <_printf_float+0x33a>
 8008dbc:	4642      	mov	r2, r8
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	47b8      	blx	r7
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d1c2      	bne.n	8008d4e <_printf_float+0x2f2>
 8008dc8:	e6a3      	b.n	8008b12 <_printf_float+0xb6>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	4631      	mov	r1, r6
 8008dce:	4628      	mov	r0, r5
 8008dd0:	9206      	str	r2, [sp, #24]
 8008dd2:	47b8      	blx	r7
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	f43f ae9c 	beq.w	8008b12 <_printf_float+0xb6>
 8008dda:	f10b 0b01 	add.w	fp, fp, #1
 8008dde:	9a06      	ldr	r2, [sp, #24]
 8008de0:	e7bb      	b.n	8008d5a <_printf_float+0x2fe>
 8008de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008de6:	4631      	mov	r1, r6
 8008de8:	4628      	mov	r0, r5
 8008dea:	47b8      	blx	r7
 8008dec:	3001      	adds	r0, #1
 8008dee:	d1c0      	bne.n	8008d72 <_printf_float+0x316>
 8008df0:	e68f      	b.n	8008b12 <_printf_float+0xb6>
 8008df2:	9a06      	ldr	r2, [sp, #24]
 8008df4:	464b      	mov	r3, r9
 8008df6:	4631      	mov	r1, r6
 8008df8:	4628      	mov	r0, r5
 8008dfa:	4442      	add	r2, r8
 8008dfc:	47b8      	blx	r7
 8008dfe:	3001      	adds	r0, #1
 8008e00:	d1c3      	bne.n	8008d8a <_printf_float+0x32e>
 8008e02:	e686      	b.n	8008b12 <_printf_float+0xb6>
 8008e04:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e08:	f1ba 0f01 	cmp.w	sl, #1
 8008e0c:	dc01      	bgt.n	8008e12 <_printf_float+0x3b6>
 8008e0e:	07db      	lsls	r3, r3, #31
 8008e10:	d536      	bpl.n	8008e80 <_printf_float+0x424>
 8008e12:	2301      	movs	r3, #1
 8008e14:	4642      	mov	r2, r8
 8008e16:	4631      	mov	r1, r6
 8008e18:	4628      	mov	r0, r5
 8008e1a:	47b8      	blx	r7
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	f43f ae78 	beq.w	8008b12 <_printf_float+0xb6>
 8008e22:	4631      	mov	r1, r6
 8008e24:	4628      	mov	r0, r5
 8008e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e2a:	47b8      	blx	r7
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	f43f ae70 	beq.w	8008b12 <_printf_float+0xb6>
 8008e32:	2200      	movs	r2, #0
 8008e34:	2300      	movs	r3, #0
 8008e36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e3e:	f7f7 fe31 	bl	8000aa4 <__aeabi_dcmpeq>
 8008e42:	b9c0      	cbnz	r0, 8008e76 <_printf_float+0x41a>
 8008e44:	4653      	mov	r3, sl
 8008e46:	f108 0201 	add.w	r2, r8, #1
 8008e4a:	4631      	mov	r1, r6
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	47b8      	blx	r7
 8008e50:	3001      	adds	r0, #1
 8008e52:	d10c      	bne.n	8008e6e <_printf_float+0x412>
 8008e54:	e65d      	b.n	8008b12 <_printf_float+0xb6>
 8008e56:	2301      	movs	r3, #1
 8008e58:	465a      	mov	r2, fp
 8008e5a:	4631      	mov	r1, r6
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	47b8      	blx	r7
 8008e60:	3001      	adds	r0, #1
 8008e62:	f43f ae56 	beq.w	8008b12 <_printf_float+0xb6>
 8008e66:	f108 0801 	add.w	r8, r8, #1
 8008e6a:	45d0      	cmp	r8, sl
 8008e6c:	dbf3      	blt.n	8008e56 <_printf_float+0x3fa>
 8008e6e:	464b      	mov	r3, r9
 8008e70:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008e74:	e6df      	b.n	8008c36 <_printf_float+0x1da>
 8008e76:	f04f 0800 	mov.w	r8, #0
 8008e7a:	f104 0b1a 	add.w	fp, r4, #26
 8008e7e:	e7f4      	b.n	8008e6a <_printf_float+0x40e>
 8008e80:	2301      	movs	r3, #1
 8008e82:	4642      	mov	r2, r8
 8008e84:	e7e1      	b.n	8008e4a <_printf_float+0x3ee>
 8008e86:	2301      	movs	r3, #1
 8008e88:	464a      	mov	r2, r9
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	47b8      	blx	r7
 8008e90:	3001      	adds	r0, #1
 8008e92:	f43f ae3e 	beq.w	8008b12 <_printf_float+0xb6>
 8008e96:	f108 0801 	add.w	r8, r8, #1
 8008e9a:	68e3      	ldr	r3, [r4, #12]
 8008e9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e9e:	1a5b      	subs	r3, r3, r1
 8008ea0:	4543      	cmp	r3, r8
 8008ea2:	dcf0      	bgt.n	8008e86 <_printf_float+0x42a>
 8008ea4:	e6fc      	b.n	8008ca0 <_printf_float+0x244>
 8008ea6:	f04f 0800 	mov.w	r8, #0
 8008eaa:	f104 0919 	add.w	r9, r4, #25
 8008eae:	e7f4      	b.n	8008e9a <_printf_float+0x43e>

08008eb0 <_printf_common>:
 8008eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb4:	4616      	mov	r6, r2
 8008eb6:	4698      	mov	r8, r3
 8008eb8:	688a      	ldr	r2, [r1, #8]
 8008eba:	4607      	mov	r7, r0
 8008ebc:	690b      	ldr	r3, [r1, #16]
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	bfb8      	it	lt
 8008ec8:	4613      	movlt	r3, r2
 8008eca:	6033      	str	r3, [r6, #0]
 8008ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ed0:	b10a      	cbz	r2, 8008ed6 <_printf_common+0x26>
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	6033      	str	r3, [r6, #0]
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	0699      	lsls	r1, r3, #26
 8008eda:	bf42      	ittt	mi
 8008edc:	6833      	ldrmi	r3, [r6, #0]
 8008ede:	3302      	addmi	r3, #2
 8008ee0:	6033      	strmi	r3, [r6, #0]
 8008ee2:	6825      	ldr	r5, [r4, #0]
 8008ee4:	f015 0506 	ands.w	r5, r5, #6
 8008ee8:	d106      	bne.n	8008ef8 <_printf_common+0x48>
 8008eea:	f104 0a19 	add.w	sl, r4, #25
 8008eee:	68e3      	ldr	r3, [r4, #12]
 8008ef0:	6832      	ldr	r2, [r6, #0]
 8008ef2:	1a9b      	subs	r3, r3, r2
 8008ef4:	42ab      	cmp	r3, r5
 8008ef6:	dc2b      	bgt.n	8008f50 <_printf_common+0xa0>
 8008ef8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008efc:	6822      	ldr	r2, [r4, #0]
 8008efe:	3b00      	subs	r3, #0
 8008f00:	bf18      	it	ne
 8008f02:	2301      	movne	r3, #1
 8008f04:	0692      	lsls	r2, r2, #26
 8008f06:	d430      	bmi.n	8008f6a <_printf_common+0xba>
 8008f08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f0c:	4641      	mov	r1, r8
 8008f0e:	4638      	mov	r0, r7
 8008f10:	47c8      	blx	r9
 8008f12:	3001      	adds	r0, #1
 8008f14:	d023      	beq.n	8008f5e <_printf_common+0xae>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	341a      	adds	r4, #26
 8008f1a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008f1e:	f003 0306 	and.w	r3, r3, #6
 8008f22:	2b04      	cmp	r3, #4
 8008f24:	bf0a      	itet	eq
 8008f26:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8008f2a:	2500      	movne	r5, #0
 8008f2c:	6833      	ldreq	r3, [r6, #0]
 8008f2e:	f04f 0600 	mov.w	r6, #0
 8008f32:	bf08      	it	eq
 8008f34:	1aed      	subeq	r5, r5, r3
 8008f36:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008f3a:	bf08      	it	eq
 8008f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f40:	4293      	cmp	r3, r2
 8008f42:	bfc4      	itt	gt
 8008f44:	1a9b      	subgt	r3, r3, r2
 8008f46:	18ed      	addgt	r5, r5, r3
 8008f48:	42b5      	cmp	r5, r6
 8008f4a:	d11a      	bne.n	8008f82 <_printf_common+0xd2>
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	e008      	b.n	8008f62 <_printf_common+0xb2>
 8008f50:	2301      	movs	r3, #1
 8008f52:	4652      	mov	r2, sl
 8008f54:	4641      	mov	r1, r8
 8008f56:	4638      	mov	r0, r7
 8008f58:	47c8      	blx	r9
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	d103      	bne.n	8008f66 <_printf_common+0xb6>
 8008f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f66:	3501      	adds	r5, #1
 8008f68:	e7c1      	b.n	8008eee <_printf_common+0x3e>
 8008f6a:	18e1      	adds	r1, r4, r3
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	2030      	movs	r0, #48	@ 0x30
 8008f70:	3302      	adds	r3, #2
 8008f72:	4422      	add	r2, r4
 8008f74:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f80:	e7c2      	b.n	8008f08 <_printf_common+0x58>
 8008f82:	2301      	movs	r3, #1
 8008f84:	4622      	mov	r2, r4
 8008f86:	4641      	mov	r1, r8
 8008f88:	4638      	mov	r0, r7
 8008f8a:	47c8      	blx	r9
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d0e6      	beq.n	8008f5e <_printf_common+0xae>
 8008f90:	3601      	adds	r6, #1
 8008f92:	e7d9      	b.n	8008f48 <_printf_common+0x98>

08008f94 <_printf_i>:
 8008f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f98:	7e0f      	ldrb	r7, [r1, #24]
 8008f9a:	4691      	mov	r9, r2
 8008f9c:	4680      	mov	r8, r0
 8008f9e:	460c      	mov	r4, r1
 8008fa0:	2f78      	cmp	r7, #120	@ 0x78
 8008fa2:	469a      	mov	sl, r3
 8008fa4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008fa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008faa:	d807      	bhi.n	8008fbc <_printf_i+0x28>
 8008fac:	2f62      	cmp	r7, #98	@ 0x62
 8008fae:	d80a      	bhi.n	8008fc6 <_printf_i+0x32>
 8008fb0:	2f00      	cmp	r7, #0
 8008fb2:	f000 80d1 	beq.w	8009158 <_printf_i+0x1c4>
 8008fb6:	2f58      	cmp	r7, #88	@ 0x58
 8008fb8:	f000 80b8 	beq.w	800912c <_printf_i+0x198>
 8008fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fc4:	e03a      	b.n	800903c <_printf_i+0xa8>
 8008fc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fca:	2b15      	cmp	r3, #21
 8008fcc:	d8f6      	bhi.n	8008fbc <_printf_i+0x28>
 8008fce:	a101      	add	r1, pc, #4	@ (adr r1, 8008fd4 <_printf_i+0x40>)
 8008fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fd4:	0800902d 	.word	0x0800902d
 8008fd8:	08009041 	.word	0x08009041
 8008fdc:	08008fbd 	.word	0x08008fbd
 8008fe0:	08008fbd 	.word	0x08008fbd
 8008fe4:	08008fbd 	.word	0x08008fbd
 8008fe8:	08008fbd 	.word	0x08008fbd
 8008fec:	08009041 	.word	0x08009041
 8008ff0:	08008fbd 	.word	0x08008fbd
 8008ff4:	08008fbd 	.word	0x08008fbd
 8008ff8:	08008fbd 	.word	0x08008fbd
 8008ffc:	08008fbd 	.word	0x08008fbd
 8009000:	0800913f 	.word	0x0800913f
 8009004:	0800906b 	.word	0x0800906b
 8009008:	080090f9 	.word	0x080090f9
 800900c:	08008fbd 	.word	0x08008fbd
 8009010:	08008fbd 	.word	0x08008fbd
 8009014:	08009161 	.word	0x08009161
 8009018:	08008fbd 	.word	0x08008fbd
 800901c:	0800906b 	.word	0x0800906b
 8009020:	08008fbd 	.word	0x08008fbd
 8009024:	08008fbd 	.word	0x08008fbd
 8009028:	08009101 	.word	0x08009101
 800902c:	6833      	ldr	r3, [r6, #0]
 800902e:	1d1a      	adds	r2, r3, #4
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6032      	str	r2, [r6, #0]
 8009034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009038:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800903c:	2301      	movs	r3, #1
 800903e:	e09c      	b.n	800917a <_printf_i+0x1e6>
 8009040:	6833      	ldr	r3, [r6, #0]
 8009042:	6820      	ldr	r0, [r4, #0]
 8009044:	1d19      	adds	r1, r3, #4
 8009046:	6031      	str	r1, [r6, #0]
 8009048:	0606      	lsls	r6, r0, #24
 800904a:	d501      	bpl.n	8009050 <_printf_i+0xbc>
 800904c:	681d      	ldr	r5, [r3, #0]
 800904e:	e003      	b.n	8009058 <_printf_i+0xc4>
 8009050:	0645      	lsls	r5, r0, #25
 8009052:	d5fb      	bpl.n	800904c <_printf_i+0xb8>
 8009054:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009058:	2d00      	cmp	r5, #0
 800905a:	da03      	bge.n	8009064 <_printf_i+0xd0>
 800905c:	232d      	movs	r3, #45	@ 0x2d
 800905e:	426d      	negs	r5, r5
 8009060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009064:	4858      	ldr	r0, [pc, #352]	@ (80091c8 <_printf_i+0x234>)
 8009066:	230a      	movs	r3, #10
 8009068:	e011      	b.n	800908e <_printf_i+0xfa>
 800906a:	6821      	ldr	r1, [r4, #0]
 800906c:	6833      	ldr	r3, [r6, #0]
 800906e:	0608      	lsls	r0, r1, #24
 8009070:	f853 5b04 	ldr.w	r5, [r3], #4
 8009074:	d402      	bmi.n	800907c <_printf_i+0xe8>
 8009076:	0649      	lsls	r1, r1, #25
 8009078:	bf48      	it	mi
 800907a:	b2ad      	uxthmi	r5, r5
 800907c:	2f6f      	cmp	r7, #111	@ 0x6f
 800907e:	6033      	str	r3, [r6, #0]
 8009080:	4851      	ldr	r0, [pc, #324]	@ (80091c8 <_printf_i+0x234>)
 8009082:	bf14      	ite	ne
 8009084:	230a      	movne	r3, #10
 8009086:	2308      	moveq	r3, #8
 8009088:	2100      	movs	r1, #0
 800908a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800908e:	6866      	ldr	r6, [r4, #4]
 8009090:	2e00      	cmp	r6, #0
 8009092:	60a6      	str	r6, [r4, #8]
 8009094:	db05      	blt.n	80090a2 <_printf_i+0x10e>
 8009096:	6821      	ldr	r1, [r4, #0]
 8009098:	432e      	orrs	r6, r5
 800909a:	f021 0104 	bic.w	r1, r1, #4
 800909e:	6021      	str	r1, [r4, #0]
 80090a0:	d04b      	beq.n	800913a <_printf_i+0x1a6>
 80090a2:	4616      	mov	r6, r2
 80090a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80090a8:	fb03 5711 	mls	r7, r3, r1, r5
 80090ac:	5dc7      	ldrb	r7, [r0, r7]
 80090ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090b2:	462f      	mov	r7, r5
 80090b4:	460d      	mov	r5, r1
 80090b6:	42bb      	cmp	r3, r7
 80090b8:	d9f4      	bls.n	80090a4 <_printf_i+0x110>
 80090ba:	2b08      	cmp	r3, #8
 80090bc:	d10b      	bne.n	80090d6 <_printf_i+0x142>
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	07df      	lsls	r7, r3, #31
 80090c2:	d508      	bpl.n	80090d6 <_printf_i+0x142>
 80090c4:	6923      	ldr	r3, [r4, #16]
 80090c6:	6861      	ldr	r1, [r4, #4]
 80090c8:	4299      	cmp	r1, r3
 80090ca:	bfde      	ittt	le
 80090cc:	2330      	movle	r3, #48	@ 0x30
 80090ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090d6:	1b92      	subs	r2, r2, r6
 80090d8:	6122      	str	r2, [r4, #16]
 80090da:	464b      	mov	r3, r9
 80090dc:	aa03      	add	r2, sp, #12
 80090de:	4621      	mov	r1, r4
 80090e0:	4640      	mov	r0, r8
 80090e2:	f8cd a000 	str.w	sl, [sp]
 80090e6:	f7ff fee3 	bl	8008eb0 <_printf_common>
 80090ea:	3001      	adds	r0, #1
 80090ec:	d14a      	bne.n	8009184 <_printf_i+0x1f0>
 80090ee:	f04f 30ff 	mov.w	r0, #4294967295
 80090f2:	b004      	add	sp, #16
 80090f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f8:	6823      	ldr	r3, [r4, #0]
 80090fa:	f043 0320 	orr.w	r3, r3, #32
 80090fe:	6023      	str	r3, [r4, #0]
 8009100:	2778      	movs	r7, #120	@ 0x78
 8009102:	4832      	ldr	r0, [pc, #200]	@ (80091cc <_printf_i+0x238>)
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800910a:	061f      	lsls	r7, r3, #24
 800910c:	6831      	ldr	r1, [r6, #0]
 800910e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009112:	d402      	bmi.n	800911a <_printf_i+0x186>
 8009114:	065f      	lsls	r7, r3, #25
 8009116:	bf48      	it	mi
 8009118:	b2ad      	uxthmi	r5, r5
 800911a:	6031      	str	r1, [r6, #0]
 800911c:	07d9      	lsls	r1, r3, #31
 800911e:	bf44      	itt	mi
 8009120:	f043 0320 	orrmi.w	r3, r3, #32
 8009124:	6023      	strmi	r3, [r4, #0]
 8009126:	b11d      	cbz	r5, 8009130 <_printf_i+0x19c>
 8009128:	2310      	movs	r3, #16
 800912a:	e7ad      	b.n	8009088 <_printf_i+0xf4>
 800912c:	4826      	ldr	r0, [pc, #152]	@ (80091c8 <_printf_i+0x234>)
 800912e:	e7e9      	b.n	8009104 <_printf_i+0x170>
 8009130:	6823      	ldr	r3, [r4, #0]
 8009132:	f023 0320 	bic.w	r3, r3, #32
 8009136:	6023      	str	r3, [r4, #0]
 8009138:	e7f6      	b.n	8009128 <_printf_i+0x194>
 800913a:	4616      	mov	r6, r2
 800913c:	e7bd      	b.n	80090ba <_printf_i+0x126>
 800913e:	6833      	ldr	r3, [r6, #0]
 8009140:	6825      	ldr	r5, [r4, #0]
 8009142:	1d18      	adds	r0, r3, #4
 8009144:	6961      	ldr	r1, [r4, #20]
 8009146:	6030      	str	r0, [r6, #0]
 8009148:	062e      	lsls	r6, r5, #24
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	d501      	bpl.n	8009152 <_printf_i+0x1be>
 800914e:	6019      	str	r1, [r3, #0]
 8009150:	e002      	b.n	8009158 <_printf_i+0x1c4>
 8009152:	0668      	lsls	r0, r5, #25
 8009154:	d5fb      	bpl.n	800914e <_printf_i+0x1ba>
 8009156:	8019      	strh	r1, [r3, #0]
 8009158:	2300      	movs	r3, #0
 800915a:	4616      	mov	r6, r2
 800915c:	6123      	str	r3, [r4, #16]
 800915e:	e7bc      	b.n	80090da <_printf_i+0x146>
 8009160:	6833      	ldr	r3, [r6, #0]
 8009162:	2100      	movs	r1, #0
 8009164:	1d1a      	adds	r2, r3, #4
 8009166:	6032      	str	r2, [r6, #0]
 8009168:	681e      	ldr	r6, [r3, #0]
 800916a:	6862      	ldr	r2, [r4, #4]
 800916c:	4630      	mov	r0, r6
 800916e:	f001 faec 	bl	800a74a <memchr>
 8009172:	b108      	cbz	r0, 8009178 <_printf_i+0x1e4>
 8009174:	1b80      	subs	r0, r0, r6
 8009176:	6060      	str	r0, [r4, #4]
 8009178:	6863      	ldr	r3, [r4, #4]
 800917a:	6123      	str	r3, [r4, #16]
 800917c:	2300      	movs	r3, #0
 800917e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009182:	e7aa      	b.n	80090da <_printf_i+0x146>
 8009184:	6923      	ldr	r3, [r4, #16]
 8009186:	4632      	mov	r2, r6
 8009188:	4649      	mov	r1, r9
 800918a:	4640      	mov	r0, r8
 800918c:	47d0      	blx	sl
 800918e:	3001      	adds	r0, #1
 8009190:	d0ad      	beq.n	80090ee <_printf_i+0x15a>
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	079b      	lsls	r3, r3, #30
 8009196:	d413      	bmi.n	80091c0 <_printf_i+0x22c>
 8009198:	68e0      	ldr	r0, [r4, #12]
 800919a:	9b03      	ldr	r3, [sp, #12]
 800919c:	4298      	cmp	r0, r3
 800919e:	bfb8      	it	lt
 80091a0:	4618      	movlt	r0, r3
 80091a2:	e7a6      	b.n	80090f2 <_printf_i+0x15e>
 80091a4:	2301      	movs	r3, #1
 80091a6:	4632      	mov	r2, r6
 80091a8:	4649      	mov	r1, r9
 80091aa:	4640      	mov	r0, r8
 80091ac:	47d0      	blx	sl
 80091ae:	3001      	adds	r0, #1
 80091b0:	d09d      	beq.n	80090ee <_printf_i+0x15a>
 80091b2:	3501      	adds	r5, #1
 80091b4:	68e3      	ldr	r3, [r4, #12]
 80091b6:	9903      	ldr	r1, [sp, #12]
 80091b8:	1a5b      	subs	r3, r3, r1
 80091ba:	42ab      	cmp	r3, r5
 80091bc:	dcf2      	bgt.n	80091a4 <_printf_i+0x210>
 80091be:	e7eb      	b.n	8009198 <_printf_i+0x204>
 80091c0:	2500      	movs	r5, #0
 80091c2:	f104 0619 	add.w	r6, r4, #25
 80091c6:	e7f5      	b.n	80091b4 <_printf_i+0x220>
 80091c8:	0800e9a0 	.word	0x0800e9a0
 80091cc:	0800e9b1 	.word	0x0800e9b1

080091d0 <_scanf_float>:
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	b087      	sub	sp, #28
 80091d6:	4691      	mov	r9, r2
 80091d8:	4680      	mov	r8, r0
 80091da:	460c      	mov	r4, r1
 80091dc:	9303      	str	r3, [sp, #12]
 80091de:	688b      	ldr	r3, [r1, #8]
 80091e0:	1e5a      	subs	r2, r3, #1
 80091e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80091e6:	460a      	mov	r2, r1
 80091e8:	bf89      	itett	hi
 80091ea:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80091ee:	f04f 0b00 	movls.w	fp, #0
 80091f2:	eb03 0b05 	addhi.w	fp, r3, r5
 80091f6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80091fa:	f04f 0500 	mov.w	r5, #0
 80091fe:	bf88      	it	hi
 8009200:	608b      	strhi	r3, [r1, #8]
 8009202:	680b      	ldr	r3, [r1, #0]
 8009204:	46aa      	mov	sl, r5
 8009206:	462f      	mov	r7, r5
 8009208:	9502      	str	r5, [sp, #8]
 800920a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800920e:	f842 3b1c 	str.w	r3, [r2], #28
 8009212:	4616      	mov	r6, r2
 8009214:	9201      	str	r2, [sp, #4]
 8009216:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800921a:	68a2      	ldr	r2, [r4, #8]
 800921c:	b15a      	cbz	r2, 8009236 <_scanf_float+0x66>
 800921e:	f8d9 3000 	ldr.w	r3, [r9]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	2b4e      	cmp	r3, #78	@ 0x4e
 8009226:	d863      	bhi.n	80092f0 <_scanf_float+0x120>
 8009228:	2b40      	cmp	r3, #64	@ 0x40
 800922a:	d83b      	bhi.n	80092a4 <_scanf_float+0xd4>
 800922c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009230:	b2c8      	uxtb	r0, r1
 8009232:	280e      	cmp	r0, #14
 8009234:	d939      	bls.n	80092aa <_scanf_float+0xda>
 8009236:	b11f      	cbz	r7, 8009240 <_scanf_float+0x70>
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800923e:	6023      	str	r3, [r4, #0]
 8009240:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009244:	f1ba 0f01 	cmp.w	sl, #1
 8009248:	f200 8115 	bhi.w	8009476 <_scanf_float+0x2a6>
 800924c:	9b01      	ldr	r3, [sp, #4]
 800924e:	429e      	cmp	r6, r3
 8009250:	f200 8106 	bhi.w	8009460 <_scanf_float+0x290>
 8009254:	2001      	movs	r0, #1
 8009256:	b007      	add	sp, #28
 8009258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009260:	2a0d      	cmp	r2, #13
 8009262:	d8e8      	bhi.n	8009236 <_scanf_float+0x66>
 8009264:	a101      	add	r1, pc, #4	@ (adr r1, 800926c <_scanf_float+0x9c>)
 8009266:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800926a:	bf00      	nop
 800926c:	080093b5 	.word	0x080093b5
 8009270:	08009237 	.word	0x08009237
 8009274:	08009237 	.word	0x08009237
 8009278:	08009237 	.word	0x08009237
 800927c:	08009411 	.word	0x08009411
 8009280:	080093eb 	.word	0x080093eb
 8009284:	08009237 	.word	0x08009237
 8009288:	08009237 	.word	0x08009237
 800928c:	080093c3 	.word	0x080093c3
 8009290:	08009237 	.word	0x08009237
 8009294:	08009237 	.word	0x08009237
 8009298:	08009237 	.word	0x08009237
 800929c:	08009237 	.word	0x08009237
 80092a0:	0800937f 	.word	0x0800937f
 80092a4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80092a8:	e7da      	b.n	8009260 <_scanf_float+0x90>
 80092aa:	290e      	cmp	r1, #14
 80092ac:	d8c3      	bhi.n	8009236 <_scanf_float+0x66>
 80092ae:	a001      	add	r0, pc, #4	@ (adr r0, 80092b4 <_scanf_float+0xe4>)
 80092b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80092b4:	0800936f 	.word	0x0800936f
 80092b8:	08009237 	.word	0x08009237
 80092bc:	0800936f 	.word	0x0800936f
 80092c0:	080093ff 	.word	0x080093ff
 80092c4:	08009237 	.word	0x08009237
 80092c8:	08009311 	.word	0x08009311
 80092cc:	08009355 	.word	0x08009355
 80092d0:	08009355 	.word	0x08009355
 80092d4:	08009355 	.word	0x08009355
 80092d8:	08009355 	.word	0x08009355
 80092dc:	08009355 	.word	0x08009355
 80092e0:	08009355 	.word	0x08009355
 80092e4:	08009355 	.word	0x08009355
 80092e8:	08009355 	.word	0x08009355
 80092ec:	08009355 	.word	0x08009355
 80092f0:	2b6e      	cmp	r3, #110	@ 0x6e
 80092f2:	d809      	bhi.n	8009308 <_scanf_float+0x138>
 80092f4:	2b60      	cmp	r3, #96	@ 0x60
 80092f6:	d8b1      	bhi.n	800925c <_scanf_float+0x8c>
 80092f8:	2b54      	cmp	r3, #84	@ 0x54
 80092fa:	d07b      	beq.n	80093f4 <_scanf_float+0x224>
 80092fc:	2b59      	cmp	r3, #89	@ 0x59
 80092fe:	d19a      	bne.n	8009236 <_scanf_float+0x66>
 8009300:	2d07      	cmp	r5, #7
 8009302:	d198      	bne.n	8009236 <_scanf_float+0x66>
 8009304:	2508      	movs	r5, #8
 8009306:	e02f      	b.n	8009368 <_scanf_float+0x198>
 8009308:	2b74      	cmp	r3, #116	@ 0x74
 800930a:	d073      	beq.n	80093f4 <_scanf_float+0x224>
 800930c:	2b79      	cmp	r3, #121	@ 0x79
 800930e:	e7f6      	b.n	80092fe <_scanf_float+0x12e>
 8009310:	6821      	ldr	r1, [r4, #0]
 8009312:	05c8      	lsls	r0, r1, #23
 8009314:	d51e      	bpl.n	8009354 <_scanf_float+0x184>
 8009316:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800931a:	3701      	adds	r7, #1
 800931c:	6021      	str	r1, [r4, #0]
 800931e:	f1bb 0f00 	cmp.w	fp, #0
 8009322:	d003      	beq.n	800932c <_scanf_float+0x15c>
 8009324:	3201      	adds	r2, #1
 8009326:	f10b 3bff 	add.w	fp, fp, #4294967295
 800932a:	60a2      	str	r2, [r4, #8]
 800932c:	68a3      	ldr	r3, [r4, #8]
 800932e:	3b01      	subs	r3, #1
 8009330:	60a3      	str	r3, [r4, #8]
 8009332:	6923      	ldr	r3, [r4, #16]
 8009334:	3301      	adds	r3, #1
 8009336:	6123      	str	r3, [r4, #16]
 8009338:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800933c:	3b01      	subs	r3, #1
 800933e:	2b00      	cmp	r3, #0
 8009340:	f8c9 3004 	str.w	r3, [r9, #4]
 8009344:	f340 8083 	ble.w	800944e <_scanf_float+0x27e>
 8009348:	f8d9 3000 	ldr.w	r3, [r9]
 800934c:	3301      	adds	r3, #1
 800934e:	f8c9 3000 	str.w	r3, [r9]
 8009352:	e762      	b.n	800921a <_scanf_float+0x4a>
 8009354:	eb1a 0105 	adds.w	r1, sl, r5
 8009358:	f47f af6d 	bne.w	8009236 <_scanf_float+0x66>
 800935c:	6822      	ldr	r2, [r4, #0]
 800935e:	460d      	mov	r5, r1
 8009360:	468a      	mov	sl, r1
 8009362:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009366:	6022      	str	r2, [r4, #0]
 8009368:	f806 3b01 	strb.w	r3, [r6], #1
 800936c:	e7de      	b.n	800932c <_scanf_float+0x15c>
 800936e:	6822      	ldr	r2, [r4, #0]
 8009370:	0610      	lsls	r0, r2, #24
 8009372:	f57f af60 	bpl.w	8009236 <_scanf_float+0x66>
 8009376:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800937a:	6022      	str	r2, [r4, #0]
 800937c:	e7f4      	b.n	8009368 <_scanf_float+0x198>
 800937e:	f1ba 0f00 	cmp.w	sl, #0
 8009382:	d10c      	bne.n	800939e <_scanf_float+0x1ce>
 8009384:	b977      	cbnz	r7, 80093a4 <_scanf_float+0x1d4>
 8009386:	6822      	ldr	r2, [r4, #0]
 8009388:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800938c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009390:	d108      	bne.n	80093a4 <_scanf_float+0x1d4>
 8009392:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009396:	f04f 0a01 	mov.w	sl, #1
 800939a:	6022      	str	r2, [r4, #0]
 800939c:	e7e4      	b.n	8009368 <_scanf_float+0x198>
 800939e:	f1ba 0f02 	cmp.w	sl, #2
 80093a2:	d051      	beq.n	8009448 <_scanf_float+0x278>
 80093a4:	2d01      	cmp	r5, #1
 80093a6:	d002      	beq.n	80093ae <_scanf_float+0x1de>
 80093a8:	2d04      	cmp	r5, #4
 80093aa:	f47f af44 	bne.w	8009236 <_scanf_float+0x66>
 80093ae:	3501      	adds	r5, #1
 80093b0:	b2ed      	uxtb	r5, r5
 80093b2:	e7d9      	b.n	8009368 <_scanf_float+0x198>
 80093b4:	f1ba 0f01 	cmp.w	sl, #1
 80093b8:	f47f af3d 	bne.w	8009236 <_scanf_float+0x66>
 80093bc:	f04f 0a02 	mov.w	sl, #2
 80093c0:	e7d2      	b.n	8009368 <_scanf_float+0x198>
 80093c2:	b975      	cbnz	r5, 80093e2 <_scanf_float+0x212>
 80093c4:	2f00      	cmp	r7, #0
 80093c6:	f47f af37 	bne.w	8009238 <_scanf_float+0x68>
 80093ca:	6822      	ldr	r2, [r4, #0]
 80093cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80093d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80093d4:	f040 8103 	bne.w	80095de <_scanf_float+0x40e>
 80093d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80093dc:	2501      	movs	r5, #1
 80093de:	6022      	str	r2, [r4, #0]
 80093e0:	e7c2      	b.n	8009368 <_scanf_float+0x198>
 80093e2:	2d03      	cmp	r5, #3
 80093e4:	d0e3      	beq.n	80093ae <_scanf_float+0x1de>
 80093e6:	2d05      	cmp	r5, #5
 80093e8:	e7df      	b.n	80093aa <_scanf_float+0x1da>
 80093ea:	2d02      	cmp	r5, #2
 80093ec:	f47f af23 	bne.w	8009236 <_scanf_float+0x66>
 80093f0:	2503      	movs	r5, #3
 80093f2:	e7b9      	b.n	8009368 <_scanf_float+0x198>
 80093f4:	2d06      	cmp	r5, #6
 80093f6:	f47f af1e 	bne.w	8009236 <_scanf_float+0x66>
 80093fa:	2507      	movs	r5, #7
 80093fc:	e7b4      	b.n	8009368 <_scanf_float+0x198>
 80093fe:	6822      	ldr	r2, [r4, #0]
 8009400:	0591      	lsls	r1, r2, #22
 8009402:	f57f af18 	bpl.w	8009236 <_scanf_float+0x66>
 8009406:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800940a:	9702      	str	r7, [sp, #8]
 800940c:	6022      	str	r2, [r4, #0]
 800940e:	e7ab      	b.n	8009368 <_scanf_float+0x198>
 8009410:	6822      	ldr	r2, [r4, #0]
 8009412:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009416:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800941a:	d005      	beq.n	8009428 <_scanf_float+0x258>
 800941c:	0550      	lsls	r0, r2, #21
 800941e:	f57f af0a 	bpl.w	8009236 <_scanf_float+0x66>
 8009422:	2f00      	cmp	r7, #0
 8009424:	f000 80db 	beq.w	80095de <_scanf_float+0x40e>
 8009428:	0591      	lsls	r1, r2, #22
 800942a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800942e:	bf58      	it	pl
 8009430:	9902      	ldrpl	r1, [sp, #8]
 8009432:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009436:	bf58      	it	pl
 8009438:	1a79      	subpl	r1, r7, r1
 800943a:	6022      	str	r2, [r4, #0]
 800943c:	f04f 0700 	mov.w	r7, #0
 8009440:	bf58      	it	pl
 8009442:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009446:	e78f      	b.n	8009368 <_scanf_float+0x198>
 8009448:	f04f 0a03 	mov.w	sl, #3
 800944c:	e78c      	b.n	8009368 <_scanf_float+0x198>
 800944e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009452:	4649      	mov	r1, r9
 8009454:	4640      	mov	r0, r8
 8009456:	4798      	blx	r3
 8009458:	2800      	cmp	r0, #0
 800945a:	f43f aede 	beq.w	800921a <_scanf_float+0x4a>
 800945e:	e6ea      	b.n	8009236 <_scanf_float+0x66>
 8009460:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009464:	464a      	mov	r2, r9
 8009466:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800946a:	4640      	mov	r0, r8
 800946c:	4798      	blx	r3
 800946e:	6923      	ldr	r3, [r4, #16]
 8009470:	3b01      	subs	r3, #1
 8009472:	6123      	str	r3, [r4, #16]
 8009474:	e6ea      	b.n	800924c <_scanf_float+0x7c>
 8009476:	1e6b      	subs	r3, r5, #1
 8009478:	2b06      	cmp	r3, #6
 800947a:	d824      	bhi.n	80094c6 <_scanf_float+0x2f6>
 800947c:	2d02      	cmp	r5, #2
 800947e:	d836      	bhi.n	80094ee <_scanf_float+0x31e>
 8009480:	9b01      	ldr	r3, [sp, #4]
 8009482:	429e      	cmp	r6, r3
 8009484:	f67f aee6 	bls.w	8009254 <_scanf_float+0x84>
 8009488:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800948c:	464a      	mov	r2, r9
 800948e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009492:	4640      	mov	r0, r8
 8009494:	4798      	blx	r3
 8009496:	6923      	ldr	r3, [r4, #16]
 8009498:	3b01      	subs	r3, #1
 800949a:	6123      	str	r3, [r4, #16]
 800949c:	e7f0      	b.n	8009480 <_scanf_float+0x2b0>
 800949e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80094a2:	464a      	mov	r2, r9
 80094a4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80094a8:	4640      	mov	r0, r8
 80094aa:	4798      	blx	r3
 80094ac:	6923      	ldr	r3, [r4, #16]
 80094ae:	3b01      	subs	r3, #1
 80094b0:	6123      	str	r3, [r4, #16]
 80094b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094b6:	fa5f fa8a 	uxtb.w	sl, sl
 80094ba:	f1ba 0f02 	cmp.w	sl, #2
 80094be:	d1ee      	bne.n	800949e <_scanf_float+0x2ce>
 80094c0:	3d03      	subs	r5, #3
 80094c2:	b2ed      	uxtb	r5, r5
 80094c4:	1b76      	subs	r6, r6, r5
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	05da      	lsls	r2, r3, #23
 80094ca:	d52f      	bpl.n	800952c <_scanf_float+0x35c>
 80094cc:	055b      	lsls	r3, r3, #21
 80094ce:	d511      	bpl.n	80094f4 <_scanf_float+0x324>
 80094d0:	9b01      	ldr	r3, [sp, #4]
 80094d2:	429e      	cmp	r6, r3
 80094d4:	f67f aebe 	bls.w	8009254 <_scanf_float+0x84>
 80094d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80094dc:	464a      	mov	r2, r9
 80094de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094e2:	4640      	mov	r0, r8
 80094e4:	4798      	blx	r3
 80094e6:	6923      	ldr	r3, [r4, #16]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	6123      	str	r3, [r4, #16]
 80094ec:	e7f0      	b.n	80094d0 <_scanf_float+0x300>
 80094ee:	46aa      	mov	sl, r5
 80094f0:	46b3      	mov	fp, r6
 80094f2:	e7de      	b.n	80094b2 <_scanf_float+0x2e2>
 80094f4:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80094f8:	1e75      	subs	r5, r6, #1
 80094fa:	6923      	ldr	r3, [r4, #16]
 80094fc:	2965      	cmp	r1, #101	@ 0x65
 80094fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8009502:	6123      	str	r3, [r4, #16]
 8009504:	d00c      	beq.n	8009520 <_scanf_float+0x350>
 8009506:	2945      	cmp	r1, #69	@ 0x45
 8009508:	d00a      	beq.n	8009520 <_scanf_float+0x350>
 800950a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800950e:	464a      	mov	r2, r9
 8009510:	4640      	mov	r0, r8
 8009512:	1eb5      	subs	r5, r6, #2
 8009514:	4798      	blx	r3
 8009516:	6923      	ldr	r3, [r4, #16]
 8009518:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800951c:	3b01      	subs	r3, #1
 800951e:	6123      	str	r3, [r4, #16]
 8009520:	462e      	mov	r6, r5
 8009522:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009526:	464a      	mov	r2, r9
 8009528:	4640      	mov	r0, r8
 800952a:	4798      	blx	r3
 800952c:	6822      	ldr	r2, [r4, #0]
 800952e:	f012 0210 	ands.w	r2, r2, #16
 8009532:	d001      	beq.n	8009538 <_scanf_float+0x368>
 8009534:	2000      	movs	r0, #0
 8009536:	e68e      	b.n	8009256 <_scanf_float+0x86>
 8009538:	7032      	strb	r2, [r6, #0]
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009544:	d125      	bne.n	8009592 <_scanf_float+0x3c2>
 8009546:	9b02      	ldr	r3, [sp, #8]
 8009548:	429f      	cmp	r7, r3
 800954a:	d00a      	beq.n	8009562 <_scanf_float+0x392>
 800954c:	1bda      	subs	r2, r3, r7
 800954e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009552:	4924      	ldr	r1, [pc, #144]	@ (80095e4 <_scanf_float+0x414>)
 8009554:	429e      	cmp	r6, r3
 8009556:	bf28      	it	cs
 8009558:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800955c:	4630      	mov	r0, r6
 800955e:	f000 f93d 	bl	80097dc <siprintf>
 8009562:	2200      	movs	r2, #0
 8009564:	9901      	ldr	r1, [sp, #4]
 8009566:	4640      	mov	r0, r8
 8009568:	f003 fb92 	bl	800cc90 <_strtod_r>
 800956c:	6821      	ldr	r1, [r4, #0]
 800956e:	9b03      	ldr	r3, [sp, #12]
 8009570:	f011 0f02 	tst.w	r1, #2
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	ec57 6b10 	vmov	r6, r7, d0
 800957a:	f103 0204 	add.w	r2, r3, #4
 800957e:	d015      	beq.n	80095ac <_scanf_float+0x3dc>
 8009580:	9903      	ldr	r1, [sp, #12]
 8009582:	600a      	str	r2, [r1, #0]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	e9c3 6700 	strd	r6, r7, [r3]
 800958a:	68e3      	ldr	r3, [r4, #12]
 800958c:	3301      	adds	r3, #1
 800958e:	60e3      	str	r3, [r4, #12]
 8009590:	e7d0      	b.n	8009534 <_scanf_float+0x364>
 8009592:	9b04      	ldr	r3, [sp, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d0e4      	beq.n	8009562 <_scanf_float+0x392>
 8009598:	9905      	ldr	r1, [sp, #20]
 800959a:	230a      	movs	r3, #10
 800959c:	4640      	mov	r0, r8
 800959e:	3101      	adds	r1, #1
 80095a0:	f003 fbf6 	bl	800cd90 <_strtol_r>
 80095a4:	9b04      	ldr	r3, [sp, #16]
 80095a6:	9e05      	ldr	r6, [sp, #20]
 80095a8:	1ac2      	subs	r2, r0, r3
 80095aa:	e7d0      	b.n	800954e <_scanf_float+0x37e>
 80095ac:	f011 0f04 	tst.w	r1, #4
 80095b0:	9903      	ldr	r1, [sp, #12]
 80095b2:	600a      	str	r2, [r1, #0]
 80095b4:	d1e6      	bne.n	8009584 <_scanf_float+0x3b4>
 80095b6:	681d      	ldr	r5, [r3, #0]
 80095b8:	4632      	mov	r2, r6
 80095ba:	463b      	mov	r3, r7
 80095bc:	4630      	mov	r0, r6
 80095be:	4639      	mov	r1, r7
 80095c0:	f7f7 faa2 	bl	8000b08 <__aeabi_dcmpun>
 80095c4:	b128      	cbz	r0, 80095d2 <_scanf_float+0x402>
 80095c6:	4808      	ldr	r0, [pc, #32]	@ (80095e8 <_scanf_float+0x418>)
 80095c8:	f001 f8ce 	bl	800a768 <nanf>
 80095cc:	ed85 0a00 	vstr	s0, [r5]
 80095d0:	e7db      	b.n	800958a <_scanf_float+0x3ba>
 80095d2:	4630      	mov	r0, r6
 80095d4:	4639      	mov	r1, r7
 80095d6:	f7f7 faf5 	bl	8000bc4 <__aeabi_d2f>
 80095da:	6028      	str	r0, [r5, #0]
 80095dc:	e7d5      	b.n	800958a <_scanf_float+0x3ba>
 80095de:	2700      	movs	r7, #0
 80095e0:	e62e      	b.n	8009240 <_scanf_float+0x70>
 80095e2:	bf00      	nop
 80095e4:	0800e9c2 	.word	0x0800e9c2
 80095e8:	0800eac0 	.word	0x0800eac0

080095ec <std>:
 80095ec:	2300      	movs	r3, #0
 80095ee:	b510      	push	{r4, lr}
 80095f0:	4604      	mov	r4, r0
 80095f2:	6083      	str	r3, [r0, #8]
 80095f4:	8181      	strh	r1, [r0, #12]
 80095f6:	4619      	mov	r1, r3
 80095f8:	6643      	str	r3, [r0, #100]	@ 0x64
 80095fa:	81c2      	strh	r2, [r0, #14]
 80095fc:	2208      	movs	r2, #8
 80095fe:	6183      	str	r3, [r0, #24]
 8009600:	e9c0 3300 	strd	r3, r3, [r0]
 8009604:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009608:	305c      	adds	r0, #92	@ 0x5c
 800960a:	f000 f97a 	bl	8009902 <memset>
 800960e:	4b0d      	ldr	r3, [pc, #52]	@ (8009644 <std+0x58>)
 8009610:	6224      	str	r4, [r4, #32]
 8009612:	6263      	str	r3, [r4, #36]	@ 0x24
 8009614:	4b0c      	ldr	r3, [pc, #48]	@ (8009648 <std+0x5c>)
 8009616:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009618:	4b0c      	ldr	r3, [pc, #48]	@ (800964c <std+0x60>)
 800961a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800961c:	4b0c      	ldr	r3, [pc, #48]	@ (8009650 <std+0x64>)
 800961e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009620:	4b0c      	ldr	r3, [pc, #48]	@ (8009654 <std+0x68>)
 8009622:	429c      	cmp	r4, r3
 8009624:	d006      	beq.n	8009634 <std+0x48>
 8009626:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800962a:	4294      	cmp	r4, r2
 800962c:	d002      	beq.n	8009634 <std+0x48>
 800962e:	33d0      	adds	r3, #208	@ 0xd0
 8009630:	429c      	cmp	r4, r3
 8009632:	d105      	bne.n	8009640 <std+0x54>
 8009634:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800963c:	f001 b878 	b.w	800a730 <__retarget_lock_init_recursive>
 8009640:	bd10      	pop	{r4, pc}
 8009642:	bf00      	nop
 8009644:	08009879 	.word	0x08009879
 8009648:	0800989f 	.word	0x0800989f
 800964c:	080098d7 	.word	0x080098d7
 8009650:	080098fb 	.word	0x080098fb
 8009654:	2000044c 	.word	0x2000044c

08009658 <stdio_exit_handler>:
 8009658:	4a02      	ldr	r2, [pc, #8]	@ (8009664 <stdio_exit_handler+0xc>)
 800965a:	4903      	ldr	r1, [pc, #12]	@ (8009668 <stdio_exit_handler+0x10>)
 800965c:	4803      	ldr	r0, [pc, #12]	@ (800966c <stdio_exit_handler+0x14>)
 800965e:	f000 b869 	b.w	8009734 <_fwalk_sglue>
 8009662:	bf00      	nop
 8009664:	2000002c 	.word	0x2000002c
 8009668:	0800d879 	.word	0x0800d879
 800966c:	20000044 	.word	0x20000044

08009670 <cleanup_stdio>:
 8009670:	6841      	ldr	r1, [r0, #4]
 8009672:	4b0c      	ldr	r3, [pc, #48]	@ (80096a4 <cleanup_stdio+0x34>)
 8009674:	4299      	cmp	r1, r3
 8009676:	b510      	push	{r4, lr}
 8009678:	4604      	mov	r4, r0
 800967a:	d001      	beq.n	8009680 <cleanup_stdio+0x10>
 800967c:	f004 f8fc 	bl	800d878 <_fflush_r>
 8009680:	68a1      	ldr	r1, [r4, #8]
 8009682:	4b09      	ldr	r3, [pc, #36]	@ (80096a8 <cleanup_stdio+0x38>)
 8009684:	4299      	cmp	r1, r3
 8009686:	d002      	beq.n	800968e <cleanup_stdio+0x1e>
 8009688:	4620      	mov	r0, r4
 800968a:	f004 f8f5 	bl	800d878 <_fflush_r>
 800968e:	68e1      	ldr	r1, [r4, #12]
 8009690:	4b06      	ldr	r3, [pc, #24]	@ (80096ac <cleanup_stdio+0x3c>)
 8009692:	4299      	cmp	r1, r3
 8009694:	d004      	beq.n	80096a0 <cleanup_stdio+0x30>
 8009696:	4620      	mov	r0, r4
 8009698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800969c:	f004 b8ec 	b.w	800d878 <_fflush_r>
 80096a0:	bd10      	pop	{r4, pc}
 80096a2:	bf00      	nop
 80096a4:	2000044c 	.word	0x2000044c
 80096a8:	200004b4 	.word	0x200004b4
 80096ac:	2000051c 	.word	0x2000051c

080096b0 <global_stdio_init.part.0>:
 80096b0:	b510      	push	{r4, lr}
 80096b2:	4b0b      	ldr	r3, [pc, #44]	@ (80096e0 <global_stdio_init.part.0+0x30>)
 80096b4:	2104      	movs	r1, #4
 80096b6:	4c0b      	ldr	r4, [pc, #44]	@ (80096e4 <global_stdio_init.part.0+0x34>)
 80096b8:	4a0b      	ldr	r2, [pc, #44]	@ (80096e8 <global_stdio_init.part.0+0x38>)
 80096ba:	4620      	mov	r0, r4
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	2200      	movs	r2, #0
 80096c0:	f7ff ff94 	bl	80095ec <std>
 80096c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80096c8:	2201      	movs	r2, #1
 80096ca:	2109      	movs	r1, #9
 80096cc:	f7ff ff8e 	bl	80095ec <std>
 80096d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80096d4:	2202      	movs	r2, #2
 80096d6:	2112      	movs	r1, #18
 80096d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096dc:	f7ff bf86 	b.w	80095ec <std>
 80096e0:	20000584 	.word	0x20000584
 80096e4:	2000044c 	.word	0x2000044c
 80096e8:	08009659 	.word	0x08009659

080096ec <__sfp_lock_acquire>:
 80096ec:	4801      	ldr	r0, [pc, #4]	@ (80096f4 <__sfp_lock_acquire+0x8>)
 80096ee:	f001 b821 	b.w	800a734 <__retarget_lock_acquire_recursive>
 80096f2:	bf00      	nop
 80096f4:	200005b3 	.word	0x200005b3

080096f8 <__sfp_lock_release>:
 80096f8:	4801      	ldr	r0, [pc, #4]	@ (8009700 <__sfp_lock_release+0x8>)
 80096fa:	f001 b81d 	b.w	800a738 <__retarget_lock_release_recursive>
 80096fe:	bf00      	nop
 8009700:	200005b3 	.word	0x200005b3

08009704 <__sinit>:
 8009704:	b510      	push	{r4, lr}
 8009706:	4604      	mov	r4, r0
 8009708:	f7ff fff0 	bl	80096ec <__sfp_lock_acquire>
 800970c:	6a23      	ldr	r3, [r4, #32]
 800970e:	b11b      	cbz	r3, 8009718 <__sinit+0x14>
 8009710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009714:	f7ff bff0 	b.w	80096f8 <__sfp_lock_release>
 8009718:	4b04      	ldr	r3, [pc, #16]	@ (800972c <__sinit+0x28>)
 800971a:	6223      	str	r3, [r4, #32]
 800971c:	4b04      	ldr	r3, [pc, #16]	@ (8009730 <__sinit+0x2c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1f5      	bne.n	8009710 <__sinit+0xc>
 8009724:	f7ff ffc4 	bl	80096b0 <global_stdio_init.part.0>
 8009728:	e7f2      	b.n	8009710 <__sinit+0xc>
 800972a:	bf00      	nop
 800972c:	08009671 	.word	0x08009671
 8009730:	20000584 	.word	0x20000584

08009734 <_fwalk_sglue>:
 8009734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009738:	4607      	mov	r7, r0
 800973a:	4688      	mov	r8, r1
 800973c:	4614      	mov	r4, r2
 800973e:	2600      	movs	r6, #0
 8009740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009744:	f1b9 0901 	subs.w	r9, r9, #1
 8009748:	d505      	bpl.n	8009756 <_fwalk_sglue+0x22>
 800974a:	6824      	ldr	r4, [r4, #0]
 800974c:	2c00      	cmp	r4, #0
 800974e:	d1f7      	bne.n	8009740 <_fwalk_sglue+0xc>
 8009750:	4630      	mov	r0, r6
 8009752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009756:	89ab      	ldrh	r3, [r5, #12]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d907      	bls.n	800976c <_fwalk_sglue+0x38>
 800975c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009760:	3301      	adds	r3, #1
 8009762:	d003      	beq.n	800976c <_fwalk_sglue+0x38>
 8009764:	4629      	mov	r1, r5
 8009766:	4638      	mov	r0, r7
 8009768:	47c0      	blx	r8
 800976a:	4306      	orrs	r6, r0
 800976c:	3568      	adds	r5, #104	@ 0x68
 800976e:	e7e9      	b.n	8009744 <_fwalk_sglue+0x10>

08009770 <sniprintf>:
 8009770:	b40c      	push	{r2, r3}
 8009772:	4b19      	ldr	r3, [pc, #100]	@ (80097d8 <sniprintf+0x68>)
 8009774:	b530      	push	{r4, r5, lr}
 8009776:	1e0c      	subs	r4, r1, #0
 8009778:	b09d      	sub	sp, #116	@ 0x74
 800977a:	681d      	ldr	r5, [r3, #0]
 800977c:	da08      	bge.n	8009790 <sniprintf+0x20>
 800977e:	238b      	movs	r3, #139	@ 0x8b
 8009780:	f04f 30ff 	mov.w	r0, #4294967295
 8009784:	602b      	str	r3, [r5, #0]
 8009786:	b01d      	add	sp, #116	@ 0x74
 8009788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800978c:	b002      	add	sp, #8
 800978e:	4770      	bx	lr
 8009790:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009794:	9002      	str	r0, [sp, #8]
 8009796:	9006      	str	r0, [sp, #24]
 8009798:	a902      	add	r1, sp, #8
 800979a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800979e:	f04f 0300 	mov.w	r3, #0
 80097a2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80097a4:	4628      	mov	r0, r5
 80097a6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80097a8:	bf14      	ite	ne
 80097aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80097ae:	4623      	moveq	r3, r4
 80097b0:	9304      	str	r3, [sp, #16]
 80097b2:	9307      	str	r3, [sp, #28]
 80097b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80097b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80097bc:	ab21      	add	r3, sp, #132	@ 0x84
 80097be:	9301      	str	r3, [sp, #4]
 80097c0:	f003 fbbe 	bl	800cf40 <_svfiprintf_r>
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	bfbc      	itt	lt
 80097c8:	238b      	movlt	r3, #139	@ 0x8b
 80097ca:	602b      	strlt	r3, [r5, #0]
 80097cc:	2c00      	cmp	r4, #0
 80097ce:	d0da      	beq.n	8009786 <sniprintf+0x16>
 80097d0:	9b02      	ldr	r3, [sp, #8]
 80097d2:	2200      	movs	r2, #0
 80097d4:	701a      	strb	r2, [r3, #0]
 80097d6:	e7d6      	b.n	8009786 <sniprintf+0x16>
 80097d8:	20000040 	.word	0x20000040

080097dc <siprintf>:
 80097dc:	b40e      	push	{r1, r2, r3}
 80097de:	b510      	push	{r4, lr}
 80097e0:	b09d      	sub	sp, #116	@ 0x74
 80097e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80097e6:	2400      	movs	r4, #0
 80097e8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80097ea:	9002      	str	r0, [sp, #8]
 80097ec:	9006      	str	r0, [sp, #24]
 80097ee:	9107      	str	r1, [sp, #28]
 80097f0:	9104      	str	r1, [sp, #16]
 80097f2:	4809      	ldr	r0, [pc, #36]	@ (8009818 <siprintf+0x3c>)
 80097f4:	4909      	ldr	r1, [pc, #36]	@ (800981c <siprintf+0x40>)
 80097f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80097fa:	9105      	str	r1, [sp, #20]
 80097fc:	a902      	add	r1, sp, #8
 80097fe:	6800      	ldr	r0, [r0, #0]
 8009800:	9301      	str	r3, [sp, #4]
 8009802:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009804:	f003 fb9c 	bl	800cf40 <_svfiprintf_r>
 8009808:	9b02      	ldr	r3, [sp, #8]
 800980a:	701c      	strb	r4, [r3, #0]
 800980c:	b01d      	add	sp, #116	@ 0x74
 800980e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009812:	b003      	add	sp, #12
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	20000040 	.word	0x20000040
 800981c:	ffff0208 	.word	0xffff0208

08009820 <siscanf>:
 8009820:	b40e      	push	{r1, r2, r3}
 8009822:	b570      	push	{r4, r5, r6, lr}
 8009824:	b09d      	sub	sp, #116	@ 0x74
 8009826:	2500      	movs	r5, #0
 8009828:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800982c:	ac21      	add	r4, sp, #132	@ 0x84
 800982e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8009830:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009834:	f854 6b04 	ldr.w	r6, [r4], #4
 8009838:	9002      	str	r0, [sp, #8]
 800983a:	9006      	str	r0, [sp, #24]
 800983c:	f7f6 fd06 	bl	800024c <strlen>
 8009840:	4b0b      	ldr	r3, [pc, #44]	@ (8009870 <siscanf+0x50>)
 8009842:	4632      	mov	r2, r6
 8009844:	9003      	str	r0, [sp, #12]
 8009846:	a902      	add	r1, sp, #8
 8009848:	930b      	str	r3, [sp, #44]	@ 0x2c
 800984a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800984e:	9007      	str	r0, [sp, #28]
 8009850:	4808      	ldr	r0, [pc, #32]	@ (8009874 <siscanf+0x54>)
 8009852:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009856:	4623      	mov	r3, r4
 8009858:	6800      	ldr	r0, [r0, #0]
 800985a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800985c:	9514      	str	r5, [sp, #80]	@ 0x50
 800985e:	9401      	str	r4, [sp, #4]
 8009860:	f003 fcc4 	bl	800d1ec <__ssvfiscanf_r>
 8009864:	b01d      	add	sp, #116	@ 0x74
 8009866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800986a:	b003      	add	sp, #12
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	0800989b 	.word	0x0800989b
 8009874:	20000040 	.word	0x20000040

08009878 <__sread>:
 8009878:	b510      	push	{r4, lr}
 800987a:	460c      	mov	r4, r1
 800987c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009880:	f000 ff08 	bl	800a694 <_read_r>
 8009884:	2800      	cmp	r0, #0
 8009886:	bfab      	itete	ge
 8009888:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800988a:	89a3      	ldrhlt	r3, [r4, #12]
 800988c:	181b      	addge	r3, r3, r0
 800988e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009892:	bfac      	ite	ge
 8009894:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009896:	81a3      	strhlt	r3, [r4, #12]
 8009898:	bd10      	pop	{r4, pc}

0800989a <__seofread>:
 800989a:	2000      	movs	r0, #0
 800989c:	4770      	bx	lr

0800989e <__swrite>:
 800989e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a2:	461f      	mov	r7, r3
 80098a4:	898b      	ldrh	r3, [r1, #12]
 80098a6:	4605      	mov	r5, r0
 80098a8:	460c      	mov	r4, r1
 80098aa:	05db      	lsls	r3, r3, #23
 80098ac:	4616      	mov	r6, r2
 80098ae:	d505      	bpl.n	80098bc <__swrite+0x1e>
 80098b0:	2302      	movs	r3, #2
 80098b2:	2200      	movs	r2, #0
 80098b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b8:	f000 feda 	bl	800a670 <_lseek_r>
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	4632      	mov	r2, r6
 80098c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098c4:	4628      	mov	r0, r5
 80098c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098ca:	81a3      	strh	r3, [r4, #12]
 80098cc:	463b      	mov	r3, r7
 80098ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098d2:	f000 bef1 	b.w	800a6b8 <_write_r>

080098d6 <__sseek>:
 80098d6:	b510      	push	{r4, lr}
 80098d8:	460c      	mov	r4, r1
 80098da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098de:	f000 fec7 	bl	800a670 <_lseek_r>
 80098e2:	1c43      	adds	r3, r0, #1
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	bf15      	itete	ne
 80098e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80098ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80098ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80098f2:	81a3      	strheq	r3, [r4, #12]
 80098f4:	bf18      	it	ne
 80098f6:	81a3      	strhne	r3, [r4, #12]
 80098f8:	bd10      	pop	{r4, pc}

080098fa <__sclose>:
 80098fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098fe:	f000 bea7 	b.w	800a650 <_close_r>

08009902 <memset>:
 8009902:	4402      	add	r2, r0
 8009904:	4603      	mov	r3, r0
 8009906:	4293      	cmp	r3, r2
 8009908:	d100      	bne.n	800990c <memset+0xa>
 800990a:	4770      	bx	lr
 800990c:	f803 1b01 	strb.w	r1, [r3], #1
 8009910:	e7f9      	b.n	8009906 <memset+0x4>

08009912 <strstr>:
 8009912:	780a      	ldrb	r2, [r1, #0]
 8009914:	b570      	push	{r4, r5, r6, lr}
 8009916:	b96a      	cbnz	r2, 8009934 <strstr+0x22>
 8009918:	bd70      	pop	{r4, r5, r6, pc}
 800991a:	429a      	cmp	r2, r3
 800991c:	d109      	bne.n	8009932 <strstr+0x20>
 800991e:	460c      	mov	r4, r1
 8009920:	4605      	mov	r5, r0
 8009922:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009926:	2b00      	cmp	r3, #0
 8009928:	d0f6      	beq.n	8009918 <strstr+0x6>
 800992a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800992e:	429e      	cmp	r6, r3
 8009930:	d0f7      	beq.n	8009922 <strstr+0x10>
 8009932:	3001      	adds	r0, #1
 8009934:	7803      	ldrb	r3, [r0, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1ef      	bne.n	800991a <strstr+0x8>
 800993a:	4618      	mov	r0, r3
 800993c:	e7ec      	b.n	8009918 <strstr+0x6>
	...

08009940 <localtime>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	4b0b      	ldr	r3, [pc, #44]	@ (8009970 <localtime+0x30>)
 8009944:	4604      	mov	r4, r0
 8009946:	681d      	ldr	r5, [r3, #0]
 8009948:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800994a:	b953      	cbnz	r3, 8009962 <localtime+0x22>
 800994c:	2024      	movs	r0, #36	@ 0x24
 800994e:	f001 fe27 	bl	800b5a0 <malloc>
 8009952:	4602      	mov	r2, r0
 8009954:	6368      	str	r0, [r5, #52]	@ 0x34
 8009956:	b920      	cbnz	r0, 8009962 <localtime+0x22>
 8009958:	4b06      	ldr	r3, [pc, #24]	@ (8009974 <localtime+0x34>)
 800995a:	2132      	movs	r1, #50	@ 0x32
 800995c:	4806      	ldr	r0, [pc, #24]	@ (8009978 <localtime+0x38>)
 800995e:	f000 ff09 	bl	800a774 <__assert_func>
 8009962:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8009964:	4620      	mov	r0, r4
 8009966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800996a:	f000 b807 	b.w	800997c <localtime_r>
 800996e:	bf00      	nop
 8009970:	20000040 	.word	0x20000040
 8009974:	0800e9c7 	.word	0x0800e9c7
 8009978:	0800e9de 	.word	0x0800e9de

0800997c <localtime_r>:
 800997c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009980:	460c      	mov	r4, r1
 8009982:	4607      	mov	r7, r0
 8009984:	f004 f84e 	bl	800da24 <__gettzinfo>
 8009988:	4605      	mov	r5, r0
 800998a:	4621      	mov	r1, r4
 800998c:	4638      	mov	r0, r7
 800998e:	f004 f84d 	bl	800da2c <gmtime_r>
 8009992:	6943      	ldr	r3, [r0, #20]
 8009994:	4604      	mov	r4, r0
 8009996:	0799      	lsls	r1, r3, #30
 8009998:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 800999c:	d106      	bne.n	80099ac <localtime_r+0x30>
 800999e:	2264      	movs	r2, #100	@ 0x64
 80099a0:	fb98 f3f2 	sdiv	r3, r8, r2
 80099a4:	fb02 8313 	mls	r3, r2, r3, r8
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d171      	bne.n	8009a90 <localtime_r+0x114>
 80099ac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80099b0:	fb98 f3f2 	sdiv	r3, r8, r2
 80099b4:	fb02 8313 	mls	r3, r2, r3, r8
 80099b8:	fab3 f383 	clz	r3, r3
 80099bc:	095b      	lsrs	r3, r3, #5
 80099be:	425e      	negs	r6, r3
 80099c0:	4b64      	ldr	r3, [pc, #400]	@ (8009b54 <localtime_r+0x1d8>)
 80099c2:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 80099c6:	441e      	add	r6, r3
 80099c8:	f000 fc08 	bl	800a1dc <__tz_lock>
 80099cc:	f000 fc12 	bl	800a1f4 <_tzset_unlocked>
 80099d0:	4b61      	ldr	r3, [pc, #388]	@ (8009b58 <localtime_r+0x1dc>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d06a      	beq.n	8009aae <localtime_r+0x132>
 80099d8:	686b      	ldr	r3, [r5, #4]
 80099da:	4543      	cmp	r3, r8
 80099dc:	d15a      	bne.n	8009a94 <localtime_r+0x118>
 80099de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099e2:	682f      	ldr	r7, [r5, #0]
 80099e4:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80099e8:	2f00      	cmp	r7, #0
 80099ea:	d15b      	bne.n	8009aa4 <localtime_r+0x128>
 80099ec:	4282      	cmp	r2, r0
 80099ee:	eb73 0101 	sbcs.w	r1, r3, r1
 80099f2:	db5e      	blt.n	8009ab2 <localtime_r+0x136>
 80099f4:	2301      	movs	r3, #1
 80099f6:	6223      	str	r3, [r4, #32]
 80099f8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80099fa:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80099fe:	6861      	ldr	r1, [r4, #4]
 8009a00:	fb93 f0f2 	sdiv	r0, r3, r2
 8009a04:	fb02 3310 	mls	r3, r2, r0, r3
 8009a08:	223c      	movs	r2, #60	@ 0x3c
 8009a0a:	fb93 f5f2 	sdiv	r5, r3, r2
 8009a0e:	fb02 3215 	mls	r2, r2, r5, r3
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	1b49      	subs	r1, r1, r5
 8009a16:	1a9b      	subs	r3, r3, r2
 8009a18:	68a2      	ldr	r2, [r4, #8]
 8009a1a:	6061      	str	r1, [r4, #4]
 8009a1c:	1a12      	subs	r2, r2, r0
 8009a1e:	2b3b      	cmp	r3, #59	@ 0x3b
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	60a2      	str	r2, [r4, #8]
 8009a24:	dd51      	ble.n	8009aca <localtime_r+0x14e>
 8009a26:	3101      	adds	r1, #1
 8009a28:	3b3c      	subs	r3, #60	@ 0x3c
 8009a2a:	6061      	str	r1, [r4, #4]
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	6863      	ldr	r3, [r4, #4]
 8009a30:	2b3b      	cmp	r3, #59	@ 0x3b
 8009a32:	dd50      	ble.n	8009ad6 <localtime_r+0x15a>
 8009a34:	3201      	adds	r2, #1
 8009a36:	3b3c      	subs	r3, #60	@ 0x3c
 8009a38:	60a2      	str	r2, [r4, #8]
 8009a3a:	6063      	str	r3, [r4, #4]
 8009a3c:	68a3      	ldr	r3, [r4, #8]
 8009a3e:	2b17      	cmp	r3, #23
 8009a40:	dd4f      	ble.n	8009ae2 <localtime_r+0x166>
 8009a42:	69e2      	ldr	r2, [r4, #28]
 8009a44:	3b18      	subs	r3, #24
 8009a46:	3201      	adds	r2, #1
 8009a48:	60a3      	str	r3, [r4, #8]
 8009a4a:	6923      	ldr	r3, [r4, #16]
 8009a4c:	61e2      	str	r2, [r4, #28]
 8009a4e:	69a2      	ldr	r2, [r4, #24]
 8009a50:	3201      	adds	r2, #1
 8009a52:	2a07      	cmp	r2, #7
 8009a54:	bfa8      	it	ge
 8009a56:	2200      	movge	r2, #0
 8009a58:	61a2      	str	r2, [r4, #24]
 8009a5a:	68e2      	ldr	r2, [r4, #12]
 8009a5c:	3201      	adds	r2, #1
 8009a5e:	60e2      	str	r2, [r4, #12]
 8009a60:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8009a64:	428a      	cmp	r2, r1
 8009a66:	dd0e      	ble.n	8009a86 <localtime_r+0x10a>
 8009a68:	2b0b      	cmp	r3, #11
 8009a6a:	eba2 0201 	sub.w	r2, r2, r1
 8009a6e:	60e2      	str	r2, [r4, #12]
 8009a70:	f103 0201 	add.w	r2, r3, #1
 8009a74:	bf05      	ittet	eq
 8009a76:	6963      	ldreq	r3, [r4, #20]
 8009a78:	2200      	moveq	r2, #0
 8009a7a:	6122      	strne	r2, [r4, #16]
 8009a7c:	3301      	addeq	r3, #1
 8009a7e:	bf02      	ittt	eq
 8009a80:	6122      	streq	r2, [r4, #16]
 8009a82:	61e2      	streq	r2, [r4, #28]
 8009a84:	6163      	streq	r3, [r4, #20]
 8009a86:	f000 fbaf 	bl	800a1e8 <__tz_unlock>
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a90:	2301      	movs	r3, #1
 8009a92:	e794      	b.n	80099be <localtime_r+0x42>
 8009a94:	4640      	mov	r0, r8
 8009a96:	f000 faed 	bl	800a074 <__tzcalc_limits>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	d19f      	bne.n	80099de <localtime_r+0x62>
 8009a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa2:	e004      	b.n	8009aae <localtime_r+0x132>
 8009aa4:	4282      	cmp	r2, r0
 8009aa6:	eb73 0101 	sbcs.w	r1, r3, r1
 8009aaa:	da02      	bge.n	8009ab2 <localtime_r+0x136>
 8009aac:	2300      	movs	r3, #0
 8009aae:	6223      	str	r3, [r4, #32]
 8009ab0:	e009      	b.n	8009ac6 <localtime_r+0x14a>
 8009ab2:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8009ab6:	4282      	cmp	r2, r0
 8009ab8:	418b      	sbcs	r3, r1
 8009aba:	bfb4      	ite	lt
 8009abc:	2301      	movlt	r3, #1
 8009abe:	2300      	movge	r3, #0
 8009ac0:	6223      	str	r3, [r4, #32]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d198      	bne.n	80099f8 <localtime_r+0x7c>
 8009ac6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8009ac8:	e797      	b.n	80099fa <localtime_r+0x7e>
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	daaf      	bge.n	8009a2e <localtime_r+0xb2>
 8009ace:	3901      	subs	r1, #1
 8009ad0:	333c      	adds	r3, #60	@ 0x3c
 8009ad2:	6061      	str	r1, [r4, #4]
 8009ad4:	e7aa      	b.n	8009a2c <localtime_r+0xb0>
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	dab0      	bge.n	8009a3c <localtime_r+0xc0>
 8009ada:	3a01      	subs	r2, #1
 8009adc:	333c      	adds	r3, #60	@ 0x3c
 8009ade:	60a2      	str	r2, [r4, #8]
 8009ae0:	e7ab      	b.n	8009a3a <localtime_r+0xbe>
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	dacf      	bge.n	8009a86 <localtime_r+0x10a>
 8009ae6:	69e2      	ldr	r2, [r4, #28]
 8009ae8:	3318      	adds	r3, #24
 8009aea:	3a01      	subs	r2, #1
 8009aec:	60a3      	str	r3, [r4, #8]
 8009aee:	61e2      	str	r2, [r4, #28]
 8009af0:	69a2      	ldr	r2, [r4, #24]
 8009af2:	3a01      	subs	r2, #1
 8009af4:	bf48      	it	mi
 8009af6:	2206      	movmi	r2, #6
 8009af8:	61a2      	str	r2, [r4, #24]
 8009afa:	68e2      	ldr	r2, [r4, #12]
 8009afc:	3a01      	subs	r2, #1
 8009afe:	60e2      	str	r2, [r4, #12]
 8009b00:	2a00      	cmp	r2, #0
 8009b02:	d1c0      	bne.n	8009a86 <localtime_r+0x10a>
 8009b04:	6923      	ldr	r3, [r4, #16]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	d405      	bmi.n	8009b16 <localtime_r+0x19a>
 8009b0a:	6123      	str	r3, [r4, #16]
 8009b0c:	6923      	ldr	r3, [r4, #16]
 8009b0e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009b12:	60e3      	str	r3, [r4, #12]
 8009b14:	e7b7      	b.n	8009a86 <localtime_r+0x10a>
 8009b16:	230b      	movs	r3, #11
 8009b18:	6123      	str	r3, [r4, #16]
 8009b1a:	6963      	ldr	r3, [r4, #20]
 8009b1c:	1e5a      	subs	r2, r3, #1
 8009b1e:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8009b22:	6162      	str	r2, [r4, #20]
 8009b24:	0792      	lsls	r2, r2, #30
 8009b26:	d105      	bne.n	8009b34 <localtime_r+0x1b8>
 8009b28:	2164      	movs	r1, #100	@ 0x64
 8009b2a:	fb93 f2f1 	sdiv	r2, r3, r1
 8009b2e:	fb01 3212 	mls	r2, r1, r2, r3
 8009b32:	b962      	cbnz	r2, 8009b4e <localtime_r+0x1d2>
 8009b34:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009b38:	fb93 f1f2 	sdiv	r1, r3, r2
 8009b3c:	fb02 3311 	mls	r3, r2, r1, r3
 8009b40:	fab3 f383 	clz	r3, r3
 8009b44:	095b      	lsrs	r3, r3, #5
 8009b46:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8009b4a:	61e3      	str	r3, [r4, #28]
 8009b4c:	e7de      	b.n	8009b0c <localtime_r+0x190>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e7f9      	b.n	8009b46 <localtime_r+0x1ca>
 8009b52:	bf00      	nop
 8009b54:	0800ec88 	.word	0x0800ec88
 8009b58:	200005a8 	.word	0x200005a8

08009b5c <validate_structure>:
 8009b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b5e:	6801      	ldr	r1, [r0, #0]
 8009b60:	4604      	mov	r4, r0
 8009b62:	293b      	cmp	r1, #59	@ 0x3b
 8009b64:	d911      	bls.n	8009b8a <validate_structure+0x2e>
 8009b66:	223c      	movs	r2, #60	@ 0x3c
 8009b68:	4668      	mov	r0, sp
 8009b6a:	f000 fe21 	bl	800a7b0 <div>
 8009b6e:	9a01      	ldr	r2, [sp, #4]
 8009b70:	6863      	ldr	r3, [r4, #4]
 8009b72:	9900      	ldr	r1, [sp, #0]
 8009b74:	2a00      	cmp	r2, #0
 8009b76:	440b      	add	r3, r1
 8009b78:	bfb4      	ite	lt
 8009b7a:	323c      	addlt	r2, #60	@ 0x3c
 8009b7c:	6022      	strge	r2, [r4, #0]
 8009b7e:	6063      	str	r3, [r4, #4]
 8009b80:	bfbe      	ittt	lt
 8009b82:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009b86:	6022      	strlt	r2, [r4, #0]
 8009b88:	6063      	strlt	r3, [r4, #4]
 8009b8a:	6861      	ldr	r1, [r4, #4]
 8009b8c:	293b      	cmp	r1, #59	@ 0x3b
 8009b8e:	d911      	bls.n	8009bb4 <validate_structure+0x58>
 8009b90:	223c      	movs	r2, #60	@ 0x3c
 8009b92:	4668      	mov	r0, sp
 8009b94:	f000 fe0c 	bl	800a7b0 <div>
 8009b98:	9a01      	ldr	r2, [sp, #4]
 8009b9a:	68a3      	ldr	r3, [r4, #8]
 8009b9c:	9900      	ldr	r1, [sp, #0]
 8009b9e:	2a00      	cmp	r2, #0
 8009ba0:	440b      	add	r3, r1
 8009ba2:	bfb4      	ite	lt
 8009ba4:	323c      	addlt	r2, #60	@ 0x3c
 8009ba6:	6062      	strge	r2, [r4, #4]
 8009ba8:	60a3      	str	r3, [r4, #8]
 8009baa:	bfbe      	ittt	lt
 8009bac:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009bb0:	6062      	strlt	r2, [r4, #4]
 8009bb2:	60a3      	strlt	r3, [r4, #8]
 8009bb4:	68a1      	ldr	r1, [r4, #8]
 8009bb6:	2917      	cmp	r1, #23
 8009bb8:	d911      	bls.n	8009bde <validate_structure+0x82>
 8009bba:	2218      	movs	r2, #24
 8009bbc:	4668      	mov	r0, sp
 8009bbe:	f000 fdf7 	bl	800a7b0 <div>
 8009bc2:	9a01      	ldr	r2, [sp, #4]
 8009bc4:	68e3      	ldr	r3, [r4, #12]
 8009bc6:	9900      	ldr	r1, [sp, #0]
 8009bc8:	2a00      	cmp	r2, #0
 8009bca:	440b      	add	r3, r1
 8009bcc:	bfb4      	ite	lt
 8009bce:	3218      	addlt	r2, #24
 8009bd0:	60a2      	strge	r2, [r4, #8]
 8009bd2:	60e3      	str	r3, [r4, #12]
 8009bd4:	bfbe      	ittt	lt
 8009bd6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009bda:	60a2      	strlt	r2, [r4, #8]
 8009bdc:	60e3      	strlt	r3, [r4, #12]
 8009bde:	6921      	ldr	r1, [r4, #16]
 8009be0:	290b      	cmp	r1, #11
 8009be2:	d911      	bls.n	8009c08 <validate_structure+0xac>
 8009be4:	220c      	movs	r2, #12
 8009be6:	4668      	mov	r0, sp
 8009be8:	f000 fde2 	bl	800a7b0 <div>
 8009bec:	9a01      	ldr	r2, [sp, #4]
 8009bee:	6963      	ldr	r3, [r4, #20]
 8009bf0:	9900      	ldr	r1, [sp, #0]
 8009bf2:	2a00      	cmp	r2, #0
 8009bf4:	440b      	add	r3, r1
 8009bf6:	bfb4      	ite	lt
 8009bf8:	320c      	addlt	r2, #12
 8009bfa:	6122      	strge	r2, [r4, #16]
 8009bfc:	6163      	str	r3, [r4, #20]
 8009bfe:	bfbe      	ittt	lt
 8009c00:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009c04:	6122      	strlt	r2, [r4, #16]
 8009c06:	6163      	strlt	r3, [r4, #20]
 8009c08:	6963      	ldr	r3, [r4, #20]
 8009c0a:	079a      	lsls	r2, r3, #30
 8009c0c:	d11c      	bne.n	8009c48 <validate_structure+0xec>
 8009c0e:	2164      	movs	r1, #100	@ 0x64
 8009c10:	fb93 f2f1 	sdiv	r2, r3, r1
 8009c14:	fb01 3212 	mls	r2, r1, r2, r3
 8009c18:	b9c2      	cbnz	r2, 8009c4c <validate_structure+0xf0>
 8009c1a:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8009c1e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009c22:	fb93 f1f2 	sdiv	r1, r3, r2
 8009c26:	fb02 3311 	mls	r3, r2, r1, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	bf0c      	ite	eq
 8009c2e:	231d      	moveq	r3, #29
 8009c30:	231c      	movne	r3, #28
 8009c32:	68e2      	ldr	r2, [r4, #12]
 8009c34:	2a00      	cmp	r2, #0
 8009c36:	dc0b      	bgt.n	8009c50 <validate_structure+0xf4>
 8009c38:	200b      	movs	r0, #11
 8009c3a:	2164      	movs	r1, #100	@ 0x64
 8009c3c:	4d30      	ldr	r5, [pc, #192]	@ (8009d00 <validate_structure+0x1a4>)
 8009c3e:	68e6      	ldr	r6, [r4, #12]
 8009c40:	2e00      	cmp	r6, #0
 8009c42:	dd30      	ble.n	8009ca6 <validate_structure+0x14a>
 8009c44:	b003      	add	sp, #12
 8009c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c48:	231c      	movs	r3, #28
 8009c4a:	e7f2      	b.n	8009c32 <validate_structure+0xd6>
 8009c4c:	231d      	movs	r3, #29
 8009c4e:	e7f0      	b.n	8009c32 <validate_structure+0xd6>
 8009c50:	4d2b      	ldr	r5, [pc, #172]	@ (8009d00 <validate_structure+0x1a4>)
 8009c52:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8009c56:	2a01      	cmp	r2, #1
 8009c58:	bf14      	ite	ne
 8009c5a:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8009c5e:	4618      	moveq	r0, r3
 8009c60:	4281      	cmp	r1, r0
 8009c62:	ddef      	ble.n	8009c44 <validate_structure+0xe8>
 8009c64:	3201      	adds	r2, #1
 8009c66:	1a09      	subs	r1, r1, r0
 8009c68:	2a0c      	cmp	r2, #12
 8009c6a:	60e1      	str	r1, [r4, #12]
 8009c6c:	6122      	str	r2, [r4, #16]
 8009c6e:	d1f0      	bne.n	8009c52 <validate_structure+0xf6>
 8009c70:	6963      	ldr	r3, [r4, #20]
 8009c72:	2100      	movs	r1, #0
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	6121      	str	r1, [r4, #16]
 8009c78:	0791      	lsls	r1, r2, #30
 8009c7a:	6162      	str	r2, [r4, #20]
 8009c7c:	d13c      	bne.n	8009cf8 <validate_structure+0x19c>
 8009c7e:	2164      	movs	r1, #100	@ 0x64
 8009c80:	fb92 f0f1 	sdiv	r0, r2, r1
 8009c84:	fb01 2210 	mls	r2, r1, r0, r2
 8009c88:	2a00      	cmp	r2, #0
 8009c8a:	d137      	bne.n	8009cfc <validate_structure+0x1a0>
 8009c8c:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8009c90:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009c94:	fb93 f1f2 	sdiv	r1, r3, r2
 8009c98:	fb02 3311 	mls	r3, r2, r1, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	bf0c      	ite	eq
 8009ca0:	231d      	moveq	r3, #29
 8009ca2:	231c      	movne	r3, #28
 8009ca4:	e7d5      	b.n	8009c52 <validate_structure+0xf6>
 8009ca6:	6922      	ldr	r2, [r4, #16]
 8009ca8:	3a01      	subs	r2, #1
 8009caa:	6122      	str	r2, [r4, #16]
 8009cac:	3201      	adds	r2, #1
 8009cae:	d116      	bne.n	8009cde <validate_structure+0x182>
 8009cb0:	6963      	ldr	r3, [r4, #20]
 8009cb2:	1e5a      	subs	r2, r3, #1
 8009cb4:	0797      	lsls	r7, r2, #30
 8009cb6:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8009cba:	d119      	bne.n	8009cf0 <validate_structure+0x194>
 8009cbc:	fb92 f7f1 	sdiv	r7, r2, r1
 8009cc0:	fb01 2217 	mls	r2, r1, r7, r2
 8009cc4:	b9b2      	cbnz	r2, 8009cf4 <validate_structure+0x198>
 8009cc6:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8009cca:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009cce:	fb93 f7f2 	sdiv	r7, r3, r2
 8009cd2:	fb02 3317 	mls	r3, r2, r7, r3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	bf0c      	ite	eq
 8009cda:	231d      	moveq	r3, #29
 8009cdc:	231c      	movne	r3, #28
 8009cde:	6922      	ldr	r2, [r4, #16]
 8009ce0:	2a01      	cmp	r2, #1
 8009ce2:	bf14      	ite	ne
 8009ce4:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8009ce8:	461a      	moveq	r2, r3
 8009cea:	4432      	add	r2, r6
 8009cec:	60e2      	str	r2, [r4, #12]
 8009cee:	e7a6      	b.n	8009c3e <validate_structure+0xe2>
 8009cf0:	231c      	movs	r3, #28
 8009cf2:	e7f4      	b.n	8009cde <validate_structure+0x182>
 8009cf4:	231d      	movs	r3, #29
 8009cf6:	e7f2      	b.n	8009cde <validate_structure+0x182>
 8009cf8:	231c      	movs	r3, #28
 8009cfa:	e7aa      	b.n	8009c52 <validate_structure+0xf6>
 8009cfc:	231d      	movs	r3, #29
 8009cfe:	e7a8      	b.n	8009c52 <validate_structure+0xf6>
 8009d00:	0800ec58 	.word	0x0800ec58

08009d04 <mktime>:
 8009d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	4607      	mov	r7, r0
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	f003 fe8a 	bl	800da24 <__gettzinfo>
 8009d10:	4681      	mov	r9, r0
 8009d12:	4638      	mov	r0, r7
 8009d14:	f7ff ff22 	bl	8009b5c <validate_structure>
 8009d18:	223c      	movs	r2, #60	@ 0x3c
 8009d1a:	697d      	ldr	r5, [r7, #20]
 8009d1c:	e9d7 4300 	ldrd	r4, r3, [r7]
 8009d20:	fb02 4403 	mla	r4, r2, r3, r4
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8009d2a:	fb02 4403 	mla	r4, r2, r3, r4
 8009d2e:	4ac4      	ldr	r2, [pc, #784]	@ (800a040 <mktime+0x33c>)
 8009d30:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8009d34:	3e01      	subs	r6, #1
 8009d36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	4416      	add	r6, r2
 8009d3e:	dd11      	ble.n	8009d64 <mktime+0x60>
 8009d40:	07a9      	lsls	r1, r5, #30
 8009d42:	d10f      	bne.n	8009d64 <mktime+0x60>
 8009d44:	2264      	movs	r2, #100	@ 0x64
 8009d46:	fb95 f3f2 	sdiv	r3, r5, r2
 8009d4a:	fb02 5313 	mls	r3, r2, r3, r5
 8009d4e:	b943      	cbnz	r3, 8009d62 <mktime+0x5e>
 8009d50:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8009d54:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009d58:	fb93 f1f2 	sdiv	r1, r3, r2
 8009d5c:	fb02 3311 	mls	r3, r2, r1, r3
 8009d60:	b903      	cbnz	r3, 8009d64 <mktime+0x60>
 8009d62:	3601      	adds	r6, #1
 8009d64:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8009d68:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8009d6c:	61fe      	str	r6, [r7, #28]
 8009d6e:	3310      	adds	r3, #16
 8009d70:	4293      	cmp	r3, r2
 8009d72:	f200 8170 	bhi.w	800a056 <mktime+0x352>
 8009d76:	2d46      	cmp	r5, #70	@ 0x46
 8009d78:	f340 80b6 	ble.w	8009ee8 <mktime+0x1e4>
 8009d7c:	2346      	movs	r3, #70	@ 0x46
 8009d7e:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8009d82:	2164      	movs	r1, #100	@ 0x64
 8009d84:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8009d88:	079a      	lsls	r2, r3, #30
 8009d8a:	f040 80a7 	bne.w	8009edc <mktime+0x1d8>
 8009d8e:	fb93 f2f1 	sdiv	r2, r3, r1
 8009d92:	fb01 3212 	mls	r2, r1, r2, r3
 8009d96:	2a00      	cmp	r2, #0
 8009d98:	f040 80a3 	bne.w	8009ee2 <mktime+0x1de>
 8009d9c:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8009da0:	fb92 fef0 	sdiv	lr, r2, r0
 8009da4:	fb00 221e 	mls	r2, r0, lr, r2
 8009da8:	2a00      	cmp	r2, #0
 8009daa:	bf0c      	ite	eq
 8009dac:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8009db0:	4662      	movne	r2, ip
 8009db2:	3301      	adds	r3, #1
 8009db4:	4416      	add	r6, r2
 8009db6:	429d      	cmp	r5, r3
 8009db8:	d1e6      	bne.n	8009d88 <mktime+0x84>
 8009dba:	4ba2      	ldr	r3, [pc, #648]	@ (800a044 <mktime+0x340>)
 8009dbc:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8009dc0:	fbc6 4803 	smlal	r4, r8, r6, r3
 8009dc4:	f000 fa0a 	bl	800a1dc <__tz_lock>
 8009dc8:	f000 fa14 	bl	800a1f4 <_tzset_unlocked>
 8009dcc:	4b9e      	ldr	r3, [pc, #632]	@ (800a048 <mktime+0x344>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f000 8147 	beq.w	800a064 <mktime+0x360>
 8009dd6:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8009dda:	6978      	ldr	r0, [r7, #20]
 8009ddc:	4653      	mov	r3, sl
 8009dde:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	bfa8      	it	ge
 8009de6:	2301      	movge	r3, #1
 8009de8:	9301      	str	r3, [sp, #4]
 8009dea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009dee:	4283      	cmp	r3, r0
 8009df0:	f040 80bd 	bne.w	8009f6e <mktime+0x26a>
 8009df4:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8009df8:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8009dfc:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8009e00:	1a13      	subs	r3, r2, r0
 8009e02:	9303      	str	r3, [sp, #12]
 8009e04:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8009e08:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8009e0c:	9302      	str	r3, [sp, #8]
 8009e0e:	9a02      	ldr	r2, [sp, #8]
 8009e10:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8009e14:	ebb2 0e03 	subs.w	lr, r2, r3
 8009e18:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8009e1c:	4574      	cmp	r4, lr
 8009e1e:	eb78 0201 	sbcs.w	r2, r8, r1
 8009e22:	f280 80c7 	bge.w	8009fb4 <mktime+0x2b0>
 8009e26:	f8d9 2000 	ldr.w	r2, [r9]
 8009e2a:	2a00      	cmp	r2, #0
 8009e2c:	f000 80d0 	beq.w	8009fd0 <mktime+0x2cc>
 8009e30:	9a03      	ldr	r2, [sp, #12]
 8009e32:	4294      	cmp	r4, r2
 8009e34:	eb78 020b 	sbcs.w	r2, r8, fp
 8009e38:	f2c0 8111 	blt.w	800a05e <mktime+0x35a>
 8009e3c:	4574      	cmp	r4, lr
 8009e3e:	eb78 0101 	sbcs.w	r1, r8, r1
 8009e42:	bfb4      	ite	lt
 8009e44:	f04f 0b01 	movlt.w	fp, #1
 8009e48:	f04f 0b00 	movge.w	fp, #0
 8009e4c:	f1ba 0f00 	cmp.w	sl, #0
 8009e50:	f2c0 8094 	blt.w	8009f7c <mktime+0x278>
 8009e54:	9a01      	ldr	r2, [sp, #4]
 8009e56:	ea82 0a0b 	eor.w	sl, r2, fp
 8009e5a:	f1ba 0f01 	cmp.w	sl, #1
 8009e5e:	f040 808d 	bne.w	8009f7c <mktime+0x278>
 8009e62:	f1bb 0f00 	cmp.w	fp, #0
 8009e66:	f000 80c2 	beq.w	8009fee <mktime+0x2ea>
 8009e6a:	1a1b      	subs	r3, r3, r0
 8009e6c:	683a      	ldr	r2, [r7, #0]
 8009e6e:	191c      	adds	r4, r3, r4
 8009e70:	4638      	mov	r0, r7
 8009e72:	441a      	add	r2, r3
 8009e74:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8009e78:	603a      	str	r2, [r7, #0]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	9201      	str	r2, [sp, #4]
 8009e7e:	f7ff fe6d 	bl	8009b5c <validate_structure>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	9a01      	ldr	r2, [sp, #4]
 8009e86:	1a9b      	subs	r3, r3, r2
 8009e88:	d078      	beq.n	8009f7c <mktime+0x278>
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	f300 80b1 	bgt.w	8009ff2 <mktime+0x2ee>
 8009e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e94:	bfa8      	it	ge
 8009e96:	469a      	movge	sl, r3
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	4456      	add	r6, sl
 8009e9c:	eb1a 0303 	adds.w	r3, sl, r3
 8009ea0:	f140 80b0 	bpl.w	800a004 <mktime+0x300>
 8009ea4:	1e6b      	subs	r3, r5, #1
 8009ea6:	0799      	lsls	r1, r3, #30
 8009ea8:	f040 80a6 	bne.w	8009ff8 <mktime+0x2f4>
 8009eac:	2264      	movs	r2, #100	@ 0x64
 8009eae:	fb93 f1f2 	sdiv	r1, r3, r2
 8009eb2:	fb02 3311 	mls	r3, r2, r1, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f040 80a1 	bne.w	8009ffe <mktime+0x2fa>
 8009ebc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8009ec0:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8009ec4:	fb95 f2f3 	sdiv	r2, r5, r3
 8009ec8:	fb03 5512 	mls	r5, r3, r2, r5
 8009ecc:	f240 136d 	movw	r3, #365	@ 0x16d
 8009ed0:	2d00      	cmp	r5, #0
 8009ed2:	bf18      	it	ne
 8009ed4:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8009ed8:	61fb      	str	r3, [r7, #28]
 8009eda:	e04f      	b.n	8009f7c <mktime+0x278>
 8009edc:	f240 126d 	movw	r2, #365	@ 0x16d
 8009ee0:	e767      	b.n	8009db2 <mktime+0xae>
 8009ee2:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8009ee6:	e764      	b.n	8009db2 <mktime+0xae>
 8009ee8:	f43f af67 	beq.w	8009dba <mktime+0xb6>
 8009eec:	2345      	movs	r3, #69	@ 0x45
 8009eee:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8009ef2:	2164      	movs	r1, #100	@ 0x64
 8009ef4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8009ef8:	e012      	b.n	8009f20 <mktime+0x21c>
 8009efa:	bb62      	cbnz	r2, 8009f56 <mktime+0x252>
 8009efc:	fb93 f2f1 	sdiv	r2, r3, r1
 8009f00:	fb01 3212 	mls	r2, r1, r2, r3
 8009f04:	bb52      	cbnz	r2, 8009f5c <mktime+0x258>
 8009f06:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8009f0a:	fb92 fef0 	sdiv	lr, r2, r0
 8009f0e:	fb00 221e 	mls	r2, r0, lr, r2
 8009f12:	2a00      	cmp	r2, #0
 8009f14:	bf0c      	ite	eq
 8009f16:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8009f1a:	4662      	movne	r2, ip
 8009f1c:	1ab6      	subs	r6, r6, r2
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	429d      	cmp	r5, r3
 8009f22:	f003 0203 	and.w	r2, r3, #3
 8009f26:	dbe8      	blt.n	8009efa <mktime+0x1f6>
 8009f28:	b9da      	cbnz	r2, 8009f62 <mktime+0x25e>
 8009f2a:	2264      	movs	r2, #100	@ 0x64
 8009f2c:	fb95 f3f2 	sdiv	r3, r5, r2
 8009f30:	fb02 5313 	mls	r3, r2, r3, r5
 8009f34:	b9c3      	cbnz	r3, 8009f68 <mktime+0x264>
 8009f36:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8009f3a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009f3e:	fb93 f1f2 	sdiv	r1, r3, r2
 8009f42:	fb02 3311 	mls	r3, r2, r1, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f240 136d 	movw	r3, #365	@ 0x16d
 8009f4c:	bf08      	it	eq
 8009f4e:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8009f52:	1af6      	subs	r6, r6, r3
 8009f54:	e731      	b.n	8009dba <mktime+0xb6>
 8009f56:	f240 126d 	movw	r2, #365	@ 0x16d
 8009f5a:	e7df      	b.n	8009f1c <mktime+0x218>
 8009f5c:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8009f60:	e7dc      	b.n	8009f1c <mktime+0x218>
 8009f62:	f240 136d 	movw	r3, #365	@ 0x16d
 8009f66:	e7f4      	b.n	8009f52 <mktime+0x24e>
 8009f68:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8009f6c:	e7f1      	b.n	8009f52 <mktime+0x24e>
 8009f6e:	f000 f881 	bl	800a074 <__tzcalc_limits>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	f47f af3e 	bne.w	8009df4 <mktime+0xf0>
 8009f78:	f8dd b004 	ldr.w	fp, [sp, #4]
 8009f7c:	f1bb 0f01 	cmp.w	fp, #1
 8009f80:	d172      	bne.n	800a068 <mktime+0x364>
 8009f82:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8009f86:	f04f 0b01 	mov.w	fp, #1
 8009f8a:	191c      	adds	r4, r3, r4
 8009f8c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8009f90:	f000 f92a 	bl	800a1e8 <__tz_unlock>
 8009f94:	3604      	adds	r6, #4
 8009f96:	2307      	movs	r3, #7
 8009f98:	fb96 f3f3 	sdiv	r3, r6, r3
 8009f9c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009fa0:	1af6      	subs	r6, r6, r3
 8009fa2:	d456      	bmi.n	800a052 <mktime+0x34e>
 8009fa4:	f8c7 b020 	str.w	fp, [r7, #32]
 8009fa8:	61be      	str	r6, [r7, #24]
 8009faa:	4620      	mov	r0, r4
 8009fac:	4641      	mov	r1, r8
 8009fae:	b005      	add	sp, #20
 8009fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb4:	9a02      	ldr	r2, [sp, #8]
 8009fb6:	1a12      	subs	r2, r2, r0
 8009fb8:	9202      	str	r2, [sp, #8]
 8009fba:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8009fbe:	eb6c 0c02 	sbc.w	ip, ip, r2
 8009fc2:	9a02      	ldr	r2, [sp, #8]
 8009fc4:	4294      	cmp	r4, r2
 8009fc6:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8009fca:	f6bf af2c 	bge.w	8009e26 <mktime+0x122>
 8009fce:	e7d3      	b.n	8009f78 <mktime+0x274>
 8009fd0:	9a03      	ldr	r2, [sp, #12]
 8009fd2:	4294      	cmp	r4, r2
 8009fd4:	eb78 020b 	sbcs.w	r2, r8, fp
 8009fd8:	f6ff af30 	blt.w	8009e3c <mktime+0x138>
 8009fdc:	f1ba 0f00 	cmp.w	sl, #0
 8009fe0:	dbcf      	blt.n	8009f82 <mktime+0x27e>
 8009fe2:	f04f 0b01 	mov.w	fp, #1
 8009fe6:	e735      	b.n	8009e54 <mktime+0x150>
 8009fe8:	f04f 0b00 	mov.w	fp, #0
 8009fec:	e732      	b.n	8009e54 <mktime+0x150>
 8009fee:	1ac3      	subs	r3, r0, r3
 8009ff0:	e73c      	b.n	8009e6c <mktime+0x168>
 8009ff2:	f04f 3aff 	mov.w	sl, #4294967295
 8009ff6:	e74f      	b.n	8009e98 <mktime+0x194>
 8009ff8:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8009ffc:	e76c      	b.n	8009ed8 <mktime+0x1d4>
 8009ffe:	f240 136d 	movw	r3, #365	@ 0x16d
 800a002:	e769      	b.n	8009ed8 <mktime+0x1d4>
 800a004:	07aa      	lsls	r2, r5, #30
 800a006:	d117      	bne.n	800a038 <mktime+0x334>
 800a008:	2164      	movs	r1, #100	@ 0x64
 800a00a:	fb95 f2f1 	sdiv	r2, r5, r1
 800a00e:	fb01 5212 	mls	r2, r1, r2, r5
 800a012:	b9da      	cbnz	r2, 800a04c <mktime+0x348>
 800a014:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a018:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800a01c:	fb95 f1f2 	sdiv	r1, r5, r2
 800a020:	fb02 5511 	mls	r5, r2, r1, r5
 800a024:	f240 126d 	movw	r2, #365	@ 0x16d
 800a028:	2d00      	cmp	r5, #0
 800a02a:	bf08      	it	eq
 800a02c:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800a030:	4293      	cmp	r3, r2
 800a032:	bfa8      	it	ge
 800a034:	1a9b      	subge	r3, r3, r2
 800a036:	e74f      	b.n	8009ed8 <mktime+0x1d4>
 800a038:	f240 126d 	movw	r2, #365	@ 0x16d
 800a03c:	e7f8      	b.n	800a030 <mktime+0x32c>
 800a03e:	bf00      	nop
 800a040:	0800ec28 	.word	0x0800ec28
 800a044:	00015180 	.word	0x00015180
 800a048:	200005a8 	.word	0x200005a8
 800a04c:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800a050:	e7ee      	b.n	800a030 <mktime+0x32c>
 800a052:	3607      	adds	r6, #7
 800a054:	e7a6      	b.n	8009fa4 <mktime+0x2a0>
 800a056:	f04f 34ff 	mov.w	r4, #4294967295
 800a05a:	46a0      	mov	r8, r4
 800a05c:	e7a5      	b.n	8009faa <mktime+0x2a6>
 800a05e:	f1ba 0f00 	cmp.w	sl, #0
 800a062:	dac1      	bge.n	8009fe8 <mktime+0x2e4>
 800a064:	f04f 0b00 	mov.w	fp, #0
 800a068:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800a06c:	191c      	adds	r4, r3, r4
 800a06e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800a072:	e78d      	b.n	8009f90 <mktime+0x28c>

0800a074 <__tzcalc_limits>:
 800a074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a078:	4604      	mov	r4, r0
 800a07a:	f003 fcd3 	bl	800da24 <__gettzinfo>
 800a07e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800a082:	429c      	cmp	r4, r3
 800a084:	f340 80a3 	ble.w	800a1ce <__tzcalc_limits+0x15a>
 800a088:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 800a08c:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800a090:	f240 126d 	movw	r2, #365	@ 0x16d
 800a094:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 800a098:	1865      	adds	r5, r4, r1
 800a09a:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 800a09e:	4601      	mov	r1, r0
 800a0a0:	6044      	str	r4, [r0, #4]
 800a0a2:	10ad      	asrs	r5, r5, #2
 800a0a4:	fb02 5503 	mla	r5, r2, r3, r5
 800a0a8:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800a0ac:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800a0b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0b4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a0b8:	441d      	add	r5, r3
 800a0ba:	19a3      	adds	r3, r4, r6
 800a0bc:	4e45      	ldr	r6, [pc, #276]	@ (800a1d4 <__tzcalc_limits+0x160>)
 800a0be:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0c2:	441d      	add	r5, r3
 800a0c4:	7a0b      	ldrb	r3, [r1, #8]
 800a0c6:	f8d1 c014 	ldr.w	ip, [r1, #20]
 800a0ca:	2b4a      	cmp	r3, #74	@ 0x4a
 800a0cc:	d138      	bne.n	800a140 <__tzcalc_limits+0xcc>
 800a0ce:	07a2      	lsls	r2, r4, #30
 800a0d0:	eb05 030c 	add.w	r3, r5, ip
 800a0d4:	d106      	bne.n	800a0e4 <__tzcalc_limits+0x70>
 800a0d6:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800a0da:	fb94 f2fe 	sdiv	r2, r4, lr
 800a0de:	fb0e 4212 	mls	r2, lr, r2, r4
 800a0e2:	b932      	cbnz	r2, 800a0f2 <__tzcalc_limits+0x7e>
 800a0e4:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800a0e8:	fb94 f2fe 	sdiv	r2, r4, lr
 800a0ec:	fb0e 4212 	mls	r2, lr, r2, r4
 800a0f0:	bb1a      	cbnz	r2, 800a13a <__tzcalc_limits+0xc6>
 800a0f2:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 800a0f6:	bfd4      	ite	le
 800a0f8:	f04f 0c00 	movle.w	ip, #0
 800a0fc:	f04f 0c01 	movgt.w	ip, #1
 800a100:	4463      	add	r3, ip
 800a102:	3b01      	subs	r3, #1
 800a104:	698a      	ldr	r2, [r1, #24]
 800a106:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800a10a:	fbc3 2c06 	smlal	r2, ip, r3, r6
 800a10e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800a110:	18d2      	adds	r2, r2, r3
 800a112:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 800a116:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800a11a:	3128      	adds	r1, #40	@ 0x28
 800a11c:	428f      	cmp	r7, r1
 800a11e:	d1d1      	bne.n	800a0c4 <__tzcalc_limits+0x50>
 800a120:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800a124:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800a128:	428c      	cmp	r4, r1
 800a12a:	4193      	sbcs	r3, r2
 800a12c:	bfb4      	ite	lt
 800a12e:	2301      	movlt	r3, #1
 800a130:	2300      	movge	r3, #0
 800a132:	6003      	str	r3, [r0, #0]
 800a134:	2001      	movs	r0, #1
 800a136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a13a:	f04f 0c00 	mov.w	ip, #0
 800a13e:	e7df      	b.n	800a100 <__tzcalc_limits+0x8c>
 800a140:	2b44      	cmp	r3, #68	@ 0x44
 800a142:	d102      	bne.n	800a14a <__tzcalc_limits+0xd6>
 800a144:	eb05 030c 	add.w	r3, r5, ip
 800a148:	e7dc      	b.n	800a104 <__tzcalc_limits+0x90>
 800a14a:	07a3      	lsls	r3, r4, #30
 800a14c:	d105      	bne.n	800a15a <__tzcalc_limits+0xe6>
 800a14e:	2264      	movs	r2, #100	@ 0x64
 800a150:	fb94 f3f2 	sdiv	r3, r4, r2
 800a154:	fb02 4313 	mls	r3, r2, r3, r4
 800a158:	bb93      	cbnz	r3, 800a1c0 <__tzcalc_limits+0x14c>
 800a15a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a15e:	fb94 f3f2 	sdiv	r3, r4, r2
 800a162:	fb02 4313 	mls	r3, r2, r3, r4
 800a166:	fab3 f383 	clz	r3, r3
 800a16a:	095b      	lsrs	r3, r3, #5
 800a16c:	425b      	negs	r3, r3
 800a16e:	f8df e068 	ldr.w	lr, [pc, #104]	@ 800a1d8 <__tzcalc_limits+0x164>
 800a172:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800a176:	462a      	mov	r2, r5
 800a178:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a17c:	f04f 0800 	mov.w	r8, #0
 800a180:	4473      	add	r3, lr
 800a182:	f108 0801 	add.w	r8, r8, #1
 800a186:	45c1      	cmp	r9, r8
 800a188:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 800a18c:	dc1a      	bgt.n	800a1c4 <__tzcalc_limits+0x150>
 800a18e:	f102 0804 	add.w	r8, r2, #4
 800a192:	2307      	movs	r3, #7
 800a194:	fb98 f3f3 	sdiv	r3, r8, r3
 800a198:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a19c:	eba8 0303 	sub.w	r3, r8, r3
 800a1a0:	ebbc 0c03 	subs.w	ip, ip, r3
 800a1a4:	690b      	ldr	r3, [r1, #16]
 800a1a6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a1aa:	bf48      	it	mi
 800a1ac:	f10c 0c07 	addmi.w	ip, ip, #7
 800a1b0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a1b4:	449c      	add	ip, r3
 800a1b6:	45f4      	cmp	ip, lr
 800a1b8:	da06      	bge.n	800a1c8 <__tzcalc_limits+0x154>
 800a1ba:	eb02 030c 	add.w	r3, r2, ip
 800a1be:	e7a1      	b.n	800a104 <__tzcalc_limits+0x90>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e7d3      	b.n	800a16c <__tzcalc_limits+0xf8>
 800a1c4:	4472      	add	r2, lr
 800a1c6:	e7dc      	b.n	800a182 <__tzcalc_limits+0x10e>
 800a1c8:	f1ac 0c07 	sub.w	ip, ip, #7
 800a1cc:	e7f3      	b.n	800a1b6 <__tzcalc_limits+0x142>
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	e7b1      	b.n	800a136 <__tzcalc_limits+0xc2>
 800a1d2:	bf00      	nop
 800a1d4:	00015180 	.word	0x00015180
 800a1d8:	0800ec84 	.word	0x0800ec84

0800a1dc <__tz_lock>:
 800a1dc:	4801      	ldr	r0, [pc, #4]	@ (800a1e4 <__tz_lock+0x8>)
 800a1de:	f000 baa8 	b.w	800a732 <__retarget_lock_acquire>
 800a1e2:	bf00      	nop
 800a1e4:	200005b0 	.word	0x200005b0

0800a1e8 <__tz_unlock>:
 800a1e8:	4801      	ldr	r0, [pc, #4]	@ (800a1f0 <__tz_unlock+0x8>)
 800a1ea:	f000 baa4 	b.w	800a736 <__retarget_lock_release>
 800a1ee:	bf00      	nop
 800a1f0:	200005b0 	.word	0x200005b0

0800a1f4 <_tzset_unlocked>:
 800a1f4:	4b01      	ldr	r3, [pc, #4]	@ (800a1fc <_tzset_unlocked+0x8>)
 800a1f6:	6818      	ldr	r0, [r3, #0]
 800a1f8:	f000 b802 	b.w	800a200 <_tzset_unlocked_r>
 800a1fc:	20000040 	.word	0x20000040

0800a200 <_tzset_unlocked_r>:
 800a200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a204:	4607      	mov	r7, r0
 800a206:	b08d      	sub	sp, #52	@ 0x34
 800a208:	f003 fc0c 	bl	800da24 <__gettzinfo>
 800a20c:	49bc      	ldr	r1, [pc, #752]	@ (800a500 <_tzset_unlocked_r+0x300>)
 800a20e:	4604      	mov	r4, r0
 800a210:	4638      	mov	r0, r7
 800a212:	f001 f9bd 	bl	800b590 <_getenv_r>
 800a216:	4dbb      	ldr	r5, [pc, #748]	@ (800a504 <_tzset_unlocked_r+0x304>)
 800a218:	4606      	mov	r6, r0
 800a21a:	bb10      	cbnz	r0, 800a262 <_tzset_unlocked_r+0x62>
 800a21c:	4bba      	ldr	r3, [pc, #744]	@ (800a508 <_tzset_unlocked_r+0x308>)
 800a21e:	214a      	movs	r1, #74	@ 0x4a
 800a220:	4aba      	ldr	r2, [pc, #744]	@ (800a50c <_tzset_unlocked_r+0x30c>)
 800a222:	6018      	str	r0, [r3, #0]
 800a224:	4bba      	ldr	r3, [pc, #744]	@ (800a510 <_tzset_unlocked_r+0x310>)
 800a226:	62a0      	str	r0, [r4, #40]	@ 0x28
 800a228:	6018      	str	r0, [r3, #0]
 800a22a:	4bba      	ldr	r3, [pc, #744]	@ (800a514 <_tzset_unlocked_r+0x314>)
 800a22c:	6520      	str	r0, [r4, #80]	@ 0x50
 800a22e:	7221      	strb	r1, [r4, #8]
 800a230:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800a234:	e9c3 2200 	strd	r2, r2, [r3]
 800a238:	2200      	movs	r2, #0
 800a23a:	2300      	movs	r3, #0
 800a23c:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800a240:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800a244:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800a248:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800a24c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800a250:	6828      	ldr	r0, [r5, #0]
 800a252:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800a256:	f001 f9ab 	bl	800b5b0 <free>
 800a25a:	602e      	str	r6, [r5, #0]
 800a25c:	b00d      	add	sp, #52	@ 0x34
 800a25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a262:	6829      	ldr	r1, [r5, #0]
 800a264:	2900      	cmp	r1, #0
 800a266:	f040 808e 	bne.w	800a386 <_tzset_unlocked_r+0x186>
 800a26a:	6828      	ldr	r0, [r5, #0]
 800a26c:	f001 f9a0 	bl	800b5b0 <free>
 800a270:	4630      	mov	r0, r6
 800a272:	f7f5 ffeb 	bl	800024c <strlen>
 800a276:	1c41      	adds	r1, r0, #1
 800a278:	4638      	mov	r0, r7
 800a27a:	f001 f9c3 	bl	800b604 <_malloc_r>
 800a27e:	6028      	str	r0, [r5, #0]
 800a280:	2800      	cmp	r0, #0
 800a282:	f040 8086 	bne.w	800a392 <_tzset_unlocked_r+0x192>
 800a286:	2300      	movs	r3, #0
 800a288:	4aa1      	ldr	r2, [pc, #644]	@ (800a510 <_tzset_unlocked_r+0x310>)
 800a28a:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800a514 <_tzset_unlocked_r+0x314>
 800a28e:	2000      	movs	r0, #0
 800a290:	6013      	str	r3, [r2, #0]
 800a292:	2100      	movs	r1, #0
 800a294:	4aa0      	ldr	r2, [pc, #640]	@ (800a518 <_tzset_unlocked_r+0x318>)
 800a296:	f8df a270 	ldr.w	sl, [pc, #624]	@ 800a508 <_tzset_unlocked_r+0x308>
 800a29a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a29c:	f8ca 3000 	str.w	r3, [sl]
 800a2a0:	6523      	str	r3, [r4, #80]	@ 0x50
 800a2a2:	e9c8 2200 	strd	r2, r2, [r8]
 800a2a6:	224a      	movs	r2, #74	@ 0x4a
 800a2a8:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800a2ac:	7222      	strb	r2, [r4, #8]
 800a2ae:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800a2b2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800a2b6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800a2ba:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800a2be:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800a2c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800a2c6:	7833      	ldrb	r3, [r6, #0]
 800a2c8:	2b3a      	cmp	r3, #58	@ 0x3a
 800a2ca:	bf08      	it	eq
 800a2cc:	3601      	addeq	r6, #1
 800a2ce:	7833      	ldrb	r3, [r6, #0]
 800a2d0:	2b3c      	cmp	r3, #60	@ 0x3c
 800a2d2:	d162      	bne.n	800a39a <_tzset_unlocked_r+0x19a>
 800a2d4:	1c75      	adds	r5, r6, #1
 800a2d6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a2d8:	4a90      	ldr	r2, [pc, #576]	@ (800a51c <_tzset_unlocked_r+0x31c>)
 800a2da:	4991      	ldr	r1, [pc, #580]	@ (800a520 <_tzset_unlocked_r+0x320>)
 800a2dc:	4628      	mov	r0, r5
 800a2de:	f7ff fa9f 	bl	8009820 <siscanf>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	ddba      	ble.n	800a25c <_tzset_unlocked_r+0x5c>
 800a2e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2e8:	1eda      	subs	r2, r3, #3
 800a2ea:	2a07      	cmp	r2, #7
 800a2ec:	d8b6      	bhi.n	800a25c <_tzset_unlocked_r+0x5c>
 800a2ee:	5ceb      	ldrb	r3, [r5, r3]
 800a2f0:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2f2:	d1b3      	bne.n	800a25c <_tzset_unlocked_r+0x5c>
 800a2f4:	3602      	adds	r6, #2
 800a2f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2f8:	18f5      	adds	r5, r6, r3
 800a2fa:	5cf3      	ldrb	r3, [r6, r3]
 800a2fc:	2b2d      	cmp	r3, #45	@ 0x2d
 800a2fe:	d15a      	bne.n	800a3b6 <_tzset_unlocked_r+0x1b6>
 800a300:	3501      	adds	r5, #1
 800a302:	f04f 39ff 	mov.w	r9, #4294967295
 800a306:	2300      	movs	r3, #0
 800a308:	af08      	add	r7, sp, #32
 800a30a:	aa07      	add	r2, sp, #28
 800a30c:	4985      	ldr	r1, [pc, #532]	@ (800a524 <_tzset_unlocked_r+0x324>)
 800a30e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a312:	4628      	mov	r0, r5
 800a314:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a318:	ab0a      	add	r3, sp, #40	@ 0x28
 800a31a:	9303      	str	r3, [sp, #12]
 800a31c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800a320:	f10d 031e 	add.w	r3, sp, #30
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	ab0a      	add	r3, sp, #40	@ 0x28
 800a328:	f7ff fa7a 	bl	8009820 <siscanf>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	dd95      	ble.n	800a25c <_tzset_unlocked_r+0x5c>
 800a330:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a334:	223c      	movs	r2, #60	@ 0x3c
 800a336:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800a33a:	fb02 6603 	mla	r6, r2, r3, r6
 800a33e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a342:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800a346:	fb02 6603 	mla	r6, r2, r3, r6
 800a34a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a34c:	fb09 f606 	mul.w	r6, r9, r6
 800a350:	eb05 0903 	add.w	r9, r5, r3
 800a354:	5ceb      	ldrb	r3, [r5, r3]
 800a356:	2b3c      	cmp	r3, #60	@ 0x3c
 800a358:	f040 80ee 	bne.w	800a538 <_tzset_unlocked_r+0x338>
 800a35c:	f109 0501 	add.w	r5, r9, #1
 800a360:	ab0a      	add	r3, sp, #40	@ 0x28
 800a362:	4a71      	ldr	r2, [pc, #452]	@ (800a528 <_tzset_unlocked_r+0x328>)
 800a364:	496e      	ldr	r1, [pc, #440]	@ (800a520 <_tzset_unlocked_r+0x320>)
 800a366:	4628      	mov	r0, r5
 800a368:	f7ff fa5a 	bl	8009820 <siscanf>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	dc28      	bgt.n	800a3c2 <_tzset_unlocked_r+0x1c2>
 800a370:	f899 3001 	ldrb.w	r3, [r9, #1]
 800a374:	2b3e      	cmp	r3, #62	@ 0x3e
 800a376:	d124      	bne.n	800a3c2 <_tzset_unlocked_r+0x1c2>
 800a378:	4b68      	ldr	r3, [pc, #416]	@ (800a51c <_tzset_unlocked_r+0x31c>)
 800a37a:	62a6      	str	r6, [r4, #40]	@ 0x28
 800a37c:	f8ca 6000 	str.w	r6, [sl]
 800a380:	e9c8 3300 	strd	r3, r3, [r8]
 800a384:	e76a      	b.n	800a25c <_tzset_unlocked_r+0x5c>
 800a386:	f7f5 ff57 	bl	8000238 <strcmp>
 800a38a:	2800      	cmp	r0, #0
 800a38c:	f47f af6d 	bne.w	800a26a <_tzset_unlocked_r+0x6a>
 800a390:	e764      	b.n	800a25c <_tzset_unlocked_r+0x5c>
 800a392:	4631      	mov	r1, r6
 800a394:	f000 f9d1 	bl	800a73a <strcpy>
 800a398:	e775      	b.n	800a286 <_tzset_unlocked_r+0x86>
 800a39a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a39c:	4a5f      	ldr	r2, [pc, #380]	@ (800a51c <_tzset_unlocked_r+0x31c>)
 800a39e:	4963      	ldr	r1, [pc, #396]	@ (800a52c <_tzset_unlocked_r+0x32c>)
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	f7ff fa3d 	bl	8009820 <siscanf>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	f77f af58 	ble.w	800a25c <_tzset_unlocked_r+0x5c>
 800a3ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ae:	3b03      	subs	r3, #3
 800a3b0:	2b07      	cmp	r3, #7
 800a3b2:	d9a0      	bls.n	800a2f6 <_tzset_unlocked_r+0xf6>
 800a3b4:	e752      	b.n	800a25c <_tzset_unlocked_r+0x5c>
 800a3b6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a3b8:	f04f 0901 	mov.w	r9, #1
 800a3bc:	bf08      	it	eq
 800a3be:	3501      	addeq	r5, #1
 800a3c0:	e7a1      	b.n	800a306 <_tzset_unlocked_r+0x106>
 800a3c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3c4:	1eda      	subs	r2, r3, #3
 800a3c6:	2a07      	cmp	r2, #7
 800a3c8:	f63f af48 	bhi.w	800a25c <_tzset_unlocked_r+0x5c>
 800a3cc:	5ceb      	ldrb	r3, [r5, r3]
 800a3ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800a3d0:	f47f af44 	bne.w	800a25c <_tzset_unlocked_r+0x5c>
 800a3d4:	f109 0902 	add.w	r9, r9, #2
 800a3d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3da:	eb09 0503 	add.w	r5, r9, r3
 800a3de:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a3e2:	2b2d      	cmp	r3, #45	@ 0x2d
 800a3e4:	f040 80b7 	bne.w	800a556 <_tzset_unlocked_r+0x356>
 800a3e8:	3501      	adds	r5, #1
 800a3ea:	f04f 39ff 	mov.w	r9, #4294967295
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	aa07      	add	r2, sp, #28
 800a3f2:	494c      	ldr	r1, [pc, #304]	@ (800a524 <_tzset_unlocked_r+0x324>)
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a3fa:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a3fe:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a402:	930a      	str	r3, [sp, #40]	@ 0x28
 800a404:	ab0a      	add	r3, sp, #40	@ 0x28
 800a406:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800a40a:	9301      	str	r3, [sp, #4]
 800a40c:	f10d 031e 	add.w	r3, sp, #30
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	ab0a      	add	r3, sp, #40	@ 0x28
 800a414:	f7ff fa04 	bl	8009820 <siscanf>
 800a418:	2800      	cmp	r0, #0
 800a41a:	f300 80a2 	bgt.w	800a562 <_tzset_unlocked_r+0x362>
 800a41e:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800a422:	9304      	str	r3, [sp, #16]
 800a424:	4627      	mov	r7, r4
 800a426:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a428:	f04f 0b00 	mov.w	fp, #0
 800a42c:	441d      	add	r5, r3
 800a42e:	782b      	ldrb	r3, [r5, #0]
 800a430:	2b2c      	cmp	r3, #44	@ 0x2c
 800a432:	bf08      	it	eq
 800a434:	3501      	addeq	r5, #1
 800a436:	f895 9000 	ldrb.w	r9, [r5]
 800a43a:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800a43e:	f040 80a3 	bne.w	800a588 <_tzset_unlocked_r+0x388>
 800a442:	ab0a      	add	r3, sp, #40	@ 0x28
 800a444:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800a448:	4939      	ldr	r1, [pc, #228]	@ (800a530 <_tzset_unlocked_r+0x330>)
 800a44a:	4628      	mov	r0, r5
 800a44c:	9303      	str	r3, [sp, #12]
 800a44e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a452:	aa09      	add	r2, sp, #36	@ 0x24
 800a454:	9200      	str	r2, [sp, #0]
 800a456:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800a45a:	f7ff f9e1 	bl	8009820 <siscanf>
 800a45e:	2803      	cmp	r0, #3
 800a460:	f47f aefc 	bne.w	800a25c <_tzset_unlocked_r+0x5c>
 800a464:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800a468:	1e4b      	subs	r3, r1, #1
 800a46a:	2b0b      	cmp	r3, #11
 800a46c:	f63f aef6 	bhi.w	800a25c <_tzset_unlocked_r+0x5c>
 800a470:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800a474:	1e53      	subs	r3, r2, #1
 800a476:	2b04      	cmp	r3, #4
 800a478:	f63f aef0 	bhi.w	800a25c <_tzset_unlocked_r+0x5c>
 800a47c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800a480:	2b06      	cmp	r3, #6
 800a482:	f63f aeeb 	bhi.w	800a25c <_tzset_unlocked_r+0x5c>
 800a486:	f887 9008 	strb.w	r9, [r7, #8]
 800a48a:	617b      	str	r3, [r7, #20]
 800a48c:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800a490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a492:	eb05 0903 	add.w	r9, r5, r3
 800a496:	2500      	movs	r5, #0
 800a498:	f04f 0302 	mov.w	r3, #2
 800a49c:	f8ad 501e 	strh.w	r5, [sp, #30]
 800a4a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a4a4:	f8ad 5020 	strh.w	r5, [sp, #32]
 800a4a8:	950a      	str	r5, [sp, #40]	@ 0x28
 800a4aa:	f899 3000 	ldrb.w	r3, [r9]
 800a4ae:	2b2f      	cmp	r3, #47	@ 0x2f
 800a4b0:	f040 8097 	bne.w	800a5e2 <_tzset_unlocked_r+0x3e2>
 800a4b4:	ab0a      	add	r3, sp, #40	@ 0x28
 800a4b6:	aa08      	add	r2, sp, #32
 800a4b8:	491e      	ldr	r1, [pc, #120]	@ (800a534 <_tzset_unlocked_r+0x334>)
 800a4ba:	4648      	mov	r0, r9
 800a4bc:	9303      	str	r3, [sp, #12]
 800a4be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a4c2:	f10d 021e 	add.w	r2, sp, #30
 800a4c6:	9200      	str	r2, [sp, #0]
 800a4c8:	aa07      	add	r2, sp, #28
 800a4ca:	f7ff f9a9 	bl	8009820 <siscanf>
 800a4ce:	42a8      	cmp	r0, r5
 800a4d0:	f300 8087 	bgt.w	800a5e2 <_tzset_unlocked_r+0x3e2>
 800a4d4:	214a      	movs	r1, #74	@ 0x4a
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	2300      	movs	r3, #0
 800a4da:	62a5      	str	r5, [r4, #40]	@ 0x28
 800a4dc:	7221      	strb	r1, [r4, #8]
 800a4de:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800a4e2:	6525      	str	r5, [r4, #80]	@ 0x50
 800a4e4:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800a4e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a4ec:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800a4f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800a4f4:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800a4f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800a4fc:	e6ae      	b.n	800a25c <_tzset_unlocked_r+0x5c>
 800a4fe:	bf00      	nop
 800a500:	0800ea37 	.word	0x0800ea37
 800a504:	20000588 	.word	0x20000588
 800a508:	200005a4 	.word	0x200005a4
 800a50c:	0800ea3a 	.word	0x0800ea3a
 800a510:	200005a8 	.word	0x200005a8
 800a514:	20000038 	.word	0x20000038
 800a518:	0800eac0 	.word	0x0800eac0
 800a51c:	20000598 	.word	0x20000598
 800a520:	0800ea3e 	.word	0x0800ea3e
 800a524:	0800ea73 	.word	0x0800ea73
 800a528:	2000058c 	.word	0x2000058c
 800a52c:	0800ea51 	.word	0x0800ea51
 800a530:	0800ea5f 	.word	0x0800ea5f
 800a534:	0800ea72 	.word	0x0800ea72
 800a538:	ab0a      	add	r3, sp, #40	@ 0x28
 800a53a:	4a3f      	ldr	r2, [pc, #252]	@ (800a638 <_tzset_unlocked_r+0x438>)
 800a53c:	493f      	ldr	r1, [pc, #252]	@ (800a63c <_tzset_unlocked_r+0x43c>)
 800a53e:	4648      	mov	r0, r9
 800a540:	f7ff f96e 	bl	8009820 <siscanf>
 800a544:	2800      	cmp	r0, #0
 800a546:	f77f af17 	ble.w	800a378 <_tzset_unlocked_r+0x178>
 800a54a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a54c:	3b03      	subs	r3, #3
 800a54e:	2b07      	cmp	r3, #7
 800a550:	f67f af42 	bls.w	800a3d8 <_tzset_unlocked_r+0x1d8>
 800a554:	e682      	b.n	800a25c <_tzset_unlocked_r+0x5c>
 800a556:	2b2b      	cmp	r3, #43	@ 0x2b
 800a558:	f04f 0901 	mov.w	r9, #1
 800a55c:	bf08      	it	eq
 800a55e:	3501      	addeq	r5, #1
 800a560:	e745      	b.n	800a3ee <_tzset_unlocked_r+0x1ee>
 800a562:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a566:	213c      	movs	r1, #60	@ 0x3c
 800a568:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a56c:	fb01 3302 	mla	r3, r1, r2, r3
 800a570:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a574:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800a578:	fb01 3302 	mla	r3, r1, r2, r3
 800a57c:	fb09 f303 	mul.w	r3, r9, r3
 800a580:	e74f      	b.n	800a422 <_tzset_unlocked_r+0x222>
 800a582:	f04f 0b01 	mov.w	fp, #1
 800a586:	e752      	b.n	800a42e <_tzset_unlocked_r+0x22e>
 800a588:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800a58c:	f04f 020a 	mov.w	r2, #10
 800a590:	a90b      	add	r1, sp, #44	@ 0x2c
 800a592:	bf06      	itte	eq
 800a594:	3501      	addeq	r5, #1
 800a596:	464b      	moveq	r3, r9
 800a598:	2344      	movne	r3, #68	@ 0x44
 800a59a:	4628      	mov	r0, r5
 800a59c:	9305      	str	r3, [sp, #20]
 800a59e:	f002 fc69 	bl	800ce74 <strtoul>
 800a5a2:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800a5a6:	9b05      	ldr	r3, [sp, #20]
 800a5a8:	45a9      	cmp	r9, r5
 800a5aa:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800a5ae:	d114      	bne.n	800a5da <_tzset_unlocked_r+0x3da>
 800a5b0:	234d      	movs	r3, #77	@ 0x4d
 800a5b2:	f1bb 0f00 	cmp.w	fp, #0
 800a5b6:	d107      	bne.n	800a5c8 <_tzset_unlocked_r+0x3c8>
 800a5b8:	2103      	movs	r1, #3
 800a5ba:	7223      	strb	r3, [r4, #8]
 800a5bc:	2302      	movs	r3, #2
 800a5be:	f8c4 b014 	str.w	fp, [r4, #20]
 800a5c2:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800a5c6:	e766      	b.n	800a496 <_tzset_unlocked_r+0x296>
 800a5c8:	220b      	movs	r2, #11
 800a5ca:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800a5d8:	e75d      	b.n	800a496 <_tzset_unlocked_r+0x296>
 800a5da:	b280      	uxth	r0, r0
 800a5dc:	723b      	strb	r3, [r7, #8]
 800a5de:	6178      	str	r0, [r7, #20]
 800a5e0:	e759      	b.n	800a496 <_tzset_unlocked_r+0x296>
 800a5e2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a5e6:	213c      	movs	r1, #60	@ 0x3c
 800a5e8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a5ec:	3728      	adds	r7, #40	@ 0x28
 800a5ee:	fb01 3302 	mla	r3, r1, r2, r3
 800a5f2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a5f6:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800a5fa:	fb01 3302 	mla	r3, r1, r2, r3
 800a5fe:	f847 3c10 	str.w	r3, [r7, #-16]
 800a602:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800a604:	444d      	add	r5, r9
 800a606:	f1bb 0f00 	cmp.w	fp, #0
 800a60a:	d0ba      	beq.n	800a582 <_tzset_unlocked_r+0x382>
 800a60c:	9b04      	ldr	r3, [sp, #16]
 800a60e:	6860      	ldr	r0, [r4, #4]
 800a610:	6523      	str	r3, [r4, #80]	@ 0x50
 800a612:	4b0b      	ldr	r3, [pc, #44]	@ (800a640 <_tzset_unlocked_r+0x440>)
 800a614:	62a6      	str	r6, [r4, #40]	@ 0x28
 800a616:	f8c8 3000 	str.w	r3, [r8]
 800a61a:	4b07      	ldr	r3, [pc, #28]	@ (800a638 <_tzset_unlocked_r+0x438>)
 800a61c:	f8c8 3004 	str.w	r3, [r8, #4]
 800a620:	f7ff fd28 	bl	800a074 <__tzcalc_limits>
 800a624:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a626:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a628:	f8ca 2000 	str.w	r2, [sl]
 800a62c:	1a9b      	subs	r3, r3, r2
 800a62e:	4a05      	ldr	r2, [pc, #20]	@ (800a644 <_tzset_unlocked_r+0x444>)
 800a630:	bf18      	it	ne
 800a632:	2301      	movne	r3, #1
 800a634:	6013      	str	r3, [r2, #0]
 800a636:	e611      	b.n	800a25c <_tzset_unlocked_r+0x5c>
 800a638:	2000058c 	.word	0x2000058c
 800a63c:	0800ea51 	.word	0x0800ea51
 800a640:	20000598 	.word	0x20000598
 800a644:	200005a8 	.word	0x200005a8

0800a648 <_localeconv_r>:
 800a648:	4800      	ldr	r0, [pc, #0]	@ (800a64c <_localeconv_r+0x4>)
 800a64a:	4770      	bx	lr
 800a64c:	200001d8 	.word	0x200001d8

0800a650 <_close_r>:
 800a650:	b538      	push	{r3, r4, r5, lr}
 800a652:	2300      	movs	r3, #0
 800a654:	4d05      	ldr	r5, [pc, #20]	@ (800a66c <_close_r+0x1c>)
 800a656:	4604      	mov	r4, r0
 800a658:	4608      	mov	r0, r1
 800a65a:	602b      	str	r3, [r5, #0]
 800a65c:	f7f7 fd62 	bl	8002124 <_close>
 800a660:	1c43      	adds	r3, r0, #1
 800a662:	d102      	bne.n	800a66a <_close_r+0x1a>
 800a664:	682b      	ldr	r3, [r5, #0]
 800a666:	b103      	cbz	r3, 800a66a <_close_r+0x1a>
 800a668:	6023      	str	r3, [r4, #0]
 800a66a:	bd38      	pop	{r3, r4, r5, pc}
 800a66c:	200005ac 	.word	0x200005ac

0800a670 <_lseek_r>:
 800a670:	b538      	push	{r3, r4, r5, lr}
 800a672:	4604      	mov	r4, r0
 800a674:	4d06      	ldr	r5, [pc, #24]	@ (800a690 <_lseek_r+0x20>)
 800a676:	4608      	mov	r0, r1
 800a678:	4611      	mov	r1, r2
 800a67a:	2200      	movs	r2, #0
 800a67c:	602a      	str	r2, [r5, #0]
 800a67e:	461a      	mov	r2, r3
 800a680:	f7f7 fd77 	bl	8002172 <_lseek>
 800a684:	1c43      	adds	r3, r0, #1
 800a686:	d102      	bne.n	800a68e <_lseek_r+0x1e>
 800a688:	682b      	ldr	r3, [r5, #0]
 800a68a:	b103      	cbz	r3, 800a68e <_lseek_r+0x1e>
 800a68c:	6023      	str	r3, [r4, #0]
 800a68e:	bd38      	pop	{r3, r4, r5, pc}
 800a690:	200005ac 	.word	0x200005ac

0800a694 <_read_r>:
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4604      	mov	r4, r0
 800a698:	4d06      	ldr	r5, [pc, #24]	@ (800a6b4 <_read_r+0x20>)
 800a69a:	4608      	mov	r0, r1
 800a69c:	4611      	mov	r1, r2
 800a69e:	2200      	movs	r2, #0
 800a6a0:	602a      	str	r2, [r5, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	f7f7 fd05 	bl	80020b2 <_read>
 800a6a8:	1c43      	adds	r3, r0, #1
 800a6aa:	d102      	bne.n	800a6b2 <_read_r+0x1e>
 800a6ac:	682b      	ldr	r3, [r5, #0]
 800a6ae:	b103      	cbz	r3, 800a6b2 <_read_r+0x1e>
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	200005ac 	.word	0x200005ac

0800a6b8 <_write_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	4d06      	ldr	r5, [pc, #24]	@ (800a6d8 <_write_r+0x20>)
 800a6be:	4608      	mov	r0, r1
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	602a      	str	r2, [r5, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f7f7 fd10 	bl	80020ec <_write>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d102      	bne.n	800a6d6 <_write_r+0x1e>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	b103      	cbz	r3, 800a6d6 <_write_r+0x1e>
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	200005ac 	.word	0x200005ac

0800a6dc <__errno>:
 800a6dc:	4b01      	ldr	r3, [pc, #4]	@ (800a6e4 <__errno+0x8>)
 800a6de:	6818      	ldr	r0, [r3, #0]
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	20000040 	.word	0x20000040

0800a6e8 <__libc_init_array>:
 800a6e8:	b570      	push	{r4, r5, r6, lr}
 800a6ea:	4d0d      	ldr	r5, [pc, #52]	@ (800a720 <__libc_init_array+0x38>)
 800a6ec:	2600      	movs	r6, #0
 800a6ee:	4c0d      	ldr	r4, [pc, #52]	@ (800a724 <__libc_init_array+0x3c>)
 800a6f0:	1b64      	subs	r4, r4, r5
 800a6f2:	10a4      	asrs	r4, r4, #2
 800a6f4:	42a6      	cmp	r6, r4
 800a6f6:	d109      	bne.n	800a70c <__libc_init_array+0x24>
 800a6f8:	4d0b      	ldr	r5, [pc, #44]	@ (800a728 <__libc_init_array+0x40>)
 800a6fa:	2600      	movs	r6, #0
 800a6fc:	4c0b      	ldr	r4, [pc, #44]	@ (800a72c <__libc_init_array+0x44>)
 800a6fe:	f004 f8af 	bl	800e860 <_init>
 800a702:	1b64      	subs	r4, r4, r5
 800a704:	10a4      	asrs	r4, r4, #2
 800a706:	42a6      	cmp	r6, r4
 800a708:	d105      	bne.n	800a716 <__libc_init_array+0x2e>
 800a70a:	bd70      	pop	{r4, r5, r6, pc}
 800a70c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a710:	3601      	adds	r6, #1
 800a712:	4798      	blx	r3
 800a714:	e7ee      	b.n	800a6f4 <__libc_init_array+0xc>
 800a716:	f855 3b04 	ldr.w	r3, [r5], #4
 800a71a:	3601      	adds	r6, #1
 800a71c:	4798      	blx	r3
 800a71e:	e7f2      	b.n	800a706 <__libc_init_array+0x1e>
 800a720:	0800ef44 	.word	0x0800ef44
 800a724:	0800ef44 	.word	0x0800ef44
 800a728:	0800ef44 	.word	0x0800ef44
 800a72c:	0800ef48 	.word	0x0800ef48

0800a730 <__retarget_lock_init_recursive>:
 800a730:	4770      	bx	lr

0800a732 <__retarget_lock_acquire>:
 800a732:	4770      	bx	lr

0800a734 <__retarget_lock_acquire_recursive>:
 800a734:	4770      	bx	lr

0800a736 <__retarget_lock_release>:
 800a736:	4770      	bx	lr

0800a738 <__retarget_lock_release_recursive>:
 800a738:	4770      	bx	lr

0800a73a <strcpy>:
 800a73a:	4603      	mov	r3, r0
 800a73c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a740:	f803 2b01 	strb.w	r2, [r3], #1
 800a744:	2a00      	cmp	r2, #0
 800a746:	d1f9      	bne.n	800a73c <strcpy+0x2>
 800a748:	4770      	bx	lr

0800a74a <memchr>:
 800a74a:	b2c9      	uxtb	r1, r1
 800a74c:	4603      	mov	r3, r0
 800a74e:	4402      	add	r2, r0
 800a750:	b510      	push	{r4, lr}
 800a752:	4293      	cmp	r3, r2
 800a754:	4618      	mov	r0, r3
 800a756:	d101      	bne.n	800a75c <memchr+0x12>
 800a758:	2000      	movs	r0, #0
 800a75a:	e003      	b.n	800a764 <memchr+0x1a>
 800a75c:	7804      	ldrb	r4, [r0, #0]
 800a75e:	3301      	adds	r3, #1
 800a760:	428c      	cmp	r4, r1
 800a762:	d1f6      	bne.n	800a752 <memchr+0x8>
 800a764:	bd10      	pop	{r4, pc}
	...

0800a768 <nanf>:
 800a768:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a770 <nanf+0x8>
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	7fc00000 	.word	0x7fc00000

0800a774 <__assert_func>:
 800a774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a776:	4614      	mov	r4, r2
 800a778:	461a      	mov	r2, r3
 800a77a:	4b09      	ldr	r3, [pc, #36]	@ (800a7a0 <__assert_func+0x2c>)
 800a77c:	4605      	mov	r5, r0
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68d8      	ldr	r0, [r3, #12]
 800a782:	b14c      	cbz	r4, 800a798 <__assert_func+0x24>
 800a784:	4b07      	ldr	r3, [pc, #28]	@ (800a7a4 <__assert_func+0x30>)
 800a786:	9100      	str	r1, [sp, #0]
 800a788:	4907      	ldr	r1, [pc, #28]	@ (800a7a8 <__assert_func+0x34>)
 800a78a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a78e:	462b      	mov	r3, r5
 800a790:	f003 f89a 	bl	800d8c8 <fiprintf>
 800a794:	f003 fa14 	bl	800dbc0 <abort>
 800a798:	4b04      	ldr	r3, [pc, #16]	@ (800a7ac <__assert_func+0x38>)
 800a79a:	461c      	mov	r4, r3
 800a79c:	e7f3      	b.n	800a786 <__assert_func+0x12>
 800a79e:	bf00      	nop
 800a7a0:	20000040 	.word	0x20000040
 800a7a4:	0800ea85 	.word	0x0800ea85
 800a7a8:	0800ea92 	.word	0x0800ea92
 800a7ac:	0800eac0 	.word	0x0800eac0

0800a7b0 <div>:
 800a7b0:	b510      	push	{r4, lr}
 800a7b2:	fb91 f4f2 	sdiv	r4, r1, r2
 800a7b6:	fb02 1114 	mls	r1, r2, r4, r1
 800a7ba:	6004      	str	r4, [r0, #0]
 800a7bc:	6041      	str	r1, [r0, #4]
 800a7be:	bd10      	pop	{r4, pc}

0800a7c0 <quorem>:
 800a7c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c4:	6903      	ldr	r3, [r0, #16]
 800a7c6:	4607      	mov	r7, r0
 800a7c8:	690c      	ldr	r4, [r1, #16]
 800a7ca:	42a3      	cmp	r3, r4
 800a7cc:	f2c0 8083 	blt.w	800a8d6 <quorem+0x116>
 800a7d0:	3c01      	subs	r4, #1
 800a7d2:	f100 0514 	add.w	r5, r0, #20
 800a7d6:	f101 0814 	add.w	r8, r1, #20
 800a7da:	00a3      	lsls	r3, r4, #2
 800a7dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7ea:	9301      	str	r3, [sp, #4]
 800a7ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7f8:	d331      	bcc.n	800a85e <quorem+0x9e>
 800a7fa:	f04f 0a00 	mov.w	sl, #0
 800a7fe:	46c4      	mov	ip, r8
 800a800:	46ae      	mov	lr, r5
 800a802:	46d3      	mov	fp, sl
 800a804:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a808:	b298      	uxth	r0, r3
 800a80a:	45e1      	cmp	r9, ip
 800a80c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a810:	fb06 a000 	mla	r0, r6, r0, sl
 800a814:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800a818:	b280      	uxth	r0, r0
 800a81a:	fb06 2303 	mla	r3, r6, r3, r2
 800a81e:	f8de 2000 	ldr.w	r2, [lr]
 800a822:	b292      	uxth	r2, r2
 800a824:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a828:	eba2 0200 	sub.w	r2, r2, r0
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	f8de 0000 	ldr.w	r0, [lr]
 800a832:	445a      	add	r2, fp
 800a834:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a838:	b292      	uxth	r2, r2
 800a83a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a83e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a842:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a846:	f84e 2b04 	str.w	r2, [lr], #4
 800a84a:	d2db      	bcs.n	800a804 <quorem+0x44>
 800a84c:	9b00      	ldr	r3, [sp, #0]
 800a84e:	58eb      	ldr	r3, [r5, r3]
 800a850:	b92b      	cbnz	r3, 800a85e <quorem+0x9e>
 800a852:	9b01      	ldr	r3, [sp, #4]
 800a854:	3b04      	subs	r3, #4
 800a856:	429d      	cmp	r5, r3
 800a858:	461a      	mov	r2, r3
 800a85a:	d330      	bcc.n	800a8be <quorem+0xfe>
 800a85c:	613c      	str	r4, [r7, #16]
 800a85e:	4638      	mov	r0, r7
 800a860:	f001 fa1c 	bl	800bc9c <__mcmp>
 800a864:	2800      	cmp	r0, #0
 800a866:	db26      	blt.n	800a8b6 <quorem+0xf6>
 800a868:	4629      	mov	r1, r5
 800a86a:	2000      	movs	r0, #0
 800a86c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a870:	f8d1 c000 	ldr.w	ip, [r1]
 800a874:	fa1f fe82 	uxth.w	lr, r2
 800a878:	45c1      	cmp	r9, r8
 800a87a:	fa1f f38c 	uxth.w	r3, ip
 800a87e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a882:	eba3 030e 	sub.w	r3, r3, lr
 800a886:	4403      	add	r3, r0
 800a888:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a896:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a89a:	f841 3b04 	str.w	r3, [r1], #4
 800a89e:	d2e5      	bcs.n	800a86c <quorem+0xac>
 800a8a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8a8:	b922      	cbnz	r2, 800a8b4 <quorem+0xf4>
 800a8aa:	3b04      	subs	r3, #4
 800a8ac:	429d      	cmp	r5, r3
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	d30b      	bcc.n	800a8ca <quorem+0x10a>
 800a8b2:	613c      	str	r4, [r7, #16]
 800a8b4:	3601      	adds	r6, #1
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	b003      	add	sp, #12
 800a8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8be:	6812      	ldr	r2, [r2, #0]
 800a8c0:	3b04      	subs	r3, #4
 800a8c2:	2a00      	cmp	r2, #0
 800a8c4:	d1ca      	bne.n	800a85c <quorem+0x9c>
 800a8c6:	3c01      	subs	r4, #1
 800a8c8:	e7c5      	b.n	800a856 <quorem+0x96>
 800a8ca:	6812      	ldr	r2, [r2, #0]
 800a8cc:	3b04      	subs	r3, #4
 800a8ce:	2a00      	cmp	r2, #0
 800a8d0:	d1ef      	bne.n	800a8b2 <quorem+0xf2>
 800a8d2:	3c01      	subs	r4, #1
 800a8d4:	e7ea      	b.n	800a8ac <quorem+0xec>
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	e7ee      	b.n	800a8b8 <quorem+0xf8>
 800a8da:	0000      	movs	r0, r0
 800a8dc:	0000      	movs	r0, r0
	...

0800a8e0 <_dtoa_r>:
 800a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	69c7      	ldr	r7, [r0, #28]
 800a8e6:	b097      	sub	sp, #92	@ 0x5c
 800a8e8:	4681      	mov	r9, r0
 800a8ea:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a8ec:	9107      	str	r1, [sp, #28]
 800a8ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800a8f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a8f2:	ec55 4b10 	vmov	r4, r5, d0
 800a8f6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a8fa:	b97f      	cbnz	r7, 800a91c <_dtoa_r+0x3c>
 800a8fc:	2010      	movs	r0, #16
 800a8fe:	f000 fe4f 	bl	800b5a0 <malloc>
 800a902:	4602      	mov	r2, r0
 800a904:	f8c9 001c 	str.w	r0, [r9, #28]
 800a908:	b920      	cbnz	r0, 800a914 <_dtoa_r+0x34>
 800a90a:	4ba9      	ldr	r3, [pc, #676]	@ (800abb0 <_dtoa_r+0x2d0>)
 800a90c:	21ef      	movs	r1, #239	@ 0xef
 800a90e:	48a9      	ldr	r0, [pc, #676]	@ (800abb4 <_dtoa_r+0x2d4>)
 800a910:	f7ff ff30 	bl	800a774 <__assert_func>
 800a914:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a918:	6007      	str	r7, [r0, #0]
 800a91a:	60c7      	str	r7, [r0, #12]
 800a91c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a920:	6819      	ldr	r1, [r3, #0]
 800a922:	b159      	cbz	r1, 800a93c <_dtoa_r+0x5c>
 800a924:	685a      	ldr	r2, [r3, #4]
 800a926:	2301      	movs	r3, #1
 800a928:	4648      	mov	r0, r9
 800a92a:	4093      	lsls	r3, r2
 800a92c:	604a      	str	r2, [r1, #4]
 800a92e:	608b      	str	r3, [r1, #8]
 800a930:	f000 ff34 	bl	800b79c <_Bfree>
 800a934:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a938:	2200      	movs	r2, #0
 800a93a:	601a      	str	r2, [r3, #0]
 800a93c:	1e2b      	subs	r3, r5, #0
 800a93e:	bfb7      	itett	lt
 800a940:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a944:	2300      	movge	r3, #0
 800a946:	2201      	movlt	r2, #1
 800a948:	9305      	strlt	r3, [sp, #20]
 800a94a:	bfa8      	it	ge
 800a94c:	6033      	strge	r3, [r6, #0]
 800a94e:	9f05      	ldr	r7, [sp, #20]
 800a950:	4b99      	ldr	r3, [pc, #612]	@ (800abb8 <_dtoa_r+0x2d8>)
 800a952:	bfb8      	it	lt
 800a954:	6032      	strlt	r2, [r6, #0]
 800a956:	43bb      	bics	r3, r7
 800a958:	d112      	bne.n	800a980 <_dtoa_r+0xa0>
 800a95a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a95e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a960:	6013      	str	r3, [r2, #0]
 800a962:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a966:	4323      	orrs	r3, r4
 800a968:	f000 855a 	beq.w	800b420 <_dtoa_r+0xb40>
 800a96c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a96e:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800abcc <_dtoa_r+0x2ec>
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 855c 	beq.w	800b430 <_dtoa_r+0xb50>
 800a978:	f10a 0303 	add.w	r3, sl, #3
 800a97c:	f000 bd56 	b.w	800b42c <_dtoa_r+0xb4c>
 800a980:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a984:	2200      	movs	r2, #0
 800a986:	2300      	movs	r3, #0
 800a988:	ec51 0b17 	vmov	r0, r1, d7
 800a98c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a990:	f7f6 f888 	bl	8000aa4 <__aeabi_dcmpeq>
 800a994:	4680      	mov	r8, r0
 800a996:	b158      	cbz	r0, 800a9b0 <_dtoa_r+0xd0>
 800a998:	2301      	movs	r3, #1
 800a99a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a99c:	6013      	str	r3, [r2, #0]
 800a99e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a9a0:	b113      	cbz	r3, 800a9a8 <_dtoa_r+0xc8>
 800a9a2:	4b86      	ldr	r3, [pc, #536]	@ (800abbc <_dtoa_r+0x2dc>)
 800a9a4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a9a6:	6013      	str	r3, [r2, #0]
 800a9a8:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800abd0 <_dtoa_r+0x2f0>
 800a9ac:	f000 bd40 	b.w	800b430 <_dtoa_r+0xb50>
 800a9b0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a9b4:	aa14      	add	r2, sp, #80	@ 0x50
 800a9b6:	a915      	add	r1, sp, #84	@ 0x54
 800a9b8:	4648      	mov	r0, r9
 800a9ba:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a9be:	f001 fa95 	bl	800beec <__d2b>
 800a9c2:	9002      	str	r0, [sp, #8]
 800a9c4:	2e00      	cmp	r6, #0
 800a9c6:	d076      	beq.n	800aab6 <_dtoa_r+0x1d6>
 800a9c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9ca:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a9ce:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a9d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9d6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a9da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a9de:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	4b76      	ldr	r3, [pc, #472]	@ (800abc0 <_dtoa_r+0x2e0>)
 800a9e8:	f7f5 fc3c 	bl	8000264 <__aeabi_dsub>
 800a9ec:	a36a      	add	r3, pc, #424	@ (adr r3, 800ab98 <_dtoa_r+0x2b8>)
 800a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f2:	f7f5 fdef 	bl	80005d4 <__aeabi_dmul>
 800a9f6:	a36a      	add	r3, pc, #424	@ (adr r3, 800aba0 <_dtoa_r+0x2c0>)
 800a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fc:	f7f5 fc34 	bl	8000268 <__adddf3>
 800aa00:	4604      	mov	r4, r0
 800aa02:	460d      	mov	r5, r1
 800aa04:	4630      	mov	r0, r6
 800aa06:	f7f5 fd7b 	bl	8000500 <__aeabi_i2d>
 800aa0a:	a367      	add	r3, pc, #412	@ (adr r3, 800aba8 <_dtoa_r+0x2c8>)
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f7f5 fde0 	bl	80005d4 <__aeabi_dmul>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	4620      	mov	r0, r4
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	f7f5 fc24 	bl	8000268 <__adddf3>
 800aa20:	4604      	mov	r4, r0
 800aa22:	460d      	mov	r5, r1
 800aa24:	f7f6 f886 	bl	8000b34 <__aeabi_d2iz>
 800aa28:	2200      	movs	r2, #0
 800aa2a:	4607      	mov	r7, r0
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	4620      	mov	r0, r4
 800aa30:	4629      	mov	r1, r5
 800aa32:	f7f6 f841 	bl	8000ab8 <__aeabi_dcmplt>
 800aa36:	b140      	cbz	r0, 800aa4a <_dtoa_r+0x16a>
 800aa38:	4638      	mov	r0, r7
 800aa3a:	f7f5 fd61 	bl	8000500 <__aeabi_i2d>
 800aa3e:	4622      	mov	r2, r4
 800aa40:	462b      	mov	r3, r5
 800aa42:	f7f6 f82f 	bl	8000aa4 <__aeabi_dcmpeq>
 800aa46:	b900      	cbnz	r0, 800aa4a <_dtoa_r+0x16a>
 800aa48:	3f01      	subs	r7, #1
 800aa4a:	2f16      	cmp	r7, #22
 800aa4c:	d852      	bhi.n	800aaf4 <_dtoa_r+0x214>
 800aa4e:	4b5d      	ldr	r3, [pc, #372]	@ (800abc4 <_dtoa_r+0x2e4>)
 800aa50:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5c:	f7f6 f82c 	bl	8000ab8 <__aeabi_dcmplt>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d049      	beq.n	800aaf8 <_dtoa_r+0x218>
 800aa64:	3f01      	subs	r7, #1
 800aa66:	2300      	movs	r3, #0
 800aa68:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aa6c:	1b9b      	subs	r3, r3, r6
 800aa6e:	1e5a      	subs	r2, r3, #1
 800aa70:	bf4c      	ite	mi
 800aa72:	f1c3 0301 	rsbmi	r3, r3, #1
 800aa76:	2300      	movpl	r3, #0
 800aa78:	9206      	str	r2, [sp, #24]
 800aa7a:	bf45      	ittet	mi
 800aa7c:	9300      	strmi	r3, [sp, #0]
 800aa7e:	2300      	movmi	r3, #0
 800aa80:	9300      	strpl	r3, [sp, #0]
 800aa82:	9306      	strmi	r3, [sp, #24]
 800aa84:	2f00      	cmp	r7, #0
 800aa86:	db39      	blt.n	800aafc <_dtoa_r+0x21c>
 800aa88:	9b06      	ldr	r3, [sp, #24]
 800aa8a:	970d      	str	r7, [sp, #52]	@ 0x34
 800aa8c:	443b      	add	r3, r7
 800aa8e:	9306      	str	r3, [sp, #24]
 800aa90:	2300      	movs	r3, #0
 800aa92:	9308      	str	r3, [sp, #32]
 800aa94:	9b07      	ldr	r3, [sp, #28]
 800aa96:	2b09      	cmp	r3, #9
 800aa98:	d863      	bhi.n	800ab62 <_dtoa_r+0x282>
 800aa9a:	2b05      	cmp	r3, #5
 800aa9c:	bfc5      	ittet	gt
 800aa9e:	3b04      	subgt	r3, #4
 800aaa0:	2400      	movgt	r4, #0
 800aaa2:	2401      	movle	r4, #1
 800aaa4:	9307      	strgt	r3, [sp, #28]
 800aaa6:	9b07      	ldr	r3, [sp, #28]
 800aaa8:	3b02      	subs	r3, #2
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	d865      	bhi.n	800ab7a <_dtoa_r+0x29a>
 800aaae:	e8df f003 	tbb	[pc, r3]
 800aab2:	5654      	.short	0x5654
 800aab4:	2d39      	.short	0x2d39
 800aab6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800aaba:	441e      	add	r6, r3
 800aabc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aac0:	2b20      	cmp	r3, #32
 800aac2:	bfc9      	itett	gt
 800aac4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aac8:	f1c3 0320 	rsble	r3, r3, #32
 800aacc:	409f      	lslgt	r7, r3
 800aace:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aad2:	bfd8      	it	le
 800aad4:	fa04 f003 	lslle.w	r0, r4, r3
 800aad8:	f106 36ff 	add.w	r6, r6, #4294967295
 800aadc:	bfc4      	itt	gt
 800aade:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aae2:	ea47 0003 	orrgt.w	r0, r7, r3
 800aae6:	f7f5 fcfb 	bl	80004e0 <__aeabi_ui2d>
 800aaea:	2201      	movs	r2, #1
 800aaec:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aaf0:	9212      	str	r2, [sp, #72]	@ 0x48
 800aaf2:	e776      	b.n	800a9e2 <_dtoa_r+0x102>
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e7b7      	b.n	800aa68 <_dtoa_r+0x188>
 800aaf8:	9010      	str	r0, [sp, #64]	@ 0x40
 800aafa:	e7b6      	b.n	800aa6a <_dtoa_r+0x18a>
 800aafc:	9b00      	ldr	r3, [sp, #0]
 800aafe:	1bdb      	subs	r3, r3, r7
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	427b      	negs	r3, r7
 800ab04:	9308      	str	r3, [sp, #32]
 800ab06:	2300      	movs	r3, #0
 800ab08:	930d      	str	r3, [sp, #52]	@ 0x34
 800ab0a:	e7c3      	b.n	800aa94 <_dtoa_r+0x1b4>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab12:	eb07 0b03 	add.w	fp, r7, r3
 800ab16:	f10b 0301 	add.w	r3, fp, #1
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	9303      	str	r3, [sp, #12]
 800ab1e:	bfb8      	it	lt
 800ab20:	2301      	movlt	r3, #1
 800ab22:	e006      	b.n	800ab32 <_dtoa_r+0x252>
 800ab24:	2301      	movs	r3, #1
 800ab26:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	dd28      	ble.n	800ab80 <_dtoa_r+0x2a0>
 800ab2e:	469b      	mov	fp, r3
 800ab30:	9303      	str	r3, [sp, #12]
 800ab32:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ab36:	2100      	movs	r1, #0
 800ab38:	2204      	movs	r2, #4
 800ab3a:	f102 0514 	add.w	r5, r2, #20
 800ab3e:	429d      	cmp	r5, r3
 800ab40:	d926      	bls.n	800ab90 <_dtoa_r+0x2b0>
 800ab42:	6041      	str	r1, [r0, #4]
 800ab44:	4648      	mov	r0, r9
 800ab46:	f000 fde9 	bl	800b71c <_Balloc>
 800ab4a:	4682      	mov	sl, r0
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d141      	bne.n	800abd4 <_dtoa_r+0x2f4>
 800ab50:	4b1d      	ldr	r3, [pc, #116]	@ (800abc8 <_dtoa_r+0x2e8>)
 800ab52:	4602      	mov	r2, r0
 800ab54:	f240 11af 	movw	r1, #431	@ 0x1af
 800ab58:	e6d9      	b.n	800a90e <_dtoa_r+0x2e>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	e7e3      	b.n	800ab26 <_dtoa_r+0x246>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	e7d5      	b.n	800ab0e <_dtoa_r+0x22e>
 800ab62:	2401      	movs	r4, #1
 800ab64:	2300      	movs	r3, #0
 800ab66:	9409      	str	r4, [sp, #36]	@ 0x24
 800ab68:	9307      	str	r3, [sp, #28]
 800ab6a:	f04f 3bff 	mov.w	fp, #4294967295
 800ab6e:	2200      	movs	r2, #0
 800ab70:	2312      	movs	r3, #18
 800ab72:	f8cd b00c 	str.w	fp, [sp, #12]
 800ab76:	920c      	str	r2, [sp, #48]	@ 0x30
 800ab78:	e7db      	b.n	800ab32 <_dtoa_r+0x252>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab7e:	e7f4      	b.n	800ab6a <_dtoa_r+0x28a>
 800ab80:	f04f 0b01 	mov.w	fp, #1
 800ab84:	465b      	mov	r3, fp
 800ab86:	f8cd b00c 	str.w	fp, [sp, #12]
 800ab8a:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ab8e:	e7d0      	b.n	800ab32 <_dtoa_r+0x252>
 800ab90:	3101      	adds	r1, #1
 800ab92:	0052      	lsls	r2, r2, #1
 800ab94:	e7d1      	b.n	800ab3a <_dtoa_r+0x25a>
 800ab96:	bf00      	nop
 800ab98:	636f4361 	.word	0x636f4361
 800ab9c:	3fd287a7 	.word	0x3fd287a7
 800aba0:	8b60c8b3 	.word	0x8b60c8b3
 800aba4:	3fc68a28 	.word	0x3fc68a28
 800aba8:	509f79fb 	.word	0x509f79fb
 800abac:	3fd34413 	.word	0x3fd34413
 800abb0:	0800e9c7 	.word	0x0800e9c7
 800abb4:	0800eace 	.word	0x0800eace
 800abb8:	7ff00000 	.word	0x7ff00000
 800abbc:	0800ebba 	.word	0x0800ebba
 800abc0:	3ff80000 	.word	0x3ff80000
 800abc4:	0800ed20 	.word	0x0800ed20
 800abc8:	0800eb26 	.word	0x0800eb26
 800abcc:	0800eaca 	.word	0x0800eaca
 800abd0:	0800ebb9 	.word	0x0800ebb9
 800abd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800abd8:	6018      	str	r0, [r3, #0]
 800abda:	9b03      	ldr	r3, [sp, #12]
 800abdc:	2b0e      	cmp	r3, #14
 800abde:	f200 80a1 	bhi.w	800ad24 <_dtoa_r+0x444>
 800abe2:	2c00      	cmp	r4, #0
 800abe4:	f000 809e 	beq.w	800ad24 <_dtoa_r+0x444>
 800abe8:	2f00      	cmp	r7, #0
 800abea:	dd33      	ble.n	800ac54 <_dtoa_r+0x374>
 800abec:	f007 020f 	and.w	r2, r7, #15
 800abf0:	4b9b      	ldr	r3, [pc, #620]	@ (800ae60 <_dtoa_r+0x580>)
 800abf2:	05f8      	lsls	r0, r7, #23
 800abf4:	ea4f 1427 	mov.w	r4, r7, asr #4
 800abf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abfc:	ed93 7b00 	vldr	d7, [r3]
 800ac00:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ac04:	d516      	bpl.n	800ac34 <_dtoa_r+0x354>
 800ac06:	4b97      	ldr	r3, [pc, #604]	@ (800ae64 <_dtoa_r+0x584>)
 800ac08:	f004 040f 	and.w	r4, r4, #15
 800ac0c:	2603      	movs	r6, #3
 800ac0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ac16:	f7f5 fe07 	bl	8000828 <__aeabi_ddiv>
 800ac1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac1e:	4d91      	ldr	r5, [pc, #580]	@ (800ae64 <_dtoa_r+0x584>)
 800ac20:	b954      	cbnz	r4, 800ac38 <_dtoa_r+0x358>
 800ac22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac2a:	f7f5 fdfd 	bl	8000828 <__aeabi_ddiv>
 800ac2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac32:	e028      	b.n	800ac86 <_dtoa_r+0x3a6>
 800ac34:	2602      	movs	r6, #2
 800ac36:	e7f2      	b.n	800ac1e <_dtoa_r+0x33e>
 800ac38:	07e1      	lsls	r1, r4, #31
 800ac3a:	d508      	bpl.n	800ac4e <_dtoa_r+0x36e>
 800ac3c:	3601      	adds	r6, #1
 800ac3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ac42:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac46:	f7f5 fcc5 	bl	80005d4 <__aeabi_dmul>
 800ac4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ac4e:	1064      	asrs	r4, r4, #1
 800ac50:	3508      	adds	r5, #8
 800ac52:	e7e5      	b.n	800ac20 <_dtoa_r+0x340>
 800ac54:	f000 80af 	beq.w	800adb6 <_dtoa_r+0x4d6>
 800ac58:	427c      	negs	r4, r7
 800ac5a:	4b81      	ldr	r3, [pc, #516]	@ (800ae60 <_dtoa_r+0x580>)
 800ac5c:	4d81      	ldr	r5, [pc, #516]	@ (800ae64 <_dtoa_r+0x584>)
 800ac5e:	2602      	movs	r6, #2
 800ac60:	f004 020f 	and.w	r2, r4, #15
 800ac64:	1124      	asrs	r4, r4, #4
 800ac66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ac6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac72:	f7f5 fcaf 	bl	80005d4 <__aeabi_dmul>
 800ac76:	2300      	movs	r3, #0
 800ac78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac7c:	2c00      	cmp	r4, #0
 800ac7e:	f040 808f 	bne.w	800ada0 <_dtoa_r+0x4c0>
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1d3      	bne.n	800ac2e <_dtoa_r+0x34e>
 800ac86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ac88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f000 8094 	beq.w	800adba <_dtoa_r+0x4da>
 800ac92:	2200      	movs	r2, #0
 800ac94:	4b74      	ldr	r3, [pc, #464]	@ (800ae68 <_dtoa_r+0x588>)
 800ac96:	4620      	mov	r0, r4
 800ac98:	4629      	mov	r1, r5
 800ac9a:	f7f5 ff0d 	bl	8000ab8 <__aeabi_dcmplt>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	f000 808b 	beq.w	800adba <_dtoa_r+0x4da>
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f000 8087 	beq.w	800adba <_dtoa_r+0x4da>
 800acac:	f1bb 0f00 	cmp.w	fp, #0
 800acb0:	dd34      	ble.n	800ad1c <_dtoa_r+0x43c>
 800acb2:	4620      	mov	r0, r4
 800acb4:	f107 38ff 	add.w	r8, r7, #4294967295
 800acb8:	3601      	adds	r6, #1
 800acba:	465c      	mov	r4, fp
 800acbc:	2200      	movs	r2, #0
 800acbe:	4b6b      	ldr	r3, [pc, #428]	@ (800ae6c <_dtoa_r+0x58c>)
 800acc0:	4629      	mov	r1, r5
 800acc2:	f7f5 fc87 	bl	80005d4 <__aeabi_dmul>
 800acc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acca:	4630      	mov	r0, r6
 800accc:	f7f5 fc18 	bl	8000500 <__aeabi_i2d>
 800acd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acd4:	f7f5 fc7e 	bl	80005d4 <__aeabi_dmul>
 800acd8:	2200      	movs	r2, #0
 800acda:	4b65      	ldr	r3, [pc, #404]	@ (800ae70 <_dtoa_r+0x590>)
 800acdc:	f7f5 fac4 	bl	8000268 <__adddf3>
 800ace0:	4605      	mov	r5, r0
 800ace2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ace6:	2c00      	cmp	r4, #0
 800ace8:	d16a      	bne.n	800adc0 <_dtoa_r+0x4e0>
 800acea:	2200      	movs	r2, #0
 800acec:	4b61      	ldr	r3, [pc, #388]	@ (800ae74 <_dtoa_r+0x594>)
 800acee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acf2:	f7f5 fab7 	bl	8000264 <__aeabi_dsub>
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800acfe:	462a      	mov	r2, r5
 800ad00:	4633      	mov	r3, r6
 800ad02:	f7f5 fef7 	bl	8000af4 <__aeabi_dcmpgt>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	f040 8298 	bne.w	800b23c <_dtoa_r+0x95c>
 800ad0c:	462a      	mov	r2, r5
 800ad0e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ad12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad16:	f7f5 fecf 	bl	8000ab8 <__aeabi_dcmplt>
 800ad1a:	bb38      	cbnz	r0, 800ad6c <_dtoa_r+0x48c>
 800ad1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ad20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ad24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f2c0 8157 	blt.w	800afda <_dtoa_r+0x6fa>
 800ad2c:	2f0e      	cmp	r7, #14
 800ad2e:	f300 8154 	bgt.w	800afda <_dtoa_r+0x6fa>
 800ad32:	4b4b      	ldr	r3, [pc, #300]	@ (800ae60 <_dtoa_r+0x580>)
 800ad34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad38:	ed93 7b00 	vldr	d7, [r3]
 800ad3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	ed8d 7b00 	vstr	d7, [sp]
 800ad44:	f280 80e5 	bge.w	800af12 <_dtoa_r+0x632>
 800ad48:	9b03      	ldr	r3, [sp, #12]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f300 80e1 	bgt.w	800af12 <_dtoa_r+0x632>
 800ad50:	d10c      	bne.n	800ad6c <_dtoa_r+0x48c>
 800ad52:	2200      	movs	r2, #0
 800ad54:	4b47      	ldr	r3, [pc, #284]	@ (800ae74 <_dtoa_r+0x594>)
 800ad56:	ec51 0b17 	vmov	r0, r1, d7
 800ad5a:	f7f5 fc3b 	bl	80005d4 <__aeabi_dmul>
 800ad5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad62:	f7f5 febd 	bl	8000ae0 <__aeabi_dcmpge>
 800ad66:	2800      	cmp	r0, #0
 800ad68:	f000 8266 	beq.w	800b238 <_dtoa_r+0x958>
 800ad6c:	2400      	movs	r4, #0
 800ad6e:	4625      	mov	r5, r4
 800ad70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad72:	4656      	mov	r6, sl
 800ad74:	ea6f 0803 	mvn.w	r8, r3
 800ad78:	2700      	movs	r7, #0
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	4648      	mov	r0, r9
 800ad7e:	f000 fd0d 	bl	800b79c <_Bfree>
 800ad82:	2d00      	cmp	r5, #0
 800ad84:	f000 80bd 	beq.w	800af02 <_dtoa_r+0x622>
 800ad88:	b12f      	cbz	r7, 800ad96 <_dtoa_r+0x4b6>
 800ad8a:	42af      	cmp	r7, r5
 800ad8c:	d003      	beq.n	800ad96 <_dtoa_r+0x4b6>
 800ad8e:	4639      	mov	r1, r7
 800ad90:	4648      	mov	r0, r9
 800ad92:	f000 fd03 	bl	800b79c <_Bfree>
 800ad96:	4629      	mov	r1, r5
 800ad98:	4648      	mov	r0, r9
 800ad9a:	f000 fcff 	bl	800b79c <_Bfree>
 800ad9e:	e0b0      	b.n	800af02 <_dtoa_r+0x622>
 800ada0:	07e2      	lsls	r2, r4, #31
 800ada2:	d505      	bpl.n	800adb0 <_dtoa_r+0x4d0>
 800ada4:	3601      	adds	r6, #1
 800ada6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800adaa:	f7f5 fc13 	bl	80005d4 <__aeabi_dmul>
 800adae:	2301      	movs	r3, #1
 800adb0:	1064      	asrs	r4, r4, #1
 800adb2:	3508      	adds	r5, #8
 800adb4:	e762      	b.n	800ac7c <_dtoa_r+0x39c>
 800adb6:	2602      	movs	r6, #2
 800adb8:	e765      	b.n	800ac86 <_dtoa_r+0x3a6>
 800adba:	46b8      	mov	r8, r7
 800adbc:	9c03      	ldr	r4, [sp, #12]
 800adbe:	e784      	b.n	800acca <_dtoa_r+0x3ea>
 800adc0:	4b27      	ldr	r3, [pc, #156]	@ (800ae60 <_dtoa_r+0x580>)
 800adc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800adc8:	4454      	add	r4, sl
 800adca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adce:	2900      	cmp	r1, #0
 800add0:	d054      	beq.n	800ae7c <_dtoa_r+0x59c>
 800add2:	2000      	movs	r0, #0
 800add4:	4928      	ldr	r1, [pc, #160]	@ (800ae78 <_dtoa_r+0x598>)
 800add6:	f7f5 fd27 	bl	8000828 <__aeabi_ddiv>
 800adda:	4633      	mov	r3, r6
 800addc:	4656      	mov	r6, sl
 800adde:	462a      	mov	r2, r5
 800ade0:	f7f5 fa40 	bl	8000264 <__aeabi_dsub>
 800ade4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ade8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adec:	f7f5 fea2 	bl	8000b34 <__aeabi_d2iz>
 800adf0:	4605      	mov	r5, r0
 800adf2:	f7f5 fb85 	bl	8000500 <__aeabi_i2d>
 800adf6:	4602      	mov	r2, r0
 800adf8:	460b      	mov	r3, r1
 800adfa:	3530      	adds	r5, #48	@ 0x30
 800adfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae00:	f7f5 fa30 	bl	8000264 <__aeabi_dsub>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	f806 5b01 	strb.w	r5, [r6], #1
 800ae0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ae14:	f7f5 fe50 	bl	8000ab8 <__aeabi_dcmplt>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d172      	bne.n	800af02 <_dtoa_r+0x622>
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	4912      	ldr	r1, [pc, #72]	@ (800ae68 <_dtoa_r+0x588>)
 800ae20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae24:	f7f5 fa1e 	bl	8000264 <__aeabi_dsub>
 800ae28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ae2c:	f7f5 fe44 	bl	8000ab8 <__aeabi_dcmplt>
 800ae30:	2800      	cmp	r0, #0
 800ae32:	f040 80b4 	bne.w	800af9e <_dtoa_r+0x6be>
 800ae36:	42a6      	cmp	r6, r4
 800ae38:	f43f af70 	beq.w	800ad1c <_dtoa_r+0x43c>
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ae6c <_dtoa_r+0x58c>)
 800ae40:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ae44:	f7f5 fbc6 	bl	80005d4 <__aeabi_dmul>
 800ae48:	2200      	movs	r2, #0
 800ae4a:	4b08      	ldr	r3, [pc, #32]	@ (800ae6c <_dtoa_r+0x58c>)
 800ae4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ae50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae54:	f7f5 fbbe 	bl	80005d4 <__aeabi_dmul>
 800ae58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae5c:	e7c4      	b.n	800ade8 <_dtoa_r+0x508>
 800ae5e:	bf00      	nop
 800ae60:	0800ed20 	.word	0x0800ed20
 800ae64:	0800ecf8 	.word	0x0800ecf8
 800ae68:	3ff00000 	.word	0x3ff00000
 800ae6c:	40240000 	.word	0x40240000
 800ae70:	401c0000 	.word	0x401c0000
 800ae74:	40140000 	.word	0x40140000
 800ae78:	3fe00000 	.word	0x3fe00000
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	4656      	mov	r6, sl
 800ae80:	4628      	mov	r0, r5
 800ae82:	f7f5 fba7 	bl	80005d4 <__aeabi_dmul>
 800ae86:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ae88:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ae8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae90:	f7f5 fe50 	bl	8000b34 <__aeabi_d2iz>
 800ae94:	4605      	mov	r5, r0
 800ae96:	f7f5 fb33 	bl	8000500 <__aeabi_i2d>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	3530      	adds	r5, #48	@ 0x30
 800ae9e:	460b      	mov	r3, r1
 800aea0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aea4:	f7f5 f9de 	bl	8000264 <__aeabi_dsub>
 800aea8:	f806 5b01 	strb.w	r5, [r6], #1
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	42a6      	cmp	r6, r4
 800aeb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aeb6:	f04f 0200 	mov.w	r2, #0
 800aeba:	d124      	bne.n	800af06 <_dtoa_r+0x626>
 800aebc:	4baf      	ldr	r3, [pc, #700]	@ (800b17c <_dtoa_r+0x89c>)
 800aebe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aec2:	f7f5 f9d1 	bl	8000268 <__adddf3>
 800aec6:	4602      	mov	r2, r0
 800aec8:	460b      	mov	r3, r1
 800aeca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aece:	f7f5 fe11 	bl	8000af4 <__aeabi_dcmpgt>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d163      	bne.n	800af9e <_dtoa_r+0x6be>
 800aed6:	2000      	movs	r0, #0
 800aed8:	49a8      	ldr	r1, [pc, #672]	@ (800b17c <_dtoa_r+0x89c>)
 800aeda:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aede:	f7f5 f9c1 	bl	8000264 <__aeabi_dsub>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aeea:	f7f5 fde5 	bl	8000ab8 <__aeabi_dcmplt>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	f43f af14 	beq.w	800ad1c <_dtoa_r+0x43c>
 800aef4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800aef6:	1e73      	subs	r3, r6, #1
 800aef8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aefa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aefe:	2b30      	cmp	r3, #48	@ 0x30
 800af00:	d0f8      	beq.n	800aef4 <_dtoa_r+0x614>
 800af02:	4647      	mov	r7, r8
 800af04:	e03b      	b.n	800af7e <_dtoa_r+0x69e>
 800af06:	4b9e      	ldr	r3, [pc, #632]	@ (800b180 <_dtoa_r+0x8a0>)
 800af08:	f7f5 fb64 	bl	80005d4 <__aeabi_dmul>
 800af0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af10:	e7bc      	b.n	800ae8c <_dtoa_r+0x5ac>
 800af12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800af16:	4656      	mov	r6, sl
 800af18:	4620      	mov	r0, r4
 800af1a:	4629      	mov	r1, r5
 800af1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af20:	f7f5 fc82 	bl	8000828 <__aeabi_ddiv>
 800af24:	f7f5 fe06 	bl	8000b34 <__aeabi_d2iz>
 800af28:	4680      	mov	r8, r0
 800af2a:	f7f5 fae9 	bl	8000500 <__aeabi_i2d>
 800af2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af32:	f7f5 fb4f 	bl	80005d4 <__aeabi_dmul>
 800af36:	4602      	mov	r2, r0
 800af38:	4620      	mov	r0, r4
 800af3a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800af3e:	460b      	mov	r3, r1
 800af40:	4629      	mov	r1, r5
 800af42:	f7f5 f98f 	bl	8000264 <__aeabi_dsub>
 800af46:	9d03      	ldr	r5, [sp, #12]
 800af48:	f806 4b01 	strb.w	r4, [r6], #1
 800af4c:	eba6 040a 	sub.w	r4, r6, sl
 800af50:	4602      	mov	r2, r0
 800af52:	460b      	mov	r3, r1
 800af54:	42a5      	cmp	r5, r4
 800af56:	d133      	bne.n	800afc0 <_dtoa_r+0x6e0>
 800af58:	f7f5 f986 	bl	8000268 <__adddf3>
 800af5c:	4604      	mov	r4, r0
 800af5e:	460d      	mov	r5, r1
 800af60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af64:	f7f5 fdc6 	bl	8000af4 <__aeabi_dcmpgt>
 800af68:	b9c0      	cbnz	r0, 800af9c <_dtoa_r+0x6bc>
 800af6a:	4620      	mov	r0, r4
 800af6c:	4629      	mov	r1, r5
 800af6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af72:	f7f5 fd97 	bl	8000aa4 <__aeabi_dcmpeq>
 800af76:	b110      	cbz	r0, 800af7e <_dtoa_r+0x69e>
 800af78:	f018 0f01 	tst.w	r8, #1
 800af7c:	d10e      	bne.n	800af9c <_dtoa_r+0x6bc>
 800af7e:	9902      	ldr	r1, [sp, #8]
 800af80:	4648      	mov	r0, r9
 800af82:	f000 fc0b 	bl	800b79c <_Bfree>
 800af86:	2300      	movs	r3, #0
 800af88:	3701      	adds	r7, #1
 800af8a:	7033      	strb	r3, [r6, #0]
 800af8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af8e:	601f      	str	r7, [r3, #0]
 800af90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800af92:	2b00      	cmp	r3, #0
 800af94:	f000 824c 	beq.w	800b430 <_dtoa_r+0xb50>
 800af98:	601e      	str	r6, [r3, #0]
 800af9a:	e249      	b.n	800b430 <_dtoa_r+0xb50>
 800af9c:	46b8      	mov	r8, r7
 800af9e:	4633      	mov	r3, r6
 800afa0:	461e      	mov	r6, r3
 800afa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afa6:	2a39      	cmp	r2, #57	@ 0x39
 800afa8:	d106      	bne.n	800afb8 <_dtoa_r+0x6d8>
 800afaa:	459a      	cmp	sl, r3
 800afac:	d1f8      	bne.n	800afa0 <_dtoa_r+0x6c0>
 800afae:	2230      	movs	r2, #48	@ 0x30
 800afb0:	f108 0801 	add.w	r8, r8, #1
 800afb4:	f88a 2000 	strb.w	r2, [sl]
 800afb8:	781a      	ldrb	r2, [r3, #0]
 800afba:	3201      	adds	r2, #1
 800afbc:	701a      	strb	r2, [r3, #0]
 800afbe:	e7a0      	b.n	800af02 <_dtoa_r+0x622>
 800afc0:	2200      	movs	r2, #0
 800afc2:	4b6f      	ldr	r3, [pc, #444]	@ (800b180 <_dtoa_r+0x8a0>)
 800afc4:	f7f5 fb06 	bl	80005d4 <__aeabi_dmul>
 800afc8:	2200      	movs	r2, #0
 800afca:	2300      	movs	r3, #0
 800afcc:	4604      	mov	r4, r0
 800afce:	460d      	mov	r5, r1
 800afd0:	f7f5 fd68 	bl	8000aa4 <__aeabi_dcmpeq>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d09f      	beq.n	800af18 <_dtoa_r+0x638>
 800afd8:	e7d1      	b.n	800af7e <_dtoa_r+0x69e>
 800afda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afdc:	2a00      	cmp	r2, #0
 800afde:	f000 80ea 	beq.w	800b1b6 <_dtoa_r+0x8d6>
 800afe2:	9a07      	ldr	r2, [sp, #28]
 800afe4:	2a01      	cmp	r2, #1
 800afe6:	f300 80cd 	bgt.w	800b184 <_dtoa_r+0x8a4>
 800afea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800afec:	2a00      	cmp	r2, #0
 800afee:	f000 80c1 	beq.w	800b174 <_dtoa_r+0x894>
 800aff2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800aff6:	9c08      	ldr	r4, [sp, #32]
 800aff8:	9e00      	ldr	r6, [sp, #0]
 800affa:	9a00      	ldr	r2, [sp, #0]
 800affc:	2101      	movs	r1, #1
 800affe:	4648      	mov	r0, r9
 800b000:	441a      	add	r2, r3
 800b002:	9200      	str	r2, [sp, #0]
 800b004:	9a06      	ldr	r2, [sp, #24]
 800b006:	441a      	add	r2, r3
 800b008:	9206      	str	r2, [sp, #24]
 800b00a:	f000 fcc7 	bl	800b99c <__i2b>
 800b00e:	4605      	mov	r5, r0
 800b010:	b166      	cbz	r6, 800b02c <_dtoa_r+0x74c>
 800b012:	9b06      	ldr	r3, [sp, #24]
 800b014:	2b00      	cmp	r3, #0
 800b016:	dd09      	ble.n	800b02c <_dtoa_r+0x74c>
 800b018:	42b3      	cmp	r3, r6
 800b01a:	9a00      	ldr	r2, [sp, #0]
 800b01c:	bfa8      	it	ge
 800b01e:	4633      	movge	r3, r6
 800b020:	1ad2      	subs	r2, r2, r3
 800b022:	1af6      	subs	r6, r6, r3
 800b024:	9200      	str	r2, [sp, #0]
 800b026:	9a06      	ldr	r2, [sp, #24]
 800b028:	1ad3      	subs	r3, r2, r3
 800b02a:	9306      	str	r3, [sp, #24]
 800b02c:	9b08      	ldr	r3, [sp, #32]
 800b02e:	b30b      	cbz	r3, 800b074 <_dtoa_r+0x794>
 800b030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b032:	2b00      	cmp	r3, #0
 800b034:	f000 80c6 	beq.w	800b1c4 <_dtoa_r+0x8e4>
 800b038:	2c00      	cmp	r4, #0
 800b03a:	f000 80c0 	beq.w	800b1be <_dtoa_r+0x8de>
 800b03e:	4629      	mov	r1, r5
 800b040:	4622      	mov	r2, r4
 800b042:	4648      	mov	r0, r9
 800b044:	f000 fd64 	bl	800bb10 <__pow5mult>
 800b048:	9a02      	ldr	r2, [sp, #8]
 800b04a:	4601      	mov	r1, r0
 800b04c:	4605      	mov	r5, r0
 800b04e:	4648      	mov	r0, r9
 800b050:	f000 fcba 	bl	800b9c8 <__multiply>
 800b054:	9902      	ldr	r1, [sp, #8]
 800b056:	4680      	mov	r8, r0
 800b058:	4648      	mov	r0, r9
 800b05a:	f000 fb9f 	bl	800b79c <_Bfree>
 800b05e:	9b08      	ldr	r3, [sp, #32]
 800b060:	1b1b      	subs	r3, r3, r4
 800b062:	9308      	str	r3, [sp, #32]
 800b064:	f000 80b1 	beq.w	800b1ca <_dtoa_r+0x8ea>
 800b068:	9a08      	ldr	r2, [sp, #32]
 800b06a:	4641      	mov	r1, r8
 800b06c:	4648      	mov	r0, r9
 800b06e:	f000 fd4f 	bl	800bb10 <__pow5mult>
 800b072:	9002      	str	r0, [sp, #8]
 800b074:	2101      	movs	r1, #1
 800b076:	4648      	mov	r0, r9
 800b078:	f000 fc90 	bl	800b99c <__i2b>
 800b07c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b07e:	4604      	mov	r4, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	f000 81d9 	beq.w	800b438 <_dtoa_r+0xb58>
 800b086:	461a      	mov	r2, r3
 800b088:	4601      	mov	r1, r0
 800b08a:	4648      	mov	r0, r9
 800b08c:	f000 fd40 	bl	800bb10 <__pow5mult>
 800b090:	9b07      	ldr	r3, [sp, #28]
 800b092:	4604      	mov	r4, r0
 800b094:	2b01      	cmp	r3, #1
 800b096:	f300 809f 	bgt.w	800b1d8 <_dtoa_r+0x8f8>
 800b09a:	9b04      	ldr	r3, [sp, #16]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f040 8097 	bne.w	800b1d0 <_dtoa_r+0x8f0>
 800b0a2:	9b05      	ldr	r3, [sp, #20]
 800b0a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f040 8093 	bne.w	800b1d4 <_dtoa_r+0x8f4>
 800b0ae:	9b05      	ldr	r3, [sp, #20]
 800b0b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0b4:	0d1b      	lsrs	r3, r3, #20
 800b0b6:	051b      	lsls	r3, r3, #20
 800b0b8:	b133      	cbz	r3, 800b0c8 <_dtoa_r+0x7e8>
 800b0ba:	9b00      	ldr	r3, [sp, #0]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	9b06      	ldr	r3, [sp, #24]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	9306      	str	r3, [sp, #24]
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	9308      	str	r3, [sp, #32]
 800b0ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 81b9 	beq.w	800b444 <_dtoa_r+0xb64>
 800b0d2:	6923      	ldr	r3, [r4, #16]
 800b0d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b0d8:	6918      	ldr	r0, [r3, #16]
 800b0da:	f000 fc13 	bl	800b904 <__hi0bits>
 800b0de:	f1c0 0020 	rsb	r0, r0, #32
 800b0e2:	9b06      	ldr	r3, [sp, #24]
 800b0e4:	4418      	add	r0, r3
 800b0e6:	f010 001f 	ands.w	r0, r0, #31
 800b0ea:	f000 8082 	beq.w	800b1f2 <_dtoa_r+0x912>
 800b0ee:	f1c0 0320 	rsb	r3, r0, #32
 800b0f2:	2b04      	cmp	r3, #4
 800b0f4:	dd73      	ble.n	800b1de <_dtoa_r+0x8fe>
 800b0f6:	f1c0 001c 	rsb	r0, r0, #28
 800b0fa:	9b00      	ldr	r3, [sp, #0]
 800b0fc:	4403      	add	r3, r0
 800b0fe:	4406      	add	r6, r0
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	9b06      	ldr	r3, [sp, #24]
 800b104:	4403      	add	r3, r0
 800b106:	9306      	str	r3, [sp, #24]
 800b108:	9b00      	ldr	r3, [sp, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	dd05      	ble.n	800b11a <_dtoa_r+0x83a>
 800b10e:	461a      	mov	r2, r3
 800b110:	9902      	ldr	r1, [sp, #8]
 800b112:	4648      	mov	r0, r9
 800b114:	f000 fd56 	bl	800bbc4 <__lshift>
 800b118:	9002      	str	r0, [sp, #8]
 800b11a:	9b06      	ldr	r3, [sp, #24]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	dd05      	ble.n	800b12c <_dtoa_r+0x84c>
 800b120:	4621      	mov	r1, r4
 800b122:	461a      	mov	r2, r3
 800b124:	4648      	mov	r0, r9
 800b126:	f000 fd4d 	bl	800bbc4 <__lshift>
 800b12a:	4604      	mov	r4, r0
 800b12c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d061      	beq.n	800b1f6 <_dtoa_r+0x916>
 800b132:	4621      	mov	r1, r4
 800b134:	9802      	ldr	r0, [sp, #8]
 800b136:	f000 fdb1 	bl	800bc9c <__mcmp>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	da5b      	bge.n	800b1f6 <_dtoa_r+0x916>
 800b13e:	2300      	movs	r3, #0
 800b140:	220a      	movs	r2, #10
 800b142:	9902      	ldr	r1, [sp, #8]
 800b144:	4648      	mov	r0, r9
 800b146:	f000 fb4b 	bl	800b7e0 <__multadd>
 800b14a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b14c:	f107 38ff 	add.w	r8, r7, #4294967295
 800b150:	9002      	str	r0, [sp, #8]
 800b152:	2b00      	cmp	r3, #0
 800b154:	f000 8178 	beq.w	800b448 <_dtoa_r+0xb68>
 800b158:	4629      	mov	r1, r5
 800b15a:	2300      	movs	r3, #0
 800b15c:	220a      	movs	r2, #10
 800b15e:	4648      	mov	r0, r9
 800b160:	f000 fb3e 	bl	800b7e0 <__multadd>
 800b164:	f1bb 0f00 	cmp.w	fp, #0
 800b168:	4605      	mov	r5, r0
 800b16a:	dc6f      	bgt.n	800b24c <_dtoa_r+0x96c>
 800b16c:	9b07      	ldr	r3, [sp, #28]
 800b16e:	2b02      	cmp	r3, #2
 800b170:	dc49      	bgt.n	800b206 <_dtoa_r+0x926>
 800b172:	e06b      	b.n	800b24c <_dtoa_r+0x96c>
 800b174:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b176:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b17a:	e73c      	b.n	800aff6 <_dtoa_r+0x716>
 800b17c:	3fe00000 	.word	0x3fe00000
 800b180:	40240000 	.word	0x40240000
 800b184:	9b03      	ldr	r3, [sp, #12]
 800b186:	1e5c      	subs	r4, r3, #1
 800b188:	9b08      	ldr	r3, [sp, #32]
 800b18a:	42a3      	cmp	r3, r4
 800b18c:	db09      	blt.n	800b1a2 <_dtoa_r+0x8c2>
 800b18e:	1b1c      	subs	r4, r3, r4
 800b190:	9b03      	ldr	r3, [sp, #12]
 800b192:	2b00      	cmp	r3, #0
 800b194:	f6bf af30 	bge.w	800aff8 <_dtoa_r+0x718>
 800b198:	9b00      	ldr	r3, [sp, #0]
 800b19a:	9a03      	ldr	r2, [sp, #12]
 800b19c:	1a9e      	subs	r6, r3, r2
 800b19e:	2300      	movs	r3, #0
 800b1a0:	e72b      	b.n	800affa <_dtoa_r+0x71a>
 800b1a2:	9b08      	ldr	r3, [sp, #32]
 800b1a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b1a6:	1ae3      	subs	r3, r4, r3
 800b1a8:	9408      	str	r4, [sp, #32]
 800b1aa:	9e00      	ldr	r6, [sp, #0]
 800b1ac:	2400      	movs	r4, #0
 800b1ae:	441a      	add	r2, r3
 800b1b0:	9b03      	ldr	r3, [sp, #12]
 800b1b2:	920d      	str	r2, [sp, #52]	@ 0x34
 800b1b4:	e721      	b.n	800affa <_dtoa_r+0x71a>
 800b1b6:	9c08      	ldr	r4, [sp, #32]
 800b1b8:	9e00      	ldr	r6, [sp, #0]
 800b1ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b1bc:	e728      	b.n	800b010 <_dtoa_r+0x730>
 800b1be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b1c2:	e751      	b.n	800b068 <_dtoa_r+0x788>
 800b1c4:	9a08      	ldr	r2, [sp, #32]
 800b1c6:	9902      	ldr	r1, [sp, #8]
 800b1c8:	e750      	b.n	800b06c <_dtoa_r+0x78c>
 800b1ca:	f8cd 8008 	str.w	r8, [sp, #8]
 800b1ce:	e751      	b.n	800b074 <_dtoa_r+0x794>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	e779      	b.n	800b0c8 <_dtoa_r+0x7e8>
 800b1d4:	9b04      	ldr	r3, [sp, #16]
 800b1d6:	e777      	b.n	800b0c8 <_dtoa_r+0x7e8>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	9308      	str	r3, [sp, #32]
 800b1dc:	e779      	b.n	800b0d2 <_dtoa_r+0x7f2>
 800b1de:	d093      	beq.n	800b108 <_dtoa_r+0x828>
 800b1e0:	331c      	adds	r3, #28
 800b1e2:	9a00      	ldr	r2, [sp, #0]
 800b1e4:	441a      	add	r2, r3
 800b1e6:	441e      	add	r6, r3
 800b1e8:	9200      	str	r2, [sp, #0]
 800b1ea:	9a06      	ldr	r2, [sp, #24]
 800b1ec:	441a      	add	r2, r3
 800b1ee:	9206      	str	r2, [sp, #24]
 800b1f0:	e78a      	b.n	800b108 <_dtoa_r+0x828>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	e7f4      	b.n	800b1e0 <_dtoa_r+0x900>
 800b1f6:	9b03      	ldr	r3, [sp, #12]
 800b1f8:	46b8      	mov	r8, r7
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	dc20      	bgt.n	800b240 <_dtoa_r+0x960>
 800b1fe:	469b      	mov	fp, r3
 800b200:	9b07      	ldr	r3, [sp, #28]
 800b202:	2b02      	cmp	r3, #2
 800b204:	dd1e      	ble.n	800b244 <_dtoa_r+0x964>
 800b206:	f1bb 0f00 	cmp.w	fp, #0
 800b20a:	f47f adb1 	bne.w	800ad70 <_dtoa_r+0x490>
 800b20e:	4621      	mov	r1, r4
 800b210:	465b      	mov	r3, fp
 800b212:	2205      	movs	r2, #5
 800b214:	4648      	mov	r0, r9
 800b216:	f000 fae3 	bl	800b7e0 <__multadd>
 800b21a:	4601      	mov	r1, r0
 800b21c:	4604      	mov	r4, r0
 800b21e:	9802      	ldr	r0, [sp, #8]
 800b220:	f000 fd3c 	bl	800bc9c <__mcmp>
 800b224:	2800      	cmp	r0, #0
 800b226:	f77f ada3 	ble.w	800ad70 <_dtoa_r+0x490>
 800b22a:	4656      	mov	r6, sl
 800b22c:	2331      	movs	r3, #49	@ 0x31
 800b22e:	f108 0801 	add.w	r8, r8, #1
 800b232:	f806 3b01 	strb.w	r3, [r6], #1
 800b236:	e59f      	b.n	800ad78 <_dtoa_r+0x498>
 800b238:	46b8      	mov	r8, r7
 800b23a:	9c03      	ldr	r4, [sp, #12]
 800b23c:	4625      	mov	r5, r4
 800b23e:	e7f4      	b.n	800b22a <_dtoa_r+0x94a>
 800b240:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b246:	2b00      	cmp	r3, #0
 800b248:	f000 8102 	beq.w	800b450 <_dtoa_r+0xb70>
 800b24c:	2e00      	cmp	r6, #0
 800b24e:	dd05      	ble.n	800b25c <_dtoa_r+0x97c>
 800b250:	4629      	mov	r1, r5
 800b252:	4632      	mov	r2, r6
 800b254:	4648      	mov	r0, r9
 800b256:	f000 fcb5 	bl	800bbc4 <__lshift>
 800b25a:	4605      	mov	r5, r0
 800b25c:	9b08      	ldr	r3, [sp, #32]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d05c      	beq.n	800b31c <_dtoa_r+0xa3c>
 800b262:	6869      	ldr	r1, [r5, #4]
 800b264:	4648      	mov	r0, r9
 800b266:	f000 fa59 	bl	800b71c <_Balloc>
 800b26a:	4606      	mov	r6, r0
 800b26c:	b928      	cbnz	r0, 800b27a <_dtoa_r+0x99a>
 800b26e:	4b83      	ldr	r3, [pc, #524]	@ (800b47c <_dtoa_r+0xb9c>)
 800b270:	4602      	mov	r2, r0
 800b272:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b276:	f7ff bb4a 	b.w	800a90e <_dtoa_r+0x2e>
 800b27a:	692a      	ldr	r2, [r5, #16]
 800b27c:	f105 010c 	add.w	r1, r5, #12
 800b280:	300c      	adds	r0, #12
 800b282:	3202      	adds	r2, #2
 800b284:	0092      	lsls	r2, r2, #2
 800b286:	f002 fc85 	bl	800db94 <memcpy>
 800b28a:	2201      	movs	r2, #1
 800b28c:	4631      	mov	r1, r6
 800b28e:	4648      	mov	r0, r9
 800b290:	f000 fc98 	bl	800bbc4 <__lshift>
 800b294:	f10a 0301 	add.w	r3, sl, #1
 800b298:	462f      	mov	r7, r5
 800b29a:	4605      	mov	r5, r0
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	eb0a 030b 	add.w	r3, sl, fp
 800b2a2:	9308      	str	r3, [sp, #32]
 800b2a4:	9b04      	ldr	r3, [sp, #16]
 800b2a6:	f003 0301 	and.w	r3, r3, #1
 800b2aa:	9306      	str	r3, [sp, #24]
 800b2ac:	9b00      	ldr	r3, [sp, #0]
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	9802      	ldr	r0, [sp, #8]
 800b2b2:	f103 3bff 	add.w	fp, r3, #4294967295
 800b2b6:	f7ff fa83 	bl	800a7c0 <quorem>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	4639      	mov	r1, r7
 800b2be:	9003      	str	r0, [sp, #12]
 800b2c0:	3330      	adds	r3, #48	@ 0x30
 800b2c2:	9802      	ldr	r0, [sp, #8]
 800b2c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2c6:	f000 fce9 	bl	800bc9c <__mcmp>
 800b2ca:	462a      	mov	r2, r5
 800b2cc:	9004      	str	r0, [sp, #16]
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	4648      	mov	r0, r9
 800b2d2:	f000 fcff 	bl	800bcd4 <__mdiff>
 800b2d6:	68c2      	ldr	r2, [r0, #12]
 800b2d8:	4606      	mov	r6, r0
 800b2da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2dc:	bb02      	cbnz	r2, 800b320 <_dtoa_r+0xa40>
 800b2de:	4601      	mov	r1, r0
 800b2e0:	9802      	ldr	r0, [sp, #8]
 800b2e2:	f000 fcdb 	bl	800bc9c <__mcmp>
 800b2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	4631      	mov	r1, r6
 800b2ec:	4648      	mov	r0, r9
 800b2ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800b2f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2f2:	f000 fa53 	bl	800b79c <_Bfree>
 800b2f6:	9b07      	ldr	r3, [sp, #28]
 800b2f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b2fa:	9e00      	ldr	r6, [sp, #0]
 800b2fc:	ea42 0103 	orr.w	r1, r2, r3
 800b300:	9b06      	ldr	r3, [sp, #24]
 800b302:	4319      	orrs	r1, r3
 800b304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b306:	d10d      	bne.n	800b324 <_dtoa_r+0xa44>
 800b308:	2b39      	cmp	r3, #57	@ 0x39
 800b30a:	d027      	beq.n	800b35c <_dtoa_r+0xa7c>
 800b30c:	9a04      	ldr	r2, [sp, #16]
 800b30e:	2a00      	cmp	r2, #0
 800b310:	dd01      	ble.n	800b316 <_dtoa_r+0xa36>
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	3331      	adds	r3, #49	@ 0x31
 800b316:	f88b 3000 	strb.w	r3, [fp]
 800b31a:	e52e      	b.n	800ad7a <_dtoa_r+0x49a>
 800b31c:	4628      	mov	r0, r5
 800b31e:	e7b9      	b.n	800b294 <_dtoa_r+0x9b4>
 800b320:	2201      	movs	r2, #1
 800b322:	e7e2      	b.n	800b2ea <_dtoa_r+0xa0a>
 800b324:	9904      	ldr	r1, [sp, #16]
 800b326:	2900      	cmp	r1, #0
 800b328:	db04      	blt.n	800b334 <_dtoa_r+0xa54>
 800b32a:	9807      	ldr	r0, [sp, #28]
 800b32c:	4301      	orrs	r1, r0
 800b32e:	9806      	ldr	r0, [sp, #24]
 800b330:	4301      	orrs	r1, r0
 800b332:	d120      	bne.n	800b376 <_dtoa_r+0xa96>
 800b334:	2a00      	cmp	r2, #0
 800b336:	ddee      	ble.n	800b316 <_dtoa_r+0xa36>
 800b338:	2201      	movs	r2, #1
 800b33a:	9902      	ldr	r1, [sp, #8]
 800b33c:	4648      	mov	r0, r9
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	f000 fc40 	bl	800bbc4 <__lshift>
 800b344:	4621      	mov	r1, r4
 800b346:	9002      	str	r0, [sp, #8]
 800b348:	f000 fca8 	bl	800bc9c <__mcmp>
 800b34c:	2800      	cmp	r0, #0
 800b34e:	9b00      	ldr	r3, [sp, #0]
 800b350:	dc02      	bgt.n	800b358 <_dtoa_r+0xa78>
 800b352:	d1e0      	bne.n	800b316 <_dtoa_r+0xa36>
 800b354:	07da      	lsls	r2, r3, #31
 800b356:	d5de      	bpl.n	800b316 <_dtoa_r+0xa36>
 800b358:	2b39      	cmp	r3, #57	@ 0x39
 800b35a:	d1da      	bne.n	800b312 <_dtoa_r+0xa32>
 800b35c:	2339      	movs	r3, #57	@ 0x39
 800b35e:	f88b 3000 	strb.w	r3, [fp]
 800b362:	4633      	mov	r3, r6
 800b364:	461e      	mov	r6, r3
 800b366:	3b01      	subs	r3, #1
 800b368:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b36c:	2a39      	cmp	r2, #57	@ 0x39
 800b36e:	d04f      	beq.n	800b410 <_dtoa_r+0xb30>
 800b370:	3201      	adds	r2, #1
 800b372:	701a      	strb	r2, [r3, #0]
 800b374:	e501      	b.n	800ad7a <_dtoa_r+0x49a>
 800b376:	2a00      	cmp	r2, #0
 800b378:	dd03      	ble.n	800b382 <_dtoa_r+0xaa2>
 800b37a:	2b39      	cmp	r3, #57	@ 0x39
 800b37c:	d0ee      	beq.n	800b35c <_dtoa_r+0xa7c>
 800b37e:	3301      	adds	r3, #1
 800b380:	e7c9      	b.n	800b316 <_dtoa_r+0xa36>
 800b382:	9a00      	ldr	r2, [sp, #0]
 800b384:	9908      	ldr	r1, [sp, #32]
 800b386:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b38a:	428a      	cmp	r2, r1
 800b38c:	d029      	beq.n	800b3e2 <_dtoa_r+0xb02>
 800b38e:	2300      	movs	r3, #0
 800b390:	220a      	movs	r2, #10
 800b392:	9902      	ldr	r1, [sp, #8]
 800b394:	4648      	mov	r0, r9
 800b396:	f000 fa23 	bl	800b7e0 <__multadd>
 800b39a:	42af      	cmp	r7, r5
 800b39c:	9002      	str	r0, [sp, #8]
 800b39e:	f04f 0300 	mov.w	r3, #0
 800b3a2:	f04f 020a 	mov.w	r2, #10
 800b3a6:	4639      	mov	r1, r7
 800b3a8:	4648      	mov	r0, r9
 800b3aa:	d107      	bne.n	800b3bc <_dtoa_r+0xadc>
 800b3ac:	f000 fa18 	bl	800b7e0 <__multadd>
 800b3b0:	4607      	mov	r7, r0
 800b3b2:	4605      	mov	r5, r0
 800b3b4:	9b00      	ldr	r3, [sp, #0]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	e777      	b.n	800b2ac <_dtoa_r+0x9cc>
 800b3bc:	f000 fa10 	bl	800b7e0 <__multadd>
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	4607      	mov	r7, r0
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	220a      	movs	r2, #10
 800b3c8:	4648      	mov	r0, r9
 800b3ca:	f000 fa09 	bl	800b7e0 <__multadd>
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	e7f0      	b.n	800b3b4 <_dtoa_r+0xad4>
 800b3d2:	f1bb 0f00 	cmp.w	fp, #0
 800b3d6:	f04f 0700 	mov.w	r7, #0
 800b3da:	bfcc      	ite	gt
 800b3dc:	465e      	movgt	r6, fp
 800b3de:	2601      	movle	r6, #1
 800b3e0:	4456      	add	r6, sl
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	9902      	ldr	r1, [sp, #8]
 800b3e6:	4648      	mov	r0, r9
 800b3e8:	9300      	str	r3, [sp, #0]
 800b3ea:	f000 fbeb 	bl	800bbc4 <__lshift>
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	9002      	str	r0, [sp, #8]
 800b3f2:	f000 fc53 	bl	800bc9c <__mcmp>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	dcb3      	bgt.n	800b362 <_dtoa_r+0xa82>
 800b3fa:	d102      	bne.n	800b402 <_dtoa_r+0xb22>
 800b3fc:	9b00      	ldr	r3, [sp, #0]
 800b3fe:	07db      	lsls	r3, r3, #31
 800b400:	d4af      	bmi.n	800b362 <_dtoa_r+0xa82>
 800b402:	4633      	mov	r3, r6
 800b404:	461e      	mov	r6, r3
 800b406:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b40a:	2a30      	cmp	r2, #48	@ 0x30
 800b40c:	d0fa      	beq.n	800b404 <_dtoa_r+0xb24>
 800b40e:	e4b4      	b.n	800ad7a <_dtoa_r+0x49a>
 800b410:	459a      	cmp	sl, r3
 800b412:	d1a7      	bne.n	800b364 <_dtoa_r+0xa84>
 800b414:	2331      	movs	r3, #49	@ 0x31
 800b416:	f108 0801 	add.w	r8, r8, #1
 800b41a:	f88a 3000 	strb.w	r3, [sl]
 800b41e:	e4ac      	b.n	800ad7a <_dtoa_r+0x49a>
 800b420:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b422:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b480 <_dtoa_r+0xba0>
 800b426:	b11b      	cbz	r3, 800b430 <_dtoa_r+0xb50>
 800b428:	f10a 0308 	add.w	r3, sl, #8
 800b42c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b42e:	6013      	str	r3, [r2, #0]
 800b430:	4650      	mov	r0, sl
 800b432:	b017      	add	sp, #92	@ 0x5c
 800b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	9b07      	ldr	r3, [sp, #28]
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	f77f ae2d 	ble.w	800b09a <_dtoa_r+0x7ba>
 800b440:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b442:	9308      	str	r3, [sp, #32]
 800b444:	2001      	movs	r0, #1
 800b446:	e64c      	b.n	800b0e2 <_dtoa_r+0x802>
 800b448:	f1bb 0f00 	cmp.w	fp, #0
 800b44c:	f77f aed8 	ble.w	800b200 <_dtoa_r+0x920>
 800b450:	4656      	mov	r6, sl
 800b452:	4621      	mov	r1, r4
 800b454:	9802      	ldr	r0, [sp, #8]
 800b456:	f7ff f9b3 	bl	800a7c0 <quorem>
 800b45a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b45e:	f806 3b01 	strb.w	r3, [r6], #1
 800b462:	eba6 020a 	sub.w	r2, r6, sl
 800b466:	4593      	cmp	fp, r2
 800b468:	ddb3      	ble.n	800b3d2 <_dtoa_r+0xaf2>
 800b46a:	2300      	movs	r3, #0
 800b46c:	220a      	movs	r2, #10
 800b46e:	9902      	ldr	r1, [sp, #8]
 800b470:	4648      	mov	r0, r9
 800b472:	f000 f9b5 	bl	800b7e0 <__multadd>
 800b476:	9002      	str	r0, [sp, #8]
 800b478:	e7eb      	b.n	800b452 <_dtoa_r+0xb72>
 800b47a:	bf00      	nop
 800b47c:	0800eb26 	.word	0x0800eb26
 800b480:	0800eac1 	.word	0x0800eac1

0800b484 <_free_r>:
 800b484:	b538      	push	{r3, r4, r5, lr}
 800b486:	4605      	mov	r5, r0
 800b488:	2900      	cmp	r1, #0
 800b48a:	d041      	beq.n	800b510 <_free_r+0x8c>
 800b48c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b490:	1f0c      	subs	r4, r1, #4
 800b492:	2b00      	cmp	r3, #0
 800b494:	bfb8      	it	lt
 800b496:	18e4      	addlt	r4, r4, r3
 800b498:	f000 f934 	bl	800b704 <__malloc_lock>
 800b49c:	4a1d      	ldr	r2, [pc, #116]	@ (800b514 <_free_r+0x90>)
 800b49e:	6813      	ldr	r3, [r2, #0]
 800b4a0:	b933      	cbnz	r3, 800b4b0 <_free_r+0x2c>
 800b4a2:	6063      	str	r3, [r4, #4]
 800b4a4:	6014      	str	r4, [r2, #0]
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4ac:	f000 b930 	b.w	800b710 <__malloc_unlock>
 800b4b0:	42a3      	cmp	r3, r4
 800b4b2:	d908      	bls.n	800b4c6 <_free_r+0x42>
 800b4b4:	6820      	ldr	r0, [r4, #0]
 800b4b6:	1821      	adds	r1, r4, r0
 800b4b8:	428b      	cmp	r3, r1
 800b4ba:	bf01      	itttt	eq
 800b4bc:	6819      	ldreq	r1, [r3, #0]
 800b4be:	685b      	ldreq	r3, [r3, #4]
 800b4c0:	1809      	addeq	r1, r1, r0
 800b4c2:	6021      	streq	r1, [r4, #0]
 800b4c4:	e7ed      	b.n	800b4a2 <_free_r+0x1e>
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	b10b      	cbz	r3, 800b4d0 <_free_r+0x4c>
 800b4cc:	42a3      	cmp	r3, r4
 800b4ce:	d9fa      	bls.n	800b4c6 <_free_r+0x42>
 800b4d0:	6811      	ldr	r1, [r2, #0]
 800b4d2:	1850      	adds	r0, r2, r1
 800b4d4:	42a0      	cmp	r0, r4
 800b4d6:	d10b      	bne.n	800b4f0 <_free_r+0x6c>
 800b4d8:	6820      	ldr	r0, [r4, #0]
 800b4da:	4401      	add	r1, r0
 800b4dc:	1850      	adds	r0, r2, r1
 800b4de:	6011      	str	r1, [r2, #0]
 800b4e0:	4283      	cmp	r3, r0
 800b4e2:	d1e0      	bne.n	800b4a6 <_free_r+0x22>
 800b4e4:	6818      	ldr	r0, [r3, #0]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	4408      	add	r0, r1
 800b4ea:	6053      	str	r3, [r2, #4]
 800b4ec:	6010      	str	r0, [r2, #0]
 800b4ee:	e7da      	b.n	800b4a6 <_free_r+0x22>
 800b4f0:	d902      	bls.n	800b4f8 <_free_r+0x74>
 800b4f2:	230c      	movs	r3, #12
 800b4f4:	602b      	str	r3, [r5, #0]
 800b4f6:	e7d6      	b.n	800b4a6 <_free_r+0x22>
 800b4f8:	6820      	ldr	r0, [r4, #0]
 800b4fa:	1821      	adds	r1, r4, r0
 800b4fc:	428b      	cmp	r3, r1
 800b4fe:	bf02      	ittt	eq
 800b500:	6819      	ldreq	r1, [r3, #0]
 800b502:	685b      	ldreq	r3, [r3, #4]
 800b504:	1809      	addeq	r1, r1, r0
 800b506:	6063      	str	r3, [r4, #4]
 800b508:	bf08      	it	eq
 800b50a:	6021      	streq	r1, [r4, #0]
 800b50c:	6054      	str	r4, [r2, #4]
 800b50e:	e7ca      	b.n	800b4a6 <_free_r+0x22>
 800b510:	bd38      	pop	{r3, r4, r5, pc}
 800b512:	bf00      	nop
 800b514:	200005b8 	.word	0x200005b8

0800b518 <_findenv_r>:
 800b518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800b58c <_findenv_r+0x74>
 800b520:	4606      	mov	r6, r0
 800b522:	4689      	mov	r9, r1
 800b524:	4617      	mov	r7, r2
 800b526:	f002 fb67 	bl	800dbf8 <__env_lock>
 800b52a:	f8da 4000 	ldr.w	r4, [sl]
 800b52e:	b134      	cbz	r4, 800b53e <_findenv_r+0x26>
 800b530:	464b      	mov	r3, r9
 800b532:	4698      	mov	r8, r3
 800b534:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b538:	b13a      	cbz	r2, 800b54a <_findenv_r+0x32>
 800b53a:	2a3d      	cmp	r2, #61	@ 0x3d
 800b53c:	d1f9      	bne.n	800b532 <_findenv_r+0x1a>
 800b53e:	4630      	mov	r0, r6
 800b540:	f002 fb60 	bl	800dc04 <__env_unlock>
 800b544:	2000      	movs	r0, #0
 800b546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54a:	eba8 0809 	sub.w	r8, r8, r9
 800b54e:	46a3      	mov	fp, r4
 800b550:	f854 0b04 	ldr.w	r0, [r4], #4
 800b554:	2800      	cmp	r0, #0
 800b556:	d0f2      	beq.n	800b53e <_findenv_r+0x26>
 800b558:	4642      	mov	r2, r8
 800b55a:	4649      	mov	r1, r9
 800b55c:	f002 fa50 	bl	800da00 <strncmp>
 800b560:	2800      	cmp	r0, #0
 800b562:	d1f4      	bne.n	800b54e <_findenv_r+0x36>
 800b564:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b568:	eb03 0508 	add.w	r5, r3, r8
 800b56c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800b570:	2b3d      	cmp	r3, #61	@ 0x3d
 800b572:	d1ec      	bne.n	800b54e <_findenv_r+0x36>
 800b574:	f8da 3000 	ldr.w	r3, [sl]
 800b578:	4630      	mov	r0, r6
 800b57a:	ebab 0303 	sub.w	r3, fp, r3
 800b57e:	109b      	asrs	r3, r3, #2
 800b580:	603b      	str	r3, [r7, #0]
 800b582:	f002 fb3f 	bl	800dc04 <__env_unlock>
 800b586:	1c68      	adds	r0, r5, #1
 800b588:	e7dd      	b.n	800b546 <_findenv_r+0x2e>
 800b58a:	bf00      	nop
 800b58c:	20000000 	.word	0x20000000

0800b590 <_getenv_r>:
 800b590:	b507      	push	{r0, r1, r2, lr}
 800b592:	aa01      	add	r2, sp, #4
 800b594:	f7ff ffc0 	bl	800b518 <_findenv_r>
 800b598:	b003      	add	sp, #12
 800b59a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b5a0 <malloc>:
 800b5a0:	4b02      	ldr	r3, [pc, #8]	@ (800b5ac <malloc+0xc>)
 800b5a2:	4601      	mov	r1, r0
 800b5a4:	6818      	ldr	r0, [r3, #0]
 800b5a6:	f000 b82d 	b.w	800b604 <_malloc_r>
 800b5aa:	bf00      	nop
 800b5ac:	20000040 	.word	0x20000040

0800b5b0 <free>:
 800b5b0:	4b02      	ldr	r3, [pc, #8]	@ (800b5bc <free+0xc>)
 800b5b2:	4601      	mov	r1, r0
 800b5b4:	6818      	ldr	r0, [r3, #0]
 800b5b6:	f7ff bf65 	b.w	800b484 <_free_r>
 800b5ba:	bf00      	nop
 800b5bc:	20000040 	.word	0x20000040

0800b5c0 <sbrk_aligned>:
 800b5c0:	b570      	push	{r4, r5, r6, lr}
 800b5c2:	4e0f      	ldr	r6, [pc, #60]	@ (800b600 <sbrk_aligned+0x40>)
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	6831      	ldr	r1, [r6, #0]
 800b5ca:	b911      	cbnz	r1, 800b5d2 <sbrk_aligned+0x12>
 800b5cc:	f002 fad2 	bl	800db74 <_sbrk_r>
 800b5d0:	6030      	str	r0, [r6, #0]
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	f002 facd 	bl	800db74 <_sbrk_r>
 800b5da:	1c43      	adds	r3, r0, #1
 800b5dc:	d103      	bne.n	800b5e6 <sbrk_aligned+0x26>
 800b5de:	f04f 34ff 	mov.w	r4, #4294967295
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	bd70      	pop	{r4, r5, r6, pc}
 800b5e6:	1cc4      	adds	r4, r0, #3
 800b5e8:	f024 0403 	bic.w	r4, r4, #3
 800b5ec:	42a0      	cmp	r0, r4
 800b5ee:	d0f8      	beq.n	800b5e2 <sbrk_aligned+0x22>
 800b5f0:	1a21      	subs	r1, r4, r0
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	f002 fabe 	bl	800db74 <_sbrk_r>
 800b5f8:	3001      	adds	r0, #1
 800b5fa:	d1f2      	bne.n	800b5e2 <sbrk_aligned+0x22>
 800b5fc:	e7ef      	b.n	800b5de <sbrk_aligned+0x1e>
 800b5fe:	bf00      	nop
 800b600:	200005b4 	.word	0x200005b4

0800b604 <_malloc_r>:
 800b604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b608:	1ccd      	adds	r5, r1, #3
 800b60a:	4606      	mov	r6, r0
 800b60c:	f025 0503 	bic.w	r5, r5, #3
 800b610:	3508      	adds	r5, #8
 800b612:	2d0c      	cmp	r5, #12
 800b614:	bf38      	it	cc
 800b616:	250c      	movcc	r5, #12
 800b618:	2d00      	cmp	r5, #0
 800b61a:	db01      	blt.n	800b620 <_malloc_r+0x1c>
 800b61c:	42a9      	cmp	r1, r5
 800b61e:	d904      	bls.n	800b62a <_malloc_r+0x26>
 800b620:	230c      	movs	r3, #12
 800b622:	6033      	str	r3, [r6, #0]
 800b624:	2000      	movs	r0, #0
 800b626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b62a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b700 <_malloc_r+0xfc>
 800b62e:	f000 f869 	bl	800b704 <__malloc_lock>
 800b632:	f8d8 3000 	ldr.w	r3, [r8]
 800b636:	461c      	mov	r4, r3
 800b638:	bb44      	cbnz	r4, 800b68c <_malloc_r+0x88>
 800b63a:	4629      	mov	r1, r5
 800b63c:	4630      	mov	r0, r6
 800b63e:	f7ff ffbf 	bl	800b5c0 <sbrk_aligned>
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	4604      	mov	r4, r0
 800b646:	d158      	bne.n	800b6fa <_malloc_r+0xf6>
 800b648:	f8d8 4000 	ldr.w	r4, [r8]
 800b64c:	4627      	mov	r7, r4
 800b64e:	2f00      	cmp	r7, #0
 800b650:	d143      	bne.n	800b6da <_malloc_r+0xd6>
 800b652:	2c00      	cmp	r4, #0
 800b654:	d04b      	beq.n	800b6ee <_malloc_r+0xea>
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	4639      	mov	r1, r7
 800b65a:	4630      	mov	r0, r6
 800b65c:	eb04 0903 	add.w	r9, r4, r3
 800b660:	f002 fa88 	bl	800db74 <_sbrk_r>
 800b664:	4581      	cmp	r9, r0
 800b666:	d142      	bne.n	800b6ee <_malloc_r+0xea>
 800b668:	6821      	ldr	r1, [r4, #0]
 800b66a:	4630      	mov	r0, r6
 800b66c:	1a6d      	subs	r5, r5, r1
 800b66e:	4629      	mov	r1, r5
 800b670:	f7ff ffa6 	bl	800b5c0 <sbrk_aligned>
 800b674:	3001      	adds	r0, #1
 800b676:	d03a      	beq.n	800b6ee <_malloc_r+0xea>
 800b678:	6823      	ldr	r3, [r4, #0]
 800b67a:	442b      	add	r3, r5
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	f8d8 3000 	ldr.w	r3, [r8]
 800b682:	685a      	ldr	r2, [r3, #4]
 800b684:	bb62      	cbnz	r2, 800b6e0 <_malloc_r+0xdc>
 800b686:	f8c8 7000 	str.w	r7, [r8]
 800b68a:	e00f      	b.n	800b6ac <_malloc_r+0xa8>
 800b68c:	6822      	ldr	r2, [r4, #0]
 800b68e:	1b52      	subs	r2, r2, r5
 800b690:	d420      	bmi.n	800b6d4 <_malloc_r+0xd0>
 800b692:	2a0b      	cmp	r2, #11
 800b694:	d917      	bls.n	800b6c6 <_malloc_r+0xc2>
 800b696:	1961      	adds	r1, r4, r5
 800b698:	42a3      	cmp	r3, r4
 800b69a:	6025      	str	r5, [r4, #0]
 800b69c:	bf18      	it	ne
 800b69e:	6059      	strne	r1, [r3, #4]
 800b6a0:	6863      	ldr	r3, [r4, #4]
 800b6a2:	bf08      	it	eq
 800b6a4:	f8c8 1000 	streq.w	r1, [r8]
 800b6a8:	5162      	str	r2, [r4, r5]
 800b6aa:	604b      	str	r3, [r1, #4]
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f000 f82f 	bl	800b710 <__malloc_unlock>
 800b6b2:	f104 000b 	add.w	r0, r4, #11
 800b6b6:	1d23      	adds	r3, r4, #4
 800b6b8:	f020 0007 	bic.w	r0, r0, #7
 800b6bc:	1ac2      	subs	r2, r0, r3
 800b6be:	bf1c      	itt	ne
 800b6c0:	1a1b      	subne	r3, r3, r0
 800b6c2:	50a3      	strne	r3, [r4, r2]
 800b6c4:	e7af      	b.n	800b626 <_malloc_r+0x22>
 800b6c6:	6862      	ldr	r2, [r4, #4]
 800b6c8:	42a3      	cmp	r3, r4
 800b6ca:	bf0c      	ite	eq
 800b6cc:	f8c8 2000 	streq.w	r2, [r8]
 800b6d0:	605a      	strne	r2, [r3, #4]
 800b6d2:	e7eb      	b.n	800b6ac <_malloc_r+0xa8>
 800b6d4:	4623      	mov	r3, r4
 800b6d6:	6864      	ldr	r4, [r4, #4]
 800b6d8:	e7ae      	b.n	800b638 <_malloc_r+0x34>
 800b6da:	463c      	mov	r4, r7
 800b6dc:	687f      	ldr	r7, [r7, #4]
 800b6de:	e7b6      	b.n	800b64e <_malloc_r+0x4a>
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	42a3      	cmp	r3, r4
 800b6e6:	d1fb      	bne.n	800b6e0 <_malloc_r+0xdc>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	6053      	str	r3, [r2, #4]
 800b6ec:	e7de      	b.n	800b6ac <_malloc_r+0xa8>
 800b6ee:	230c      	movs	r3, #12
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	6033      	str	r3, [r6, #0]
 800b6f4:	f000 f80c 	bl	800b710 <__malloc_unlock>
 800b6f8:	e794      	b.n	800b624 <_malloc_r+0x20>
 800b6fa:	6005      	str	r5, [r0, #0]
 800b6fc:	e7d6      	b.n	800b6ac <_malloc_r+0xa8>
 800b6fe:	bf00      	nop
 800b700:	200005b8 	.word	0x200005b8

0800b704 <__malloc_lock>:
 800b704:	4801      	ldr	r0, [pc, #4]	@ (800b70c <__malloc_lock+0x8>)
 800b706:	f7ff b815 	b.w	800a734 <__retarget_lock_acquire_recursive>
 800b70a:	bf00      	nop
 800b70c:	200005b2 	.word	0x200005b2

0800b710 <__malloc_unlock>:
 800b710:	4801      	ldr	r0, [pc, #4]	@ (800b718 <__malloc_unlock+0x8>)
 800b712:	f7ff b811 	b.w	800a738 <__retarget_lock_release_recursive>
 800b716:	bf00      	nop
 800b718:	200005b2 	.word	0x200005b2

0800b71c <_Balloc>:
 800b71c:	b570      	push	{r4, r5, r6, lr}
 800b71e:	69c6      	ldr	r6, [r0, #28]
 800b720:	4604      	mov	r4, r0
 800b722:	460d      	mov	r5, r1
 800b724:	b976      	cbnz	r6, 800b744 <_Balloc+0x28>
 800b726:	2010      	movs	r0, #16
 800b728:	f7ff ff3a 	bl	800b5a0 <malloc>
 800b72c:	4602      	mov	r2, r0
 800b72e:	61e0      	str	r0, [r4, #28]
 800b730:	b920      	cbnz	r0, 800b73c <_Balloc+0x20>
 800b732:	4b18      	ldr	r3, [pc, #96]	@ (800b794 <_Balloc+0x78>)
 800b734:	216b      	movs	r1, #107	@ 0x6b
 800b736:	4818      	ldr	r0, [pc, #96]	@ (800b798 <_Balloc+0x7c>)
 800b738:	f7ff f81c 	bl	800a774 <__assert_func>
 800b73c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b740:	6006      	str	r6, [r0, #0]
 800b742:	60c6      	str	r6, [r0, #12]
 800b744:	69e6      	ldr	r6, [r4, #28]
 800b746:	68f3      	ldr	r3, [r6, #12]
 800b748:	b183      	cbz	r3, 800b76c <_Balloc+0x50>
 800b74a:	69e3      	ldr	r3, [r4, #28]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b752:	b9b8      	cbnz	r0, 800b784 <_Balloc+0x68>
 800b754:	2101      	movs	r1, #1
 800b756:	4620      	mov	r0, r4
 800b758:	fa01 f605 	lsl.w	r6, r1, r5
 800b75c:	1d72      	adds	r2, r6, #5
 800b75e:	0092      	lsls	r2, r2, #2
 800b760:	f002 fa35 	bl	800dbce <_calloc_r>
 800b764:	b160      	cbz	r0, 800b780 <_Balloc+0x64>
 800b766:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b76a:	e00e      	b.n	800b78a <_Balloc+0x6e>
 800b76c:	2221      	movs	r2, #33	@ 0x21
 800b76e:	2104      	movs	r1, #4
 800b770:	4620      	mov	r0, r4
 800b772:	f002 fa2c 	bl	800dbce <_calloc_r>
 800b776:	69e3      	ldr	r3, [r4, #28]
 800b778:	60f0      	str	r0, [r6, #12]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1e4      	bne.n	800b74a <_Balloc+0x2e>
 800b780:	2000      	movs	r0, #0
 800b782:	bd70      	pop	{r4, r5, r6, pc}
 800b784:	6802      	ldr	r2, [r0, #0]
 800b786:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b78a:	2300      	movs	r3, #0
 800b78c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b790:	e7f7      	b.n	800b782 <_Balloc+0x66>
 800b792:	bf00      	nop
 800b794:	0800e9c7 	.word	0x0800e9c7
 800b798:	0800eb37 	.word	0x0800eb37

0800b79c <_Bfree>:
 800b79c:	b570      	push	{r4, r5, r6, lr}
 800b79e:	69c6      	ldr	r6, [r0, #28]
 800b7a0:	4605      	mov	r5, r0
 800b7a2:	460c      	mov	r4, r1
 800b7a4:	b976      	cbnz	r6, 800b7c4 <_Bfree+0x28>
 800b7a6:	2010      	movs	r0, #16
 800b7a8:	f7ff fefa 	bl	800b5a0 <malloc>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	61e8      	str	r0, [r5, #28]
 800b7b0:	b920      	cbnz	r0, 800b7bc <_Bfree+0x20>
 800b7b2:	4b09      	ldr	r3, [pc, #36]	@ (800b7d8 <_Bfree+0x3c>)
 800b7b4:	218f      	movs	r1, #143	@ 0x8f
 800b7b6:	4809      	ldr	r0, [pc, #36]	@ (800b7dc <_Bfree+0x40>)
 800b7b8:	f7fe ffdc 	bl	800a774 <__assert_func>
 800b7bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7c0:	6006      	str	r6, [r0, #0]
 800b7c2:	60c6      	str	r6, [r0, #12]
 800b7c4:	b13c      	cbz	r4, 800b7d6 <_Bfree+0x3a>
 800b7c6:	69eb      	ldr	r3, [r5, #28]
 800b7c8:	6862      	ldr	r2, [r4, #4]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7d0:	6021      	str	r1, [r4, #0]
 800b7d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7d6:	bd70      	pop	{r4, r5, r6, pc}
 800b7d8:	0800e9c7 	.word	0x0800e9c7
 800b7dc:	0800eb37 	.word	0x0800eb37

0800b7e0 <__multadd>:
 800b7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e4:	f101 0c14 	add.w	ip, r1, #20
 800b7e8:	4607      	mov	r7, r0
 800b7ea:	460c      	mov	r4, r1
 800b7ec:	461e      	mov	r6, r3
 800b7ee:	690d      	ldr	r5, [r1, #16]
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	f8dc 3000 	ldr.w	r3, [ip]
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	b299      	uxth	r1, r3
 800b7fa:	4285      	cmp	r5, r0
 800b7fc:	fb02 6101 	mla	r1, r2, r1, r6
 800b800:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b804:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800b808:	b289      	uxth	r1, r1
 800b80a:	fb02 3306 	mla	r3, r2, r6, r3
 800b80e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b812:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b816:	f84c 1b04 	str.w	r1, [ip], #4
 800b81a:	dcea      	bgt.n	800b7f2 <__multadd+0x12>
 800b81c:	b30e      	cbz	r6, 800b862 <__multadd+0x82>
 800b81e:	68a3      	ldr	r3, [r4, #8]
 800b820:	42ab      	cmp	r3, r5
 800b822:	dc19      	bgt.n	800b858 <__multadd+0x78>
 800b824:	6861      	ldr	r1, [r4, #4]
 800b826:	4638      	mov	r0, r7
 800b828:	3101      	adds	r1, #1
 800b82a:	f7ff ff77 	bl	800b71c <_Balloc>
 800b82e:	4680      	mov	r8, r0
 800b830:	b928      	cbnz	r0, 800b83e <__multadd+0x5e>
 800b832:	4602      	mov	r2, r0
 800b834:	4b0c      	ldr	r3, [pc, #48]	@ (800b868 <__multadd+0x88>)
 800b836:	21ba      	movs	r1, #186	@ 0xba
 800b838:	480c      	ldr	r0, [pc, #48]	@ (800b86c <__multadd+0x8c>)
 800b83a:	f7fe ff9b 	bl	800a774 <__assert_func>
 800b83e:	6922      	ldr	r2, [r4, #16]
 800b840:	f104 010c 	add.w	r1, r4, #12
 800b844:	300c      	adds	r0, #12
 800b846:	3202      	adds	r2, #2
 800b848:	0092      	lsls	r2, r2, #2
 800b84a:	f002 f9a3 	bl	800db94 <memcpy>
 800b84e:	4621      	mov	r1, r4
 800b850:	4644      	mov	r4, r8
 800b852:	4638      	mov	r0, r7
 800b854:	f7ff ffa2 	bl	800b79c <_Bfree>
 800b858:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b85c:	3501      	adds	r5, #1
 800b85e:	615e      	str	r6, [r3, #20]
 800b860:	6125      	str	r5, [r4, #16]
 800b862:	4620      	mov	r0, r4
 800b864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b868:	0800eb26 	.word	0x0800eb26
 800b86c:	0800eb37 	.word	0x0800eb37

0800b870 <__s2b>:
 800b870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b874:	4615      	mov	r5, r2
 800b876:	461f      	mov	r7, r3
 800b878:	2209      	movs	r2, #9
 800b87a:	3308      	adds	r3, #8
 800b87c:	460c      	mov	r4, r1
 800b87e:	4606      	mov	r6, r0
 800b880:	2100      	movs	r1, #0
 800b882:	fb93 f3f2 	sdiv	r3, r3, r2
 800b886:	2201      	movs	r2, #1
 800b888:	429a      	cmp	r2, r3
 800b88a:	db09      	blt.n	800b8a0 <__s2b+0x30>
 800b88c:	4630      	mov	r0, r6
 800b88e:	f7ff ff45 	bl	800b71c <_Balloc>
 800b892:	b940      	cbnz	r0, 800b8a6 <__s2b+0x36>
 800b894:	4602      	mov	r2, r0
 800b896:	4b19      	ldr	r3, [pc, #100]	@ (800b8fc <__s2b+0x8c>)
 800b898:	21d3      	movs	r1, #211	@ 0xd3
 800b89a:	4819      	ldr	r0, [pc, #100]	@ (800b900 <__s2b+0x90>)
 800b89c:	f7fe ff6a 	bl	800a774 <__assert_func>
 800b8a0:	0052      	lsls	r2, r2, #1
 800b8a2:	3101      	adds	r1, #1
 800b8a4:	e7f0      	b.n	800b888 <__s2b+0x18>
 800b8a6:	9b08      	ldr	r3, [sp, #32]
 800b8a8:	2d09      	cmp	r5, #9
 800b8aa:	6143      	str	r3, [r0, #20]
 800b8ac:	f04f 0301 	mov.w	r3, #1
 800b8b0:	6103      	str	r3, [r0, #16]
 800b8b2:	dd16      	ble.n	800b8e2 <__s2b+0x72>
 800b8b4:	f104 0909 	add.w	r9, r4, #9
 800b8b8:	442c      	add	r4, r5
 800b8ba:	46c8      	mov	r8, r9
 800b8bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b8c0:	4601      	mov	r1, r0
 800b8c2:	220a      	movs	r2, #10
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	3b30      	subs	r3, #48	@ 0x30
 800b8c8:	f7ff ff8a 	bl	800b7e0 <__multadd>
 800b8cc:	45a0      	cmp	r8, r4
 800b8ce:	d1f5      	bne.n	800b8bc <__s2b+0x4c>
 800b8d0:	f1a5 0408 	sub.w	r4, r5, #8
 800b8d4:	444c      	add	r4, r9
 800b8d6:	1b2d      	subs	r5, r5, r4
 800b8d8:	1963      	adds	r3, r4, r5
 800b8da:	42bb      	cmp	r3, r7
 800b8dc:	db04      	blt.n	800b8e8 <__s2b+0x78>
 800b8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8e2:	340a      	adds	r4, #10
 800b8e4:	2509      	movs	r5, #9
 800b8e6:	e7f6      	b.n	800b8d6 <__s2b+0x66>
 800b8e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8ec:	4601      	mov	r1, r0
 800b8ee:	220a      	movs	r2, #10
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	3b30      	subs	r3, #48	@ 0x30
 800b8f4:	f7ff ff74 	bl	800b7e0 <__multadd>
 800b8f8:	e7ee      	b.n	800b8d8 <__s2b+0x68>
 800b8fa:	bf00      	nop
 800b8fc:	0800eb26 	.word	0x0800eb26
 800b900:	0800eb37 	.word	0x0800eb37

0800b904 <__hi0bits>:
 800b904:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b908:	4603      	mov	r3, r0
 800b90a:	bf36      	itet	cc
 800b90c:	0403      	lslcc	r3, r0, #16
 800b90e:	2000      	movcs	r0, #0
 800b910:	2010      	movcc	r0, #16
 800b912:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b916:	bf3c      	itt	cc
 800b918:	021b      	lslcc	r3, r3, #8
 800b91a:	3008      	addcc	r0, #8
 800b91c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b920:	bf3c      	itt	cc
 800b922:	011b      	lslcc	r3, r3, #4
 800b924:	3004      	addcc	r0, #4
 800b926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b92a:	bf3c      	itt	cc
 800b92c:	009b      	lslcc	r3, r3, #2
 800b92e:	3002      	addcc	r0, #2
 800b930:	2b00      	cmp	r3, #0
 800b932:	db05      	blt.n	800b940 <__hi0bits+0x3c>
 800b934:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b938:	f100 0001 	add.w	r0, r0, #1
 800b93c:	bf08      	it	eq
 800b93e:	2020      	moveq	r0, #32
 800b940:	4770      	bx	lr

0800b942 <__lo0bits>:
 800b942:	6803      	ldr	r3, [r0, #0]
 800b944:	4602      	mov	r2, r0
 800b946:	f013 0007 	ands.w	r0, r3, #7
 800b94a:	d00b      	beq.n	800b964 <__lo0bits+0x22>
 800b94c:	07d9      	lsls	r1, r3, #31
 800b94e:	d421      	bmi.n	800b994 <__lo0bits+0x52>
 800b950:	0798      	lsls	r0, r3, #30
 800b952:	bf47      	ittee	mi
 800b954:	085b      	lsrmi	r3, r3, #1
 800b956:	2001      	movmi	r0, #1
 800b958:	089b      	lsrpl	r3, r3, #2
 800b95a:	2002      	movpl	r0, #2
 800b95c:	bf4c      	ite	mi
 800b95e:	6013      	strmi	r3, [r2, #0]
 800b960:	6013      	strpl	r3, [r2, #0]
 800b962:	4770      	bx	lr
 800b964:	b299      	uxth	r1, r3
 800b966:	b909      	cbnz	r1, 800b96c <__lo0bits+0x2a>
 800b968:	0c1b      	lsrs	r3, r3, #16
 800b96a:	2010      	movs	r0, #16
 800b96c:	b2d9      	uxtb	r1, r3
 800b96e:	b909      	cbnz	r1, 800b974 <__lo0bits+0x32>
 800b970:	3008      	adds	r0, #8
 800b972:	0a1b      	lsrs	r3, r3, #8
 800b974:	0719      	lsls	r1, r3, #28
 800b976:	bf04      	itt	eq
 800b978:	091b      	lsreq	r3, r3, #4
 800b97a:	3004      	addeq	r0, #4
 800b97c:	0799      	lsls	r1, r3, #30
 800b97e:	bf04      	itt	eq
 800b980:	089b      	lsreq	r3, r3, #2
 800b982:	3002      	addeq	r0, #2
 800b984:	07d9      	lsls	r1, r3, #31
 800b986:	d403      	bmi.n	800b990 <__lo0bits+0x4e>
 800b988:	085b      	lsrs	r3, r3, #1
 800b98a:	f100 0001 	add.w	r0, r0, #1
 800b98e:	d003      	beq.n	800b998 <__lo0bits+0x56>
 800b990:	6013      	str	r3, [r2, #0]
 800b992:	4770      	bx	lr
 800b994:	2000      	movs	r0, #0
 800b996:	4770      	bx	lr
 800b998:	2020      	movs	r0, #32
 800b99a:	4770      	bx	lr

0800b99c <__i2b>:
 800b99c:	b510      	push	{r4, lr}
 800b99e:	460c      	mov	r4, r1
 800b9a0:	2101      	movs	r1, #1
 800b9a2:	f7ff febb 	bl	800b71c <_Balloc>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	b928      	cbnz	r0, 800b9b6 <__i2b+0x1a>
 800b9aa:	4b05      	ldr	r3, [pc, #20]	@ (800b9c0 <__i2b+0x24>)
 800b9ac:	f240 1145 	movw	r1, #325	@ 0x145
 800b9b0:	4804      	ldr	r0, [pc, #16]	@ (800b9c4 <__i2b+0x28>)
 800b9b2:	f7fe fedf 	bl	800a774 <__assert_func>
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	6144      	str	r4, [r0, #20]
 800b9ba:	6103      	str	r3, [r0, #16]
 800b9bc:	bd10      	pop	{r4, pc}
 800b9be:	bf00      	nop
 800b9c0:	0800eb26 	.word	0x0800eb26
 800b9c4:	0800eb37 	.word	0x0800eb37

0800b9c8 <__multiply>:
 800b9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9cc:	4617      	mov	r7, r2
 800b9ce:	690a      	ldr	r2, [r1, #16]
 800b9d0:	4689      	mov	r9, r1
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	bfa2      	ittt	ge
 800b9da:	463b      	movge	r3, r7
 800b9dc:	460f      	movge	r7, r1
 800b9de:	4699      	movge	r9, r3
 800b9e0:	693d      	ldr	r5, [r7, #16]
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9e8:	6879      	ldr	r1, [r7, #4]
 800b9ea:	eb05 060a 	add.w	r6, r5, sl
 800b9ee:	42b3      	cmp	r3, r6
 800b9f0:	bfb8      	it	lt
 800b9f2:	3101      	addlt	r1, #1
 800b9f4:	f7ff fe92 	bl	800b71c <_Balloc>
 800b9f8:	b930      	cbnz	r0, 800ba08 <__multiply+0x40>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	4b42      	ldr	r3, [pc, #264]	@ (800bb08 <__multiply+0x140>)
 800b9fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba02:	4842      	ldr	r0, [pc, #264]	@ (800bb0c <__multiply+0x144>)
 800ba04:	f7fe feb6 	bl	800a774 <__assert_func>
 800ba08:	f100 0414 	add.w	r4, r0, #20
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ba12:	4623      	mov	r3, r4
 800ba14:	4573      	cmp	r3, lr
 800ba16:	d320      	bcc.n	800ba5a <__multiply+0x92>
 800ba18:	f107 0814 	add.w	r8, r7, #20
 800ba1c:	f109 0114 	add.w	r1, r9, #20
 800ba20:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ba24:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ba28:	9302      	str	r3, [sp, #8]
 800ba2a:	1beb      	subs	r3, r5, r7
 800ba2c:	3715      	adds	r7, #21
 800ba2e:	3b15      	subs	r3, #21
 800ba30:	f023 0303 	bic.w	r3, r3, #3
 800ba34:	3304      	adds	r3, #4
 800ba36:	42bd      	cmp	r5, r7
 800ba38:	bf38      	it	cc
 800ba3a:	2304      	movcc	r3, #4
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	9b02      	ldr	r3, [sp, #8]
 800ba40:	9103      	str	r1, [sp, #12]
 800ba42:	428b      	cmp	r3, r1
 800ba44:	d80c      	bhi.n	800ba60 <__multiply+0x98>
 800ba46:	2e00      	cmp	r6, #0
 800ba48:	dd03      	ble.n	800ba52 <__multiply+0x8a>
 800ba4a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d057      	beq.n	800bb02 <__multiply+0x13a>
 800ba52:	6106      	str	r6, [r0, #16]
 800ba54:	b005      	add	sp, #20
 800ba56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba5a:	f843 2b04 	str.w	r2, [r3], #4
 800ba5e:	e7d9      	b.n	800ba14 <__multiply+0x4c>
 800ba60:	f8b1 a000 	ldrh.w	sl, [r1]
 800ba64:	f1ba 0f00 	cmp.w	sl, #0
 800ba68:	d021      	beq.n	800baae <__multiply+0xe6>
 800ba6a:	46c4      	mov	ip, r8
 800ba6c:	46a1      	mov	r9, r4
 800ba6e:	2700      	movs	r7, #0
 800ba70:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba74:	f8d9 3000 	ldr.w	r3, [r9]
 800ba78:	fa1f fb82 	uxth.w	fp, r2
 800ba7c:	4565      	cmp	r5, ip
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ba84:	fb0a 330b 	mla	r3, sl, fp, r3
 800ba88:	443b      	add	r3, r7
 800ba8a:	f8d9 7000 	ldr.w	r7, [r9]
 800ba8e:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800ba92:	fb0a 7202 	mla	r2, sl, r2, r7
 800ba96:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800baa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800baa4:	f849 3b04 	str.w	r3, [r9], #4
 800baa8:	d8e2      	bhi.n	800ba70 <__multiply+0xa8>
 800baaa:	9b01      	ldr	r3, [sp, #4]
 800baac:	50e7      	str	r7, [r4, r3]
 800baae:	9b03      	ldr	r3, [sp, #12]
 800bab0:	3104      	adds	r1, #4
 800bab2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bab6:	f1b9 0f00 	cmp.w	r9, #0
 800baba:	d020      	beq.n	800bafe <__multiply+0x136>
 800babc:	6823      	ldr	r3, [r4, #0]
 800babe:	4647      	mov	r7, r8
 800bac0:	46a4      	mov	ip, r4
 800bac2:	f04f 0a00 	mov.w	sl, #0
 800bac6:	f8b7 b000 	ldrh.w	fp, [r7]
 800baca:	b29b      	uxth	r3, r3
 800bacc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bad0:	fb09 220b 	mla	r2, r9, fp, r2
 800bad4:	4452      	add	r2, sl
 800bad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bada:	f84c 3b04 	str.w	r3, [ip], #4
 800bade:	f857 3b04 	ldr.w	r3, [r7], #4
 800bae2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bae6:	f8bc 3000 	ldrh.w	r3, [ip]
 800baea:	42bd      	cmp	r5, r7
 800baec:	fb09 330a 	mla	r3, r9, sl, r3
 800baf0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800baf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800baf8:	d8e5      	bhi.n	800bac6 <__multiply+0xfe>
 800bafa:	9a01      	ldr	r2, [sp, #4]
 800bafc:	50a3      	str	r3, [r4, r2]
 800bafe:	3404      	adds	r4, #4
 800bb00:	e79d      	b.n	800ba3e <__multiply+0x76>
 800bb02:	3e01      	subs	r6, #1
 800bb04:	e79f      	b.n	800ba46 <__multiply+0x7e>
 800bb06:	bf00      	nop
 800bb08:	0800eb26 	.word	0x0800eb26
 800bb0c:	0800eb37 	.word	0x0800eb37

0800bb10 <__pow5mult>:
 800bb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb14:	4615      	mov	r5, r2
 800bb16:	f012 0203 	ands.w	r2, r2, #3
 800bb1a:	4607      	mov	r7, r0
 800bb1c:	460e      	mov	r6, r1
 800bb1e:	d007      	beq.n	800bb30 <__pow5mult+0x20>
 800bb20:	3a01      	subs	r2, #1
 800bb22:	4c25      	ldr	r4, [pc, #148]	@ (800bbb8 <__pow5mult+0xa8>)
 800bb24:	2300      	movs	r3, #0
 800bb26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb2a:	f7ff fe59 	bl	800b7e0 <__multadd>
 800bb2e:	4606      	mov	r6, r0
 800bb30:	10ad      	asrs	r5, r5, #2
 800bb32:	d03d      	beq.n	800bbb0 <__pow5mult+0xa0>
 800bb34:	69fc      	ldr	r4, [r7, #28]
 800bb36:	b97c      	cbnz	r4, 800bb58 <__pow5mult+0x48>
 800bb38:	2010      	movs	r0, #16
 800bb3a:	f7ff fd31 	bl	800b5a0 <malloc>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	61f8      	str	r0, [r7, #28]
 800bb42:	b928      	cbnz	r0, 800bb50 <__pow5mult+0x40>
 800bb44:	4b1d      	ldr	r3, [pc, #116]	@ (800bbbc <__pow5mult+0xac>)
 800bb46:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bb4a:	481d      	ldr	r0, [pc, #116]	@ (800bbc0 <__pow5mult+0xb0>)
 800bb4c:	f7fe fe12 	bl	800a774 <__assert_func>
 800bb50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb54:	6004      	str	r4, [r0, #0]
 800bb56:	60c4      	str	r4, [r0, #12]
 800bb58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bb5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb60:	b94c      	cbnz	r4, 800bb76 <__pow5mult+0x66>
 800bb62:	f240 2171 	movw	r1, #625	@ 0x271
 800bb66:	4638      	mov	r0, r7
 800bb68:	f7ff ff18 	bl	800b99c <__i2b>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	4604      	mov	r4, r0
 800bb70:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb74:	6003      	str	r3, [r0, #0]
 800bb76:	f04f 0900 	mov.w	r9, #0
 800bb7a:	07eb      	lsls	r3, r5, #31
 800bb7c:	d50a      	bpl.n	800bb94 <__pow5mult+0x84>
 800bb7e:	4631      	mov	r1, r6
 800bb80:	4622      	mov	r2, r4
 800bb82:	4638      	mov	r0, r7
 800bb84:	f7ff ff20 	bl	800b9c8 <__multiply>
 800bb88:	4680      	mov	r8, r0
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	4638      	mov	r0, r7
 800bb8e:	4646      	mov	r6, r8
 800bb90:	f7ff fe04 	bl	800b79c <_Bfree>
 800bb94:	106d      	asrs	r5, r5, #1
 800bb96:	d00b      	beq.n	800bbb0 <__pow5mult+0xa0>
 800bb98:	6820      	ldr	r0, [r4, #0]
 800bb9a:	b938      	cbnz	r0, 800bbac <__pow5mult+0x9c>
 800bb9c:	4622      	mov	r2, r4
 800bb9e:	4621      	mov	r1, r4
 800bba0:	4638      	mov	r0, r7
 800bba2:	f7ff ff11 	bl	800b9c8 <__multiply>
 800bba6:	6020      	str	r0, [r4, #0]
 800bba8:	f8c0 9000 	str.w	r9, [r0]
 800bbac:	4604      	mov	r4, r0
 800bbae:	e7e4      	b.n	800bb7a <__pow5mult+0x6a>
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbb6:	bf00      	nop
 800bbb8:	0800ece8 	.word	0x0800ece8
 800bbbc:	0800e9c7 	.word	0x0800e9c7
 800bbc0:	0800eb37 	.word	0x0800eb37

0800bbc4 <__lshift>:
 800bbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbc8:	460c      	mov	r4, r1
 800bbca:	4607      	mov	r7, r0
 800bbcc:	4691      	mov	r9, r2
 800bbce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbd2:	6923      	ldr	r3, [r4, #16]
 800bbd4:	6849      	ldr	r1, [r1, #4]
 800bbd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbda:	68a3      	ldr	r3, [r4, #8]
 800bbdc:	f108 0601 	add.w	r6, r8, #1
 800bbe0:	42b3      	cmp	r3, r6
 800bbe2:	db0b      	blt.n	800bbfc <__lshift+0x38>
 800bbe4:	4638      	mov	r0, r7
 800bbe6:	f7ff fd99 	bl	800b71c <_Balloc>
 800bbea:	4605      	mov	r5, r0
 800bbec:	b948      	cbnz	r0, 800bc02 <__lshift+0x3e>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	4b28      	ldr	r3, [pc, #160]	@ (800bc94 <__lshift+0xd0>)
 800bbf2:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bbf6:	4828      	ldr	r0, [pc, #160]	@ (800bc98 <__lshift+0xd4>)
 800bbf8:	f7fe fdbc 	bl	800a774 <__assert_func>
 800bbfc:	3101      	adds	r1, #1
 800bbfe:	005b      	lsls	r3, r3, #1
 800bc00:	e7ee      	b.n	800bbe0 <__lshift+0x1c>
 800bc02:	2300      	movs	r3, #0
 800bc04:	f100 0114 	add.w	r1, r0, #20
 800bc08:	f100 0210 	add.w	r2, r0, #16
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	4553      	cmp	r3, sl
 800bc10:	db33      	blt.n	800bc7a <__lshift+0xb6>
 800bc12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc16:	f104 0314 	add.w	r3, r4, #20
 800bc1a:	6920      	ldr	r0, [r4, #16]
 800bc1c:	f019 091f 	ands.w	r9, r9, #31
 800bc20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc28:	d02b      	beq.n	800bc82 <__lshift+0xbe>
 800bc2a:	f1c9 0e20 	rsb	lr, r9, #32
 800bc2e:	468a      	mov	sl, r1
 800bc30:	2200      	movs	r2, #0
 800bc32:	6818      	ldr	r0, [r3, #0]
 800bc34:	fa00 f009 	lsl.w	r0, r0, r9
 800bc38:	4310      	orrs	r0, r2
 800bc3a:	f84a 0b04 	str.w	r0, [sl], #4
 800bc3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc42:	459c      	cmp	ip, r3
 800bc44:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc48:	d8f3      	bhi.n	800bc32 <__lshift+0x6e>
 800bc4a:	ebac 0304 	sub.w	r3, ip, r4
 800bc4e:	f104 0015 	add.w	r0, r4, #21
 800bc52:	3b15      	subs	r3, #21
 800bc54:	f023 0303 	bic.w	r3, r3, #3
 800bc58:	3304      	adds	r3, #4
 800bc5a:	4560      	cmp	r0, ip
 800bc5c:	bf88      	it	hi
 800bc5e:	2304      	movhi	r3, #4
 800bc60:	50ca      	str	r2, [r1, r3]
 800bc62:	b10a      	cbz	r2, 800bc68 <__lshift+0xa4>
 800bc64:	f108 0602 	add.w	r6, r8, #2
 800bc68:	3e01      	subs	r6, #1
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	612e      	str	r6, [r5, #16]
 800bc70:	f7ff fd94 	bl	800b79c <_Bfree>
 800bc74:	4628      	mov	r0, r5
 800bc76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc80:	e7c5      	b.n	800bc0e <__lshift+0x4a>
 800bc82:	3904      	subs	r1, #4
 800bc84:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc88:	459c      	cmp	ip, r3
 800bc8a:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc8e:	d8f9      	bhi.n	800bc84 <__lshift+0xc0>
 800bc90:	e7ea      	b.n	800bc68 <__lshift+0xa4>
 800bc92:	bf00      	nop
 800bc94:	0800eb26 	.word	0x0800eb26
 800bc98:	0800eb37 	.word	0x0800eb37

0800bc9c <__mcmp>:
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	690a      	ldr	r2, [r1, #16]
 800bca0:	6900      	ldr	r0, [r0, #16]
 800bca2:	1a80      	subs	r0, r0, r2
 800bca4:	b530      	push	{r4, r5, lr}
 800bca6:	d10e      	bne.n	800bcc6 <__mcmp+0x2a>
 800bca8:	3314      	adds	r3, #20
 800bcaa:	3114      	adds	r1, #20
 800bcac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bcb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bcb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bcb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bcbc:	4295      	cmp	r5, r2
 800bcbe:	d003      	beq.n	800bcc8 <__mcmp+0x2c>
 800bcc0:	d205      	bcs.n	800bcce <__mcmp+0x32>
 800bcc2:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc6:	bd30      	pop	{r4, r5, pc}
 800bcc8:	42a3      	cmp	r3, r4
 800bcca:	d3f3      	bcc.n	800bcb4 <__mcmp+0x18>
 800bccc:	e7fb      	b.n	800bcc6 <__mcmp+0x2a>
 800bcce:	2001      	movs	r0, #1
 800bcd0:	e7f9      	b.n	800bcc6 <__mcmp+0x2a>
	...

0800bcd4 <__mdiff>:
 800bcd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd8:	4689      	mov	r9, r1
 800bcda:	4606      	mov	r6, r0
 800bcdc:	4611      	mov	r1, r2
 800bcde:	4614      	mov	r4, r2
 800bce0:	4648      	mov	r0, r9
 800bce2:	f7ff ffdb 	bl	800bc9c <__mcmp>
 800bce6:	1e05      	subs	r5, r0, #0
 800bce8:	d112      	bne.n	800bd10 <__mdiff+0x3c>
 800bcea:	4629      	mov	r1, r5
 800bcec:	4630      	mov	r0, r6
 800bcee:	f7ff fd15 	bl	800b71c <_Balloc>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	b928      	cbnz	r0, 800bd02 <__mdiff+0x2e>
 800bcf6:	4b41      	ldr	r3, [pc, #260]	@ (800bdfc <__mdiff+0x128>)
 800bcf8:	f240 2137 	movw	r1, #567	@ 0x237
 800bcfc:	4840      	ldr	r0, [pc, #256]	@ (800be00 <__mdiff+0x12c>)
 800bcfe:	f7fe fd39 	bl	800a774 <__assert_func>
 800bd02:	2301      	movs	r3, #1
 800bd04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd08:	4610      	mov	r0, r2
 800bd0a:	b003      	add	sp, #12
 800bd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd10:	bfbc      	itt	lt
 800bd12:	464b      	movlt	r3, r9
 800bd14:	46a1      	movlt	r9, r4
 800bd16:	4630      	mov	r0, r6
 800bd18:	bfb8      	it	lt
 800bd1a:	2501      	movlt	r5, #1
 800bd1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd20:	bfb4      	ite	lt
 800bd22:	461c      	movlt	r4, r3
 800bd24:	2500      	movge	r5, #0
 800bd26:	f7ff fcf9 	bl	800b71c <_Balloc>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	b918      	cbnz	r0, 800bd36 <__mdiff+0x62>
 800bd2e:	4b33      	ldr	r3, [pc, #204]	@ (800bdfc <__mdiff+0x128>)
 800bd30:	f240 2145 	movw	r1, #581	@ 0x245
 800bd34:	e7e2      	b.n	800bcfc <__mdiff+0x28>
 800bd36:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd3a:	f104 0e14 	add.w	lr, r4, #20
 800bd3e:	6926      	ldr	r6, [r4, #16]
 800bd40:	f100 0b14 	add.w	fp, r0, #20
 800bd44:	60c5      	str	r5, [r0, #12]
 800bd46:	f109 0514 	add.w	r5, r9, #20
 800bd4a:	f109 0310 	add.w	r3, r9, #16
 800bd4e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bd52:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bd56:	46d9      	mov	r9, fp
 800bd58:	f04f 0c00 	mov.w	ip, #0
 800bd5c:	9301      	str	r3, [sp, #4]
 800bd5e:	9b01      	ldr	r3, [sp, #4]
 800bd60:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bd64:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bd68:	4576      	cmp	r6, lr
 800bd6a:	9301      	str	r3, [sp, #4]
 800bd6c:	fa1f f38a 	uxth.w	r3, sl
 800bd70:	4619      	mov	r1, r3
 800bd72:	b283      	uxth	r3, r0
 800bd74:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800bd78:	eba1 0303 	sub.w	r3, r1, r3
 800bd7c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bd80:	4463      	add	r3, ip
 800bd82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd8c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd90:	f849 3b04 	str.w	r3, [r9], #4
 800bd94:	d8e3      	bhi.n	800bd5e <__mdiff+0x8a>
 800bd96:	1b33      	subs	r3, r6, r4
 800bd98:	3415      	adds	r4, #21
 800bd9a:	3b15      	subs	r3, #21
 800bd9c:	f023 0303 	bic.w	r3, r3, #3
 800bda0:	3304      	adds	r3, #4
 800bda2:	42a6      	cmp	r6, r4
 800bda4:	bf38      	it	cc
 800bda6:	2304      	movcc	r3, #4
 800bda8:	441d      	add	r5, r3
 800bdaa:	445b      	add	r3, fp
 800bdac:	462c      	mov	r4, r5
 800bdae:	461e      	mov	r6, r3
 800bdb0:	4544      	cmp	r4, r8
 800bdb2:	d30e      	bcc.n	800bdd2 <__mdiff+0xfe>
 800bdb4:	f108 0103 	add.w	r1, r8, #3
 800bdb8:	1b49      	subs	r1, r1, r5
 800bdba:	3d03      	subs	r5, #3
 800bdbc:	f021 0103 	bic.w	r1, r1, #3
 800bdc0:	45a8      	cmp	r8, r5
 800bdc2:	bf38      	it	cc
 800bdc4:	2100      	movcc	r1, #0
 800bdc6:	440b      	add	r3, r1
 800bdc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdcc:	b199      	cbz	r1, 800bdf6 <__mdiff+0x122>
 800bdce:	6117      	str	r7, [r2, #16]
 800bdd0:	e79a      	b.n	800bd08 <__mdiff+0x34>
 800bdd2:	f854 1b04 	ldr.w	r1, [r4], #4
 800bdd6:	46e6      	mov	lr, ip
 800bdd8:	fa1f fc81 	uxth.w	ip, r1
 800bddc:	0c08      	lsrs	r0, r1, #16
 800bdde:	4471      	add	r1, lr
 800bde0:	44f4      	add	ip, lr
 800bde2:	b289      	uxth	r1, r1
 800bde4:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bde8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bdec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdf0:	f846 1b04 	str.w	r1, [r6], #4
 800bdf4:	e7dc      	b.n	800bdb0 <__mdiff+0xdc>
 800bdf6:	3f01      	subs	r7, #1
 800bdf8:	e7e6      	b.n	800bdc8 <__mdiff+0xf4>
 800bdfa:	bf00      	nop
 800bdfc:	0800eb26 	.word	0x0800eb26
 800be00:	0800eb37 	.word	0x0800eb37

0800be04 <__ulp>:
 800be04:	b082      	sub	sp, #8
 800be06:	4b11      	ldr	r3, [pc, #68]	@ (800be4c <__ulp+0x48>)
 800be08:	ed8d 0b00 	vstr	d0, [sp]
 800be0c:	9a01      	ldr	r2, [sp, #4]
 800be0e:	4013      	ands	r3, r2
 800be10:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800be14:	2b00      	cmp	r3, #0
 800be16:	dc08      	bgt.n	800be2a <__ulp+0x26>
 800be18:	425b      	negs	r3, r3
 800be1a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800be1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be22:	da04      	bge.n	800be2e <__ulp+0x2a>
 800be24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800be28:	4113      	asrs	r3, r2
 800be2a:	2200      	movs	r2, #0
 800be2c:	e008      	b.n	800be40 <__ulp+0x3c>
 800be2e:	f1a2 0314 	sub.w	r3, r2, #20
 800be32:	2b1e      	cmp	r3, #30
 800be34:	bfd6      	itet	le
 800be36:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800be3a:	2201      	movgt	r2, #1
 800be3c:	40da      	lsrle	r2, r3
 800be3e:	2300      	movs	r3, #0
 800be40:	4619      	mov	r1, r3
 800be42:	4610      	mov	r0, r2
 800be44:	ec41 0b10 	vmov	d0, r0, r1
 800be48:	b002      	add	sp, #8
 800be4a:	4770      	bx	lr
 800be4c:	7ff00000 	.word	0x7ff00000

0800be50 <__b2d>:
 800be50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be54:	6906      	ldr	r6, [r0, #16]
 800be56:	f100 0814 	add.w	r8, r0, #20
 800be5a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800be5e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be62:	1f37      	subs	r7, r6, #4
 800be64:	4610      	mov	r0, r2
 800be66:	f7ff fd4d 	bl	800b904 <__hi0bits>
 800be6a:	f1c0 0320 	rsb	r3, r0, #32
 800be6e:	280a      	cmp	r0, #10
 800be70:	600b      	str	r3, [r1, #0]
 800be72:	491d      	ldr	r1, [pc, #116]	@ (800bee8 <__b2d+0x98>)
 800be74:	dc16      	bgt.n	800bea4 <__b2d+0x54>
 800be76:	f1c0 0c0b 	rsb	ip, r0, #11
 800be7a:	45b8      	cmp	r8, r7
 800be7c:	f100 0015 	add.w	r0, r0, #21
 800be80:	fa22 f30c 	lsr.w	r3, r2, ip
 800be84:	fa02 f000 	lsl.w	r0, r2, r0
 800be88:	ea43 0501 	orr.w	r5, r3, r1
 800be8c:	bf34      	ite	cc
 800be8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800be92:	2300      	movcs	r3, #0
 800be94:	fa23 f30c 	lsr.w	r3, r3, ip
 800be98:	4303      	orrs	r3, r0
 800be9a:	461c      	mov	r4, r3
 800be9c:	ec45 4b10 	vmov	d0, r4, r5
 800bea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bea4:	45b8      	cmp	r8, r7
 800bea6:	bf3a      	itte	cc
 800bea8:	f1a6 0708 	subcc.w	r7, r6, #8
 800beac:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800beb0:	2300      	movcs	r3, #0
 800beb2:	380b      	subs	r0, #11
 800beb4:	d014      	beq.n	800bee0 <__b2d+0x90>
 800beb6:	f1c0 0120 	rsb	r1, r0, #32
 800beba:	4082      	lsls	r2, r0
 800bebc:	4547      	cmp	r7, r8
 800bebe:	fa23 f401 	lsr.w	r4, r3, r1
 800bec2:	fa03 f300 	lsl.w	r3, r3, r0
 800bec6:	ea42 0204 	orr.w	r2, r2, r4
 800beca:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bece:	bf8c      	ite	hi
 800bed0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bed4:	2200      	movls	r2, #0
 800bed6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800beda:	40ca      	lsrs	r2, r1
 800bedc:	4313      	orrs	r3, r2
 800bede:	e7dc      	b.n	800be9a <__b2d+0x4a>
 800bee0:	ea42 0501 	orr.w	r5, r2, r1
 800bee4:	e7d9      	b.n	800be9a <__b2d+0x4a>
 800bee6:	bf00      	nop
 800bee8:	3ff00000 	.word	0x3ff00000

0800beec <__d2b>:
 800beec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bef0:	460f      	mov	r7, r1
 800bef2:	2101      	movs	r1, #1
 800bef4:	4616      	mov	r6, r2
 800bef6:	ec59 8b10 	vmov	r8, r9, d0
 800befa:	f7ff fc0f 	bl	800b71c <_Balloc>
 800befe:	4604      	mov	r4, r0
 800bf00:	b930      	cbnz	r0, 800bf10 <__d2b+0x24>
 800bf02:	4602      	mov	r2, r0
 800bf04:	4b23      	ldr	r3, [pc, #140]	@ (800bf94 <__d2b+0xa8>)
 800bf06:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf0a:	4823      	ldr	r0, [pc, #140]	@ (800bf98 <__d2b+0xac>)
 800bf0c:	f7fe fc32 	bl	800a774 <__assert_func>
 800bf10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf18:	b10d      	cbz	r5, 800bf1e <__d2b+0x32>
 800bf1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf1e:	9301      	str	r3, [sp, #4]
 800bf20:	f1b8 0300 	subs.w	r3, r8, #0
 800bf24:	d023      	beq.n	800bf6e <__d2b+0x82>
 800bf26:	4668      	mov	r0, sp
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	f7ff fd0a 	bl	800b942 <__lo0bits>
 800bf2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf32:	b1d0      	cbz	r0, 800bf6a <__d2b+0x7e>
 800bf34:	f1c0 0320 	rsb	r3, r0, #32
 800bf38:	fa02 f303 	lsl.w	r3, r2, r3
 800bf3c:	40c2      	lsrs	r2, r0
 800bf3e:	430b      	orrs	r3, r1
 800bf40:	9201      	str	r2, [sp, #4]
 800bf42:	6163      	str	r3, [r4, #20]
 800bf44:	9b01      	ldr	r3, [sp, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	61a3      	str	r3, [r4, #24]
 800bf4a:	bf0c      	ite	eq
 800bf4c:	2201      	moveq	r2, #1
 800bf4e:	2202      	movne	r2, #2
 800bf50:	6122      	str	r2, [r4, #16]
 800bf52:	b1a5      	cbz	r5, 800bf7e <__d2b+0x92>
 800bf54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf58:	4405      	add	r5, r0
 800bf5a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf5e:	603d      	str	r5, [r7, #0]
 800bf60:	6030      	str	r0, [r6, #0]
 800bf62:	4620      	mov	r0, r4
 800bf64:	b003      	add	sp, #12
 800bf66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf6a:	6161      	str	r1, [r4, #20]
 800bf6c:	e7ea      	b.n	800bf44 <__d2b+0x58>
 800bf6e:	a801      	add	r0, sp, #4
 800bf70:	f7ff fce7 	bl	800b942 <__lo0bits>
 800bf74:	9b01      	ldr	r3, [sp, #4]
 800bf76:	3020      	adds	r0, #32
 800bf78:	2201      	movs	r2, #1
 800bf7a:	6163      	str	r3, [r4, #20]
 800bf7c:	e7e8      	b.n	800bf50 <__d2b+0x64>
 800bf7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf86:	6038      	str	r0, [r7, #0]
 800bf88:	6918      	ldr	r0, [r3, #16]
 800bf8a:	f7ff fcbb 	bl	800b904 <__hi0bits>
 800bf8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf92:	e7e5      	b.n	800bf60 <__d2b+0x74>
 800bf94:	0800eb26 	.word	0x0800eb26
 800bf98:	0800eb37 	.word	0x0800eb37

0800bf9c <__ratio>:
 800bf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa0:	b085      	sub	sp, #20
 800bfa2:	e9cd 1000 	strd	r1, r0, [sp]
 800bfa6:	a902      	add	r1, sp, #8
 800bfa8:	f7ff ff52 	bl	800be50 <__b2d>
 800bfac:	a903      	add	r1, sp, #12
 800bfae:	9800      	ldr	r0, [sp, #0]
 800bfb0:	ec55 4b10 	vmov	r4, r5, d0
 800bfb4:	f7ff ff4c 	bl	800be50 <__b2d>
 800bfb8:	9b01      	ldr	r3, [sp, #4]
 800bfba:	462f      	mov	r7, r5
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	6919      	ldr	r1, [r3, #16]
 800bfc0:	9b00      	ldr	r3, [sp, #0]
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	1ac9      	subs	r1, r1, r3
 800bfc6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bfca:	ec5b ab10 	vmov	sl, fp, d0
 800bfce:	1a9b      	subs	r3, r3, r2
 800bfd0:	46d9      	mov	r9, fp
 800bfd2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	bfcd      	iteet	gt
 800bfda:	462a      	movgt	r2, r5
 800bfdc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bfe0:	465a      	movle	r2, fp
 800bfe2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bfe6:	bfd8      	it	le
 800bfe8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bfec:	4652      	mov	r2, sl
 800bfee:	4639      	mov	r1, r7
 800bff0:	464b      	mov	r3, r9
 800bff2:	f7f4 fc19 	bl	8000828 <__aeabi_ddiv>
 800bff6:	ec41 0b10 	vmov	d0, r0, r1
 800bffa:	b005      	add	sp, #20
 800bffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c000 <__copybits>:
 800c000:	3901      	subs	r1, #1
 800c002:	f102 0314 	add.w	r3, r2, #20
 800c006:	1149      	asrs	r1, r1, #5
 800c008:	b570      	push	{r4, r5, r6, lr}
 800c00a:	3101      	adds	r1, #1
 800c00c:	6914      	ldr	r4, [r2, #16]
 800c00e:	1f05      	subs	r5, r0, #4
 800c010:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c014:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c018:	42a3      	cmp	r3, r4
 800c01a:	d30c      	bcc.n	800c036 <__copybits+0x36>
 800c01c:	1aa3      	subs	r3, r4, r2
 800c01e:	3211      	adds	r2, #17
 800c020:	3b11      	subs	r3, #17
 800c022:	f023 0303 	bic.w	r3, r3, #3
 800c026:	42a2      	cmp	r2, r4
 800c028:	bf88      	it	hi
 800c02a:	2300      	movhi	r3, #0
 800c02c:	4418      	add	r0, r3
 800c02e:	2300      	movs	r3, #0
 800c030:	4288      	cmp	r0, r1
 800c032:	d305      	bcc.n	800c040 <__copybits+0x40>
 800c034:	bd70      	pop	{r4, r5, r6, pc}
 800c036:	f853 6b04 	ldr.w	r6, [r3], #4
 800c03a:	f845 6f04 	str.w	r6, [r5, #4]!
 800c03e:	e7eb      	b.n	800c018 <__copybits+0x18>
 800c040:	f840 3b04 	str.w	r3, [r0], #4
 800c044:	e7f4      	b.n	800c030 <__copybits+0x30>

0800c046 <__any_on>:
 800c046:	f100 0214 	add.w	r2, r0, #20
 800c04a:	114b      	asrs	r3, r1, #5
 800c04c:	6900      	ldr	r0, [r0, #16]
 800c04e:	4298      	cmp	r0, r3
 800c050:	b510      	push	{r4, lr}
 800c052:	db11      	blt.n	800c078 <__any_on+0x32>
 800c054:	dd0a      	ble.n	800c06c <__any_on+0x26>
 800c056:	f011 011f 	ands.w	r1, r1, #31
 800c05a:	d007      	beq.n	800c06c <__any_on+0x26>
 800c05c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c060:	fa24 f001 	lsr.w	r0, r4, r1
 800c064:	fa00 f101 	lsl.w	r1, r0, r1
 800c068:	428c      	cmp	r4, r1
 800c06a:	d10b      	bne.n	800c084 <__any_on+0x3e>
 800c06c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c070:	4293      	cmp	r3, r2
 800c072:	d803      	bhi.n	800c07c <__any_on+0x36>
 800c074:	2000      	movs	r0, #0
 800c076:	bd10      	pop	{r4, pc}
 800c078:	4603      	mov	r3, r0
 800c07a:	e7f7      	b.n	800c06c <__any_on+0x26>
 800c07c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c080:	2900      	cmp	r1, #0
 800c082:	d0f5      	beq.n	800c070 <__any_on+0x2a>
 800c084:	2001      	movs	r0, #1
 800c086:	e7f6      	b.n	800c076 <__any_on+0x30>

0800c088 <sulp>:
 800c088:	b570      	push	{r4, r5, r6, lr}
 800c08a:	4604      	mov	r4, r0
 800c08c:	460d      	mov	r5, r1
 800c08e:	4616      	mov	r6, r2
 800c090:	ec45 4b10 	vmov	d0, r4, r5
 800c094:	f7ff feb6 	bl	800be04 <__ulp>
 800c098:	ec51 0b10 	vmov	r0, r1, d0
 800c09c:	b17e      	cbz	r6, 800c0be <sulp+0x36>
 800c09e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c0a2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	dd09      	ble.n	800c0be <sulp+0x36>
 800c0aa:	051b      	lsls	r3, r3, #20
 800c0ac:	2400      	movs	r4, #0
 800c0ae:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c0b2:	4622      	mov	r2, r4
 800c0b4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c0b8:	462b      	mov	r3, r5
 800c0ba:	f7f4 fa8b 	bl	80005d4 <__aeabi_dmul>
 800c0be:	ec41 0b10 	vmov	d0, r0, r1
 800c0c2:	bd70      	pop	{r4, r5, r6, pc}
 800c0c4:	0000      	movs	r0, r0
	...

0800c0c8 <_strtod_l>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	b09f      	sub	sp, #124	@ 0x7c
 800c0ce:	460c      	mov	r4, r1
 800c0d0:	f04f 0a00 	mov.w	sl, #0
 800c0d4:	f04f 0b00 	mov.w	fp, #0
 800c0d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c0da:	2200      	movs	r2, #0
 800c0dc:	9005      	str	r0, [sp, #20]
 800c0de:	921a      	str	r2, [sp, #104]	@ 0x68
 800c0e0:	460a      	mov	r2, r1
 800c0e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0e4:	7811      	ldrb	r1, [r2, #0]
 800c0e6:	292b      	cmp	r1, #43	@ 0x2b
 800c0e8:	d04a      	beq.n	800c180 <_strtod_l+0xb8>
 800c0ea:	d838      	bhi.n	800c15e <_strtod_l+0x96>
 800c0ec:	290d      	cmp	r1, #13
 800c0ee:	d832      	bhi.n	800c156 <_strtod_l+0x8e>
 800c0f0:	2908      	cmp	r1, #8
 800c0f2:	d832      	bhi.n	800c15a <_strtod_l+0x92>
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	d03b      	beq.n	800c170 <_strtod_l+0xa8>
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	920e      	str	r2, [sp, #56]	@ 0x38
 800c0fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c0fe:	782a      	ldrb	r2, [r5, #0]
 800c100:	2a30      	cmp	r2, #48	@ 0x30
 800c102:	f040 80b2 	bne.w	800c26a <_strtod_l+0x1a2>
 800c106:	786a      	ldrb	r2, [r5, #1]
 800c108:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c10c:	2a58      	cmp	r2, #88	@ 0x58
 800c10e:	d16e      	bne.n	800c1ee <_strtod_l+0x126>
 800c110:	9302      	str	r3, [sp, #8]
 800c112:	a919      	add	r1, sp, #100	@ 0x64
 800c114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c116:	4a90      	ldr	r2, [pc, #576]	@ (800c358 <_strtod_l+0x290>)
 800c118:	9301      	str	r3, [sp, #4]
 800c11a:	ab1a      	add	r3, sp, #104	@ 0x68
 800c11c:	9805      	ldr	r0, [sp, #20]
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c122:	f001 fddb 	bl	800dcdc <__gethex>
 800c126:	f010 060f 	ands.w	r6, r0, #15
 800c12a:	4604      	mov	r4, r0
 800c12c:	d005      	beq.n	800c13a <_strtod_l+0x72>
 800c12e:	2e06      	cmp	r6, #6
 800c130:	d128      	bne.n	800c184 <_strtod_l+0xbc>
 800c132:	3501      	adds	r5, #1
 800c134:	2300      	movs	r3, #0
 800c136:	9519      	str	r5, [sp, #100]	@ 0x64
 800c138:	930e      	str	r3, [sp, #56]	@ 0x38
 800c13a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f040 858e 	bne.w	800cc5e <_strtod_l+0xb96>
 800c142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c144:	b1cb      	cbz	r3, 800c17a <_strtod_l+0xb2>
 800c146:	4652      	mov	r2, sl
 800c148:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c14c:	ec43 2b10 	vmov	d0, r2, r3
 800c150:	b01f      	add	sp, #124	@ 0x7c
 800c152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c156:	2920      	cmp	r1, #32
 800c158:	d1ce      	bne.n	800c0f8 <_strtod_l+0x30>
 800c15a:	3201      	adds	r2, #1
 800c15c:	e7c1      	b.n	800c0e2 <_strtod_l+0x1a>
 800c15e:	292d      	cmp	r1, #45	@ 0x2d
 800c160:	d1ca      	bne.n	800c0f8 <_strtod_l+0x30>
 800c162:	2101      	movs	r1, #1
 800c164:	910e      	str	r1, [sp, #56]	@ 0x38
 800c166:	1c51      	adds	r1, r2, #1
 800c168:	9119      	str	r1, [sp, #100]	@ 0x64
 800c16a:	7852      	ldrb	r2, [r2, #1]
 800c16c:	2a00      	cmp	r2, #0
 800c16e:	d1c5      	bne.n	800c0fc <_strtod_l+0x34>
 800c170:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c172:	9419      	str	r4, [sp, #100]	@ 0x64
 800c174:	2b00      	cmp	r3, #0
 800c176:	f040 8570 	bne.w	800cc5a <_strtod_l+0xb92>
 800c17a:	4652      	mov	r2, sl
 800c17c:	465b      	mov	r3, fp
 800c17e:	e7e5      	b.n	800c14c <_strtod_l+0x84>
 800c180:	2100      	movs	r1, #0
 800c182:	e7ef      	b.n	800c164 <_strtod_l+0x9c>
 800c184:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c186:	b13a      	cbz	r2, 800c198 <_strtod_l+0xd0>
 800c188:	2135      	movs	r1, #53	@ 0x35
 800c18a:	a81c      	add	r0, sp, #112	@ 0x70
 800c18c:	f7ff ff38 	bl	800c000 <__copybits>
 800c190:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c192:	9805      	ldr	r0, [sp, #20]
 800c194:	f7ff fb02 	bl	800b79c <_Bfree>
 800c198:	3e01      	subs	r6, #1
 800c19a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c19c:	2e04      	cmp	r6, #4
 800c19e:	d806      	bhi.n	800c1ae <_strtod_l+0xe6>
 800c1a0:	e8df f006 	tbb	[pc, r6]
 800c1a4:	201d0314 	.word	0x201d0314
 800c1a8:	14          	.byte	0x14
 800c1a9:	00          	.byte	0x00
 800c1aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c1ae:	05e1      	lsls	r1, r4, #23
 800c1b0:	bf48      	it	mi
 800c1b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c1b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c1ba:	0d1b      	lsrs	r3, r3, #20
 800c1bc:	051b      	lsls	r3, r3, #20
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d1bb      	bne.n	800c13a <_strtod_l+0x72>
 800c1c2:	f7fe fa8b 	bl	800a6dc <__errno>
 800c1c6:	2322      	movs	r3, #34	@ 0x22
 800c1c8:	6003      	str	r3, [r0, #0]
 800c1ca:	e7b6      	b.n	800c13a <_strtod_l+0x72>
 800c1cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c1d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c1d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c1d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c1dc:	e7e7      	b.n	800c1ae <_strtod_l+0xe6>
 800c1de:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c360 <_strtod_l+0x298>
 800c1e2:	e7e4      	b.n	800c1ae <_strtod_l+0xe6>
 800c1e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c1e8:	f04f 3aff 	mov.w	sl, #4294967295
 800c1ec:	e7df      	b.n	800c1ae <_strtod_l+0xe6>
 800c1ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c1f0:	1c5a      	adds	r2, r3, #1
 800c1f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c1f4:	785b      	ldrb	r3, [r3, #1]
 800c1f6:	2b30      	cmp	r3, #48	@ 0x30
 800c1f8:	d0f9      	beq.n	800c1ee <_strtod_l+0x126>
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d09d      	beq.n	800c13a <_strtod_l+0x72>
 800c1fe:	2301      	movs	r3, #1
 800c200:	2700      	movs	r7, #0
 800c202:	9308      	str	r3, [sp, #32]
 800c204:	220a      	movs	r2, #10
 800c206:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c208:	46b9      	mov	r9, r7
 800c20a:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c20c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c20e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c210:	7805      	ldrb	r5, [r0, #0]
 800c212:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c216:	b2d9      	uxtb	r1, r3
 800c218:	2909      	cmp	r1, #9
 800c21a:	d928      	bls.n	800c26e <_strtod_l+0x1a6>
 800c21c:	2201      	movs	r2, #1
 800c21e:	494f      	ldr	r1, [pc, #316]	@ (800c35c <_strtod_l+0x294>)
 800c220:	f001 fbee 	bl	800da00 <strncmp>
 800c224:	2800      	cmp	r0, #0
 800c226:	d032      	beq.n	800c28e <_strtod_l+0x1c6>
 800c228:	2000      	movs	r0, #0
 800c22a:	462a      	mov	r2, r5
 800c22c:	464d      	mov	r5, r9
 800c22e:	4603      	mov	r3, r0
 800c230:	900a      	str	r0, [sp, #40]	@ 0x28
 800c232:	2a65      	cmp	r2, #101	@ 0x65
 800c234:	d001      	beq.n	800c23a <_strtod_l+0x172>
 800c236:	2a45      	cmp	r2, #69	@ 0x45
 800c238:	d114      	bne.n	800c264 <_strtod_l+0x19c>
 800c23a:	b91d      	cbnz	r5, 800c244 <_strtod_l+0x17c>
 800c23c:	9a08      	ldr	r2, [sp, #32]
 800c23e:	4302      	orrs	r2, r0
 800c240:	d096      	beq.n	800c170 <_strtod_l+0xa8>
 800c242:	2500      	movs	r5, #0
 800c244:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c246:	1c62      	adds	r2, r4, #1
 800c248:	9219      	str	r2, [sp, #100]	@ 0x64
 800c24a:	7862      	ldrb	r2, [r4, #1]
 800c24c:	2a2b      	cmp	r2, #43	@ 0x2b
 800c24e:	d079      	beq.n	800c344 <_strtod_l+0x27c>
 800c250:	2a2d      	cmp	r2, #45	@ 0x2d
 800c252:	d07d      	beq.n	800c350 <_strtod_l+0x288>
 800c254:	f04f 0c00 	mov.w	ip, #0
 800c258:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c25c:	2909      	cmp	r1, #9
 800c25e:	f240 8085 	bls.w	800c36c <_strtod_l+0x2a4>
 800c262:	9419      	str	r4, [sp, #100]	@ 0x64
 800c264:	f04f 0800 	mov.w	r8, #0
 800c268:	e0a5      	b.n	800c3b6 <_strtod_l+0x2ee>
 800c26a:	2300      	movs	r3, #0
 800c26c:	e7c8      	b.n	800c200 <_strtod_l+0x138>
 800c26e:	f1b9 0f08 	cmp.w	r9, #8
 800c272:	f100 0001 	add.w	r0, r0, #1
 800c276:	f109 0901 	add.w	r9, r9, #1
 800c27a:	bfd4      	ite	le
 800c27c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c27e:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c282:	9019      	str	r0, [sp, #100]	@ 0x64
 800c284:	bfdc      	itt	le
 800c286:	fb02 3301 	mlale	r3, r2, r1, r3
 800c28a:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c28c:	e7bf      	b.n	800c20e <_strtod_l+0x146>
 800c28e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c290:	1c5a      	adds	r2, r3, #1
 800c292:	9219      	str	r2, [sp, #100]	@ 0x64
 800c294:	785a      	ldrb	r2, [r3, #1]
 800c296:	f1b9 0f00 	cmp.w	r9, #0
 800c29a:	d03a      	beq.n	800c312 <_strtod_l+0x24a>
 800c29c:	464d      	mov	r5, r9
 800c29e:	900a      	str	r0, [sp, #40]	@ 0x28
 800c2a0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c2a4:	2b09      	cmp	r3, #9
 800c2a6:	d912      	bls.n	800c2ce <_strtod_l+0x206>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e7c2      	b.n	800c232 <_strtod_l+0x16a>
 800c2ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2ae:	3001      	adds	r0, #1
 800c2b0:	1c5a      	adds	r2, r3, #1
 800c2b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2b4:	785a      	ldrb	r2, [r3, #1]
 800c2b6:	2a30      	cmp	r2, #48	@ 0x30
 800c2b8:	d0f8      	beq.n	800c2ac <_strtod_l+0x1e4>
 800c2ba:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c2be:	2b08      	cmp	r3, #8
 800c2c0:	f200 84d2 	bhi.w	800cc68 <_strtod_l+0xba0>
 800c2c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2ca:	4605      	mov	r5, r0
 800c2cc:	930c      	str	r3, [sp, #48]	@ 0x30
 800c2ce:	3a30      	subs	r2, #48	@ 0x30
 800c2d0:	f100 0301 	add.w	r3, r0, #1
 800c2d4:	d017      	beq.n	800c306 <_strtod_l+0x23e>
 800c2d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c2d8:	462e      	mov	r6, r5
 800c2da:	f04f 0e0a 	mov.w	lr, #10
 800c2de:	4419      	add	r1, r3
 800c2e0:	910a      	str	r1, [sp, #40]	@ 0x28
 800c2e2:	1c71      	adds	r1, r6, #1
 800c2e4:	eba1 0c05 	sub.w	ip, r1, r5
 800c2e8:	4563      	cmp	r3, ip
 800c2ea:	dc14      	bgt.n	800c316 <_strtod_l+0x24e>
 800c2ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c2f0:	182b      	adds	r3, r5, r0
 800c2f2:	3501      	adds	r5, #1
 800c2f4:	2b08      	cmp	r3, #8
 800c2f6:	4405      	add	r5, r0
 800c2f8:	dc1a      	bgt.n	800c330 <_strtod_l+0x268>
 800c2fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c2fc:	230a      	movs	r3, #10
 800c2fe:	fb03 2301 	mla	r3, r3, r1, r2
 800c302:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c304:	2300      	movs	r3, #0
 800c306:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c308:	4618      	mov	r0, r3
 800c30a:	1c51      	adds	r1, r2, #1
 800c30c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c30e:	7852      	ldrb	r2, [r2, #1]
 800c310:	e7c6      	b.n	800c2a0 <_strtod_l+0x1d8>
 800c312:	4648      	mov	r0, r9
 800c314:	e7cf      	b.n	800c2b6 <_strtod_l+0x1ee>
 800c316:	2e08      	cmp	r6, #8
 800c318:	dc05      	bgt.n	800c326 <_strtod_l+0x25e>
 800c31a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c31c:	fb0e f606 	mul.w	r6, lr, r6
 800c320:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c322:	460e      	mov	r6, r1
 800c324:	e7dd      	b.n	800c2e2 <_strtod_l+0x21a>
 800c326:	2910      	cmp	r1, #16
 800c328:	bfd8      	it	le
 800c32a:	fb0e f707 	mulle.w	r7, lr, r7
 800c32e:	e7f8      	b.n	800c322 <_strtod_l+0x25a>
 800c330:	2b0f      	cmp	r3, #15
 800c332:	bfdc      	itt	le
 800c334:	230a      	movle	r3, #10
 800c336:	fb03 2707 	mlale	r7, r3, r7, r2
 800c33a:	e7e3      	b.n	800c304 <_strtod_l+0x23c>
 800c33c:	2300      	movs	r3, #0
 800c33e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c340:	2301      	movs	r3, #1
 800c342:	e77b      	b.n	800c23c <_strtod_l+0x174>
 800c344:	f04f 0c00 	mov.w	ip, #0
 800c348:	1ca2      	adds	r2, r4, #2
 800c34a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c34c:	78a2      	ldrb	r2, [r4, #2]
 800c34e:	e783      	b.n	800c258 <_strtod_l+0x190>
 800c350:	f04f 0c01 	mov.w	ip, #1
 800c354:	e7f8      	b.n	800c348 <_strtod_l+0x280>
 800c356:	bf00      	nop
 800c358:	0800edfc 	.word	0x0800edfc
 800c35c:	0800eb90 	.word	0x0800eb90
 800c360:	7ff00000 	.word	0x7ff00000
 800c364:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c366:	1c51      	adds	r1, r2, #1
 800c368:	9119      	str	r1, [sp, #100]	@ 0x64
 800c36a:	7852      	ldrb	r2, [r2, #1]
 800c36c:	2a30      	cmp	r2, #48	@ 0x30
 800c36e:	d0f9      	beq.n	800c364 <_strtod_l+0x29c>
 800c370:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c374:	2908      	cmp	r1, #8
 800c376:	f63f af75 	bhi.w	800c264 <_strtod_l+0x19c>
 800c37a:	3a30      	subs	r2, #48	@ 0x30
 800c37c:	f04f 080a 	mov.w	r8, #10
 800c380:	9209      	str	r2, [sp, #36]	@ 0x24
 800c382:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c384:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c386:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c388:	1c56      	adds	r6, r2, #1
 800c38a:	9619      	str	r6, [sp, #100]	@ 0x64
 800c38c:	7852      	ldrb	r2, [r2, #1]
 800c38e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c392:	f1be 0f09 	cmp.w	lr, #9
 800c396:	d939      	bls.n	800c40c <_strtod_l+0x344>
 800c398:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c39a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c39e:	1a76      	subs	r6, r6, r1
 800c3a0:	2e08      	cmp	r6, #8
 800c3a2:	dc03      	bgt.n	800c3ac <_strtod_l+0x2e4>
 800c3a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3a6:	4588      	cmp	r8, r1
 800c3a8:	bfa8      	it	ge
 800c3aa:	4688      	movge	r8, r1
 800c3ac:	f1bc 0f00 	cmp.w	ip, #0
 800c3b0:	d001      	beq.n	800c3b6 <_strtod_l+0x2ee>
 800c3b2:	f1c8 0800 	rsb	r8, r8, #0
 800c3b6:	2d00      	cmp	r5, #0
 800c3b8:	d14e      	bne.n	800c458 <_strtod_l+0x390>
 800c3ba:	9908      	ldr	r1, [sp, #32]
 800c3bc:	4308      	orrs	r0, r1
 800c3be:	f47f aebc 	bne.w	800c13a <_strtod_l+0x72>
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f47f aed4 	bne.w	800c170 <_strtod_l+0xa8>
 800c3c8:	2a69      	cmp	r2, #105	@ 0x69
 800c3ca:	d028      	beq.n	800c41e <_strtod_l+0x356>
 800c3cc:	dc25      	bgt.n	800c41a <_strtod_l+0x352>
 800c3ce:	2a49      	cmp	r2, #73	@ 0x49
 800c3d0:	d025      	beq.n	800c41e <_strtod_l+0x356>
 800c3d2:	2a4e      	cmp	r2, #78	@ 0x4e
 800c3d4:	f47f aecc 	bne.w	800c170 <_strtod_l+0xa8>
 800c3d8:	499a      	ldr	r1, [pc, #616]	@ (800c644 <_strtod_l+0x57c>)
 800c3da:	a819      	add	r0, sp, #100	@ 0x64
 800c3dc:	f001 fe9e 	bl	800e11c <__match>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	f43f aec5 	beq.w	800c170 <_strtod_l+0xa8>
 800c3e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	2b28      	cmp	r3, #40	@ 0x28
 800c3ec:	d12e      	bne.n	800c44c <_strtod_l+0x384>
 800c3ee:	aa1c      	add	r2, sp, #112	@ 0x70
 800c3f0:	4995      	ldr	r1, [pc, #596]	@ (800c648 <_strtod_l+0x580>)
 800c3f2:	a819      	add	r0, sp, #100	@ 0x64
 800c3f4:	f001 fea6 	bl	800e144 <__hexnan>
 800c3f8:	2805      	cmp	r0, #5
 800c3fa:	d127      	bne.n	800c44c <_strtod_l+0x384>
 800c3fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c3fe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c402:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c406:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c40a:	e696      	b.n	800c13a <_strtod_l+0x72>
 800c40c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c40e:	fb08 2101 	mla	r1, r8, r1, r2
 800c412:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c416:	9209      	str	r2, [sp, #36]	@ 0x24
 800c418:	e7b5      	b.n	800c386 <_strtod_l+0x2be>
 800c41a:	2a6e      	cmp	r2, #110	@ 0x6e
 800c41c:	e7da      	b.n	800c3d4 <_strtod_l+0x30c>
 800c41e:	498b      	ldr	r1, [pc, #556]	@ (800c64c <_strtod_l+0x584>)
 800c420:	a819      	add	r0, sp, #100	@ 0x64
 800c422:	f001 fe7b 	bl	800e11c <__match>
 800c426:	2800      	cmp	r0, #0
 800c428:	f43f aea2 	beq.w	800c170 <_strtod_l+0xa8>
 800c42c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c42e:	a819      	add	r0, sp, #100	@ 0x64
 800c430:	4987      	ldr	r1, [pc, #540]	@ (800c650 <_strtod_l+0x588>)
 800c432:	3b01      	subs	r3, #1
 800c434:	9319      	str	r3, [sp, #100]	@ 0x64
 800c436:	f001 fe71 	bl	800e11c <__match>
 800c43a:	b910      	cbnz	r0, 800c442 <_strtod_l+0x37a>
 800c43c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c43e:	3301      	adds	r3, #1
 800c440:	9319      	str	r3, [sp, #100]	@ 0x64
 800c442:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c660 <_strtod_l+0x598>
 800c446:	f04f 0a00 	mov.w	sl, #0
 800c44a:	e676      	b.n	800c13a <_strtod_l+0x72>
 800c44c:	4881      	ldr	r0, [pc, #516]	@ (800c654 <_strtod_l+0x58c>)
 800c44e:	f001 fbaf 	bl	800dbb0 <nan>
 800c452:	ec5b ab10 	vmov	sl, fp, d0
 800c456:	e670      	b.n	800c13a <_strtod_l+0x72>
 800c458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c45a:	f1b9 0f00 	cmp.w	r9, #0
 800c45e:	bf08      	it	eq
 800c460:	46a9      	moveq	r9, r5
 800c462:	2d10      	cmp	r5, #16
 800c464:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c466:	eba8 0303 	sub.w	r3, r8, r3
 800c46a:	462c      	mov	r4, r5
 800c46c:	bfa8      	it	ge
 800c46e:	2410      	movge	r4, #16
 800c470:	9309      	str	r3, [sp, #36]	@ 0x24
 800c472:	f7f4 f835 	bl	80004e0 <__aeabi_ui2d>
 800c476:	2d09      	cmp	r5, #9
 800c478:	4682      	mov	sl, r0
 800c47a:	468b      	mov	fp, r1
 800c47c:	dc13      	bgt.n	800c4a6 <_strtod_l+0x3de>
 800c47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c480:	2b00      	cmp	r3, #0
 800c482:	f43f ae5a 	beq.w	800c13a <_strtod_l+0x72>
 800c486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c488:	dd78      	ble.n	800c57c <_strtod_l+0x4b4>
 800c48a:	2b16      	cmp	r3, #22
 800c48c:	dc5f      	bgt.n	800c54e <_strtod_l+0x486>
 800c48e:	4972      	ldr	r1, [pc, #456]	@ (800c658 <_strtod_l+0x590>)
 800c490:	4652      	mov	r2, sl
 800c492:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c496:	465b      	mov	r3, fp
 800c498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c49c:	f7f4 f89a 	bl	80005d4 <__aeabi_dmul>
 800c4a0:	4682      	mov	sl, r0
 800c4a2:	468b      	mov	fp, r1
 800c4a4:	e649      	b.n	800c13a <_strtod_l+0x72>
 800c4a6:	4b6c      	ldr	r3, [pc, #432]	@ (800c658 <_strtod_l+0x590>)
 800c4a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c4b0:	f7f4 f890 	bl	80005d4 <__aeabi_dmul>
 800c4b4:	4682      	mov	sl, r0
 800c4b6:	468b      	mov	fp, r1
 800c4b8:	4638      	mov	r0, r7
 800c4ba:	f7f4 f811 	bl	80004e0 <__aeabi_ui2d>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	4650      	mov	r0, sl
 800c4c4:	4659      	mov	r1, fp
 800c4c6:	f7f3 fecf 	bl	8000268 <__adddf3>
 800c4ca:	2d0f      	cmp	r5, #15
 800c4cc:	4682      	mov	sl, r0
 800c4ce:	468b      	mov	fp, r1
 800c4d0:	ddd5      	ble.n	800c47e <_strtod_l+0x3b6>
 800c4d2:	1b2c      	subs	r4, r5, r4
 800c4d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4d6:	441c      	add	r4, r3
 800c4d8:	2c00      	cmp	r4, #0
 800c4da:	f340 8093 	ble.w	800c604 <_strtod_l+0x53c>
 800c4de:	f014 030f 	ands.w	r3, r4, #15
 800c4e2:	d00a      	beq.n	800c4fa <_strtod_l+0x432>
 800c4e4:	495c      	ldr	r1, [pc, #368]	@ (800c658 <_strtod_l+0x590>)
 800c4e6:	4652      	mov	r2, sl
 800c4e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c4ec:	465b      	mov	r3, fp
 800c4ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4f2:	f7f4 f86f 	bl	80005d4 <__aeabi_dmul>
 800c4f6:	4682      	mov	sl, r0
 800c4f8:	468b      	mov	fp, r1
 800c4fa:	f034 040f 	bics.w	r4, r4, #15
 800c4fe:	d073      	beq.n	800c5e8 <_strtod_l+0x520>
 800c500:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c504:	dd49      	ble.n	800c59a <_strtod_l+0x4d2>
 800c506:	2400      	movs	r4, #0
 800c508:	46a0      	mov	r8, r4
 800c50a:	46a1      	mov	r9, r4
 800c50c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c50e:	2322      	movs	r3, #34	@ 0x22
 800c510:	9a05      	ldr	r2, [sp, #20]
 800c512:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c660 <_strtod_l+0x598>
 800c516:	f04f 0a00 	mov.w	sl, #0
 800c51a:	6013      	str	r3, [r2, #0]
 800c51c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c51e:	2b00      	cmp	r3, #0
 800c520:	f43f ae0b 	beq.w	800c13a <_strtod_l+0x72>
 800c524:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c526:	9805      	ldr	r0, [sp, #20]
 800c528:	f7ff f938 	bl	800b79c <_Bfree>
 800c52c:	4649      	mov	r1, r9
 800c52e:	9805      	ldr	r0, [sp, #20]
 800c530:	f7ff f934 	bl	800b79c <_Bfree>
 800c534:	4641      	mov	r1, r8
 800c536:	9805      	ldr	r0, [sp, #20]
 800c538:	f7ff f930 	bl	800b79c <_Bfree>
 800c53c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c53e:	9805      	ldr	r0, [sp, #20]
 800c540:	f7ff f92c 	bl	800b79c <_Bfree>
 800c544:	4621      	mov	r1, r4
 800c546:	9805      	ldr	r0, [sp, #20]
 800c548:	f7ff f928 	bl	800b79c <_Bfree>
 800c54c:	e5f5      	b.n	800c13a <_strtod_l+0x72>
 800c54e:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c552:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c554:	4293      	cmp	r3, r2
 800c556:	dbbc      	blt.n	800c4d2 <_strtod_l+0x40a>
 800c558:	f1c5 050f 	rsb	r5, r5, #15
 800c55c:	4c3e      	ldr	r4, [pc, #248]	@ (800c658 <_strtod_l+0x590>)
 800c55e:	4652      	mov	r2, sl
 800c560:	465b      	mov	r3, fp
 800c562:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c56a:	f7f4 f833 	bl	80005d4 <__aeabi_dmul>
 800c56e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c570:	1b5d      	subs	r5, r3, r5
 800c572:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c576:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c57a:	e78f      	b.n	800c49c <_strtod_l+0x3d4>
 800c57c:	3316      	adds	r3, #22
 800c57e:	dba8      	blt.n	800c4d2 <_strtod_l+0x40a>
 800c580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c582:	4650      	mov	r0, sl
 800c584:	4659      	mov	r1, fp
 800c586:	eba3 0808 	sub.w	r8, r3, r8
 800c58a:	4b33      	ldr	r3, [pc, #204]	@ (800c658 <_strtod_l+0x590>)
 800c58c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c590:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c594:	f7f4 f948 	bl	8000828 <__aeabi_ddiv>
 800c598:	e782      	b.n	800c4a0 <_strtod_l+0x3d8>
 800c59a:	2300      	movs	r3, #0
 800c59c:	1124      	asrs	r4, r4, #4
 800c59e:	4650      	mov	r0, sl
 800c5a0:	4659      	mov	r1, fp
 800c5a2:	4f2e      	ldr	r7, [pc, #184]	@ (800c65c <_strtod_l+0x594>)
 800c5a4:	461e      	mov	r6, r3
 800c5a6:	2c01      	cmp	r4, #1
 800c5a8:	dc21      	bgt.n	800c5ee <_strtod_l+0x526>
 800c5aa:	b10b      	cbz	r3, 800c5b0 <_strtod_l+0x4e8>
 800c5ac:	4682      	mov	sl, r0
 800c5ae:	468b      	mov	fp, r1
 800c5b0:	492a      	ldr	r1, [pc, #168]	@ (800c65c <_strtod_l+0x594>)
 800c5b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c5b6:	4652      	mov	r2, sl
 800c5b8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c5bc:	465b      	mov	r3, fp
 800c5be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5c2:	f7f4 f807 	bl	80005d4 <__aeabi_dmul>
 800c5c6:	4b26      	ldr	r3, [pc, #152]	@ (800c660 <_strtod_l+0x598>)
 800c5c8:	460a      	mov	r2, r1
 800c5ca:	4682      	mov	sl, r0
 800c5cc:	400b      	ands	r3, r1
 800c5ce:	4925      	ldr	r1, [pc, #148]	@ (800c664 <_strtod_l+0x59c>)
 800c5d0:	428b      	cmp	r3, r1
 800c5d2:	d898      	bhi.n	800c506 <_strtod_l+0x43e>
 800c5d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c5d8:	428b      	cmp	r3, r1
 800c5da:	bf86      	itte	hi
 800c5dc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c668 <_strtod_l+0x5a0>
 800c5e0:	f04f 3aff 	movhi.w	sl, #4294967295
 800c5e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	9308      	str	r3, [sp, #32]
 800c5ec:	e076      	b.n	800c6dc <_strtod_l+0x614>
 800c5ee:	07e2      	lsls	r2, r4, #31
 800c5f0:	d504      	bpl.n	800c5fc <_strtod_l+0x534>
 800c5f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5f6:	f7f3 ffed 	bl	80005d4 <__aeabi_dmul>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	3601      	adds	r6, #1
 800c5fe:	1064      	asrs	r4, r4, #1
 800c600:	3708      	adds	r7, #8
 800c602:	e7d0      	b.n	800c5a6 <_strtod_l+0x4de>
 800c604:	d0f0      	beq.n	800c5e8 <_strtod_l+0x520>
 800c606:	4264      	negs	r4, r4
 800c608:	f014 020f 	ands.w	r2, r4, #15
 800c60c:	d00a      	beq.n	800c624 <_strtod_l+0x55c>
 800c60e:	4b12      	ldr	r3, [pc, #72]	@ (800c658 <_strtod_l+0x590>)
 800c610:	4650      	mov	r0, sl
 800c612:	4659      	mov	r1, fp
 800c614:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61c:	f7f4 f904 	bl	8000828 <__aeabi_ddiv>
 800c620:	4682      	mov	sl, r0
 800c622:	468b      	mov	fp, r1
 800c624:	1124      	asrs	r4, r4, #4
 800c626:	d0df      	beq.n	800c5e8 <_strtod_l+0x520>
 800c628:	2c1f      	cmp	r4, #31
 800c62a:	dd1f      	ble.n	800c66c <_strtod_l+0x5a4>
 800c62c:	2400      	movs	r4, #0
 800c62e:	46a0      	mov	r8, r4
 800c630:	46a1      	mov	r9, r4
 800c632:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c634:	2322      	movs	r3, #34	@ 0x22
 800c636:	9a05      	ldr	r2, [sp, #20]
 800c638:	f04f 0a00 	mov.w	sl, #0
 800c63c:	f04f 0b00 	mov.w	fp, #0
 800c640:	6013      	str	r3, [r2, #0]
 800c642:	e76b      	b.n	800c51c <_strtod_l+0x454>
 800c644:	0800e99d 	.word	0x0800e99d
 800c648:	0800ede8 	.word	0x0800ede8
 800c64c:	0800e995 	.word	0x0800e995
 800c650:	0800eac4 	.word	0x0800eac4
 800c654:	0800eac0 	.word	0x0800eac0
 800c658:	0800ed20 	.word	0x0800ed20
 800c65c:	0800ecf8 	.word	0x0800ecf8
 800c660:	7ff00000 	.word	0x7ff00000
 800c664:	7ca00000 	.word	0x7ca00000
 800c668:	7fefffff 	.word	0x7fefffff
 800c66c:	f014 0310 	ands.w	r3, r4, #16
 800c670:	4650      	mov	r0, sl
 800c672:	4659      	mov	r1, fp
 800c674:	4ea9      	ldr	r6, [pc, #676]	@ (800c91c <_strtod_l+0x854>)
 800c676:	bf18      	it	ne
 800c678:	236a      	movne	r3, #106	@ 0x6a
 800c67a:	9308      	str	r3, [sp, #32]
 800c67c:	2300      	movs	r3, #0
 800c67e:	07e7      	lsls	r7, r4, #31
 800c680:	d504      	bpl.n	800c68c <_strtod_l+0x5c4>
 800c682:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c686:	f7f3 ffa5 	bl	80005d4 <__aeabi_dmul>
 800c68a:	2301      	movs	r3, #1
 800c68c:	1064      	asrs	r4, r4, #1
 800c68e:	f106 0608 	add.w	r6, r6, #8
 800c692:	d1f4      	bne.n	800c67e <_strtod_l+0x5b6>
 800c694:	b10b      	cbz	r3, 800c69a <_strtod_l+0x5d2>
 800c696:	4682      	mov	sl, r0
 800c698:	468b      	mov	fp, r1
 800c69a:	9b08      	ldr	r3, [sp, #32]
 800c69c:	b1b3      	cbz	r3, 800c6cc <_strtod_l+0x604>
 800c69e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c6a2:	4659      	mov	r1, fp
 800c6a4:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	dd0f      	ble.n	800c6cc <_strtod_l+0x604>
 800c6ac:	2b1f      	cmp	r3, #31
 800c6ae:	dd56      	ble.n	800c75e <_strtod_l+0x696>
 800c6b0:	2b34      	cmp	r3, #52	@ 0x34
 800c6b2:	f04f 0a00 	mov.w	sl, #0
 800c6b6:	bfdb      	ittet	le
 800c6b8:	f04f 33ff 	movle.w	r3, #4294967295
 800c6bc:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c6c0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c6c4:	4093      	lslle	r3, r2
 800c6c6:	bfd8      	it	le
 800c6c8:	ea03 0b01 	andle.w	fp, r3, r1
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	4650      	mov	r0, sl
 800c6d2:	4659      	mov	r1, fp
 800c6d4:	f7f4 f9e6 	bl	8000aa4 <__aeabi_dcmpeq>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d1a7      	bne.n	800c62c <_strtod_l+0x564>
 800c6dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6de:	464a      	mov	r2, r9
 800c6e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	462b      	mov	r3, r5
 800c6e6:	9805      	ldr	r0, [sp, #20]
 800c6e8:	f7ff f8c2 	bl	800b870 <__s2b>
 800c6ec:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	f43f af09 	beq.w	800c506 <_strtod_l+0x43e>
 800c6f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6f6:	2400      	movs	r4, #0
 800c6f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6fa:	2a00      	cmp	r2, #0
 800c6fc:	eba3 0308 	sub.w	r3, r3, r8
 800c700:	46a0      	mov	r8, r4
 800c702:	bfa8      	it	ge
 800c704:	2300      	movge	r3, #0
 800c706:	9312      	str	r3, [sp, #72]	@ 0x48
 800c708:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c70c:	9316      	str	r3, [sp, #88]	@ 0x58
 800c70e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c710:	9805      	ldr	r0, [sp, #20]
 800c712:	6859      	ldr	r1, [r3, #4]
 800c714:	f7ff f802 	bl	800b71c <_Balloc>
 800c718:	4681      	mov	r9, r0
 800c71a:	2800      	cmp	r0, #0
 800c71c:	f43f aef7 	beq.w	800c50e <_strtod_l+0x446>
 800c720:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c722:	300c      	adds	r0, #12
 800c724:	691a      	ldr	r2, [r3, #16]
 800c726:	f103 010c 	add.w	r1, r3, #12
 800c72a:	3202      	adds	r2, #2
 800c72c:	0092      	lsls	r2, r2, #2
 800c72e:	f001 fa31 	bl	800db94 <memcpy>
 800c732:	aa1c      	add	r2, sp, #112	@ 0x70
 800c734:	a91b      	add	r1, sp, #108	@ 0x6c
 800c736:	9805      	ldr	r0, [sp, #20]
 800c738:	ec4b ab10 	vmov	d0, sl, fp
 800c73c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c740:	f7ff fbd4 	bl	800beec <__d2b>
 800c744:	901a      	str	r0, [sp, #104]	@ 0x68
 800c746:	2800      	cmp	r0, #0
 800c748:	f43f aee1 	beq.w	800c50e <_strtod_l+0x446>
 800c74c:	2101      	movs	r1, #1
 800c74e:	9805      	ldr	r0, [sp, #20]
 800c750:	f7ff f924 	bl	800b99c <__i2b>
 800c754:	4680      	mov	r8, r0
 800c756:	b948      	cbnz	r0, 800c76c <_strtod_l+0x6a4>
 800c758:	f04f 0800 	mov.w	r8, #0
 800c75c:	e6d7      	b.n	800c50e <_strtod_l+0x446>
 800c75e:	f04f 32ff 	mov.w	r2, #4294967295
 800c762:	fa02 f303 	lsl.w	r3, r2, r3
 800c766:	ea03 0a0a 	and.w	sl, r3, sl
 800c76a:	e7af      	b.n	800c6cc <_strtod_l+0x604>
 800c76c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c76e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c770:	2d00      	cmp	r5, #0
 800c772:	bfa9      	itett	ge
 800c774:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c776:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c778:	18ef      	addge	r7, r5, r3
 800c77a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c77c:	bfb8      	it	lt
 800c77e:	1b5e      	sublt	r6, r3, r5
 800c780:	9b08      	ldr	r3, [sp, #32]
 800c782:	bfb8      	it	lt
 800c784:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c786:	1aed      	subs	r5, r5, r3
 800c788:	4b65      	ldr	r3, [pc, #404]	@ (800c920 <_strtod_l+0x858>)
 800c78a:	4415      	add	r5, r2
 800c78c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c790:	3d01      	subs	r5, #1
 800c792:	429d      	cmp	r5, r3
 800c794:	da4f      	bge.n	800c836 <_strtod_l+0x76e>
 800c796:	1b5b      	subs	r3, r3, r5
 800c798:	2101      	movs	r1, #1
 800c79a:	2b1f      	cmp	r3, #31
 800c79c:	eba2 0203 	sub.w	r2, r2, r3
 800c7a0:	dc3d      	bgt.n	800c81e <_strtod_l+0x756>
 800c7a2:	fa01 f303 	lsl.w	r3, r1, r3
 800c7a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7ac:	18bd      	adds	r5, r7, r2
 800c7ae:	9b08      	ldr	r3, [sp, #32]
 800c7b0:	4416      	add	r6, r2
 800c7b2:	42af      	cmp	r7, r5
 800c7b4:	441e      	add	r6, r3
 800c7b6:	463b      	mov	r3, r7
 800c7b8:	bfa8      	it	ge
 800c7ba:	462b      	movge	r3, r5
 800c7bc:	42b3      	cmp	r3, r6
 800c7be:	bfa8      	it	ge
 800c7c0:	4633      	movge	r3, r6
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	bfc2      	ittt	gt
 800c7c6:	1aed      	subgt	r5, r5, r3
 800c7c8:	1af6      	subgt	r6, r6, r3
 800c7ca:	1aff      	subgt	r7, r7, r3
 800c7cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	dd16      	ble.n	800c800 <_strtod_l+0x738>
 800c7d2:	4641      	mov	r1, r8
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	9805      	ldr	r0, [sp, #20]
 800c7d8:	f7ff f99a 	bl	800bb10 <__pow5mult>
 800c7dc:	4680      	mov	r8, r0
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d0ba      	beq.n	800c758 <_strtod_l+0x690>
 800c7e2:	4601      	mov	r1, r0
 800c7e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c7e6:	9805      	ldr	r0, [sp, #20]
 800c7e8:	f7ff f8ee 	bl	800b9c8 <__multiply>
 800c7ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	f43f ae8d 	beq.w	800c50e <_strtod_l+0x446>
 800c7f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c7f6:	9805      	ldr	r0, [sp, #20]
 800c7f8:	f7fe ffd0 	bl	800b79c <_Bfree>
 800c7fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7fe:	931a      	str	r3, [sp, #104]	@ 0x68
 800c800:	2d00      	cmp	r5, #0
 800c802:	dc1d      	bgt.n	800c840 <_strtod_l+0x778>
 800c804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c806:	2b00      	cmp	r3, #0
 800c808:	dd23      	ble.n	800c852 <_strtod_l+0x78a>
 800c80a:	4649      	mov	r1, r9
 800c80c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c80e:	9805      	ldr	r0, [sp, #20]
 800c810:	f7ff f97e 	bl	800bb10 <__pow5mult>
 800c814:	4681      	mov	r9, r0
 800c816:	b9e0      	cbnz	r0, 800c852 <_strtod_l+0x78a>
 800c818:	f04f 0900 	mov.w	r9, #0
 800c81c:	e677      	b.n	800c50e <_strtod_l+0x446>
 800c81e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c822:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c824:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c828:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c82c:	35e2      	adds	r5, #226	@ 0xe2
 800c82e:	fa01 f305 	lsl.w	r3, r1, r5
 800c832:	9310      	str	r3, [sp, #64]	@ 0x40
 800c834:	e7ba      	b.n	800c7ac <_strtod_l+0x6e4>
 800c836:	2300      	movs	r3, #0
 800c838:	9310      	str	r3, [sp, #64]	@ 0x40
 800c83a:	2301      	movs	r3, #1
 800c83c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c83e:	e7b5      	b.n	800c7ac <_strtod_l+0x6e4>
 800c840:	462a      	mov	r2, r5
 800c842:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c844:	9805      	ldr	r0, [sp, #20]
 800c846:	f7ff f9bd 	bl	800bbc4 <__lshift>
 800c84a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c84c:	2800      	cmp	r0, #0
 800c84e:	d1d9      	bne.n	800c804 <_strtod_l+0x73c>
 800c850:	e65d      	b.n	800c50e <_strtod_l+0x446>
 800c852:	2e00      	cmp	r6, #0
 800c854:	dd07      	ble.n	800c866 <_strtod_l+0x79e>
 800c856:	4649      	mov	r1, r9
 800c858:	4632      	mov	r2, r6
 800c85a:	9805      	ldr	r0, [sp, #20]
 800c85c:	f7ff f9b2 	bl	800bbc4 <__lshift>
 800c860:	4681      	mov	r9, r0
 800c862:	2800      	cmp	r0, #0
 800c864:	d0d8      	beq.n	800c818 <_strtod_l+0x750>
 800c866:	2f00      	cmp	r7, #0
 800c868:	dd08      	ble.n	800c87c <_strtod_l+0x7b4>
 800c86a:	4641      	mov	r1, r8
 800c86c:	463a      	mov	r2, r7
 800c86e:	9805      	ldr	r0, [sp, #20]
 800c870:	f7ff f9a8 	bl	800bbc4 <__lshift>
 800c874:	4680      	mov	r8, r0
 800c876:	2800      	cmp	r0, #0
 800c878:	f43f ae49 	beq.w	800c50e <_strtod_l+0x446>
 800c87c:	464a      	mov	r2, r9
 800c87e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c880:	9805      	ldr	r0, [sp, #20]
 800c882:	f7ff fa27 	bl	800bcd4 <__mdiff>
 800c886:	4604      	mov	r4, r0
 800c888:	2800      	cmp	r0, #0
 800c88a:	f43f ae40 	beq.w	800c50e <_strtod_l+0x446>
 800c88e:	68c3      	ldr	r3, [r0, #12]
 800c890:	4641      	mov	r1, r8
 800c892:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c894:	2300      	movs	r3, #0
 800c896:	60c3      	str	r3, [r0, #12]
 800c898:	f7ff fa00 	bl	800bc9c <__mcmp>
 800c89c:	2800      	cmp	r0, #0
 800c89e:	da45      	bge.n	800c92c <_strtod_l+0x864>
 800c8a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8a2:	ea53 030a 	orrs.w	r3, r3, sl
 800c8a6:	d16b      	bne.n	800c980 <_strtod_l+0x8b8>
 800c8a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d167      	bne.n	800c980 <_strtod_l+0x8b8>
 800c8b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c8b4:	0d1b      	lsrs	r3, r3, #20
 800c8b6:	051b      	lsls	r3, r3, #20
 800c8b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c8bc:	d960      	bls.n	800c980 <_strtod_l+0x8b8>
 800c8be:	6963      	ldr	r3, [r4, #20]
 800c8c0:	b913      	cbnz	r3, 800c8c8 <_strtod_l+0x800>
 800c8c2:	6923      	ldr	r3, [r4, #16]
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	dd5b      	ble.n	800c980 <_strtod_l+0x8b8>
 800c8c8:	4621      	mov	r1, r4
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	9805      	ldr	r0, [sp, #20]
 800c8ce:	f7ff f979 	bl	800bbc4 <__lshift>
 800c8d2:	4641      	mov	r1, r8
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	f7ff f9e1 	bl	800bc9c <__mcmp>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	dd50      	ble.n	800c980 <_strtod_l+0x8b8>
 800c8de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c8e2:	9a08      	ldr	r2, [sp, #32]
 800c8e4:	0d1b      	lsrs	r3, r3, #20
 800c8e6:	051b      	lsls	r3, r3, #20
 800c8e8:	2a00      	cmp	r2, #0
 800c8ea:	d06a      	beq.n	800c9c2 <_strtod_l+0x8fa>
 800c8ec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c8f0:	d867      	bhi.n	800c9c2 <_strtod_l+0x8fa>
 800c8f2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c8f6:	f67f ae9d 	bls.w	800c634 <_strtod_l+0x56c>
 800c8fa:	4b0a      	ldr	r3, [pc, #40]	@ (800c924 <_strtod_l+0x85c>)
 800c8fc:	4650      	mov	r0, sl
 800c8fe:	4659      	mov	r1, fp
 800c900:	2200      	movs	r2, #0
 800c902:	f7f3 fe67 	bl	80005d4 <__aeabi_dmul>
 800c906:	4b08      	ldr	r3, [pc, #32]	@ (800c928 <_strtod_l+0x860>)
 800c908:	4682      	mov	sl, r0
 800c90a:	468b      	mov	fp, r1
 800c90c:	400b      	ands	r3, r1
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f47f ae08 	bne.w	800c524 <_strtod_l+0x45c>
 800c914:	2322      	movs	r3, #34	@ 0x22
 800c916:	9a05      	ldr	r2, [sp, #20]
 800c918:	6013      	str	r3, [r2, #0]
 800c91a:	e603      	b.n	800c524 <_strtod_l+0x45c>
 800c91c:	0800ee10 	.word	0x0800ee10
 800c920:	fffffc02 	.word	0xfffffc02
 800c924:	39500000 	.word	0x39500000
 800c928:	7ff00000 	.word	0x7ff00000
 800c92c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c930:	d165      	bne.n	800c9fe <_strtod_l+0x936>
 800c932:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c934:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c938:	b35a      	cbz	r2, 800c992 <_strtod_l+0x8ca>
 800c93a:	4a9f      	ldr	r2, [pc, #636]	@ (800cbb8 <_strtod_l+0xaf0>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d12b      	bne.n	800c998 <_strtod_l+0x8d0>
 800c940:	9b08      	ldr	r3, [sp, #32]
 800c942:	4651      	mov	r1, sl
 800c944:	b303      	cbz	r3, 800c988 <_strtod_l+0x8c0>
 800c946:	465a      	mov	r2, fp
 800c948:	4b9c      	ldr	r3, [pc, #624]	@ (800cbbc <_strtod_l+0xaf4>)
 800c94a:	4013      	ands	r3, r2
 800c94c:	f04f 32ff 	mov.w	r2, #4294967295
 800c950:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c954:	d81b      	bhi.n	800c98e <_strtod_l+0x8c6>
 800c956:	0d1b      	lsrs	r3, r3, #20
 800c958:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c95c:	fa02 f303 	lsl.w	r3, r2, r3
 800c960:	4299      	cmp	r1, r3
 800c962:	d119      	bne.n	800c998 <_strtod_l+0x8d0>
 800c964:	4b96      	ldr	r3, [pc, #600]	@ (800cbc0 <_strtod_l+0xaf8>)
 800c966:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c968:	429a      	cmp	r2, r3
 800c96a:	d102      	bne.n	800c972 <_strtod_l+0x8aa>
 800c96c:	3101      	adds	r1, #1
 800c96e:	f43f adce 	beq.w	800c50e <_strtod_l+0x446>
 800c972:	4b92      	ldr	r3, [pc, #584]	@ (800cbbc <_strtod_l+0xaf4>)
 800c974:	f04f 0a00 	mov.w	sl, #0
 800c978:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c97a:	401a      	ands	r2, r3
 800c97c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c980:	9b08      	ldr	r3, [sp, #32]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1b9      	bne.n	800c8fa <_strtod_l+0x832>
 800c986:	e5cd      	b.n	800c524 <_strtod_l+0x45c>
 800c988:	f04f 33ff 	mov.w	r3, #4294967295
 800c98c:	e7e8      	b.n	800c960 <_strtod_l+0x898>
 800c98e:	4613      	mov	r3, r2
 800c990:	e7e6      	b.n	800c960 <_strtod_l+0x898>
 800c992:	ea53 030a 	orrs.w	r3, r3, sl
 800c996:	d0a2      	beq.n	800c8de <_strtod_l+0x816>
 800c998:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c99a:	b1db      	cbz	r3, 800c9d4 <_strtod_l+0x90c>
 800c99c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c99e:	4213      	tst	r3, r2
 800c9a0:	d0ee      	beq.n	800c980 <_strtod_l+0x8b8>
 800c9a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9a4:	4650      	mov	r0, sl
 800c9a6:	9a08      	ldr	r2, [sp, #32]
 800c9a8:	4659      	mov	r1, fp
 800c9aa:	b1bb      	cbz	r3, 800c9dc <_strtod_l+0x914>
 800c9ac:	f7ff fb6c 	bl	800c088 <sulp>
 800c9b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9b4:	ec53 2b10 	vmov	r2, r3, d0
 800c9b8:	f7f3 fc56 	bl	8000268 <__adddf3>
 800c9bc:	4682      	mov	sl, r0
 800c9be:	468b      	mov	fp, r1
 800c9c0:	e7de      	b.n	800c980 <_strtod_l+0x8b8>
 800c9c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c9c6:	f04f 3aff 	mov.w	sl, #4294967295
 800c9ca:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c9ce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c9d2:	e7d5      	b.n	800c980 <_strtod_l+0x8b8>
 800c9d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c9d6:	ea13 0f0a 	tst.w	r3, sl
 800c9da:	e7e1      	b.n	800c9a0 <_strtod_l+0x8d8>
 800c9dc:	f7ff fb54 	bl	800c088 <sulp>
 800c9e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9e4:	ec53 2b10 	vmov	r2, r3, d0
 800c9e8:	f7f3 fc3c 	bl	8000264 <__aeabi_dsub>
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	4682      	mov	sl, r0
 800c9f2:	468b      	mov	fp, r1
 800c9f4:	f7f4 f856 	bl	8000aa4 <__aeabi_dcmpeq>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	d0c1      	beq.n	800c980 <_strtod_l+0x8b8>
 800c9fc:	e61a      	b.n	800c634 <_strtod_l+0x56c>
 800c9fe:	4641      	mov	r1, r8
 800ca00:	4620      	mov	r0, r4
 800ca02:	f7ff facb 	bl	800bf9c <__ratio>
 800ca06:	2200      	movs	r2, #0
 800ca08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ca0c:	ec57 6b10 	vmov	r6, r7, d0
 800ca10:	4630      	mov	r0, r6
 800ca12:	4639      	mov	r1, r7
 800ca14:	f7f4 f85a 	bl	8000acc <__aeabi_dcmple>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	d06f      	beq.n	800cafc <_strtod_l+0xa34>
 800ca1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d17a      	bne.n	800cb18 <_strtod_l+0xa50>
 800ca22:	f1ba 0f00 	cmp.w	sl, #0
 800ca26:	d158      	bne.n	800cada <_strtod_l+0xa12>
 800ca28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d15a      	bne.n	800cae8 <_strtod_l+0xa20>
 800ca32:	2200      	movs	r2, #0
 800ca34:	4b63      	ldr	r3, [pc, #396]	@ (800cbc4 <_strtod_l+0xafc>)
 800ca36:	4630      	mov	r0, r6
 800ca38:	4639      	mov	r1, r7
 800ca3a:	f7f4 f83d 	bl	8000ab8 <__aeabi_dcmplt>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d159      	bne.n	800caf6 <_strtod_l+0xa2e>
 800ca42:	4630      	mov	r0, r6
 800ca44:	4639      	mov	r1, r7
 800ca46:	2200      	movs	r2, #0
 800ca48:	4b5f      	ldr	r3, [pc, #380]	@ (800cbc8 <_strtod_l+0xb00>)
 800ca4a:	f7f3 fdc3 	bl	80005d4 <__aeabi_dmul>
 800ca4e:	4606      	mov	r6, r0
 800ca50:	460f      	mov	r7, r1
 800ca52:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ca56:	9606      	str	r6, [sp, #24]
 800ca58:	9307      	str	r3, [sp, #28]
 800ca5a:	4d58      	ldr	r5, [pc, #352]	@ (800cbbc <_strtod_l+0xaf4>)
 800ca5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ca64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca66:	401d      	ands	r5, r3
 800ca68:	4b58      	ldr	r3, [pc, #352]	@ (800cbcc <_strtod_l+0xb04>)
 800ca6a:	429d      	cmp	r5, r3
 800ca6c:	f040 80b2 	bne.w	800cbd4 <_strtod_l+0xb0c>
 800ca70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca72:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ca76:	ec4b ab10 	vmov	d0, sl, fp
 800ca7a:	f7ff f9c3 	bl	800be04 <__ulp>
 800ca7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca82:	ec51 0b10 	vmov	r0, r1, d0
 800ca86:	f7f3 fda5 	bl	80005d4 <__aeabi_dmul>
 800ca8a:	4652      	mov	r2, sl
 800ca8c:	465b      	mov	r3, fp
 800ca8e:	f7f3 fbeb 	bl	8000268 <__adddf3>
 800ca92:	460b      	mov	r3, r1
 800ca94:	4949      	ldr	r1, [pc, #292]	@ (800cbbc <_strtod_l+0xaf4>)
 800ca96:	4682      	mov	sl, r0
 800ca98:	4a4d      	ldr	r2, [pc, #308]	@ (800cbd0 <_strtod_l+0xb08>)
 800ca9a:	4019      	ands	r1, r3
 800ca9c:	4291      	cmp	r1, r2
 800ca9e:	d942      	bls.n	800cb26 <_strtod_l+0xa5e>
 800caa0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800caa2:	4b47      	ldr	r3, [pc, #284]	@ (800cbc0 <_strtod_l+0xaf8>)
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d103      	bne.n	800cab0 <_strtod_l+0x9e8>
 800caa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800caaa:	3301      	adds	r3, #1
 800caac:	f43f ad2f 	beq.w	800c50e <_strtod_l+0x446>
 800cab0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cbc0 <_strtod_l+0xaf8>
 800cab4:	f04f 3aff 	mov.w	sl, #4294967295
 800cab8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800caba:	9805      	ldr	r0, [sp, #20]
 800cabc:	f7fe fe6e 	bl	800b79c <_Bfree>
 800cac0:	4649      	mov	r1, r9
 800cac2:	9805      	ldr	r0, [sp, #20]
 800cac4:	f7fe fe6a 	bl	800b79c <_Bfree>
 800cac8:	4641      	mov	r1, r8
 800caca:	9805      	ldr	r0, [sp, #20]
 800cacc:	f7fe fe66 	bl	800b79c <_Bfree>
 800cad0:	4621      	mov	r1, r4
 800cad2:	9805      	ldr	r0, [sp, #20]
 800cad4:	f7fe fe62 	bl	800b79c <_Bfree>
 800cad8:	e619      	b.n	800c70e <_strtod_l+0x646>
 800cada:	f1ba 0f01 	cmp.w	sl, #1
 800cade:	d103      	bne.n	800cae8 <_strtod_l+0xa20>
 800cae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f43f ada6 	beq.w	800c634 <_strtod_l+0x56c>
 800cae8:	2600      	movs	r6, #0
 800caea:	4f36      	ldr	r7, [pc, #216]	@ (800cbc4 <_strtod_l+0xafc>)
 800caec:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800cb98 <_strtod_l+0xad0>
 800caf0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800caf4:	e7b1      	b.n	800ca5a <_strtod_l+0x992>
 800caf6:	2600      	movs	r6, #0
 800caf8:	4f33      	ldr	r7, [pc, #204]	@ (800cbc8 <_strtod_l+0xb00>)
 800cafa:	e7aa      	b.n	800ca52 <_strtod_l+0x98a>
 800cafc:	4b32      	ldr	r3, [pc, #200]	@ (800cbc8 <_strtod_l+0xb00>)
 800cafe:	4630      	mov	r0, r6
 800cb00:	4639      	mov	r1, r7
 800cb02:	2200      	movs	r2, #0
 800cb04:	f7f3 fd66 	bl	80005d4 <__aeabi_dmul>
 800cb08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb0a:	4606      	mov	r6, r0
 800cb0c:	460f      	mov	r7, r1
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d09f      	beq.n	800ca52 <_strtod_l+0x98a>
 800cb12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cb16:	e7a0      	b.n	800ca5a <_strtod_l+0x992>
 800cb18:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cba0 <_strtod_l+0xad8>
 800cb1c:	ec57 6b17 	vmov	r6, r7, d7
 800cb20:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb24:	e799      	b.n	800ca5a <_strtod_l+0x992>
 800cb26:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cb2a:	9b08      	ldr	r3, [sp, #32]
 800cb2c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1c1      	bne.n	800cab8 <_strtod_l+0x9f0>
 800cb34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb38:	0d1b      	lsrs	r3, r3, #20
 800cb3a:	051b      	lsls	r3, r3, #20
 800cb3c:	429d      	cmp	r5, r3
 800cb3e:	d1bb      	bne.n	800cab8 <_strtod_l+0x9f0>
 800cb40:	4630      	mov	r0, r6
 800cb42:	4639      	mov	r1, r7
 800cb44:	f7f4 f8f6 	bl	8000d34 <__aeabi_d2lz>
 800cb48:	f7f3 fd16 	bl	8000578 <__aeabi_l2d>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	460b      	mov	r3, r1
 800cb50:	4630      	mov	r0, r6
 800cb52:	4639      	mov	r1, r7
 800cb54:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cb58:	f7f3 fb84 	bl	8000264 <__aeabi_dsub>
 800cb5c:	460b      	mov	r3, r1
 800cb5e:	4602      	mov	r2, r0
 800cb60:	ea46 060a 	orr.w	r6, r6, sl
 800cb64:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cb68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb6a:	431e      	orrs	r6, r3
 800cb6c:	d06f      	beq.n	800cc4e <_strtod_l+0xb86>
 800cb6e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cba8 <_strtod_l+0xae0>)
 800cb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb74:	f7f3 ffa0 	bl	8000ab8 <__aeabi_dcmplt>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	f47f acd3 	bne.w	800c524 <_strtod_l+0x45c>
 800cb7e:	a30c      	add	r3, pc, #48	@ (adr r3, 800cbb0 <_strtod_l+0xae8>)
 800cb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb88:	f7f3 ffb4 	bl	8000af4 <__aeabi_dcmpgt>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	d093      	beq.n	800cab8 <_strtod_l+0x9f0>
 800cb90:	e4c8      	b.n	800c524 <_strtod_l+0x45c>
 800cb92:	bf00      	nop
 800cb94:	f3af 8000 	nop.w
 800cb98:	00000000 	.word	0x00000000
 800cb9c:	bff00000 	.word	0xbff00000
 800cba0:	00000000 	.word	0x00000000
 800cba4:	3ff00000 	.word	0x3ff00000
 800cba8:	94a03595 	.word	0x94a03595
 800cbac:	3fdfffff 	.word	0x3fdfffff
 800cbb0:	35afe535 	.word	0x35afe535
 800cbb4:	3fe00000 	.word	0x3fe00000
 800cbb8:	000fffff 	.word	0x000fffff
 800cbbc:	7ff00000 	.word	0x7ff00000
 800cbc0:	7fefffff 	.word	0x7fefffff
 800cbc4:	3ff00000 	.word	0x3ff00000
 800cbc8:	3fe00000 	.word	0x3fe00000
 800cbcc:	7fe00000 	.word	0x7fe00000
 800cbd0:	7c9fffff 	.word	0x7c9fffff
 800cbd4:	9b08      	ldr	r3, [sp, #32]
 800cbd6:	b323      	cbz	r3, 800cc22 <_strtod_l+0xb5a>
 800cbd8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cbdc:	d821      	bhi.n	800cc22 <_strtod_l+0xb5a>
 800cbde:	4630      	mov	r0, r6
 800cbe0:	4639      	mov	r1, r7
 800cbe2:	a327      	add	r3, pc, #156	@ (adr r3, 800cc80 <_strtod_l+0xbb8>)
 800cbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe8:	f7f3 ff70 	bl	8000acc <__aeabi_dcmple>
 800cbec:	b1a0      	cbz	r0, 800cc18 <_strtod_l+0xb50>
 800cbee:	4639      	mov	r1, r7
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	f7f3 ffc7 	bl	8000b84 <__aeabi_d2uiz>
 800cbf6:	2801      	cmp	r0, #1
 800cbf8:	bf38      	it	cc
 800cbfa:	2001      	movcc	r0, #1
 800cbfc:	f7f3 fc70 	bl	80004e0 <__aeabi_ui2d>
 800cc00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc02:	4606      	mov	r6, r0
 800cc04:	460f      	mov	r7, r1
 800cc06:	b9fb      	cbnz	r3, 800cc48 <_strtod_l+0xb80>
 800cc08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc0c:	9014      	str	r0, [sp, #80]	@ 0x50
 800cc0e:	9315      	str	r3, [sp, #84]	@ 0x54
 800cc10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cc14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cc18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cc1a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cc1e:	1b5b      	subs	r3, r3, r5
 800cc20:	9311      	str	r3, [sp, #68]	@ 0x44
 800cc22:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cc26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cc2a:	f7ff f8eb 	bl	800be04 <__ulp>
 800cc2e:	4650      	mov	r0, sl
 800cc30:	4659      	mov	r1, fp
 800cc32:	ec53 2b10 	vmov	r2, r3, d0
 800cc36:	f7f3 fccd 	bl	80005d4 <__aeabi_dmul>
 800cc3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cc3e:	f7f3 fb13 	bl	8000268 <__adddf3>
 800cc42:	4682      	mov	sl, r0
 800cc44:	468b      	mov	fp, r1
 800cc46:	e770      	b.n	800cb2a <_strtod_l+0xa62>
 800cc48:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cc4c:	e7e0      	b.n	800cc10 <_strtod_l+0xb48>
 800cc4e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cc88 <_strtod_l+0xbc0>)
 800cc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc54:	f7f3 ff30 	bl	8000ab8 <__aeabi_dcmplt>
 800cc58:	e798      	b.n	800cb8c <_strtod_l+0xac4>
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	930e      	str	r3, [sp, #56]	@ 0x38
 800cc5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc60:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cc62:	6013      	str	r3, [r2, #0]
 800cc64:	f7ff ba6d 	b.w	800c142 <_strtod_l+0x7a>
 800cc68:	2a65      	cmp	r2, #101	@ 0x65
 800cc6a:	f43f ab67 	beq.w	800c33c <_strtod_l+0x274>
 800cc6e:	2a45      	cmp	r2, #69	@ 0x45
 800cc70:	f43f ab64 	beq.w	800c33c <_strtod_l+0x274>
 800cc74:	2301      	movs	r3, #1
 800cc76:	f7ff bba0 	b.w	800c3ba <_strtod_l+0x2f2>
 800cc7a:	bf00      	nop
 800cc7c:	f3af 8000 	nop.w
 800cc80:	ffc00000 	.word	0xffc00000
 800cc84:	41dfffff 	.word	0x41dfffff
 800cc88:	94a03595 	.word	0x94a03595
 800cc8c:	3fcfffff 	.word	0x3fcfffff

0800cc90 <_strtod_r>:
 800cc90:	4b01      	ldr	r3, [pc, #4]	@ (800cc98 <_strtod_r+0x8>)
 800cc92:	f7ff ba19 	b.w	800c0c8 <_strtod_l>
 800cc96:	bf00      	nop
 800cc98:	200000e8 	.word	0x200000e8

0800cc9c <_strtol_l.isra.0>:
 800cc9c:	2b24      	cmp	r3, #36	@ 0x24
 800cc9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cca2:	4686      	mov	lr, r0
 800cca4:	4690      	mov	r8, r2
 800cca6:	d801      	bhi.n	800ccac <_strtol_l.isra.0+0x10>
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d106      	bne.n	800ccba <_strtol_l.isra.0+0x1e>
 800ccac:	f7fd fd16 	bl	800a6dc <__errno>
 800ccb0:	2316      	movs	r3, #22
 800ccb2:	6003      	str	r3, [r0, #0]
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccba:	460d      	mov	r5, r1
 800ccbc:	4833      	ldr	r0, [pc, #204]	@ (800cd8c <_strtol_l.isra.0+0xf0>)
 800ccbe:	462a      	mov	r2, r5
 800ccc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccc4:	5d06      	ldrb	r6, [r0, r4]
 800ccc6:	f016 0608 	ands.w	r6, r6, #8
 800ccca:	d1f8      	bne.n	800ccbe <_strtol_l.isra.0+0x22>
 800cccc:	2c2d      	cmp	r4, #45	@ 0x2d
 800ccce:	d110      	bne.n	800ccf2 <_strtol_l.isra.0+0x56>
 800ccd0:	782c      	ldrb	r4, [r5, #0]
 800ccd2:	2601      	movs	r6, #1
 800ccd4:	1c95      	adds	r5, r2, #2
 800ccd6:	f033 0210 	bics.w	r2, r3, #16
 800ccda:	d115      	bne.n	800cd08 <_strtol_l.isra.0+0x6c>
 800ccdc:	2c30      	cmp	r4, #48	@ 0x30
 800ccde:	d10d      	bne.n	800ccfc <_strtol_l.isra.0+0x60>
 800cce0:	782a      	ldrb	r2, [r5, #0]
 800cce2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cce6:	2a58      	cmp	r2, #88	@ 0x58
 800cce8:	d108      	bne.n	800ccfc <_strtol_l.isra.0+0x60>
 800ccea:	786c      	ldrb	r4, [r5, #1]
 800ccec:	3502      	adds	r5, #2
 800ccee:	2310      	movs	r3, #16
 800ccf0:	e00a      	b.n	800cd08 <_strtol_l.isra.0+0x6c>
 800ccf2:	2c2b      	cmp	r4, #43	@ 0x2b
 800ccf4:	bf04      	itt	eq
 800ccf6:	782c      	ldrbeq	r4, [r5, #0]
 800ccf8:	1c95      	addeq	r5, r2, #2
 800ccfa:	e7ec      	b.n	800ccd6 <_strtol_l.isra.0+0x3a>
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d1f6      	bne.n	800ccee <_strtol_l.isra.0+0x52>
 800cd00:	2c30      	cmp	r4, #48	@ 0x30
 800cd02:	bf14      	ite	ne
 800cd04:	230a      	movne	r3, #10
 800cd06:	2308      	moveq	r3, #8
 800cd08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cd12:	4610      	mov	r0, r2
 800cd14:	fbbc f9f3 	udiv	r9, ip, r3
 800cd18:	fb03 ca19 	mls	sl, r3, r9, ip
 800cd1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cd20:	2f09      	cmp	r7, #9
 800cd22:	d80f      	bhi.n	800cd44 <_strtol_l.isra.0+0xa8>
 800cd24:	463c      	mov	r4, r7
 800cd26:	42a3      	cmp	r3, r4
 800cd28:	dd1b      	ble.n	800cd62 <_strtol_l.isra.0+0xc6>
 800cd2a:	1c57      	adds	r7, r2, #1
 800cd2c:	d007      	beq.n	800cd3e <_strtol_l.isra.0+0xa2>
 800cd2e:	4581      	cmp	r9, r0
 800cd30:	d314      	bcc.n	800cd5c <_strtol_l.isra.0+0xc0>
 800cd32:	d101      	bne.n	800cd38 <_strtol_l.isra.0+0x9c>
 800cd34:	45a2      	cmp	sl, r4
 800cd36:	db11      	blt.n	800cd5c <_strtol_l.isra.0+0xc0>
 800cd38:	fb00 4003 	mla	r0, r0, r3, r4
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd42:	e7eb      	b.n	800cd1c <_strtol_l.isra.0+0x80>
 800cd44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cd48:	2f19      	cmp	r7, #25
 800cd4a:	d801      	bhi.n	800cd50 <_strtol_l.isra.0+0xb4>
 800cd4c:	3c37      	subs	r4, #55	@ 0x37
 800cd4e:	e7ea      	b.n	800cd26 <_strtol_l.isra.0+0x8a>
 800cd50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cd54:	2f19      	cmp	r7, #25
 800cd56:	d804      	bhi.n	800cd62 <_strtol_l.isra.0+0xc6>
 800cd58:	3c57      	subs	r4, #87	@ 0x57
 800cd5a:	e7e4      	b.n	800cd26 <_strtol_l.isra.0+0x8a>
 800cd5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd60:	e7ed      	b.n	800cd3e <_strtol_l.isra.0+0xa2>
 800cd62:	1c53      	adds	r3, r2, #1
 800cd64:	d108      	bne.n	800cd78 <_strtol_l.isra.0+0xdc>
 800cd66:	2322      	movs	r3, #34	@ 0x22
 800cd68:	4660      	mov	r0, ip
 800cd6a:	f8ce 3000 	str.w	r3, [lr]
 800cd6e:	f1b8 0f00 	cmp.w	r8, #0
 800cd72:	d0a0      	beq.n	800ccb6 <_strtol_l.isra.0+0x1a>
 800cd74:	1e69      	subs	r1, r5, #1
 800cd76:	e006      	b.n	800cd86 <_strtol_l.isra.0+0xea>
 800cd78:	b106      	cbz	r6, 800cd7c <_strtol_l.isra.0+0xe0>
 800cd7a:	4240      	negs	r0, r0
 800cd7c:	f1b8 0f00 	cmp.w	r8, #0
 800cd80:	d099      	beq.n	800ccb6 <_strtol_l.isra.0+0x1a>
 800cd82:	2a00      	cmp	r2, #0
 800cd84:	d1f6      	bne.n	800cd74 <_strtol_l.isra.0+0xd8>
 800cd86:	f8c8 1000 	str.w	r1, [r8]
 800cd8a:	e794      	b.n	800ccb6 <_strtol_l.isra.0+0x1a>
 800cd8c:	0800ee39 	.word	0x0800ee39

0800cd90 <_strtol_r>:
 800cd90:	f7ff bf84 	b.w	800cc9c <_strtol_l.isra.0>

0800cd94 <_strtoul_l.isra.0>:
 800cd94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd98:	4686      	mov	lr, r0
 800cd9a:	460d      	mov	r5, r1
 800cd9c:	4e33      	ldr	r6, [pc, #204]	@ (800ce6c <_strtoul_l.isra.0+0xd8>)
 800cd9e:	4628      	mov	r0, r5
 800cda0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cda4:	5d37      	ldrb	r7, [r6, r4]
 800cda6:	f017 0708 	ands.w	r7, r7, #8
 800cdaa:	d1f8      	bne.n	800cd9e <_strtoul_l.isra.0+0xa>
 800cdac:	2c2d      	cmp	r4, #45	@ 0x2d
 800cdae:	d110      	bne.n	800cdd2 <_strtoul_l.isra.0+0x3e>
 800cdb0:	782c      	ldrb	r4, [r5, #0]
 800cdb2:	2701      	movs	r7, #1
 800cdb4:	1c85      	adds	r5, r0, #2
 800cdb6:	f033 0010 	bics.w	r0, r3, #16
 800cdba:	d115      	bne.n	800cde8 <_strtoul_l.isra.0+0x54>
 800cdbc:	2c30      	cmp	r4, #48	@ 0x30
 800cdbe:	d10d      	bne.n	800cddc <_strtoul_l.isra.0+0x48>
 800cdc0:	7828      	ldrb	r0, [r5, #0]
 800cdc2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800cdc6:	2858      	cmp	r0, #88	@ 0x58
 800cdc8:	d108      	bne.n	800cddc <_strtoul_l.isra.0+0x48>
 800cdca:	786c      	ldrb	r4, [r5, #1]
 800cdcc:	3502      	adds	r5, #2
 800cdce:	2310      	movs	r3, #16
 800cdd0:	e00a      	b.n	800cde8 <_strtoul_l.isra.0+0x54>
 800cdd2:	2c2b      	cmp	r4, #43	@ 0x2b
 800cdd4:	bf04      	itt	eq
 800cdd6:	782c      	ldrbeq	r4, [r5, #0]
 800cdd8:	1c85      	addeq	r5, r0, #2
 800cdda:	e7ec      	b.n	800cdb6 <_strtoul_l.isra.0+0x22>
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d1f6      	bne.n	800cdce <_strtoul_l.isra.0+0x3a>
 800cde0:	2c30      	cmp	r4, #48	@ 0x30
 800cde2:	bf14      	ite	ne
 800cde4:	230a      	movne	r3, #10
 800cde6:	2308      	moveq	r3, #8
 800cde8:	f04f 38ff 	mov.w	r8, #4294967295
 800cdec:	2600      	movs	r6, #0
 800cdee:	fbb8 f8f3 	udiv	r8, r8, r3
 800cdf2:	fb03 f908 	mul.w	r9, r3, r8
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	ea6f 0909 	mvn.w	r9, r9
 800cdfc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ce00:	f1bc 0f09 	cmp.w	ip, #9
 800ce04:	d810      	bhi.n	800ce28 <_strtoul_l.isra.0+0x94>
 800ce06:	4664      	mov	r4, ip
 800ce08:	42a3      	cmp	r3, r4
 800ce0a:	dd1e      	ble.n	800ce4a <_strtoul_l.isra.0+0xb6>
 800ce0c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ce10:	d007      	beq.n	800ce22 <_strtoul_l.isra.0+0x8e>
 800ce12:	4580      	cmp	r8, r0
 800ce14:	d316      	bcc.n	800ce44 <_strtoul_l.isra.0+0xb0>
 800ce16:	d101      	bne.n	800ce1c <_strtoul_l.isra.0+0x88>
 800ce18:	45a1      	cmp	r9, r4
 800ce1a:	db13      	blt.n	800ce44 <_strtoul_l.isra.0+0xb0>
 800ce1c:	fb00 4003 	mla	r0, r0, r3, r4
 800ce20:	2601      	movs	r6, #1
 800ce22:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce26:	e7e9      	b.n	800cdfc <_strtoul_l.isra.0+0x68>
 800ce28:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ce2c:	f1bc 0f19 	cmp.w	ip, #25
 800ce30:	d801      	bhi.n	800ce36 <_strtoul_l.isra.0+0xa2>
 800ce32:	3c37      	subs	r4, #55	@ 0x37
 800ce34:	e7e8      	b.n	800ce08 <_strtoul_l.isra.0+0x74>
 800ce36:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ce3a:	f1bc 0f19 	cmp.w	ip, #25
 800ce3e:	d804      	bhi.n	800ce4a <_strtoul_l.isra.0+0xb6>
 800ce40:	3c57      	subs	r4, #87	@ 0x57
 800ce42:	e7e1      	b.n	800ce08 <_strtoul_l.isra.0+0x74>
 800ce44:	f04f 36ff 	mov.w	r6, #4294967295
 800ce48:	e7eb      	b.n	800ce22 <_strtoul_l.isra.0+0x8e>
 800ce4a:	1c73      	adds	r3, r6, #1
 800ce4c:	d106      	bne.n	800ce5c <_strtoul_l.isra.0+0xc8>
 800ce4e:	2322      	movs	r3, #34	@ 0x22
 800ce50:	4630      	mov	r0, r6
 800ce52:	f8ce 3000 	str.w	r3, [lr]
 800ce56:	b932      	cbnz	r2, 800ce66 <_strtoul_l.isra.0+0xd2>
 800ce58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce5c:	b107      	cbz	r7, 800ce60 <_strtoul_l.isra.0+0xcc>
 800ce5e:	4240      	negs	r0, r0
 800ce60:	2a00      	cmp	r2, #0
 800ce62:	d0f9      	beq.n	800ce58 <_strtoul_l.isra.0+0xc4>
 800ce64:	b106      	cbz	r6, 800ce68 <_strtoul_l.isra.0+0xd4>
 800ce66:	1e69      	subs	r1, r5, #1
 800ce68:	6011      	str	r1, [r2, #0]
 800ce6a:	e7f5      	b.n	800ce58 <_strtoul_l.isra.0+0xc4>
 800ce6c:	0800ee39 	.word	0x0800ee39

0800ce70 <_strtoul_r>:
 800ce70:	f7ff bf90 	b.w	800cd94 <_strtoul_l.isra.0>

0800ce74 <strtoul>:
 800ce74:	4613      	mov	r3, r2
 800ce76:	460a      	mov	r2, r1
 800ce78:	4601      	mov	r1, r0
 800ce7a:	4802      	ldr	r0, [pc, #8]	@ (800ce84 <strtoul+0x10>)
 800ce7c:	6800      	ldr	r0, [r0, #0]
 800ce7e:	f7ff bf89 	b.w	800cd94 <_strtoul_l.isra.0>
 800ce82:	bf00      	nop
 800ce84:	20000040 	.word	0x20000040

0800ce88 <__ssputs_r>:
 800ce88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce8c:	461f      	mov	r7, r3
 800ce8e:	688e      	ldr	r6, [r1, #8]
 800ce90:	4682      	mov	sl, r0
 800ce92:	460c      	mov	r4, r1
 800ce94:	42be      	cmp	r6, r7
 800ce96:	4690      	mov	r8, r2
 800ce98:	680b      	ldr	r3, [r1, #0]
 800ce9a:	d82d      	bhi.n	800cef8 <__ssputs_r+0x70>
 800ce9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cea0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cea4:	d026      	beq.n	800cef4 <__ssputs_r+0x6c>
 800cea6:	6965      	ldr	r5, [r4, #20]
 800cea8:	6909      	ldr	r1, [r1, #16]
 800ceaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ceae:	eba3 0901 	sub.w	r9, r3, r1
 800ceb2:	1c7b      	adds	r3, r7, #1
 800ceb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ceb8:	444b      	add	r3, r9
 800ceba:	106d      	asrs	r5, r5, #1
 800cebc:	429d      	cmp	r5, r3
 800cebe:	bf38      	it	cc
 800cec0:	461d      	movcc	r5, r3
 800cec2:	0553      	lsls	r3, r2, #21
 800cec4:	d527      	bpl.n	800cf16 <__ssputs_r+0x8e>
 800cec6:	4629      	mov	r1, r5
 800cec8:	f7fe fb9c 	bl	800b604 <_malloc_r>
 800cecc:	4606      	mov	r6, r0
 800cece:	b360      	cbz	r0, 800cf2a <__ssputs_r+0xa2>
 800ced0:	464a      	mov	r2, r9
 800ced2:	6921      	ldr	r1, [r4, #16]
 800ced4:	f000 fe5e 	bl	800db94 <memcpy>
 800ced8:	89a3      	ldrh	r3, [r4, #12]
 800ceda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cee2:	81a3      	strh	r3, [r4, #12]
 800cee4:	6126      	str	r6, [r4, #16]
 800cee6:	444e      	add	r6, r9
 800cee8:	6165      	str	r5, [r4, #20]
 800ceea:	eba5 0509 	sub.w	r5, r5, r9
 800ceee:	6026      	str	r6, [r4, #0]
 800cef0:	463e      	mov	r6, r7
 800cef2:	60a5      	str	r5, [r4, #8]
 800cef4:	42be      	cmp	r6, r7
 800cef6:	d900      	bls.n	800cefa <__ssputs_r+0x72>
 800cef8:	463e      	mov	r6, r7
 800cefa:	4632      	mov	r2, r6
 800cefc:	4641      	mov	r1, r8
 800cefe:	6820      	ldr	r0, [r4, #0]
 800cf00:	f000 fd64 	bl	800d9cc <memmove>
 800cf04:	68a3      	ldr	r3, [r4, #8]
 800cf06:	2000      	movs	r0, #0
 800cf08:	1b9b      	subs	r3, r3, r6
 800cf0a:	60a3      	str	r3, [r4, #8]
 800cf0c:	6823      	ldr	r3, [r4, #0]
 800cf0e:	4433      	add	r3, r6
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf16:	462a      	mov	r2, r5
 800cf18:	f001 f9c1 	bl	800e29e <_realloc_r>
 800cf1c:	4606      	mov	r6, r0
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d1e0      	bne.n	800cee4 <__ssputs_r+0x5c>
 800cf22:	6921      	ldr	r1, [r4, #16]
 800cf24:	4650      	mov	r0, sl
 800cf26:	f7fe faad 	bl	800b484 <_free_r>
 800cf2a:	230c      	movs	r3, #12
 800cf2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf30:	f8ca 3000 	str.w	r3, [sl]
 800cf34:	89a3      	ldrh	r3, [r4, #12]
 800cf36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf3a:	81a3      	strh	r3, [r4, #12]
 800cf3c:	e7e9      	b.n	800cf12 <__ssputs_r+0x8a>
	...

0800cf40 <_svfiprintf_r>:
 800cf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf44:	4698      	mov	r8, r3
 800cf46:	898b      	ldrh	r3, [r1, #12]
 800cf48:	b09d      	sub	sp, #116	@ 0x74
 800cf4a:	4607      	mov	r7, r0
 800cf4c:	061b      	lsls	r3, r3, #24
 800cf4e:	460d      	mov	r5, r1
 800cf50:	4614      	mov	r4, r2
 800cf52:	d510      	bpl.n	800cf76 <_svfiprintf_r+0x36>
 800cf54:	690b      	ldr	r3, [r1, #16]
 800cf56:	b973      	cbnz	r3, 800cf76 <_svfiprintf_r+0x36>
 800cf58:	2140      	movs	r1, #64	@ 0x40
 800cf5a:	f7fe fb53 	bl	800b604 <_malloc_r>
 800cf5e:	6028      	str	r0, [r5, #0]
 800cf60:	6128      	str	r0, [r5, #16]
 800cf62:	b930      	cbnz	r0, 800cf72 <_svfiprintf_r+0x32>
 800cf64:	230c      	movs	r3, #12
 800cf66:	603b      	str	r3, [r7, #0]
 800cf68:	f04f 30ff 	mov.w	r0, #4294967295
 800cf6c:	b01d      	add	sp, #116	@ 0x74
 800cf6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf72:	2340      	movs	r3, #64	@ 0x40
 800cf74:	616b      	str	r3, [r5, #20]
 800cf76:	2300      	movs	r3, #0
 800cf78:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf7c:	f04f 0901 	mov.w	r9, #1
 800cf80:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800d124 <_svfiprintf_r+0x1e4>
 800cf84:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf86:	2320      	movs	r3, #32
 800cf88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf8c:	2330      	movs	r3, #48	@ 0x30
 800cf8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf92:	4623      	mov	r3, r4
 800cf94:	469a      	mov	sl, r3
 800cf96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf9a:	b10a      	cbz	r2, 800cfa0 <_svfiprintf_r+0x60>
 800cf9c:	2a25      	cmp	r2, #37	@ 0x25
 800cf9e:	d1f9      	bne.n	800cf94 <_svfiprintf_r+0x54>
 800cfa0:	ebba 0b04 	subs.w	fp, sl, r4
 800cfa4:	d00b      	beq.n	800cfbe <_svfiprintf_r+0x7e>
 800cfa6:	465b      	mov	r3, fp
 800cfa8:	4622      	mov	r2, r4
 800cfaa:	4629      	mov	r1, r5
 800cfac:	4638      	mov	r0, r7
 800cfae:	f7ff ff6b 	bl	800ce88 <__ssputs_r>
 800cfb2:	3001      	adds	r0, #1
 800cfb4:	f000 80a7 	beq.w	800d106 <_svfiprintf_r+0x1c6>
 800cfb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfba:	445a      	add	r2, fp
 800cfbc:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfbe:	f89a 3000 	ldrb.w	r3, [sl]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f000 809f 	beq.w	800d106 <_svfiprintf_r+0x1c6>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	f04f 32ff 	mov.w	r2, #4294967295
 800cfce:	f10a 0a01 	add.w	sl, sl, #1
 800cfd2:	9304      	str	r3, [sp, #16]
 800cfd4:	9307      	str	r3, [sp, #28]
 800cfd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cfda:	931a      	str	r3, [sp, #104]	@ 0x68
 800cfdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfe0:	4654      	mov	r4, sl
 800cfe2:	2205      	movs	r2, #5
 800cfe4:	484f      	ldr	r0, [pc, #316]	@ (800d124 <_svfiprintf_r+0x1e4>)
 800cfe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfea:	f7fd fbae 	bl	800a74a <memchr>
 800cfee:	9a04      	ldr	r2, [sp, #16]
 800cff0:	b9d8      	cbnz	r0, 800d02a <_svfiprintf_r+0xea>
 800cff2:	06d0      	lsls	r0, r2, #27
 800cff4:	bf44      	itt	mi
 800cff6:	2320      	movmi	r3, #32
 800cff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cffc:	0711      	lsls	r1, r2, #28
 800cffe:	bf44      	itt	mi
 800d000:	232b      	movmi	r3, #43	@ 0x2b
 800d002:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d006:	f89a 3000 	ldrb.w	r3, [sl]
 800d00a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d00c:	d015      	beq.n	800d03a <_svfiprintf_r+0xfa>
 800d00e:	9a07      	ldr	r2, [sp, #28]
 800d010:	4654      	mov	r4, sl
 800d012:	2000      	movs	r0, #0
 800d014:	f04f 0c0a 	mov.w	ip, #10
 800d018:	4621      	mov	r1, r4
 800d01a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d01e:	3b30      	subs	r3, #48	@ 0x30
 800d020:	2b09      	cmp	r3, #9
 800d022:	d94b      	bls.n	800d0bc <_svfiprintf_r+0x17c>
 800d024:	b1b0      	cbz	r0, 800d054 <_svfiprintf_r+0x114>
 800d026:	9207      	str	r2, [sp, #28]
 800d028:	e014      	b.n	800d054 <_svfiprintf_r+0x114>
 800d02a:	eba0 0308 	sub.w	r3, r0, r8
 800d02e:	46a2      	mov	sl, r4
 800d030:	fa09 f303 	lsl.w	r3, r9, r3
 800d034:	4313      	orrs	r3, r2
 800d036:	9304      	str	r3, [sp, #16]
 800d038:	e7d2      	b.n	800cfe0 <_svfiprintf_r+0xa0>
 800d03a:	9b03      	ldr	r3, [sp, #12]
 800d03c:	1d19      	adds	r1, r3, #4
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	9103      	str	r1, [sp, #12]
 800d044:	bfbb      	ittet	lt
 800d046:	425b      	neglt	r3, r3
 800d048:	f042 0202 	orrlt.w	r2, r2, #2
 800d04c:	9307      	strge	r3, [sp, #28]
 800d04e:	9307      	strlt	r3, [sp, #28]
 800d050:	bfb8      	it	lt
 800d052:	9204      	strlt	r2, [sp, #16]
 800d054:	7823      	ldrb	r3, [r4, #0]
 800d056:	2b2e      	cmp	r3, #46	@ 0x2e
 800d058:	d10a      	bne.n	800d070 <_svfiprintf_r+0x130>
 800d05a:	7863      	ldrb	r3, [r4, #1]
 800d05c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d05e:	d132      	bne.n	800d0c6 <_svfiprintf_r+0x186>
 800d060:	9b03      	ldr	r3, [sp, #12]
 800d062:	3402      	adds	r4, #2
 800d064:	1d1a      	adds	r2, r3, #4
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d06c:	9203      	str	r2, [sp, #12]
 800d06e:	9305      	str	r3, [sp, #20]
 800d070:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d134 <_svfiprintf_r+0x1f4>
 800d074:	2203      	movs	r2, #3
 800d076:	7821      	ldrb	r1, [r4, #0]
 800d078:	4650      	mov	r0, sl
 800d07a:	f7fd fb66 	bl	800a74a <memchr>
 800d07e:	b138      	cbz	r0, 800d090 <_svfiprintf_r+0x150>
 800d080:	eba0 000a 	sub.w	r0, r0, sl
 800d084:	2240      	movs	r2, #64	@ 0x40
 800d086:	9b04      	ldr	r3, [sp, #16]
 800d088:	3401      	adds	r4, #1
 800d08a:	4082      	lsls	r2, r0
 800d08c:	4313      	orrs	r3, r2
 800d08e:	9304      	str	r3, [sp, #16]
 800d090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d094:	2206      	movs	r2, #6
 800d096:	4824      	ldr	r0, [pc, #144]	@ (800d128 <_svfiprintf_r+0x1e8>)
 800d098:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d09c:	f7fd fb55 	bl	800a74a <memchr>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	d036      	beq.n	800d112 <_svfiprintf_r+0x1d2>
 800d0a4:	4b21      	ldr	r3, [pc, #132]	@ (800d12c <_svfiprintf_r+0x1ec>)
 800d0a6:	bb1b      	cbnz	r3, 800d0f0 <_svfiprintf_r+0x1b0>
 800d0a8:	9b03      	ldr	r3, [sp, #12]
 800d0aa:	3307      	adds	r3, #7
 800d0ac:	f023 0307 	bic.w	r3, r3, #7
 800d0b0:	3308      	adds	r3, #8
 800d0b2:	9303      	str	r3, [sp, #12]
 800d0b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0b6:	4433      	add	r3, r6
 800d0b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0ba:	e76a      	b.n	800cf92 <_svfiprintf_r+0x52>
 800d0bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0c0:	460c      	mov	r4, r1
 800d0c2:	2001      	movs	r0, #1
 800d0c4:	e7a8      	b.n	800d018 <_svfiprintf_r+0xd8>
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	3401      	adds	r4, #1
 800d0ca:	f04f 0c0a 	mov.w	ip, #10
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	9305      	str	r3, [sp, #20]
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0d8:	3a30      	subs	r2, #48	@ 0x30
 800d0da:	2a09      	cmp	r2, #9
 800d0dc:	d903      	bls.n	800d0e6 <_svfiprintf_r+0x1a6>
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d0c6      	beq.n	800d070 <_svfiprintf_r+0x130>
 800d0e2:	9105      	str	r1, [sp, #20]
 800d0e4:	e7c4      	b.n	800d070 <_svfiprintf_r+0x130>
 800d0e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	e7f0      	b.n	800d0d2 <_svfiprintf_r+0x192>
 800d0f0:	ab03      	add	r3, sp, #12
 800d0f2:	462a      	mov	r2, r5
 800d0f4:	a904      	add	r1, sp, #16
 800d0f6:	4638      	mov	r0, r7
 800d0f8:	9300      	str	r3, [sp, #0]
 800d0fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d130 <_svfiprintf_r+0x1f0>)
 800d0fc:	f7fb fcae 	bl	8008a5c <_printf_float>
 800d100:	1c42      	adds	r2, r0, #1
 800d102:	4606      	mov	r6, r0
 800d104:	d1d6      	bne.n	800d0b4 <_svfiprintf_r+0x174>
 800d106:	89ab      	ldrh	r3, [r5, #12]
 800d108:	065b      	lsls	r3, r3, #25
 800d10a:	f53f af2d 	bmi.w	800cf68 <_svfiprintf_r+0x28>
 800d10e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d110:	e72c      	b.n	800cf6c <_svfiprintf_r+0x2c>
 800d112:	ab03      	add	r3, sp, #12
 800d114:	462a      	mov	r2, r5
 800d116:	a904      	add	r1, sp, #16
 800d118:	4638      	mov	r0, r7
 800d11a:	9300      	str	r3, [sp, #0]
 800d11c:	4b04      	ldr	r3, [pc, #16]	@ (800d130 <_svfiprintf_r+0x1f0>)
 800d11e:	f7fb ff39 	bl	8008f94 <_printf_i>
 800d122:	e7ed      	b.n	800d100 <_svfiprintf_r+0x1c0>
 800d124:	0800eb92 	.word	0x0800eb92
 800d128:	0800eb9c 	.word	0x0800eb9c
 800d12c:	08008a5d 	.word	0x08008a5d
 800d130:	0800ce89 	.word	0x0800ce89
 800d134:	0800eb98 	.word	0x0800eb98

0800d138 <_sungetc_r>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	1c4b      	adds	r3, r1, #1
 800d13c:	4614      	mov	r4, r2
 800d13e:	d103      	bne.n	800d148 <_sungetc_r+0x10>
 800d140:	f04f 35ff 	mov.w	r5, #4294967295
 800d144:	4628      	mov	r0, r5
 800d146:	bd38      	pop	{r3, r4, r5, pc}
 800d148:	8993      	ldrh	r3, [r2, #12]
 800d14a:	b2cd      	uxtb	r5, r1
 800d14c:	f023 0320 	bic.w	r3, r3, #32
 800d150:	8193      	strh	r3, [r2, #12]
 800d152:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d154:	6852      	ldr	r2, [r2, #4]
 800d156:	b18b      	cbz	r3, 800d17c <_sungetc_r+0x44>
 800d158:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d15a:	4293      	cmp	r3, r2
 800d15c:	dd08      	ble.n	800d170 <_sungetc_r+0x38>
 800d15e:	6823      	ldr	r3, [r4, #0]
 800d160:	1e5a      	subs	r2, r3, #1
 800d162:	6022      	str	r2, [r4, #0]
 800d164:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d168:	6863      	ldr	r3, [r4, #4]
 800d16a:	3301      	adds	r3, #1
 800d16c:	6063      	str	r3, [r4, #4]
 800d16e:	e7e9      	b.n	800d144 <_sungetc_r+0xc>
 800d170:	4621      	mov	r1, r4
 800d172:	f000 fbf4 	bl	800d95e <__submore>
 800d176:	2800      	cmp	r0, #0
 800d178:	d0f1      	beq.n	800d15e <_sungetc_r+0x26>
 800d17a:	e7e1      	b.n	800d140 <_sungetc_r+0x8>
 800d17c:	6921      	ldr	r1, [r4, #16]
 800d17e:	6823      	ldr	r3, [r4, #0]
 800d180:	b151      	cbz	r1, 800d198 <_sungetc_r+0x60>
 800d182:	4299      	cmp	r1, r3
 800d184:	d208      	bcs.n	800d198 <_sungetc_r+0x60>
 800d186:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d18a:	42a9      	cmp	r1, r5
 800d18c:	d104      	bne.n	800d198 <_sungetc_r+0x60>
 800d18e:	3b01      	subs	r3, #1
 800d190:	3201      	adds	r2, #1
 800d192:	6023      	str	r3, [r4, #0]
 800d194:	6062      	str	r2, [r4, #4]
 800d196:	e7d5      	b.n	800d144 <_sungetc_r+0xc>
 800d198:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800d19c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d1a6:	4623      	mov	r3, r4
 800d1a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d1ac:	6023      	str	r3, [r4, #0]
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e7dc      	b.n	800d16c <_sungetc_r+0x34>

0800d1b2 <__ssrefill_r>:
 800d1b2:	b510      	push	{r4, lr}
 800d1b4:	460c      	mov	r4, r1
 800d1b6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d1b8:	b169      	cbz	r1, 800d1d6 <__ssrefill_r+0x24>
 800d1ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1be:	4299      	cmp	r1, r3
 800d1c0:	d001      	beq.n	800d1c6 <__ssrefill_r+0x14>
 800d1c2:	f7fe f95f 	bl	800b484 <_free_r>
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d1ca:	6360      	str	r0, [r4, #52]	@ 0x34
 800d1cc:	6063      	str	r3, [r4, #4]
 800d1ce:	b113      	cbz	r3, 800d1d6 <__ssrefill_r+0x24>
 800d1d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d1d2:	6023      	str	r3, [r4, #0]
 800d1d4:	bd10      	pop	{r4, pc}
 800d1d6:	6923      	ldr	r3, [r4, #16]
 800d1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1dc:	6023      	str	r3, [r4, #0]
 800d1de:	2300      	movs	r3, #0
 800d1e0:	6063      	str	r3, [r4, #4]
 800d1e2:	89a3      	ldrh	r3, [r4, #12]
 800d1e4:	f043 0320 	orr.w	r3, r3, #32
 800d1e8:	81a3      	strh	r3, [r4, #12]
 800d1ea:	e7f3      	b.n	800d1d4 <__ssrefill_r+0x22>

0800d1ec <__ssvfiscanf_r>:
 800d1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f0:	460c      	mov	r4, r1
 800d1f2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	4606      	mov	r6, r0
 800d1fa:	f10d 0804 	add.w	r8, sp, #4
 800d1fe:	4fa6      	ldr	r7, [pc, #664]	@ (800d498 <__ssvfiscanf_r+0x2ac>)
 800d200:	9300      	str	r3, [sp, #0]
 800d202:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d206:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d20a:	49a4      	ldr	r1, [pc, #656]	@ (800d49c <__ssvfiscanf_r+0x2b0>)
 800d20c:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d20e:	49a4      	ldr	r1, [pc, #656]	@ (800d4a0 <__ssvfiscanf_r+0x2b4>)
 800d210:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d212:	f892 9000 	ldrb.w	r9, [r2]
 800d216:	f1b9 0f00 	cmp.w	r9, #0
 800d21a:	f000 8158 	beq.w	800d4ce <__ssvfiscanf_r+0x2e2>
 800d21e:	f817 3009 	ldrb.w	r3, [r7, r9]
 800d222:	1c55      	adds	r5, r2, #1
 800d224:	f013 0308 	ands.w	r3, r3, #8
 800d228:	d019      	beq.n	800d25e <__ssvfiscanf_r+0x72>
 800d22a:	6863      	ldr	r3, [r4, #4]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	dd0f      	ble.n	800d250 <__ssvfiscanf_r+0x64>
 800d230:	6823      	ldr	r3, [r4, #0]
 800d232:	781a      	ldrb	r2, [r3, #0]
 800d234:	5cba      	ldrb	r2, [r7, r2]
 800d236:	0712      	lsls	r2, r2, #28
 800d238:	d401      	bmi.n	800d23e <__ssvfiscanf_r+0x52>
 800d23a:	462a      	mov	r2, r5
 800d23c:	e7e9      	b.n	800d212 <__ssvfiscanf_r+0x26>
 800d23e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d240:	3301      	adds	r3, #1
 800d242:	3201      	adds	r2, #1
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	9245      	str	r2, [sp, #276]	@ 0x114
 800d248:	6862      	ldr	r2, [r4, #4]
 800d24a:	3a01      	subs	r2, #1
 800d24c:	6062      	str	r2, [r4, #4]
 800d24e:	e7ec      	b.n	800d22a <__ssvfiscanf_r+0x3e>
 800d250:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d252:	4621      	mov	r1, r4
 800d254:	4630      	mov	r0, r6
 800d256:	4798      	blx	r3
 800d258:	2800      	cmp	r0, #0
 800d25a:	d0e9      	beq.n	800d230 <__ssvfiscanf_r+0x44>
 800d25c:	e7ed      	b.n	800d23a <__ssvfiscanf_r+0x4e>
 800d25e:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800d262:	f040 8086 	bne.w	800d372 <__ssvfiscanf_r+0x186>
 800d266:	9341      	str	r3, [sp, #260]	@ 0x104
 800d268:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d26a:	7853      	ldrb	r3, [r2, #1]
 800d26c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d26e:	bf04      	itt	eq
 800d270:	2310      	moveq	r3, #16
 800d272:	1c95      	addeq	r5, r2, #2
 800d274:	f04f 020a 	mov.w	r2, #10
 800d278:	bf08      	it	eq
 800d27a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d27c:	46aa      	mov	sl, r5
 800d27e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d282:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d286:	2b09      	cmp	r3, #9
 800d288:	d91e      	bls.n	800d2c8 <__ssvfiscanf_r+0xdc>
 800d28a:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800d4a4 <__ssvfiscanf_r+0x2b8>
 800d28e:	2203      	movs	r2, #3
 800d290:	4658      	mov	r0, fp
 800d292:	f7fd fa5a 	bl	800a74a <memchr>
 800d296:	b138      	cbz	r0, 800d2a8 <__ssvfiscanf_r+0xbc>
 800d298:	eba0 000b 	sub.w	r0, r0, fp
 800d29c:	2301      	movs	r3, #1
 800d29e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d2a0:	4655      	mov	r5, sl
 800d2a2:	4083      	lsls	r3, r0
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	9341      	str	r3, [sp, #260]	@ 0x104
 800d2a8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d2ac:	2b78      	cmp	r3, #120	@ 0x78
 800d2ae:	d806      	bhi.n	800d2be <__ssvfiscanf_r+0xd2>
 800d2b0:	2b57      	cmp	r3, #87	@ 0x57
 800d2b2:	d810      	bhi.n	800d2d6 <__ssvfiscanf_r+0xea>
 800d2b4:	2b25      	cmp	r3, #37	@ 0x25
 800d2b6:	d05c      	beq.n	800d372 <__ssvfiscanf_r+0x186>
 800d2b8:	d856      	bhi.n	800d368 <__ssvfiscanf_r+0x17c>
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d074      	beq.n	800d3a8 <__ssvfiscanf_r+0x1bc>
 800d2be:	2303      	movs	r3, #3
 800d2c0:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d2c2:	230a      	movs	r3, #10
 800d2c4:	9342      	str	r3, [sp, #264]	@ 0x108
 800d2c6:	e087      	b.n	800d3d8 <__ssvfiscanf_r+0x1ec>
 800d2c8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d2ca:	4655      	mov	r5, sl
 800d2cc:	fb02 1103 	mla	r1, r2, r3, r1
 800d2d0:	3930      	subs	r1, #48	@ 0x30
 800d2d2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d2d4:	e7d2      	b.n	800d27c <__ssvfiscanf_r+0x90>
 800d2d6:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d2da:	2a20      	cmp	r2, #32
 800d2dc:	d8ef      	bhi.n	800d2be <__ssvfiscanf_r+0xd2>
 800d2de:	a101      	add	r1, pc, #4	@ (adr r1, 800d2e4 <__ssvfiscanf_r+0xf8>)
 800d2e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d2e4:	0800d3b7 	.word	0x0800d3b7
 800d2e8:	0800d2bf 	.word	0x0800d2bf
 800d2ec:	0800d2bf 	.word	0x0800d2bf
 800d2f0:	0800d411 	.word	0x0800d411
 800d2f4:	0800d2bf 	.word	0x0800d2bf
 800d2f8:	0800d2bf 	.word	0x0800d2bf
 800d2fc:	0800d2bf 	.word	0x0800d2bf
 800d300:	0800d2bf 	.word	0x0800d2bf
 800d304:	0800d2bf 	.word	0x0800d2bf
 800d308:	0800d2bf 	.word	0x0800d2bf
 800d30c:	0800d2bf 	.word	0x0800d2bf
 800d310:	0800d427 	.word	0x0800d427
 800d314:	0800d40d 	.word	0x0800d40d
 800d318:	0800d36f 	.word	0x0800d36f
 800d31c:	0800d36f 	.word	0x0800d36f
 800d320:	0800d36f 	.word	0x0800d36f
 800d324:	0800d2bf 	.word	0x0800d2bf
 800d328:	0800d3c9 	.word	0x0800d3c9
 800d32c:	0800d2bf 	.word	0x0800d2bf
 800d330:	0800d2bf 	.word	0x0800d2bf
 800d334:	0800d2bf 	.word	0x0800d2bf
 800d338:	0800d2bf 	.word	0x0800d2bf
 800d33c:	0800d437 	.word	0x0800d437
 800d340:	0800d3d1 	.word	0x0800d3d1
 800d344:	0800d3af 	.word	0x0800d3af
 800d348:	0800d2bf 	.word	0x0800d2bf
 800d34c:	0800d2bf 	.word	0x0800d2bf
 800d350:	0800d433 	.word	0x0800d433
 800d354:	0800d2bf 	.word	0x0800d2bf
 800d358:	0800d40d 	.word	0x0800d40d
 800d35c:	0800d2bf 	.word	0x0800d2bf
 800d360:	0800d2bf 	.word	0x0800d2bf
 800d364:	0800d3b7 	.word	0x0800d3b7
 800d368:	3b45      	subs	r3, #69	@ 0x45
 800d36a:	2b02      	cmp	r3, #2
 800d36c:	d8a7      	bhi.n	800d2be <__ssvfiscanf_r+0xd2>
 800d36e:	2305      	movs	r3, #5
 800d370:	e031      	b.n	800d3d6 <__ssvfiscanf_r+0x1ea>
 800d372:	6863      	ldr	r3, [r4, #4]
 800d374:	2b00      	cmp	r3, #0
 800d376:	dd0d      	ble.n	800d394 <__ssvfiscanf_r+0x1a8>
 800d378:	6823      	ldr	r3, [r4, #0]
 800d37a:	781a      	ldrb	r2, [r3, #0]
 800d37c:	454a      	cmp	r2, r9
 800d37e:	f040 80a6 	bne.w	800d4ce <__ssvfiscanf_r+0x2e2>
 800d382:	3301      	adds	r3, #1
 800d384:	6862      	ldr	r2, [r4, #4]
 800d386:	6023      	str	r3, [r4, #0]
 800d388:	3a01      	subs	r2, #1
 800d38a:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d38c:	6062      	str	r2, [r4, #4]
 800d38e:	3301      	adds	r3, #1
 800d390:	9345      	str	r3, [sp, #276]	@ 0x114
 800d392:	e752      	b.n	800d23a <__ssvfiscanf_r+0x4e>
 800d394:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d396:	4621      	mov	r1, r4
 800d398:	4630      	mov	r0, r6
 800d39a:	4798      	blx	r3
 800d39c:	2800      	cmp	r0, #0
 800d39e:	d0eb      	beq.n	800d378 <__ssvfiscanf_r+0x18c>
 800d3a0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	f040 808b 	bne.w	800d4be <__ssvfiscanf_r+0x2d2>
 800d3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ac:	e08b      	b.n	800d4c6 <__ssvfiscanf_r+0x2da>
 800d3ae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d3b0:	f042 0220 	orr.w	r2, r2, #32
 800d3b4:	9241      	str	r2, [sp, #260]	@ 0x104
 800d3b6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d3b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d3bc:	9241      	str	r2, [sp, #260]	@ 0x104
 800d3be:	2210      	movs	r2, #16
 800d3c0:	2b6e      	cmp	r3, #110	@ 0x6e
 800d3c2:	9242      	str	r2, [sp, #264]	@ 0x108
 800d3c4:	d902      	bls.n	800d3cc <__ssvfiscanf_r+0x1e0>
 800d3c6:	e005      	b.n	800d3d4 <__ssvfiscanf_r+0x1e8>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	9342      	str	r3, [sp, #264]	@ 0x108
 800d3cc:	2303      	movs	r3, #3
 800d3ce:	e002      	b.n	800d3d6 <__ssvfiscanf_r+0x1ea>
 800d3d0:	2308      	movs	r3, #8
 800d3d2:	9342      	str	r3, [sp, #264]	@ 0x108
 800d3d4:	2304      	movs	r3, #4
 800d3d6:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d3d8:	6863      	ldr	r3, [r4, #4]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	dd3a      	ble.n	800d454 <__ssvfiscanf_r+0x268>
 800d3de:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d3e0:	0659      	lsls	r1, r3, #25
 800d3e2:	d404      	bmi.n	800d3ee <__ssvfiscanf_r+0x202>
 800d3e4:	6823      	ldr	r3, [r4, #0]
 800d3e6:	781a      	ldrb	r2, [r3, #0]
 800d3e8:	5cba      	ldrb	r2, [r7, r2]
 800d3ea:	0712      	lsls	r2, r2, #28
 800d3ec:	d439      	bmi.n	800d462 <__ssvfiscanf_r+0x276>
 800d3ee:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800d3f0:	2b02      	cmp	r3, #2
 800d3f2:	dc48      	bgt.n	800d486 <__ssvfiscanf_r+0x29a>
 800d3f4:	466b      	mov	r3, sp
 800d3f6:	4622      	mov	r2, r4
 800d3f8:	a941      	add	r1, sp, #260	@ 0x104
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	f000 f86c 	bl	800d4d8 <_scanf_chars>
 800d400:	2801      	cmp	r0, #1
 800d402:	d064      	beq.n	800d4ce <__ssvfiscanf_r+0x2e2>
 800d404:	2802      	cmp	r0, #2
 800d406:	f47f af18 	bne.w	800d23a <__ssvfiscanf_r+0x4e>
 800d40a:	e7c9      	b.n	800d3a0 <__ssvfiscanf_r+0x1b4>
 800d40c:	220a      	movs	r2, #10
 800d40e:	e7d7      	b.n	800d3c0 <__ssvfiscanf_r+0x1d4>
 800d410:	4629      	mov	r1, r5
 800d412:	4640      	mov	r0, r8
 800d414:	f000 fa6a 	bl	800d8ec <__sccl>
 800d418:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d41a:	4605      	mov	r5, r0
 800d41c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d420:	9341      	str	r3, [sp, #260]	@ 0x104
 800d422:	2301      	movs	r3, #1
 800d424:	e7d7      	b.n	800d3d6 <__ssvfiscanf_r+0x1ea>
 800d426:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d42c:	9341      	str	r3, [sp, #260]	@ 0x104
 800d42e:	2300      	movs	r3, #0
 800d430:	e7d1      	b.n	800d3d6 <__ssvfiscanf_r+0x1ea>
 800d432:	2302      	movs	r3, #2
 800d434:	e7cf      	b.n	800d3d6 <__ssvfiscanf_r+0x1ea>
 800d436:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800d438:	06c3      	lsls	r3, r0, #27
 800d43a:	f53f aefe 	bmi.w	800d23a <__ssvfiscanf_r+0x4e>
 800d43e:	9b00      	ldr	r3, [sp, #0]
 800d440:	07c0      	lsls	r0, r0, #31
 800d442:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d444:	f103 0104 	add.w	r1, r3, #4
 800d448:	9100      	str	r1, [sp, #0]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	bf4c      	ite	mi
 800d44e:	801a      	strhmi	r2, [r3, #0]
 800d450:	601a      	strpl	r2, [r3, #0]
 800d452:	e6f2      	b.n	800d23a <__ssvfiscanf_r+0x4e>
 800d454:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d456:	4621      	mov	r1, r4
 800d458:	4630      	mov	r0, r6
 800d45a:	4798      	blx	r3
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d0be      	beq.n	800d3de <__ssvfiscanf_r+0x1f2>
 800d460:	e79e      	b.n	800d3a0 <__ssvfiscanf_r+0x1b4>
 800d462:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d464:	3201      	adds	r2, #1
 800d466:	9245      	str	r2, [sp, #276]	@ 0x114
 800d468:	6862      	ldr	r2, [r4, #4]
 800d46a:	3a01      	subs	r2, #1
 800d46c:	2a00      	cmp	r2, #0
 800d46e:	6062      	str	r2, [r4, #4]
 800d470:	dd02      	ble.n	800d478 <__ssvfiscanf_r+0x28c>
 800d472:	3301      	adds	r3, #1
 800d474:	6023      	str	r3, [r4, #0]
 800d476:	e7b5      	b.n	800d3e4 <__ssvfiscanf_r+0x1f8>
 800d478:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d47a:	4621      	mov	r1, r4
 800d47c:	4630      	mov	r0, r6
 800d47e:	4798      	blx	r3
 800d480:	2800      	cmp	r0, #0
 800d482:	d0af      	beq.n	800d3e4 <__ssvfiscanf_r+0x1f8>
 800d484:	e78c      	b.n	800d3a0 <__ssvfiscanf_r+0x1b4>
 800d486:	2b04      	cmp	r3, #4
 800d488:	dc0e      	bgt.n	800d4a8 <__ssvfiscanf_r+0x2bc>
 800d48a:	466b      	mov	r3, sp
 800d48c:	4622      	mov	r2, r4
 800d48e:	a941      	add	r1, sp, #260	@ 0x104
 800d490:	4630      	mov	r0, r6
 800d492:	f000 f87b 	bl	800d58c <_scanf_i>
 800d496:	e7b3      	b.n	800d400 <__ssvfiscanf_r+0x214>
 800d498:	0800ee39 	.word	0x0800ee39
 800d49c:	0800d139 	.word	0x0800d139
 800d4a0:	0800d1b3 	.word	0x0800d1b3
 800d4a4:	0800eb98 	.word	0x0800eb98
 800d4a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d4d4 <__ssvfiscanf_r+0x2e8>)
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	f43f aec5 	beq.w	800d23a <__ssvfiscanf_r+0x4e>
 800d4b0:	466b      	mov	r3, sp
 800d4b2:	4622      	mov	r2, r4
 800d4b4:	a941      	add	r1, sp, #260	@ 0x104
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	f7fb fe8a 	bl	80091d0 <_scanf_float>
 800d4bc:	e7a0      	b.n	800d400 <__ssvfiscanf_r+0x214>
 800d4be:	89a3      	ldrh	r3, [r4, #12]
 800d4c0:	065b      	lsls	r3, r3, #25
 800d4c2:	f53f af71 	bmi.w	800d3a8 <__ssvfiscanf_r+0x1bc>
 800d4c6:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800d4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ce:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d4d0:	e7f9      	b.n	800d4c6 <__ssvfiscanf_r+0x2da>
 800d4d2:	bf00      	nop
 800d4d4:	080091d1 	.word	0x080091d1

0800d4d8 <_scanf_chars>:
 800d4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4dc:	4615      	mov	r5, r2
 800d4de:	688a      	ldr	r2, [r1, #8]
 800d4e0:	4680      	mov	r8, r0
 800d4e2:	460c      	mov	r4, r1
 800d4e4:	b932      	cbnz	r2, 800d4f4 <_scanf_chars+0x1c>
 800d4e6:	698a      	ldr	r2, [r1, #24]
 800d4e8:	2a00      	cmp	r2, #0
 800d4ea:	bf14      	ite	ne
 800d4ec:	f04f 32ff 	movne.w	r2, #4294967295
 800d4f0:	2201      	moveq	r2, #1
 800d4f2:	608a      	str	r2, [r1, #8]
 800d4f4:	6822      	ldr	r2, [r4, #0]
 800d4f6:	2700      	movs	r7, #0
 800d4f8:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800d588 <_scanf_chars+0xb0>
 800d4fc:	06d1      	lsls	r1, r2, #27
 800d4fe:	bf5f      	itttt	pl
 800d500:	681a      	ldrpl	r2, [r3, #0]
 800d502:	1d11      	addpl	r1, r2, #4
 800d504:	6019      	strpl	r1, [r3, #0]
 800d506:	6816      	ldrpl	r6, [r2, #0]
 800d508:	69a0      	ldr	r0, [r4, #24]
 800d50a:	b188      	cbz	r0, 800d530 <_scanf_chars+0x58>
 800d50c:	2801      	cmp	r0, #1
 800d50e:	d107      	bne.n	800d520 <_scanf_chars+0x48>
 800d510:	682b      	ldr	r3, [r5, #0]
 800d512:	781a      	ldrb	r2, [r3, #0]
 800d514:	6963      	ldr	r3, [r4, #20]
 800d516:	5c9b      	ldrb	r3, [r3, r2]
 800d518:	b953      	cbnz	r3, 800d530 <_scanf_chars+0x58>
 800d51a:	2f00      	cmp	r7, #0
 800d51c:	d031      	beq.n	800d582 <_scanf_chars+0xaa>
 800d51e:	e022      	b.n	800d566 <_scanf_chars+0x8e>
 800d520:	2802      	cmp	r0, #2
 800d522:	d120      	bne.n	800d566 <_scanf_chars+0x8e>
 800d524:	682b      	ldr	r3, [r5, #0]
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d52c:	071b      	lsls	r3, r3, #28
 800d52e:	d41a      	bmi.n	800d566 <_scanf_chars+0x8e>
 800d530:	6823      	ldr	r3, [r4, #0]
 800d532:	3701      	adds	r7, #1
 800d534:	06da      	lsls	r2, r3, #27
 800d536:	bf5e      	ittt	pl
 800d538:	682b      	ldrpl	r3, [r5, #0]
 800d53a:	781b      	ldrbpl	r3, [r3, #0]
 800d53c:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d540:	682a      	ldr	r2, [r5, #0]
 800d542:	686b      	ldr	r3, [r5, #4]
 800d544:	3201      	adds	r2, #1
 800d546:	3b01      	subs	r3, #1
 800d548:	602a      	str	r2, [r5, #0]
 800d54a:	68a2      	ldr	r2, [r4, #8]
 800d54c:	606b      	str	r3, [r5, #4]
 800d54e:	3a01      	subs	r2, #1
 800d550:	60a2      	str	r2, [r4, #8]
 800d552:	b142      	cbz	r2, 800d566 <_scanf_chars+0x8e>
 800d554:	2b00      	cmp	r3, #0
 800d556:	dcd7      	bgt.n	800d508 <_scanf_chars+0x30>
 800d558:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d55c:	4629      	mov	r1, r5
 800d55e:	4640      	mov	r0, r8
 800d560:	4798      	blx	r3
 800d562:	2800      	cmp	r0, #0
 800d564:	d0d0      	beq.n	800d508 <_scanf_chars+0x30>
 800d566:	6823      	ldr	r3, [r4, #0]
 800d568:	f013 0310 	ands.w	r3, r3, #16
 800d56c:	d105      	bne.n	800d57a <_scanf_chars+0xa2>
 800d56e:	68e2      	ldr	r2, [r4, #12]
 800d570:	3201      	adds	r2, #1
 800d572:	60e2      	str	r2, [r4, #12]
 800d574:	69a2      	ldr	r2, [r4, #24]
 800d576:	b102      	cbz	r2, 800d57a <_scanf_chars+0xa2>
 800d578:	7033      	strb	r3, [r6, #0]
 800d57a:	6923      	ldr	r3, [r4, #16]
 800d57c:	2000      	movs	r0, #0
 800d57e:	443b      	add	r3, r7
 800d580:	6123      	str	r3, [r4, #16]
 800d582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d586:	bf00      	nop
 800d588:	0800ee39 	.word	0x0800ee39

0800d58c <_scanf_i>:
 800d58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d590:	4698      	mov	r8, r3
 800d592:	b087      	sub	sp, #28
 800d594:	4b72      	ldr	r3, [pc, #456]	@ (800d760 <_scanf_i+0x1d4>)
 800d596:	460c      	mov	r4, r1
 800d598:	4682      	mov	sl, r0
 800d59a:	4616      	mov	r6, r2
 800d59c:	4627      	mov	r7, r4
 800d59e:	f04f 0b00 	mov.w	fp, #0
 800d5a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d5a6:	ab03      	add	r3, sp, #12
 800d5a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d5ac:	4b6d      	ldr	r3, [pc, #436]	@ (800d764 <_scanf_i+0x1d8>)
 800d5ae:	69a1      	ldr	r1, [r4, #24]
 800d5b0:	4a6d      	ldr	r2, [pc, #436]	@ (800d768 <_scanf_i+0x1dc>)
 800d5b2:	2903      	cmp	r1, #3
 800d5b4:	bf08      	it	eq
 800d5b6:	461a      	moveq	r2, r3
 800d5b8:	68a3      	ldr	r3, [r4, #8]
 800d5ba:	9201      	str	r2, [sp, #4]
 800d5bc:	1e5a      	subs	r2, r3, #1
 800d5be:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d5c2:	bf89      	itett	hi
 800d5c4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d5c8:	f04f 0900 	movls.w	r9, #0
 800d5cc:	eb03 0905 	addhi.w	r9, r3, r5
 800d5d0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d5d4:	bf88      	it	hi
 800d5d6:	60a3      	strhi	r3, [r4, #8]
 800d5d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d5dc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800d5e0:	463d      	mov	r5, r7
 800d5e2:	6023      	str	r3, [r4, #0]
 800d5e4:	6831      	ldr	r1, [r6, #0]
 800d5e6:	ab03      	add	r3, sp, #12
 800d5e8:	2202      	movs	r2, #2
 800d5ea:	7809      	ldrb	r1, [r1, #0]
 800d5ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d5f0:	f7fd f8ab 	bl	800a74a <memchr>
 800d5f4:	b328      	cbz	r0, 800d642 <_scanf_i+0xb6>
 800d5f6:	f1bb 0f01 	cmp.w	fp, #1
 800d5fa:	d159      	bne.n	800d6b0 <_scanf_i+0x124>
 800d5fc:	6862      	ldr	r2, [r4, #4]
 800d5fe:	b92a      	cbnz	r2, 800d60c <_scanf_i+0x80>
 800d600:	6822      	ldr	r2, [r4, #0]
 800d602:	2108      	movs	r1, #8
 800d604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d608:	6061      	str	r1, [r4, #4]
 800d60a:	6022      	str	r2, [r4, #0]
 800d60c:	6822      	ldr	r2, [r4, #0]
 800d60e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800d612:	6022      	str	r2, [r4, #0]
 800d614:	68a2      	ldr	r2, [r4, #8]
 800d616:	1e51      	subs	r1, r2, #1
 800d618:	60a1      	str	r1, [r4, #8]
 800d61a:	b192      	cbz	r2, 800d642 <_scanf_i+0xb6>
 800d61c:	6832      	ldr	r2, [r6, #0]
 800d61e:	1c51      	adds	r1, r2, #1
 800d620:	6031      	str	r1, [r6, #0]
 800d622:	7812      	ldrb	r2, [r2, #0]
 800d624:	f805 2b01 	strb.w	r2, [r5], #1
 800d628:	6872      	ldr	r2, [r6, #4]
 800d62a:	3a01      	subs	r2, #1
 800d62c:	2a00      	cmp	r2, #0
 800d62e:	6072      	str	r2, [r6, #4]
 800d630:	dc07      	bgt.n	800d642 <_scanf_i+0xb6>
 800d632:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800d636:	4631      	mov	r1, r6
 800d638:	4650      	mov	r0, sl
 800d63a:	4790      	blx	r2
 800d63c:	2800      	cmp	r0, #0
 800d63e:	f040 8085 	bne.w	800d74c <_scanf_i+0x1c0>
 800d642:	f10b 0b01 	add.w	fp, fp, #1
 800d646:	f1bb 0f03 	cmp.w	fp, #3
 800d64a:	d1cb      	bne.n	800d5e4 <_scanf_i+0x58>
 800d64c:	6863      	ldr	r3, [r4, #4]
 800d64e:	b90b      	cbnz	r3, 800d654 <_scanf_i+0xc8>
 800d650:	230a      	movs	r3, #10
 800d652:	6063      	str	r3, [r4, #4]
 800d654:	6863      	ldr	r3, [r4, #4]
 800d656:	f04f 0b00 	mov.w	fp, #0
 800d65a:	4944      	ldr	r1, [pc, #272]	@ (800d76c <_scanf_i+0x1e0>)
 800d65c:	6960      	ldr	r0, [r4, #20]
 800d65e:	1ac9      	subs	r1, r1, r3
 800d660:	f000 f944 	bl	800d8ec <__sccl>
 800d664:	68a3      	ldr	r3, [r4, #8]
 800d666:	6822      	ldr	r2, [r4, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d03d      	beq.n	800d6e8 <_scanf_i+0x15c>
 800d66c:	6831      	ldr	r1, [r6, #0]
 800d66e:	6960      	ldr	r0, [r4, #20]
 800d670:	f891 c000 	ldrb.w	ip, [r1]
 800d674:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d678:	2800      	cmp	r0, #0
 800d67a:	d035      	beq.n	800d6e8 <_scanf_i+0x15c>
 800d67c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800d680:	d124      	bne.n	800d6cc <_scanf_i+0x140>
 800d682:	0510      	lsls	r0, r2, #20
 800d684:	d522      	bpl.n	800d6cc <_scanf_i+0x140>
 800d686:	f10b 0b01 	add.w	fp, fp, #1
 800d68a:	f1b9 0f00 	cmp.w	r9, #0
 800d68e:	d003      	beq.n	800d698 <_scanf_i+0x10c>
 800d690:	3301      	adds	r3, #1
 800d692:	f109 39ff 	add.w	r9, r9, #4294967295
 800d696:	60a3      	str	r3, [r4, #8]
 800d698:	6873      	ldr	r3, [r6, #4]
 800d69a:	3b01      	subs	r3, #1
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	6073      	str	r3, [r6, #4]
 800d6a0:	dd1b      	ble.n	800d6da <_scanf_i+0x14e>
 800d6a2:	6833      	ldr	r3, [r6, #0]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	6033      	str	r3, [r6, #0]
 800d6a8:	68a3      	ldr	r3, [r4, #8]
 800d6aa:	3b01      	subs	r3, #1
 800d6ac:	60a3      	str	r3, [r4, #8]
 800d6ae:	e7d9      	b.n	800d664 <_scanf_i+0xd8>
 800d6b0:	f1bb 0f02 	cmp.w	fp, #2
 800d6b4:	d1ae      	bne.n	800d614 <_scanf_i+0x88>
 800d6b6:	6822      	ldr	r2, [r4, #0]
 800d6b8:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800d6bc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d6c0:	d1c4      	bne.n	800d64c <_scanf_i+0xc0>
 800d6c2:	2110      	movs	r1, #16
 800d6c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d6c8:	6061      	str	r1, [r4, #4]
 800d6ca:	e7a2      	b.n	800d612 <_scanf_i+0x86>
 800d6cc:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800d6d0:	6022      	str	r2, [r4, #0]
 800d6d2:	780b      	ldrb	r3, [r1, #0]
 800d6d4:	f805 3b01 	strb.w	r3, [r5], #1
 800d6d8:	e7de      	b.n	800d698 <_scanf_i+0x10c>
 800d6da:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d6de:	4631      	mov	r1, r6
 800d6e0:	4650      	mov	r0, sl
 800d6e2:	4798      	blx	r3
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d0df      	beq.n	800d6a8 <_scanf_i+0x11c>
 800d6e8:	6823      	ldr	r3, [r4, #0]
 800d6ea:	05d9      	lsls	r1, r3, #23
 800d6ec:	d50d      	bpl.n	800d70a <_scanf_i+0x17e>
 800d6ee:	42bd      	cmp	r5, r7
 800d6f0:	d909      	bls.n	800d706 <_scanf_i+0x17a>
 800d6f2:	f105 39ff 	add.w	r9, r5, #4294967295
 800d6f6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d6fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d6fe:	4632      	mov	r2, r6
 800d700:	464d      	mov	r5, r9
 800d702:	4650      	mov	r0, sl
 800d704:	4798      	blx	r3
 800d706:	42bd      	cmp	r5, r7
 800d708:	d028      	beq.n	800d75c <_scanf_i+0x1d0>
 800d70a:	6822      	ldr	r2, [r4, #0]
 800d70c:	f012 0210 	ands.w	r2, r2, #16
 800d710:	d113      	bne.n	800d73a <_scanf_i+0x1ae>
 800d712:	702a      	strb	r2, [r5, #0]
 800d714:	4639      	mov	r1, r7
 800d716:	6863      	ldr	r3, [r4, #4]
 800d718:	4650      	mov	r0, sl
 800d71a:	9e01      	ldr	r6, [sp, #4]
 800d71c:	47b0      	blx	r6
 800d71e:	f8d8 3000 	ldr.w	r3, [r8]
 800d722:	6821      	ldr	r1, [r4, #0]
 800d724:	1d1a      	adds	r2, r3, #4
 800d726:	f011 0f20 	tst.w	r1, #32
 800d72a:	f8c8 2000 	str.w	r2, [r8]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	d00f      	beq.n	800d752 <_scanf_i+0x1c6>
 800d732:	6018      	str	r0, [r3, #0]
 800d734:	68e3      	ldr	r3, [r4, #12]
 800d736:	3301      	adds	r3, #1
 800d738:	60e3      	str	r3, [r4, #12]
 800d73a:	1bed      	subs	r5, r5, r7
 800d73c:	6923      	ldr	r3, [r4, #16]
 800d73e:	2000      	movs	r0, #0
 800d740:	445d      	add	r5, fp
 800d742:	442b      	add	r3, r5
 800d744:	6123      	str	r3, [r4, #16]
 800d746:	b007      	add	sp, #28
 800d748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d74c:	f04f 0b00 	mov.w	fp, #0
 800d750:	e7ca      	b.n	800d6e8 <_scanf_i+0x15c>
 800d752:	07ca      	lsls	r2, r1, #31
 800d754:	bf4c      	ite	mi
 800d756:	8018      	strhmi	r0, [r3, #0]
 800d758:	6018      	strpl	r0, [r3, #0]
 800d75a:	e7eb      	b.n	800d734 <_scanf_i+0x1a8>
 800d75c:	2001      	movs	r0, #1
 800d75e:	e7f2      	b.n	800d746 <_scanf_i+0x1ba>
 800d760:	0800e904 	.word	0x0800e904
 800d764:	0800cd91 	.word	0x0800cd91
 800d768:	0800ce71 	.word	0x0800ce71
 800d76c:	0800ebb3 	.word	0x0800ebb3

0800d770 <__sflush_r>:
 800d770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d778:	0716      	lsls	r6, r2, #28
 800d77a:	4605      	mov	r5, r0
 800d77c:	460c      	mov	r4, r1
 800d77e:	d454      	bmi.n	800d82a <__sflush_r+0xba>
 800d780:	684b      	ldr	r3, [r1, #4]
 800d782:	2b00      	cmp	r3, #0
 800d784:	dc02      	bgt.n	800d78c <__sflush_r+0x1c>
 800d786:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d788:	2b00      	cmp	r3, #0
 800d78a:	dd48      	ble.n	800d81e <__sflush_r+0xae>
 800d78c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d78e:	2e00      	cmp	r6, #0
 800d790:	d045      	beq.n	800d81e <__sflush_r+0xae>
 800d792:	2300      	movs	r3, #0
 800d794:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d798:	682f      	ldr	r7, [r5, #0]
 800d79a:	6a21      	ldr	r1, [r4, #32]
 800d79c:	602b      	str	r3, [r5, #0]
 800d79e:	d030      	beq.n	800d802 <__sflush_r+0x92>
 800d7a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d7a2:	89a3      	ldrh	r3, [r4, #12]
 800d7a4:	0759      	lsls	r1, r3, #29
 800d7a6:	d505      	bpl.n	800d7b4 <__sflush_r+0x44>
 800d7a8:	6863      	ldr	r3, [r4, #4]
 800d7aa:	1ad2      	subs	r2, r2, r3
 800d7ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7ae:	b10b      	cbz	r3, 800d7b4 <__sflush_r+0x44>
 800d7b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7b2:	1ad2      	subs	r2, r2, r3
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7b8:	6a21      	ldr	r1, [r4, #32]
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	47b0      	blx	r6
 800d7be:	1c43      	adds	r3, r0, #1
 800d7c0:	89a3      	ldrh	r3, [r4, #12]
 800d7c2:	d106      	bne.n	800d7d2 <__sflush_r+0x62>
 800d7c4:	6829      	ldr	r1, [r5, #0]
 800d7c6:	291d      	cmp	r1, #29
 800d7c8:	d82b      	bhi.n	800d822 <__sflush_r+0xb2>
 800d7ca:	4a2a      	ldr	r2, [pc, #168]	@ (800d874 <__sflush_r+0x104>)
 800d7cc:	40ca      	lsrs	r2, r1
 800d7ce:	07d6      	lsls	r6, r2, #31
 800d7d0:	d527      	bpl.n	800d822 <__sflush_r+0xb2>
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	04d9      	lsls	r1, r3, #19
 800d7d6:	6062      	str	r2, [r4, #4]
 800d7d8:	6922      	ldr	r2, [r4, #16]
 800d7da:	6022      	str	r2, [r4, #0]
 800d7dc:	d504      	bpl.n	800d7e8 <__sflush_r+0x78>
 800d7de:	1c42      	adds	r2, r0, #1
 800d7e0:	d101      	bne.n	800d7e6 <__sflush_r+0x76>
 800d7e2:	682b      	ldr	r3, [r5, #0]
 800d7e4:	b903      	cbnz	r3, 800d7e8 <__sflush_r+0x78>
 800d7e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7ea:	602f      	str	r7, [r5, #0]
 800d7ec:	b1b9      	cbz	r1, 800d81e <__sflush_r+0xae>
 800d7ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7f2:	4299      	cmp	r1, r3
 800d7f4:	d002      	beq.n	800d7fc <__sflush_r+0x8c>
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	f7fd fe44 	bl	800b484 <_free_r>
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800d800:	e00d      	b.n	800d81e <__sflush_r+0xae>
 800d802:	2301      	movs	r3, #1
 800d804:	4628      	mov	r0, r5
 800d806:	47b0      	blx	r6
 800d808:	4602      	mov	r2, r0
 800d80a:	1c50      	adds	r0, r2, #1
 800d80c:	d1c9      	bne.n	800d7a2 <__sflush_r+0x32>
 800d80e:	682b      	ldr	r3, [r5, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d0c6      	beq.n	800d7a2 <__sflush_r+0x32>
 800d814:	2b1d      	cmp	r3, #29
 800d816:	d001      	beq.n	800d81c <__sflush_r+0xac>
 800d818:	2b16      	cmp	r3, #22
 800d81a:	d11d      	bne.n	800d858 <__sflush_r+0xe8>
 800d81c:	602f      	str	r7, [r5, #0]
 800d81e:	2000      	movs	r0, #0
 800d820:	e021      	b.n	800d866 <__sflush_r+0xf6>
 800d822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d826:	b21b      	sxth	r3, r3
 800d828:	e01a      	b.n	800d860 <__sflush_r+0xf0>
 800d82a:	690f      	ldr	r7, [r1, #16]
 800d82c:	2f00      	cmp	r7, #0
 800d82e:	d0f6      	beq.n	800d81e <__sflush_r+0xae>
 800d830:	0793      	lsls	r3, r2, #30
 800d832:	680e      	ldr	r6, [r1, #0]
 800d834:	600f      	str	r7, [r1, #0]
 800d836:	bf0c      	ite	eq
 800d838:	694b      	ldreq	r3, [r1, #20]
 800d83a:	2300      	movne	r3, #0
 800d83c:	eba6 0807 	sub.w	r8, r6, r7
 800d840:	608b      	str	r3, [r1, #8]
 800d842:	f1b8 0f00 	cmp.w	r8, #0
 800d846:	ddea      	ble.n	800d81e <__sflush_r+0xae>
 800d848:	4643      	mov	r3, r8
 800d84a:	463a      	mov	r2, r7
 800d84c:	6a21      	ldr	r1, [r4, #32]
 800d84e:	4628      	mov	r0, r5
 800d850:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d852:	47b0      	blx	r6
 800d854:	2800      	cmp	r0, #0
 800d856:	dc08      	bgt.n	800d86a <__sflush_r+0xfa>
 800d858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d85c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d860:	f04f 30ff 	mov.w	r0, #4294967295
 800d864:	81a3      	strh	r3, [r4, #12]
 800d866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d86a:	4407      	add	r7, r0
 800d86c:	eba8 0800 	sub.w	r8, r8, r0
 800d870:	e7e7      	b.n	800d842 <__sflush_r+0xd2>
 800d872:	bf00      	nop
 800d874:	20400001 	.word	0x20400001

0800d878 <_fflush_r>:
 800d878:	b538      	push	{r3, r4, r5, lr}
 800d87a:	690b      	ldr	r3, [r1, #16]
 800d87c:	4605      	mov	r5, r0
 800d87e:	460c      	mov	r4, r1
 800d880:	b913      	cbnz	r3, 800d888 <_fflush_r+0x10>
 800d882:	2500      	movs	r5, #0
 800d884:	4628      	mov	r0, r5
 800d886:	bd38      	pop	{r3, r4, r5, pc}
 800d888:	b118      	cbz	r0, 800d892 <_fflush_r+0x1a>
 800d88a:	6a03      	ldr	r3, [r0, #32]
 800d88c:	b90b      	cbnz	r3, 800d892 <_fflush_r+0x1a>
 800d88e:	f7fb ff39 	bl	8009704 <__sinit>
 800d892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d0f3      	beq.n	800d882 <_fflush_r+0xa>
 800d89a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d89c:	07d0      	lsls	r0, r2, #31
 800d89e:	d404      	bmi.n	800d8aa <_fflush_r+0x32>
 800d8a0:	0599      	lsls	r1, r3, #22
 800d8a2:	d402      	bmi.n	800d8aa <_fflush_r+0x32>
 800d8a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8a6:	f7fc ff45 	bl	800a734 <__retarget_lock_acquire_recursive>
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	4621      	mov	r1, r4
 800d8ae:	f7ff ff5f 	bl	800d770 <__sflush_r>
 800d8b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	07da      	lsls	r2, r3, #31
 800d8b8:	d4e4      	bmi.n	800d884 <_fflush_r+0xc>
 800d8ba:	89a3      	ldrh	r3, [r4, #12]
 800d8bc:	059b      	lsls	r3, r3, #22
 800d8be:	d4e1      	bmi.n	800d884 <_fflush_r+0xc>
 800d8c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8c2:	f7fc ff39 	bl	800a738 <__retarget_lock_release_recursive>
 800d8c6:	e7dd      	b.n	800d884 <_fflush_r+0xc>

0800d8c8 <fiprintf>:
 800d8c8:	b40e      	push	{r1, r2, r3}
 800d8ca:	b503      	push	{r0, r1, lr}
 800d8cc:	ab03      	add	r3, sp, #12
 800d8ce:	4601      	mov	r1, r0
 800d8d0:	4805      	ldr	r0, [pc, #20]	@ (800d8e8 <fiprintf+0x20>)
 800d8d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8d6:	6800      	ldr	r0, [r0, #0]
 800d8d8:	9301      	str	r3, [sp, #4]
 800d8da:	f000 fd45 	bl	800e368 <_vfiprintf_r>
 800d8de:	b002      	add	sp, #8
 800d8e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8e4:	b003      	add	sp, #12
 800d8e6:	4770      	bx	lr
 800d8e8:	20000040 	.word	0x20000040

0800d8ec <__sccl>:
 800d8ec:	b570      	push	{r4, r5, r6, lr}
 800d8ee:	780b      	ldrb	r3, [r1, #0]
 800d8f0:	4604      	mov	r4, r0
 800d8f2:	3801      	subs	r0, #1
 800d8f4:	2b5e      	cmp	r3, #94	@ 0x5e
 800d8f6:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d8fa:	bf13      	iteet	ne
 800d8fc:	1c4a      	addne	r2, r1, #1
 800d8fe:	1c8a      	addeq	r2, r1, #2
 800d900:	784b      	ldrbeq	r3, [r1, #1]
 800d902:	2100      	movne	r1, #0
 800d904:	bf08      	it	eq
 800d906:	2101      	moveq	r1, #1
 800d908:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d90c:	42a8      	cmp	r0, r5
 800d90e:	d1fb      	bne.n	800d908 <__sccl+0x1c>
 800d910:	b90b      	cbnz	r3, 800d916 <__sccl+0x2a>
 800d912:	1e50      	subs	r0, r2, #1
 800d914:	bd70      	pop	{r4, r5, r6, pc}
 800d916:	f081 0101 	eor.w	r1, r1, #1
 800d91a:	4610      	mov	r0, r2
 800d91c:	54e1      	strb	r1, [r4, r3]
 800d91e:	4602      	mov	r2, r0
 800d920:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d924:	2d2d      	cmp	r5, #45	@ 0x2d
 800d926:	d005      	beq.n	800d934 <__sccl+0x48>
 800d928:	2d5d      	cmp	r5, #93	@ 0x5d
 800d92a:	d016      	beq.n	800d95a <__sccl+0x6e>
 800d92c:	2d00      	cmp	r5, #0
 800d92e:	d0f1      	beq.n	800d914 <__sccl+0x28>
 800d930:	462b      	mov	r3, r5
 800d932:	e7f2      	b.n	800d91a <__sccl+0x2e>
 800d934:	7846      	ldrb	r6, [r0, #1]
 800d936:	2e5d      	cmp	r6, #93	@ 0x5d
 800d938:	d0fa      	beq.n	800d930 <__sccl+0x44>
 800d93a:	42b3      	cmp	r3, r6
 800d93c:	dcf8      	bgt.n	800d930 <__sccl+0x44>
 800d93e:	3002      	adds	r0, #2
 800d940:	461a      	mov	r2, r3
 800d942:	3201      	adds	r2, #1
 800d944:	4296      	cmp	r6, r2
 800d946:	54a1      	strb	r1, [r4, r2]
 800d948:	dcfb      	bgt.n	800d942 <__sccl+0x56>
 800d94a:	1af2      	subs	r2, r6, r3
 800d94c:	1c5d      	adds	r5, r3, #1
 800d94e:	3a01      	subs	r2, #1
 800d950:	42b3      	cmp	r3, r6
 800d952:	bfa8      	it	ge
 800d954:	2200      	movge	r2, #0
 800d956:	18ab      	adds	r3, r5, r2
 800d958:	e7e1      	b.n	800d91e <__sccl+0x32>
 800d95a:	4610      	mov	r0, r2
 800d95c:	e7da      	b.n	800d914 <__sccl+0x28>

0800d95e <__submore>:
 800d95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d962:	460c      	mov	r4, r1
 800d964:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d966:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d96a:	4299      	cmp	r1, r3
 800d96c:	d11a      	bne.n	800d9a4 <__submore+0x46>
 800d96e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d972:	f7fd fe47 	bl	800b604 <_malloc_r>
 800d976:	b918      	cbnz	r0, 800d980 <__submore+0x22>
 800d978:	f04f 30ff 	mov.w	r0, #4294967295
 800d97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d984:	6360      	str	r0, [r4, #52]	@ 0x34
 800d986:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800d98a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d98c:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d990:	7083      	strb	r3, [r0, #2]
 800d992:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d996:	7043      	strb	r3, [r0, #1]
 800d998:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d99c:	7003      	strb	r3, [r0, #0]
 800d99e:	6020      	str	r0, [r4, #0]
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	e7eb      	b.n	800d97c <__submore+0x1e>
 800d9a4:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800d9a6:	0077      	lsls	r7, r6, #1
 800d9a8:	463a      	mov	r2, r7
 800d9aa:	f000 fc78 	bl	800e29e <_realloc_r>
 800d9ae:	4605      	mov	r5, r0
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	d0e1      	beq.n	800d978 <__submore+0x1a>
 800d9b4:	eb00 0806 	add.w	r8, r0, r6
 800d9b8:	4601      	mov	r1, r0
 800d9ba:	4632      	mov	r2, r6
 800d9bc:	4640      	mov	r0, r8
 800d9be:	f000 f8e9 	bl	800db94 <memcpy>
 800d9c2:	f8c4 8000 	str.w	r8, [r4]
 800d9c6:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800d9ca:	e7e9      	b.n	800d9a0 <__submore+0x42>

0800d9cc <memmove>:
 800d9cc:	4288      	cmp	r0, r1
 800d9ce:	b510      	push	{r4, lr}
 800d9d0:	eb01 0402 	add.w	r4, r1, r2
 800d9d4:	d902      	bls.n	800d9dc <memmove+0x10>
 800d9d6:	4284      	cmp	r4, r0
 800d9d8:	4623      	mov	r3, r4
 800d9da:	d807      	bhi.n	800d9ec <memmove+0x20>
 800d9dc:	1e43      	subs	r3, r0, #1
 800d9de:	42a1      	cmp	r1, r4
 800d9e0:	d008      	beq.n	800d9f4 <memmove+0x28>
 800d9e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9ea:	e7f8      	b.n	800d9de <memmove+0x12>
 800d9ec:	4402      	add	r2, r0
 800d9ee:	4601      	mov	r1, r0
 800d9f0:	428a      	cmp	r2, r1
 800d9f2:	d100      	bne.n	800d9f6 <memmove+0x2a>
 800d9f4:	bd10      	pop	{r4, pc}
 800d9f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9fe:	e7f7      	b.n	800d9f0 <memmove+0x24>

0800da00 <strncmp>:
 800da00:	b510      	push	{r4, lr}
 800da02:	b16a      	cbz	r2, 800da20 <strncmp+0x20>
 800da04:	3901      	subs	r1, #1
 800da06:	1884      	adds	r4, r0, r2
 800da08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800da10:	429a      	cmp	r2, r3
 800da12:	d103      	bne.n	800da1c <strncmp+0x1c>
 800da14:	42a0      	cmp	r0, r4
 800da16:	d001      	beq.n	800da1c <strncmp+0x1c>
 800da18:	2a00      	cmp	r2, #0
 800da1a:	d1f5      	bne.n	800da08 <strncmp+0x8>
 800da1c:	1ad0      	subs	r0, r2, r3
 800da1e:	bd10      	pop	{r4, pc}
 800da20:	4610      	mov	r0, r2
 800da22:	e7fc      	b.n	800da1e <strncmp+0x1e>

0800da24 <__gettzinfo>:
 800da24:	4800      	ldr	r0, [pc, #0]	@ (800da28 <__gettzinfo+0x4>)
 800da26:	4770      	bx	lr
 800da28:	20000090 	.word	0x20000090

0800da2c <gmtime_r>:
 800da2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da30:	4a4c      	ldr	r2, [pc, #304]	@ (800db64 <gmtime_r+0x138>)
 800da32:	460c      	mov	r4, r1
 800da34:	2300      	movs	r3, #0
 800da36:	e9d0 0100 	ldrd	r0, r1, [r0]
 800da3a:	f7f3 f913 	bl	8000c64 <__aeabi_ldivmod>
 800da3e:	2a00      	cmp	r2, #0
 800da40:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800da44:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 800da48:	bfb7      	itett	lt
 800da4a:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 800da4e:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 800da52:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 800da56:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 800da5a:	fbb2 f3f1 	udiv	r3, r2, r1
 800da5e:	fb01 2213 	mls	r2, r1, r3, r2
 800da62:	213c      	movs	r1, #60	@ 0x3c
 800da64:	60a3      	str	r3, [r4, #8]
 800da66:	fbb2 f3f1 	udiv	r3, r2, r1
 800da6a:	fb01 2213 	mls	r2, r1, r3, r2
 800da6e:	493e      	ldr	r1, [pc, #248]	@ (800db68 <gmtime_r+0x13c>)
 800da70:	6063      	str	r3, [r4, #4]
 800da72:	1cc3      	adds	r3, r0, #3
 800da74:	6022      	str	r2, [r4, #0]
 800da76:	2207      	movs	r2, #7
 800da78:	fb93 f2f2 	sdiv	r2, r3, r2
 800da7c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800da80:	1a9b      	subs	r3, r3, r2
 800da82:	d555      	bpl.n	800db30 <gmtime_r+0x104>
 800da84:	3307      	adds	r3, #7
 800da86:	61a3      	str	r3, [r4, #24]
 800da88:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 800da8c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 800da90:	fb93 f1f1 	sdiv	r1, r3, r1
 800da94:	4b35      	ldr	r3, [pc, #212]	@ (800db6c <gmtime_r+0x140>)
 800da96:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 800da9a:	f240 176d 	movw	r7, #365	@ 0x16d
 800da9e:	2664      	movs	r6, #100	@ 0x64
 800daa0:	fb03 0001 	mla	r0, r3, r1, r0
 800daa4:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 800daa8:	f04f 0805 	mov.w	r8, #5
 800daac:	fbb0 f3f3 	udiv	r3, r0, r3
 800dab0:	fbb0 f2fc 	udiv	r2, r0, ip
 800dab4:	4403      	add	r3, r0
 800dab6:	1a9b      	subs	r3, r3, r2
 800dab8:	4a2d      	ldr	r2, [pc, #180]	@ (800db70 <gmtime_r+0x144>)
 800daba:	fbb0 f2f2 	udiv	r2, r0, r2
 800dabe:	1a9b      	subs	r3, r3, r2
 800dac0:	fbb3 f2f7 	udiv	r2, r3, r7
 800dac4:	fbb3 f3fc 	udiv	r3, r3, ip
 800dac8:	fbb2 f5f6 	udiv	r5, r2, r6
 800dacc:	1aeb      	subs	r3, r5, r3
 800dace:	4403      	add	r3, r0
 800dad0:	2099      	movs	r0, #153	@ 0x99
 800dad2:	fb07 3312 	mls	r3, r7, r2, r3
 800dad6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800dada:	f103 0e01 	add.w	lr, r3, #1
 800dade:	3702      	adds	r7, #2
 800dae0:	fbb7 fcf0 	udiv	ip, r7, r0
 800dae4:	fb00 f00c 	mul.w	r0, r0, ip
 800dae8:	3002      	adds	r0, #2
 800daea:	fbb0 f0f8 	udiv	r0, r0, r8
 800daee:	ebae 0000 	sub.w	r0, lr, r0
 800daf2:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 800daf6:	4577      	cmp	r7, lr
 800daf8:	bf8c      	ite	hi
 800dafa:	f06f 0709 	mvnhi.w	r7, #9
 800dafe:	2702      	movls	r7, #2
 800db00:	4467      	add	r7, ip
 800db02:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 800db06:	fb0c 2101 	mla	r1, ip, r1, r2
 800db0a:	2f01      	cmp	r7, #1
 800db0c:	bf98      	it	ls
 800db0e:	3101      	addls	r1, #1
 800db10:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 800db14:	d312      	bcc.n	800db3c <gmtime_r+0x110>
 800db16:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800db1a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 800db1e:	61e3      	str	r3, [r4, #28]
 800db20:	2300      	movs	r3, #0
 800db22:	60e0      	str	r0, [r4, #12]
 800db24:	4620      	mov	r0, r4
 800db26:	6223      	str	r3, [r4, #32]
 800db28:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800db2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db30:	2800      	cmp	r0, #0
 800db32:	61a3      	str	r3, [r4, #24]
 800db34:	dba8      	blt.n	800da88 <gmtime_r+0x5c>
 800db36:	fb90 f1f1 	sdiv	r1, r0, r1
 800db3a:	e7ab      	b.n	800da94 <gmtime_r+0x68>
 800db3c:	f012 0f03 	tst.w	r2, #3
 800db40:	d102      	bne.n	800db48 <gmtime_r+0x11c>
 800db42:	fb06 2515 	mls	r5, r6, r5, r2
 800db46:	b95d      	cbnz	r5, 800db60 <gmtime_r+0x134>
 800db48:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800db4c:	fbb2 f6f5 	udiv	r6, r2, r5
 800db50:	fb05 2216 	mls	r2, r5, r6, r2
 800db54:	fab2 f282 	clz	r2, r2
 800db58:	0952      	lsrs	r2, r2, #5
 800db5a:	333b      	adds	r3, #59	@ 0x3b
 800db5c:	4413      	add	r3, r2
 800db5e:	e7dc      	b.n	800db1a <gmtime_r+0xee>
 800db60:	2201      	movs	r2, #1
 800db62:	e7fa      	b.n	800db5a <gmtime_r+0x12e>
 800db64:	00015180 	.word	0x00015180
 800db68:	00023ab1 	.word	0x00023ab1
 800db6c:	fffdc54f 	.word	0xfffdc54f
 800db70:	00023ab0 	.word	0x00023ab0

0800db74 <_sbrk_r>:
 800db74:	b538      	push	{r3, r4, r5, lr}
 800db76:	2300      	movs	r3, #0
 800db78:	4d05      	ldr	r5, [pc, #20]	@ (800db90 <_sbrk_r+0x1c>)
 800db7a:	4604      	mov	r4, r0
 800db7c:	4608      	mov	r0, r1
 800db7e:	602b      	str	r3, [r5, #0]
 800db80:	f7f4 fb04 	bl	800218c <_sbrk>
 800db84:	1c43      	adds	r3, r0, #1
 800db86:	d102      	bne.n	800db8e <_sbrk_r+0x1a>
 800db88:	682b      	ldr	r3, [r5, #0]
 800db8a:	b103      	cbz	r3, 800db8e <_sbrk_r+0x1a>
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	bd38      	pop	{r3, r4, r5, pc}
 800db90:	200005ac 	.word	0x200005ac

0800db94 <memcpy>:
 800db94:	440a      	add	r2, r1
 800db96:	1e43      	subs	r3, r0, #1
 800db98:	4291      	cmp	r1, r2
 800db9a:	d100      	bne.n	800db9e <memcpy+0xa>
 800db9c:	4770      	bx	lr
 800db9e:	b510      	push	{r4, lr}
 800dba0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dba4:	4291      	cmp	r1, r2
 800dba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbaa:	d1f9      	bne.n	800dba0 <memcpy+0xc>
 800dbac:	bd10      	pop	{r4, pc}
	...

0800dbb0 <nan>:
 800dbb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dbb8 <nan+0x8>
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	00000000 	.word	0x00000000
 800dbbc:	7ff80000 	.word	0x7ff80000

0800dbc0 <abort>:
 800dbc0:	2006      	movs	r0, #6
 800dbc2:	b508      	push	{r3, lr}
 800dbc4:	f000 fda4 	bl	800e710 <raise>
 800dbc8:	2001      	movs	r0, #1
 800dbca:	f7f4 fa67 	bl	800209c <_exit>

0800dbce <_calloc_r>:
 800dbce:	b570      	push	{r4, r5, r6, lr}
 800dbd0:	fba1 5402 	umull	r5, r4, r1, r2
 800dbd4:	b934      	cbnz	r4, 800dbe4 <_calloc_r+0x16>
 800dbd6:	4629      	mov	r1, r5
 800dbd8:	f7fd fd14 	bl	800b604 <_malloc_r>
 800dbdc:	4606      	mov	r6, r0
 800dbde:	b928      	cbnz	r0, 800dbec <_calloc_r+0x1e>
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	bd70      	pop	{r4, r5, r6, pc}
 800dbe4:	220c      	movs	r2, #12
 800dbe6:	2600      	movs	r6, #0
 800dbe8:	6002      	str	r2, [r0, #0]
 800dbea:	e7f9      	b.n	800dbe0 <_calloc_r+0x12>
 800dbec:	462a      	mov	r2, r5
 800dbee:	4621      	mov	r1, r4
 800dbf0:	f7fb fe87 	bl	8009902 <memset>
 800dbf4:	e7f4      	b.n	800dbe0 <_calloc_r+0x12>
	...

0800dbf8 <__env_lock>:
 800dbf8:	4801      	ldr	r0, [pc, #4]	@ (800dc00 <__env_lock+0x8>)
 800dbfa:	f7fc bd9b 	b.w	800a734 <__retarget_lock_acquire_recursive>
 800dbfe:	bf00      	nop
 800dc00:	200005b1 	.word	0x200005b1

0800dc04 <__env_unlock>:
 800dc04:	4801      	ldr	r0, [pc, #4]	@ (800dc0c <__env_unlock+0x8>)
 800dc06:	f7fc bd97 	b.w	800a738 <__retarget_lock_release_recursive>
 800dc0a:	bf00      	nop
 800dc0c:	200005b1 	.word	0x200005b1

0800dc10 <rshift>:
 800dc10:	6903      	ldr	r3, [r0, #16]
 800dc12:	114a      	asrs	r2, r1, #5
 800dc14:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dc18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc1c:	f100 0414 	add.w	r4, r0, #20
 800dc20:	dd45      	ble.n	800dcae <rshift+0x9e>
 800dc22:	f011 011f 	ands.w	r1, r1, #31
 800dc26:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc2a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc2e:	d10c      	bne.n	800dc4a <rshift+0x3a>
 800dc30:	f100 0710 	add.w	r7, r0, #16
 800dc34:	4629      	mov	r1, r5
 800dc36:	42b1      	cmp	r1, r6
 800dc38:	d334      	bcc.n	800dca4 <rshift+0x94>
 800dc3a:	1a9b      	subs	r3, r3, r2
 800dc3c:	1eea      	subs	r2, r5, #3
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	4296      	cmp	r6, r2
 800dc42:	bf38      	it	cc
 800dc44:	2300      	movcc	r3, #0
 800dc46:	4423      	add	r3, r4
 800dc48:	e015      	b.n	800dc76 <rshift+0x66>
 800dc4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc4e:	f1c1 0820 	rsb	r8, r1, #32
 800dc52:	f105 0e04 	add.w	lr, r5, #4
 800dc56:	46a1      	mov	r9, r4
 800dc58:	40cf      	lsrs	r7, r1
 800dc5a:	4576      	cmp	r6, lr
 800dc5c:	46f4      	mov	ip, lr
 800dc5e:	d815      	bhi.n	800dc8c <rshift+0x7c>
 800dc60:	1a9a      	subs	r2, r3, r2
 800dc62:	3501      	adds	r5, #1
 800dc64:	0092      	lsls	r2, r2, #2
 800dc66:	3a04      	subs	r2, #4
 800dc68:	42ae      	cmp	r6, r5
 800dc6a:	bf38      	it	cc
 800dc6c:	2200      	movcc	r2, #0
 800dc6e:	18a3      	adds	r3, r4, r2
 800dc70:	50a7      	str	r7, [r4, r2]
 800dc72:	b107      	cbz	r7, 800dc76 <rshift+0x66>
 800dc74:	3304      	adds	r3, #4
 800dc76:	1b1a      	subs	r2, r3, r4
 800dc78:	42a3      	cmp	r3, r4
 800dc7a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dc7e:	bf08      	it	eq
 800dc80:	2300      	moveq	r3, #0
 800dc82:	6102      	str	r2, [r0, #16]
 800dc84:	bf08      	it	eq
 800dc86:	6143      	streq	r3, [r0, #20]
 800dc88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc8c:	f8dc c000 	ldr.w	ip, [ip]
 800dc90:	fa0c fc08 	lsl.w	ip, ip, r8
 800dc94:	ea4c 0707 	orr.w	r7, ip, r7
 800dc98:	f849 7b04 	str.w	r7, [r9], #4
 800dc9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dca0:	40cf      	lsrs	r7, r1
 800dca2:	e7da      	b.n	800dc5a <rshift+0x4a>
 800dca4:	f851 cb04 	ldr.w	ip, [r1], #4
 800dca8:	f847 cf04 	str.w	ip, [r7, #4]!
 800dcac:	e7c3      	b.n	800dc36 <rshift+0x26>
 800dcae:	4623      	mov	r3, r4
 800dcb0:	e7e1      	b.n	800dc76 <rshift+0x66>

0800dcb2 <__hexdig_fun>:
 800dcb2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dcb6:	2b09      	cmp	r3, #9
 800dcb8:	d802      	bhi.n	800dcc0 <__hexdig_fun+0xe>
 800dcba:	3820      	subs	r0, #32
 800dcbc:	b2c0      	uxtb	r0, r0
 800dcbe:	4770      	bx	lr
 800dcc0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dcc4:	2b05      	cmp	r3, #5
 800dcc6:	d801      	bhi.n	800dccc <__hexdig_fun+0x1a>
 800dcc8:	3847      	subs	r0, #71	@ 0x47
 800dcca:	e7f7      	b.n	800dcbc <__hexdig_fun+0xa>
 800dccc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dcd0:	2b05      	cmp	r3, #5
 800dcd2:	d801      	bhi.n	800dcd8 <__hexdig_fun+0x26>
 800dcd4:	3827      	subs	r0, #39	@ 0x27
 800dcd6:	e7f1      	b.n	800dcbc <__hexdig_fun+0xa>
 800dcd8:	2000      	movs	r0, #0
 800dcda:	4770      	bx	lr

0800dcdc <__gethex>:
 800dcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce0:	b085      	sub	sp, #20
 800dce2:	468a      	mov	sl, r1
 800dce4:	4690      	mov	r8, r2
 800dce6:	9302      	str	r3, [sp, #8]
 800dce8:	680b      	ldr	r3, [r1, #0]
 800dcea:	9001      	str	r0, [sp, #4]
 800dcec:	1c9c      	adds	r4, r3, #2
 800dcee:	46a1      	mov	r9, r4
 800dcf0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dcf4:	2830      	cmp	r0, #48	@ 0x30
 800dcf6:	d0fa      	beq.n	800dcee <__gethex+0x12>
 800dcf8:	eba9 0303 	sub.w	r3, r9, r3
 800dcfc:	f1a3 0b02 	sub.w	fp, r3, #2
 800dd00:	f7ff ffd7 	bl	800dcb2 <__hexdig_fun>
 800dd04:	4605      	mov	r5, r0
 800dd06:	2800      	cmp	r0, #0
 800dd08:	d166      	bne.n	800ddd8 <__gethex+0xfc>
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	499e      	ldr	r1, [pc, #632]	@ (800df88 <__gethex+0x2ac>)
 800dd0e:	4648      	mov	r0, r9
 800dd10:	f7ff fe76 	bl	800da00 <strncmp>
 800dd14:	4607      	mov	r7, r0
 800dd16:	2800      	cmp	r0, #0
 800dd18:	d165      	bne.n	800dde6 <__gethex+0x10a>
 800dd1a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dd1e:	4626      	mov	r6, r4
 800dd20:	f7ff ffc7 	bl	800dcb2 <__hexdig_fun>
 800dd24:	2800      	cmp	r0, #0
 800dd26:	d060      	beq.n	800ddea <__gethex+0x10e>
 800dd28:	4623      	mov	r3, r4
 800dd2a:	7818      	ldrb	r0, [r3, #0]
 800dd2c:	4699      	mov	r9, r3
 800dd2e:	3301      	adds	r3, #1
 800dd30:	2830      	cmp	r0, #48	@ 0x30
 800dd32:	d0fa      	beq.n	800dd2a <__gethex+0x4e>
 800dd34:	f7ff ffbd 	bl	800dcb2 <__hexdig_fun>
 800dd38:	fab0 f580 	clz	r5, r0
 800dd3c:	f04f 0b01 	mov.w	fp, #1
 800dd40:	096d      	lsrs	r5, r5, #5
 800dd42:	464a      	mov	r2, r9
 800dd44:	4616      	mov	r6, r2
 800dd46:	3201      	adds	r2, #1
 800dd48:	7830      	ldrb	r0, [r6, #0]
 800dd4a:	f7ff ffb2 	bl	800dcb2 <__hexdig_fun>
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	d1f8      	bne.n	800dd44 <__gethex+0x68>
 800dd52:	2201      	movs	r2, #1
 800dd54:	498c      	ldr	r1, [pc, #560]	@ (800df88 <__gethex+0x2ac>)
 800dd56:	4630      	mov	r0, r6
 800dd58:	f7ff fe52 	bl	800da00 <strncmp>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d13e      	bne.n	800ddde <__gethex+0x102>
 800dd60:	b944      	cbnz	r4, 800dd74 <__gethex+0x98>
 800dd62:	1c74      	adds	r4, r6, #1
 800dd64:	4622      	mov	r2, r4
 800dd66:	4616      	mov	r6, r2
 800dd68:	3201      	adds	r2, #1
 800dd6a:	7830      	ldrb	r0, [r6, #0]
 800dd6c:	f7ff ffa1 	bl	800dcb2 <__hexdig_fun>
 800dd70:	2800      	cmp	r0, #0
 800dd72:	d1f8      	bne.n	800dd66 <__gethex+0x8a>
 800dd74:	1ba4      	subs	r4, r4, r6
 800dd76:	00a7      	lsls	r7, r4, #2
 800dd78:	7833      	ldrb	r3, [r6, #0]
 800dd7a:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dd7e:	2b50      	cmp	r3, #80	@ 0x50
 800dd80:	d13d      	bne.n	800ddfe <__gethex+0x122>
 800dd82:	7873      	ldrb	r3, [r6, #1]
 800dd84:	2b2b      	cmp	r3, #43	@ 0x2b
 800dd86:	d032      	beq.n	800ddee <__gethex+0x112>
 800dd88:	2b2d      	cmp	r3, #45	@ 0x2d
 800dd8a:	d033      	beq.n	800ddf4 <__gethex+0x118>
 800dd8c:	1c71      	adds	r1, r6, #1
 800dd8e:	2400      	movs	r4, #0
 800dd90:	7808      	ldrb	r0, [r1, #0]
 800dd92:	f7ff ff8e 	bl	800dcb2 <__hexdig_fun>
 800dd96:	1e43      	subs	r3, r0, #1
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	2b18      	cmp	r3, #24
 800dd9c:	d82f      	bhi.n	800ddfe <__gethex+0x122>
 800dd9e:	f1a0 0210 	sub.w	r2, r0, #16
 800dda2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dda6:	f7ff ff84 	bl	800dcb2 <__hexdig_fun>
 800ddaa:	f100 3cff 	add.w	ip, r0, #4294967295
 800ddae:	230a      	movs	r3, #10
 800ddb0:	fa5f fc8c 	uxtb.w	ip, ip
 800ddb4:	f1bc 0f18 	cmp.w	ip, #24
 800ddb8:	d91e      	bls.n	800ddf8 <__gethex+0x11c>
 800ddba:	b104      	cbz	r4, 800ddbe <__gethex+0xe2>
 800ddbc:	4252      	negs	r2, r2
 800ddbe:	4417      	add	r7, r2
 800ddc0:	f8ca 1000 	str.w	r1, [sl]
 800ddc4:	b1ed      	cbz	r5, 800de02 <__gethex+0x126>
 800ddc6:	f1bb 0f00 	cmp.w	fp, #0
 800ddca:	bf0c      	ite	eq
 800ddcc:	2506      	moveq	r5, #6
 800ddce:	2500      	movne	r5, #0
 800ddd0:	4628      	mov	r0, r5
 800ddd2:	b005      	add	sp, #20
 800ddd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd8:	2500      	movs	r5, #0
 800ddda:	462c      	mov	r4, r5
 800dddc:	e7b1      	b.n	800dd42 <__gethex+0x66>
 800ddde:	2c00      	cmp	r4, #0
 800dde0:	d1c8      	bne.n	800dd74 <__gethex+0x98>
 800dde2:	4627      	mov	r7, r4
 800dde4:	e7c8      	b.n	800dd78 <__gethex+0x9c>
 800dde6:	464e      	mov	r6, r9
 800dde8:	462f      	mov	r7, r5
 800ddea:	2501      	movs	r5, #1
 800ddec:	e7c4      	b.n	800dd78 <__gethex+0x9c>
 800ddee:	2400      	movs	r4, #0
 800ddf0:	1cb1      	adds	r1, r6, #2
 800ddf2:	e7cd      	b.n	800dd90 <__gethex+0xb4>
 800ddf4:	2401      	movs	r4, #1
 800ddf6:	e7fb      	b.n	800ddf0 <__gethex+0x114>
 800ddf8:	fb03 0002 	mla	r0, r3, r2, r0
 800ddfc:	e7cf      	b.n	800dd9e <__gethex+0xc2>
 800ddfe:	4631      	mov	r1, r6
 800de00:	e7de      	b.n	800ddc0 <__gethex+0xe4>
 800de02:	eba6 0309 	sub.w	r3, r6, r9
 800de06:	4629      	mov	r1, r5
 800de08:	3b01      	subs	r3, #1
 800de0a:	2b07      	cmp	r3, #7
 800de0c:	dc0a      	bgt.n	800de24 <__gethex+0x148>
 800de0e:	9801      	ldr	r0, [sp, #4]
 800de10:	f7fd fc84 	bl	800b71c <_Balloc>
 800de14:	4604      	mov	r4, r0
 800de16:	b940      	cbnz	r0, 800de2a <__gethex+0x14e>
 800de18:	4b5c      	ldr	r3, [pc, #368]	@ (800df8c <__gethex+0x2b0>)
 800de1a:	4602      	mov	r2, r0
 800de1c:	21e4      	movs	r1, #228	@ 0xe4
 800de1e:	485c      	ldr	r0, [pc, #368]	@ (800df90 <__gethex+0x2b4>)
 800de20:	f7fc fca8 	bl	800a774 <__assert_func>
 800de24:	3101      	adds	r1, #1
 800de26:	105b      	asrs	r3, r3, #1
 800de28:	e7ef      	b.n	800de0a <__gethex+0x12e>
 800de2a:	f100 0a14 	add.w	sl, r0, #20
 800de2e:	2300      	movs	r3, #0
 800de30:	4655      	mov	r5, sl
 800de32:	469b      	mov	fp, r3
 800de34:	45b1      	cmp	r9, r6
 800de36:	d337      	bcc.n	800dea8 <__gethex+0x1cc>
 800de38:	f845 bb04 	str.w	fp, [r5], #4
 800de3c:	eba5 050a 	sub.w	r5, r5, sl
 800de40:	4658      	mov	r0, fp
 800de42:	10ad      	asrs	r5, r5, #2
 800de44:	6125      	str	r5, [r4, #16]
 800de46:	016d      	lsls	r5, r5, #5
 800de48:	f7fd fd5c 	bl	800b904 <__hi0bits>
 800de4c:	f8d8 6000 	ldr.w	r6, [r8]
 800de50:	1a2d      	subs	r5, r5, r0
 800de52:	42b5      	cmp	r5, r6
 800de54:	dd54      	ble.n	800df00 <__gethex+0x224>
 800de56:	1bad      	subs	r5, r5, r6
 800de58:	4620      	mov	r0, r4
 800de5a:	4629      	mov	r1, r5
 800de5c:	f7fe f8f3 	bl	800c046 <__any_on>
 800de60:	4681      	mov	r9, r0
 800de62:	b178      	cbz	r0, 800de84 <__gethex+0x1a8>
 800de64:	1e6b      	subs	r3, r5, #1
 800de66:	f04f 0901 	mov.w	r9, #1
 800de6a:	1159      	asrs	r1, r3, #5
 800de6c:	f003 021f 	and.w	r2, r3, #31
 800de70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800de74:	fa09 f202 	lsl.w	r2, r9, r2
 800de78:	420a      	tst	r2, r1
 800de7a:	d003      	beq.n	800de84 <__gethex+0x1a8>
 800de7c:	454b      	cmp	r3, r9
 800de7e:	dc36      	bgt.n	800deee <__gethex+0x212>
 800de80:	f04f 0902 	mov.w	r9, #2
 800de84:	442f      	add	r7, r5
 800de86:	4629      	mov	r1, r5
 800de88:	4620      	mov	r0, r4
 800de8a:	f7ff fec1 	bl	800dc10 <rshift>
 800de8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de92:	42bb      	cmp	r3, r7
 800de94:	da42      	bge.n	800df1c <__gethex+0x240>
 800de96:	4621      	mov	r1, r4
 800de98:	9801      	ldr	r0, [sp, #4]
 800de9a:	f7fd fc7f 	bl	800b79c <_Bfree>
 800de9e:	2300      	movs	r3, #0
 800dea0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dea2:	25a3      	movs	r5, #163	@ 0xa3
 800dea4:	6013      	str	r3, [r2, #0]
 800dea6:	e793      	b.n	800ddd0 <__gethex+0xf4>
 800dea8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800deac:	2a2e      	cmp	r2, #46	@ 0x2e
 800deae:	d012      	beq.n	800ded6 <__gethex+0x1fa>
 800deb0:	2b20      	cmp	r3, #32
 800deb2:	d104      	bne.n	800debe <__gethex+0x1e2>
 800deb4:	f845 bb04 	str.w	fp, [r5], #4
 800deb8:	f04f 0b00 	mov.w	fp, #0
 800debc:	465b      	mov	r3, fp
 800debe:	7830      	ldrb	r0, [r6, #0]
 800dec0:	9303      	str	r3, [sp, #12]
 800dec2:	f7ff fef6 	bl	800dcb2 <__hexdig_fun>
 800dec6:	9b03      	ldr	r3, [sp, #12]
 800dec8:	f000 000f 	and.w	r0, r0, #15
 800decc:	4098      	lsls	r0, r3
 800dece:	3304      	adds	r3, #4
 800ded0:	ea4b 0b00 	orr.w	fp, fp, r0
 800ded4:	e7ae      	b.n	800de34 <__gethex+0x158>
 800ded6:	45b1      	cmp	r9, r6
 800ded8:	d8ea      	bhi.n	800deb0 <__gethex+0x1d4>
 800deda:	2201      	movs	r2, #1
 800dedc:	492a      	ldr	r1, [pc, #168]	@ (800df88 <__gethex+0x2ac>)
 800dede:	4630      	mov	r0, r6
 800dee0:	9303      	str	r3, [sp, #12]
 800dee2:	f7ff fd8d 	bl	800da00 <strncmp>
 800dee6:	9b03      	ldr	r3, [sp, #12]
 800dee8:	2800      	cmp	r0, #0
 800deea:	d1e1      	bne.n	800deb0 <__gethex+0x1d4>
 800deec:	e7a2      	b.n	800de34 <__gethex+0x158>
 800deee:	1ea9      	subs	r1, r5, #2
 800def0:	4620      	mov	r0, r4
 800def2:	f7fe f8a8 	bl	800c046 <__any_on>
 800def6:	2800      	cmp	r0, #0
 800def8:	d0c2      	beq.n	800de80 <__gethex+0x1a4>
 800defa:	f04f 0903 	mov.w	r9, #3
 800defe:	e7c1      	b.n	800de84 <__gethex+0x1a8>
 800df00:	da09      	bge.n	800df16 <__gethex+0x23a>
 800df02:	1b75      	subs	r5, r6, r5
 800df04:	4621      	mov	r1, r4
 800df06:	9801      	ldr	r0, [sp, #4]
 800df08:	462a      	mov	r2, r5
 800df0a:	1b7f      	subs	r7, r7, r5
 800df0c:	f7fd fe5a 	bl	800bbc4 <__lshift>
 800df10:	4604      	mov	r4, r0
 800df12:	f100 0a14 	add.w	sl, r0, #20
 800df16:	f04f 0900 	mov.w	r9, #0
 800df1a:	e7b8      	b.n	800de8e <__gethex+0x1b2>
 800df1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800df20:	42bd      	cmp	r5, r7
 800df22:	dd6f      	ble.n	800e004 <__gethex+0x328>
 800df24:	1bed      	subs	r5, r5, r7
 800df26:	42ae      	cmp	r6, r5
 800df28:	dc34      	bgt.n	800df94 <__gethex+0x2b8>
 800df2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df2e:	2b02      	cmp	r3, #2
 800df30:	d022      	beq.n	800df78 <__gethex+0x29c>
 800df32:	2b03      	cmp	r3, #3
 800df34:	d024      	beq.n	800df80 <__gethex+0x2a4>
 800df36:	2b01      	cmp	r3, #1
 800df38:	d115      	bne.n	800df66 <__gethex+0x28a>
 800df3a:	42ae      	cmp	r6, r5
 800df3c:	d113      	bne.n	800df66 <__gethex+0x28a>
 800df3e:	2e01      	cmp	r6, #1
 800df40:	d10b      	bne.n	800df5a <__gethex+0x27e>
 800df42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800df46:	2562      	movs	r5, #98	@ 0x62
 800df48:	9a02      	ldr	r2, [sp, #8]
 800df4a:	6013      	str	r3, [r2, #0]
 800df4c:	2301      	movs	r3, #1
 800df4e:	6123      	str	r3, [r4, #16]
 800df50:	f8ca 3000 	str.w	r3, [sl]
 800df54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df56:	601c      	str	r4, [r3, #0]
 800df58:	e73a      	b.n	800ddd0 <__gethex+0xf4>
 800df5a:	1e71      	subs	r1, r6, #1
 800df5c:	4620      	mov	r0, r4
 800df5e:	f7fe f872 	bl	800c046 <__any_on>
 800df62:	2800      	cmp	r0, #0
 800df64:	d1ed      	bne.n	800df42 <__gethex+0x266>
 800df66:	4621      	mov	r1, r4
 800df68:	9801      	ldr	r0, [sp, #4]
 800df6a:	f7fd fc17 	bl	800b79c <_Bfree>
 800df6e:	2300      	movs	r3, #0
 800df70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df72:	2550      	movs	r5, #80	@ 0x50
 800df74:	6013      	str	r3, [r2, #0]
 800df76:	e72b      	b.n	800ddd0 <__gethex+0xf4>
 800df78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d1f3      	bne.n	800df66 <__gethex+0x28a>
 800df7e:	e7e0      	b.n	800df42 <__gethex+0x266>
 800df80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df82:	2b00      	cmp	r3, #0
 800df84:	d1dd      	bne.n	800df42 <__gethex+0x266>
 800df86:	e7ee      	b.n	800df66 <__gethex+0x28a>
 800df88:	0800eb90 	.word	0x0800eb90
 800df8c:	0800eb26 	.word	0x0800eb26
 800df90:	0800ebc6 	.word	0x0800ebc6
 800df94:	1e6f      	subs	r7, r5, #1
 800df96:	f1b9 0f00 	cmp.w	r9, #0
 800df9a:	d130      	bne.n	800dffe <__gethex+0x322>
 800df9c:	b127      	cbz	r7, 800dfa8 <__gethex+0x2cc>
 800df9e:	4639      	mov	r1, r7
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	f7fe f850 	bl	800c046 <__any_on>
 800dfa6:	4681      	mov	r9, r0
 800dfa8:	117a      	asrs	r2, r7, #5
 800dfaa:	2301      	movs	r3, #1
 800dfac:	f007 071f 	and.w	r7, r7, #31
 800dfb0:	4629      	mov	r1, r5
 800dfb2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	40bb      	lsls	r3, r7
 800dfba:	1b76      	subs	r6, r6, r5
 800dfbc:	2502      	movs	r5, #2
 800dfbe:	4213      	tst	r3, r2
 800dfc0:	bf18      	it	ne
 800dfc2:	f049 0902 	orrne.w	r9, r9, #2
 800dfc6:	f7ff fe23 	bl	800dc10 <rshift>
 800dfca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dfce:	f1b9 0f00 	cmp.w	r9, #0
 800dfd2:	d047      	beq.n	800e064 <__gethex+0x388>
 800dfd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dfd8:	2b02      	cmp	r3, #2
 800dfda:	d015      	beq.n	800e008 <__gethex+0x32c>
 800dfdc:	2b03      	cmp	r3, #3
 800dfde:	d017      	beq.n	800e010 <__gethex+0x334>
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d109      	bne.n	800dff8 <__gethex+0x31c>
 800dfe4:	f019 0f02 	tst.w	r9, #2
 800dfe8:	d006      	beq.n	800dff8 <__gethex+0x31c>
 800dfea:	f8da 3000 	ldr.w	r3, [sl]
 800dfee:	ea49 0903 	orr.w	r9, r9, r3
 800dff2:	f019 0f01 	tst.w	r9, #1
 800dff6:	d10e      	bne.n	800e016 <__gethex+0x33a>
 800dff8:	f045 0510 	orr.w	r5, r5, #16
 800dffc:	e032      	b.n	800e064 <__gethex+0x388>
 800dffe:	f04f 0901 	mov.w	r9, #1
 800e002:	e7d1      	b.n	800dfa8 <__gethex+0x2cc>
 800e004:	2501      	movs	r5, #1
 800e006:	e7e2      	b.n	800dfce <__gethex+0x2f2>
 800e008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e00a:	f1c3 0301 	rsb	r3, r3, #1
 800e00e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e012:	2b00      	cmp	r3, #0
 800e014:	d0f0      	beq.n	800dff8 <__gethex+0x31c>
 800e016:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e01a:	f104 0314 	add.w	r3, r4, #20
 800e01e:	f04f 0c00 	mov.w	ip, #0
 800e022:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e026:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e02a:	4618      	mov	r0, r3
 800e02c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e030:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e034:	d01b      	beq.n	800e06e <__gethex+0x392>
 800e036:	3201      	adds	r2, #1
 800e038:	6002      	str	r2, [r0, #0]
 800e03a:	2d02      	cmp	r5, #2
 800e03c:	f104 0314 	add.w	r3, r4, #20
 800e040:	d13c      	bne.n	800e0bc <__gethex+0x3e0>
 800e042:	f8d8 2000 	ldr.w	r2, [r8]
 800e046:	3a01      	subs	r2, #1
 800e048:	42b2      	cmp	r2, r6
 800e04a:	d109      	bne.n	800e060 <__gethex+0x384>
 800e04c:	1171      	asrs	r1, r6, #5
 800e04e:	2201      	movs	r2, #1
 800e050:	f006 061f 	and.w	r6, r6, #31
 800e054:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e058:	fa02 f606 	lsl.w	r6, r2, r6
 800e05c:	421e      	tst	r6, r3
 800e05e:	d13a      	bne.n	800e0d6 <__gethex+0x3fa>
 800e060:	f045 0520 	orr.w	r5, r5, #32
 800e064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e066:	601c      	str	r4, [r3, #0]
 800e068:	9b02      	ldr	r3, [sp, #8]
 800e06a:	601f      	str	r7, [r3, #0]
 800e06c:	e6b0      	b.n	800ddd0 <__gethex+0xf4>
 800e06e:	4299      	cmp	r1, r3
 800e070:	f843 cc04 	str.w	ip, [r3, #-4]
 800e074:	d8d9      	bhi.n	800e02a <__gethex+0x34e>
 800e076:	68a3      	ldr	r3, [r4, #8]
 800e078:	459b      	cmp	fp, r3
 800e07a:	db17      	blt.n	800e0ac <__gethex+0x3d0>
 800e07c:	6861      	ldr	r1, [r4, #4]
 800e07e:	9801      	ldr	r0, [sp, #4]
 800e080:	3101      	adds	r1, #1
 800e082:	f7fd fb4b 	bl	800b71c <_Balloc>
 800e086:	4681      	mov	r9, r0
 800e088:	b918      	cbnz	r0, 800e092 <__gethex+0x3b6>
 800e08a:	4b1a      	ldr	r3, [pc, #104]	@ (800e0f4 <__gethex+0x418>)
 800e08c:	4602      	mov	r2, r0
 800e08e:	2184      	movs	r1, #132	@ 0x84
 800e090:	e6c5      	b.n	800de1e <__gethex+0x142>
 800e092:	6922      	ldr	r2, [r4, #16]
 800e094:	f104 010c 	add.w	r1, r4, #12
 800e098:	300c      	adds	r0, #12
 800e09a:	3202      	adds	r2, #2
 800e09c:	0092      	lsls	r2, r2, #2
 800e09e:	f7ff fd79 	bl	800db94 <memcpy>
 800e0a2:	4621      	mov	r1, r4
 800e0a4:	464c      	mov	r4, r9
 800e0a6:	9801      	ldr	r0, [sp, #4]
 800e0a8:	f7fd fb78 	bl	800b79c <_Bfree>
 800e0ac:	6923      	ldr	r3, [r4, #16]
 800e0ae:	1c5a      	adds	r2, r3, #1
 800e0b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e0b4:	6122      	str	r2, [r4, #16]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	615a      	str	r2, [r3, #20]
 800e0ba:	e7be      	b.n	800e03a <__gethex+0x35e>
 800e0bc:	6922      	ldr	r2, [r4, #16]
 800e0be:	455a      	cmp	r2, fp
 800e0c0:	dd0b      	ble.n	800e0da <__gethex+0x3fe>
 800e0c2:	2101      	movs	r1, #1
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f7ff fda3 	bl	800dc10 <rshift>
 800e0ca:	3701      	adds	r7, #1
 800e0cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e0d0:	42bb      	cmp	r3, r7
 800e0d2:	f6ff aee0 	blt.w	800de96 <__gethex+0x1ba>
 800e0d6:	2501      	movs	r5, #1
 800e0d8:	e7c2      	b.n	800e060 <__gethex+0x384>
 800e0da:	f016 061f 	ands.w	r6, r6, #31
 800e0de:	d0fa      	beq.n	800e0d6 <__gethex+0x3fa>
 800e0e0:	4453      	add	r3, sl
 800e0e2:	f1c6 0620 	rsb	r6, r6, #32
 800e0e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e0ea:	f7fd fc0b 	bl	800b904 <__hi0bits>
 800e0ee:	42b0      	cmp	r0, r6
 800e0f0:	dbe7      	blt.n	800e0c2 <__gethex+0x3e6>
 800e0f2:	e7f0      	b.n	800e0d6 <__gethex+0x3fa>
 800e0f4:	0800eb26 	.word	0x0800eb26

0800e0f8 <L_shift>:
 800e0f8:	f1c2 0208 	rsb	r2, r2, #8
 800e0fc:	0092      	lsls	r2, r2, #2
 800e0fe:	b570      	push	{r4, r5, r6, lr}
 800e100:	f1c2 0620 	rsb	r6, r2, #32
 800e104:	6843      	ldr	r3, [r0, #4]
 800e106:	6804      	ldr	r4, [r0, #0]
 800e108:	fa03 f506 	lsl.w	r5, r3, r6
 800e10c:	40d3      	lsrs	r3, r2
 800e10e:	432c      	orrs	r4, r5
 800e110:	6004      	str	r4, [r0, #0]
 800e112:	f840 3f04 	str.w	r3, [r0, #4]!
 800e116:	4288      	cmp	r0, r1
 800e118:	d3f4      	bcc.n	800e104 <L_shift+0xc>
 800e11a:	bd70      	pop	{r4, r5, r6, pc}

0800e11c <__match>:
 800e11c:	6803      	ldr	r3, [r0, #0]
 800e11e:	3301      	adds	r3, #1
 800e120:	b530      	push	{r4, r5, lr}
 800e122:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e126:	b914      	cbnz	r4, 800e12e <__match+0x12>
 800e128:	6003      	str	r3, [r0, #0]
 800e12a:	2001      	movs	r0, #1
 800e12c:	bd30      	pop	{r4, r5, pc}
 800e12e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e132:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e136:	2d19      	cmp	r5, #25
 800e138:	bf98      	it	ls
 800e13a:	3220      	addls	r2, #32
 800e13c:	42a2      	cmp	r2, r4
 800e13e:	d0f0      	beq.n	800e122 <__match+0x6>
 800e140:	2000      	movs	r0, #0
 800e142:	e7f3      	b.n	800e12c <__match+0x10>

0800e144 <__hexnan>:
 800e144:	680b      	ldr	r3, [r1, #0]
 800e146:	6801      	ldr	r1, [r0, #0]
 800e148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e14c:	115e      	asrs	r6, r3, #5
 800e14e:	f013 031f 	ands.w	r3, r3, #31
 800e152:	f04f 0500 	mov.w	r5, #0
 800e156:	b087      	sub	sp, #28
 800e158:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e15c:	4682      	mov	sl, r0
 800e15e:	4690      	mov	r8, r2
 800e160:	46ab      	mov	fp, r5
 800e162:	bf18      	it	ne
 800e164:	3604      	addne	r6, #4
 800e166:	9301      	str	r3, [sp, #4]
 800e168:	9502      	str	r5, [sp, #8]
 800e16a:	1f37      	subs	r7, r6, #4
 800e16c:	f846 5c04 	str.w	r5, [r6, #-4]
 800e170:	46b9      	mov	r9, r7
 800e172:	463c      	mov	r4, r7
 800e174:	1c4b      	adds	r3, r1, #1
 800e176:	784a      	ldrb	r2, [r1, #1]
 800e178:	9303      	str	r3, [sp, #12]
 800e17a:	b342      	cbz	r2, 800e1ce <__hexnan+0x8a>
 800e17c:	4610      	mov	r0, r2
 800e17e:	9105      	str	r1, [sp, #20]
 800e180:	9204      	str	r2, [sp, #16]
 800e182:	f7ff fd96 	bl	800dcb2 <__hexdig_fun>
 800e186:	2800      	cmp	r0, #0
 800e188:	d151      	bne.n	800e22e <__hexnan+0xea>
 800e18a:	9a04      	ldr	r2, [sp, #16]
 800e18c:	9905      	ldr	r1, [sp, #20]
 800e18e:	2a20      	cmp	r2, #32
 800e190:	d818      	bhi.n	800e1c4 <__hexnan+0x80>
 800e192:	9b02      	ldr	r3, [sp, #8]
 800e194:	459b      	cmp	fp, r3
 800e196:	dd13      	ble.n	800e1c0 <__hexnan+0x7c>
 800e198:	454c      	cmp	r4, r9
 800e19a:	d206      	bcs.n	800e1aa <__hexnan+0x66>
 800e19c:	2d07      	cmp	r5, #7
 800e19e:	dc04      	bgt.n	800e1aa <__hexnan+0x66>
 800e1a0:	462a      	mov	r2, r5
 800e1a2:	4649      	mov	r1, r9
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	f7ff ffa7 	bl	800e0f8 <L_shift>
 800e1aa:	4544      	cmp	r4, r8
 800e1ac:	d951      	bls.n	800e252 <__hexnan+0x10e>
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	f1a4 0904 	sub.w	r9, r4, #4
 800e1b4:	f8cd b008 	str.w	fp, [sp, #8]
 800e1b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1bc:	461d      	mov	r5, r3
 800e1be:	464c      	mov	r4, r9
 800e1c0:	9903      	ldr	r1, [sp, #12]
 800e1c2:	e7d7      	b.n	800e174 <__hexnan+0x30>
 800e1c4:	2a29      	cmp	r2, #41	@ 0x29
 800e1c6:	d156      	bne.n	800e276 <__hexnan+0x132>
 800e1c8:	3102      	adds	r1, #2
 800e1ca:	f8ca 1000 	str.w	r1, [sl]
 800e1ce:	f1bb 0f00 	cmp.w	fp, #0
 800e1d2:	d050      	beq.n	800e276 <__hexnan+0x132>
 800e1d4:	454c      	cmp	r4, r9
 800e1d6:	d206      	bcs.n	800e1e6 <__hexnan+0xa2>
 800e1d8:	2d07      	cmp	r5, #7
 800e1da:	dc04      	bgt.n	800e1e6 <__hexnan+0xa2>
 800e1dc:	462a      	mov	r2, r5
 800e1de:	4649      	mov	r1, r9
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	f7ff ff89 	bl	800e0f8 <L_shift>
 800e1e6:	4544      	cmp	r4, r8
 800e1e8:	d935      	bls.n	800e256 <__hexnan+0x112>
 800e1ea:	f1a8 0204 	sub.w	r2, r8, #4
 800e1ee:	4623      	mov	r3, r4
 800e1f0:	f853 1b04 	ldr.w	r1, [r3], #4
 800e1f4:	429f      	cmp	r7, r3
 800e1f6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e1fa:	d2f9      	bcs.n	800e1f0 <__hexnan+0xac>
 800e1fc:	1b3b      	subs	r3, r7, r4
 800e1fe:	3e03      	subs	r6, #3
 800e200:	3401      	adds	r4, #1
 800e202:	2200      	movs	r2, #0
 800e204:	f023 0303 	bic.w	r3, r3, #3
 800e208:	3304      	adds	r3, #4
 800e20a:	42b4      	cmp	r4, r6
 800e20c:	bf88      	it	hi
 800e20e:	2304      	movhi	r3, #4
 800e210:	4443      	add	r3, r8
 800e212:	f843 2b04 	str.w	r2, [r3], #4
 800e216:	429f      	cmp	r7, r3
 800e218:	d2fb      	bcs.n	800e212 <__hexnan+0xce>
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	b91b      	cbnz	r3, 800e226 <__hexnan+0xe2>
 800e21e:	4547      	cmp	r7, r8
 800e220:	d127      	bne.n	800e272 <__hexnan+0x12e>
 800e222:	2301      	movs	r3, #1
 800e224:	603b      	str	r3, [r7, #0]
 800e226:	2005      	movs	r0, #5
 800e228:	b007      	add	sp, #28
 800e22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e22e:	3501      	adds	r5, #1
 800e230:	f10b 0b01 	add.w	fp, fp, #1
 800e234:	2d08      	cmp	r5, #8
 800e236:	dd05      	ble.n	800e244 <__hexnan+0x100>
 800e238:	4544      	cmp	r4, r8
 800e23a:	d9c1      	bls.n	800e1c0 <__hexnan+0x7c>
 800e23c:	2300      	movs	r3, #0
 800e23e:	3c04      	subs	r4, #4
 800e240:	2501      	movs	r5, #1
 800e242:	6023      	str	r3, [r4, #0]
 800e244:	6822      	ldr	r2, [r4, #0]
 800e246:	f000 000f 	and.w	r0, r0, #15
 800e24a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e24e:	6020      	str	r0, [r4, #0]
 800e250:	e7b6      	b.n	800e1c0 <__hexnan+0x7c>
 800e252:	2508      	movs	r5, #8
 800e254:	e7b4      	b.n	800e1c0 <__hexnan+0x7c>
 800e256:	9b01      	ldr	r3, [sp, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d0de      	beq.n	800e21a <__hexnan+0xd6>
 800e25c:	f1c3 0320 	rsb	r3, r3, #32
 800e260:	f04f 32ff 	mov.w	r2, #4294967295
 800e264:	40da      	lsrs	r2, r3
 800e266:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e26a:	4013      	ands	r3, r2
 800e26c:	f846 3c04 	str.w	r3, [r6, #-4]
 800e270:	e7d3      	b.n	800e21a <__hexnan+0xd6>
 800e272:	3f04      	subs	r7, #4
 800e274:	e7d1      	b.n	800e21a <__hexnan+0xd6>
 800e276:	2004      	movs	r0, #4
 800e278:	e7d6      	b.n	800e228 <__hexnan+0xe4>

0800e27a <__ascii_mbtowc>:
 800e27a:	b082      	sub	sp, #8
 800e27c:	b901      	cbnz	r1, 800e280 <__ascii_mbtowc+0x6>
 800e27e:	a901      	add	r1, sp, #4
 800e280:	b142      	cbz	r2, 800e294 <__ascii_mbtowc+0x1a>
 800e282:	b14b      	cbz	r3, 800e298 <__ascii_mbtowc+0x1e>
 800e284:	7813      	ldrb	r3, [r2, #0]
 800e286:	600b      	str	r3, [r1, #0]
 800e288:	7812      	ldrb	r2, [r2, #0]
 800e28a:	1e10      	subs	r0, r2, #0
 800e28c:	bf18      	it	ne
 800e28e:	2001      	movne	r0, #1
 800e290:	b002      	add	sp, #8
 800e292:	4770      	bx	lr
 800e294:	4610      	mov	r0, r2
 800e296:	e7fb      	b.n	800e290 <__ascii_mbtowc+0x16>
 800e298:	f06f 0001 	mvn.w	r0, #1
 800e29c:	e7f8      	b.n	800e290 <__ascii_mbtowc+0x16>

0800e29e <_realloc_r>:
 800e29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2a2:	4607      	mov	r7, r0
 800e2a4:	4614      	mov	r4, r2
 800e2a6:	460d      	mov	r5, r1
 800e2a8:	b921      	cbnz	r1, 800e2b4 <_realloc_r+0x16>
 800e2aa:	4611      	mov	r1, r2
 800e2ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b0:	f7fd b9a8 	b.w	800b604 <_malloc_r>
 800e2b4:	b92a      	cbnz	r2, 800e2c2 <_realloc_r+0x24>
 800e2b6:	4625      	mov	r5, r4
 800e2b8:	f7fd f8e4 	bl	800b484 <_free_r>
 800e2bc:	4628      	mov	r0, r5
 800e2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2c2:	f000 fa41 	bl	800e748 <_malloc_usable_size_r>
 800e2c6:	4284      	cmp	r4, r0
 800e2c8:	4606      	mov	r6, r0
 800e2ca:	d802      	bhi.n	800e2d2 <_realloc_r+0x34>
 800e2cc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2d0:	d8f4      	bhi.n	800e2bc <_realloc_r+0x1e>
 800e2d2:	4621      	mov	r1, r4
 800e2d4:	4638      	mov	r0, r7
 800e2d6:	f7fd f995 	bl	800b604 <_malloc_r>
 800e2da:	4680      	mov	r8, r0
 800e2dc:	b908      	cbnz	r0, 800e2e2 <_realloc_r+0x44>
 800e2de:	4645      	mov	r5, r8
 800e2e0:	e7ec      	b.n	800e2bc <_realloc_r+0x1e>
 800e2e2:	42b4      	cmp	r4, r6
 800e2e4:	4622      	mov	r2, r4
 800e2e6:	4629      	mov	r1, r5
 800e2e8:	bf28      	it	cs
 800e2ea:	4632      	movcs	r2, r6
 800e2ec:	f7ff fc52 	bl	800db94 <memcpy>
 800e2f0:	4629      	mov	r1, r5
 800e2f2:	4638      	mov	r0, r7
 800e2f4:	f7fd f8c6 	bl	800b484 <_free_r>
 800e2f8:	e7f1      	b.n	800e2de <_realloc_r+0x40>

0800e2fa <__ascii_wctomb>:
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	4608      	mov	r0, r1
 800e2fe:	b141      	cbz	r1, 800e312 <__ascii_wctomb+0x18>
 800e300:	2aff      	cmp	r2, #255	@ 0xff
 800e302:	d904      	bls.n	800e30e <__ascii_wctomb+0x14>
 800e304:	228a      	movs	r2, #138	@ 0x8a
 800e306:	f04f 30ff 	mov.w	r0, #4294967295
 800e30a:	601a      	str	r2, [r3, #0]
 800e30c:	4770      	bx	lr
 800e30e:	2001      	movs	r0, #1
 800e310:	700a      	strb	r2, [r1, #0]
 800e312:	4770      	bx	lr

0800e314 <__sfputc_r>:
 800e314:	6893      	ldr	r3, [r2, #8]
 800e316:	3b01      	subs	r3, #1
 800e318:	2b00      	cmp	r3, #0
 800e31a:	b410      	push	{r4}
 800e31c:	6093      	str	r3, [r2, #8]
 800e31e:	da08      	bge.n	800e332 <__sfputc_r+0x1e>
 800e320:	6994      	ldr	r4, [r2, #24]
 800e322:	42a3      	cmp	r3, r4
 800e324:	db01      	blt.n	800e32a <__sfputc_r+0x16>
 800e326:	290a      	cmp	r1, #10
 800e328:	d103      	bne.n	800e332 <__sfputc_r+0x1e>
 800e32a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e32e:	f000 b933 	b.w	800e598 <__swbuf_r>
 800e332:	6813      	ldr	r3, [r2, #0]
 800e334:	1c58      	adds	r0, r3, #1
 800e336:	6010      	str	r0, [r2, #0]
 800e338:	4608      	mov	r0, r1
 800e33a:	7019      	strb	r1, [r3, #0]
 800e33c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e340:	4770      	bx	lr

0800e342 <__sfputs_r>:
 800e342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e344:	4606      	mov	r6, r0
 800e346:	460f      	mov	r7, r1
 800e348:	4614      	mov	r4, r2
 800e34a:	18d5      	adds	r5, r2, r3
 800e34c:	42ac      	cmp	r4, r5
 800e34e:	d101      	bne.n	800e354 <__sfputs_r+0x12>
 800e350:	2000      	movs	r0, #0
 800e352:	e007      	b.n	800e364 <__sfputs_r+0x22>
 800e354:	463a      	mov	r2, r7
 800e356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e35a:	4630      	mov	r0, r6
 800e35c:	f7ff ffda 	bl	800e314 <__sfputc_r>
 800e360:	1c43      	adds	r3, r0, #1
 800e362:	d1f3      	bne.n	800e34c <__sfputs_r+0xa>
 800e364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e368 <_vfiprintf_r>:
 800e368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e36c:	460d      	mov	r5, r1
 800e36e:	b09d      	sub	sp, #116	@ 0x74
 800e370:	4614      	mov	r4, r2
 800e372:	4698      	mov	r8, r3
 800e374:	4606      	mov	r6, r0
 800e376:	b118      	cbz	r0, 800e380 <_vfiprintf_r+0x18>
 800e378:	6a03      	ldr	r3, [r0, #32]
 800e37a:	b90b      	cbnz	r3, 800e380 <_vfiprintf_r+0x18>
 800e37c:	f7fb f9c2 	bl	8009704 <__sinit>
 800e380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e382:	07d9      	lsls	r1, r3, #31
 800e384:	d405      	bmi.n	800e392 <_vfiprintf_r+0x2a>
 800e386:	89ab      	ldrh	r3, [r5, #12]
 800e388:	059a      	lsls	r2, r3, #22
 800e38a:	d402      	bmi.n	800e392 <_vfiprintf_r+0x2a>
 800e38c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e38e:	f7fc f9d1 	bl	800a734 <__retarget_lock_acquire_recursive>
 800e392:	89ab      	ldrh	r3, [r5, #12]
 800e394:	071b      	lsls	r3, r3, #28
 800e396:	d501      	bpl.n	800e39c <_vfiprintf_r+0x34>
 800e398:	692b      	ldr	r3, [r5, #16]
 800e39a:	b99b      	cbnz	r3, 800e3c4 <_vfiprintf_r+0x5c>
 800e39c:	4629      	mov	r1, r5
 800e39e:	4630      	mov	r0, r6
 800e3a0:	f000 f938 	bl	800e614 <__swsetup_r>
 800e3a4:	b170      	cbz	r0, 800e3c4 <_vfiprintf_r+0x5c>
 800e3a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3a8:	07dc      	lsls	r4, r3, #31
 800e3aa:	d504      	bpl.n	800e3b6 <_vfiprintf_r+0x4e>
 800e3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e3b0:	b01d      	add	sp, #116	@ 0x74
 800e3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b6:	89ab      	ldrh	r3, [r5, #12]
 800e3b8:	0598      	lsls	r0, r3, #22
 800e3ba:	d4f7      	bmi.n	800e3ac <_vfiprintf_r+0x44>
 800e3bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3be:	f7fc f9bb 	bl	800a738 <__retarget_lock_release_recursive>
 800e3c2:	e7f3      	b.n	800e3ac <_vfiprintf_r+0x44>
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3ca:	f04f 0901 	mov.w	r9, #1
 800e3ce:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800e584 <_vfiprintf_r+0x21c>
 800e3d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3d4:	2320      	movs	r3, #32
 800e3d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3da:	2330      	movs	r3, #48	@ 0x30
 800e3dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3e0:	4623      	mov	r3, r4
 800e3e2:	469a      	mov	sl, r3
 800e3e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3e8:	b10a      	cbz	r2, 800e3ee <_vfiprintf_r+0x86>
 800e3ea:	2a25      	cmp	r2, #37	@ 0x25
 800e3ec:	d1f9      	bne.n	800e3e2 <_vfiprintf_r+0x7a>
 800e3ee:	ebba 0b04 	subs.w	fp, sl, r4
 800e3f2:	d00b      	beq.n	800e40c <_vfiprintf_r+0xa4>
 800e3f4:	465b      	mov	r3, fp
 800e3f6:	4622      	mov	r2, r4
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f7ff ffa1 	bl	800e342 <__sfputs_r>
 800e400:	3001      	adds	r0, #1
 800e402:	f000 80a7 	beq.w	800e554 <_vfiprintf_r+0x1ec>
 800e406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e408:	445a      	add	r2, fp
 800e40a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e40c:	f89a 3000 	ldrb.w	r3, [sl]
 800e410:	2b00      	cmp	r3, #0
 800e412:	f000 809f 	beq.w	800e554 <_vfiprintf_r+0x1ec>
 800e416:	2300      	movs	r3, #0
 800e418:	f04f 32ff 	mov.w	r2, #4294967295
 800e41c:	f10a 0a01 	add.w	sl, sl, #1
 800e420:	9304      	str	r3, [sp, #16]
 800e422:	9307      	str	r3, [sp, #28]
 800e424:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e428:	931a      	str	r3, [sp, #104]	@ 0x68
 800e42a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e42e:	4654      	mov	r4, sl
 800e430:	2205      	movs	r2, #5
 800e432:	4854      	ldr	r0, [pc, #336]	@ (800e584 <_vfiprintf_r+0x21c>)
 800e434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e438:	f7fc f987 	bl	800a74a <memchr>
 800e43c:	9a04      	ldr	r2, [sp, #16]
 800e43e:	b9d8      	cbnz	r0, 800e478 <_vfiprintf_r+0x110>
 800e440:	06d1      	lsls	r1, r2, #27
 800e442:	bf44      	itt	mi
 800e444:	2320      	movmi	r3, #32
 800e446:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e44a:	0713      	lsls	r3, r2, #28
 800e44c:	bf44      	itt	mi
 800e44e:	232b      	movmi	r3, #43	@ 0x2b
 800e450:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e454:	f89a 3000 	ldrb.w	r3, [sl]
 800e458:	2b2a      	cmp	r3, #42	@ 0x2a
 800e45a:	d015      	beq.n	800e488 <_vfiprintf_r+0x120>
 800e45c:	9a07      	ldr	r2, [sp, #28]
 800e45e:	4654      	mov	r4, sl
 800e460:	2000      	movs	r0, #0
 800e462:	f04f 0c0a 	mov.w	ip, #10
 800e466:	4621      	mov	r1, r4
 800e468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e46c:	3b30      	subs	r3, #48	@ 0x30
 800e46e:	2b09      	cmp	r3, #9
 800e470:	d94b      	bls.n	800e50a <_vfiprintf_r+0x1a2>
 800e472:	b1b0      	cbz	r0, 800e4a2 <_vfiprintf_r+0x13a>
 800e474:	9207      	str	r2, [sp, #28]
 800e476:	e014      	b.n	800e4a2 <_vfiprintf_r+0x13a>
 800e478:	eba0 0308 	sub.w	r3, r0, r8
 800e47c:	46a2      	mov	sl, r4
 800e47e:	fa09 f303 	lsl.w	r3, r9, r3
 800e482:	4313      	orrs	r3, r2
 800e484:	9304      	str	r3, [sp, #16]
 800e486:	e7d2      	b.n	800e42e <_vfiprintf_r+0xc6>
 800e488:	9b03      	ldr	r3, [sp, #12]
 800e48a:	1d19      	adds	r1, r3, #4
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	9103      	str	r1, [sp, #12]
 800e492:	bfbb      	ittet	lt
 800e494:	425b      	neglt	r3, r3
 800e496:	f042 0202 	orrlt.w	r2, r2, #2
 800e49a:	9307      	strge	r3, [sp, #28]
 800e49c:	9307      	strlt	r3, [sp, #28]
 800e49e:	bfb8      	it	lt
 800e4a0:	9204      	strlt	r2, [sp, #16]
 800e4a2:	7823      	ldrb	r3, [r4, #0]
 800e4a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4a6:	d10a      	bne.n	800e4be <_vfiprintf_r+0x156>
 800e4a8:	7863      	ldrb	r3, [r4, #1]
 800e4aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4ac:	d132      	bne.n	800e514 <_vfiprintf_r+0x1ac>
 800e4ae:	9b03      	ldr	r3, [sp, #12]
 800e4b0:	3402      	adds	r4, #2
 800e4b2:	1d1a      	adds	r2, r3, #4
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4ba:	9203      	str	r2, [sp, #12]
 800e4bc:	9305      	str	r3, [sp, #20]
 800e4be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e594 <_vfiprintf_r+0x22c>
 800e4c2:	2203      	movs	r2, #3
 800e4c4:	7821      	ldrb	r1, [r4, #0]
 800e4c6:	4650      	mov	r0, sl
 800e4c8:	f7fc f93f 	bl	800a74a <memchr>
 800e4cc:	b138      	cbz	r0, 800e4de <_vfiprintf_r+0x176>
 800e4ce:	eba0 000a 	sub.w	r0, r0, sl
 800e4d2:	2240      	movs	r2, #64	@ 0x40
 800e4d4:	9b04      	ldr	r3, [sp, #16]
 800e4d6:	3401      	adds	r4, #1
 800e4d8:	4082      	lsls	r2, r0
 800e4da:	4313      	orrs	r3, r2
 800e4dc:	9304      	str	r3, [sp, #16]
 800e4de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4e2:	2206      	movs	r2, #6
 800e4e4:	4828      	ldr	r0, [pc, #160]	@ (800e588 <_vfiprintf_r+0x220>)
 800e4e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4ea:	f7fc f92e 	bl	800a74a <memchr>
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	d03f      	beq.n	800e572 <_vfiprintf_r+0x20a>
 800e4f2:	4b26      	ldr	r3, [pc, #152]	@ (800e58c <_vfiprintf_r+0x224>)
 800e4f4:	bb1b      	cbnz	r3, 800e53e <_vfiprintf_r+0x1d6>
 800e4f6:	9b03      	ldr	r3, [sp, #12]
 800e4f8:	3307      	adds	r3, #7
 800e4fa:	f023 0307 	bic.w	r3, r3, #7
 800e4fe:	3308      	adds	r3, #8
 800e500:	9303      	str	r3, [sp, #12]
 800e502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e504:	443b      	add	r3, r7
 800e506:	9309      	str	r3, [sp, #36]	@ 0x24
 800e508:	e76a      	b.n	800e3e0 <_vfiprintf_r+0x78>
 800e50a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e50e:	460c      	mov	r4, r1
 800e510:	2001      	movs	r0, #1
 800e512:	e7a8      	b.n	800e466 <_vfiprintf_r+0xfe>
 800e514:	2300      	movs	r3, #0
 800e516:	3401      	adds	r4, #1
 800e518:	f04f 0c0a 	mov.w	ip, #10
 800e51c:	4619      	mov	r1, r3
 800e51e:	9305      	str	r3, [sp, #20]
 800e520:	4620      	mov	r0, r4
 800e522:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e526:	3a30      	subs	r2, #48	@ 0x30
 800e528:	2a09      	cmp	r2, #9
 800e52a:	d903      	bls.n	800e534 <_vfiprintf_r+0x1cc>
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d0c6      	beq.n	800e4be <_vfiprintf_r+0x156>
 800e530:	9105      	str	r1, [sp, #20]
 800e532:	e7c4      	b.n	800e4be <_vfiprintf_r+0x156>
 800e534:	fb0c 2101 	mla	r1, ip, r1, r2
 800e538:	4604      	mov	r4, r0
 800e53a:	2301      	movs	r3, #1
 800e53c:	e7f0      	b.n	800e520 <_vfiprintf_r+0x1b8>
 800e53e:	ab03      	add	r3, sp, #12
 800e540:	462a      	mov	r2, r5
 800e542:	a904      	add	r1, sp, #16
 800e544:	4630      	mov	r0, r6
 800e546:	9300      	str	r3, [sp, #0]
 800e548:	4b11      	ldr	r3, [pc, #68]	@ (800e590 <_vfiprintf_r+0x228>)
 800e54a:	f7fa fa87 	bl	8008a5c <_printf_float>
 800e54e:	4607      	mov	r7, r0
 800e550:	1c78      	adds	r0, r7, #1
 800e552:	d1d6      	bne.n	800e502 <_vfiprintf_r+0x19a>
 800e554:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e556:	07d9      	lsls	r1, r3, #31
 800e558:	d405      	bmi.n	800e566 <_vfiprintf_r+0x1fe>
 800e55a:	89ab      	ldrh	r3, [r5, #12]
 800e55c:	059a      	lsls	r2, r3, #22
 800e55e:	d402      	bmi.n	800e566 <_vfiprintf_r+0x1fe>
 800e560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e562:	f7fc f8e9 	bl	800a738 <__retarget_lock_release_recursive>
 800e566:	89ab      	ldrh	r3, [r5, #12]
 800e568:	065b      	lsls	r3, r3, #25
 800e56a:	f53f af1f 	bmi.w	800e3ac <_vfiprintf_r+0x44>
 800e56e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e570:	e71e      	b.n	800e3b0 <_vfiprintf_r+0x48>
 800e572:	ab03      	add	r3, sp, #12
 800e574:	462a      	mov	r2, r5
 800e576:	a904      	add	r1, sp, #16
 800e578:	4630      	mov	r0, r6
 800e57a:	9300      	str	r3, [sp, #0]
 800e57c:	4b04      	ldr	r3, [pc, #16]	@ (800e590 <_vfiprintf_r+0x228>)
 800e57e:	f7fa fd09 	bl	8008f94 <_printf_i>
 800e582:	e7e4      	b.n	800e54e <_vfiprintf_r+0x1e6>
 800e584:	0800eb92 	.word	0x0800eb92
 800e588:	0800eb9c 	.word	0x0800eb9c
 800e58c:	08008a5d 	.word	0x08008a5d
 800e590:	0800e343 	.word	0x0800e343
 800e594:	0800eb98 	.word	0x0800eb98

0800e598 <__swbuf_r>:
 800e598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e59a:	460e      	mov	r6, r1
 800e59c:	4614      	mov	r4, r2
 800e59e:	4605      	mov	r5, r0
 800e5a0:	b118      	cbz	r0, 800e5aa <__swbuf_r+0x12>
 800e5a2:	6a03      	ldr	r3, [r0, #32]
 800e5a4:	b90b      	cbnz	r3, 800e5aa <__swbuf_r+0x12>
 800e5a6:	f7fb f8ad 	bl	8009704 <__sinit>
 800e5aa:	69a3      	ldr	r3, [r4, #24]
 800e5ac:	60a3      	str	r3, [r4, #8]
 800e5ae:	89a3      	ldrh	r3, [r4, #12]
 800e5b0:	071a      	lsls	r2, r3, #28
 800e5b2:	d501      	bpl.n	800e5b8 <__swbuf_r+0x20>
 800e5b4:	6923      	ldr	r3, [r4, #16]
 800e5b6:	b943      	cbnz	r3, 800e5ca <__swbuf_r+0x32>
 800e5b8:	4621      	mov	r1, r4
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	f000 f82a 	bl	800e614 <__swsetup_r>
 800e5c0:	b118      	cbz	r0, 800e5ca <__swbuf_r+0x32>
 800e5c2:	f04f 37ff 	mov.w	r7, #4294967295
 800e5c6:	4638      	mov	r0, r7
 800e5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5ca:	6823      	ldr	r3, [r4, #0]
 800e5cc:	b2f6      	uxtb	r6, r6
 800e5ce:	6922      	ldr	r2, [r4, #16]
 800e5d0:	4637      	mov	r7, r6
 800e5d2:	1a98      	subs	r0, r3, r2
 800e5d4:	6963      	ldr	r3, [r4, #20]
 800e5d6:	4283      	cmp	r3, r0
 800e5d8:	dc05      	bgt.n	800e5e6 <__swbuf_r+0x4e>
 800e5da:	4621      	mov	r1, r4
 800e5dc:	4628      	mov	r0, r5
 800e5de:	f7ff f94b 	bl	800d878 <_fflush_r>
 800e5e2:	2800      	cmp	r0, #0
 800e5e4:	d1ed      	bne.n	800e5c2 <__swbuf_r+0x2a>
 800e5e6:	68a3      	ldr	r3, [r4, #8]
 800e5e8:	3b01      	subs	r3, #1
 800e5ea:	60a3      	str	r3, [r4, #8]
 800e5ec:	6823      	ldr	r3, [r4, #0]
 800e5ee:	1c5a      	adds	r2, r3, #1
 800e5f0:	6022      	str	r2, [r4, #0]
 800e5f2:	701e      	strb	r6, [r3, #0]
 800e5f4:	1c43      	adds	r3, r0, #1
 800e5f6:	6962      	ldr	r2, [r4, #20]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d004      	beq.n	800e606 <__swbuf_r+0x6e>
 800e5fc:	89a3      	ldrh	r3, [r4, #12]
 800e5fe:	07db      	lsls	r3, r3, #31
 800e600:	d5e1      	bpl.n	800e5c6 <__swbuf_r+0x2e>
 800e602:	2e0a      	cmp	r6, #10
 800e604:	d1df      	bne.n	800e5c6 <__swbuf_r+0x2e>
 800e606:	4621      	mov	r1, r4
 800e608:	4628      	mov	r0, r5
 800e60a:	f7ff f935 	bl	800d878 <_fflush_r>
 800e60e:	2800      	cmp	r0, #0
 800e610:	d0d9      	beq.n	800e5c6 <__swbuf_r+0x2e>
 800e612:	e7d6      	b.n	800e5c2 <__swbuf_r+0x2a>

0800e614 <__swsetup_r>:
 800e614:	b538      	push	{r3, r4, r5, lr}
 800e616:	4b29      	ldr	r3, [pc, #164]	@ (800e6bc <__swsetup_r+0xa8>)
 800e618:	4605      	mov	r5, r0
 800e61a:	460c      	mov	r4, r1
 800e61c:	6818      	ldr	r0, [r3, #0]
 800e61e:	b118      	cbz	r0, 800e628 <__swsetup_r+0x14>
 800e620:	6a03      	ldr	r3, [r0, #32]
 800e622:	b90b      	cbnz	r3, 800e628 <__swsetup_r+0x14>
 800e624:	f7fb f86e 	bl	8009704 <__sinit>
 800e628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e62c:	0719      	lsls	r1, r3, #28
 800e62e:	d422      	bmi.n	800e676 <__swsetup_r+0x62>
 800e630:	06da      	lsls	r2, r3, #27
 800e632:	d407      	bmi.n	800e644 <__swsetup_r+0x30>
 800e634:	2209      	movs	r2, #9
 800e636:	602a      	str	r2, [r5, #0]
 800e638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e63c:	f04f 30ff 	mov.w	r0, #4294967295
 800e640:	81a3      	strh	r3, [r4, #12]
 800e642:	e033      	b.n	800e6ac <__swsetup_r+0x98>
 800e644:	0758      	lsls	r0, r3, #29
 800e646:	d512      	bpl.n	800e66e <__swsetup_r+0x5a>
 800e648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e64a:	b141      	cbz	r1, 800e65e <__swsetup_r+0x4a>
 800e64c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e650:	4299      	cmp	r1, r3
 800e652:	d002      	beq.n	800e65a <__swsetup_r+0x46>
 800e654:	4628      	mov	r0, r5
 800e656:	f7fc ff15 	bl	800b484 <_free_r>
 800e65a:	2300      	movs	r3, #0
 800e65c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e65e:	89a3      	ldrh	r3, [r4, #12]
 800e660:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e664:	81a3      	strh	r3, [r4, #12]
 800e666:	2300      	movs	r3, #0
 800e668:	6063      	str	r3, [r4, #4]
 800e66a:	6923      	ldr	r3, [r4, #16]
 800e66c:	6023      	str	r3, [r4, #0]
 800e66e:	89a3      	ldrh	r3, [r4, #12]
 800e670:	f043 0308 	orr.w	r3, r3, #8
 800e674:	81a3      	strh	r3, [r4, #12]
 800e676:	6923      	ldr	r3, [r4, #16]
 800e678:	b94b      	cbnz	r3, 800e68e <__swsetup_r+0x7a>
 800e67a:	89a3      	ldrh	r3, [r4, #12]
 800e67c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e684:	d003      	beq.n	800e68e <__swsetup_r+0x7a>
 800e686:	4621      	mov	r1, r4
 800e688:	4628      	mov	r0, r5
 800e68a:	f000 f88a 	bl	800e7a2 <__smakebuf_r>
 800e68e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e692:	f013 0201 	ands.w	r2, r3, #1
 800e696:	d00a      	beq.n	800e6ae <__swsetup_r+0x9a>
 800e698:	2200      	movs	r2, #0
 800e69a:	60a2      	str	r2, [r4, #8]
 800e69c:	6962      	ldr	r2, [r4, #20]
 800e69e:	4252      	negs	r2, r2
 800e6a0:	61a2      	str	r2, [r4, #24]
 800e6a2:	6922      	ldr	r2, [r4, #16]
 800e6a4:	b942      	cbnz	r2, 800e6b8 <__swsetup_r+0xa4>
 800e6a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e6aa:	d1c5      	bne.n	800e638 <__swsetup_r+0x24>
 800e6ac:	bd38      	pop	{r3, r4, r5, pc}
 800e6ae:	0799      	lsls	r1, r3, #30
 800e6b0:	bf58      	it	pl
 800e6b2:	6962      	ldrpl	r2, [r4, #20]
 800e6b4:	60a2      	str	r2, [r4, #8]
 800e6b6:	e7f4      	b.n	800e6a2 <__swsetup_r+0x8e>
 800e6b8:	2000      	movs	r0, #0
 800e6ba:	e7f7      	b.n	800e6ac <__swsetup_r+0x98>
 800e6bc:	20000040 	.word	0x20000040

0800e6c0 <_raise_r>:
 800e6c0:	291f      	cmp	r1, #31
 800e6c2:	b538      	push	{r3, r4, r5, lr}
 800e6c4:	4605      	mov	r5, r0
 800e6c6:	460c      	mov	r4, r1
 800e6c8:	d904      	bls.n	800e6d4 <_raise_r+0x14>
 800e6ca:	2316      	movs	r3, #22
 800e6cc:	6003      	str	r3, [r0, #0]
 800e6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d2:	bd38      	pop	{r3, r4, r5, pc}
 800e6d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e6d6:	b112      	cbz	r2, 800e6de <_raise_r+0x1e>
 800e6d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6dc:	b94b      	cbnz	r3, 800e6f2 <_raise_r+0x32>
 800e6de:	4628      	mov	r0, r5
 800e6e0:	f000 f830 	bl	800e744 <_getpid_r>
 800e6e4:	4622      	mov	r2, r4
 800e6e6:	4601      	mov	r1, r0
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6ee:	f000 b817 	b.w	800e720 <_kill_r>
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d00a      	beq.n	800e70c <_raise_r+0x4c>
 800e6f6:	1c59      	adds	r1, r3, #1
 800e6f8:	d103      	bne.n	800e702 <_raise_r+0x42>
 800e6fa:	2316      	movs	r3, #22
 800e6fc:	6003      	str	r3, [r0, #0]
 800e6fe:	2001      	movs	r0, #1
 800e700:	e7e7      	b.n	800e6d2 <_raise_r+0x12>
 800e702:	2100      	movs	r1, #0
 800e704:	4620      	mov	r0, r4
 800e706:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e70a:	4798      	blx	r3
 800e70c:	2000      	movs	r0, #0
 800e70e:	e7e0      	b.n	800e6d2 <_raise_r+0x12>

0800e710 <raise>:
 800e710:	4b02      	ldr	r3, [pc, #8]	@ (800e71c <raise+0xc>)
 800e712:	4601      	mov	r1, r0
 800e714:	6818      	ldr	r0, [r3, #0]
 800e716:	f7ff bfd3 	b.w	800e6c0 <_raise_r>
 800e71a:	bf00      	nop
 800e71c:	20000040 	.word	0x20000040

0800e720 <_kill_r>:
 800e720:	b538      	push	{r3, r4, r5, lr}
 800e722:	2300      	movs	r3, #0
 800e724:	4d06      	ldr	r5, [pc, #24]	@ (800e740 <_kill_r+0x20>)
 800e726:	4604      	mov	r4, r0
 800e728:	4608      	mov	r0, r1
 800e72a:	4611      	mov	r1, r2
 800e72c:	602b      	str	r3, [r5, #0]
 800e72e:	f7f3 fca5 	bl	800207c <_kill>
 800e732:	1c43      	adds	r3, r0, #1
 800e734:	d102      	bne.n	800e73c <_kill_r+0x1c>
 800e736:	682b      	ldr	r3, [r5, #0]
 800e738:	b103      	cbz	r3, 800e73c <_kill_r+0x1c>
 800e73a:	6023      	str	r3, [r4, #0]
 800e73c:	bd38      	pop	{r3, r4, r5, pc}
 800e73e:	bf00      	nop
 800e740:	200005ac 	.word	0x200005ac

0800e744 <_getpid_r>:
 800e744:	f7f3 bc92 	b.w	800206c <_getpid>

0800e748 <_malloc_usable_size_r>:
 800e748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e74c:	1f18      	subs	r0, r3, #4
 800e74e:	2b00      	cmp	r3, #0
 800e750:	bfbc      	itt	lt
 800e752:	580b      	ldrlt	r3, [r1, r0]
 800e754:	18c0      	addlt	r0, r0, r3
 800e756:	4770      	bx	lr

0800e758 <__swhatbuf_r>:
 800e758:	b570      	push	{r4, r5, r6, lr}
 800e75a:	460c      	mov	r4, r1
 800e75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e760:	b096      	sub	sp, #88	@ 0x58
 800e762:	4615      	mov	r5, r2
 800e764:	2900      	cmp	r1, #0
 800e766:	461e      	mov	r6, r3
 800e768:	da0c      	bge.n	800e784 <__swhatbuf_r+0x2c>
 800e76a:	89a3      	ldrh	r3, [r4, #12]
 800e76c:	2100      	movs	r1, #0
 800e76e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e772:	bf14      	ite	ne
 800e774:	2340      	movne	r3, #64	@ 0x40
 800e776:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e77a:	2000      	movs	r0, #0
 800e77c:	6031      	str	r1, [r6, #0]
 800e77e:	602b      	str	r3, [r5, #0]
 800e780:	b016      	add	sp, #88	@ 0x58
 800e782:	bd70      	pop	{r4, r5, r6, pc}
 800e784:	466a      	mov	r2, sp
 800e786:	f000 f849 	bl	800e81c <_fstat_r>
 800e78a:	2800      	cmp	r0, #0
 800e78c:	dbed      	blt.n	800e76a <__swhatbuf_r+0x12>
 800e78e:	9901      	ldr	r1, [sp, #4]
 800e790:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e794:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e798:	4259      	negs	r1, r3
 800e79a:	4159      	adcs	r1, r3
 800e79c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7a0:	e7eb      	b.n	800e77a <__swhatbuf_r+0x22>

0800e7a2 <__smakebuf_r>:
 800e7a2:	898b      	ldrh	r3, [r1, #12]
 800e7a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7a6:	079d      	lsls	r5, r3, #30
 800e7a8:	4606      	mov	r6, r0
 800e7aa:	460c      	mov	r4, r1
 800e7ac:	d507      	bpl.n	800e7be <__smakebuf_r+0x1c>
 800e7ae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7b2:	6023      	str	r3, [r4, #0]
 800e7b4:	6123      	str	r3, [r4, #16]
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	6163      	str	r3, [r4, #20]
 800e7ba:	b003      	add	sp, #12
 800e7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7be:	ab01      	add	r3, sp, #4
 800e7c0:	466a      	mov	r2, sp
 800e7c2:	f7ff ffc9 	bl	800e758 <__swhatbuf_r>
 800e7c6:	9f00      	ldr	r7, [sp, #0]
 800e7c8:	4605      	mov	r5, r0
 800e7ca:	4630      	mov	r0, r6
 800e7cc:	4639      	mov	r1, r7
 800e7ce:	f7fc ff19 	bl	800b604 <_malloc_r>
 800e7d2:	b948      	cbnz	r0, 800e7e8 <__smakebuf_r+0x46>
 800e7d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7d8:	059a      	lsls	r2, r3, #22
 800e7da:	d4ee      	bmi.n	800e7ba <__smakebuf_r+0x18>
 800e7dc:	f023 0303 	bic.w	r3, r3, #3
 800e7e0:	f043 0302 	orr.w	r3, r3, #2
 800e7e4:	81a3      	strh	r3, [r4, #12]
 800e7e6:	e7e2      	b.n	800e7ae <__smakebuf_r+0xc>
 800e7e8:	89a3      	ldrh	r3, [r4, #12]
 800e7ea:	6020      	str	r0, [r4, #0]
 800e7ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7f0:	81a3      	strh	r3, [r4, #12]
 800e7f2:	9b01      	ldr	r3, [sp, #4]
 800e7f4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e7f8:	b15b      	cbz	r3, 800e812 <__smakebuf_r+0x70>
 800e7fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7fe:	4630      	mov	r0, r6
 800e800:	f000 f81e 	bl	800e840 <_isatty_r>
 800e804:	b128      	cbz	r0, 800e812 <__smakebuf_r+0x70>
 800e806:	89a3      	ldrh	r3, [r4, #12]
 800e808:	f023 0303 	bic.w	r3, r3, #3
 800e80c:	f043 0301 	orr.w	r3, r3, #1
 800e810:	81a3      	strh	r3, [r4, #12]
 800e812:	89a3      	ldrh	r3, [r4, #12]
 800e814:	431d      	orrs	r5, r3
 800e816:	81a5      	strh	r5, [r4, #12]
 800e818:	e7cf      	b.n	800e7ba <__smakebuf_r+0x18>
	...

0800e81c <_fstat_r>:
 800e81c:	b538      	push	{r3, r4, r5, lr}
 800e81e:	2300      	movs	r3, #0
 800e820:	4d06      	ldr	r5, [pc, #24]	@ (800e83c <_fstat_r+0x20>)
 800e822:	4604      	mov	r4, r0
 800e824:	4608      	mov	r0, r1
 800e826:	4611      	mov	r1, r2
 800e828:	602b      	str	r3, [r5, #0]
 800e82a:	f7f3 fc87 	bl	800213c <_fstat>
 800e82e:	1c43      	adds	r3, r0, #1
 800e830:	d102      	bne.n	800e838 <_fstat_r+0x1c>
 800e832:	682b      	ldr	r3, [r5, #0]
 800e834:	b103      	cbz	r3, 800e838 <_fstat_r+0x1c>
 800e836:	6023      	str	r3, [r4, #0]
 800e838:	bd38      	pop	{r3, r4, r5, pc}
 800e83a:	bf00      	nop
 800e83c:	200005ac 	.word	0x200005ac

0800e840 <_isatty_r>:
 800e840:	b538      	push	{r3, r4, r5, lr}
 800e842:	2300      	movs	r3, #0
 800e844:	4d05      	ldr	r5, [pc, #20]	@ (800e85c <_isatty_r+0x1c>)
 800e846:	4604      	mov	r4, r0
 800e848:	4608      	mov	r0, r1
 800e84a:	602b      	str	r3, [r5, #0]
 800e84c:	f7f3 fc86 	bl	800215c <_isatty>
 800e850:	1c43      	adds	r3, r0, #1
 800e852:	d102      	bne.n	800e85a <_isatty_r+0x1a>
 800e854:	682b      	ldr	r3, [r5, #0]
 800e856:	b103      	cbz	r3, 800e85a <_isatty_r+0x1a>
 800e858:	6023      	str	r3, [r4, #0]
 800e85a:	bd38      	pop	{r3, r4, r5, pc}
 800e85c:	200005ac 	.word	0x200005ac

0800e860 <_init>:
 800e860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e862:	bf00      	nop
 800e864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e866:	bc08      	pop	{r3}
 800e868:	469e      	mov	lr, r3
 800e86a:	4770      	bx	lr

0800e86c <_fini>:
 800e86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e86e:	bf00      	nop
 800e870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e872:	bc08      	pop	{r3}
 800e874:	469e      	mov	lr, r3
 800e876:	4770      	bx	lr
