
dez_wakeup2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cfc  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002ef0  08002ef0  00003ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f40  08002f40  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002f40  08002f40  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002f40  08002f40  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f40  08002f40  00003f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f44  08002f44  00003f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f48  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  2000000c  08002f54  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08002f54  00004058  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adfa  00000000  00000000  00004042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6a  00000000  00000000  0000ee3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00010ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000860  00000000  00000000  000116d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002747f  00000000  00000000  00011f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b502  00000000  00000000  000393b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb2f2  00000000  00000000  000448b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fbab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d2c  00000000  00000000  0013fbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0014291c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08002ed8 	.word	0x08002ed8

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08002ed8 	.word	0x08002ed8

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 faef 	bl	800081a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f856 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f8f4 	bl	800042c <MX_GPIO_Init>
  MX_RTC_Init();
 8000244:	f000 f89c 	bl	8000380 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Включаем обработчик прерывания RTC WakeUp
  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000248:	2200      	movs	r2, #0
 800024a:	2100      	movs	r1, #0
 800024c:	2002      	movs	r0, #2
 800024e:	f000 fc5a 	bl	8000b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000252:	2002      	movs	r0, #2
 8000254:	f000 fc71 	bl	8000b3a <HAL_NVIC_EnableIRQ>

  // Инициализируем пины как выключенные (сон)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800025e:	481f      	ldr	r0, [pc, #124]	@ (80002dc <main+0xa8>)
 8000260:	f000 fe06 	bl	8000e70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	481d      	ldr	r0, [pc, #116]	@ (80002e0 <main+0xac>)
 800026a:	f000 fe01 	bl	8000e70 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Проверяем флаг пробуждения
    if(wakeup_flag)
 800026e:	4b1d      	ldr	r3, [pc, #116]	@ (80002e4 <main+0xb0>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	b2db      	uxtb	r3, r3
 8000274:	2b00      	cmp	r3, #0
 8000276:	d02b      	beq.n	80002d0 <main+0x9c>
    {
      // Сбрасываем флаг
      wakeup_flag = 0;
 8000278:	4b1a      	ldr	r3, [pc, #104]	@ (80002e4 <main+0xb0>)
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]

      // Включаем пины PC13 и PB0 на 5 секунд (пробуждение)
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800027e:	2201      	movs	r2, #1
 8000280:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000284:	4815      	ldr	r0, [pc, #84]	@ (80002dc <main+0xa8>)
 8000286:	f000 fdf3 	bl	8000e70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800028a:	2201      	movs	r2, #1
 800028c:	2101      	movs	r1, #1
 800028e:	4814      	ldr	r0, [pc, #80]	@ (80002e0 <main+0xac>)
 8000290:	f000 fdee 	bl	8000e70 <HAL_GPIO_WritePin>

      // Ждем 5 секунд
      HAL_Delay(5000);
 8000294:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000298:	f000 fb36 	bl	8000908 <HAL_Delay>

      // Выключаем пины (готовимся ко сну)
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002a2:	480e      	ldr	r0, [pc, #56]	@ (80002dc <main+0xa8>)
 80002a4:	f000 fde4 	bl	8000e70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2101      	movs	r1, #1
 80002ac:	480c      	ldr	r0, [pc, #48]	@ (80002e0 <main+0xac>)
 80002ae:	f000 fddf 	bl	8000e70 <HAL_GPIO_WritePin>

      // Переконфигурируем RTC WakeUp для 10 секунд сна
      HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80002b2:	480d      	ldr	r0, [pc, #52]	@ (80002e8 <main+0xb4>)
 80002b4:	f002 fd4e 	bl	8002d54 <HAL_RTCEx_DeactivateWakeUpTimer>
      if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20479, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 80002b8:	2300      	movs	r3, #0
 80002ba:	2200      	movs	r2, #0
 80002bc:	f644 71ff 	movw	r1, #20479	@ 0x4fff
 80002c0:	4809      	ldr	r0, [pc, #36]	@ (80002e8 <main+0xb4>)
 80002c2:	f002 fcc1 	bl	8002c48 <HAL_RTCEx_SetWakeUpTimer_IT>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <main+0x9c>
      {
        Error_Handler();
 80002cc:	f000 f914 	bl	80004f8 <Error_Handler>
      }
    }

    // Переходим в режим сна
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80002d0:	2101      	movs	r1, #1
 80002d2:	2000      	movs	r0, #0
 80002d4:	f000 fde4 	bl	8000ea0 <HAL_PWR_EnterSLEEPMode>
    if(wakeup_flag)
 80002d8:	e7c9      	b.n	800026e <main+0x3a>
 80002da:	bf00      	nop
 80002dc:	42020800 	.word	0x42020800
 80002e0:	42020400 	.word	0x42020400
 80002e4:	20000050 	.word	0x20000050
 80002e8:	20000028 	.word	0x20000028

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b098      	sub	sp, #96	@ 0x60
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	2248      	movs	r2, #72	@ 0x48
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 fdc0 	bl	8002e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 800030e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000312:	f000 fe07 	bl	8000f24 <HAL_PWREx_ControlVoltageScaling>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800031c:	f000 f8ec 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000320:	2318      	movs	r3, #24
 8000322:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000328:	2301      	movs	r3, #1
 800032a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800032c:	2301      	movs	r3, #1
 800032e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000330:	2300      	movs	r3, #0
 8000332:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000334:	2360      	movs	r3, #96	@ 0x60
 8000336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000338:	2300      	movs	r3, #0
 800033a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0318 	add.w	r3, r7, #24
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fecf 	bl	80010e4 <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800034c:	f000 f8d4 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	230f      	movs	r3, #15
 8000352:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000354:	2300      	movs	r3, #0
 8000356:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2100      	movs	r1, #0
 8000368:	4618      	mov	r0, r3
 800036a:	f001 fb91 	bl	8001a90 <HAL_RCC_ClockConfig>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000374:	f000 f8c0 	bl	80004f8 <Error_Handler>
  }
}
 8000378:	bf00      	nop
 800037a:	3760      	adds	r7, #96	@ 0x60
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000386:	463b      	mov	r3, r7
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]
 8000394:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000396:	4b23      	ldr	r3, [pc, #140]	@ (8000424 <MX_RTC_Init+0xa4>)
 8000398:	4a23      	ldr	r2, [pc, #140]	@ (8000428 <MX_RTC_Init+0xa8>)
 800039a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800039c:	4b21      	ldr	r3, [pc, #132]	@ (8000424 <MX_RTC_Init+0xa4>)
 800039e:	2200      	movs	r2, #0
 80003a0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80003a2:	4b20      	ldr	r3, [pc, #128]	@ (8000424 <MX_RTC_Init+0xa4>)
 80003a4:	227f      	movs	r2, #127	@ 0x7f
 80003a6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80003a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000424 <MX_RTC_Init+0xa4>)
 80003aa:	22ff      	movs	r2, #255	@ 0xff
 80003ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <MX_RTC_Init+0xa4>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80003b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000424 <MX_RTC_Init+0xa4>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000424 <MX_RTC_Init+0xa4>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003c0:	4b18      	ldr	r3, [pc, #96]	@ (8000424 <MX_RTC_Init+0xa4>)
 80003c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003c6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80003c8:	4b16      	ldr	r3, [pc, #88]	@ (8000424 <MX_RTC_Init+0xa4>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003ce:	4815      	ldr	r0, [pc, #84]	@ (8000424 <MX_RTC_Init+0xa4>)
 80003d0:	f002 fb2c 	bl	8002a2c <HAL_RTC_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80003da:	f000 f88d 	bl	80004f8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80003de:	2300      	movs	r3, #0
 80003e0:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80003ee:	463b      	mov	r3, r7
 80003f0:	4619      	mov	r1, r3
 80003f2:	480c      	ldr	r0, [pc, #48]	@ (8000424 <MX_RTC_Init+0xa4>)
 80003f4:	f002 fd18 	bl	8002e28 <HAL_RTCEx_PrivilegeModeSet>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80003fe:	f000 f87b 	bl	80004f8 <Error_Handler>

  /** Enable the WakeUp
  */
  // Расчет для 10 секунд: LSI = ~32.768 kHz, делитель 16 -> 2048 Гц
  // 2048 Гц * 10 сек = 20480 тиков. Вычитаем 1, так как счетчик с нуля.
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20479, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8000402:	2300      	movs	r3, #0
 8000404:	2200      	movs	r2, #0
 8000406:	f644 71ff 	movw	r1, #20479	@ 0x4fff
 800040a:	4806      	ldr	r0, [pc, #24]	@ (8000424 <MX_RTC_Init+0xa4>)
 800040c:	f002 fc1c 	bl	8002c48 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000416:	f000 f86f 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 800041a:	bf00      	nop
 800041c:	3718      	adds	r7, #24
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000028 	.word	0x20000028
 8000428:	40002800 	.word	0x40002800

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	f107 030c 	add.w	r3, r7, #12
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000442:	4b22      	ldr	r3, [pc, #136]	@ (80004cc <MX_GPIO_Init+0xa0>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000446:	4a21      	ldr	r2, [pc, #132]	@ (80004cc <MX_GPIO_Init+0xa0>)
 8000448:	f043 0304 	orr.w	r3, r3, #4
 800044c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800044e:	4b1f      	ldr	r3, [pc, #124]	@ (80004cc <MX_GPIO_Init+0xa0>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000452:	f003 0304 	and.w	r3, r3, #4
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045a:	4b1c      	ldr	r3, [pc, #112]	@ (80004cc <MX_GPIO_Init+0xa0>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045e:	4a1b      	ldr	r2, [pc, #108]	@ (80004cc <MX_GPIO_Init+0xa0>)
 8000460:	f043 0302 	orr.w	r3, r3, #2
 8000464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000466:	4b19      	ldr	r3, [pc, #100]	@ (80004cc <MX_GPIO_Init+0xa0>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046a:	f003 0302 	and.w	r3, r3, #2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000478:	4815      	ldr	r0, [pc, #84]	@ (80004d0 <MX_GPIO_Init+0xa4>)
 800047a:	f000 fcf9 	bl	8000e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2101      	movs	r1, #1
 8000482:	4814      	ldr	r0, [pc, #80]	@ (80004d4 <MX_GPIO_Init+0xa8>)
 8000484:	f000 fcf4 	bl	8000e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000488:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800048c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048e:	2301      	movs	r3, #1
 8000490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	2300      	movs	r3, #0
 8000498:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	4619      	mov	r1, r3
 80004a0:	480b      	ldr	r0, [pc, #44]	@ (80004d0 <MX_GPIO_Init+0xa4>)
 80004a2:	f000 fb65 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004a6:	2301      	movs	r3, #1
 80004a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b6:	f107 030c 	add.w	r3, r7, #12
 80004ba:	4619      	mov	r1, r3
 80004bc:	4805      	ldr	r0, [pc, #20]	@ (80004d4 <MX_GPIO_Init+0xa8>)
 80004be:	f000 fb57 	bl	8000b70 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004c2:	bf00      	nop
 80004c4:	3720      	adds	r7, #32
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	42020800 	.word	0x42020800
 80004d4:	42020400 	.word	0x42020400

080004d8 <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
  * @brief  Обработчик прерывания WakeUp Timer.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  // Устанавливаем флаг пробуждения
  wakeup_flag = 1;
 80004e0:	4b04      	ldr	r3, [pc, #16]	@ (80004f4 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000050 	.word	0x20000050

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <Error_Handler+0x8>

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <HAL_MspInit+0x44>)
 800050c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800050e:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <HAL_MspInit+0x44>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6613      	str	r3, [r2, #96]	@ 0x60
 8000516:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <HAL_MspInit+0x44>)
 8000518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <HAL_MspInit+0x44>)
 8000524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000526:	4a08      	ldr	r2, [pc, #32]	@ (8000548 <HAL_MspInit+0x44>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052c:	6593      	str	r3, [r2, #88]	@ 0x58
 800052e:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <HAL_MspInit+0x44>)
 8000530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800053a:	f000 fd9f 	bl	800107c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000

0800054c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b0a8      	sub	sp, #160	@ 0xa0
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2294      	movs	r2, #148	@ 0x94
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f002 fc8f 	bl	8002e80 <memset>
  if(hrtc->Instance==RTC)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a1a      	ldr	r2, [pc, #104]	@ (80005d0 <HAL_RTC_MspInit+0x84>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d12c      	bne.n	80005c6 <HAL_RTC_MspInit+0x7a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800056c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000570:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000572:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000576:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4618      	mov	r0, r3
 8000580:	f001 fd3e 	bl	8002000 <HAL_RCCEx_PeriphCLKConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800058a:	f7ff ffb5 	bl	80004f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800058e:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <HAL_RTC_MspInit+0x88>)
 8000590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000594:	4a0f      	ldr	r2, [pc, #60]	@ (80005d4 <HAL_RTC_MspInit+0x88>)
 8000596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800059a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800059e:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <HAL_RTC_MspInit+0x88>)
 80005a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005a2:	4a0c      	ldr	r2, [pc, #48]	@ (80005d4 <HAL_RTC_MspInit+0x88>)
 80005a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80005aa:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <HAL_RTC_MspInit+0x88>)
 80005ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2002      	movs	r0, #2
 80005bc:	f000 faa3 	bl	8000b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80005c0:	2002      	movs	r0, #2
 80005c2:	f000 faba 	bl	8000b3a <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80005c6:	bf00      	nop
 80005c8:	37a0      	adds	r7, #160	@ 0xa0
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40002800 	.word	0x40002800
 80005d4:	40021000 	.word	0x40021000

080005d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <NMI_Handler+0x4>

080005e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <HardFault_Handler+0x4>

080005e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <MemManage_Handler+0x4>

080005f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <BusFault_Handler+0x4>

080005f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <UsageFault_Handler+0x4>

08000600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062e:	f000 f94b 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupts through EXTI line 17.
  */
void RTC_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800063c:	4802      	ldr	r0, [pc, #8]	@ (8000648 <RTC_IRQHandler+0x10>)
 800063e:	f002 fbd9 	bl	8002df4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000028 	.word	0x20000028

0800064c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000650:	4b06      	ldr	r3, [pc, #24]	@ (800066c <SystemInit+0x20>)
 8000652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000656:	4a05      	ldr	r2, [pc, #20]	@ (800066c <SystemInit+0x20>)
 8000658:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800065c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b087      	sub	sp, #28
 8000674:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000676:	4b4f      	ldr	r3, [pc, #316]	@ (80007b4 <SystemCoreClockUpdate+0x144>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	2b00      	cmp	r3, #0
 8000680:	d107      	bne.n	8000692 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000682:	4b4c      	ldr	r3, [pc, #304]	@ (80007b4 <SystemCoreClockUpdate+0x144>)
 8000684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	e005      	b.n	800069e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000692:	4b48      	ldr	r3, [pc, #288]	@ (80007b4 <SystemCoreClockUpdate+0x144>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	091b      	lsrs	r3, r3, #4
 8000698:	f003 030f 	and.w	r3, r3, #15
 800069c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800069e:	4a46      	ldr	r2, [pc, #280]	@ (80007b8 <SystemCoreClockUpdate+0x148>)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80006a8:	4b42      	ldr	r3, [pc, #264]	@ (80007b4 <SystemCoreClockUpdate+0x144>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	f003 030c 	and.w	r3, r3, #12
 80006b0:	2b0c      	cmp	r3, #12
 80006b2:	d866      	bhi.n	8000782 <SystemCoreClockUpdate+0x112>
 80006b4:	a201      	add	r2, pc, #4	@ (adr r2, 80006bc <SystemCoreClockUpdate+0x4c>)
 80006b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ba:	bf00      	nop
 80006bc:	080006f1 	.word	0x080006f1
 80006c0:	08000783 	.word	0x08000783
 80006c4:	08000783 	.word	0x08000783
 80006c8:	08000783 	.word	0x08000783
 80006cc:	080006f9 	.word	0x080006f9
 80006d0:	08000783 	.word	0x08000783
 80006d4:	08000783 	.word	0x08000783
 80006d8:	08000783 	.word	0x08000783
 80006dc:	08000701 	.word	0x08000701
 80006e0:	08000783 	.word	0x08000783
 80006e4:	08000783 	.word	0x08000783
 80006e8:	08000783 	.word	0x08000783
 80006ec:	08000709 	.word	0x08000709
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80006f0:	4a32      	ldr	r2, [pc, #200]	@ (80007bc <SystemCoreClockUpdate+0x14c>)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	6013      	str	r3, [r2, #0]
      break;
 80006f6:	e048      	b.n	800078a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80006f8:	4b30      	ldr	r3, [pc, #192]	@ (80007bc <SystemCoreClockUpdate+0x14c>)
 80006fa:	4a31      	ldr	r2, [pc, #196]	@ (80007c0 <SystemCoreClockUpdate+0x150>)
 80006fc:	601a      	str	r2, [r3, #0]
      break;
 80006fe:	e044      	b.n	800078a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000700:	4b2e      	ldr	r3, [pc, #184]	@ (80007bc <SystemCoreClockUpdate+0x14c>)
 8000702:	4a2f      	ldr	r2, [pc, #188]	@ (80007c0 <SystemCoreClockUpdate+0x150>)
 8000704:	601a      	str	r2, [r3, #0]
      break;
 8000706:	e040      	b.n	800078a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000708:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <SystemCoreClockUpdate+0x144>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	f003 0303 	and.w	r3, r3, #3
 8000710:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <SystemCoreClockUpdate+0x144>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	091b      	lsrs	r3, r3, #4
 8000718:	f003 030f 	and.w	r3, r3, #15
 800071c:	3301      	adds	r3, #1
 800071e:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2b02      	cmp	r3, #2
 8000724:	d003      	beq.n	800072e <SystemCoreClockUpdate+0xbe>
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2b03      	cmp	r3, #3
 800072a:	d006      	beq.n	800073a <SystemCoreClockUpdate+0xca>
 800072c:	e00b      	b.n	8000746 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800072e:	4a24      	ldr	r2, [pc, #144]	@ (80007c0 <SystemCoreClockUpdate+0x150>)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	613b      	str	r3, [r7, #16]
          break;
 8000738:	e00b      	b.n	8000752 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800073a:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <SystemCoreClockUpdate+0x150>)
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000742:	613b      	str	r3, [r7, #16]
          break;
 8000744:	e005      	b.n	8000752 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	fbb2 f3f3 	udiv	r3, r2, r3
 800074e:	613b      	str	r3, [r7, #16]
          break;
 8000750:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000752:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <SystemCoreClockUpdate+0x144>)
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	0a1b      	lsrs	r3, r3, #8
 8000758:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	fb02 f303 	mul.w	r3, r2, r3
 8000762:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000764:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <SystemCoreClockUpdate+0x144>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	0e5b      	lsrs	r3, r3, #25
 800076a:	f003 0303 	and.w	r3, r3, #3
 800076e:	3301      	adds	r3, #1
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	fbb2 f3f3 	udiv	r3, r2, r3
 800077c:	4a0f      	ldr	r2, [pc, #60]	@ (80007bc <SystemCoreClockUpdate+0x14c>)
 800077e:	6013      	str	r3, [r2, #0]
      break;
 8000780:	e003      	b.n	800078a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000782:	4a0e      	ldr	r2, [pc, #56]	@ (80007bc <SystemCoreClockUpdate+0x14c>)
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	6013      	str	r3, [r2, #0]
      break;
 8000788:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <SystemCoreClockUpdate+0x144>)
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	091b      	lsrs	r3, r3, #4
 8000790:	f003 030f 	and.w	r3, r3, #15
 8000794:	4a0b      	ldr	r2, [pc, #44]	@ (80007c4 <SystemCoreClockUpdate+0x154>)
 8000796:	5cd3      	ldrb	r3, [r2, r3]
 8000798:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <SystemCoreClockUpdate+0x14c>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	fa22 f303 	lsr.w	r3, r2, r3
 80007a4:	4a05      	ldr	r2, [pc, #20]	@ (80007bc <SystemCoreClockUpdate+0x14c>)
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	371c      	adds	r7, #28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	40021000 	.word	0x40021000
 80007b8:	08002f00 	.word	0x08002f00
 80007bc:	20000000 	.word	0x20000000
 80007c0:	00f42400 	.word	0x00f42400
 80007c4:	08002ef0 	.word	0x08002ef0

080007c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80007c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000800 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007cc:	f7ff ff3e 	bl	800064c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007d2:	e003      	b.n	80007dc <LoopCopyDataInit>

080007d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007da:	3104      	adds	r1, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007dc:	480a      	ldr	r0, [pc, #40]	@ (8000808 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <LoopForever+0xe>)
	adds	r2, r0, r1
 80007e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007e4:	d3f6      	bcc.n	80007d4 <CopyDataInit>
	ldr	r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007e8:	e002      	b.n	80007f0 <LoopFillZerobss>

080007ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007ec:	f842 3b04 	str.w	r3, [r2], #4

080007f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <LoopForever+0x16>)
	cmp	r2, r3
 80007f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007f4:	d3f9      	bcc.n	80007ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007f6:	f002 fb4b 	bl	8002e90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007fa:	f7ff fd1b 	bl	8000234 <main>

080007fe <LoopForever>:

LoopForever:
    b LoopForever
 80007fe:	e7fe      	b.n	80007fe <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000800:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000804:	08002f48 	.word	0x08002f48
	ldr	r0, =_sdata
 8000808:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800080c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000810:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000814:	20000058 	.word	0x20000058

08000818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC1_2_IRQHandler>

0800081a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000820:	2300      	movs	r3, #0
 8000822:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000824:	2004      	movs	r0, #4
 8000826:	f000 f963 	bl	8000af0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800082a:	f7ff ff21 	bl	8000670 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800082e:	2007      	movs	r0, #7
 8000830:	f000 f80e 	bl	8000850 <HAL_InitTick>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d002      	beq.n	8000840 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	71fb      	strb	r3, [r7, #7]
 800083e:	e001      	b.n	8000844 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000840:	f7ff fe60 	bl	8000504 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000844:	79fb      	ldrb	r3, [r7, #7]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000858:	2300      	movs	r3, #0
 800085a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800085c:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <HAL_InitTick+0x6c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d023      	beq.n	80008ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000864:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <HAL_InitTick+0x70>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <HAL_InitTick+0x6c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000872:	fbb3 f3f1 	udiv	r3, r3, r1
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f96b 	bl	8000b56 <HAL_SYSTICK_Config>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d10f      	bne.n	80008a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b07      	cmp	r3, #7
 800088a:	d809      	bhi.n	80008a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088c:	2200      	movs	r2, #0
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	f000 f937 	bl	8000b06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000898:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <HAL_InitTick+0x74>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	e007      	b.n	80008b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	e004      	b.n	80008b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	73fb      	strb	r3, [r7, #15]
 80008aa:	e001      	b.n	80008b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000004 	.word	0x20000004

080008c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_IncTick+0x20>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <HAL_IncTick+0x24>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	4a04      	ldr	r2, [pc, #16]	@ (80008ec <HAL_IncTick+0x24>)
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000054 	.word	0x20000054

080008f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;
 80008f4:	4b03      	ldr	r3, [pc, #12]	@ (8000904 <HAL_GetTick+0x14>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000054 	.word	0x20000054

08000908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000910:	f7ff ffee 	bl	80008f0 <HAL_GetTick>
 8000914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000920:	d005      	beq.n	800092e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000922:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <HAL_Delay+0x44>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4413      	add	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800092e:	bf00      	nop
 8000930:	f7ff ffde 	bl	80008f0 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	429a      	cmp	r2, r3
 800093e:	d8f7      	bhi.n	8000930 <HAL_Delay+0x28>
  {
  }
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000008 	.word	0x20000008

08000950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000978:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800097c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000982:	4a04      	ldr	r2, [pc, #16]	@ (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	60d3      	str	r3, [r2, #12]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800099c:	4b04      	ldr	r3, [pc, #16]	@ (80009b0 <__NVIC_GetPriorityGrouping+0x18>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	f003 0307 	and.w	r3, r3, #7
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	db0b      	blt.n	80009de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	f003 021f 	and.w	r2, r3, #31
 80009cc:	4907      	ldr	r1, [pc, #28]	@ (80009ec <__NVIC_EnableIRQ+0x38>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	095b      	lsrs	r3, r3, #5
 80009d4:	2001      	movs	r0, #1
 80009d6:	fa00 f202 	lsl.w	r2, r0, r2
 80009da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000e100 	.word	0xe000e100

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	@ (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0152      	lsls	r2, r2, #5
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	@ (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0152      	lsls	r2, r2, #5
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	@ 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f1c3 0307 	rsb	r3, r3, #7
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	bf28      	it	cs
 8000a62:	2303      	movcs	r3, #3
 8000a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3303      	adds	r3, #3
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d902      	bls.n	8000a74 <NVIC_EncodePriority+0x30>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3b04      	subs	r3, #4
 8000a72:	e000      	b.n	8000a76 <NVIC_EncodePriority+0x32>
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43da      	mvns	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4313      	orrs	r3, r2
         );
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	@ 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000abc:	d301      	bcc.n	8000ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00f      	b.n	8000ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <SysTick_Config+0x40>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aca:	2107      	movs	r1, #7
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f7ff ff8e 	bl	80009f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <SysTick_Config+0x40>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ada:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <SysTick_Config+0x40>)
 8000adc:	2207      	movs	r2, #7
 8000ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	e000e010 	.word	0xe000e010

08000af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff29 	bl	8000950 <__NVIC_SetPriorityGrouping>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b14:	f7ff ff40 	bl	8000998 <__NVIC_GetPriorityGrouping>
 8000b18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	6978      	ldr	r0, [r7, #20]
 8000b20:	f7ff ff90 	bl	8000a44 <NVIC_EncodePriority>
 8000b24:	4602      	mov	r2, r0
 8000b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff5f 	bl	80009f0 <__NVIC_SetPriority>
}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff33 	bl	80009b4 <__NVIC_EnableIRQ>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ffa4 	bl	8000aac <SysTick_Config>
 8000b64:	4603      	mov	r3, r0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b7e:	e158      	b.n	8000e32 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	2101      	movs	r1, #1
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 814a 	beq.w	8000e2c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d005      	beq.n	8000bb0 <HAL_GPIO_Init+0x40>
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d130      	bne.n	8000c12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	2203      	movs	r2, #3
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68da      	ldr	r2, [r3, #12]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000be6:	2201      	movs	r2, #1
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	f003 0201 	and.w	r2, r3, #1
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 0303 	and.w	r3, r3, #3
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d017      	beq.n	8000c4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2203      	movs	r2, #3
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d123      	bne.n	8000ca2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	08da      	lsrs	r2, r3, #3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3208      	adds	r2, #8
 8000c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	220f      	movs	r2, #15
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	691a      	ldr	r2, [r3, #16]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f003 0307 	and.w	r3, r3, #7
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	08da      	lsrs	r2, r3, #3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3208      	adds	r2, #8
 8000c9c:	6939      	ldr	r1, [r7, #16]
 8000c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	2203      	movs	r2, #3
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 0203 	and.w	r2, r3, #3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 80a4 	beq.w	8000e2c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000ce4:	4a5a      	ldr	r2, [pc, #360]	@ (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3318      	adds	r3, #24
 8000cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a52      	ldr	r2, [pc, #328]	@ (8000e54 <HAL_GPIO_Init+0x2e4>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d025      	beq.n	8000d5c <HAL_GPIO_Init+0x1ec>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a51      	ldr	r2, [pc, #324]	@ (8000e58 <HAL_GPIO_Init+0x2e8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d01f      	beq.n	8000d58 <HAL_GPIO_Init+0x1e8>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a50      	ldr	r2, [pc, #320]	@ (8000e5c <HAL_GPIO_Init+0x2ec>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d019      	beq.n	8000d54 <HAL_GPIO_Init+0x1e4>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a4f      	ldr	r2, [pc, #316]	@ (8000e60 <HAL_GPIO_Init+0x2f0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d013      	beq.n	8000d50 <HAL_GPIO_Init+0x1e0>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a4e      	ldr	r2, [pc, #312]	@ (8000e64 <HAL_GPIO_Init+0x2f4>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d00d      	beq.n	8000d4c <HAL_GPIO_Init+0x1dc>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a4d      	ldr	r2, [pc, #308]	@ (8000e68 <HAL_GPIO_Init+0x2f8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d007      	beq.n	8000d48 <HAL_GPIO_Init+0x1d8>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a4c      	ldr	r2, [pc, #304]	@ (8000e6c <HAL_GPIO_Init+0x2fc>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d101      	bne.n	8000d44 <HAL_GPIO_Init+0x1d4>
 8000d40:	2306      	movs	r3, #6
 8000d42:	e00c      	b.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d44:	2307      	movs	r3, #7
 8000d46:	e00a      	b.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d48:	2305      	movs	r3, #5
 8000d4a:	e008      	b.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	e006      	b.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d50:	2303      	movs	r3, #3
 8000d52:	e004      	b.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d54:	2302      	movs	r3, #2
 8000d56:	e002      	b.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	f002 0203 	and.w	r2, r2, #3
 8000d64:	00d2      	lsls	r2, r2, #3
 8000d66:	4093      	lsls	r3, r2
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000d6e:	4938      	ldr	r1, [pc, #224]	@ (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3318      	adds	r3, #24
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d7c:	4b34      	ldr	r3, [pc, #208]	@ (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000da0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000da6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dca:	4a21      	ldr	r2, [pc, #132]	@ (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000df6:	4a16      	ldr	r2, [pc, #88]	@ (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	@ (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e24:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f47f ae9f 	bne.w	8000b80 <HAL_GPIO_Init+0x10>
  }
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	371c      	adds	r7, #28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	4002f400 	.word	0x4002f400
 8000e54:	42020000 	.word	0x42020000
 8000e58:	42020400 	.word	0x42020400
 8000e5c:	42020800 	.word	0x42020800
 8000e60:	42020c00 	.word	0x42020c00
 8000e64:	42021000 	.word	0x42021000
 8000e68:	42021400 	.word	0x42021400
 8000e6c:	42021800 	.word	0x42021800

08000e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e80:	787b      	ldrb	r3, [r7, #1]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e8c:	e002      	b.n	8000e94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e8e:	887a      	ldrh	r2, [r7, #2]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10c      	bne.n	8000ecc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8000eb2:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <HAL_PWR_EnterSLEEPMode+0x60>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000eba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ebe:	d10e      	bne.n	8000ede <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8000ec0:	f000 f89c 	bl	8000ffc <HAL_PWREx_DisableLowPowerRunMode>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d009      	beq.n	8000ede <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8000eca:	e016      	b.n	8000efa <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <HAL_PWR_EnterSLEEPMode+0x60>)
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ed8:	d001      	beq.n	8000ede <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8000eda:	f000 f87f 	bl	8000fdc <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <HAL_PWR_EnterSLEEPMode+0x64>)
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	4a08      	ldr	r2, [pc, #32]	@ (8000f04 <HAL_PWR_EnterSLEEPMode+0x64>)
 8000ee4:	f023 0304 	bic.w	r3, r3, #4
 8000ee8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d101      	bne.n	8000ef4 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000ef0:	bf30      	wfi
 8000ef2:	e002      	b.n	8000efa <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000ef4:	bf40      	sev
    __WFE();
 8000ef6:	bf20      	wfe
    __WFE();
 8000ef8:	bf20      	wfe
  }

}
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40007000 	.word	0x40007000
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000f0c:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40007000 	.word	0x40007000

08000f24 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8000f2c:	4b27      	ldr	r3, [pc, #156]	@ (8000fcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f34:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8000f36:	f000 f8b1 	bl	800109c <HAL_PWREx_SMPS_GetEffectiveMode>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f40:	d101      	bne.n	8000f46 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e03e      	b.n	8000fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8000f46:	4b21      	ldr	r3, [pc, #132]	@ (8000fcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f52:	d101      	bne.n	8000f58 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e035      	b.n	8000fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d101      	bne.n	8000f64 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	e02f      	b.n	8000fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f64:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000f6c:	4917      	ldr	r1, [pc, #92]	@ (8000fcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8000f74:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	095b      	lsrs	r3, r3, #5
 8000f7a:	4a16      	ldr	r2, [pc, #88]	@ (8000fd4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f80:	09db      	lsrs	r3, r3, #7
 8000f82:	2232      	movs	r2, #50	@ 0x32
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	4a13      	ldr	r2, [pc, #76]	@ (8000fd8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8000f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8e:	08db      	lsrs	r3, r3, #3
 8000f90:	3301      	adds	r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f94:	e002      	b.n	8000f9c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fa8:	d102      	bne.n	8000fb0 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f2      	bne.n	8000f96 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fbc:	d101      	bne.n	8000fc2 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e000      	b.n	8000fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40007000 	.word	0x40007000
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	0a7c5ac5 	.word	0x0a7c5ac5
 8000fd8:	cccccccd 	.word	0xcccccccd

08000fdc <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8000fe6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40007000 	.word	0x40007000

08000ffc <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8001002:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a19      	ldr	r2, [pc, #100]	@ (800106c <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 8001008:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800100c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_REGLP_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800100e:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <HAL_PWREx_DisableLowPowerRunMode+0x74>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	4a17      	ldr	r2, [pc, #92]	@ (8001074 <HAL_PWREx_DisableLowPowerRunMode+0x78>)
 8001016:	fba2 2303 	umull	r2, r3, r2, r3
 800101a:	09db      	lsrs	r3, r3, #7
 800101c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001020:	fb02 f303 	mul.w	r3, r2, r3
 8001024:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <HAL_PWREx_DisableLowPowerRunMode+0x7c>)
 8001026:	fba2 2303 	umull	r2, r3, r2, r3
 800102a:	08db      	lsrs	r3, r3, #3
 800102c:	3301      	adds	r3, #1
 800102e:	607b      	str	r3, [r7, #4]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001030:	e002      	b.n	8001038 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    wait_loop_index--;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3b01      	subs	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001044:	d102      	bne.n	800104c <HAL_PWREx_DisableLowPowerRunMode+0x50>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f2      	bne.n	8001032 <HAL_PWREx_DisableLowPowerRunMode+0x36>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800104c:	4b07      	ldr	r3, [pc, #28]	@ (800106c <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001058:	d101      	bne.n	800105e <HAL_PWREx_DisableLowPowerRunMode+0x62>
  {
    return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e000      	b.n	8001060 <HAL_PWREx_DisableLowPowerRunMode+0x64>
  }

  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	40007000 	.word	0x40007000
 8001070:	20000000 	.word	0x20000000
 8001074:	0a7c5ac5 	.word	0x0a7c5ac5
 8001078:	cccccccd 	.word	0xcccccccd

0800107c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001080:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800108a:	6093      	str	r3, [r2, #8]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40007000 	.word	0x40007000

0800109c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80010b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	e00a      	b.n	80010d0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80010c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	e001      	b.n	80010d0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40007000 	.word	0x40007000

080010e4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d102      	bne.n	80010f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	f000 bcc2 	b.w	8001a7c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010f8:	4b99      	ldr	r3, [pc, #612]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001102:	4b97      	ldr	r3, [pc, #604]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0310 	and.w	r3, r3, #16
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80e9 	beq.w	80012ec <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <HAL_RCC_OscConfig+0x4a>
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2b0c      	cmp	r3, #12
 8001124:	f040 8083 	bne.w	800122e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d17f      	bne.n	800122e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800112e:	4b8c      	ldr	r3, [pc, #560]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d006      	beq.n	8001148 <HAL_RCC_OscConfig+0x64>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	f000 bc9a 	b.w	8001a7c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800114c:	4b84      	ldr	r3, [pc, #528]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d004      	beq.n	8001162 <HAL_RCC_OscConfig+0x7e>
 8001158:	4b81      	ldr	r3, [pc, #516]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001160:	e005      	b.n	800116e <HAL_RCC_OscConfig+0x8a>
 8001162:	4b7f      	ldr	r3, [pc, #508]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 8001164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800116e:	4293      	cmp	r3, r2
 8001170:	d224      	bcs.n	80011bc <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fe72 	bl	8001e60 <RCC_SetFlashLatencyFromMSIRange>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	f000 bc7a 	b.w	8001a7c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001188:	4b75      	ldr	r3, [pc, #468]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a74      	ldr	r2, [pc, #464]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b72      	ldr	r3, [pc, #456]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a0:	496f      	ldr	r1, [pc, #444]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	496a      	ldr	r1, [pc, #424]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	604b      	str	r3, [r1, #4]
 80011ba:	e026      	b.n	800120a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011bc:	4b68      	ldr	r3, [pc, #416]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a67      	ldr	r2, [pc, #412]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b65      	ldr	r3, [pc, #404]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d4:	4962      	ldr	r1, [pc, #392]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011da:	4b61      	ldr	r3, [pc, #388]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	495d      	ldr	r1, [pc, #372]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10a      	bne.n	800120a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fe31 	bl	8001e60 <RCC_SetFlashLatencyFromMSIRange>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	f000 bc39 	b.w	8001a7c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800120a:	f000 fe15 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 800120e:	4603      	mov	r3, r0
 8001210:	4a54      	ldr	r2, [pc, #336]	@ (8001364 <HAL_RCC_OscConfig+0x280>)
 8001212:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001214:	4b54      	ldr	r3, [pc, #336]	@ (8001368 <HAL_RCC_OscConfig+0x284>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fb19 	bl	8000850 <HAL_InitTick>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d060      	beq.n	80012ea <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	f000 bc27 	b.w	8001a7c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d039      	beq.n	80012aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001236:	4b4a      	ldr	r3, [pc, #296]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a49      	ldr	r2, [pc, #292]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001242:	f7ff fb55 	bl	80008f0 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001248:	e00f      	b.n	800126a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800124a:	f7ff fb51 	bl	80008f0 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d908      	bls.n	800126a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001258:	4b41      	ldr	r3, [pc, #260]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	f000 bc09 	b.w	8001a7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800126a:	4b3d      	ldr	r3, [pc, #244]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0e9      	beq.n	800124a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001276:	4b3a      	ldr	r3, [pc, #232]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a39      	ldr	r2, [pc, #228]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b37      	ldr	r3, [pc, #220]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128e:	4934      	ldr	r1, [pc, #208]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 8001290:	4313      	orrs	r3, r2
 8001292:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001294:	4b32      	ldr	r3, [pc, #200]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	492f      	ldr	r1, [pc, #188]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
 80012a8:	e020      	b.n	80012ec <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a2c      	ldr	r2, [pc, #176]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 80012b0:	f023 0301 	bic.w	r3, r3, #1
 80012b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012b6:	f7ff fb1b 	bl	80008f0 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012bc:	e00e      	b.n	80012dc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012be:	f7ff fb17 	bl	80008f0 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d907      	bls.n	80012dc <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012cc:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e3cf      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012dc:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1ea      	bne.n	80012be <HAL_RCC_OscConfig+0x1da>
 80012e8:	e000      	b.n	80012ec <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d07e      	beq.n	80013f6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d005      	beq.n	800130a <HAL_RCC_OscConfig+0x226>
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	2b0c      	cmp	r3, #12
 8001302:	d10e      	bne.n	8001322 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d10b      	bne.n	8001322 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d06e      	beq.n	80013f4 <HAL_RCC_OscConfig+0x310>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d16a      	bne.n	80013f4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e3ac      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800132a:	d106      	bne.n	800133a <HAL_RCC_OscConfig+0x256>
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0b      	ldr	r2, [pc, #44]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 8001332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e024      	b.n	8001384 <HAL_RCC_OscConfig+0x2a0>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001342:	d113      	bne.n	800136c <HAL_RCC_OscConfig+0x288>
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a05      	ldr	r2, [pc, #20]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 800134a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a02      	ldr	r2, [pc, #8]	@ (8001360 <HAL_RCC_OscConfig+0x27c>)
 8001356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	e012      	b.n	8001384 <HAL_RCC_OscConfig+0x2a0>
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	20000000 	.word	0x20000000
 8001368:	20000004 	.word	0x20000004
 800136c:	4b8b      	ldr	r3, [pc, #556]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a8a      	ldr	r2, [pc, #552]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 8001372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b88      	ldr	r3, [pc, #544]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a87      	ldr	r2, [pc, #540]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 800137e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d019      	beq.n	80013c0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fab0 	bl	80008f0 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001392:	e00e      	b.n	80013b2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff faac 	bl	80008f0 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	@ 0x64
 80013a0:	d907      	bls.n	80013b2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013a2:	4b7e      	ldr	r3, [pc, #504]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e364      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b2:	4b7a      	ldr	r3, [pc, #488]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0ea      	beq.n	8001394 <HAL_RCC_OscConfig+0x2b0>
 80013be:	e01a      	b.n	80013f6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fa96 	bl	80008f0 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013c6:	e00e      	b.n	80013e6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fa92 	bl	80008f0 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	@ 0x64
 80013d4:	d907      	bls.n	80013e6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013d6:	4b71      	ldr	r3, [pc, #452]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e34a      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013e6:	4b6d      	ldr	r3, [pc, #436]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1ea      	bne.n	80013c8 <HAL_RCC_OscConfig+0x2e4>
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d06c      	beq.n	80014dc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b04      	cmp	r3, #4
 8001406:	d005      	beq.n	8001414 <HAL_RCC_OscConfig+0x330>
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2b0c      	cmp	r3, #12
 800140c:	d119      	bne.n	8001442 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d116      	bne.n	8001442 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001414:	4b61      	ldr	r3, [pc, #388]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_RCC_OscConfig+0x348>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e327      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	4b5b      	ldr	r3, [pc, #364]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	061b      	lsls	r3, r3, #24
 800143a:	4958      	ldr	r1, [pc, #352]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001440:	e04c      	b.n	80014dc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d029      	beq.n	800149e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800144a:	4b54      	ldr	r3, [pc, #336]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a53      	ldr	r2, [pc, #332]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff fa4b 	bl	80008f0 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800145c:	e00e      	b.n	800147c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff fa47 	bl	80008f0 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d907      	bls.n	800147c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800146c:	4b4b      	ldr	r3, [pc, #300]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e2ff      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800147c:	4b47      	ldr	r3, [pc, #284]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0ea      	beq.n	800145e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001488:	4b44      	ldr	r3, [pc, #272]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	061b      	lsls	r3, r3, #24
 8001496:	4941      	ldr	r1, [pc, #260]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
 800149c:	e01e      	b.n	80014dc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149e:	4b3f      	ldr	r3, [pc, #252]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a3e      	ldr	r2, [pc, #248]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 80014a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014aa:	f7ff fa21 	bl	80008f0 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014b0:	e00e      	b.n	80014d0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff fa1d 	bl	80008f0 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d907      	bls.n	80014d0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014c0:	4b36      	ldr	r3, [pc, #216]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e2d5      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014d0:	4b32      	ldr	r3, [pc, #200]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ea      	bne.n	80014b2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d062      	beq.n	80015ae <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d038      	beq.n	8001562 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d108      	bne.n	800150a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80014f8:	4b28      	ldr	r3, [pc, #160]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 80014fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014fe:	4a27      	ldr	r2, [pc, #156]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 8001500:	f023 0310 	bic.w	r3, r3, #16
 8001504:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001508:	e007      	b.n	800151a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800150a:	4b24      	ldr	r3, [pc, #144]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 800150c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001510:	4a22      	ldr	r2, [pc, #136]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 800151c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001520:	4a1e      	ldr	r2, [pc, #120]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152a:	f7ff f9e1 	bl	80008f0 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001530:	e00f      	b.n	8001552 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001532:	f7ff f9dd 	bl	80008f0 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b07      	cmp	r3, #7
 800153e:	d908      	bls.n	8001552 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001540:	4b16      	ldr	r3, [pc, #88]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 8001542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e294      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001552:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 8001554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0e8      	beq.n	8001532 <HAL_RCC_OscConfig+0x44e>
 8001560:	e025      	b.n	80015ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 8001564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001568:	4a0c      	ldr	r2, [pc, #48]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001572:	f7ff f9bd 	bl	80008f0 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001578:	e012      	b.n	80015a0 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157a:	f7ff f9b9 	bl	80008f0 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b07      	cmp	r3, #7
 8001586:	d90b      	bls.n	80015a0 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001588:	4b04      	ldr	r3, [pc, #16]	@ (800159c <HAL_RCC_OscConfig+0x4b8>)
 800158a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e270      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a0:	4ba8      	ldr	r3, [pc, #672]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 80015a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1e5      	bne.n	800157a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 812d 	beq.w	8001816 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015c0:	4ba0      	ldr	r3, [pc, #640]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10d      	bne.n	80015e8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	4b9d      	ldr	r3, [pc, #628]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d0:	4a9c      	ldr	r2, [pc, #624]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 80015d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015d8:	4b9a      	ldr	r3, [pc, #616]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e4:	2301      	movs	r3, #1
 80015e6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e8:	4b97      	ldr	r3, [pc, #604]	@ (8001848 <HAL_RCC_OscConfig+0x764>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d11e      	bne.n	8001632 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015f4:	4b94      	ldr	r3, [pc, #592]	@ (8001848 <HAL_RCC_OscConfig+0x764>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a93      	ldr	r2, [pc, #588]	@ (8001848 <HAL_RCC_OscConfig+0x764>)
 80015fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001600:	f7ff f976 	bl	80008f0 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001606:	e00e      	b.n	8001626 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001608:	f7ff f972 	bl	80008f0 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d907      	bls.n	8001626 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001616:	4b8c      	ldr	r3, [pc, #560]	@ (8001848 <HAL_RCC_OscConfig+0x764>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e22a      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001626:	4b88      	ldr	r3, [pc, #544]	@ (8001848 <HAL_RCC_OscConfig+0x764>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0ea      	beq.n	8001608 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d01f      	beq.n	800167e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	d010      	beq.n	800166c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800164a:	4b7e      	ldr	r3, [pc, #504]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 800164c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001650:	4a7c      	ldr	r2, [pc, #496]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800165a:	4b7a      	ldr	r3, [pc, #488]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 800165c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001660:	4a78      	ldr	r2, [pc, #480]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800166a:	e018      	b.n	800169e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800166c:	4b75      	ldr	r3, [pc, #468]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001672:	4a74      	ldr	r2, [pc, #464]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800167c:	e00f      	b.n	800169e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800167e:	4b71      	ldr	r3, [pc, #452]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 8001680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001684:	4a6f      	ldr	r2, [pc, #444]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800168e:	4b6d      	ldr	r3, [pc, #436]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 8001690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001694:	4a6b      	ldr	r2, [pc, #428]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 8001696:	f023 0304 	bic.w	r3, r3, #4
 800169a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d068      	beq.n	8001778 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a6:	f7ff f923 	bl	80008f0 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ac:	e011      	b.n	80016d2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ae:	f7ff f91f 	bl	80008f0 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016bc:	4293      	cmp	r3, r2
 80016be:	d908      	bls.n	80016d2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016c0:	4b60      	ldr	r3, [pc, #384]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e1d4      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 80016d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0e6      	beq.n	80016ae <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d022      	beq.n	8001732 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80016ec:	4b55      	ldr	r3, [pc, #340]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f2:	4a54      	ldr	r2, [pc, #336]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 80016f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80016fc:	e011      	b.n	8001722 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7ff f8f7 	bl	80008f0 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d908      	bls.n	8001722 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001710:	4b4c      	ldr	r3, [pc, #304]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001716:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e1ac      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001722:	4b48      	ldr	r3, [pc, #288]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 8001724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0e6      	beq.n	80016fe <HAL_RCC_OscConfig+0x61a>
 8001730:	e068      	b.n	8001804 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001732:	4b44      	ldr	r3, [pc, #272]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 8001734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001738:	4a42      	ldr	r2, [pc, #264]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 800173a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800173e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001742:	e011      	b.n	8001768 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001744:	f7ff f8d4 	bl	80008f0 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d908      	bls.n	8001768 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001756:	4b3b      	ldr	r3, [pc, #236]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 8001758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e189      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001768:	4b36      	ldr	r3, [pc, #216]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 800176a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1e6      	bne.n	8001744 <HAL_RCC_OscConfig+0x660>
 8001776:	e045      	b.n	8001804 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff f8ba 	bl	80008f0 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800177e:	e011      	b.n	80017a4 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff f8b6 	bl	80008f0 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d908      	bls.n	80017a4 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001792:	4b2c      	ldr	r3, [pc, #176]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 8001794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e16b      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a4:	4b27      	ldr	r3, [pc, #156]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1e6      	bne.n	8001780 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80017b2:	4b24      	ldr	r3, [pc, #144]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d021      	beq.n	8001804 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80017c0:	4b20      	ldr	r3, [pc, #128]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 80017c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017d0:	e011      	b.n	80017f6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff f88d 	bl	80008f0 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d908      	bls.n	80017f6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017e4:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 80017e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e142      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017f6:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 80017f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1e6      	bne.n	80017d2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001804:	7ffb      	ldrb	r3, [r7, #31]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d105      	bne.n	8001816 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180a:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	4a0d      	ldr	r2, [pc, #52]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 8001810:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001814:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	2b00      	cmp	r3, #0
 8001820:	d04f      	beq.n	80018c2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001826:	2b00      	cmp	r3, #0
 8001828:	d028      	beq.n	800187c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 800182c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001830:	4a04      	ldr	r2, [pc, #16]	@ (8001844 <HAL_RCC_OscConfig+0x760>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183a:	f7ff f859 	bl	80008f0 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001840:	e014      	b.n	800186c <HAL_RCC_OscConfig+0x788>
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800184c:	f7ff f850 	bl	80008f0 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d908      	bls.n	800186c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800185a:	4b8a      	ldr	r3, [pc, #552]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 800185c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e107      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800186c:	4b85      	ldr	r3, [pc, #532]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 800186e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0e8      	beq.n	800184c <HAL_RCC_OscConfig+0x768>
 800187a:	e022      	b.n	80018c2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800187c:	4b81      	ldr	r3, [pc, #516]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 800187e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001882:	4a80      	ldr	r2, [pc, #512]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188c:	f7ff f830 	bl	80008f0 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001892:	e00f      	b.n	80018b4 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001894:	f7ff f82c 	bl	80008f0 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d908      	bls.n	80018b4 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018a2:	4b78      	ldr	r3, [pc, #480]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 80018a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0e3      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018b4:	4b73      	ldr	r3, [pc, #460]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 80018b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1e8      	bne.n	8001894 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 80d7 	beq.w	8001a7a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018cc:	4b6d      	ldr	r3, [pc, #436]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	2b0c      	cmp	r3, #12
 80018d6:	f000 8091 	beq.w	80019fc <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d166      	bne.n	80019b0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e2:	4b68      	ldr	r3, [pc, #416]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a67      	ldr	r2, [pc, #412]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 80018e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ee:	f7fe ffff 	bl	80008f0 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f4:	e00e      	b.n	8001914 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f6:	f7fe fffb 	bl	80008f0 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d907      	bls.n	8001914 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001904:	4b5f      	ldr	r3, [pc, #380]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e0b3      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001914:	4b5b      	ldr	r3, [pc, #364]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1ea      	bne.n	80018f6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001920:	4b58      	ldr	r3, [pc, #352]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	4b58      	ldr	r3, [pc, #352]	@ (8001a88 <HAL_RCC_OscConfig+0x9a4>)
 8001926:	4013      	ands	r3, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001930:	3a01      	subs	r2, #1
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	4311      	orrs	r1, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800193a:	0212      	lsls	r2, r2, #8
 800193c:	4311      	orrs	r1, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001942:	0852      	lsrs	r2, r2, #1
 8001944:	3a01      	subs	r2, #1
 8001946:	0552      	lsls	r2, r2, #21
 8001948:	4311      	orrs	r1, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800194e:	0852      	lsrs	r2, r2, #1
 8001950:	3a01      	subs	r2, #1
 8001952:	0652      	lsls	r2, r2, #25
 8001954:	4311      	orrs	r1, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800195a:	06d2      	lsls	r2, r2, #27
 800195c:	430a      	orrs	r2, r1
 800195e:	4949      	ldr	r1, [pc, #292]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 8001960:	4313      	orrs	r3, r2
 8001962:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001964:	4b47      	ldr	r3, [pc, #284]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a46      	ldr	r2, [pc, #280]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 800196a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800196e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001970:	4b44      	ldr	r3, [pc, #272]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4a43      	ldr	r2, [pc, #268]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 8001976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800197a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7fe ffb8 	bl	80008f0 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001982:	e00e      	b.n	80019a2 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001984:	f7fe ffb4 	bl	80008f0 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d907      	bls.n	80019a2 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001992:	4b3c      	ldr	r3, [pc, #240]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e06c      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a2:	4b38      	ldr	r3, [pc, #224]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0ea      	beq.n	8001984 <HAL_RCC_OscConfig+0x8a0>
 80019ae:	e064      	b.n	8001a7a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b0:	4b34      	ldr	r3, [pc, #208]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a33      	ldr	r2, [pc, #204]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 80019b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7fe ff98 	bl	80008f0 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c2:	e00e      	b.n	80019e2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c4:	f7fe ff94 	bl	80008f0 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d907      	bls.n	80019e2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e04c      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e2:	4b28      	ldr	r3, [pc, #160]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ea      	bne.n	80019c4 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019ee:	4b25      	ldr	r3, [pc, #148]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	4924      	ldr	r1, [pc, #144]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 80019f4:	4b25      	ldr	r3, [pc, #148]	@ (8001a8c <HAL_RCC_OscConfig+0x9a8>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	60cb      	str	r3, [r1, #12]
 80019fa:	e03e      	b.n	8001a7a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e039      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001a08:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <HAL_RCC_OscConfig+0x9a0>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 0203 	and.w	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d12c      	bne.n	8001a76 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a26:	3b01      	subs	r3, #1
 8001a28:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d123      	bne.n	8001a76 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a38:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d11b      	bne.n	8001a76 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a48:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d113      	bne.n	8001a76 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	085b      	lsrs	r3, r3, #1
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d109      	bne.n	8001a76 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6c:	085b      	lsrs	r3, r3, #1
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	019f800c 	.word	0x019f800c
 8001a8c:	feeefffc 	.word	0xfeeefffc

08001a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e11c      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b90      	ldr	r3, [pc, #576]	@ (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d910      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b8d      	ldr	r3, [pc, #564]	@ (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 020f 	bic.w	r2, r3, #15
 8001abe:	498b      	ldr	r1, [pc, #556]	@ (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b89      	ldr	r3, [pc, #548]	@ (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e104      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	4b81      	ldr	r3, [pc, #516]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d908      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af4:	4b7e      	ldr	r3, [pc, #504]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	497b      	ldr	r1, [pc, #492]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8085 	beq.w	8001c1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d11f      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1c:	4b74      	ldr	r3, [pc, #464]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0da      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b2c:	f000 f9fc 	bl	8001f28 <RCC_GetSysClockFreqFromPLLSource>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4a6f      	ldr	r2, [pc, #444]	@ (8001cf4 <HAL_RCC_ClockConfig+0x264>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d947      	bls.n	8001bca <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b3a:	4b6d      	ldr	r3, [pc, #436]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d141      	bne.n	8001bca <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b46:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b4e:	4a68      	ldr	r2, [pc, #416]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b56:	2380      	movs	r3, #128	@ 0x80
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e036      	b.n	8001bca <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b64:	4b62      	ldr	r3, [pc, #392]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d115      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0b6      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0aa      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b8c:	4b58      	ldr	r3, [pc, #352]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0a2      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b9c:	f000 f8b0 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4a53      	ldr	r2, [pc, #332]	@ (8001cf4 <HAL_RCC_ClockConfig+0x264>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d90f      	bls.n	8001bca <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001baa:	4b51      	ldr	r3, [pc, #324]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bb6:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bbe:	4a4c      	ldr	r2, [pc, #304]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bc4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bc6:	2380      	movs	r3, #128	@ 0x80
 8001bc8:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bca:	4b49      	ldr	r3, [pc, #292]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f023 0203 	bic.w	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4946      	ldr	r1, [pc, #280]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bdc:	f7fe fe88 	bl	80008f0 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be2:	e013      	b.n	8001c0c <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be4:	f7fe fe84 	bl	80008f0 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d90a      	bls.n	8001c0c <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 020c 	and.w	r2, r3, #12
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e06a      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0c:	4b38      	ldr	r3, [pc, #224]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 020c 	and.w	r2, r3, #12
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d1e2      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b80      	cmp	r3, #128	@ 0x80
 8001c22:	d105      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c24:	4b32      	ldr	r3, [pc, #200]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4a31      	ldr	r2, [pc, #196]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001c2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c2e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d208      	bcs.n	8001c5e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b28      	ldr	r3, [pc, #160]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4925      	ldr	r1, [pc, #148]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5e:	4b23      	ldr	r3, [pc, #140]	@ (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d210      	bcs.n	8001c8e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 020f 	bic.w	r2, r3, #15
 8001c74:	491d      	ldr	r1, [pc, #116]	@ (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e029      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	4912      	ldr	r1, [pc, #72]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d009      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	490a      	ldr	r1, [pc, #40]	@ (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ccc:	f000 f8b4 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4a09      	ldr	r2, [pc, #36]	@ (8001cf8 <HAL_RCC_ClockConfig+0x268>)
 8001cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_RCC_ClockConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fdb8 	bl	8000850 <HAL_InitTick>
 8001ce0:	4603      	mov	r3, r0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40022000 	.word	0x40022000
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	04c4b400 	.word	0x04c4b400
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	@ 0x24
 8001d04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d0e:	4b47      	ldr	r3, [pc, #284]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d18:	4b44      	ldr	r3, [pc, #272]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x34>
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d121      	bne.n	8001d72 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d11e      	bne.n	8001d72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d34:	4b3d      	ldr	r3, [pc, #244]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d40:	4b3a      	ldr	r3, [pc, #232]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	e005      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d50:	4b36      	ldr	r3, [pc, #216]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001d5c:	4a34      	ldr	r2, [pc, #208]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0x130>)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d64:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10d      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d102      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d78:	4b2e      	ldr	r3, [pc, #184]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	e004      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d84:	4b2b      	ldr	r3, [pc, #172]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d146      	bne.n	8001e1c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d8e:	4b27      	ldr	r3, [pc, #156]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d98:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3301      	adds	r3, #1
 8001da4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d003      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0xb4>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d00d      	beq.n	8001dce <HAL_RCC_GetSysClockFreq+0xce>
 8001db2:	e019      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001db4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x134>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001dbe:	68d2      	ldr	r2, [r2, #12]
 8001dc0:	0a12      	lsrs	r2, r2, #8
 8001dc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	617b      	str	r3, [r7, #20]
        break;
 8001dcc:	e019      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dce:	4a19      	ldr	r2, [pc, #100]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x134>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4a15      	ldr	r2, [pc, #84]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001dd8:	68d2      	ldr	r2, [r2, #12]
 8001dda:	0a12      	lsrs	r2, r2, #8
 8001ddc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001de0:	fb02 f303 	mul.w	r3, r2, r3
 8001de4:	617b      	str	r3, [r7, #20]
        break;
 8001de6:	e00c      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	4a0e      	ldr	r2, [pc, #56]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001df2:	68d2      	ldr	r2, [r2, #12]
 8001df4:	0a12      	lsrs	r2, r2, #8
 8001df6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	617b      	str	r3, [r7, #20]
        break;
 8001e00:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001e02:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	0e5b      	lsrs	r3, r3, #25
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e1c:	69bb      	ldr	r3, [r7, #24]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	@ 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	08002f00 	.word	0x08002f00
 8001e34:	00f42400 	.word	0x00f42400

08001e38 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8001e3c:	f7ff ff60 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <HAL_RCC_GetHCLKFreq+0x20>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	091b      	lsrs	r3, r3, #4
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	4903      	ldr	r1, [pc, #12]	@ (8001e5c <HAL_RCC_GetHCLKFreq+0x24>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08002ef0 	.word	0x08002ef0

08001e60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e78:	f7ff f846 	bl	8000f08 <HAL_PWREx_GetVoltageRange>
 8001e7c:	6138      	str	r0, [r7, #16]
 8001e7e:	e014      	b.n	8001eaa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e80:	4b27      	ldr	r3, [pc, #156]	@ (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e84:	4a26      	ldr	r2, [pc, #152]	@ (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e8c:	4b24      	ldr	r3, [pc, #144]	@ (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e98:	f7ff f836 	bl	8000f08 <HAL_PWREx_GetVoltageRange>
 8001e9c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e9e:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ea4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ea8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eb6:	d10b      	bne.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b80      	cmp	r3, #128	@ 0x80
 8001ebc:	d919      	bls.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ec2:	d902      	bls.n	8001eca <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001ec8:	e013      	b.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eca:	2301      	movs	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001ece:	e010      	b.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b80      	cmp	r3, #128	@ 0x80
 8001ed4:	d902      	bls.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e00a      	b.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b80      	cmp	r3, #128	@ 0x80
 8001ee0:	d102      	bne.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	e004      	b.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b70      	cmp	r3, #112	@ 0x70
 8001eec:	d101      	bne.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eee:	2301      	movs	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 020f 	bic.w	r2, r3, #15
 8001efa:	490a      	ldr	r1, [pc, #40]	@ (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001f02:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40022000 	.word	0x40022000

08001f28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f2e:	4b31      	ldr	r3, [pc, #196]	@ (8001ff4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f38:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3301      	adds	r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d015      	beq.n	8001f78 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d839      	bhi.n	8001fc6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d01c      	beq.n	8001f92 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d133      	bne.n	8001fc6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f5e:	4a26      	ldr	r2, [pc, #152]	@ (8001ff8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f66:	4a23      	ldr	r2, [pc, #140]	@ (8001ff4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f68:	68d2      	ldr	r2, [r2, #12]
 8001f6a:	0a12      	lsrs	r2, r2, #8
 8001f6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f70:	fb02 f303 	mul.w	r3, r2, r3
 8001f74:	613b      	str	r3, [r7, #16]
      break;
 8001f76:	e029      	b.n	8001fcc <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f78:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f80:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f82:	68d2      	ldr	r2, [r2, #12]
 8001f84:	0a12      	lsrs	r2, r2, #8
 8001f86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	613b      	str	r3, [r7, #16]
      break;
 8001f90:	e01c      	b.n	8001fcc <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f92:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d107      	bne.n	8001fae <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ff4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	e005      	b.n	8001fba <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fae:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8001fba:	4a10      	ldr	r2, [pc, #64]	@ (8001ffc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc2:	613b      	str	r3, [r7, #16]
        break;
 8001fc4:	e002      	b.n	8001fcc <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
      break;
 8001fca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001fcc:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0e5b      	lsrs	r3, r3, #25
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001fe6:	683b      	ldr	r3, [r7, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	00f42400 	.word	0x00f42400
 8001ffc:	08002f00 	.word	0x08002f00

08002000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002008:	2300      	movs	r3, #0
 800200a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800200c:	2300      	movs	r3, #0
 800200e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002018:	2b00      	cmp	r3, #0
 800201a:	d040      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002020:	2b80      	cmp	r3, #128	@ 0x80
 8002022:	d02a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002024:	2b80      	cmp	r3, #128	@ 0x80
 8002026:	d825      	bhi.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002028:	2b60      	cmp	r3, #96	@ 0x60
 800202a:	d026      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800202c:	2b60      	cmp	r3, #96	@ 0x60
 800202e:	d821      	bhi.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002030:	2b40      	cmp	r3, #64	@ 0x40
 8002032:	d006      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002034:	2b40      	cmp	r3, #64	@ 0x40
 8002036:	d81d      	bhi.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002038:	2b00      	cmp	r3, #0
 800203a:	d009      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800203c:	2b20      	cmp	r3, #32
 800203e:	d010      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002040:	e018      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002042:	4b8f      	ldr	r3, [pc, #572]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	4a8e      	ldr	r2, [pc, #568]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800204c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800204e:	e015      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3304      	adds	r3, #4
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fb56 	bl	8002708 <RCCEx_PLLSAI1_Config>
 800205c:	4603      	mov	r3, r0
 800205e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002060:	e00c      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3320      	adds	r3, #32
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f000 fc33 	bl	80028d4 <RCCEx_PLLSAI2_Config>
 800206e:	4603      	mov	r3, r0
 8002070:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002072:	e003      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	77fb      	strb	r3, [r7, #31]
        break;
 8002078:	e000      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800207a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800207c:	7ffb      	ldrb	r3, [r7, #31]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10b      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002082:	4b7f      	ldr	r3, [pc, #508]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002084:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002088:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002090:	497b      	ldr	r1, [pc, #492]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002098:	e001      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800209a:	7ffb      	ldrb	r3, [r7, #31]
 800209c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d047      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020b2:	d030      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80020b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020b8:	d82a      	bhi.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80020ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020be:	d02a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80020c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020c4:	d824      	bhi.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80020c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020ca:	d008      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0xde>
 80020cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020d0:	d81e      	bhi.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xec>
 80020d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020da:	d010      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80020dc:	e018      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020de:	4b68      	ldr	r3, [pc, #416]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4a67      	ldr	r2, [pc, #412]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e8:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80020ea:	e015      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3304      	adds	r3, #4
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fb08 	bl	8002708 <RCCEx_PLLSAI1_Config>
 80020f8:	4603      	mov	r3, r0
 80020fa:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80020fc:	e00c      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3320      	adds	r3, #32
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f000 fbe5 	bl	80028d4 <RCCEx_PLLSAI2_Config>
 800210a:	4603      	mov	r3, r0
 800210c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800210e:	e003      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	77fb      	strb	r3, [r7, #31]
        break;
 8002114:	e000      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8002116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002118:	7ffb      	ldrb	r3, [r7, #31]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10b      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800211e:	4b58      	ldr	r3, [pc, #352]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002120:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002124:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212c:	4954      	ldr	r1, [pc, #336]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002134:	e001      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002136:	7ffb      	ldrb	r3, [r7, #31]
 8002138:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 80ab 	beq.w	800229e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002148:	2300      	movs	r3, #0
 800214a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214c:	4b4c      	ldr	r3, [pc, #304]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10d      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002158:	4b49      	ldr	r3, [pc, #292]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215c:	4a48      	ldr	r2, [pc, #288]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800215e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002162:	6593      	str	r3, [r2, #88]	@ 0x58
 8002164:	4b46      	ldr	r3, [pc, #280]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002170:	2301      	movs	r3, #1
 8002172:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002174:	4b43      	ldr	r3, [pc, #268]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a42      	ldr	r2, [pc, #264]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800217a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002180:	f7fe fbb6 	bl	80008f0 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002186:	e00f      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002188:	f7fe fbb2 	bl	80008f0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d908      	bls.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002196:	4b3b      	ldr	r3, [pc, #236]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80021a6:	e006      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021a8:	4b36      	ldr	r3, [pc, #216]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0e9      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80021b4:	e000      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80021b6:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80021b8:	7ffb      	ldrb	r3, [r7, #31]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d164      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021be:	4b30      	ldr	r3, [pc, #192]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021c8:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01f      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d019      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021dc:	4b28      	ldr	r3, [pc, #160]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021e6:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021e8:	4b25      	ldr	r3, [pc, #148]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ee:	4a24      	ldr	r2, [pc, #144]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021f8:	4b21      	ldr	r3, [pc, #132]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fe:	4a20      	ldr	r2, [pc, #128]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002208:	4a1d      	ldr	r2, [pc, #116]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01f      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7fe fb69 	bl	80008f0 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002220:	e012      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7fe fb65 	bl	80008f0 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d909      	bls.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002234:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10a      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8002246:	e007      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002248:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0e5      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8002256:	e000      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8002258:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800225a:	7ffb      	ldrb	r3, [r7, #31]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10c      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002260:	4b07      	ldr	r3, [pc, #28]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002266:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002270:	4903      	ldr	r1, [pc, #12]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002278:	e008      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800227a:	7ffb      	ldrb	r3, [r7, #31]
 800227c:	77bb      	strb	r3, [r7, #30]
 800227e:	e005      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8002280:	40021000 	.word	0x40021000
 8002284:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002288:	7ffb      	ldrb	r3, [r7, #31]
 800228a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800228c:	7dfb      	ldrb	r3, [r7, #23]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d105      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002292:	4b9c      	ldr	r3, [pc, #624]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002296:	4a9b      	ldr	r2, [pc, #620]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800229c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022aa:	4b96      	ldr	r3, [pc, #600]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b0:	f023 0203 	bic.w	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b8:	4992      	ldr	r1, [pc, #584]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d2:	f023 020c 	bic.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022da:	498a      	ldr	r1, [pc, #552]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ee:	4b85      	ldr	r3, [pc, #532]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022fc:	4981      	ldr	r1, [pc, #516]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002310:	4b7c      	ldr	r3, [pc, #496]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002316:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	4979      	ldr	r1, [pc, #484]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002332:	4b74      	ldr	r3, [pc, #464]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002338:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002340:	4970      	ldr	r1, [pc, #448]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002354:	4b6b      	ldr	r3, [pc, #428]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002362:	4968      	ldr	r1, [pc, #416]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002376:	4b63      	ldr	r3, [pc, #396]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002384:	495f      	ldr	r1, [pc, #380]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002398:	4b5a      	ldr	r3, [pc, #360]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a6:	4957      	ldr	r1, [pc, #348]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80023ba:	4b52      	ldr	r3, [pc, #328]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023c8:	494e      	ldr	r1, [pc, #312]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d031      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023e4:	d00e      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80023e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023ea:	d814      	bhi.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d015      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80023f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f4:	d10f      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f6:	4b43      	ldr	r3, [pc, #268]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	4a42      	ldr	r2, [pc, #264]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002400:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002402:	e00c      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3304      	adds	r3, #4
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f97c 	bl	8002708 <RCCEx_PLLSAI1_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002414:	e003      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	77fb      	strb	r3, [r7, #31]
        break;
 800241a:	e000      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 800241c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800241e:	7ffb      	ldrb	r3, [r7, #31]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10b      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002424:	4b37      	ldr	r3, [pc, #220]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002432:	4934      	ldr	r1, [pc, #208]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800243a:	e001      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800243c:	7ffb      	ldrb	r3, [r7, #31]
 800243e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800244c:	4b2d      	ldr	r3, [pc, #180]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245a:	492a      	ldr	r1, [pc, #168]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800246e:	4b25      	ldr	r3, [pc, #148]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002474:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800247c:	4921      	ldr	r1, [pc, #132]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002490:	4b1c      	ldr	r3, [pc, #112]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002496:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249e:	4919      	ldr	r1, [pc, #100]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024b2:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80024b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024b8:	f023 0203 	bic.w	r2, r3, #3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c0:	4910      	ldr	r1, [pc, #64]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d02b      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024e2:	4908      	ldr	r1, [pc, #32]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024f2:	d109      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a02      	ldr	r2, [pc, #8]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80024fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024fe:	60d3      	str	r3, [r2, #12]
 8002500:	e014      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800250c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002510:	d10c      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3304      	adds	r3, #4
 8002516:	2101      	movs	r1, #1
 8002518:	4618      	mov	r0, r3
 800251a:	f000 f8f5 	bl	8002708 <RCCEx_PLLSAI1_Config>
 800251e:	4603      	mov	r3, r0
 8002520:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8002522:	7ffb      	ldrb	r3, [r7, #31]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8002528:	7ffb      	ldrb	r3, [r7, #31]
 800252a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d04a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800253c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002540:	d108      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8002542:	4b70      	ldr	r3, [pc, #448]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002544:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002548:	4a6e      	ldr	r2, [pc, #440]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800254a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800254e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002552:	e012      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002554:	4b6b      	ldr	r3, [pc, #428]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002562:	4968      	ldr	r1, [pc, #416]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800256a:	4b66      	ldr	r3, [pc, #408]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800256c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002570:	4a64      	ldr	r2, [pc, #400]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002572:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002576:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800257e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002582:	d10d      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3304      	adds	r3, #4
 8002588:	2101      	movs	r1, #1
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f8bc 	bl	8002708 <RCCEx_PLLSAI1_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002594:	7ffb      	ldrb	r3, [r7, #31]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d019      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800259a:	7ffb      	ldrb	r3, [r7, #31]
 800259c:	77bb      	strb	r3, [r7, #30]
 800259e:	e016      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025a8:	d106      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025aa:	4b56      	ldr	r3, [pc, #344]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	4a55      	ldr	r2, [pc, #340]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80025b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025b4:	60d3      	str	r3, [r2, #12]
 80025b6:	e00a      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025c0:	d105      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025c2:	4b50      	ldr	r3, [pc, #320]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	4a4f      	ldr	r2, [pc, #316]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025cc:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d028      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025da:	4b4a      	ldr	r3, [pc, #296]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025e8:	4946      	ldr	r1, [pc, #280]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025f8:	d106      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025fa:	4b42      	ldr	r3, [pc, #264]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	4a41      	ldr	r2, [pc, #260]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002600:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002604:	60d3      	str	r3, [r2, #12]
 8002606:	e011      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800260c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002610:	d10c      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	2101      	movs	r1, #1
 8002618:	4618      	mov	r0, r3
 800261a:	f000 f875 	bl	8002708 <RCCEx_PLLSAI1_Config>
 800261e:	4603      	mov	r3, r0
 8002620:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002622:	7ffb      	ldrb	r3, [r7, #31]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8002628:	7ffb      	ldrb	r3, [r7, #31]
 800262a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01e      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002638:	4b32      	ldr	r3, [pc, #200]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002648:	492e      	ldr	r1, [pc, #184]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002656:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800265a:	d10c      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3304      	adds	r3, #4
 8002660:	2102      	movs	r1, #2
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f850 	bl	8002708 <RCCEx_PLLSAI1_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800266c:	7ffb      	ldrb	r3, [r7, #31]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8002672:	7ffb      	ldrb	r3, [r7, #31]
 8002674:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002682:	4b20      	ldr	r3, [pc, #128]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002684:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002688:	f023 0204 	bic.w	r2, r3, #4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002692:	491c      	ldr	r1, [pc, #112]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80026a6:	4b17      	ldr	r3, [pc, #92]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80026a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026ac:	f023 0218 	bic.w	r2, r3, #24
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b6:	4913      	ldr	r1, [pc, #76]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d017      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80026ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80026cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026da:	490a      	ldr	r1, [pc, #40]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026ec:	d105      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ee:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	4a04      	ldr	r2, [pc, #16]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80026f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026f8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80026fa:	7fbb      	ldrb	r3, [r7, #30]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3720      	adds	r7, #32
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000

08002708 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d018      	beq.n	8002750 <RCCEx_PLLSAI1_Config+0x48>
 800271e:	2b03      	cmp	r3, #3
 8002720:	d81f      	bhi.n	8002762 <RCCEx_PLLSAI1_Config+0x5a>
 8002722:	2b01      	cmp	r3, #1
 8002724:	d002      	beq.n	800272c <RCCEx_PLLSAI1_Config+0x24>
 8002726:	2b02      	cmp	r3, #2
 8002728:	d009      	beq.n	800273e <RCCEx_PLLSAI1_Config+0x36>
 800272a:	e01a      	b.n	8002762 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800272c:	4b65      	ldr	r3, [pc, #404]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d117      	bne.n	8002768 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800273c:	e014      	b.n	8002768 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800273e:	4b61      	ldr	r3, [pc, #388]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002746:	2b00      	cmp	r3, #0
 8002748:	d110      	bne.n	800276c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274e:	e00d      	b.n	800276c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8002750:	4b5c      	ldr	r3, [pc, #368]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002760:	e006      	b.n	8002770 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
      break;
 8002766:	e004      	b.n	8002772 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002768:	bf00      	nop
 800276a:	e002      	b.n	8002772 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800276c:	bf00      	nop
 800276e:	e000      	b.n	8002772 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002770:	bf00      	nop
  }

  if (status == HAL_OK)
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b00      	cmp	r3, #0
 8002776:	f040 809f 	bne.w	80028b8 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800277a:	4b52      	ldr	r3, [pc, #328]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a51      	ldr	r2, [pc, #324]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002780:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002786:	f7fe f8b3 	bl	80008f0 <HAL_GetTick>
 800278a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800278c:	e00f      	b.n	80027ae <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800278e:	f7fe f8af 	bl	80008f0 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d908      	bls.n	80027ae <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800279c:	4b49      	ldr	r3, [pc, #292]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d009      	beq.n	80027bc <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80027ac:	e006      	b.n	80027bc <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027ae:	4b45      	ldr	r3, [pc, #276]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1e9      	bne.n	800278e <RCCEx_PLLSAI1_Config+0x86>
 80027ba:	e000      	b.n	80027be <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80027bc:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d179      	bne.n	80028b8 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d116      	bne.n	80027f8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027ca:	4b3e      	ldr	r3, [pc, #248]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	4b3e      	ldr	r3, [pc, #248]	@ (80028c8 <RCCEx_PLLSAI1_Config+0x1c0>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6892      	ldr	r2, [r2, #8]
 80027d6:	0211      	lsls	r1, r2, #8
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	68d2      	ldr	r2, [r2, #12]
 80027dc:	06d2      	lsls	r2, r2, #27
 80027de:	4311      	orrs	r1, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6852      	ldr	r2, [r2, #4]
 80027e4:	3a01      	subs	r2, #1
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	4311      	orrs	r1, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	4934      	ldr	r1, [pc, #208]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	610b      	str	r3, [r1, #16]
 80027f6:	e033      	b.n	8002860 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d118      	bne.n	8002830 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027fe:	4b31      	ldr	r3, [pc, #196]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	4b32      	ldr	r3, [pc, #200]	@ (80028cc <RCCEx_PLLSAI1_Config+0x1c4>)
 8002804:	4013      	ands	r3, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6892      	ldr	r2, [r2, #8]
 800280a:	0211      	lsls	r1, r2, #8
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6912      	ldr	r2, [r2, #16]
 8002810:	0852      	lsrs	r2, r2, #1
 8002812:	3a01      	subs	r2, #1
 8002814:	0552      	lsls	r2, r2, #21
 8002816:	4311      	orrs	r1, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6852      	ldr	r2, [r2, #4]
 800281c:	3a01      	subs	r2, #1
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	4311      	orrs	r1, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	4926      	ldr	r1, [pc, #152]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	610b      	str	r3, [r1, #16]
 800282e:	e017      	b.n	8002860 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002830:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	4b26      	ldr	r3, [pc, #152]	@ (80028d0 <RCCEx_PLLSAI1_Config+0x1c8>)
 8002836:	4013      	ands	r3, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6892      	ldr	r2, [r2, #8]
 800283c:	0211      	lsls	r1, r2, #8
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6952      	ldr	r2, [r2, #20]
 8002842:	0852      	lsrs	r2, r2, #1
 8002844:	3a01      	subs	r2, #1
 8002846:	0652      	lsls	r2, r2, #25
 8002848:	4311      	orrs	r1, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6852      	ldr	r2, [r2, #4]
 800284e:	3a01      	subs	r2, #1
 8002850:	0112      	lsls	r2, r2, #4
 8002852:	4311      	orrs	r1, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	491a      	ldr	r1, [pc, #104]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800285c:	4313      	orrs	r3, r2
 800285e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002860:	4b18      	ldr	r3, [pc, #96]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a17      	ldr	r2, [pc, #92]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002866:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800286a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe f840 	bl	80008f0 <HAL_GetTick>
 8002870:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002872:	e00f      	b.n	8002894 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002874:	f7fe f83c 	bl	80008f0 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d908      	bls.n	8002894 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8002892:	e006      	b.n	80028a2 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002894:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0e9      	beq.n	8002874 <RCCEx_PLLSAI1_Config+0x16c>
 80028a0:	e000      	b.n	80028a4 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80028a2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	4904      	ldr	r1, [pc, #16]	@ (80028c4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	07ff800c 	.word	0x07ff800c
 80028cc:	ff9f800c 	.word	0xff9f800c
 80028d0:	f9ff800c 	.word	0xf9ff800c

080028d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d018      	beq.n	800291c <RCCEx_PLLSAI2_Config+0x48>
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d81f      	bhi.n	800292e <RCCEx_PLLSAI2_Config+0x5a>
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d002      	beq.n	80028f8 <RCCEx_PLLSAI2_Config+0x24>
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d009      	beq.n	800290a <RCCEx_PLLSAI2_Config+0x36>
 80028f6:	e01a      	b.n	800292e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028f8:	4b4a      	ldr	r3, [pc, #296]	@ (8002a24 <RCCEx_PLLSAI2_Config+0x150>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d117      	bne.n	8002934 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002908:	e014      	b.n	8002934 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800290a:	4b46      	ldr	r3, [pc, #280]	@ (8002a24 <RCCEx_PLLSAI2_Config+0x150>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002912:	2b00      	cmp	r3, #0
 8002914:	d110      	bne.n	8002938 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291a:	e00d      	b.n	8002938 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800291c:	4b41      	ldr	r3, [pc, #260]	@ (8002a24 <RCCEx_PLLSAI2_Config+0x150>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d109      	bne.n	800293c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292c:	e006      	b.n	800293c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
      break;
 8002932:	e004      	b.n	800293e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002934:	bf00      	nop
 8002936:	e002      	b.n	800293e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002938:	bf00      	nop
 800293a:	e000      	b.n	800293e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800293c:	bf00      	nop
  }

  if (status == HAL_OK)
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d169      	bne.n	8002a18 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002944:	4b37      	ldr	r3, [pc, #220]	@ (8002a24 <RCCEx_PLLSAI2_Config+0x150>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a36      	ldr	r2, [pc, #216]	@ (8002a24 <RCCEx_PLLSAI2_Config+0x150>)
 800294a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800294e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002950:	f7fd ffce 	bl	80008f0 <HAL_GetTick>
 8002954:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002956:	e00f      	b.n	8002978 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002958:	f7fd ffca 	bl	80008f0 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d908      	bls.n	8002978 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002966:	4b2f      	ldr	r3, [pc, #188]	@ (8002a24 <RCCEx_PLLSAI2_Config+0x150>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002976:	e006      	b.n	8002986 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002978:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <RCCEx_PLLSAI2_Config+0x150>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1e9      	bne.n	8002958 <RCCEx_PLLSAI2_Config+0x84>
 8002984:	e000      	b.n	8002988 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8002986:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d144      	bne.n	8002a18 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d115      	bne.n	80029c0 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002994:	4b23      	ldr	r3, [pc, #140]	@ (8002a24 <RCCEx_PLLSAI2_Config+0x150>)
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	4b23      	ldr	r3, [pc, #140]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x154>)
 800299a:	4013      	ands	r3, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6892      	ldr	r2, [r2, #8]
 80029a0:	0211      	lsls	r1, r2, #8
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68d2      	ldr	r2, [r2, #12]
 80029a6:	06d2      	lsls	r2, r2, #27
 80029a8:	4311      	orrs	r1, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6852      	ldr	r2, [r2, #4]
 80029ae:	3a01      	subs	r2, #1
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	4311      	orrs	r1, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	491a      	ldr	r1, [pc, #104]	@ (8002a24 <RCCEx_PLLSAI2_Config+0x150>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029c0:	4b18      	ldr	r3, [pc, #96]	@ (8002a24 <RCCEx_PLLSAI2_Config+0x150>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a17      	ldr	r2, [pc, #92]	@ (8002a24 <RCCEx_PLLSAI2_Config+0x150>)
 80029c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fd ff90 	bl	80008f0 <HAL_GetTick>
 80029d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029d2:	e00f      	b.n	80029f4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029d4:	f7fd ff8c 	bl	80008f0 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d908      	bls.n	80029f4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029e2:	4b10      	ldr	r3, [pc, #64]	@ (8002a24 <RCCEx_PLLSAI2_Config+0x150>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80029f2:	e006      	b.n	8002a02 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <RCCEx_PLLSAI2_Config+0x150>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0e9      	beq.n	80029d4 <RCCEx_PLLSAI2_Config+0x100>
 8002a00:	e000      	b.n	8002a04 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8002a02:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8002a0a:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <RCCEx_PLLSAI2_Config+0x150>)
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	4904      	ldr	r1, [pc, #16]	@ (8002a24 <RCCEx_PLLSAI2_Config+0x150>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
 8002a28:	07ff800c 	.word	0x07ff800c

08002a2c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d066      	beq.n	8002b0c <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fd fd7a 	bl	800054c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d045      	beq.n	8002afa <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b18 <HAL_RTC_Init+0xec>)
 8002a70:	22ca      	movs	r2, #202	@ 0xca
 8002a72:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a74:	4b28      	ldr	r3, [pc, #160]	@ (8002b18 <HAL_RTC_Init+0xec>)
 8002a76:	2253      	movs	r2, #83	@ 0x53
 8002a78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f872 	bl	8002b64 <RTC_EnterInitMode>
 8002a80:	4603      	mov	r3, r0
 8002a82:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d121      	bne.n	8002ace <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002a8a:	4b23      	ldr	r3, [pc, #140]	@ (8002b18 <HAL_RTC_Init+0xec>)
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	4a22      	ldr	r2, [pc, #136]	@ (8002b18 <HAL_RTC_Init+0xec>)
 8002a90:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8002a94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a98:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002b18 <HAL_RTC_Init+0xec>)
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6859      	ldr	r1, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	4319      	orrs	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	430b      	orrs	r3, r1
 8002aae:	491a      	ldr	r1, [pc, #104]	@ (8002b18 <HAL_RTC_Init+0xec>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	4916      	ldr	r1, [pc, #88]	@ (8002b18 <HAL_RTC_Init+0xec>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f881 	bl	8002bcc <RTC_ExitInitMode>
 8002aca:	4603      	mov	r3, r0
 8002acc:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10e      	bne.n	8002af2 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8002ad4:	4b10      	ldr	r3, [pc, #64]	@ (8002b18 <HAL_RTC_Init+0xec>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a19      	ldr	r1, [r3, #32]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4319      	orrs	r1, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	430b      	orrs	r3, r1
 8002aec:	490a      	ldr	r1, [pc, #40]	@ (8002b18 <HAL_RTC_Init+0xec>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002af2:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <HAL_RTC_Init+0xec>)
 8002af4:	22ff      	movs	r2, #255	@ 0xff
 8002af6:	625a      	str	r2, [r3, #36]	@ 0x24
 8002af8:	e001      	b.n	8002afe <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d103      	bne.n	8002b0c <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40002800 	.word	0x40002800

08002b1c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8002b24:	4b0d      	ldr	r3, [pc, #52]	@ (8002b5c <HAL_RTC_WaitForSynchro+0x40>)
 8002b26:	4a0e      	ldr	r2, [pc, #56]	@ (8002b60 <HAL_RTC_WaitForSynchro+0x44>)
 8002b28:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002b2a:	f7fd fee1 	bl	80008f0 <HAL_GetTick>
 8002b2e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002b30:	e009      	b.n	8002b46 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b32:	f7fd fedd 	bl	80008f0 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b40:	d901      	bls.n	8002b46 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e006      	b.n	8002b54 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002b46:	4b05      	ldr	r3, [pc, #20]	@ (8002b5c <HAL_RTC_WaitForSynchro+0x40>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0ef      	beq.n	8002b32 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40002800 	.word	0x40002800
 8002b60:	0001005c 	.word	0x0001005c

08002b64 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002b70:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <RTC_EnterInitMode+0x64>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d120      	bne.n	8002bbe <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002b7c:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <RTC_EnterInitMode+0x64>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4a11      	ldr	r2, [pc, #68]	@ (8002bc8 <RTC_EnterInitMode+0x64>)
 8002b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b86:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8002b88:	f7fd feb2 	bl	80008f0 <HAL_GetTick>
 8002b8c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002b8e:	e00d      	b.n	8002bac <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002b90:	f7fd feae 	bl	80008f0 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b9e:	d905      	bls.n	8002bac <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002bac:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <RTC_EnterInitMode+0x64>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <RTC_EnterInitMode+0x5a>
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d1e8      	bne.n	8002b90 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40002800 	.word	0x40002800

08002bcc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c44 <RTC_ExitInitMode+0x78>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4a19      	ldr	r2, [pc, #100]	@ (8002c44 <RTC_ExitInitMode+0x78>)
 8002bde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002be2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002be4:	4b17      	ldr	r3, [pc, #92]	@ (8002c44 <RTC_ExitInitMode+0x78>)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10c      	bne.n	8002c0a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff93 	bl	8002b1c <HAL_RTC_WaitForSynchro>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d01e      	beq.n	8002c3a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2203      	movs	r2, #3
 8002c00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	73fb      	strb	r3, [r7, #15]
 8002c08:	e017      	b.n	8002c3a <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <RTC_ExitInitMode+0x78>)
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002c44 <RTC_ExitInitMode+0x78>)
 8002c10:	f023 0320 	bic.w	r3, r3, #32
 8002c14:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff ff80 	bl	8002b1c <HAL_RTC_WaitForSynchro>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2203      	movs	r2, #3
 8002c26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c2e:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <RTC_ExitInitMode+0x78>)
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <RTC_ExitInitMode+0x78>)
 8002c34:	f043 0320 	orr.w	r3, r3, #32
 8002c38:	6193      	str	r3, [r2, #24]
  }

  return status;
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40002800 	.word	0x40002800

08002c48 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                       - This feature is meaningful in case of Low power mode to avoid any RTC software execution after Wake Up.
  *                         That is why when WakeUpAutoClr is set, EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e06f      	b.n	8002d44 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c74:	4b35      	ldr	r3, [pc, #212]	@ (8002d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002c76:	22ca      	movs	r2, #202	@ 0xca
 8002c78:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c7a:	4b34      	ldr	r3, [pc, #208]	@ (8002d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002c7c:	2253      	movs	r2, #83	@ 0x53
 8002c7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8002c80:	4b32      	ldr	r3, [pc, #200]	@ (8002d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	4a31      	ldr	r2, [pc, #196]	@ (8002d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002c86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c8a:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8002c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002c8e:	2204      	movs	r2, #4
 8002c90:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002c92:	4b2e      	ldr	r3, [pc, #184]	@ (8002d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11e      	bne.n	8002cdc <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 8002c9e:	f7fd fe27 	bl	80008f0 <HAL_GetTick>
 8002ca2:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002ca4:	e014      	b.n	8002cd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ca6:	f7fd fe23 	bl	80008f0 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cb4:	d90c      	bls.n	8002cd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cb6:	4b25      	ldr	r3, [pc, #148]	@ (8002d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002cb8:	22ff      	movs	r2, #255	@ 0xff
 8002cba:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e039      	b.n	8002d44 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0e4      	beq.n	8002ca6 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	041a      	lsls	r2, r3, #16
 8002ce0:	491a      	ldr	r1, [pc, #104]	@ (8002d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002ce8:	4b18      	ldr	r3, [pc, #96]	@ (8002d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f023 0207 	bic.w	r2, r3, #7
 8002cf0:	4916      	ldr	r1, [pc, #88]	@ (8002d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	618b      	str	r3, [r1, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8002cfe:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d04:	4a12      	ldr	r2, [pc, #72]	@ (8002d50 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d0a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8002d0e:	e007      	b.n	8002d20 <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002d10:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d16:	4a0e      	ldr	r2, [pc, #56]	@ (8002d50 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8002d20:	4b0a      	ldr	r3, [pc, #40]	@ (8002d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	4a09      	ldr	r2, [pc, #36]	@ (8002d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002d26:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8002d2a:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d2c:	4b07      	ldr	r3, [pc, #28]	@ (8002d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002d2e:	22ff      	movs	r2, #255	@ 0xff
 8002d30:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40002800 	.word	0x40002800
 8002d50:	4002f400 	.word	0x4002f400

08002d54 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e03e      	b.n	8002de8 <HAL_RTCEx_DeactivateWakeUpTimer+0x94>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002df0 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8002d7c:	22ca      	movs	r2, #202	@ 0xca
 8002d7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d80:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8002d82:	2253      	movs	r2, #83	@ 0x53
 8002d84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8002d86:	4b1a      	ldr	r3, [pc, #104]	@ (8002df0 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	4a19      	ldr	r2, [pc, #100]	@ (8002df0 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8002d8c:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 8002d90:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 8002d92:	f7fd fdad 	bl	80008f0 <HAL_GetTick>
 8002d96:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002d98:	e014      	b.n	8002dc4 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d9a:	f7fd fda9 	bl	80008f0 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002da8:	d90c      	bls.n	8002dc4 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002daa:	4b11      	ldr	r3, [pc, #68]	@ (8002df0 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8002dac:	22ff      	movs	r2, #255	@ 0xff
 8002dae:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2203      	movs	r2, #3
 8002db4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e011      	b.n	8002de8 <HAL_RTCEx_DeactivateWakeUpTimer+0x94>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0e4      	beq.n	8002d9a <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dd0:	4b07      	ldr	r3, [pc, #28]	@ (8002df0 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8002dd2:	22ff      	movs	r2, #255	@ 0xff
 8002dd4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40002800 	.word	0x40002800

08002df4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer non-secure interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8002dfc:	4b09      	ldr	r3, [pc, #36]	@ (8002e24 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8002e08:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd fb62 	bl	80004d8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40002800 	.word	0x40002800

08002e28 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	490f      	ldr	r1, [pc, #60]	@ (8002e78 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	490c      	ldr	r1, [pc, #48]	@ (8002e7c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6919      	ldr	r1, [r3, #16]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	041b      	lsls	r3, r3, #16
 8002e60:	430b      	orrs	r3, r1
 8002e62:	4906      	ldr	r1, [pc, #24]	@ (8002e7c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40002800 	.word	0x40002800
 8002e7c:	40003400 	.word	0x40003400

08002e80 <memset>:
 8002e80:	4402      	add	r2, r0
 8002e82:	4603      	mov	r3, r0
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d100      	bne.n	8002e8a <memset+0xa>
 8002e88:	4770      	bx	lr
 8002e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8e:	e7f9      	b.n	8002e84 <memset+0x4>

08002e90 <__libc_init_array>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	4d0d      	ldr	r5, [pc, #52]	@ (8002ec8 <__libc_init_array+0x38>)
 8002e94:	2600      	movs	r6, #0
 8002e96:	4c0d      	ldr	r4, [pc, #52]	@ (8002ecc <__libc_init_array+0x3c>)
 8002e98:	1b64      	subs	r4, r4, r5
 8002e9a:	10a4      	asrs	r4, r4, #2
 8002e9c:	42a6      	cmp	r6, r4
 8002e9e:	d109      	bne.n	8002eb4 <__libc_init_array+0x24>
 8002ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8002ed0 <__libc_init_array+0x40>)
 8002ea2:	2600      	movs	r6, #0
 8002ea4:	4c0b      	ldr	r4, [pc, #44]	@ (8002ed4 <__libc_init_array+0x44>)
 8002ea6:	f000 f817 	bl	8002ed8 <_init>
 8002eaa:	1b64      	subs	r4, r4, r5
 8002eac:	10a4      	asrs	r4, r4, #2
 8002eae:	42a6      	cmp	r6, r4
 8002eb0:	d105      	bne.n	8002ebe <__libc_init_array+0x2e>
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb8:	3601      	adds	r6, #1
 8002eba:	4798      	blx	r3
 8002ebc:	e7ee      	b.n	8002e9c <__libc_init_array+0xc>
 8002ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec2:	3601      	adds	r6, #1
 8002ec4:	4798      	blx	r3
 8002ec6:	e7f2      	b.n	8002eae <__libc_init_array+0x1e>
 8002ec8:	08002f40 	.word	0x08002f40
 8002ecc:	08002f40 	.word	0x08002f40
 8002ed0:	08002f40 	.word	0x08002f40
 8002ed4:	08002f44 	.word	0x08002f44

08002ed8 <_init>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	bf00      	nop
 8002edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ede:	bc08      	pop	{r3}
 8002ee0:	469e      	mov	lr, r3
 8002ee2:	4770      	bx	lr

08002ee4 <_fini>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	bf00      	nop
 8002ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eea:	bc08      	pop	{r3}
 8002eec:	469e      	mov	lr, r3
 8002eee:	4770      	bx	lr
